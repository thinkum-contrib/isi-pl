;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; manuals.lisp

#|
+---------------------------- BEGIN LICENSE BLOCK ---------------------------+
|                                                                            |
| Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
|                                                                            |
| The contents of this file are subject to the Mozilla Public License        |
| Version 1.1 (the "License"); you may not use this file except in           |
| compliance with the License. You may obtain a copy of the License at       |
| http://www.mozilla.org/MPL/                                                |
|                                                                            |
| Software distributed under the License is distributed on an "AS IS" basis, |
| WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
| for the specific language governing rights and limitations under the       |
| License.                                                                   |
|                                                                            |
| The Original Code is the STELLA Programming Language.                      |
|                                                                            |
| The Initial Developer of the Original Code is                              |
| UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
| 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
|                                                                            |
| Portions created by the Initial Developer are Copyright (C) 2001-2006      |
| the Initial Developer. All Rights Reserved.                                |
|                                                                            |
| Contributor(s):                                                            |
|                                                                            |
| Alternatively, the contents of this file may be used under the terms of    |
| either the GNU General Public License Version 2 or later (the "GPL"), or   |
| the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
| in which case the provisions of the GPL or the LGPL are applicable instead |
| of those above. If you wish to allow use of your version of this file only |
| under the terms of either the GPL or the LGPL, and not to allow others to  |
| use your version of this file under the terms of the MPL, indicate your    |
| decision by deleting the provisions above and replace them with the notice |
| and other provisions required by the GPL or the LGPL. If you do not delete |
| the provisions above, a recipient may use your version of this file under  |
| the terms of any one of the MPL, the GPL or the LGPL.                      |
|                                                                            |
+---------------------------- END LICENSE BLOCK -----------------------------+
|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SGT-MANUALS-STELLA-CONS NULL)
(CL:DEFVAR SGT-MANUALS-STELLA-TYPE-SPEC NULL)
(CL:DEFVAR SYM-MANUALS-STELLA-VARIABLE-TYPE-SPECIFIER NULL)
(CL:DEFVAR SYM-MANUALS-STELLA-DOCUMENTATION NULL)
(CL:DEFVAR SYM-MANUALS-STELLA-SLOT-TYPE-SPECIFIER NULL)
(CL:DEFVAR |SYM-MANUALS-STELLA-&REST| NULL)
(CL:DEFVAR |SYM-MANUALS-STELLA-&BODY| NULL)
(CL:DEFVAR SYM-MANUALS-STELLA-METHOD-MACRO? NULL)
(CL:DEFVAR SYM-MANUALS-STELLA-METHOD-COMMAND? NULL)
(CL:DEFVAR SYM-MANUALS-STELLA-METHOD-VARIABLE-ARGUMENTS? NULL)
(CL:DEFVAR SYM-MANUALS-STELLA-METHOD-BODY-ARGUMENT? NULL)
(CL:DEFVAR KWD-MANUALS-INFIX-PARAMETER-LISTS NULL)
(CL:DEFVAR KWD-MANUALS-TEXINFO NULL)
(CL:DEFVAR SGT-MANUALS-STELLA-SLOT NULL)
(CL:DEFVAR SGT-MANUALS-STELLA-GLOBAL-VARIABLE NULL)
(CL:DEFVAR SGT-MANUALS-STELLA-MODULE NULL)
(CL:DEFVAR SYM-MANUALS-UTILITIES-MANUAL-DESCRIBE-OBJECT NULL)
(CL:DEFVAR SYM-MANUALS-UTILITIES-TEXINFO-INSERT-DOC NULL)
(CL:DEFVAR KWD-MANUALS-COMMON-LISP NULL)
(CL:DEFVAR KWD-MANUALS-FUNCTION NULL)
(CL:DEFVAR SYM-MANUALS-UTILITIES-STARTUP-MANUALS NULL)
(CL:DEFVAR SYM-MANUALS-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STARTUP-TIME-PHASE* *MODULE* STANDARD-OUTPUT
  FALSE-WRAPPER NULL-STRING-WRAPPER NULL-INTEGER NIL-LIST NIL EOL
  *CHARACTER-UPCASE-TABLE* NULL-CHARACTER))

;;; (DEFGLOBAL *TEXINFO-STYLE-FEATURES* ...)

(CL:DEFVAR *TEXINFO-STYLE-FEATURES* NULL
  "A list of features that can modulate some aspects of
how certain objects are described.  Currently understood features:
:INFIX-PARAMETER-LISTS.")

;;; (DEFUN (TEXINFO-SPECIAL-CHARACTER? BOOLEAN) ...)

(CL:DEFUN TEXINFO-SPECIAL-CHARACTER? (CH)
  (MEMBER? "@{}" CH))

;;; (DEFUN (TEXINFO-ESCAPE-STRING STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:SIMPLE-STRING) CL:SIMPLE-STRING)
  TEXINFO-ESCAPE-STRING))
(CL:DEFUN TEXINFO-ESCAPE-STRING (STRING)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING STRING))
  #+MCL
  (CL:CHECK-TYPE STRING CL:SIMPLE-STRING)
  (CL:LET*
   ((N-OF-SPECIAL-CHARS 0)
    (ESCAPED-STRING (CL:THE CL:SIMPLE-STRING (CL:COPY-SEQ STRING))))
   (CL:DECLARE (CL:TYPE CL:FIXNUM N-OF-SPECIAL-CHARS)
    (CL:TYPE CL:SIMPLE-STRING ESCAPED-STRING))
   (CL:LET*
    ((CH NULL-CHARACTER) (VECTOR-000 STRING) (INDEX-000 0)
     (LENGTH-000 (CL:THE CL:FIXNUM (CL:LENGTH VECTOR-000))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING VECTOR-000)
     (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
    (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
     (CL:SETQ CH
      (CL:LET ((SELF VECTOR-000) (POSITION INDEX-000))
       (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
        (CL:TYPE CL:FIXNUM POSITION))
       (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
        (CL:THE CL:FIXNUM POSITION))))
     (CL:WHEN (TEXINFO-SPECIAL-CHARACTER? CH)
      (CL:SETQ N-OF-SPECIAL-CHARS (CL:1+ N-OF-SPECIAL-CHARS)))
     (CL:SETQ INDEX-000 (CL:1+ INDEX-000))))
   (CL:WHEN (CL:> N-OF-SPECIAL-CHARS 0)
    (CL:SETQ ESCAPED-STRING
     (CL:THE CL:SIMPLE-STRING
      (CL:COPY-SEQ
       (CL:THE CL:SIMPLE-STRING
        (MAKE-STRING
         (CL:+ (CL:THE CL:FIXNUM (CL:LENGTH STRING))
          N-OF-SPECIAL-CHARS)
         NULL-CHARACTER)))))
    (CL:LET* ((I 0)) (CL:DECLARE (CL:TYPE CL:FIXNUM I))
     (CL:LET*
      ((CH NULL-CHARACTER) (VECTOR-001 STRING) (INDEX-001 0)
       (LENGTH-001 (CL:THE CL:FIXNUM (CL:LENGTH VECTOR-001))))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING VECTOR-001)
       (CL:TYPE CL:FIXNUM INDEX-001 LENGTH-001))
      (CL:LOOP WHILE (CL:< INDEX-001 LENGTH-001) DO
       (CL:SETQ CH
        (CL:LET ((SELF VECTOR-001) (POSITION INDEX-001))
         (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
          (CL:TYPE CL:FIXNUM POSITION))
         (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
          (CL:THE CL:FIXNUM POSITION))))
       (CL:WHEN (TEXINFO-SPECIAL-CHARACTER? CH)
        (CL:LET ((SELF ESCAPED-STRING) (CH #\@) (POSITION I))
         (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
          (CL:TYPE CL:FIXNUM POSITION))
         (SETF
          (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
           (CL:THE CL:FIXNUM POSITION))
          (CL:THE CL:CHARACTER CH)))
        (CL:SETQ I (CL:1+ I)))
       (CL:LET ((SELF ESCAPED-STRING) (CH CH) (POSITION I))
        (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
         (CL:TYPE CL:FIXNUM POSITION))
        (SETF
         (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
          (CL:THE CL:FIXNUM POSITION))
         (CL:THE CL:CHARACTER CH)))
       (CL:SETQ I (CL:1+ I)) (CL:SETQ INDEX-001 (CL:1+ INDEX-001))))))
   (CL:LET ((S ESCAPED-STRING))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING S))
    (CL:THE CL:SIMPLE-STRING S))))

;;; (DEFUN (YIELD-TEXINFO-TYPE-SPEC STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T) CL:SIMPLE-STRING)
  YIELD-TEXINFO-TYPE-SPEC))
(CL:DEFUN YIELD-TEXINFO-TYPE-SPEC (TYPE-SPEC)
  (CL:LET* ((TREE TYPE-SPEC))
   (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE TYPE-SPEC)))
    (CL:COND
     ((CL:EQ TEST-VALUE-000 SGT-MANUALS-STELLA-CONS)
      (CL:PROGN (CL:SETQ TYPE-SPEC TYPE-SPEC)))
     ((SUBTYPE-OF-SYMBOL? TEST-VALUE-000)
      (CL:PROGN (CL:SETQ TREE (WRAP-STRING (%SYMBOL-NAME TYPE-SPEC)))))
     ((SUBTYPE-OF-SURROGATE? TEST-VALUE-000)
      (CL:PROGN (CL:SETQ TREE (WRAP-STRING (%SYMBOL-NAME TYPE-SPEC)))))
     ((SUBTYPE-OF? TEST-VALUE-000 SGT-MANUALS-STELLA-TYPE-SPEC)
      (CL:PROGN (CL:SETQ TREE (YIELD-TYPE-SPEC-TREE TYPE-SPEC))))
     (CL:T
      (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" TEST-VALUE-000
        "' is not a valid case option")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
   (CONCATENATE "@sc{"
    (TEXINFO-ESCAPE-STRING
     (STRING-DOWNCASE
      (CL:IF (STRING? TREE) (%WRAPPER-VALUE TREE) (STRINGIFY TREE))))
    "}")))

;;; (DEFUN (YIELD-TEXINFO-BARE-NAME STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T) CL:SIMPLE-STRING)
  YIELD-TEXINFO-BARE-NAME))
(CL:DEFUN YIELD-TEXINFO-BARE-NAME (NAME)
  (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE NAME)))
   (CL:COND
    ((SUBTYPE-OF-STRING? TEST-VALUE-000)
     (CL:PROGN (%WRAPPER-VALUE NAME)))
    ((SUBTYPE-OF-SYMBOL? TEST-VALUE-000)
     (CL:PROGN
      (TEXINFO-ESCAPE-STRING (STRING-DOWNCASE (%SYMBOL-NAME NAME)))))
    ((CL:EQ TEST-VALUE-000 SGT-MANUALS-STELLA-CONS)
     (CL:PROGN (YIELD-TEXINFO-BARE-NAME (%%VALUE NAME))))
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" TEST-VALUE-000
       "' is not a valid case option")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))

;;; (DEFUN (YIELD-TEXINFO-PARAMETER-NAME STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:SIMPLE-STRING) CL:SIMPLE-STRING)
  YIELD-TEXINFO-PARAMETER-NAME))
(CL:DEFUN YIELD-TEXINFO-PARAMETER-NAME (NAME)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING NAME))
  #+MCL
  (CL:CHECK-TYPE NAME CL:SIMPLE-STRING)
  (CL:LET* ((TEST-VALUE-000 CL:NIL))
   (CL:LET* ((FOUND?-000 CL:NIL))
    (CL:LET*
     ((CH NULL-CHARACTER) (VECTOR-000 NAME) (INDEX-000 0)
      (LENGTH-000 (CL:THE CL:FIXNUM (CL:LENGTH VECTOR-000))))
     (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING VECTOR-000)
      (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
     (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
      (CL:SETQ CH
       (CL:LET ((SELF VECTOR-000) (POSITION INDEX-000))
        (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
         (CL:TYPE CL:FIXNUM POSITION))
        (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
         (CL:THE CL:FIXNUM POSITION))))
      (CL:WHEN
       (CL:NOT
        (CL:EQL CH
         (CL:LET
          ((SELF *CHARACTER-UPCASE-TABLE*)
           (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE CH))))
          (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
           (CL:TYPE CL:FIXNUM POSITION))
          (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
           (CL:THE CL:FIXNUM POSITION)))))
       (CL:SETQ FOUND?-000 CL:T) (CL:RETURN))
      (CL:SETQ INDEX-000 (CL:1+ INDEX-000))))
    (CL:SETQ TEST-VALUE-000 FOUND?-000))
   (CL:SETQ TEST-VALUE-000 (CL:NOT TEST-VALUE-000))
   (CL:WHEN TEST-VALUE-000 (CL:SETQ NAME (STRING-DOWNCASE NAME))))
  (TEXINFO-ESCAPE-STRING NAME))

;;; (DEFUN (YIELD-TEXINFO-CONSTANT STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T) CL:SIMPLE-STRING)
  YIELD-TEXINFO-CONSTANT))
(CL:DEFUN YIELD-TEXINFO-CONSTANT (NAME)
  (CONCATENATE "@code{"
   (CONCATENATE
    (TEXINFO-ESCAPE-STRING (STRING-DOWNCASE (%SYMBOL-NAME NAME))) "}")))

;;; (DEFGLOBAL *TEXINFO-WORD-DELIMITERS* ...)

(CL:DEFVAR *TEXINFO-WORD-DELIMITERS* STELLA::NULL-STRING)
(CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING *TEXINFO-WORD-DELIMITERS*))

;;; (DEFUN (TEXINFO-GET-PARAGRAPH-COMMAND STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:SIMPLE-STRING CL:FIXNUM) CL:SIMPLE-STRING)
  TEXINFO-GET-PARAGRAPH-COMMAND))
(CL:DEFUN TEXINFO-GET-PARAGRAPH-COMMAND (STRING START)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING STRING)
   (CL:TYPE CL:FIXNUM START))
  #+MCL
  (CL:CHECK-TYPE STRING CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE START CL:FIXNUM)
  (CL:LET* ((COMMAND-INDEX 0))
   (CL:DECLARE (CL:TYPE CL:FIXNUM COMMAND-INDEX))
   (CL:LOOP (CL:SETQ START (CL:1+ START))
    (CL:CASE
     (CL:LET ((SELF STRING) (POSITION START))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
       (CL:THE CL:FIXNUM POSITION)))
     (#\  (CL:SETQ COMMAND-INDEX (CL:1+ COMMAND-INDEX)))
     ((#\Linefeed #\Return) (CL:RETURN))
     (CL:OTHERWISE
      (CL:RETURN-FROM TEXINFO-GET-PARAGRAPH-COMMAND
       STELLA::NULL-STRING))))
   (CL:CASE COMMAND-INDEX (0 "end") (1 "example")
    (CL:OTHERWISE "unknown"))))

;;; (DEFUN TEXINFO-DESCRIBE-DOCUMENTATION-STRING ...)

(CL:DEFUN TEXINFO-DESCRIBE-DOCUMENTATION-STRING (OBJECT DOCUMENTATION STREAM PARAMETERS)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING DOCUMENTATION))
  #+MCL
  (CL:CHECK-TYPE DOCUMENTATION CL:SIMPLE-STRING)
  (CL:LET*
   ((QUOTED-NAME STELLA::NULL-STRING)
    (CLOSING-QUOTE-POSITION NULL-INTEGER) (BEGINNING-OF-LINE? CL:T)
    (PARAGRAPH-COMMAND STELLA::NULL-STRING)
    (PENDING-PARAGRAPH-COMMANDS (LIST)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING QUOTED-NAME PARAGRAPH-COMMAND)
    (CL:TYPE CL:FIXNUM CLOSING-QUOTE-POSITION))
   (CL:WHEN (CL:EQ PARAMETERS NULL) (CL:SETQ PARAMETERS NIL-LIST))
   (CL:WHEN (CL:EQ DOCUMENTATION STELLA::NULL-STRING)
    (CL:SETQ DOCUMENTATION "Not documented."))
   (CL:WHEN (CL:NOT (CL:EQ DOCUMENTATION STELLA::NULL-STRING))
    (CL:LET*
     ((CH NULL-CHARACTER) (VECTOR-000 DOCUMENTATION) (INDEX-000 0)
      (LENGTH-000 (CL:THE CL:FIXNUM (CL:LENGTH VECTOR-000)))
      (I NULL-INTEGER) (ITER-000 0))
     (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING VECTOR-000)
      (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000 I ITER-000))
     (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
      (CL:SETQ CH
       (CL:LET ((SELF VECTOR-000) (POSITION INDEX-000))
        (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
         (CL:TYPE CL:FIXNUM POSITION))
        (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
         (CL:THE CL:FIXNUM POSITION))))
      (CL:SETQ I ITER-000)
      (CL:TAGBODY
       (CL:CASE CH
        ((#\` #\')
         (CL:COND
          ((CL:= I CLOSING-QUOTE-POSITION)
           (%%PRINT-STREAM (%NATIVE-STREAM STREAM) "}")
           (CL:GO :CONTINUE))
          ((CL:OR (CL:= I 0)
            (MEMBER? *TEXINFO-WORD-DELIMITERS*
             (CL:LET ((SELF DOCUMENTATION) (POSITION (CL:1- I)))
              (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
               (CL:TYPE CL:FIXNUM POSITION))
              (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
               (CL:THE CL:FIXNUM POSITION)))))
           (CL:SETQ CLOSING-QUOTE-POSITION
            (POSITION DOCUMENTATION #\' (CL:1+ I)))
           (CL:WHEN (DEFINED? CLOSING-QUOTE-POSITION)
            (CL:SETQ QUOTED-NAME
             (STRING-UPCASE
              (SUBSEQUENCE DOCUMENTATION (CL:1+ I)
               CLOSING-QUOTE-POSITION)))
            (CL:LET* ((FOUND?-000 CL:NIL))
             (CL:LET*
              ((PNAME NULL) (ITER-001 (%THE-CONS-LIST PARAMETERS)))
              (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
               (CL:SETQ PNAME (%%VALUE ITER-001))
               (CL:WHEN (STRING-EQL? (%SYMBOL-NAME PNAME) QUOTED-NAME)
                (CL:SETQ FOUND?-000 CL:T) (CL:RETURN))
               (CL:SETQ ITER-001 (%%REST ITER-001))))
             (CL:IF FOUND?-000
              (%%PRINT-STREAM (%NATIVE-STREAM STREAM) "@var{")
              (%%PRINT-STREAM (%NATIVE-STREAM STREAM) "@code{")))
            (CL:GO :CONTINUE))))
         (%%PRINT-STREAM (%NATIVE-STREAM STREAM) CH))
        ((#\Linefeed #\Return) (CL:SETQ BEGINNING-OF-LINE? CL:T)
         (%%PRINT-STREAM (%NATIVE-STREAM STREAM) CH) (CL:GO :CONTINUE))
        (#\Tab
         (CL:LET* ((TEST-VALUE-000 CL:NIL))
          (CL:SETQ TEST-VALUE-000 BEGINNING-OF-LINE?)
          (CL:WHEN TEST-VALUE-000
           (CL:LET* ()
            (CL:SETQ PARAGRAPH-COMMAND
             (TEXINFO-GET-PARAGRAPH-COMMAND DOCUMENTATION I))
            (CL:SETQ TEST-VALUE-000
             (CL:NOT (CL:EQ PARAGRAPH-COMMAND STELLA::NULL-STRING)))))
          (CL:IF TEST-VALUE-000
           (CL:PROGN
            (CL:COND
             ((STRING-EQL? PARAGRAPH-COMMAND "end")
              (CL:IF (EMPTY? PENDING-PARAGRAPH-COMMANDS)
               (CL:PROGN
                (CL:WARN "Mismatched @end command on `~A'" OBJECT)
                (CL:SETQ PARAGRAPH-COMMAND "mismatched @end command"))
               (CL:SETQ PARAGRAPH-COMMAND
                (%WRAPPER-VALUE (POP PENDING-PARAGRAPH-COMMANDS))))
              (%%PRINT-STREAM (%NATIVE-STREAM STREAM) "@end "
               PARAGRAPH-COMMAND EOL))
             (CL:T
              (PUSH PENDING-PARAGRAPH-COMMANDS
               (WRAP-STRING PARAGRAPH-COMMAND))
              (%%PRINT-STREAM (%NATIVE-STREAM STREAM) EOL "@"
               PARAGRAPH-COMMAND))))
           (CL:PROGN (%%PRINT-STREAM (%NATIVE-STREAM STREAM) CH)))))
        (CL:OTHERWISE
         (CL:IF (TEXINFO-SPECIAL-CHARACTER? CH)
          (%%PRINT-STREAM (%NATIVE-STREAM STREAM) "@" CH)
          (%%PRINT-STREAM (%NATIVE-STREAM STREAM) CH))))
       (CL:SETQ BEGINNING-OF-LINE? CL:NIL) :CONTINUE)
      (CL:SETQ INDEX-000 (CL:1+ INDEX-000))
      (CL:SETQ ITER-000 (CL:1+ ITER-000)))))
   (%%PRINT-STREAM (%NATIVE-STREAM STREAM) EOL)))

;;; (DEFUN TEXINFO-DESCRIBE-VARIABLE ...)

(CL:DEFUN TEXINFO-DESCRIBE-VARIABLE (VARIABLE STREAM)
  (%%PRINT-STREAM (%NATIVE-STREAM STREAM) "@defvr ")
  (CL:COND
   ((%VARIABLE-CONSTANT? VARIABLE)
    (%%PRINT-STREAM (%NATIVE-STREAM STREAM) "Constant "))
   ((%VARIABLE-SPECIAL? VARIABLE)
    (%%PRINT-STREAM (%NATIVE-STREAM STREAM) "@w{Special Variable} "))
   (CL:T (%%PRINT-STREAM (%NATIVE-STREAM STREAM) "Variable ")))
  (%%PRINT-STREAM (%NATIVE-STREAM STREAM)
   (YIELD-TEXINFO-BARE-NAME (%VARIABLE-NAME VARIABLE)) " : "
   (YIELD-TEXINFO-TYPE-SPEC
    (CL:IF
     (CL:NOT
      (CL:EQ
       (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS VARIABLE)
        SYM-MANUALS-STELLA-VARIABLE-TYPE-SPECIFIER NULL)
       NULL))
     (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS VARIABLE)
      SYM-MANUALS-STELLA-VARIABLE-TYPE-SPECIFIER NULL)
     (%VARIABLE-TYPE VARIABLE)))
   EOL)
  (TEXINFO-DESCRIBE-DOCUMENTATION-STRING VARIABLE
   (%DOCUMENTATION VARIABLE) STREAM NULL)
  (%%PRINT-STREAM (%NATIVE-STREAM STREAM) "@end defvr" EOL))

;;; (DEFUN TEXINFO-DESCRIBE-CLASS ...)

(CL:DEFUN TEXINFO-DESCRIBE-CLASS (CLASS STREAM)
  (%%PRINT-STREAM (%NATIVE-STREAM STREAM) "@deftp Class "
   (YIELD-TEXINFO-TYPE-SPEC (CLASS-SYMBOL CLASS)))
  (CL:LET*
   ((SUPER NULL)
    (ITER-000 (%THE-CONS-LIST (%CLASS-DIRECT-SUPERS CLASS)))
    (I NULL-INTEGER) (ITER-001 1))
   (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-001))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ SUPER (%%VALUE ITER-000)) (CL:SETQ I ITER-001)
    (CL:IF (CL:= I 1) (%%PRINT-STREAM (%NATIVE-STREAM STREAM) " : ")
     (%%PRINT-STREAM (%NATIVE-STREAM STREAM) ", "))
    (%%PRINT-STREAM (%NATIVE-STREAM STREAM)
     (YIELD-TEXINFO-TYPE-SPEC SUPER))
    (CL:SETQ ITER-000 (%%REST ITER-000))
    (CL:SETQ ITER-001 (CL:1+ ITER-001))))
  (%%PRINT-STREAM (%NATIVE-STREAM STREAM) EOL)
  (TEXINFO-DESCRIBE-DOCUMENTATION-STRING CLASS
   (%WRAPPER-VALUE
    (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS CLASS)
     SYM-MANUALS-STELLA-DOCUMENTATION NULL-STRING-WRAPPER))
   STREAM NIL-LIST)
  (CL:LET*
   ((SLOT NULL) (ITER-002 (%THE-CONS-LIST (%CLASS-LOCAL-SLOTS CLASS))))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-002 NIL)) DO
    (CL:SETQ SLOT (%%VALUE ITER-002))
    (CL:WHEN (CL:AND (STORAGE-SLOT? SLOT) (PARAMETER-SLOT? SLOT))
     (TEXINFO-DESCRIBE-SLOT SLOT STREAM))
    (CL:SETQ ITER-002 (%%REST ITER-002))))
  (CL:LET*
   ((SLOT NULL) (ITER-003 (%THE-CONS-LIST (%CLASS-LOCAL-SLOTS CLASS))))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-003 NIL)) DO
    (CL:SETQ SLOT (%%VALUE ITER-003))
    (CL:WHEN (CL:AND (STORAGE-SLOT? SLOT) (NATIVE-SLOT? SLOT))
     (TEXINFO-DESCRIBE-SLOT SLOT STREAM))
    (CL:SETQ ITER-003 (%%REST ITER-003))))
  (%%PRINT-STREAM (%NATIVE-STREAM STREAM) "@end deftp" EOL))

;;; (DEFUN TEXINFO-DESCRIBE-SLOT ...)

(CL:DEFUN TEXINFO-DESCRIBE-SLOT (SLOT STREAM)
  (CL:LET* ((CATEGORY "Slot"))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING CATEGORY))
   (CL:LET*
    ((TEMP-000
      (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS SLOT)
       SYM-MANUALS-STELLA-SLOT-TYPE-SPECIFIER NULL)))
    (CL:LET*
     ((TYPE
       (CL:IF (CL:NOT (CL:EQ TEMP-000 NULL)) TEMP-000
        (%SLOT-BASE-TYPE SLOT))))
     (CL:COND
      ((PARAMETER-SLOT? SLOT) (CL:SETQ CATEGORY "@w{Class Parameter}"))
      ((%ABSTRACT? SLOT) (CL:SETQ CATEGORY "@w{Abstract Slot}")))
     (%%PRINT-STREAM (%NATIVE-STREAM STREAM) "@defcv " CATEGORY " {} "
      (YIELD-TEXINFO-BARE-NAME (%SLOT-NAME SLOT)) " : "
      (YIELD-TEXINFO-TYPE-SPEC TYPE) EOL)
     (TEXINFO-DESCRIBE-DOCUMENTATION-STRING SLOT
      (%WRAPPER-VALUE
       (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS SLOT)
        SYM-MANUALS-STELLA-DOCUMENTATION NULL-STRING-WRAPPER))
      STREAM NIL-LIST)
     (%%PRINT-STREAM (%NATIVE-STREAM STREAM) "@end defcv" EOL)))))

;;; (DEFUN (TEXINFO-GET-REAL-METHOD-PARAMETER-NAMES (LIST OF STRING-WRAPPER)) ...)

(CL:DEFUN TEXINFO-GET-REAL-METHOD-PARAMETER-NAMES (METHOD)
  (CL:LET*
   ((RESULT (LIST))
    (DOCUMENTATION
     (%WRAPPER-VALUE
      (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS METHOD)
       SYM-MANUALS-STELLA-DOCUMENTATION NULL-STRING-WRAPPER)))
    (P-NAME STELLA::NULL-STRING) (P-NAME-LENGTH NULL-INTEGER)
    (START NULL-INTEGER) (END NULL-INTEGER))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING DOCUMENTATION P-NAME)
    (CL:TYPE CL:FIXNUM P-NAME-LENGTH START END))
   (CL:WHEN (CL:EQ DOCUMENTATION STELLA::NULL-STRING)
    (CL:SETQ DOCUMENTATION ""))
   (CL:SETQ END (CL:1- (CL:THE CL:FIXNUM (CL:LENGTH DOCUMENTATION))))
   (CL:LET*
    ((PARAMETER NULL)
     (ITER-000 (%THE-CONS-LIST (METHOD-PARAMETER-NAMES METHOD)))
     (COLLECT-000 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ PARAMETER (%%VALUE ITER-000))
     (CL:SETQ P-NAME (%SYMBOL-NAME PARAMETER))
     (CL:SETQ P-NAME-LENGTH (CL:THE CL:FIXNUM (CL:LENGTH P-NAME)))
     (CL:LET* ((VALUE-000 NULL-INTEGER))
      (CL:DECLARE (CL:TYPE CL:FIXNUM VALUE-000))
      (CL:LET*
       ((I NULL-INTEGER)
        (ITER-001 (INTERVAL 1 (CL:- END P-NAME-LENGTH))))
       (CL:DECLARE (CL:TYPE CL:FIXNUM I))
       (CL:LOOP WHILE (NEXT? ITER-001) DO (CL:SETQ I (%VALUE ITER-001))
        (CL:LET* ((TEST-VALUE-000 CL:NIL))
         (CL:SETQ TEST-VALUE-000
          (CL:OR
           (CL:EQL
            (CL:LET ((SELF DOCUMENTATION) (POSITION (CL:1- I)))
             (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
              (CL:TYPE CL:FIXNUM POSITION))
             (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
              (CL:THE CL:FIXNUM POSITION)))
            #\`)
           (CL:EQL
            (CL:LET ((SELF DOCUMENTATION) (POSITION (CL:1- I)))
             (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
              (CL:TYPE CL:FIXNUM POSITION))
             (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
              (CL:THE CL:FIXNUM POSITION)))
            #\')))
         (CL:WHEN TEST-VALUE-000
          (CL:SETQ TEST-VALUE-000
           (CL:EQL
            (CL:LET
             ((SELF DOCUMENTATION) (POSITION (CL:+ I P-NAME-LENGTH)))
             (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
              (CL:TYPE CL:FIXNUM POSITION))
             (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
              (CL:THE CL:FIXNUM POSITION)))
            #\'))
          (CL:WHEN TEST-VALUE-000
           (CL:LET* ((ALWAYS?-000 CL:T))
            (CL:LET*
             ((CH NULL-CHARACTER) (VECTOR-000 P-NAME) (INDEX-000 0)
              (LENGTH-000 (CL:THE CL:FIXNUM (CL:LENGTH VECTOR-000)))
              (J NULL-INTEGER) (ITER-002 0)
              (UPPER-BOUND-000 (CL:1- P-NAME-LENGTH)))
             (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING VECTOR-000)
              (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000 J ITER-002
               UPPER-BOUND-000))
             (CL:LOOP WHILE
              (CL:AND (CL:< INDEX-000 LENGTH-000)
               (CL:<= ITER-002 UPPER-BOUND-000))
              DO
              (CL:SETQ CH
               (CL:LET ((SELF VECTOR-000) (POSITION INDEX-000))
                (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
                 (CL:TYPE CL:FIXNUM POSITION))
                (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
                 (CL:THE CL:FIXNUM POSITION))))
              (CL:SETQ J ITER-002)
              (CL:WHEN
               (CL:NOT
                (CL:EQL
                 (CL:LET
                  ((SELF *CHARACTER-UPCASE-TABLE*)
                   (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE CH))))
                  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
                   (CL:TYPE CL:FIXNUM POSITION))
                  (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
                   (CL:THE CL:FIXNUM POSITION)))
                 (CL:LET
                  ((SELF *CHARACTER-UPCASE-TABLE*)
                   (POSITION
                    (CL:THE CL:FIXNUM
                     (CL:CHAR-CODE
                      (CL:LET
                       ((SELF DOCUMENTATION) (POSITION (CL:+ I J)))
                       (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
                        (CL:TYPE CL:FIXNUM POSITION))
                       (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
                        (CL:THE CL:FIXNUM POSITION)))))))
                  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
                   (CL:TYPE CL:FIXNUM POSITION))
                  (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
                   (CL:THE CL:FIXNUM POSITION)))))
               (CL:SETQ ALWAYS?-000 CL:NIL) (CL:RETURN))
              (CL:SETQ INDEX-000 (CL:1+ INDEX-000))
              (CL:SETQ ITER-002 (CL:1+ ITER-002))))
            (CL:SETQ TEST-VALUE-000 ALWAYS?-000))))
         (CL:WHEN TEST-VALUE-000 (CL:SETQ VALUE-000 I) (CL:RETURN)))))
      (CL:SETQ START VALUE-000))
     (CL:WHEN (DEFINED? START)
      (CL:SETQ P-NAME
       (SUBSEQUENCE DOCUMENTATION START (CL:+ START P-NAME-LENGTH))))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN (CL:SETQ COLLECT-000 (CONS (WRAP-STRING P-NAME) NIL))
       (CL:IF (CL:EQ (%THE-CONS-LIST RESULT) NIL)
        (CL:SETF (%THE-CONS-LIST RESULT) COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST (%THE-CONS-LIST RESULT)
         COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000) (CONS (WRAP-STRING P-NAME) NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   RESULT))

;;; (DEFUN (TEXINFO-GET-REAL-METHOD-PARAMETERS-AND-TYPES (LIST OF STRING-WRAPPER) LIST LIST) ...)

(CL:DEFUN TEXINFO-GET-REAL-METHOD-PARAMETERS-AND-TYPES (METHOD)
  (CL:LET*
   ((STRINGIFIED-SOURCE (%METHOD-STRINGIFIED-SOURCE METHOD))
    (REAL-PARAMETER-NAMES
     (TEXINFO-GET-REAL-METHOD-PARAMETER-NAMES METHOD))
    (REAL-PARAMETER-TYPES (LIST)) (REAL-RETURN-TYPES (LIST))
    (DEFINITION-TREE NULL) (RETURN-TYPES-TREE NIL)
    (PARAMETERS-TREE NIL))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING STRINGIFIED-SOURCE))
   (CL:LET*
    ((P-TYPE NULL)
     (ITER-000
      (%THE-CONS-LIST (METHOD-PARAMETER-TYPE-SPECIFIERS METHOD)))
     (COLLECT-000 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ P-TYPE (%%VALUE ITER-000))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-000 (CONS (YIELD-TYPE-SPEC-TREE P-TYPE) NIL))
       (CL:IF (CL:EQ (%THE-CONS-LIST REAL-PARAMETER-TYPES) NIL)
        (CL:SETF (%THE-CONS-LIST REAL-PARAMETER-TYPES) COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST
         (%THE-CONS-LIST REAL-PARAMETER-TYPES) COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000)
        (CONS (YIELD-TYPE-SPEC-TREE P-TYPE) NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:LET*
    ((RTYPE NULL)
     (ITER-001 (%THE-CONS-LIST (METHOD-RETURN-TYPE-SPECIFIERS METHOD)))
     (COLLECT-001 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
     (CL:SETQ RTYPE (%%VALUE ITER-001))
     (CL:IF (CL:EQ COLLECT-001 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-001 (CONS (YIELD-TYPE-SPEC-TREE RTYPE) NIL))
       (CL:IF (CL:EQ (%THE-CONS-LIST REAL-RETURN-TYPES) NIL)
        (CL:SETF (%THE-CONS-LIST REAL-RETURN-TYPES) COLLECT-001)
        (ADD-CONS-TO-END-OF-CONS-LIST
         (%THE-CONS-LIST REAL-RETURN-TYPES) COLLECT-001)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-001)
        (CONS (YIELD-TYPE-SPEC-TREE RTYPE) NIL))
       (CL:SETQ COLLECT-001 (%%REST COLLECT-001))))
     (CL:SETQ ITER-001 (%%REST ITER-001))))
   (CL:WHEN (CL:NOT (CL:EQ STRINGIFIED-SOURCE STELLA::NULL-STRING))
    (CL:SETQ DEFINITION-TREE
     (READ-S-EXPRESSION-FROM-STRING STRINGIFIED-SOURCE))
    (CL:WHEN (CONS? (%%VALUE (%%REST DEFINITION-TREE)))
     (CL:SETQ RETURN-TYPES-TREE
      (%%REST (%%VALUE (%%REST DEFINITION-TREE)))))
    (CL:SETQ PARAMETERS-TREE
     (%%VALUE (%%REST (%%REST DEFINITION-TREE))))
    (CL:SETQ PARAMETERS-TREE
     (REMOVE PARAMETERS-TREE |SYM-MANUALS-STELLA-&REST|))
    (CL:SETQ PARAMETERS-TREE
     (REMOVE PARAMETERS-TREE |SYM-MANUALS-STELLA-&BODY|))
    (CL:LET*
     ((PTREE NULL) (ITER-002 PARAMETERS-TREE)
      (IT (ALLOCATE-ITERATOR REAL-PARAMETER-TYPES)))
     (CL:LOOP WHILE (CL:AND (CL:NOT (CL:EQ ITER-002 NIL)) (NEXT? IT))
      DO (CL:SETQ PTREE (%%VALUE ITER-002))
      (VALUE-SETTER IT (LAST PTREE))
      (CL:SETQ ITER-002 (%%REST ITER-002))))
    (CL:LET*
     ((RTREE NULL) (ITER-003 RETURN-TYPES-TREE)
      (IT (ALLOCATE-ITERATOR REAL-RETURN-TYPES)))
     (CL:LOOP WHILE (CL:AND (CL:NOT (CL:EQ ITER-003 NIL)) (NEXT? IT))
      DO (CL:SETQ RTREE (%%VALUE ITER-003)) (VALUE-SETTER IT RTREE)
      (CL:SETQ ITER-003 (%%REST ITER-003)))))
   (CL:VALUES REAL-PARAMETER-NAMES REAL-PARAMETER-TYPES
    REAL-RETURN-TYPES)))

;;; (DEFUN TEXINFO-DESCRIBE-METHOD ...)

(CL:DEFUN TEXINFO-DESCRIBE-METHOD (METHOD STREAM)
  (CL:LET* ((CATEGORY "Function") (ENDCMD "@end deffn"))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING CATEGORY ENDCMD))
   (CL:COND
    ((%WRAPPER-VALUE
      (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS METHOD)
       SYM-MANUALS-STELLA-METHOD-MACRO? FALSE-WRAPPER))
     (CL:SETQ CATEGORY "Macro"))
    ((%WRAPPER-VALUE
      (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS METHOD)
       SYM-MANUALS-STELLA-METHOD-COMMAND? FALSE-WRAPPER))
     (CL:SETQ CATEGORY "Command"))
    ((CL:NOT (%METHOD-FUNCTION? METHOD)) (CL:SETQ CATEGORY "Method")))
   (CL:WHEN
    (CL:NOT
     (CL:OR (METHOD-EVALUATE-ARGUMENTS? METHOD)
      (%WRAPPER-VALUE
       (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS METHOD)
        SYM-MANUALS-STELLA-METHOD-MACRO? FALSE-WRAPPER))))
    (CL:SETQ CATEGORY (CONCATENATE "N-" CATEGORY)))
   (CL:COND
    ((CL:NOT (%METHOD-FUNCTION? METHOD))
     (%%PRINT-STREAM (%NATIVE-STREAM STREAM) "@defmethod "
      (YIELD-TEXINFO-TYPE-SPEC (OWNER METHOD)) " "
      (YIELD-TEXINFO-BARE-NAME (%SLOT-NAME METHOD)) " ")
     (CL:SETQ ENDCMD "@end defmethod"))
    (CL:T
     (%%PRINT-STREAM (%NATIVE-STREAM STREAM) "@deffn " CATEGORY " "
      (YIELD-TEXINFO-BARE-NAME (%SLOT-NAME METHOD)) " ")
     (CL:SETQ ENDCMD "@end deffn")))
   (%%PRINT-STREAM (%NATIVE-STREAM STREAM) "(")
   (CL:LET*
    ((PARAMETER-NAMES NULL) (PARAMETER-TYPES NULL) (RETURNTYPES NULL))
    (CL:MULTIPLE-VALUE-SETQ
     (PARAMETER-NAMES PARAMETER-TYPES RETURNTYPES)
     (TEXINFO-GET-REAL-METHOD-PARAMETERS-AND-TYPES METHOD))
    (CL:LET*
     ((N-OF-ARGUMENTS (LENGTH PARAMETER-NAMES))
      (MODIFIER STELLA::NULL-STRING))
     (CL:DECLARE (CL:TYPE CL:FIXNUM N-OF-ARGUMENTS)
      (CL:TYPE CL:SIMPLE-STRING MODIFIER))
     (CL:LET*
      ((P-NAME NULL) (ITER-000 (%THE-CONS-LIST PARAMETER-NAMES))
       (P-TYPE NULL) (ITER-001 (%THE-CONS-LIST PARAMETER-TYPES))
       (I NULL-INTEGER) (ITER-002 1))
      (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-002))
      (CL:LOOP WHILE
       (CL:AND (CL:NOT (CL:EQ ITER-000 NIL))
        (CL:NOT (CL:EQ ITER-001 NIL)))
       DO (CL:SETQ P-NAME (%%VALUE ITER-000))
       (CL:SETQ P-TYPE (%%VALUE ITER-001)) (CL:SETQ I ITER-002)
       (CL:SETQ MODIFIER STELLA::NULL-STRING)
       (CL:WHEN (CL:= I N-OF-ARGUMENTS)
        (CL:WHEN
         (%WRAPPER-VALUE
          (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS METHOD)
           SYM-MANUALS-STELLA-METHOD-VARIABLE-ARGUMENTS?
           FALSE-WRAPPER))
         (CL:SETQ MODIFIER "&rest"))
        (CL:WHEN
         (%WRAPPER-VALUE
          (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS METHOD)
           SYM-MANUALS-STELLA-METHOD-BODY-ARGUMENT? FALSE-WRAPPER))
         (CL:SETQ MODIFIER "&body")))
       (CL:IF (CL:AND (CL:= I 1) (STRING-EQL? CATEGORY "Method"))
        (%%PRINT-STREAM (%NATIVE-STREAM STREAM)
         (YIELD-TEXINFO-PARAMETER-NAME (%WRAPPER-VALUE P-NAME)))
        (TEXINFO-DESCRIBE-TYPE-DECLARATION (%WRAPPER-VALUE P-NAME)
         P-TYPE MODIFIER STREAM))
       (CL:WHEN (CL:< I N-OF-ARGUMENTS)
        (CL:IF
         (MEMBER? *TEXINFO-STYLE-FEATURES*
          KWD-MANUALS-INFIX-PARAMETER-LISTS)
         (%%PRINT-STREAM (%NATIVE-STREAM STREAM) ", ")
         (%%PRINT-STREAM (%NATIVE-STREAM STREAM) " ")))
       (CL:SETQ ITER-000 (%%REST ITER-000))
       (CL:SETQ ITER-001 (%%REST ITER-001))
       (CL:SETQ ITER-002 (CL:1+ ITER-002))))
     (%%PRINT-STREAM (%NATIVE-STREAM STREAM) ")")
     (%%PRINT-STREAM (%NATIVE-STREAM STREAM) " : ")
     (CL:LET* ((RTYPE NULL) (ITER-003 (%THE-CONS-LIST RETURNTYPES)))
      (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-003 NIL)) DO
       (CL:SETQ RTYPE (%%VALUE ITER-003))
       (%%PRINT-STREAM (%NATIVE-STREAM STREAM)
        (YIELD-TEXINFO-TYPE-SPEC RTYPE) " ")
       (CL:SETQ ITER-003 (%%REST ITER-003))))
     (%%PRINT-STREAM (%NATIVE-STREAM STREAM) EOL)
     (TEXINFO-DESCRIBE-DOCUMENTATION-STRING METHOD
      (%WRAPPER-VALUE
       (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS METHOD)
        SYM-MANUALS-STELLA-DOCUMENTATION NULL-STRING-WRAPPER))
      STREAM (METHOD-PARAMETER-NAMES METHOD))
     (%%PRINT-STREAM (%NATIVE-STREAM STREAM) ENDCMD EOL)))))

;;; (DEFUN TEXINFO-DESCRIBE-TYPE-DECLARATION ...)

(CL:DEFUN TEXINFO-DESCRIBE-TYPE-DECLARATION (PARAMETER TYPE MODIFIER STREAM)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING PARAMETER MODIFIER))
  #+MCL
  (CL:CHECK-TYPE PARAMETER CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE MODIFIER CL:SIMPLE-STRING)
  (%%PRINT-STREAM (%NATIVE-STREAM STREAM) "@w{")
  (CL:WHEN (CL:NOT (CL:EQ MODIFIER STELLA::NULL-STRING))
   (%%PRINT-STREAM (%NATIVE-STREAM STREAM) MODIFIER " "))
  (CL:LET* ((*PRINTREADABLY?* CL:T))
   (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
   (CL:COND
    ((MEMBER? *TEXINFO-STYLE-FEATURES*
      KWD-MANUALS-INFIX-PARAMETER-LISTS)
     (%%PRINT-STREAM (%NATIVE-STREAM STREAM)
      (YIELD-TEXINFO-PARAMETER-NAME PARAMETER) " : "
      (YIELD-TEXINFO-TYPE-SPEC TYPE)))
    (CL:T
     (%%PRINT-STREAM (%NATIVE-STREAM STREAM) "("
      (YIELD-TEXINFO-PARAMETER-NAME PARAMETER) " "
      (YIELD-TEXINFO-TYPE-SPEC TYPE) ")")))
   (%%PRINT-STREAM (%NATIVE-STREAM STREAM) "}")))

;;; (DEFUN TEXINFO-DESCRIBE-UNIMPLEMENTED-OBJECT ...)

(CL:DEFUN TEXINFO-DESCRIBE-UNIMPLEMENTED-OBJECT (SPECIFICATION STREAM)
  (%%PRINT-STREAM (%NATIVE-STREAM STREAM) "@deffn ??? "
   (YIELD-TEXINFO-BARE-NAME SPECIFICATION) EOL "Not yet implemented."
   EOL "@end deffn" EOL))

;;; (DEFSPECIAL *MANUAL-OUTPUT-LANGUAGE* ...)

(CL:DEFVAR *MANUAL-OUTPUT-LANGUAGE* NULL)

;;; (DEFGLOBAL *DOCUMENTED-OBJECTS-REGISTRY* ...)

(CL:DEFVAR *DOCUMENTED-OBJECTS-REGISTRY* NULL)

;;; (DEFUN REGISTER-DOCUMENTED-OBJECT ...)

(CL:DEFUN REGISTER-DOCUMENTED-OBJECT (OBJECT)
  (INSERT-AT *DOCUMENTED-OBJECTS-REGISTRY* OBJECT OBJECT))

;;; (DEFUN (ALREADY-DOCUMENTED-OBJECT? BOOLEAN) ...)

(CL:DEFUN ALREADY-DOCUMENTED-OBJECT? (OBJECT)
  (CL:NOT (CL:EQ (LOOKUP *DOCUMENTED-OBJECTS-REGISTRY* OBJECT) NULL)))

;;; (DEFUN CLEAR-DOCUMENTED-OBJECTS-REGISTRY ...)

(CL:DEFUN CLEAR-DOCUMENTED-OBJECTS-REGISTRY ()
  (INITIALIZE-HASH-TABLE *DOCUMENTED-OBJECTS-REGISTRY*))

;;; (DEFUN (LOOKUP-OBJECT-FROM-SPECIFICATION OBJECT) ...)

(CL:DEFUN LOOKUP-OBJECT-FROM-SPECIFICATION (SPECIFICATION)
  (CL:LET* ((OBJECT NULL))
   (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE SPECIFICATION)))
    (CL:COND
     ((SUBTYPE-OF-SURROGATE? TEST-VALUE-000)
      (CL:PROGN (CL:SETQ OBJECT (%SURROGATE-VALUE SPECIFICATION))))
     ((SUBTYPE-OF-SYMBOL? TEST-VALUE-000)
      (CL:PROGN (CL:SETQ OBJECT (LOOKUP-FUNCTION SPECIFICATION))
       (CL:WHEN (CL:EQ OBJECT NULL)
        (CL:SETQ OBJECT (LOOKUP-GLOBAL-VARIABLE SPECIFICATION)))
       (CL:WHEN (CL:EQ OBJECT NULL)
        (CL:SETQ OBJECT (LOOKUP-CLASS SPECIFICATION)))
       (CL:WHEN (CL:EQ OBJECT NULL)
        (CL:SETQ OBJECT
         (GET-OBJECT (%SYMBOL-NAME SPECIFICATION) NULL)))))
     ((CL:EQ TEST-VALUE-000 SGT-MANUALS-STELLA-CONS)
      (CL:PROGN
       (CL:LET*
        ((CLASSSYMBOL (%%VALUE (%%REST SPECIFICATION))) (CLASS NULL))
        (CL:LET*
         ((*MODULE* (%HOME-CONTEXT CLASSSYMBOL)) (*CONTEXT* *MODULE*))
         (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
         (CL:SETQ CLASS
          (GET-STELLA-CLASS (%%VALUE (%%REST SPECIFICATION)) CL:NIL)))
        (CL:WHEN (CL:EQ CLASS NULL)
         (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT)
          "Can't find a class named " (%%VALUE (%%REST SPECIFICATION)))
         (CL:RETURN-FROM LOOKUP-OBJECT-FROM-SPECIFICATION NULL))
        (CL:RETURN-FROM LOOKUP-OBJECT-FROM-SPECIFICATION
         (LOOKUP-SLOT CLASS (%%VALUE SPECIFICATION))))))
     ((SUBTYPE-OF-STRING? TEST-VALUE-000)
      (CL:PROGN
       (CL:SETQ OBJECT
        (GET-STELLA-MODULE (%WRAPPER-VALUE SPECIFICATION) CL:NIL))))
     (CL:T)))
   OBJECT))

;;; (DEFUN (TEXINFO-OBJECT< BOOLEAN) ...)

(CL:DEFUN TEXINFO-OBJECT< (OBJECT1 OBJECT2)
  (CL:LET* ((NAME1 STELLA::NULL-STRING) (NAME2 STELLA::NULL-STRING))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING NAME1 NAME2))
   (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE OBJECT1)))
    (CL:COND
     ((SUBTYPE-OF? TEST-VALUE-000 SGT-MANUALS-STELLA-SLOT)
      (CL:PROGN (CL:SETQ NAME1 (VISIBLE-NAME (%SLOT-NAME OBJECT1)))))
     ((SUBTYPE-OF? TEST-VALUE-000 SGT-MANUALS-STELLA-GLOBAL-VARIABLE)
      (CL:PROGN
       (CL:SETQ NAME1 (VISIBLE-NAME (%VARIABLE-NAME OBJECT1)))))
     (CL:T
      (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" TEST-VALUE-000
        "' is not a valid case option")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
   (CL:LET* ((TEST-VALUE-001 (SAFE-PRIMARY-TYPE OBJECT2)))
    (CL:COND
     ((SUBTYPE-OF? TEST-VALUE-001 SGT-MANUALS-STELLA-SLOT)
      (CL:PROGN (CL:SETQ NAME2 (VISIBLE-NAME (%SLOT-NAME OBJECT2)))))
     ((SUBTYPE-OF? TEST-VALUE-001 SGT-MANUALS-STELLA-GLOBAL-VARIABLE)
      (CL:PROGN
       (CL:SETQ NAME2 (VISIBLE-NAME (%VARIABLE-NAME OBJECT2)))))
     (CL:T
      (CL:LET* ((STREAM-001 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%NATIVE-STREAM STREAM-001) "`" TEST-VALUE-001
        "' is not a valid case option")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-001)))))))
   (STRING< NAME1 NAME2)))

;;; (DEFUN MANUAL-DESCRIBE-UNCATEGORIZED-OBJECTS ...)

(CL:DEFUN MANUAL-DESCRIBE-UNCATEGORIZED-OBJECTS (MODULE STREAM)
  (CL:LET* ((METHODS (NEW-LIST)))
   (CL:LET*
    ((FUNCTION NULL) (ITER-000 (ALL-FUNCTIONS MODULE CL:T))
     (COLLECT-000 NULL))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ FUNCTION (%VALUE ITER-000))
     (CL:WHEN
      (CL:AND
       (CL:NOT
        (CL:EQ
         (%WRAPPER-VALUE
          (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FUNCTION)
           SYM-MANUALS-STELLA-DOCUMENTATION NULL-STRING-WRAPPER))
         STELLA::NULL-STRING))
       (CL:NOT (ALREADY-DOCUMENTED-OBJECT? FUNCTION)))
      (CL:IF (CL:EQ COLLECT-000 NULL)
       (CL:PROGN (CL:SETQ COLLECT-000 (CONS FUNCTION NIL))
        (CL:IF (CL:EQ (%THE-CONS-LIST METHODS) NIL)
         (CL:SETF (%THE-CONS-LIST METHODS) COLLECT-000)
         (ADD-CONS-TO-END-OF-CONS-LIST (%THE-CONS-LIST METHODS)
          COLLECT-000)))
       (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS FUNCTION NIL))
        (CL:SETQ COLLECT-000 (%%REST COLLECT-000)))))))
   (CL:LET*
    ((METHOD NULL) (ITER-001 (ALL-METHODS MODULE CL:T))
     (COLLECT-001 NULL))
    (CL:LOOP WHILE (NEXT? ITER-001) DO
     (CL:SETQ METHOD (%VALUE ITER-001))
     (CL:WHEN
      (CL:AND
       (CL:NOT
        (CL:EQ
         (%WRAPPER-VALUE
          (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS METHOD)
           SYM-MANUALS-STELLA-DOCUMENTATION NULL-STRING-WRAPPER))
         STELLA::NULL-STRING))
       (CL:NOT (ALREADY-DOCUMENTED-OBJECT? METHOD)))
      (CL:IF (CL:EQ COLLECT-001 NULL)
       (CL:PROGN (CL:SETQ COLLECT-001 (CONS METHOD NIL))
        (CL:IF (CL:EQ (%THE-CONS-LIST METHODS) NIL)
         (CL:SETF (%THE-CONS-LIST METHODS) COLLECT-001)
         (ADD-CONS-TO-END-OF-CONS-LIST (%THE-CONS-LIST METHODS)
          COLLECT-001)))
       (CL:PROGN (CL:SETF (%%REST COLLECT-001) (CONS METHOD NIL))
        (CL:SETQ COLLECT-001 (%%REST COLLECT-001)))))))
   (SORT METHODS (CL:FUNCTION TEXINFO-OBJECT<))
   (CL:LET* ((METHOD NULL) (ITER-002 (%THE-CONS-LIST METHODS)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-002 NIL)) DO
     (CL:SETQ METHOD (%%VALUE ITER-002))
     (MANUAL-DESCRIBE-OBJECT METHOD NULL STREAM)
     (%%PRINT-STREAM (%NATIVE-STREAM STREAM) EOL)
     (CL:SETQ ITER-002 (%%REST ITER-002))))))

;;; (DEFUN MANUAL-DESCRIBE-OBJECT ...)

(CL:DEFUN MANUAL-DESCRIBE-OBJECT (OBJECT SPECIFICATION STREAM)
  (CL:WHEN (CL:EQ OBJECT NULL)
   (CL:SETQ OBJECT (LOOKUP-OBJECT-FROM-SPECIFICATION SPECIFICATION)))
  (CL:COND
   ((CL:EQ *MANUAL-OUTPUT-LANGUAGE* KWD-MANUALS-TEXINFO)
    (CL:COND
     ((CL:EQ OBJECT NULL)
      (CL:WHEN (CL:NOT (CL:EQ SPECIFICATION NULL))
       (TEXINFO-DESCRIBE-UNIMPLEMENTED-OBJECT SPECIFICATION STREAM)))
     (CL:T
      (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE OBJECT)))
       (CL:COND
        ((SUBTYPE-OF? TEST-VALUE-000
          SGT-MANUALS-STELLA-GLOBAL-VARIABLE)
         (CL:PROGN (TEXINFO-DESCRIBE-VARIABLE OBJECT STREAM)))
        ((SUBTYPE-OF-CLASS? TEST-VALUE-000)
         (CL:PROGN (TEXINFO-DESCRIBE-CLASS OBJECT STREAM)))
        ((SUBTYPE-OF-METHOD-SLOT? TEST-VALUE-000)
         (CL:PROGN (TEXINFO-DESCRIBE-METHOD OBJECT STREAM)))
        ((SUBTYPE-OF? TEST-VALUE-000 SGT-MANUALS-STELLA-MODULE)
         (CL:PROGN
          (MANUAL-DESCRIBE-UNCATEGORIZED-OBJECTS OBJECT STREAM)))
        (CL:T
         (CL:LET*
          ((HANDLERNAME
            (INTERN-SYMBOL-IN-MODULE
             (CONCATENATE "TEXINFO-DESCRIBE-"
              (%SYMBOL-NAME (PRIMARY-TYPE OBJECT)))
             (%HOME-CONTEXT
              SYM-MANUALS-UTILITIES-MANUAL-DESCRIBE-OBJECT)
             CL:T))
           (HANDLER (LOOKUP-FUNCTION HANDLERNAME)))
          (CL:WHEN (CL:NOT (CL:EQ HANDLER NULL))
           (CL:FUNCALL (%FUNCTION-CODE HANDLER) OBJECT STREAM))))))
      (REGISTER-DOCUMENTED-OBJECT OBJECT))))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`"
      *MANUAL-OUTPUT-LANGUAGE* "' is not a valid case option")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))

;;; (DEFUN GENERATE-MANUAL ...)

(CL:DEFUN GENERATE-MANUAL (MANUAL-SPEC)
  "Generate a TEXINFO file containing a list of
documented commands.  'manual-spec' is a CONS list of entries, where each
entry is of the following form:

      (<filename> <object-spec1> <object-spec2> ... <object-specN>)

The objects specified by <object-spec>s will be documented in sequence onto
file <filename>.  An object spec can be a simple symbol to name a function,
macro or variable, a dotted symbol to name a method or slot, a surrogate
to name a class, or a string (pathname) to name a module.  If a module is
specified, all as yet undocumented objects in that module that have a
documentation string defined will be documented (this is a catch-all option)."
  (CL:LET* ((STREAM NULL)) (CLEAR-DOCUMENTED-OBJECTS-REGISTRY)
   (CL:LET* ((FILESPEC NULL) (ITER-000 MANUAL-SPEC))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ FILESPEC (%%VALUE ITER-000))
     (CL:SETQ STREAM
      (NEW-OUTPUT-FILE-STREAM (%WRAPPER-VALUE (%%VALUE FILESPEC))))
     (CL:LET* ((SPEC NULL) (ITER-001 (%%REST FILESPEC)))
      (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
       (CL:SETQ SPEC (%%VALUE ITER-001))
       (MANUAL-DESCRIBE-OBJECT NULL SPEC STREAM)
       (%%PRINT-STREAM (%NATIVE-STREAM STREAM) EOL)
       (CL:SETQ ITER-001 (%%REST ITER-001))))
     (FREE STREAM) (CL:SETQ ITER-000 (%%REST ITER-000))))))

;;; (DEFSPECIAL *MANUAL-OUTPUT-STREAM* ...)

(CL:DEFVAR *MANUAL-OUTPUT-STREAM* NULL)

;;; (DEFGLOBAL *MANUAL-TEMPLATE-COMMAND-PREFIX* ...)

(CL:DEFVAR *MANUAL-TEMPLATE-COMMAND-PREFIX* "#$")
(CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING *MANUAL-TEMPLATE-COMMAND-PREFIX*))

;;; (DEFUN GENERATE-MANUAL-FROM-TEMPLATE ...)

(CL:DEFUN GENERATE-MANUAL-FROM-TEMPLATE (TEMPLATEFILE OUTPUTFILE)
  (CL:LET* ((OUT-STREAM NULL))
   (CL:UNWIND-PROTECT
    (CL:PROGN (CL:SETQ OUT-STREAM (OPEN-OUTPUT-FILE OUTPUTFILE))
     (CL:LET* ((*MANUAL-OUTPUT-STREAM* OUT-STREAM))
      (CL:DECLARE (CL:SPECIAL *MANUAL-OUTPUT-STREAM*))
      (CL:LET* ((IN-STREAM NULL))
       (CL:UNWIND-PROTECT
        (CL:PROGN (CL:SETQ IN-STREAM (OPEN-INPUT-FILE TEMPLATEFILE))
         (CL:LET*
          ((LINE STELLA::NULL-STRING) (ITER-000 (LINES IN-STREAM)))
          (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING LINE))
          (CL:LOOP WHILE (NEXT? ITER-000) DO
           (CL:SETQ LINE (%VALUE ITER-000))
           (%%PRINT-STREAM (%NATIVE-STREAM *MANUAL-OUTPUT-STREAM*)
            (MANUAL-EXPAND-TEMPLATE-COMMANDS LINE) EOL))))
        (CL:WHEN (CL:NOT (CL:EQ IN-STREAM NULL)) (FREE IN-STREAM))))))
    (CL:WHEN (CL:NOT (CL:EQ OUT-STREAM NULL)) (FREE OUT-STREAM)))))

;;; (DEFUN (MANUAL-EXPAND-TEMPLATE-COMMANDS STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:SIMPLE-STRING) CL:SIMPLE-STRING)
  MANUAL-EXPAND-TEMPLATE-COMMANDS))
(CL:DEFUN MANUAL-EXPAND-TEMPLATE-COMMANDS (LINE)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING LINE))
  #+MCL
  (CL:CHECK-TYPE LINE CL:SIMPLE-STRING)
  (CL:LET*
   ((COMMANDSTART
     (STRING-SEARCH LINE *MANUAL-TEMPLATE-COMMAND-PREFIX* 0)))
   (CL:DECLARE (CL:TYPE CL:FIXNUM COMMANDSTART))
   (CL:WHEN (NULL? COMMANDSTART)
    (CL:RETURN-FROM MANUAL-EXPAND-TEMPLATE-COMMANDS LINE))
   (CL:HANDLER-CASE
    (CL:LET*
     ((PREFIX (SUBSEQUENCE LINE 0 COMMANDSTART))
      (RESTLINE
       (NEW-INPUT-STRING-STREAM
        (SUBSEQUENCE LINE
         (CL:+ COMMANDSTART
          (CL:THE CL:FIXNUM
           (CL:LENGTH *MANUAL-TEMPLATE-COMMAND-PREFIX*)))
         NULL-INTEGER)))
      (EXPRESSION (READ-S-EXPRESSION RESTLINE)))
     (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING PREFIX))
     (CL:LET* ((*MANUAL-OUTPUT-STREAM* (NEW-OUTPUT-STRING-STREAM)))
      (CL:DECLARE (CL:SPECIAL *MANUAL-OUTPUT-STREAM*))
      (%EVALUATE EXPRESSION) (CL:SETQ LINE (READ-LINE RESTLINE))
      (CL:WHEN (CL:EQ LINE STELLA::NULL-STRING) (CL:SETQ LINE ""))
      (CL:RETURN-FROM MANUAL-EXPAND-TEMPLATE-COMMANDS
       (CONCATENATE PREFIX (THE-STRING-READER *MANUAL-OUTPUT-STREAM*)
        (MANUAL-EXPAND-TEMPLATE-COMMANDS LINE)))))
    (CL:CONDITION (E)
     (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT)
      "*** ERROR while expanding template command: "
      (EXCEPTION-MESSAGE E) EOL "    Error occured in line: `" LINE "'"
      EOL)
     LINE))))

;;; (DEFUN TEXINFO-INSERT-DOC ...)

(CL:DEFUN %TEXINFO-INSERT-DOC (SPEC)
  (CL:LET* ((*MANUAL-OUTPUT-LANGUAGE* KWD-MANUALS-TEXINFO))
   (CL:DECLARE (CL:SPECIAL *MANUAL-OUTPUT-LANGUAGE*))
   (MANUAL-DESCRIBE-OBJECT NULL SPEC *MANUAL-OUTPUT-STREAM*)))

(CL:DEFMACRO TEXINFO-INSERT-DOC (CL:&WHOLE EXPRESSION CL:&REST IGNORE)
  (CL:DECLARE (CL:IGNORE IGNORE))
  (CL:LET ((*IGNORETRANSLATIONERRORS?* FALSE))
   (CL-INCREMENTALLY-TRANSLATE EXPRESSION)))

(CL:SETF (CL:MACRO-FUNCTION (CL:QUOTE |/UTILITIES/TEXINFO-INSERT-DOC|)) (CL:MACRO-FUNCTION (CL:QUOTE TEXINFO-INSERT-DOC)))

;;; (DEFUN TEXINFO-INSERT-PREAMBLE ...)

(CL:DEFUN TEXINFO-INSERT-PREAMBLE ()
  (CL:LET* ((*MANUAL-OUTPUT-LANGUAGE* KWD-MANUALS-TEXINFO))
   (CL:DECLARE (CL:SPECIAL *MANUAL-OUTPUT-LANGUAGE*))
   (%%PRINT-STREAM (%NATIVE-STREAM *MANUAL-OUTPUT-STREAM*)
    "@c DO NOT MODIFY THIS FILE, IT WAS GENERATED AUTOMATICALLY FROM A TEMPLATE!")))

(CL:DEFUN HELP-STARTUP-MANUALS1 ()
  (CL:PROGN
   (CL:SETQ SGT-MANUALS-STELLA-CONS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONS"
     (GET-STELLA-MODULE "/STELLA" CL:T) 1))
   (CL:SETQ SGT-MANUALS-STELLA-TYPE-SPEC
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TYPE-SPEC"
     (GET-STELLA-MODULE "/STELLA" CL:T) 1))
   (CL:SETQ SYM-MANUALS-STELLA-VARIABLE-TYPE-SPECIFIER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "VARIABLE-TYPE-SPECIFIER"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-MANUALS-STELLA-DOCUMENTATION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DOCUMENTATION"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-MANUALS-STELLA-SLOT-TYPE-SPECIFIER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SLOT-TYPE-SPECIFIER"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ |SYM-MANUALS-STELLA-&REST|
    (INTERN-RIGID-SYMBOL-WRT-MODULE "&REST"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ |SYM-MANUALS-STELLA-&BODY|
    (INTERN-RIGID-SYMBOL-WRT-MODULE "&BODY"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-MANUALS-STELLA-METHOD-MACRO?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-MACRO?"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-MANUALS-STELLA-METHOD-COMMAND?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-COMMAND?"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-MANUALS-STELLA-METHOD-VARIABLE-ARGUMENTS?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-VARIABLE-ARGUMENTS?"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-MANUALS-STELLA-METHOD-BODY-ARGUMENT?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-BODY-ARGUMENT?"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ KWD-MANUALS-INFIX-PARAMETER-LISTS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INFIX-PARAMETER-LISTS" NULL 2))
   (CL:SETQ KWD-MANUALS-TEXINFO
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TEXINFO" NULL 2))
   (CL:SETQ SGT-MANUALS-STELLA-SLOT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SLOT"
     (GET-STELLA-MODULE "/STELLA" CL:T) 1))
   (CL:SETQ SGT-MANUALS-STELLA-GLOBAL-VARIABLE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GLOBAL-VARIABLE"
     (GET-STELLA-MODULE "/STELLA" CL:T) 1))
   (CL:SETQ SGT-MANUALS-STELLA-MODULE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MODULE"
     (GET-STELLA-MODULE "/STELLA" CL:T) 1))
   (CL:SETQ SYM-MANUALS-UTILITIES-MANUAL-DESCRIBE-OBJECT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MANUAL-DESCRIBE-OBJECT" NULL 0))
   (CL:SETQ SYM-MANUALS-UTILITIES-TEXINFO-INSERT-DOC
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TEXINFO-INSERT-DOC" NULL 0))
   (CL:SETQ KWD-MANUALS-COMMON-LISP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "COMMON-LISP" NULL 2))
   (CL:SETQ KWD-MANUALS-FUNCTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FUNCTION" NULL 2))
   (CL:SETQ SYM-MANUALS-UTILITIES-STARTUP-MANUALS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-MANUALS" NULL 0))
   (CL:SETQ SYM-MANUALS-STELLA-METHOD-STARTUP-CLASSNAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))))

(CL:DEFUN STARTUP-MANUALS ()
  (CL:LET*
   ((*MODULE*
     (GET-STELLA-MODULE "/UTILITIES" (> *STARTUP-TIME-PHASE* 1)))
    (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2) (HELP-STARTUP-MANUALS1))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 4)
    (CL:SETQ *TEXINFO-STYLE-FEATURES* (LIST))
    (CL:SETQ *MANUAL-OUTPUT-LANGUAGE* KWD-MANUALS-TEXINFO)
    (CL:SETQ *DOCUMENTED-OBJECTS-REGISTRY* (NEW-HASH-TABLE)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (DEFINE-FUNCTION-OBJECT "TEXINFO-SPECIAL-CHARACTER?"
     "(DEFUN (TEXINFO-SPECIAL-CHARACTER? BOOLEAN) ((CH CHARACTER)))"
     (CL:FUNCTION TEXINFO-SPECIAL-CHARACTER?) NULL)
    (DEFINE-FUNCTION-OBJECT "TEXINFO-ESCAPE-STRING"
     "(DEFUN (TEXINFO-ESCAPE-STRING STRING) ((STRING STRING)))"
     (CL:FUNCTION TEXINFO-ESCAPE-STRING) NULL)
    (DEFINE-FUNCTION-OBJECT "YIELD-TEXINFO-TYPE-SPEC"
     "(DEFUN (YIELD-TEXINFO-TYPE-SPEC STRING) ((TYPE-SPEC OBJECT)))"
     (CL:FUNCTION YIELD-TEXINFO-TYPE-SPEC) NULL)
    (DEFINE-FUNCTION-OBJECT "YIELD-TEXINFO-BARE-NAME"
     "(DEFUN (YIELD-TEXINFO-BARE-NAME STRING) ((NAME OBJECT)))"
     (CL:FUNCTION YIELD-TEXINFO-BARE-NAME) NULL)
    (DEFINE-FUNCTION-OBJECT "YIELD-TEXINFO-PARAMETER-NAME"
     "(DEFUN (YIELD-TEXINFO-PARAMETER-NAME STRING) ((NAME STRING)))"
     (CL:FUNCTION YIELD-TEXINFO-PARAMETER-NAME) NULL)
    (DEFINE-FUNCTION-OBJECT "YIELD-TEXINFO-CONSTANT"
     "(DEFUN (YIELD-TEXINFO-CONSTANT STRING) ((NAME SYMBOL)))"
     (CL:FUNCTION YIELD-TEXINFO-CONSTANT) NULL)
    (DEFINE-FUNCTION-OBJECT "TEXINFO-GET-PARAGRAPH-COMMAND"
     "(DEFUN (TEXINFO-GET-PARAGRAPH-COMMAND STRING) ((STRING STRING) (START INTEGER)))"
     (CL:FUNCTION TEXINFO-GET-PARAGRAPH-COMMAND) NULL)
    (DEFINE-FUNCTION-OBJECT "TEXINFO-DESCRIBE-DOCUMENTATION-STRING"
     "(DEFUN TEXINFO-DESCRIBE-DOCUMENTATION-STRING ((OBJECT OBJECT) (DOCUMENTATION STRING) (STREAM OUTPUT-STREAM) (PARAMETERS (LIST OF SYMBOL))))"
     (CL:FUNCTION TEXINFO-DESCRIBE-DOCUMENTATION-STRING) NULL)
    (DEFINE-FUNCTION-OBJECT "TEXINFO-DESCRIBE-VARIABLE"
     "(DEFUN TEXINFO-DESCRIBE-VARIABLE ((VARIABLE GLOBAL-VARIABLE) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION TEXINFO-DESCRIBE-VARIABLE) NULL)
    (DEFINE-FUNCTION-OBJECT "TEXINFO-DESCRIBE-CLASS"
     "(DEFUN TEXINFO-DESCRIBE-CLASS ((CLASS CLASS) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION TEXINFO-DESCRIBE-CLASS) NULL)
    (DEFINE-FUNCTION-OBJECT "TEXINFO-DESCRIBE-SLOT"
     "(DEFUN TEXINFO-DESCRIBE-SLOT ((SLOT STORAGE-SLOT) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION TEXINFO-DESCRIBE-SLOT) NULL)
    (DEFINE-FUNCTION-OBJECT "TEXINFO-GET-REAL-METHOD-PARAMETER-NAMES"
     "(DEFUN (TEXINFO-GET-REAL-METHOD-PARAMETER-NAMES (LIST OF STRING-WRAPPER)) ((METHOD METHOD-SLOT)))"
     (CL:FUNCTION TEXINFO-GET-REAL-METHOD-PARAMETER-NAMES) NULL)
    (DEFINE-FUNCTION-OBJECT
     "TEXINFO-GET-REAL-METHOD-PARAMETERS-AND-TYPES"
     "(DEFUN (TEXINFO-GET-REAL-METHOD-PARAMETERS-AND-TYPES (LIST OF STRING-WRAPPER) LIST LIST) ((METHOD METHOD-SLOT)))"
     (CL:FUNCTION TEXINFO-GET-REAL-METHOD-PARAMETERS-AND-TYPES) NULL)
    (DEFINE-FUNCTION-OBJECT "TEXINFO-DESCRIBE-METHOD"
     "(DEFUN TEXINFO-DESCRIBE-METHOD ((METHOD METHOD-SLOT) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION TEXINFO-DESCRIBE-METHOD) NULL)
    (DEFINE-FUNCTION-OBJECT "TEXINFO-DESCRIBE-TYPE-DECLARATION"
     "(DEFUN TEXINFO-DESCRIBE-TYPE-DECLARATION ((PARAMETER STRING) (TYPE TYPE-SPEC) (MODIFIER STRING) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION TEXINFO-DESCRIBE-TYPE-DECLARATION) NULL)
    (DEFINE-FUNCTION-OBJECT "TEXINFO-DESCRIBE-UNIMPLEMENTED-OBJECT"
     "(DEFUN TEXINFO-DESCRIBE-UNIMPLEMENTED-OBJECT ((SPECIFICATION OBJECT) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION TEXINFO-DESCRIBE-UNIMPLEMENTED-OBJECT) NULL)
    (DEFINE-FUNCTION-OBJECT "REGISTER-DOCUMENTED-OBJECT"
     "(DEFUN REGISTER-DOCUMENTED-OBJECT ((OBJECT OBJECT)))"
     (CL:FUNCTION REGISTER-DOCUMENTED-OBJECT) NULL)
    (DEFINE-FUNCTION-OBJECT "ALREADY-DOCUMENTED-OBJECT?"
     "(DEFUN (ALREADY-DOCUMENTED-OBJECT? BOOLEAN) ((OBJECT OBJECT)))"
     (CL:FUNCTION ALREADY-DOCUMENTED-OBJECT?) NULL)
    (DEFINE-FUNCTION-OBJECT "CLEAR-DOCUMENTED-OBJECTS-REGISTRY"
     "(DEFUN CLEAR-DOCUMENTED-OBJECTS-REGISTRY ())"
     (CL:FUNCTION CLEAR-DOCUMENTED-OBJECTS-REGISTRY) NULL)
    (DEFINE-FUNCTION-OBJECT "LOOKUP-OBJECT-FROM-SPECIFICATION"
     "(DEFUN (LOOKUP-OBJECT-FROM-SPECIFICATION OBJECT) ((SPECIFICATION OBJECT)))"
     (CL:FUNCTION LOOKUP-OBJECT-FROM-SPECIFICATION) NULL)
    (DEFINE-FUNCTION-OBJECT "TEXINFO-OBJECT<"
     "(DEFUN (TEXINFO-OBJECT< BOOLEAN) ((OBJECT1 OBJECT) (OBJECT2 OBJECT)))"
     (CL:FUNCTION TEXINFO-OBJECT<) NULL)
    (DEFINE-FUNCTION-OBJECT "MANUAL-DESCRIBE-UNCATEGORIZED-OBJECTS"
     "(DEFUN MANUAL-DESCRIBE-UNCATEGORIZED-OBJECTS ((MODULE MODULE) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION MANUAL-DESCRIBE-UNCATEGORIZED-OBJECTS) NULL)
    (DEFINE-FUNCTION-OBJECT "MANUAL-DESCRIBE-OBJECT"
     "(DEFUN MANUAL-DESCRIBE-OBJECT ((OBJECT OBJECT) (SPECIFICATION OBJECT) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION MANUAL-DESCRIBE-OBJECT) NULL)
    (DEFINE-FUNCTION-OBJECT "GENERATE-MANUAL"
     "(DEFUN GENERATE-MANUAL ((MANUAL-SPEC (CONS OF CONS))) :DOCUMENTATION \"Generate a TEXINFO file containing a list of
documented commands.  'manual-spec' is a CONS list of entries, where each
entry is of the following form:

      (<filename> <object-spec1> <object-spec2> ... <object-specN>)

The objects specified by <object-spec>s will be documented in sequence onto
file <filename>.  An object spec can be a simple symbol to name a function,
macro or variable, a dotted symbol to name a method or slot, a surrogate
to name a class, or a string (pathname) to name a module.  If a module is
specified, all as yet undocumented objects in that module that have a
documentation string defined will be documented (this is a catch-all option).\")"
     (CL:FUNCTION GENERATE-MANUAL) NULL)
    (DEFINE-FUNCTION-OBJECT "GENERATE-MANUAL-FROM-TEMPLATE"
     "(DEFUN GENERATE-MANUAL-FROM-TEMPLATE ((TEMPLATEFILE FILE-NAME) (OUTPUTFILE FILE-NAME)))"
     (CL:FUNCTION GENERATE-MANUAL-FROM-TEMPLATE) NULL)
    (DEFINE-FUNCTION-OBJECT "MANUAL-EXPAND-TEMPLATE-COMMANDS"
     "(DEFUN (MANUAL-EXPAND-TEMPLATE-COMMANDS STRING) ((LINE STRING)))"
     (CL:FUNCTION MANUAL-EXPAND-TEMPLATE-COMMANDS) NULL)
    (DEFINE-FUNCTION-OBJECT "TEXINFO-INSERT-DOC"
     "(DEFUN TEXINFO-INSERT-DOC ((SPEC OBJECT)) :COMMAND? TRUE :EVALUATE-ARGUMENTS? FALSE)"
     (CL:FUNCTION %TEXINFO-INSERT-DOC) NULL)
    (DEFINE-FUNCTION-OBJECT "TEXINFO-INSERT-PREAMBLE"
     "(DEFUN TEXINFO-INSERT-PREAMBLE () :COMMAND? TRUE)"
     (CL:FUNCTION TEXINFO-INSERT-PREAMBLE) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-MANUALS"
     "(DEFUN STARTUP-MANUALS () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-MANUALS) NULL)
    (CL:LET*
     ((FUNCTION
       (LOOKUP-FUNCTION SYM-MANUALS-UTILITIES-STARTUP-MANUALS)))
     (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FUNCTION)
      SYM-MANUALS-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "_StartupManuals") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *TEXINFO-STYLE-FEATURES* (LIST OF KEYWORD) (LIST) :DOCUMENTATION \"A list of features that can modulate some aspects of
how certain objects are described.  Currently understood features:
:INFIX-PARAMETER-LISTS.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *TEXINFO-WORD-DELIMITERS* STRING NULL)")
    (CL:LET*
     ((DELIMITERS
       (CL:THE CL:SIMPLE-STRING (CL:COPY-SEQ "     .:;,!?()[]{}\""))))
     (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING DELIMITERS))
     (CL:LET ((SELF DELIMITERS) (CH #\ ) (POSITION 0))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (SETF
       (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
        (CL:THE CL:FIXNUM POSITION))
       (CL:THE CL:CHARACTER CH)))
     (CL:LET ((SELF DELIMITERS) (CH #\Tab) (POSITION 1))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (SETF
       (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
        (CL:THE CL:FIXNUM POSITION))
       (CL:THE CL:CHARACTER CH)))
     (CL:LET ((SELF DELIMITERS) (CH #\Linefeed) (POSITION 2))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (SETF
       (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
        (CL:THE CL:FIXNUM POSITION))
       (CL:THE CL:CHARACTER CH)))
     (CL:LET ((SELF DELIMITERS) (CH #\Return) (POSITION 3))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (SETF
       (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
        (CL:THE CL:FIXNUM POSITION))
       (CL:THE CL:CHARACTER CH)))
     (CL:LET ((SELF DELIMITERS) (CH #\Page) (POSITION 4))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (SETF
       (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
        (CL:THE CL:FIXNUM POSITION))
       (CL:THE CL:CHARACTER CH)))
     (CL:SETQ *TEXINFO-WORD-DELIMITERS*
      (CL:LET ((S DELIMITERS))
       (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING S))
       (CL:THE CL:SIMPLE-STRING S))))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *MANUAL-OUTPUT-LANGUAGE* KEYWORD :TEXINFO)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *DOCUMENTED-OBJECTS-REGISTRY* HASH-TABLE (NEW HASH-TABLE))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *MANUAL-OUTPUT-STREAM* OUTPUT-STREAM NULL)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *MANUAL-TEMPLATE-COMMAND-PREFIX* STRING \"#$\")")
    (REGISTER-NATIVE-NAME SYM-MANUALS-UTILITIES-TEXINFO-INSERT-DOC
     KWD-MANUALS-COMMON-LISP KWD-MANUALS-FUNCTION))))
