;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; visualize.slisp

#|
 +---------------------------- BEGIN LICENSE BLOCK ---------------------------+
 |                                                                            |
 | Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
 |                                                                            |
 | The contents of this file are subject to the Mozilla Public License        |
 | Version 1.1 (the "License"); you may not use this file except in           |
 | compliance with the License. You may obtain a copy of the License at       |
 | http://www.mozilla.org/MPL/                                                |
 |                                                                            |
 | Software distributed under the License is distributed on an "AS IS" basis, |
 | WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
 | for the specific language governing rights and limitations under the       |
 | License.                                                                   |
 |                                                                            |
 | The Original Code is the PowerLoom KR&R System.                            |
 |                                                                            |
 | The Initial Developer of the Original Code is                              |
 | UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
 | 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
 |                                                                            |
 | Portions created by the Initial Developer are Copyright (C) 2000-2017      |
 | the Initial Developer. All Rights Reserved.                                |
 |                                                                            |
 | Contributor(s):                                                            |
 |                                                                            |
 | Alternatively, the contents of this file may be used under the terms of    |
 | either the GNU General Public License Version 2 or later (the "GPL"), or   |
 | the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
 | in which case the provisions of the GPL or the LGPL are applicable instead |
 | of those above. If you wish to allow use of your version of this file only |
 | under the terms of either the GPL or the LGPL, and not to allow others to  |
 | use your version of this file under the terms of the MPL, indicate your    |
 | decision by deleting the provisions above and replace them with the notice |
 | and other provisions required by the GPL or the LGPL. If you do not delete |
 | the provisions above, a recipient may use your version of this file under  |
 | the terms of any one of the MPL, the GPL or the LGPL.                      |
 |                                                                            |
 +----------------------------- END LICENSE BLOCK ----------------------------+
|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SGT-VISUALIZE-ONTOSAURUS-VIZ-INFO NULL)
(CL:DEFVAR SYM-VISUALIZE-STELLA-STREAM NULL)
(CL:DEFVAR SYM-VISUALIZE-ONTOSAURUS-ALLOWED-OBJECTS NULL)
(CL:DEFVAR SYM-VISUALIZE-ONTOSAURUS-SHOW-RELATIONS? NULL)
(CL:DEFVAR SYM-VISUALIZE-ONTOSAURUS-SHOW-ATTRIBUTES? NULL)
(CL:DEFVAR SYM-VISUALIZE-ONTOSAURUS-SHOW-RULES? NULL)
(CL:DEFVAR SYM-VISUALIZE-ONTOSAURUS-ADD-TOP? NULL)
(CL:DEFVAR SYM-VISUALIZE-ONTOSAURUS-NODE-COLOR NULL)
(CL:DEFVAR SYM-VISUALIZE-ONTOSAURUS-RELATION-COLOR NULL)
(CL:DEFVAR SYM-VISUALIZE-ONTOSAURUS-RELATION-STYLE NULL)
(CL:DEFVAR SYM-VISUALIZE-ONTOSAURUS-FONT-SIZE NULL)
(CL:DEFVAR SYM-VISUALIZE-LOGIC-?RELATION NULL)
(CL:DEFVAR SYM-VISUALIZE-ONTOSAURUS-?DOMAIN NULL)
(CL:DEFVAR SYM-VISUALIZE-STELLA-AND NULL)
(CL:DEFVAR SYM-VISUALIZE-PL-KERNEL-KB-NTH-DOMAIN NULL)
(CL:DEFVAR SYM-VISUALIZE-ONTOSAURUS-BINARY-RELATION NULL)
(CL:DEFVAR KWD-VISUALIZE-SINGLETONS? NULL)
(CL:DEFVAR KWD-VISUALIZE-INFERENCE-LEVEL NULL)
(CL:DEFVAR KWD-VISUALIZE-SHALLOW NULL)
(CL:DEFVAR SYM-VISUALIZE-ONTOSAURUS-M-VIZ-INFO.VIZ-GET-BINARY-RELATIONS-OF-QUERY-000 NULL)
(CL:DEFVAR SGT-VISUALIZE-ONTOSAURUS-M-VIZ-INFO.VIZ-GET-BINARY-RELATIONS-OF-MEMO-TABLE-000 NULL)
(CL:DEFVAR SYM-VISUALIZE-ONTOSAURUS-M-VIZ-INFO.VIZ-GET-BINARY-RELATIONS-OF-QUERY-001 NULL)
(CL:DEFVAR SGT-VISUALIZE-LOGIC-NAMED-DESCRIPTION NULL)
(CL:DEFVAR SGT-VISUALIZE-LOGIC-LOGIC-OBJECT NULL)
(CL:DEFVAR SGT-VISUALIZE-PL-KERNEL-KB-CONCEPT NULL)
(CL:DEFVAR KWD-VISUALIZE-MEDIUM NULL)
(CL:DEFVAR SGT-VISUALIZE-ONTOSAURUS-F-VIZ-SERVER-EXPORT-OBJECT-MEMO-TABLE-000 NULL)
(CL:DEFVAR SGT-VISUALIZE-STELLA-MODULE NULL)
(CL:DEFVAR KWD-VISUALIZE-NOT-IMPLEMENTED NULL)
(CL:DEFVAR KWD-VISUALIZE-CONTEXT NULL)
(CL:DEFVAR KWD-VISUALIZE-BAD-REQUEST NULL)
(CL:DEFVAR KWD-VISUALIZE-RELATION NULL)
(CL:DEFVAR KWD-VISUALIZE-CONTENT-TYPE NULL)
(CL:DEFVAR KWD-VISUALIZE-IMAGE-GIF NULL)
(CL:DEFVAR KWD-VISUALIZE-INTERNAL-ERROR NULL)
(CL:DEFVAR KWD-VISUALIZE-INPUT NULL)
(CL:DEFVAR KWD-VISUALIZE-HTML NULL)
(CL:DEFVAR SYM-VISUALIZE-ONTOSAURUS-STARTUP-VISUALIZE NULL)
(CL:DEFVAR SYM-VISUALIZE-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STARTUP-TIME-PHASE* NULL-INTEGER *MODULE* EOL NULL-CHARACTER *CONTEXT* NIL *MEMOIZATION-ENABLED?* MEMOIZED-NULL-VALUE TRUE-WRAPPER FALSE-WRAPPER))

;;; (DEFGLOBAL *VIZ-SHOW-RELATIONS?* ...)

(CL:DEFVAR *VIZ-SHOW-RELATIONS?* CL:NIL
  "If true, show binary relations between domain and range concepts as edges.")

;;; (DEFGLOBAL *VIZ-SHOW-ATTRIBUTES?* ...)

(CL:DEFVAR *VIZ-SHOW-ATTRIBUTES?* CL:NIL
  "If true, show binary relations as attributes (2nd box in a concept label).")

;;; (DEFGLOBAL *VIZ-SHOW-RULES?* ...)

(CL:DEFVAR *VIZ-SHOW-RULES?* CL:NIL
  "If true, show defining rules (3rd box in a concept label).")

;;; (DEFGLOBAL *VIZ-ADD-TOP?* ...)

(CL:DEFVAR *VIZ-ADD-TOP?* CL:NIL
  "If true, put everything under artificial TOP node.")

;;; (DEFGLOBAL *VIZ-NODE-COLOR* ...)

(CL:DEFVAR *VIZ-NODE-COLOR* "yellow")
(CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING *VIZ-NODE-COLOR*))

;;; (DEFGLOBAL *VIZ-RELATION-COLOR* ...)

(CL:DEFVAR *VIZ-RELATION-COLOR* "blue")
(CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING *VIZ-RELATION-COLOR*))

;;; (DEFGLOBAL *VIZ-RELATION-STYLE* ...)

(CL:DEFVAR *VIZ-RELATION-STYLE* "dashed")
(CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING *VIZ-RELATION-STYLE*))

;;; (DEFGLOBAL *VIZ-FONT-SIZE* ...)

(CL:DEFVAR *VIZ-FONT-SIZE* 7)
(CL:DECLAIM (CL:TYPE CL:FIXNUM *VIZ-FONT-SIZE*))

(CL:DEFUN NEW-VIZ-INFO ()
  (CL:LET* ((SELF NULL)) (CL:SETQ SELF (%MAKE-VIZ-INFO)) (CL:SETF (%VIZ-INFO.FONT-SIZE SELF) *VIZ-FONT-SIZE*)
   (CL:SETF (%VIZ-INFO.RELATION-STYLE SELF) *VIZ-RELATION-STYLE*) (CL:SETF (%VIZ-INFO.RELATION-COLOR SELF) *VIZ-RELATION-COLOR*)
   (CL:SETF (%VIZ-INFO.NODE-COLOR SELF) *VIZ-NODE-COLOR*) (CL:SETF (%VIZ-INFO.ADD-TOP? SELF) *VIZ-ADD-TOP?*) (CL:SETF (%VIZ-INFO.SHOW-RULES? SELF) *VIZ-SHOW-RULES?*)
   (CL:SETF (%VIZ-INFO.SHOW-ATTRIBUTES? SELF) *VIZ-SHOW-ATTRIBUTES?*) (CL:SETF (%VIZ-INFO.SHOW-RELATIONS? SELF) *VIZ-SHOW-RELATIONS?*)
   (CL:SETF (%VIZ-INFO.ALLOWED-OBJECTS SELF) NULL) (CL:SETF (%VIZ-INFO.STREAM SELF) NULL) SELF))

(CL:DEFMETHOD PRIMARY-TYPE ((SELF VIZ-INFO))
  SGT-VISUALIZE-ONTOSAURUS-VIZ-INFO)

(CL:DEFUN ACCESS-VIZ-INFO-SLOT-VALUE (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND ((CL:EQ SLOTNAME SYM-VISUALIZE-STELLA-STREAM) (CL:IF SETVALUE? (CL:SETF (%VIZ-INFO.STREAM SELF) VALUE) (CL:SETQ VALUE (%VIZ-INFO.STREAM SELF))))
   ((CL:EQ SLOTNAME SYM-VISUALIZE-ONTOSAURUS-ALLOWED-OBJECTS)
    (CL:IF SETVALUE? (CL:SETF (%VIZ-INFO.ALLOWED-OBJECTS SELF) VALUE) (CL:SETQ VALUE (%VIZ-INFO.ALLOWED-OBJECTS SELF))))
   ((CL:EQ SLOTNAME SYM-VISUALIZE-ONTOSAURUS-SHOW-RELATIONS?)
    (CL:IF SETVALUE? (CL:SETF (%VIZ-INFO.SHOW-RELATIONS? SELF) (COERCE-WRAPPED-BOOLEAN-TO-BOOLEAN VALUE))
     (CL:SETQ VALUE (CL:IF (%VIZ-INFO.SHOW-RELATIONS? SELF) TRUE-WRAPPER FALSE-WRAPPER))))
   ((CL:EQ SLOTNAME SYM-VISUALIZE-ONTOSAURUS-SHOW-ATTRIBUTES?)
    (CL:IF SETVALUE? (CL:SETF (%VIZ-INFO.SHOW-ATTRIBUTES? SELF) (COERCE-WRAPPED-BOOLEAN-TO-BOOLEAN VALUE))
     (CL:SETQ VALUE (CL:IF (%VIZ-INFO.SHOW-ATTRIBUTES? SELF) TRUE-WRAPPER FALSE-WRAPPER))))
   ((CL:EQ SLOTNAME SYM-VISUALIZE-ONTOSAURUS-SHOW-RULES?)
    (CL:IF SETVALUE? (CL:SETF (%VIZ-INFO.SHOW-RULES? SELF) (COERCE-WRAPPED-BOOLEAN-TO-BOOLEAN VALUE))
     (CL:SETQ VALUE (CL:IF (%VIZ-INFO.SHOW-RULES? SELF) TRUE-WRAPPER FALSE-WRAPPER))))
   ((CL:EQ SLOTNAME SYM-VISUALIZE-ONTOSAURUS-ADD-TOP?)
    (CL:IF SETVALUE? (CL:SETF (%VIZ-INFO.ADD-TOP? SELF) (COERCE-WRAPPED-BOOLEAN-TO-BOOLEAN VALUE))
     (CL:SETQ VALUE (CL:IF (%VIZ-INFO.ADD-TOP? SELF) TRUE-WRAPPER FALSE-WRAPPER))))
   ((CL:EQ SLOTNAME SYM-VISUALIZE-ONTOSAURUS-NODE-COLOR)
    (CL:IF SETVALUE? (CL:SETF (%VIZ-INFO.NODE-COLOR SELF) (%STRING-WRAPPER.WRAPPER-VALUE VALUE)) (CL:SETQ VALUE (WRAP-STRING (%VIZ-INFO.NODE-COLOR SELF)))))
   ((CL:EQ SLOTNAME SYM-VISUALIZE-ONTOSAURUS-RELATION-COLOR)
    (CL:IF SETVALUE? (CL:SETF (%VIZ-INFO.RELATION-COLOR SELF) (%STRING-WRAPPER.WRAPPER-VALUE VALUE)) (CL:SETQ VALUE (WRAP-STRING (%VIZ-INFO.RELATION-COLOR SELF)))))
   ((CL:EQ SLOTNAME SYM-VISUALIZE-ONTOSAURUS-RELATION-STYLE)
    (CL:IF SETVALUE? (CL:SETF (%VIZ-INFO.RELATION-STYLE SELF) (%STRING-WRAPPER.WRAPPER-VALUE VALUE)) (CL:SETQ VALUE (WRAP-STRING (%VIZ-INFO.RELATION-STYLE SELF)))))
   ((CL:EQ SLOTNAME SYM-VISUALIZE-ONTOSAURUS-FONT-SIZE)
    (CL:IF SETVALUE? (CL:SETF (%VIZ-INFO.FONT-SIZE SELF) (%INTEGER-WRAPPER.WRAPPER-VALUE VALUE)) (CL:SETQ VALUE (WRAP-INTEGER (%VIZ-INFO.FONT-SIZE SELF)))))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM))) (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`" SLOTNAME "' is not a valid case option")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
  VALUE)

;;; (DEFGLOBAL VIZ-TOP ...)

(CL:DEFVAR VIZ-TOP "top")
(CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING VIZ-TOP))

;;; (DEFGLOBAL VIZ-UNKNOWN ...)

(CL:DEFVAR VIZ-UNKNOWN "unknown")
(CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING VIZ-UNKNOWN))

;;; (DEFUN (VIZ-GET-OBJECT-NAME STRING) ...)

(CL:DECLAIM (CL:FTYPE (CL:FUNCTION (CL:T) CL:SIMPLE-STRING) VIZ-GET-OBJECT-NAME))
(CL:DEFUN VIZ-GET-OBJECT-NAME (OBJECT)
  (CL:WHEN (CL:EQ OBJECT NULL) (CL:RETURN-FROM VIZ-GET-OBJECT-NAME VIZ-UNKNOWN))
  (CL:LET* ((NAME (OBJECT-NAME-STRING OBJECT))) (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING NAME)) (CL:WHEN (CL:EQ NAME STELLA::NULL-STRING) (CL:SETQ NAME (STRINGIFY OBJECT)))
   NAME))

;;; (DEFMETHOD (VIZ-GENERATE-ONTOSAURUS-HANDLE STRING) ...)

(CL:DEFMETHOD VIZ-GENERATE-ONTOSAURUS-HANDLE ((SELF VIZ-INFO) OBJECT)
  (CL:LET* ((URL (NEW-OUTPUT-STRING-STREAM))) (HTML-WRITE-URL (%OUTPUT-STRING-STREAM.NATIVE-STREAM URL) "show" OBJECT) (THE-STRING-READER URL)))

;;; (DEFMETHOD (VIZ-GET-BINARY-RELATIONS-OF (CONS OF LOGIC-OBJECT)) ...)

(CL:DEFMETHOD VIZ-GET-BINARY-RELATIONS-OF ((SELF VIZ-INFO) CONCEPT)
  (CL:LET* ((MEMO-TABLE-000 NULL) (MEMOIZED-ENTRY-000 NULL) (MEMOIZED-VALUE-000 NULL))
   (CL:WHEN *MEMOIZATION-ENABLED?* (CL:SETQ MEMO-TABLE-000 (%SURROGATE.SURROGATE-VALUE SGT-VISUALIZE-ONTOSAURUS-M-VIZ-INFO.VIZ-GET-BINARY-RELATIONS-OF-MEMO-TABLE-000))
    (CL:WHEN (CL:EQ MEMO-TABLE-000 NULL)
     (INITIALIZE-MEMOIZATION-TABLE SGT-VISUALIZE-ONTOSAURUS-M-VIZ-INFO.VIZ-GET-BINARY-RELATIONS-OF-MEMO-TABLE-000 "(:MAX-VALUES 1000 :TIMESTAMPS (:META-KB-UPDATE))")
     (CL:SETQ MEMO-TABLE-000 (%SURROGATE.SURROGATE-VALUE SGT-VISUALIZE-ONTOSAURUS-M-VIZ-INFO.VIZ-GET-BINARY-RELATIONS-OF-MEMO-TABLE-000)))
    (CL:SETQ MEMOIZED-ENTRY-000 (LOOKUP-MRU-MEMOIZED-VALUE MEMO-TABLE-000 CONCEPT *CONTEXT* MEMOIZED-NULL-VALUE NULL -1))
    (CL:SETQ MEMOIZED-VALUE-000 (%%VALUE MEMOIZED-ENTRY-000)))
   (CL:COND ((CL:NOT (CL:EQ MEMOIZED-VALUE-000 NULL)) (CL:WHEN (CL:EQ MEMOIZED-VALUE-000 MEMOIZED-NULL-VALUE) (CL:SETQ MEMOIZED-VALUE-000 NULL)))
    (CL:T
     (CL:SETQ MEMOIZED-VALUE-000
      (APPLY-CACHED-RETRIEVE (LIST* SYM-VISUALIZE-LOGIC-?RELATION SYM-VISUALIZE-ONTOSAURUS-?DOMAIN NIL)
       (LIST* SYM-VISUALIZE-STELLA-AND (LIST* SYM-VISUALIZE-PL-KERNEL-KB-NTH-DOMAIN SYM-VISUALIZE-LOGIC-?RELATION (WRAP-INTEGER 0) SYM-VISUALIZE-ONTOSAURUS-?DOMAIN NIL)
        (LIST* SYM-VISUALIZE-ONTOSAURUS-BINARY-RELATION SYM-VISUALIZE-LOGIC-?RELATION NIL) NIL)
       (CONS-LIST NULL CONCEPT) (CONS-LIST KWD-VISUALIZE-SINGLETONS? TRUE-WRAPPER KWD-VISUALIZE-INFERENCE-LEVEL KWD-VISUALIZE-SHALLOW)
       SYM-VISUALIZE-ONTOSAURUS-M-VIZ-INFO.VIZ-GET-BINARY-RELATIONS-OF-QUERY-001))
     (CL:WHEN *MEMOIZATION-ENABLED?* (CL:SETF (%%VALUE MEMOIZED-ENTRY-000) (CL:IF (CL:EQ MEMOIZED-VALUE-000 NULL) MEMOIZED-NULL-VALUE MEMOIZED-VALUE-000)))))
   (CL:LET* ((VALUE-000 MEMOIZED-VALUE-000)) VALUE-000)))

;;; (DEFUN (VIZ-DOT-STRING STRING) ...)

(CL:DECLAIM (CL:FTYPE (CL:FUNCTION (CL:SIMPLE-STRING) CL:SIMPLE-STRING) VIZ-DOT-STRING))
(CL:DEFUN VIZ-DOT-STRING (NAME)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING NAME))
  #+MCL
  (CL:CHECK-TYPE NAME CL:SIMPLE-STRING)
  (CL:LET* ((BUFFER (MAKE-RAW-MUTABLE-STRING (CL:* (CL:THE CL:FIXNUM (CL:LENGTH NAME)) 2))) (I -1) (SOL? CL:NIL))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING BUFFER) (CL:TYPE CL:FIXNUM I))
   (CL:LET* ((CHAR NULL-CHARACTER) (VECTOR-000 NAME) (INDEX-000 0) (LENGTH-000 (CL:THE CL:FIXNUM (CL:LENGTH VECTOR-000))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING VECTOR-000) (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
    (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
     (CL:SETQ CHAR
      (CL:LET ((SELF VECTOR-000) (POSITION INDEX-000)) (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF) (CL:TYPE CL:FIXNUM POSITION))
       (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))))
     (CL:CASE CHAR
      (#\
       (CL:IF SOL?
        (CL:LET ((SELF BUFFER) (CH #\.) (POSITION (CL:SETQ I (CL:1+ I)))) (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF) (CL:TYPE CL:FIXNUM POSITION))
         (SETF (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION)) (CL:THE CL:CHARACTER CH)))
        (CL:LET ((SELF BUFFER) (CH CHAR) (POSITION (CL:SETQ I (CL:1+ I)))) (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF) (CL:TYPE CL:FIXNUM POSITION))
         (SETF (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION)) (CL:THE CL:CHARACTER CH)))))
      ((#\Linefeed #\Return)
       (CL:LET ((SELF BUFFER) (CH #\\) (POSITION (CL:SETQ I (CL:1+ I)))) (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF) (CL:TYPE CL:FIXNUM POSITION))
        (SETF (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION)) (CL:THE CL:CHARACTER CH)))
       (CL:LET ((SELF BUFFER) (CH #\l) (POSITION (CL:SETQ I (CL:1+ I)))) (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF) (CL:TYPE CL:FIXNUM POSITION))
        (SETF (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION)) (CL:THE CL:CHARACTER CH)))
       (CL:SETQ SOL? CL:T))
      ((#\" #\{ #\} #\| #\< #\> #\\)
       (CL:LET ((SELF BUFFER) (CH #\\) (POSITION (CL:SETQ I (CL:1+ I)))) (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF) (CL:TYPE CL:FIXNUM POSITION))
        (SETF (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION)) (CL:THE CL:CHARACTER CH)))
       (CL:LET ((SELF BUFFER) (CH CHAR) (POSITION (CL:SETQ I (CL:1+ I)))) (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF) (CL:TYPE CL:FIXNUM POSITION))
        (SETF (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION)) (CL:THE CL:CHARACTER CH)))
       (CL:SETQ SOL? CL:NIL))
      (CL:OTHERWISE
       (CL:LET ((SELF BUFFER) (CH CHAR) (POSITION (CL:SETQ I (CL:1+ I)))) (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF) (CL:TYPE CL:FIXNUM POSITION))
        (SETF (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION)) (CL:THE CL:CHARACTER CH)))
       (CL:SETQ SOL? CL:NIL)))
     (CL:SETQ INDEX-000 (CL:1+ INDEX-000))))
   (SUBSEQUENCE BUFFER 0 (CL:1+ I))))

;;; (DEFUN (VIZ-DOT-OBJECT-NAME STRING) ...)

(CL:DECLAIM (CL:FTYPE (CL:FUNCTION (CL:T) CL:SIMPLE-STRING) VIZ-DOT-OBJECT-NAME))
(CL:DEFUN VIZ-DOT-OBJECT-NAME (OBJECT)
  (VIZ-DOT-STRING (VIZ-GET-OBJECT-NAME OBJECT)))

;;; (DEFGLOBAL *VIZ-EXCLUDED-MODULES* ...)

(CL:DEFVAR *VIZ-EXCLUDED-MODULES* NULL
  "Set of PowerLoom logic modules that shouldn't be visualized.
By default this is empty but it could be used to customize the visualizer.")

;;; (DEFMETHOD (VIZ-EXCLUDED-MODULE? BOOLEAN) ...)

(CL:DEFMETHOD VIZ-EXCLUDED-MODULE? ((SELF VIZ-INFO) MODULE)
  (CL:OR (MEMBER? *VIZ-EXCLUDED-MODULES* MODULE) (CL:NOT (LOGIC-MODULE? MODULE))))

;;; (DEFMETHOD (VIZ-ALLOWED-OBJECT? BOOLEAN) ...)

(CL:DEFMETHOD VIZ-ALLOWED-OBJECT? ((SELF VIZ-INFO) OBJECT)
  (CL:IF (CL:EQ (%VIZ-INFO.ALLOWED-OBJECTS SELF) NULL) (CL:NOT (VIZ-EXCLUDED-MODULE? SELF (HOME-MODULE OBJECT))) (MEMBER? (%VIZ-INFO.ALLOWED-OBJECTS SELF) OBJECT)))

;;; (DEFMETHOD VIZ-ALLOW-OBJECT ...)

(CL:DEFMETHOD VIZ-ALLOW-OBJECT ((SELF VIZ-INFO) OBJECT)
  (CL:LET* ((ALLOWEDOBJECTS (%VIZ-INFO.ALLOWED-OBJECTS SELF)))
   (CL:WHEN (CL:EQ ALLOWEDOBJECTS NULL) (CL:SETQ ALLOWEDOBJECTS (NEW-HASH-SET)) (CL:SETF (%VIZ-INFO.ALLOWED-OBJECTS SELF) ALLOWEDOBJECTS)) (INSERT ALLOWEDOBJECTS OBJECT)))

;;; (DEFMETHOD VIZ-EXCLUDE-OBJECT ...)

(CL:DEFMETHOD VIZ-EXCLUDE-OBJECT ((SELF VIZ-INFO) OBJECT)
  (CL:LET* ((ALLOWEDOBJECTS (%VIZ-INFO.ALLOWED-OBJECTS SELF)))
   (CL:WHEN (CL:EQ ALLOWEDOBJECTS NULL) (CL:SETQ ALLOWEDOBJECTS (NEW-HASH-SET)) (CL:SETF (%VIZ-INFO.ALLOWED-OBJECTS SELF) ALLOWEDOBJECTS)) (REMOVE ALLOWEDOBJECTS OBJECT)))

;;; (DEFMETHOD VIZ-CONCEPT-TO-DOT-NODE ...)

(CL:DEFMETHOD VIZ-CONCEPT-TO-DOT-NODE ((SELF VIZ-INFO) CONCEPT MODULE)
  (CL:LET*
   ((STREAM (%VIZ-INFO.STREAM SELF)) (CONCEPTNAME (VIZ-DOT-OBJECT-NAME CONCEPT)) (CONCEPTCOLOR (%VIZ-INFO.NODE-COLOR SELF))
    (CONCEPTURL (VIZ-GENERATE-ONTOSAURUS-HANDLE SELF CONCEPT)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING CONCEPTNAME CONCEPTCOLOR CONCEPTURL))
   (CL:COND
    ((CL:OR (%VIZ-INFO.SHOW-ATTRIBUTES? SELF) (%VIZ-INFO.SHOW-RULES? SELF))
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) "  \"" CONCEPTNAME "\" [shape=record, style=filled, fillcolor=" CONCEPTCOLOR ", URL=\"")
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) CONCEPTURL) (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) "\", label=\"{" CONCEPTNAME "|")
     (CL:WHEN (%VIZ-INFO.SHOW-ATTRIBUTES? SELF) (VIZ-ADD-CONCEPT-ATTRIBUTES-TO-DOT-NODE SELF CONCEPT MODULE))
     (CL:WHEN (%VIZ-INFO.SHOW-RULES? SELF) (CL:WHEN (%VIZ-INFO.SHOW-ATTRIBUTES? SELF) (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) "|"))
      (VIZ-ADD-CONCEPT-RULES-TO-DOT-NODE SELF CONCEPT MODULE))
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) "}\"]" EOL))
    (CL:T (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) "  \"" CONCEPTNAME "\" [shape=box, style=filled, fillcolor=" CONCEPTCOLOR ", URL=\"" CONCEPTURL "\"]")))))

;;; (DEFMETHOD VIZ-ADD-CONCEPT-ATTRIBUTES-TO-DOT-NODE ...)

(CL:DEFMETHOD VIZ-ADD-CONCEPT-ATTRIBUTES-TO-DOT-NODE ((SELF VIZ-INFO) CONCEPT MODULE)
  (CL:LET* ((STREAM (%VIZ-INFO.STREAM SELF)) (RANGE NULL))
   (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*)) (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
    (CL:LET* ((RELATION NULL) (ITER-000 (VIZ-GET-BINARY-RELATIONS-OF SELF CONCEPT)))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO (CL:SETQ RELATION (%%VALUE ITER-000)) (CL:SETQ RANGE (PLI::GET-RANGE RELATION))
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) (VIZ-DOT-OBJECT-NAME RELATION) ": " (VIZ-DOT-OBJECT-NAME RANGE) "\\l")
      (CL:SETQ ITER-000 (%%REST ITER-000)))))))

;;; (DEFMETHOD VIZ-ADD-CONCEPT-RULES-TO-DOT-NODE ...)

(CL:DEFMETHOD VIZ-ADD-CONCEPT-RULES-TO-DOT-NODE ((SELF VIZ-INFO) CONCEPT MODULE)
  (CL:LET* ((STREAM (%VIZ-INFO.STREAM SELF)) (FIRST? CL:T))
   (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*)) (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
    (CL:LET* ((*PRETTYPRINTLOGICALFORMS?* CL:T)) (CL:DECLARE (CL:SPECIAL *PRETTYPRINTLOGICALFORMS?*))
     (CL:LET* ((RULE NULL) (ITER-000 (PLI::GET-RULES CONCEPT MODULE NULL)))
      (CL:LOOP WHILE (NEXT? ITER-000) DO (CL:SETQ RULE (PLI::%PL-ITERATOR.VALUE ITER-000))
       (CL:WHEN (CL:NOT (SIMPLE-SUBRELATION-PROPOSITION? RULE)) (CL:WHEN (CL:NOT FIRST?) (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) "\\l"))
        (CL:SETQ FIRST? CL:NIL) (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) (VIZ-DOT-STRING (STRINGIFY RULE))))))))))

;;; (DEFMETHOD VIZ-CONCEPT-LINKS-TO-DOT-EDGES ...)

(CL:DEFMETHOD VIZ-CONCEPT-LINKS-TO-DOT-EDGES ((SELF VIZ-INFO) CONCEPT MODULE)
  (CL:LET* ((STREAM (%VIZ-INFO.STREAM SELF)) (COUNT 0)) (CL:DECLARE (CL:TYPE CL:FIXNUM COUNT))
   (CL:LET* ((SUPER NULL) (ITER-000 (PLI::GET-DIRECT-SUPERRELATIONS CONCEPT MODULE NULL)))
    (CL:LOOP WHILE (NEXT? ITER-000) DO (CL:SETQ SUPER (PLI::%PL-ITERATOR.VALUE ITER-000))
     (CL:COND
      ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE SUPER) SGT-VISUALIZE-LOGIC-NAMED-DESCRIPTION)
       (CL:PROGN
        (CL:COND
         ((VIZ-ALLOWED-OBJECT? SELF SUPER)
          (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) "  \"" (VIZ-DOT-OBJECT-NAME SUPER) "\" -> \"" (VIZ-DOT-OBJECT-NAME CONCEPT) "\" [dir=back]" EOL)
          (CL:SETQ COUNT (CL:1+ COUNT)))
         (CL:T
          (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) "  \"" (VIZ-DOT-OBJECT-NAME SUPER) "\" [shape=box, style=filled, fillcolor=grey,URL=\""
           (VIZ-GENERATE-ONTOSAURUS-HANDLE SELF SUPER) "\"]")
          (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) "  \"" (VIZ-DOT-OBJECT-NAME SUPER) "\" -> \"" (VIZ-DOT-OBJECT-NAME CONCEPT) "\" [dir=back]" EOL)
          (CL:SETQ COUNT (CL:1+ COUNT))))))
      (CL:T
       (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
        (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "viz-concept-links-to-dot-edges: unhandled super concept: `" SUPER "'")
        (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))
   (CL:WHEN (CL:AND (CL:= COUNT 0) (%VIZ-INFO.ADD-TOP? SELF))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) "  \"" VIZ-TOP "\" -> \"" (VIZ-DOT-OBJECT-NAME CONCEPT) "\" [dir=back]" EOL))
   (CL:WHEN (%VIZ-INFO.SHOW-RELATIONS? SELF)
    (CL:LET* ((RANGE NULL) (RELCOLOR (%VIZ-INFO.RELATION-COLOR SELF)) (RELSTYLE (%VIZ-INFO.RELATION-STYLE SELF)))
     (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING RELCOLOR RELSTYLE))
     (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*)) (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
      (CL:LET* ((RELATION NULL) (ITER-001 (VIZ-GET-BINARY-RELATIONS-OF SELF CONCEPT)))
       (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO (CL:SETQ RELATION (%%VALUE ITER-001)) (CL:SETQ RANGE (PLI::GET-RANGE RELATION))
        (CL:WHEN (VIZ-ALLOWED-OBJECT? SELF RELATION)
         (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) "  \"" (VIZ-DOT-OBJECT-NAME CONCEPT) "\" -> \"" (VIZ-DOT-OBJECT-NAME RANGE) "\" [label=\""
          (VIZ-DOT-OBJECT-NAME RELATION) "\", color=" RELCOLOR ", style=" RELSTYLE "]" EOL))
        (CL:SETQ ITER-001 (%%REST ITER-001)))))))))

;;; (DEFMETHOD VIZ-EXPORT-CONCEPT-TO-DOT ...)

(CL:DEFMETHOD VIZ-EXPORT-CONCEPT-TO-DOT ((SELF VIZ-INFO) CONCEPT MODULE)
  (VIZ-CONCEPT-TO-DOT-NODE SELF CONCEPT MODULE)
  (VIZ-CONCEPT-LINKS-TO-DOT-EDGES SELF CONCEPT MODULE))

;;; (DEFMETHOD VIZ-EXPORT-DOT-HEADER ...)

(CL:DEFMETHOD VIZ-EXPORT-DOT-HEADER ((SELF VIZ-INFO))
  (CL:LET* ((STREAM (%VIZ-INFO.STREAM SELF))) (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) "digraph Ontology {" EOL)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) "  node [fontname = Arial, fontsize=" (%VIZ-INFO.FONT-SIZE SELF) ", shape=box, style=filled, fillcolor="
    (%VIZ-INFO.NODE-COLOR SELF) ", height=0.2];" EOL)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) "  edge [fontname = Arial, fontsize=" (%VIZ-INFO.FONT-SIZE SELF) "];" EOL)))

;;; (DEFMETHOD VIZ-EXPORT-DOT-TRAILER ...)

(CL:DEFMETHOD VIZ-EXPORT-DOT-TRAILER ((SELF VIZ-INFO))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM (%VIZ-INFO.STREAM SELF)) "}" EOL))

;;; (DEFMETHOD VIZ-EXPORT-CONCEPT ...)

(CL:DEFMETHOD VIZ-EXPORT-CONCEPT ((SELF VIZ-INFO) CONCEPT MODULE)
  (VIZ-EXPORT-CONCEPT-TO-DOT SELF CONCEPT MODULE))

;;; (DEFMETHOD VIZ-EXPORT-CONCEPT-TREE ...)

(CL:DEFMETHOD VIZ-EXPORT-CONCEPT-TREE ((SELF VIZ-INFO) CONCEPT MODULE)
  (CL:SETF (%VIZ-INFO.NODE-COLOR SELF) "palegreen")
  (VIZ-EXPORT-CONCEPT SELF CONCEPT MODULE)
  (CL:SETF (%VIZ-INFO.NODE-COLOR SELF) "yellow")
  (VIZ-ALLOW-OBJECT SELF CONCEPT)
  (CL:LET* ((SUPER NULL) (ITER-000 (PLI::GET-PROPER-SUPERRELATIONS CONCEPT MODULE NULL)))
   (CL:LOOP WHILE (NEXT? ITER-000) DO (CL:SETQ SUPER (PLI::%PL-ITERATOR.VALUE ITER-000)) (VIZ-ALLOW-OBJECT SELF SUPER)))
  (CL:LET* ((SUB NULL) (ITER-001 (PLI::GET-PROPER-SUBRELATIONS CONCEPT MODULE NULL)))
   (CL:LOOP WHILE (NEXT? ITER-001) DO (CL:SETQ SUB (PLI::%PL-ITERATOR.VALUE ITER-001)) (VIZ-ALLOW-OBJECT SELF SUB)))
  (CL:LET* ((SUPER NULL) (ITER-002 (PLI::GET-PROPER-SUPERRELATIONS CONCEPT MODULE NULL)))
   (CL:LOOP WHILE (NEXT? ITER-002) DO (CL:SETQ SUPER (PLI::%PL-ITERATOR.VALUE ITER-002))
    (CL:COND ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE SUPER) SGT-VISUALIZE-LOGIC-LOGIC-OBJECT) (CL:PROGN (VIZ-EXPORT-CONCEPT SELF SUPER MODULE)))
     (CL:T
      (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "viz-export-concept-tree: concept not handled: `" SUPER "'")
       (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))
  (CL:LET* ((SUB NULL) (ITER-003 (PLI::GET-PROPER-SUBRELATIONS CONCEPT MODULE NULL)))
   (CL:LOOP WHILE (NEXT? ITER-003) DO (CL:SETQ SUB (PLI::%PL-ITERATOR.VALUE ITER-003))
    (CL:COND ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE SUB) SGT-VISUALIZE-LOGIC-LOGIC-OBJECT) (CL:PROGN (VIZ-EXPORT-CONCEPT SELF SUB MODULE)))
     (CL:T
      (CL:LET* ((STREAM-001 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-001) "viz-export-concept-tree: concept not handled: `" SUB "'")
       (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-001)))))))))

;;; (DEFMETHOD VIZ-EXPORT-CONCEPTS ...)

(CL:DEFMETHOD VIZ-EXPORT-CONCEPTS ((SELF VIZ-INFO) MODULE)
  (CL:LET* ((CONCEPT NULL) (ITER-000 (PLI::GET-CONCEPT-INSTANCES (GET-INSTANCE SGT-VISUALIZE-PL-KERNEL-KB-CONCEPT) MODULE NULL)))
   (CL:LOOP WHILE (NEXT? ITER-000) DO (CL:SETQ CONCEPT (PLI::%PL-ITERATOR.VALUE ITER-000))
    (CL:COND
     ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE CONCEPT) SGT-VISUALIZE-LOGIC-LOGIC-OBJECT)
      (CL:PROGN (CL:WHEN (CL:AND (CL:EQ (HOME-MODULE CONCEPT) MODULE) (VIZ-ALLOWED-OBJECT? SELF CONCEPT)) (VIZ-EXPORT-CONCEPT SELF CONCEPT MODULE))))
     (CL:T
      (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "viz-export-concepts: concept not handled: `" CONCEPT "'")
       (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))))

;;; (DEFMETHOD VIZ-EXPORT-MODULE ...)

(CL:DEFMETHOD VIZ-EXPORT-MODULE ((SELF VIZ-INFO) MODULE)
  (PL-LOG KWD-VISUALIZE-MEDIUM (WRAP-STRING "powerloom-viz: exporting module: ") MODULE)
  (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*)) (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*)) (VIZ-EXPORT-CONCEPTS SELF MODULE)))

;;; (DEFMETHOD VIZ-EXPORT-HEADER ...)

(CL:DEFMETHOD VIZ-EXPORT-HEADER ((SELF VIZ-INFO))
  (VIZ-EXPORT-DOT-HEADER SELF))

;;; (DEFMETHOD VIZ-EXPORT-TRAILER ...)

(CL:DEFMETHOD VIZ-EXPORT-TRAILER ((SELF VIZ-INFO))
  (VIZ-EXPORT-DOT-TRAILER SELF))

;;; (DEFUN VIZ-EXPORT-MODULE-TO-FILE ...)

(CL:DEFUN VIZ-EXPORT-MODULE-TO-FILE (MODULE FILE)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING FILE))
  #+MCL
  (CL:CHECK-TYPE FILE CL:SIMPLE-STRING)
  (CL:LET* ((OUT NULL))
   (CL:UNWIND-PROTECT
    (CL:PROGN (CL:SETQ OUT (OPEN-OUTPUT-FILE FILE))
     (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*)) (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
      (CL:LET* ((SELF-000 (NEW-VIZ-INFO))) (CL:SETF (%VIZ-INFO.SHOW-RELATIONS? SELF-000) CL:T) (CL:SETF (%VIZ-INFO.STREAM SELF-000) OUT)
       (CL:LET* ((INFO SELF-000)) (VIZ-EXPORT-HEADER INFO) (VIZ-EXPORT-MODULE INFO MODULE) (VIZ-EXPORT-TRAILER INFO)))))
    (CL:WHEN (CL:NOT (CL:EQ OUT NULL)) (FREE OUT)))))

;;; (DEFUN VIZ-EXPORT-CONCEPT-TO-FILE ...)

(CL:DEFUN VIZ-EXPORT-CONCEPT-TO-FILE (CONCEPT MODULE FILE)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING FILE))
  #+MCL
  (CL:CHECK-TYPE FILE CL:SIMPLE-STRING)
  (CL:LET* ((OUT NULL))
   (CL:UNWIND-PROTECT
    (CL:PROGN (CL:SETQ OUT (OPEN-OUTPUT-FILE FILE))
     (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*)) (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
      (CL:LET* ((SELF-000 (NEW-VIZ-INFO))) (CL:SETF (%VIZ-INFO.SHOW-RELATIONS? SELF-000) CL:T) (CL:SETF (%VIZ-INFO.SHOW-ATTRIBUTES? SELF-000) CL:T)
       (CL:SETF (%VIZ-INFO.SHOW-RULES? SELF-000) CL:T) (CL:SETF (%VIZ-INFO.STREAM SELF-000) OUT)
       (CL:LET* ((INFO SELF-000)) (VIZ-EXPORT-HEADER INFO) (VIZ-EXPORT-CONCEPT-TREE INFO CONCEPT MODULE) (VIZ-EXPORT-TRAILER INFO)))))
    (CL:WHEN (CL:NOT (CL:EQ OUT NULL)) (FREE OUT)))))

;;; (DEFGLOBAL *VIZ-DOT-PROGRAM* ...)

(CL:DEFVAR *VIZ-DOT-PROGRAM* "dot")
(CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING *VIZ-DOT-PROGRAM*))

;;; (DEFGLOBAL *VIZ-SERVER-ENABLED?* ...)

(CL:DEFVAR *VIZ-SERVER-ENABLED?* CL:T
  "If true, visualization requests are enabled.")

;;; (DEFGLOBAL *VIZ-SERVER-IMAGE-MAPS-ENABLED?* ...)

(CL:DEFVAR *VIZ-SERVER-IMAGE-MAPS-ENABLED?* CL:T
  "If true, visualization images will be linked with a
clickable image map.")

;;; (DEFUN (VIZ-SERVER-AVAILABLE? BOOLEAN) ...)

(CL:DEFUN VIZ-SERVER-AVAILABLE? ()
  *VIZ-SERVER-ENABLED?*)

;;; (DEFUN VIZ-SERVER-EXPORT-MODULE ...)

(CL:DEFUN VIZ-SERVER-EXPORT-MODULE (MODULE OUT)
  (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*)) (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:LET* ((SELF-000 (NEW-VIZ-INFO))) (CL:SETF (%VIZ-INFO.SHOW-RELATIONS? SELF-000) CL:T) (CL:SETF (%VIZ-INFO.STREAM SELF-000) OUT)
    (CL:LET* ((INFO SELF-000)) (VIZ-EXPORT-HEADER INFO) (VIZ-EXPORT-MODULE INFO MODULE) (VIZ-EXPORT-TRAILER INFO)))))

;;; (DEFUN VIZ-SERVER-EXPORT-CONCEPT ...)

(CL:DEFUN VIZ-SERVER-EXPORT-CONCEPT (CONCEPT MODULE OUT)
  (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*)) (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:LET* ((SELF-000 (NEW-VIZ-INFO))) (CL:SETF (%VIZ-INFO.SHOW-RELATIONS? SELF-000) CL:T) (CL:SETF (%VIZ-INFO.STREAM SELF-000) OUT)
    (CL:LET* ((INFO SELF-000)) (VIZ-EXPORT-HEADER INFO) (VIZ-EXPORT-CONCEPT-TREE INFO CONCEPT MODULE) (VIZ-EXPORT-TRAILER INFO)))))

;;; (DEFUN (VIZ-SERVER-EXPORT-OBJECT STRING) ...)

(CL:DECLAIM (CL:FTYPE (CL:FUNCTION (CL:T CL:T) CL:SIMPLE-STRING) VIZ-SERVER-EXPORT-OBJECT))
(CL:DEFUN VIZ-SERVER-EXPORT-OBJECT (OBJECT MODULE)
  (CL:LET* ((MEMO-TABLE-000 NULL) (MEMOIZED-ENTRY-000 NULL) (MEMOIZED-VALUE-000 NULL))
   (CL:WHEN *MEMOIZATION-ENABLED?* (CL:SETQ MEMO-TABLE-000 (%SURROGATE.SURROGATE-VALUE SGT-VISUALIZE-ONTOSAURUS-F-VIZ-SERVER-EXPORT-OBJECT-MEMO-TABLE-000))
    (CL:WHEN (CL:EQ MEMO-TABLE-000 NULL)
     (INITIALIZE-MEMOIZATION-TABLE SGT-VISUALIZE-ONTOSAURUS-F-VIZ-SERVER-EXPORT-OBJECT-MEMO-TABLE-000 "(:MAX-VALUES 20 :TIMESTAMPS (:META-KB-UPDATE))")
     (CL:SETQ MEMO-TABLE-000 (%SURROGATE.SURROGATE-VALUE SGT-VISUALIZE-ONTOSAURUS-F-VIZ-SERVER-EXPORT-OBJECT-MEMO-TABLE-000)))
    (CL:SETQ MEMOIZED-ENTRY-000 (LOOKUP-MRU-MEMOIZED-VALUE MEMO-TABLE-000 OBJECT MODULE MEMOIZED-NULL-VALUE NULL 2))
    (CL:SETQ MEMOIZED-VALUE-000 (%%VALUE MEMOIZED-ENTRY-000)))
   (CL:COND ((CL:NOT (CL:EQ MEMOIZED-VALUE-000 NULL)) (CL:WHEN (CL:EQ MEMOIZED-VALUE-000 MEMOIZED-NULL-VALUE) (CL:SETQ MEMOIZED-VALUE-000 NULL)))
    (CL:T (CL:SETQ MEMOIZED-VALUE-000 (WRAP-STRING (HELP-VIZ-SERVER-EXPORT-OBJECT OBJECT MODULE)))
     (CL:WHEN *MEMOIZATION-ENABLED?* (CL:SETF (%%VALUE MEMOIZED-ENTRY-000) (CL:IF (CL:EQ MEMOIZED-VALUE-000 NULL) MEMOIZED-NULL-VALUE MEMOIZED-VALUE-000)))))
   (CL:LET* ((VALUE-000 MEMOIZED-VALUE-000)) (%STRING-WRAPPER.WRAPPER-VALUE VALUE-000))))

;;; (DEFUN (HELP-VIZ-SERVER-EXPORT-OBJECT STRING) ...)

(CL:DECLAIM (CL:FTYPE (CL:FUNCTION (CL:T CL:T) CL:SIMPLE-STRING) HELP-VIZ-SERVER-EXPORT-OBJECT))
(CL:DEFUN HELP-VIZ-SERVER-EXPORT-OBJECT (OBJECT MODULE)
  (CL:LET* ((DOTOUT (NEW-OUTPUT-STRING-STREAM)))
   (CL:IF (ISA? OBJECT SGT-VISUALIZE-STELLA-MODULE) (VIZ-SERVER-EXPORT-MODULE OBJECT DOTOUT) (VIZ-SERVER-EXPORT-CONCEPT OBJECT MODULE DOTOUT)) (THE-STRING-READER DOTOUT)))

;;; (DEFUN VIZ-SERVER-HANDLER ...)

(CL:DEFUN VIZ-SERVER-HANDLER (XCHG)
  (CL:WHEN (CL:NOT (VIZ-SERVER-AVAILABLE?))
   (GENERATE-ERROR-RESPONSE XCHG KWD-VISUALIZE-NOT-IMPLEMENTED (CONCATENATE "Graphing not supported, program `" *VIZ-DOT-PROGRAM* "' not found"))
   (CL:RETURN-FROM VIZ-SERVER-HANDLER))
  (CL:LET* ((KEYS (PARSE-AND-DECODE-URL-ARGUMENTS (GET-REQUEST-URI-QUERY XCHG) #\+))) (CL:WHEN (CL:< (LENGTH KEYS) 4) (DO-ACTION-HANDLER XCHG))
   (CL:LET*
    ((ACTION (%%VALUE KEYS)) (OBJECTTYPE (%%VALUE (%%REST KEYS))) (MODULENAME (%%VALUE (%%REST (%%REST KEYS)))) (OBJECTNAME (FOURTH KEYS))
     (STREAM (GET-REPLY-STREAM XCHG)) (MODULE (PLI::GET-MODULE (%STRING-WRAPPER.WRAPPER-VALUE MODULENAME) NULL)) (VISUALIZEDOBJECT NULL)
     (GENERATEMAP? (CL:AND *VIZ-SERVER-IMAGE-MAPS-ENABLED?* (EQL-TO-STRING? ACTION "graph"))))
    (CL:WHEN (CL:EQ MODULE NULL) (HTML-UNKNOWN-OBJECT-RESPONSE KWD-VISUALIZE-CONTEXT (%STRING-WRAPPER.WRAPPER-VALUE MODULENAME) STREAM)
     (CL:RETURN-FROM VIZ-SERVER-HANDLER))
    (CL:LET* ((TEST-VALUE-000 (%STRING-WRAPPER.WRAPPER-VALUE OBJECTTYPE))) (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TEST-VALUE-000))
     (CL:COND ((STRING-EQL? TEST-VALUE-000 "context") (CL:SETQ VISUALIZEDOBJECT MODULE))
      ((CL:OR (STRING-EQL? TEST-VALUE-000 "relation") (STRING-EQL? TEST-VALUE-000 "concept"))
       (CL:SETQ VISUALIZEDOBJECT (PLI::GET-RELATION (%STRING-WRAPPER.WRAPPER-VALUE OBJECTNAME) MODULE NULL)))
      (CL:T
       (GENERATE-ERROR-RESPONSE XCHG KWD-VISUALIZE-BAD-REQUEST
        (CONCATENATE "Malformed URL, graph of type `" (%STRING-WRAPPER.WRAPPER-VALUE OBJECTTYPE) "' is not supported."))
       (CL:RETURN-FROM VIZ-SERVER-HANDLER))))
    (CL:WHEN (CL:EQ VISUALIZEDOBJECT NULL)
     (HTML-UNKNOWN-OBJECT-RESPONSE (CL:IF (CL:EQ MODULE NULL) KWD-VISUALIZE-CONTEXT KWD-VISUALIZE-RELATION)
      (CL:IF (CL:EQ MODULE NULL) (%STRING-WRAPPER.WRAPPER-VALUE MODULENAME) (%STRING-WRAPPER.WRAPPER-VALUE OBJECTNAME)) STREAM)
     (CL:RETURN-FROM VIZ-SERVER-HANDLER))
    (CL:IF GENERATEMAP? (VIZ-SERVER-SERVE-IMAGE-PLUS-MAP XCHG VISUALIZEDOBJECT MODULE) (VIZ-SERVER-SERVE-IMAGE XCHG VISUALIZEDOBJECT MODULE)))))

;;; (DEFUN VIZ-SERVER-SERVE-IMAGE ...)

(CL:DEFUN VIZ-SERVER-SERVE-IMAGE (XCHG OBJECT MODULE)
  (CL:LET* ((STREAM (GET-REPLY-STREAM XCHG)) (DOTCOMMANDS (VIZ-SERVER-EXPORT-OBJECT OBJECT MODULE)) (DOTEXIT 0))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING DOTCOMMANDS) (CL:TYPE CL:FIXNUM DOTEXIT))
   (CL:WHEN (BLANK-STRING? DOTCOMMANDS) (GENERATE-ERROR-RESPONSE XCHG KWD-VISUALIZE-BAD-REQUEST "Nothing to graph") (CL:RETURN-FROM VIZ-SERVER-SERVE-IMAGE))
   (SET-REPLY-HEADER-VALUE XCHG KWD-VISUALIZE-CONTENT-TYPE (GET-HTTP-MIME-TYPE KWD-VISUALIZE-IMAGE-GIF NULL))
   (CL:LET* ((SELF-001 (NEW-OUTPUT-STREAM))) (CL:SETF (%OUTPUT-STREAM.NATIVE-STREAM SELF-001) STREAM)
    (CL:SETQ DOTEXIT
     (EXECUTE-SHELL-COMMAND (CONS (WRAP-STRING *VIZ-DOT-PROGRAM*) (CONS (WRAP-STRING "-Tgif") NIL)) "." (NEW-INPUT-STRING-STREAM DOTCOMMANDS) SELF-001 NULL)))
   (CL:WHEN (CL:NOT (CL:= DOTEXIT 0)) (GENERATE-ERROR-RESPONSE XCHG KWD-VISUALIZE-INTERNAL-ERROR "Problem running `dot'") NULL)))

;;; (DEFUN VIZ-SERVER-SERVE-IMAGE-PLUS-MAP ...)

(CL:DEFUN VIZ-SERVER-SERVE-IMAGE-PLUS-MAP (XCHG OBJECT MODULE)
  (CL:LET*
   ((URI (UNESCAPE-URL-STRING (GET-REQUEST-URI XCHG))) (STREAM (GET-REPLY-STREAM XCHG)) (DOTCOMMANDS (VIZ-SERVER-EXPORT-OBJECT OBJECT MODULE))
    (IMAGEMAP STELLA::NULL-STRING))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING URI DOTCOMMANDS IMAGEMAP))
   (CL:WHEN (BLANK-STRING? DOTCOMMANDS) (GENERATE-ERROR-RESPONSE XCHG KWD-VISUALIZE-BAD-REQUEST "Nothing to graph") (CL:RETURN-FROM VIZ-SERVER-SERVE-IMAGE-PLUS-MAP))
   (CL:HANDLER-CASE
    (CL:SETQ IMAGEMAP
     (%STRING-WRAPPER.WRAPPER-VALUE
      (%SHELL-COMMAND (CONS (WRAP-STRING *VIZ-DOT-PROGRAM*) (CONS (WRAP-STRING "-Tcmap") NIL)) (CONS-LIST KWD-VISUALIZE-INPUT (WRAP-STRING DOTCOMMANDS)))))
    (STELLA-EXCEPTION (E) (GENERATE-ERROR-RESPONSE XCHG KWD-VISUALIZE-INTERNAL-ERROR (EXCEPTION-MESSAGE E)) (CL:RETURN-FROM VIZ-SERVER-SERVE-IMAGE-PLUS-MAP)))
   (SET-REPLY-HEADER-VALUE XCHG KWD-VISUALIZE-CONTENT-TYPE (GET-HTTP-MIME-TYPE KWD-VISUALIZE-HTML NULL))
   (CL:PROGN (%%PRINT-STREAM STREAM "<HTML>")
    (CL:PROGN (%%PRINT-STREAM STREAM "<HEAD>") (%%PRINT-STREAM STREAM "<TITLE>PowerLoom Graph</TITLE>" EOL) (%%PRINT-STREAM STREAM "<BASE TARGET='content'>" EOL)
     (%%PRINT-STREAM STREAM "</HEAD>" EOL))
    (CL:PROGN (%%PRINT-STREAM STREAM "<BODY>")
     (CL:PROGN (%%PRINT-STREAM STREAM "<MAP NAME='ontomap'>") (%%PRINT-STREAM STREAM IMAGEMAP) (%%PRINT-STREAM STREAM "</MAP>" EOL))
     (%%PRINT-STREAM STREAM "<IMG SRC='" (REPLACE-SUBSTRINGS URI "/do-action?graph-bare+" "/do-action?graph+") "' border='1' usemap='#ontomap'>" EOL)
     (%%PRINT-STREAM STREAM "</BODY>" EOL))
    (%%PRINT-STREAM STREAM "</HTML>" EOL))))

(CL:DEFUN HELP-STARTUP-VISUALIZE1 ()
  (CL:PROGN (CL:SETQ SGT-VISUALIZE-ONTOSAURUS-VIZ-INFO (INTERN-RIGID-SYMBOL-WRT-MODULE "VIZ-INFO" NULL 1))
   (CL:SETQ SYM-VISUALIZE-STELLA-STREAM (INTERN-RIGID-SYMBOL-WRT-MODULE "STREAM" (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-VISUALIZE-ONTOSAURUS-ALLOWED-OBJECTS (INTERN-RIGID-SYMBOL-WRT-MODULE "ALLOWED-OBJECTS" NULL 0))
   (CL:SETQ SYM-VISUALIZE-ONTOSAURUS-SHOW-RELATIONS? (INTERN-RIGID-SYMBOL-WRT-MODULE "SHOW-RELATIONS?" NULL 0))
   (CL:SETQ SYM-VISUALIZE-ONTOSAURUS-SHOW-ATTRIBUTES? (INTERN-RIGID-SYMBOL-WRT-MODULE "SHOW-ATTRIBUTES?" NULL 0))
   (CL:SETQ SYM-VISUALIZE-ONTOSAURUS-SHOW-RULES? (INTERN-RIGID-SYMBOL-WRT-MODULE "SHOW-RULES?" NULL 0))
   (CL:SETQ SYM-VISUALIZE-ONTOSAURUS-ADD-TOP? (INTERN-RIGID-SYMBOL-WRT-MODULE "ADD-TOP?" NULL 0))
   (CL:SETQ SYM-VISUALIZE-ONTOSAURUS-NODE-COLOR (INTERN-RIGID-SYMBOL-WRT-MODULE "NODE-COLOR" NULL 0))
   (CL:SETQ SYM-VISUALIZE-ONTOSAURUS-RELATION-COLOR (INTERN-RIGID-SYMBOL-WRT-MODULE "RELATION-COLOR" NULL 0))
   (CL:SETQ SYM-VISUALIZE-ONTOSAURUS-RELATION-STYLE (INTERN-RIGID-SYMBOL-WRT-MODULE "RELATION-STYLE" NULL 0))
   (CL:SETQ SYM-VISUALIZE-ONTOSAURUS-FONT-SIZE (INTERN-RIGID-SYMBOL-WRT-MODULE "FONT-SIZE" NULL 0))
   (CL:SETQ SYM-VISUALIZE-LOGIC-?RELATION (INTERN-RIGID-SYMBOL-WRT-MODULE "?RELATION" (GET-STELLA-MODULE "/LOGIC" CL:T) 0))
   (CL:SETQ SYM-VISUALIZE-ONTOSAURUS-?DOMAIN (INTERN-RIGID-SYMBOL-WRT-MODULE "?DOMAIN" NULL 0))
   (CL:SETQ SYM-VISUALIZE-STELLA-AND (INTERN-RIGID-SYMBOL-WRT-MODULE "AND" (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-VISUALIZE-PL-KERNEL-KB-NTH-DOMAIN (INTERN-RIGID-SYMBOL-WRT-MODULE "NTH-DOMAIN" (GET-STELLA-MODULE "/PL-KERNEL-KB" CL:T) 0))
   (CL:SETQ SYM-VISUALIZE-ONTOSAURUS-BINARY-RELATION (INTERN-RIGID-SYMBOL-WRT-MODULE "BINARY-RELATION" NULL 0))
   (CL:SETQ KWD-VISUALIZE-SINGLETONS? (INTERN-RIGID-SYMBOL-WRT-MODULE "SINGLETONS?" NULL 2))
   (CL:SETQ KWD-VISUALIZE-INFERENCE-LEVEL (INTERN-RIGID-SYMBOL-WRT-MODULE "INFERENCE-LEVEL" NULL 2))
   (CL:SETQ KWD-VISUALIZE-SHALLOW (INTERN-RIGID-SYMBOL-WRT-MODULE "SHALLOW" NULL 2))
   (CL:SETQ SYM-VISUALIZE-ONTOSAURUS-M-VIZ-INFO.VIZ-GET-BINARY-RELATIONS-OF-QUERY-000
    (INTERN-RIGID-SYMBOL-WRT-MODULE "M-VIZ-INFO.VIZ-GET-BINARY-RELATIONS-OF-QUERY-000" NULL 0))
   (CL:SETQ SGT-VISUALIZE-ONTOSAURUS-M-VIZ-INFO.VIZ-GET-BINARY-RELATIONS-OF-MEMO-TABLE-000
    (INTERN-RIGID-SYMBOL-WRT-MODULE "M-VIZ-INFO.VIZ-GET-BINARY-RELATIONS-OF-MEMO-TABLE-000" NULL 1))
   (CL:SETQ SYM-VISUALIZE-ONTOSAURUS-M-VIZ-INFO.VIZ-GET-BINARY-RELATIONS-OF-QUERY-001
    (INTERN-RIGID-SYMBOL-WRT-MODULE "M-VIZ-INFO.VIZ-GET-BINARY-RELATIONS-OF-QUERY-001" NULL 0))
   (CL:SETQ SGT-VISUALIZE-LOGIC-NAMED-DESCRIPTION (INTERN-RIGID-SYMBOL-WRT-MODULE "NAMED-DESCRIPTION" (GET-STELLA-MODULE "/LOGIC" CL:T) 1))
   (CL:SETQ SGT-VISUALIZE-LOGIC-LOGIC-OBJECT (INTERN-RIGID-SYMBOL-WRT-MODULE "LOGIC-OBJECT" (GET-STELLA-MODULE "/LOGIC" CL:T) 1))
   (CL:SETQ SGT-VISUALIZE-PL-KERNEL-KB-CONCEPT (INTERN-RIGID-SYMBOL-WRT-MODULE "CONCEPT" (GET-STELLA-MODULE "/PL-KERNEL-KB" CL:T) 1))
   (CL:SETQ KWD-VISUALIZE-MEDIUM (INTERN-RIGID-SYMBOL-WRT-MODULE "MEDIUM" NULL 2))
   (CL:SETQ SGT-VISUALIZE-ONTOSAURUS-F-VIZ-SERVER-EXPORT-OBJECT-MEMO-TABLE-000 (INTERN-RIGID-SYMBOL-WRT-MODULE "F-VIZ-SERVER-EXPORT-OBJECT-MEMO-TABLE-000" NULL 1))
   (CL:SETQ SGT-VISUALIZE-STELLA-MODULE (INTERN-RIGID-SYMBOL-WRT-MODULE "MODULE" (GET-STELLA-MODULE "/STELLA" CL:T) 1))
   (CL:SETQ KWD-VISUALIZE-NOT-IMPLEMENTED (INTERN-RIGID-SYMBOL-WRT-MODULE "NOT-IMPLEMENTED" NULL 2))
   (CL:SETQ KWD-VISUALIZE-CONTEXT (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTEXT" NULL 2))
   (CL:SETQ KWD-VISUALIZE-BAD-REQUEST (INTERN-RIGID-SYMBOL-WRT-MODULE "BAD-REQUEST" NULL 2))
   (CL:SETQ KWD-VISUALIZE-RELATION (INTERN-RIGID-SYMBOL-WRT-MODULE "RELATION" NULL 2))
   (CL:SETQ KWD-VISUALIZE-CONTENT-TYPE (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTENT-TYPE" NULL 2))
   (CL:SETQ KWD-VISUALIZE-IMAGE-GIF (INTERN-RIGID-SYMBOL-WRT-MODULE "IMAGE-GIF" NULL 2))
   (CL:SETQ KWD-VISUALIZE-INTERNAL-ERROR (INTERN-RIGID-SYMBOL-WRT-MODULE "INTERNAL-ERROR" NULL 2))
   (CL:SETQ KWD-VISUALIZE-INPUT (INTERN-RIGID-SYMBOL-WRT-MODULE "INPUT" NULL 2)) (CL:SETQ KWD-VISUALIZE-HTML (INTERN-RIGID-SYMBOL-WRT-MODULE "HTML" NULL 2))
   (CL:SETQ SYM-VISUALIZE-ONTOSAURUS-STARTUP-VISUALIZE (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-VISUALIZE" NULL 0))
   (CL:SETQ SYM-VISUALIZE-STELLA-METHOD-STARTUP-CLASSNAME (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME" (GET-STELLA-MODULE "/STELLA" CL:T) 0))))

(CL:DEFUN STARTUP-VISUALIZE ()
  (CL:LET* ((*MODULE* (GET-STELLA-MODULE "/ONTOSAURUS" (> *STARTUP-TIME-PHASE* 1))) (*CONTEXT* *MODULE*)) (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2) (HELP-STARTUP-VISUALIZE1)) (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 4) (CL:SETQ *VIZ-EXCLUDED-MODULES* (LIST)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 5)
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "VIZ-INFO"
        "(DEFCLASS VIZ-INFO (STANDARD-OBJECT) :DOCUMENTATION \"Encapsulates all the options and local state information needed to
visualize a set of concepts as a graph.\" :SLOTS ((STREAM :TYPE OUTPUT-STREAM) (ALLOWED-OBJECTS :TYPE HASH-SET) (SHOW-RELATIONS? :TYPE BOOLEAN :INITIALLY *VIZ-SHOW-RELATIONS?*) (SHOW-ATTRIBUTES? :TYPE BOOLEAN :INITIALLY *VIZ-SHOW-ATTRIBUTES?*) (SHOW-RULES? :TYPE BOOLEAN :INITIALLY *VIZ-SHOW-RULES?*) (ADD-TOP? :TYPE BOOLEAN :INITIALLY *VIZ-ADD-TOP?*) (NODE-COLOR :TYPE STRING :INITIALLY *VIZ-NODE-COLOR*) (RELATION-COLOR :TYPE STRING :INITIALLY *VIZ-RELATION-COLOR*) (RELATION-STYLE :TYPE STRING :INITIALLY *VIZ-RELATION-STYLE*) (FONT-SIZE :TYPE INTEGER :INITIALLY *VIZ-FONT-SIZE*)))")))
     (CL:SETF (%CLASS.CLASS-CONSTRUCTOR-CODE CLASS) (CL:FUNCTION NEW-VIZ-INFO))
     (CL:SETF (%CLASS.CLASS-SLOT-ACCESSOR-CODE CLASS) (CL:FUNCTION ACCESS-VIZ-INFO-SLOT-VALUE))))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (DEFINE-FUNCTION-OBJECT "VIZ-GET-OBJECT-NAME" "(DEFUN (VIZ-GET-OBJECT-NAME STRING) ((OBJECT OBJECT)))" (CL:FUNCTION VIZ-GET-OBJECT-NAME) NULL)
    (DEFINE-METHOD-OBJECT "(DEFMETHOD (VIZ-GENERATE-ONTOSAURUS-HANDLE STRING) ((SELF VIZ-INFO) (OBJECT STANDARD-OBJECT)))" (CL:FUNCTION VIZ-GENERATE-ONTOSAURUS-HANDLE)
     NULL)
    (DEFINE-METHOD-OBJECT "(DEFMETHOD (VIZ-GET-BINARY-RELATIONS-OF (CONS OF LOGIC-OBJECT)) ((SELF VIZ-INFO) (CONCEPT LOGIC-OBJECT)))"
     (CL:FUNCTION VIZ-GET-BINARY-RELATIONS-OF) NULL)
    (DEFINE-FUNCTION-OBJECT "VIZ-DOT-STRING" "(DEFUN (VIZ-DOT-STRING STRING) ((NAME STRING)))" (CL:FUNCTION VIZ-DOT-STRING) NULL)
    (DEFINE-FUNCTION-OBJECT "VIZ-DOT-OBJECT-NAME" "(DEFUN (VIZ-DOT-OBJECT-NAME STRING) ((OBJECT OBJECT)))" (CL:FUNCTION VIZ-DOT-OBJECT-NAME) NULL)
    (DEFINE-METHOD-OBJECT "(DEFMETHOD (VIZ-EXCLUDED-MODULE? BOOLEAN) ((SELF VIZ-INFO) (MODULE MODULE)))" (CL:FUNCTION VIZ-EXCLUDED-MODULE?) NULL)
    (DEFINE-METHOD-OBJECT "(DEFMETHOD (VIZ-ALLOWED-OBJECT? BOOLEAN) ((SELF VIZ-INFO) (OBJECT OBJECT)))" (CL:FUNCTION VIZ-ALLOWED-OBJECT?) NULL)
    (DEFINE-METHOD-OBJECT "(DEFMETHOD VIZ-ALLOW-OBJECT ((SELF VIZ-INFO) (OBJECT OBJECT)))" (CL:FUNCTION VIZ-ALLOW-OBJECT) NULL)
    (DEFINE-METHOD-OBJECT "(DEFMETHOD VIZ-EXCLUDE-OBJECT ((SELF VIZ-INFO) (OBJECT OBJECT)))" (CL:FUNCTION VIZ-EXCLUDE-OBJECT) NULL)
    (DEFINE-METHOD-OBJECT "(DEFMETHOD VIZ-CONCEPT-TO-DOT-NODE ((SELF VIZ-INFO) (CONCEPT LOGIC-OBJECT) (MODULE MODULE)))" (CL:FUNCTION VIZ-CONCEPT-TO-DOT-NODE) NULL)
    (DEFINE-METHOD-OBJECT "(DEFMETHOD VIZ-ADD-CONCEPT-ATTRIBUTES-TO-DOT-NODE ((SELF VIZ-INFO) (CONCEPT LOGIC-OBJECT) (MODULE MODULE)))"
     (CL:FUNCTION VIZ-ADD-CONCEPT-ATTRIBUTES-TO-DOT-NODE) NULL)
    (DEFINE-METHOD-OBJECT "(DEFMETHOD VIZ-ADD-CONCEPT-RULES-TO-DOT-NODE ((SELF VIZ-INFO) (CONCEPT LOGIC-OBJECT) (MODULE MODULE)))"
     (CL:FUNCTION VIZ-ADD-CONCEPT-RULES-TO-DOT-NODE) NULL)
    (DEFINE-METHOD-OBJECT "(DEFMETHOD VIZ-CONCEPT-LINKS-TO-DOT-EDGES ((SELF VIZ-INFO) (CONCEPT LOGIC-OBJECT) (MODULE MODULE)))"
     (CL:FUNCTION VIZ-CONCEPT-LINKS-TO-DOT-EDGES) NULL)
    (DEFINE-METHOD-OBJECT "(DEFMETHOD VIZ-EXPORT-CONCEPT-TO-DOT ((SELF VIZ-INFO) (CONCEPT LOGIC-OBJECT) (MODULE MODULE)))" (CL:FUNCTION VIZ-EXPORT-CONCEPT-TO-DOT) NULL)
    (DEFINE-METHOD-OBJECT "(DEFMETHOD VIZ-EXPORT-DOT-HEADER ((SELF VIZ-INFO)))" (CL:FUNCTION VIZ-EXPORT-DOT-HEADER) NULL)
    (DEFINE-METHOD-OBJECT "(DEFMETHOD VIZ-EXPORT-DOT-TRAILER ((SELF VIZ-INFO)))" (CL:FUNCTION VIZ-EXPORT-DOT-TRAILER) NULL)
    (DEFINE-METHOD-OBJECT "(DEFMETHOD VIZ-EXPORT-CONCEPT ((SELF VIZ-INFO) (CONCEPT LOGIC-OBJECT) (MODULE MODULE)))" (CL:FUNCTION VIZ-EXPORT-CONCEPT) NULL)
    (DEFINE-METHOD-OBJECT "(DEFMETHOD VIZ-EXPORT-CONCEPT-TREE ((SELF VIZ-INFO) (CONCEPT LOGIC-OBJECT) (MODULE MODULE)))" (CL:FUNCTION VIZ-EXPORT-CONCEPT-TREE) NULL)
    (DEFINE-METHOD-OBJECT "(DEFMETHOD VIZ-EXPORT-CONCEPTS ((SELF VIZ-INFO) (MODULE MODULE)))" (CL:FUNCTION VIZ-EXPORT-CONCEPTS) NULL)
    (DEFINE-METHOD-OBJECT "(DEFMETHOD VIZ-EXPORT-MODULE ((SELF VIZ-INFO) (MODULE MODULE)))" (CL:FUNCTION VIZ-EXPORT-MODULE) NULL)
    (DEFINE-METHOD-OBJECT "(DEFMETHOD VIZ-EXPORT-HEADER ((SELF VIZ-INFO)))" (CL:FUNCTION VIZ-EXPORT-HEADER) NULL)
    (DEFINE-METHOD-OBJECT "(DEFMETHOD VIZ-EXPORT-TRAILER ((SELF VIZ-INFO)))" (CL:FUNCTION VIZ-EXPORT-TRAILER) NULL)
    (DEFINE-FUNCTION-OBJECT "VIZ-EXPORT-MODULE-TO-FILE" "(DEFUN VIZ-EXPORT-MODULE-TO-FILE ((MODULE MODULE) (FILE STRING)))" (CL:FUNCTION VIZ-EXPORT-MODULE-TO-FILE) NULL)
    (DEFINE-FUNCTION-OBJECT "VIZ-EXPORT-CONCEPT-TO-FILE" "(DEFUN VIZ-EXPORT-CONCEPT-TO-FILE ((CONCEPT LOGIC-OBJECT) (MODULE MODULE) (FILE STRING)))"
     (CL:FUNCTION VIZ-EXPORT-CONCEPT-TO-FILE) NULL)
    (DEFINE-FUNCTION-OBJECT "VIZ-SERVER-AVAILABLE?" "(DEFUN (VIZ-SERVER-AVAILABLE? BOOLEAN) ())" (CL:FUNCTION VIZ-SERVER-AVAILABLE?) NULL)
    (DEFINE-FUNCTION-OBJECT "VIZ-SERVER-EXPORT-MODULE" "(DEFUN VIZ-SERVER-EXPORT-MODULE ((MODULE MODULE) (OUT OUTPUT-STREAM)))" (CL:FUNCTION VIZ-SERVER-EXPORT-MODULE)
     NULL)
    (DEFINE-FUNCTION-OBJECT "VIZ-SERVER-EXPORT-CONCEPT" "(DEFUN VIZ-SERVER-EXPORT-CONCEPT ((CONCEPT LOGIC-OBJECT) (MODULE MODULE) (OUT OUTPUT-STREAM)))"
     (CL:FUNCTION VIZ-SERVER-EXPORT-CONCEPT) NULL)
    (DEFINE-FUNCTION-OBJECT "VIZ-SERVER-EXPORT-OBJECT" "(DEFUN (VIZ-SERVER-EXPORT-OBJECT STRING) ((OBJECT OBJECT) (MODULE MODULE)))"
     (CL:FUNCTION VIZ-SERVER-EXPORT-OBJECT) NULL)
    (DEFINE-FUNCTION-OBJECT "HELP-VIZ-SERVER-EXPORT-OBJECT" "(DEFUN (HELP-VIZ-SERVER-EXPORT-OBJECT STRING) ((OBJECT OBJECT) (MODULE MODULE)))"
     (CL:FUNCTION HELP-VIZ-SERVER-EXPORT-OBJECT) NULL)
    (DEFINE-FUNCTION-OBJECT "VIZ-SERVER-HANDLER" "(DEFUN VIZ-SERVER-HANDLER ((XCHG /HTTP/HTTP-EXCHANGE)))" (CL:FUNCTION VIZ-SERVER-HANDLER) NULL)
    (DEFINE-FUNCTION-OBJECT "VIZ-SERVER-SERVE-IMAGE" "(DEFUN VIZ-SERVER-SERVE-IMAGE ((XCHG /HTTP/HTTP-EXCHANGE) (OBJECT OBJECT) (MODULE MODULE)))"
     (CL:FUNCTION VIZ-SERVER-SERVE-IMAGE) NULL)
    (DEFINE-FUNCTION-OBJECT "VIZ-SERVER-SERVE-IMAGE-PLUS-MAP" "(DEFUN VIZ-SERVER-SERVE-IMAGE-PLUS-MAP ((XCHG /HTTP/HTTP-EXCHANGE) (OBJECT OBJECT) (MODULE MODULE)))"
     (CL:FUNCTION VIZ-SERVER-SERVE-IMAGE-PLUS-MAP) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-VISUALIZE" "(DEFUN STARTUP-VISUALIZE () :PUBLIC? TRUE)" (CL:FUNCTION STARTUP-VISUALIZE) NULL)
    (CL:LET* ((FUNCTION (LOOKUP-FUNCTION SYM-VISUALIZE-ONTOSAURUS-STARTUP-VISUALIZE)))
     (SET-DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION) SYM-VISUALIZE-STELLA-METHOD-STARTUP-CLASSNAME (WRAP-STRING "_StartupVisualize") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS) (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9) (%IN-MODULE (COPY-CONS-TREE (WRAP-STRING "ONTOSAURUS")))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *VIZ-SHOW-RELATIONS?* BOOLEAN FALSE :DOCUMENTATION \"If true, show binary relations between domain and range concepts as edges.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *VIZ-SHOW-ATTRIBUTES?* BOOLEAN FALSE :DOCUMENTATION \"If true, show binary relations as attributes (2nd box in a concept label).\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *VIZ-SHOW-RULES?* BOOLEAN FALSE :DOCUMENTATION \"If true, show defining rules (3rd box in a concept label).\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *VIZ-ADD-TOP?* BOOLEAN FALSE :DOCUMENTATION \"If true, put everything under artificial TOP node.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE "(DEFGLOBAL *VIZ-NODE-COLOR* STRING \"yellow\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE "(DEFGLOBAL *VIZ-RELATION-COLOR* STRING \"blue\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE "(DEFGLOBAL *VIZ-RELATION-STYLE* STRING \"dashed\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE "(DEFGLOBAL *VIZ-FONT-SIZE* INTEGER 7)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE "(DEFGLOBAL VIZ-TOP STRING \"top\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE "(DEFGLOBAL VIZ-UNKNOWN STRING \"unknown\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *VIZ-EXCLUDED-MODULES* (LIST OF MODULE) (LIST) :DOCUMENTATION \"Set of PowerLoom logic modules that shouldn't be visualized.
By default this is empty but it could be used to customize the visualizer.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE "(DEFGLOBAL *VIZ-DOT-PROGRAM* STRING \"dot\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *VIZ-SERVER-ENABLED?* BOOLEAN TRUE :DOCUMENTATION \"If true, visualization requests are enabled.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *VIZ-SERVER-IMAGE-MAPS-ENABLED?* BOOLEAN TRUE :DOCUMENTATION \"If true, visualization images will be linked with a
clickable image map.\" :PUBLIC? TRUE)")
    (CL:HANDLER-CASE (%SHELL-COMMAND (CONS (WRAP-STRING *VIZ-DOT-PROGRAM*) (CONS (WRAP-STRING "-V") NIL)) NIL)
     (STELLA-EXCEPTION (E)
      (CL:WHEN (CL:= (STRING-SEARCH (STRING-DOWNCASE (EXCEPTION-MESSAGE E)) "graphviz" NULL-INTEGER) NULL-INTEGER) (CL:SETQ *VIZ-SERVER-ENABLED?* CL:NIL)))))))
