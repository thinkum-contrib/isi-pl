;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; html-utilities.slisp

#|
 +---------------------------- BEGIN LICENSE BLOCK ---------------------------+
 |                                                                            |
 | Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
 |                                                                            |
 | The contents of this file are subject to the Mozilla Public License        |
 | Version 1.1 (the "License"); you may not use this file except in           |
 | compliance with the License. You may obtain a copy of the License at       |
 | http://www.mozilla.org/MPL/                                                |
 |                                                                            |
 | Software distributed under the License is distributed on an "AS IS" basis, |
 | WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
 | for the specific language governing rights and limitations under the       |
 | License.                                                                   |
 |                                                                            |
 | The Original Code is the PowerLoom KR&R System.                            |
 |                                                                            |
 | The Initial Developer of the Original Code is                              |
 | UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
 | 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
 |                                                                            |
 | Portions created by the Initial Developer are Copyright (C) 2000-2012      |
 | the Initial Developer. All Rights Reserved.                                |
 |                                                                            |
 | Contributor(s):                                                            |
 |                                                                            |
 | Alternatively, the contents of this file may be used under the terms of    |
 | either the GNU General Public License Version 2 or later (the "GPL"), or   |
 | the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
 | in which case the provisions of the GPL or the LGPL are applicable instead |
 | of those above. If you wish to allow use of your version of this file only |
 | under the terms of either the GPL or the LGPL, and not to allow others to  |
 | use your version of this file under the terms of the MPL, indicate your    |
 | decision by deleting the provisions above and replace them with the notice |
 | and other provisions required by the GPL or the LGPL. If you do not delete |
 | the provisions above, a recipient may use your version of this file under  |
 | the terms of any one of the MPL, the GPL or the LGPL.                      |
 |                                                                            |
 +----------------------------- END LICENSE BLOCK ----------------------------+
|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SGT-HTML-UTILITIES-STELLA-MODULE NULL)
(CL:DEFVAR SGT-HTML-UTILITIES-LOGIC-LOGIC-OBJECT NULL)
(CL:DEFVAR SYM-HTML-UTILITIES-ONTOSAURUS-STARTUP-HTML-UTILITIES NULL)
(CL:DEFVAR SYM-HTML-UTILITIES-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STARTUP-TIME-PHASE* NULL-INTEGER *MODULE*
  MODULE-SEPARATOR-STRING STANDARD-OUTPUT STANDARD-ERROR EOL))

;;; (DEFGLOBAL *ERROR-BACKGROUND-COLOR* ...)

(CL:DEFVAR *ERROR-BACKGROUND-COLOR* "FF9999")
(CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING *ERROR-BACKGROUND-COLOR*))

;;; (DEFGLOBAL *STANDARD-BACKGROUND-COLOR* ...)

(CL:DEFVAR *STANDARD-BACKGROUND-COLOR* "99CCFF")
(CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING *STANDARD-BACKGROUND-COLOR*))

;;; (DEFGLOBAL *MODULE-BACKGROUND-COLOR* ...)

(CL:DEFVAR *MODULE-BACKGROUND-COLOR* "9999CC")
(CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING *MODULE-BACKGROUND-COLOR*))

;;; (DEFGLOBAL *CONTROL-BACKGROUND-COLOR* ...)

(CL:DEFVAR *CONTROL-BACKGROUND-COLOR* "6699CC")
(CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING *CONTROL-BACKGROUND-COLOR*))

;;; (DEFGLOBAL *ANSWER-BACKGROUND-COLOR* ...)

(CL:DEFVAR *ANSWER-BACKGROUND-COLOR* "99FFFF")
(CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING *ANSWER-BACKGROUND-COLOR*))

;;; (DEFGLOBAL *FORM-BACKGROUND-COLOR* ...)

(CL:DEFVAR *FORM-BACKGROUND-COLOR* "6699CC")
(CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING *FORM-BACKGROUND-COLOR*))

;;; (DEFGLOBAL *HREF-PREFIX-TAG* ...)

(CL:DEFVAR *HREF-PREFIX-TAG* "FONT COLOR='#666666' SIZE=-1"
  "Tag used for prefix part of HREF generation in
`html-write-3part-href-in-detail'.")
(CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING *HREF-PREFIX-TAG*))

;;; (DEFGLOBAL *HREF-SUFFIX-TAG* ...)

(CL:DEFVAR *HREF-SUFFIX-TAG* "FONT COLOR='#666666' SIZE=-1"
  "Tag used for suffix part of HREF generation in
`html-write-3part-href-in-detail'.")
(CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING *HREF-SUFFIX-TAG*))

;;; (DEFUN (MAKE-HTML-BODY-TAG STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:SIMPLE-STRING) CL:SIMPLE-STRING)
  MAKE-HTML-BODY-TAG))
(CL:DEFUN MAKE-HTML-BODY-TAG (BACKGROUNDCOLOR)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING BACKGROUNDCOLOR))
  #+MCL
  (CL:CHECK-TYPE BACKGROUNDCOLOR CL:SIMPLE-STRING)
  (CL:WHEN (CL:EQ BACKGROUNDCOLOR STELLA::NULL-STRING)
   (CL:SETQ BACKGROUNDCOLOR *STANDARD-BACKGROUND-COLOR*))
  (CONCATENATE "BODY BGCOLOR='" BACKGROUNDCOLOR "'"))

;;; (DEFUN HTML-LINE-BREAK ...)

(CL:DEFUN HTML-LINE-BREAK (STREAM)
  (%%PRINT-STREAM STREAM "<BR>" EOL))

;;; (DEFUN HTML-WRITE-URL-IN-DETAIL ...)

(CL:DEFUN HTML-WRITE-URL-IN-DETAIL (STREAM ACTION OBJECTTYPE CONTEXTNAME OBJECTNAME)
  (CL:DECLARE
   (CL:TYPE CL:SIMPLE-STRING ACTION OBJECTTYPE CONTEXTNAME OBJECTNAME))
  #+MCL
  (CL:CHECK-TYPE ACTION CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE OBJECTTYPE CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE CONTEXTNAME CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE OBJECTNAME CL:SIMPLE-STRING)
  (%%PRINT-STREAM STREAM "/ploom/ontosaurus/do-action?" ACTION "+" OBJECTTYPE
   "+")
  (WRITE-HTML-ESCAPING-URL-SPECIAL-CHARACTERS STREAM CONTEXTNAME)
  (%%PRINT-STREAM STREAM "+")
  (WRITE-HTML-ESCAPING-URL-SPECIAL-CHARACTERS STREAM OBJECTNAME))

;;; (DEFUN HTML-WRITE-3PART-HREF-IN-DETAIL ...)

(CL:DEFUN HTML-WRITE-3PART-HREF-IN-DETAIL (STREAM TARGET ACTION OBJECT-TYPE CONTEXT-NAME OBJECT-NAME OBJECT-TITLE-PREFIX OBJECT-TITLE OBJECT-TITLE-SUFFIX RAWTITLE?)
  (CL:DECLARE
   (CL:TYPE CL:SIMPLE-STRING TARGET ACTION OBJECT-TYPE CONTEXT-NAME
    OBJECT-NAME OBJECT-TITLE-PREFIX OBJECT-TITLE OBJECT-TITLE-SUFFIX))
  #+MCL
  (CL:CHECK-TYPE TARGET CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE ACTION CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE OBJECT-TYPE CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE CONTEXT-NAME CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE OBJECT-NAME CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE OBJECT-TITLE-PREFIX CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE OBJECT-TITLE CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE OBJECT-TITLE-SUFFIX CL:SIMPLE-STRING)
  (%%PRINT-STREAM STREAM "<A ")
  (CL:WHEN (CL:NOT (CL:EQ TARGET STELLA::NULL-STRING))
   (%%PRINT-STREAM STREAM "TARGET='" TARGET "' "))
  (%%PRINT-STREAM STREAM "HREF='")
  (HTML-WRITE-URL-IN-DETAIL STREAM ACTION OBJECT-TYPE CONTEXT-NAME OBJECT-NAME)
  (%%PRINT-STREAM STREAM "'>")
  (CL:IF RAWTITLE?
   (%%PRINT-STREAM STREAM OBJECT-TITLE-PREFIX OBJECT-TITLE
    OBJECT-TITLE-SUFFIX)
   (CL:PROGN
    (CL:WHEN
     (CL:AND (CL:NOT (CL:EQ OBJECT-TITLE-PREFIX STELLA::NULL-STRING))
      (CL:NOT (STRING-EQL? OBJECT-TITLE-PREFIX "")))
     (CL:PROGN (%%PRINT-STREAM STREAM "<" *HREF-PREFIX-TAG* ">")
      (WRITE-HTML-QUOTING-SPECIAL-CHARACTERS STREAM OBJECT-TITLE-PREFIX)
      (%%PRINT-STREAM STREAM "</"
       (SUBSEQUENCE *HREF-PREFIX-TAG* 0 (POSITION *HREF-PREFIX-TAG* #\  0))
       ">")))
    (WRITE-HTML-QUOTING-SPECIAL-CHARACTERS STREAM OBJECT-TITLE)
    (CL:WHEN
     (CL:AND (CL:NOT (CL:EQ OBJECT-TITLE-SUFFIX STELLA::NULL-STRING))
      (CL:NOT (STRING-EQL? OBJECT-TITLE-SUFFIX "")))
     (CL:PROGN (%%PRINT-STREAM STREAM "<" *HREF-SUFFIX-TAG* ">")
      (WRITE-HTML-QUOTING-SPECIAL-CHARACTERS STREAM OBJECT-TITLE-SUFFIX)
      (%%PRINT-STREAM STREAM "</"
       (SUBSEQUENCE *HREF-SUFFIX-TAG* 0 (POSITION *HREF-SUFFIX-TAG* #\  0))
       ">")))))
  (%%PRINT-STREAM STREAM "</A>")
  NULL)

;;; (DEFUN HTML-WRITE-HREF-IN-DETAIL ...)

(CL:DEFUN HTML-WRITE-HREF-IN-DETAIL (STREAM TARGET ACTION OBJECTTYPE CONTEXTNAME OBJECTNAME OBJECTTITLE RAWTITLE?)
  (CL:DECLARE
   (CL:TYPE CL:SIMPLE-STRING TARGET ACTION OBJECTTYPE CONTEXTNAME OBJECTNAME
    OBJECTTITLE))
  #+MCL
  (CL:CHECK-TYPE TARGET CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE ACTION CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE OBJECTTYPE CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE CONTEXTNAME CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE OBJECTNAME CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE OBJECTTITLE CL:SIMPLE-STRING)
  (HTML-WRITE-3PART-HREF-IN-DETAIL STREAM TARGET ACTION OBJECTTYPE CONTEXTNAME
   OBJECTNAME "" OBJECTTITLE "" RAWTITLE?))

;;; (DEFUN HTML-WRITE-HREF ...)

(CL:DEFUN HTML-WRITE-HREF (STREAM ACTION OBJECTTYPE OBJECT)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING ACTION OBJECTTYPE))
  #+MCL
  (CL:CHECK-TYPE ACTION CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE OBJECTTYPE CL:SIMPLE-STRING)
  (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE OBJECT)))
   (CL:COND
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-HTML-UTILITIES-LOGIC-LOGIC-OBJECT)
     (CL:PROGN
      (CL:LET*
       ((WRITEMODULE (HOME-MODULE OBJECT)) (NAME (OBJECT-NAME OBJECT))
        (WRITE-NAME (LOCAL-PRINT-NAME NAME CL:NIL))
        (MODULE-PREFIX
         (CL:IF
          (CL:EQ NAME
           (LOOKUP-SYMBOL-IN-MODULE (%SYMBOL.SYMBOL-NAME NAME) *MODULE*
            CL:NIL))
          ""
          (CONCATENATE (%MODULE.MODULE-FULL-NAME (%SYMBOL.HOME-CONTEXT NAME))
           MODULE-SEPARATOR-STRING))))
       (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING WRITE-NAME MODULE-PREFIX))
       (CL:WHEN
        (CL:AND (ISA? *MODULE* SGT-HTML-UTILITIES-STELLA-MODULE)
         (MEMBER? (%MODULE.ALL-SUPER-CONTEXTS *MODULE*) WRITEMODULE))
        (CL:SETQ WRITEMODULE *MODULE*))
       (HTML-WRITE-3PART-HREF-IN-DETAIL STREAM STELLA::NULL-STRING ACTION
        OBJECTTYPE (NAME WRITEMODULE) (VISIBLE-NAME NAME CL:T) MODULE-PREFIX
        WRITE-NAME "" CL:NIL))))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-HTML-UTILITIES-STELLA-MODULE)
     (CL:PROGN
      (HTML-WRITE-HREF-IN-DETAIL STREAM STELLA::NULL-STRING ACTION OBJECTTYPE
       (NAME OBJECT) (NAME OBJECT) (NAME OBJECT) CL:NIL)))
    (CL:T
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
      STANDARD-ERROR "Don't know how to write HREF for object" OBJECT)
     (%%PRINT-STREAM STREAM OBJECT))))
  NULL)

;;; (DEFUN HTML-WRITE-URL ...)

(CL:DEFUN HTML-WRITE-URL (STREAM ACTION OBJECT)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING ACTION))
  #+MCL
  (CL:CHECK-TYPE ACTION CL:SIMPLE-STRING)
  (CL:LET* ((OBJECTTYPE STELLA::NULL-STRING))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING OBJECTTYPE))
   (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE OBJECT)))
    (CL:COND
     ((SUBTYPE-OF? TEST-VALUE-000 SGT-HTML-UTILITIES-LOGIC-LOGIC-OBJECT)
      (CL:PROGN
       (CL:LET* ((WRITEMODULE (HOME-MODULE OBJECT)))
        (CL:WHEN
         (CL:AND (ISA? *MODULE* SGT-HTML-UTILITIES-STELLA-MODULE)
          (MEMBER? (%MODULE.ALL-SUPER-CONTEXTS *MODULE*) WRITEMODULE))
         (CL:SETQ WRITEMODULE *MODULE*))
        (CL:COND ((CLASS? OBJECT) (CL:SETQ OBJECTTYPE "concept"))
         ((RELATION? OBJECT) (CL:SETQ OBJECTTYPE "relation"))
         (CL:T (CL:SETQ OBJECTTYPE "object")))
        (HTML-WRITE-URL-IN-DETAIL STREAM ACTION OBJECTTYPE (NAME WRITEMODULE)
         (VISIBLE-NAME (OBJECT-NAME OBJECT) CL:T)))))
     ((SUBTYPE-OF? TEST-VALUE-000 SGT-HTML-UTILITIES-STELLA-MODULE)
      (CL:PROGN
       (HTML-WRITE-URL-IN-DETAIL STREAM ACTION "context" (NAME OBJECT)
        (NAME OBJECT))))
     (CL:T
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-ERROR)
       "Don't know how to write URL for object " OBJECT EOL))))
   NULL))

;;; (DEFUN HTML-WRITE-JAVASCRIPT ...)

(CL:DEFUN HTML-WRITE-JAVASCRIPT (STREAM JS)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING JS))
  #+MCL
  (CL:CHECK-TYPE JS CL:SIMPLE-STRING)
  (%%PRINT-STREAM STREAM
   "<SCRIPT LANGUAGE=\"JAVASCRIPT\"><!-- Hide from old browsers" EOL JS EOL
   "// end hiding from old browsers -->" EOL "</SCRIPT>" EOL)
  NULL)

;;; (DEFUN HTML-WRITE-HEADER-WITH-TABLE ...)

(CL:DEFUN HTML-WRITE-HEADER-WITH-TABLE (STREAM TITLE HEAD)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TITLE HEAD))
  #+MCL
  (CL:CHECK-TYPE TITLE CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE HEAD CL:SIMPLE-STRING)
  (CL:PROGN (%%PRINT-STREAM STREAM "<TABLE WIDTH='100%'>")
   (%%PRINT-STREAM STREAM EOL)
   (CL:PROGN (%%PRINT-STREAM STREAM "<TR>")
    (CL:PROGN (%%PRINT-STREAM STREAM "<TD ALIGN='LEFT'>")
     (CL:PROGN (%%PRINT-STREAM STREAM "<B>")
      (WRITE-HTML-QUOTING-SPECIAL-CHARACTERS STREAM TITLE)
      (%%PRINT-STREAM STREAM "</B>"))
     (%%PRINT-STREAM STREAM "</TD>" EOL))
    (CL:PROGN (%%PRINT-STREAM STREAM "<TD ALIGN='RIGHT'>")
     (CL:PROGN (%%PRINT-STREAM STREAM "<FONT SIZE=3 COLOR='#663333'>")
      (WRITE-HTML-QUOTING-SPECIAL-CHARACTERS STREAM HEAD)
      (%%PRINT-STREAM STREAM "</FONT>"))
     (%%PRINT-STREAM STREAM "</TD>"))
    (%%PRINT-STREAM STREAM "</TR>" EOL))
   (%%PRINT-STREAM STREAM "</TABLE>" EOL))
  NULL)

;;; (DEFUN WRITE-BOOKMARK-ICON ...)

(CL:DEFUN WRITE-BOOKMARK-ICON (INSTANCE STREAM)
  (HTML-WRITE-HREF-IN-DETAIL STREAM "bookmark" "bookmark" "object"
   (NAME (HOME-MODULE INSTANCE)) (VISIBLE-NAME (OBJECT-NAME INSTANCE) CL:T)
   "<IMG SRC='/ploom/icons/bookmark.gif' ALT='&lt;mark&gt;' BORDER='0' WIDTH='14' HEIGHT='15' />&nbsp;Bookmark</A>"
   CL:T))

;;; (DEFUN HTML-EMIT-IMAGE ...)

(CL:DEFUN HTML-EMIT-IMAGE (STREAM IMAGEURL ALTERNATETEXT WIDTH HEIGHT ALIGNMENT BORDER)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING IMAGEURL ALTERNATETEXT ALIGNMENT)
   (CL:TYPE CL:FIXNUM WIDTH HEIGHT BORDER))
  #+MCL
  (CL:CHECK-TYPE IMAGEURL CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE ALTERNATETEXT CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE WIDTH CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE HEIGHT CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE ALIGNMENT CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE BORDER CL:FIXNUM)
  (%%PRINT-STREAM STREAM "<IMG SRC='" IMAGEURL "'")
  (CL:WHEN (CL:NOT (CL:EQ ALTERNATETEXT STELLA::NULL-STRING))
   (%%PRINT-STREAM STREAM " ALT='" ALTERNATETEXT "'"))
  (CL:WHEN (CL:NOT (CL:= WIDTH NULL-INTEGER))
   (%%PRINT-STREAM STREAM " WIDTH=" WIDTH))
  (CL:WHEN (CL:NOT (CL:= HEIGHT NULL-INTEGER))
   (%%PRINT-STREAM STREAM " HEIGHT=" HEIGHT))
  (CL:WHEN (CL:NOT (CL:EQ ALIGNMENT STELLA::NULL-STRING))
   (%%PRINT-STREAM STREAM " ALIGN='" ALIGNMENT "'"))
  (CL:IF (CL:NOT (CL:= BORDER NULL-INTEGER))
   (%%PRINT-STREAM STREAM " BORDER='" BORDER "'/>")
   (%%PRINT-STREAM STREAM " BORDER='0'/>"))
  NULL)

;;; (DEFUN HTML-DISPLAY-STRING-IN-PARAGRAPHS ...)

(CL:DEFUN HTML-DISPLAY-STRING-IN-PARAGRAPHS (S STREAM)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING S))
  #+MCL
  (CL:CHECK-TYPE S CL:SIMPLE-STRING)
  (CL:LET* ((START 0) (POS 0)) (CL:DECLARE (CL:TYPE CL:FIXNUM START POS))
   (CL:LOOP WHILE (CL:NOT (CL:= POS NULL-INTEGER)) DO
    (CL:SETQ POS
     (STRING-SEARCH S "

" START))
    (CL:PROGN (%%PRINT-STREAM STREAM "<P>")
     (WRITE-HTML-QUOTING-SPECIAL-CHARACTERS STREAM (SUBSEQUENCE S START POS))
     (%%PRINT-STREAM STREAM "</P>" EOL))
    (CL:WHEN (CL:NOT (CL:= POS NULL-INTEGER)) (CL:SETQ START (CL:+ POS 2))))))

;;; (DEFGLOBAL *POWERLOOM-COPYRIGHT-TRAILER* ...)

(CL:DEFVAR *POWERLOOM-COPYRIGHT-TRAILER* STELLA::NULL-STRING)
(CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING *POWERLOOM-COPYRIGHT-TRAILER*))

;;; (DEFUN WRITE-POWERLOOM-TRAILER ...)

(CL:DEFUN WRITE-POWERLOOM-TRAILER (STREAM)
  (%%PRINT-STREAM STREAM *POWERLOOM-COPYRIGHT-TRAILER*))

(CL:DEFUN STARTUP-HTML-UTILITIES ()
  (CL:LET*
   ((*MODULE* (GET-STELLA-MODULE "/ONTOSAURUS" (> *STARTUP-TIME-PHASE* 1)))
    (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2)
    (CL:SETQ SGT-HTML-UTILITIES-STELLA-MODULE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MODULE"
      (GET-STELLA-MODULE "/STELLA" CL:T) 1))
    (CL:SETQ SGT-HTML-UTILITIES-LOGIC-LOGIC-OBJECT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "LOGIC-OBJECT"
      (GET-STELLA-MODULE "/LOGIC" CL:T) 1))
    (CL:SETQ SYM-HTML-UTILITIES-ONTOSAURUS-STARTUP-HTML-UTILITIES
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-HTML-UTILITIES" NULL 0))
    (CL:SETQ SYM-HTML-UTILITIES-STELLA-METHOD-STARTUP-CLASSNAME
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME"
      (GET-STELLA-MODULE "/STELLA" CL:T) 0)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 4)
    (CL:SETQ *POWERLOOM-COPYRIGHT-TRAILER*
     (CONCATENATE *POWERLOOM-VERSION-STRING* "<BR>" "Copyright 2000-"
      (INTEGER-TO-STRING
       (CL:TRUNCATE
        (GET-CALENDAR-DATE (MAKE-CURRENT-DATE-TIME) (GET-LOCAL-TIME-ZONE))))
      " University of Southern California Information Sciences Institute")))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (DEFINE-FUNCTION-OBJECT "MAKE-HTML-BODY-TAG"
     "(DEFUN (MAKE-HTML-BODY-TAG STRING) ((BACKGROUNDCOLOR STRING)))"
     (CL:FUNCTION MAKE-HTML-BODY-TAG) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-LINE-BREAK"
     "(DEFUN HTML-LINE-BREAK ((STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION HTML-LINE-BREAK) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-WRITE-URL-IN-DETAIL"
     "(DEFUN HTML-WRITE-URL-IN-DETAIL ((STREAM NATIVE-OUTPUT-STREAM) (ACTION STRING) (OBJECTTYPE STRING) (CONTEXTNAME STRING) (OBJECTNAME STRING)))"
     (CL:FUNCTION HTML-WRITE-URL-IN-DETAIL) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-WRITE-3PART-HREF-IN-DETAIL"
     "(DEFUN HTML-WRITE-3PART-HREF-IN-DETAIL ((STREAM NATIVE-OUTPUT-STREAM) (TARGET STRING) (ACTION STRING) (OBJECT-TYPE STRING) (CONTEXT-NAME STRING) (OBJECT-NAME STRING) (OBJECT-TITLE-PREFIX STRING) (OBJECT-TITLE STRING) (OBJECT-TITLE-SUFFIX STRING) (RAWTITLE? BOOLEAN)))"
     (CL:FUNCTION HTML-WRITE-3PART-HREF-IN-DETAIL) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-WRITE-HREF-IN-DETAIL"
     "(DEFUN HTML-WRITE-HREF-IN-DETAIL ((STREAM NATIVE-OUTPUT-STREAM) (TARGET STRING) (ACTION STRING) (OBJECTTYPE STRING) (CONTEXTNAME STRING) (OBJECTNAME STRING) (OBJECTTITLE STRING) (RAWTITLE? BOOLEAN)))"
     (CL:FUNCTION HTML-WRITE-HREF-IN-DETAIL) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-WRITE-HREF"
     "(DEFUN HTML-WRITE-HREF ((STREAM NATIVE-OUTPUT-STREAM) (ACTION STRING) (OBJECTTYPE STRING) (OBJECT STANDARD-OBJECT)))"
     (CL:FUNCTION HTML-WRITE-HREF) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-WRITE-URL"
     "(DEFUN HTML-WRITE-URL ((STREAM NATIVE-OUTPUT-STREAM) (ACTION STRING) (OBJECT STANDARD-OBJECT)))"
     (CL:FUNCTION HTML-WRITE-URL) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-WRITE-JAVASCRIPT"
     "(DEFUN HTML-WRITE-JAVASCRIPT ((STREAM NATIVE-OUTPUT-STREAM) (JS STRING)))"
     (CL:FUNCTION HTML-WRITE-JAVASCRIPT) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-WRITE-HEADER-WITH-TABLE"
     "(DEFUN HTML-WRITE-HEADER-WITH-TABLE ((STREAM NATIVE-OUTPUT-STREAM) (TITLE STRING) (HEAD STRING)))"
     (CL:FUNCTION HTML-WRITE-HEADER-WITH-TABLE) NULL)
    (DEFINE-FUNCTION-OBJECT "WRITE-BOOKMARK-ICON"
     "(DEFUN WRITE-BOOKMARK-ICON ((INSTANCE LOGIC-OBJECT) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION WRITE-BOOKMARK-ICON) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-EMIT-IMAGE"
     "(DEFUN HTML-EMIT-IMAGE ((STREAM NATIVE-OUTPUT-STREAM) (IMAGEURL STRING) (ALTERNATETEXT STRING) (WIDTH INTEGER) (HEIGHT INTEGER) (ALIGNMENT STRING) (BORDER INTEGER)))"
     (CL:FUNCTION HTML-EMIT-IMAGE) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-DISPLAY-STRING-IN-PARAGRAPHS"
     "(DEFUN HTML-DISPLAY-STRING-IN-PARAGRAPHS ((S STRING) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION HTML-DISPLAY-STRING-IN-PARAGRAPHS) NULL)
    (DEFINE-FUNCTION-OBJECT "WRITE-POWERLOOM-TRAILER"
     "(DEFUN WRITE-POWERLOOM-TRAILER ((STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION WRITE-POWERLOOM-TRAILER) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-HTML-UTILITIES"
     "(DEFUN STARTUP-HTML-UTILITIES () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-HTML-UTILITIES) NULL)
    (CL:LET*
     ((FUNCTION
       (LOOKUP-FUNCTION
        SYM-HTML-UTILITIES-ONTOSAURUS-STARTUP-HTML-UTILITIES)))
     (SET-DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
      SYM-HTML-UTILITIES-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "_StartupHtmlUtilities") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (%IN-MODULE (COPY-CONS-TREE (WRAP-STRING "ONTOSAURUS")))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *ERROR-BACKGROUND-COLOR* STRING \"FF9999\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *STANDARD-BACKGROUND-COLOR* STRING \"99CCFF\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *MODULE-BACKGROUND-COLOR* STRING \"9999CC\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *CONTROL-BACKGROUND-COLOR* STRING \"6699CC\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *ANSWER-BACKGROUND-COLOR* STRING \"99FFFF\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *FORM-BACKGROUND-COLOR* STRING \"6699CC\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *HREF-PREFIX-TAG* STRING \"FONT COLOR='#666666' SIZE=-1\" :DOCUMENTATION \"Tag used for prefix part of HREF generation in
`html-write-3part-href-in-detail'.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *HREF-SUFFIX-TAG* STRING \"FONT COLOR='#666666' SIZE=-1\" :DOCUMENTATION \"Tag used for suffix part of HREF generation in
`html-write-3part-href-in-detail'.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *POWERLOOM-COPYRIGHT-TRAILER* STRING (CONCATENATE *POWERLOOM-VERSION-STRING* \"<BR>\" \"Copyright 2000-\" (INTEGER-TO-STRING (GET-CALENDAR-DATE (MAKE-CURRENT-DATE-TIME) (GET-LOCAL-TIME-ZONE))) \" University of Southern California Information Sciences Institute\"))"))))
