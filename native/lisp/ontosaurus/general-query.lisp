;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; general-query.lisp

#|
 +---------------------------- BEGIN LICENSE BLOCK ---------------------------+
 |                                                                            |
 | Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
 |                                                                            |
 | The contents of this file are subject to the Mozilla Public License        |
 | Version 1.1 (the "License"); you may not use this file except in           |
 | compliance with the License. You may obtain a copy of the License at       |
 | http://www.mozilla.org/MPL/                                                |
 |                                                                            |
 | Software distributed under the License is distributed on an "AS IS" basis, |
 | WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
 | for the specific language governing rights and limitations under the       |
 | License.                                                                   |
 |                                                                            |
 | The Original Code is the PowerLoom KR&R System.                            |
 |                                                                            |
 | The Initial Developer of the Original Code is                              |
 | UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
 | 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
 |                                                                            |
 | Portions created by the Initial Developer are Copyright (C) 2000-2017      |
 | the Initial Developer. All Rights Reserved.                                |
 |                                                                            |
 | Contributor(s):                                                            |
 |                                                                            |
 | Alternatively, the contents of this file may be used under the terms of    |
 | either the GNU General Public License Version 2 or later (the "GPL"), or   |
 | the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
 | in which case the provisions of the GPL or the LGPL are applicable instead |
 | of those above. If you wish to allow use of your version of this file only |
 | under the terms of either the GPL or the LGPL, and not to allow others to  |
 | use your version of this file under the terms of the MPL, indicate your    |
 | decision by deleting the provisions above and replace them with the notice |
 | and other provisions required by the GPL or the LGPL. If you do not delete |
 | the provisions above, a recipient may use your version of this file under  |
 | the terms of any one of the MPL, the GPL or the LGPL.                      |
 |                                                                            |
 +----------------------------- END LICENSE BLOCK ----------------------------+
|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SGT-GENERAL-QUERY-STELLA-CONS NULL)
(CL:DEFVAR KWD-GENERAL-QUERY-SORT-BY NULL)
(CL:DEFVAR KWD-GENERAL-QUERY-VALUES NULL)
(CL:DEFVAR KWD-GENERAL-QUERY-TIMEOUT NULL)
(CL:DEFVAR KWD-GENERAL-QUERY-QUERY NULL)
(CL:DEFVAR SYM-GENERAL-QUERY-LOGIC-ALL NULL)
(CL:DEFVAR SGT-GENERAL-QUERY-LOGIC-LOGIC-OBJECT NULL)
(CL:DEFVAR SYM-GENERAL-QUERY-STELLA-EXISTS NULL)
(CL:DEFVAR KWD-GENERAL-QUERY-RELATION NULL)
(CL:DEFVAR SYM-GENERAL-QUERY-LOGIC-JUSTIFICATION NULL)
(CL:DEFVAR KWD-GENERAL-QUERY-HTML NULL)
(CL:DEFVAR KWD-GENERAL-QUERY-LAY NULL)
(CL:DEFVAR KWD-GENERAL-QUERY-KIF-ONTOSAURUS NULL)
(CL:DEFVAR KWD-GENERAL-QUERY-GET NULL)
(CL:DEFVAR KWD-GENERAL-QUERY-POST NULL)
(CL:DEFVAR KWD-GENERAL-QUERY-BAD-REQUEST NULL)
(CL:DEFVAR KWD-GENERAL-QUERY-INTERNAL-ERROR NULL)
(CL:DEFVAR KWD-GENERAL-QUERY-CONTENT-TYPE NULL)
(CL:DEFVAR KWD-GENERAL-QUERY-DOCUMENTATION NULL)
(CL:DEFVAR SYM-GENERAL-QUERY-ONTOSAURUS-STARTUP-GENERAL-QUERY NULL)
(CL:DEFVAR SYM-GENERAL-QUERY-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STARTUP-TIME-PHASE* *EXPLANATION-AUDIENCE* *CONTEXT* *POWERLOOM-LOCK* *ANSWER-BACKGROUND-COLOR* TRUE-TRUTH-VALUE DEFAULT-TRUE-TRUTH-VALUE FALSE-TRUTH-VALUE
  DEFAULT-FALSE-TRUTH-VALUE NULL-FLOAT *MODULE* EOL-STRING NIL EOL NULL-INTEGER))

;;; (DEFSPECIAL *PRESET-QUERIES* ...)

(CL:DEFVAR *PRESET-QUERIES* NULL
  "A list of preset queries to make entry easier.  Format is
(\"Title\" \"ModuleName\" \"QueryBody\") ")

;;; (DEFGLOBAL *GENERAL-QUERY-FORM-TEMPLATE* ...)

(CL:DEFVAR *GENERAL-QUERY-FORM-TEMPLATE* STELLA::NULL-STRING)
(CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING *GENERAL-QUERY-FORM-TEMPLATE*))

;;; (DEFUN HTML-WRITE-QUERY-FORM-PAGE ...)

(CL:DEFUN HTML-WRITE-QUERY-FORM-PAGE (STREAM)
  (CL:LET* ((SELF-000 (NEW-OUTPUT-STREAM))) (CL:SETF (%NATIVE-STREAM SELF-000) STREAM)
   (HTML-WRITE-QUERY-FORM-PAGE-FROM-TEMPLATE SELF-000 (NEW-INPUT-STRING-STREAM *GENERAL-QUERY-FORM-TEMPLATE*))))

;;; (DEFUN (YIELD-PRESET-QUERIES-SCRIPT STRING) ...)

(CL:DECLAIM (CL:FTYPE (CL:FUNCTION (CL:T) CL:SIMPLE-STRING) YIELD-PRESET-QUERIES-SCRIPT))
(CL:DEFUN YIELD-PRESET-QUERIES-SCRIPT (QUERIES)
  (CL:WHEN (CL:EQ QUERIES NIL) (CL:RETURN-FROM YIELD-PRESET-QUERIES-SCRIPT ""))
  (CL:LET* ((NQUERIES (LENGTH QUERIES)) (SCRIPT (NEW-OUTPUT-STRING-STREAM))) (CL:DECLARE (CL:TYPE CL:FIXNUM NQUERIES))
   (%%PRINT-STREAM (%NATIVE-STREAM SCRIPT) "<SCRIPT LANGUAGE='JavaScript'>
	      
function makeArray (size) {
  this.length = size;
  return this;
}

var queryModuleList = new makeArray(")
   (%%PRINT-STREAM (%NATIVE-STREAM SCRIPT) NQUERIES ");
var querySourceList = new makeArray(")
   (%%PRINT-STREAM (%NATIVE-STREAM SCRIPT) NQUERIES ");" EOL EOL)
   (CL:LET* ((ENTRY NULL) (ITER-000 QUERIES) (J NULL-INTEGER) (ITER-001 1)) (CL:DECLARE (CL:TYPE CL:FIXNUM J ITER-001))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO (CL:SETQ ENTRY (%%VALUE ITER-000)) (CL:SETQ J ITER-001)
     (%%PRINT-STREAM (%NATIVE-STREAM SCRIPT) "queryModuleList[" J "] = '" (%WRAPPER-VALUE (%%VALUE (%%REST ENTRY))) "';" EOL)
     (%%PRINT-STREAM (%NATIVE-STREAM SCRIPT) "querySourceList[" J "] = '"
      (REPLACE-SUBSTRINGS
       (REPLACE-SUBSTRINGS (REPLACE-SUBSTRINGS (REPLACE-SUBSTRINGS (%WRAPPER-VALUE (%%VALUE (%%REST (%%REST ENTRY)))) "\\\\" "\\") "\\\"" (MAKE-STRING 1 #\")) "\\n"
        (MAKE-STRING 1 #\Linefeed))
       "\\n" (MAKE-STRING 1 #\Return))
      "';" EOL)
     (CL:SETQ ITER-000 (%%REST ITER-000)) (CL:SETQ ITER-001 (CL:1+ ITER-001))))
   (%%PRINT-STREAM (%NATIVE-STREAM SCRIPT) EOL "function setSourceAndModule (index) {
  if (index > 0) {
    document.QUERY.QUERYSOURCE.value = querySourceList[index];
    for (var i = 0; i < document.QUERY.MODULE.length; i++) {
       if (document.QUERY.MODULE[i].value==queryModuleList[index]) {
           document.QUERY.MODULE.selectedIndex = i; }
    }
  } else {
  document.QUERY.QUERYSOURCE.value = '';
  }
}
</SCRIPT>" EOL EOL)
   (THE-STRING-READER SCRIPT)))

;;; (DEFUN (YIELD-CHOICE-MENU-STRING STRING) ...)

(CL:DECLAIM (CL:FTYPE (CL:FUNCTION (CL:T CL:SIMPLE-STRING) CL:SIMPLE-STRING) YIELD-CHOICE-MENU-STRING))
(CL:DEFUN YIELD-CHOICE-MENU-STRING (ITEMS SELECTOPTIONS)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELECTOPTIONS))
  #+(or MCL OpenMCL)
  (CL:CHECK-TYPE SELECTOPTIONS CL:SIMPLE-STRING)
  (CL:LET* ((MENU (NEW-OUTPUT-STRING-STREAM)) (OPTIONITEM STELLA::NULL-STRING) (MENUITEM STELLA::NULL-STRING))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING OPTIONITEM MENUITEM)) (%%PRINT-STREAM (%NATIVE-STREAM MENU) "<SELECT " SELECTOPTIONS ">" EOL)
   (CL:LET* ((ITEM NULL) (ITER-000 ITEMS) (I NULL-INTEGER) (ITER-001 1)) (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-001))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO (CL:SETQ ITEM (%%VALUE ITER-000)) (CL:SETQ I ITER-001)
     (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE ITEM)))
      (CL:COND ((SUBTYPE-OF-STRING? TEST-VALUE-000) (CL:PROGN (CL:SETQ OPTIONITEM (%WRAPPER-VALUE ITEM)) (CL:SETQ MENUITEM (%WRAPPER-VALUE ITEM))))
       ((CL:EQ TEST-VALUE-000 SGT-GENERAL-QUERY-STELLA-CONS)
        (CL:PROGN (CL:SETQ OPTIONITEM (%WRAPPER-VALUE (%%VALUE ITEM))) (CL:SETQ MENUITEM (%WRAPPER-VALUE (%%VALUE (%%REST ITEM))))))
       (CL:T
        (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM))) (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" TEST-VALUE-000 "' is not a valid case option")
         (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
     (%%PRINT-STREAM (%NATIVE-STREAM MENU) "<OPTION VALUE='" OPTIONITEM "'" (CL:IF (CL:= I 1) " SELECTED" "") ">" MENUITEM "</OPTION>" EOL)
     (CL:SETQ ITER-000 (%%REST ITER-000)) (CL:SETQ ITER-001 (CL:1+ ITER-001))))
   (%%PRINT-STREAM (%NATIVE-STREAM MENU) "</SELECT>" EOL) (THE-STRING-READER MENU)))

;;; (DEFUN (YIELD-MODULE-MENU-STRING STRING) ...)

(CL:DECLAIM (CL:FTYPE (CL:FUNCTION (CL:T) CL:SIMPLE-STRING) YIELD-MODULE-MENU-STRING))
(CL:DEFUN YIELD-MODULE-MENU-STRING (MODULES)
  (CL:WHEN (CL:EQ MODULES NIL) (CL:RETURN-FROM YIELD-MODULE-MENU-STRING ""))
  (YIELD-CHOICE-MENU-STRING MODULES "NAME='MODULE' onChange='document.cookie=\"theory=\" + this[this.selectedIndex].value + \";\";'"))

;;; (DEFUN (YIELD-QUERY-MENU-STRING STRING) ...)

(CL:DECLAIM (CL:FTYPE (CL:FUNCTION (CL:T) CL:SIMPLE-STRING) YIELD-QUERY-MENU-STRING))
(CL:DEFUN YIELD-QUERY-MENU-STRING (QUERIES)
  (CL:WHEN (CL:EQ QUERIES NIL) (CL:RETURN-FROM YIELD-QUERY-MENU-STRING ""))
  (CL:LET* ((QUERYITEMS NIL))
   (CL:LET* ((ENTRY NULL) (ITER-000 QUERIES) (COLLECT-000 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO (CL:SETQ ENTRY (%%VALUE ITER-000))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN (CL:SETQ COLLECT-000 (CONS (%%VALUE ENTRY) NIL))
       (CL:IF (CL:EQ QUERYITEMS NIL) (CL:SETQ QUERYITEMS COLLECT-000) (ADD-CONS-TO-END-OF-CONS-LIST QUERYITEMS COLLECT-000)))
      (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS (%%VALUE ENTRY) NIL)) (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:SETQ QUERYITEMS (CONS (GET-QUOTED-TREE "((\"None\" \"----\") \"/ONTOSAURUS\")" "/ONTOSAURUS") QUERYITEMS))
   (YIELD-CHOICE-MENU-STRING QUERYITEMS "NAME='QLIST' onChange='setSourceAndModule(this.selectedIndex)'")))

;;; (DEFUN (YIELD-NOF-ANSWERS-MENU-STRING STRING) ...)

(CL:DECLAIM (CL:FTYPE (CL:FUNCTION (CL:T) CL:SIMPLE-STRING) YIELD-NOF-ANSWERS-MENU-STRING))
(CL:DEFUN YIELD-NOF-ANSWERS-MENU-STRING (NOFANSWERS)
  (CL:WHEN (CL:EQ NOFANSWERS NIL) (CL:RETURN-FROM YIELD-NOF-ANSWERS-MENU-STRING ""))
  (YIELD-CHOICE-MENU-STRING NOFANSWERS "NAME='NANSWERS'"))

;;; (DEFUN (YIELD-TIMEOUTS-MENU-STRING STRING) ...)

(CL:DECLAIM (CL:FTYPE (CL:FUNCTION (CL:T) CL:SIMPLE-STRING) YIELD-TIMEOUTS-MENU-STRING))
(CL:DEFUN YIELD-TIMEOUTS-MENU-STRING (TIMEOUTS)
  (CL:WHEN (CL:EQ TIMEOUTS NIL) (CL:RETURN-FROM YIELD-TIMEOUTS-MENU-STRING ""))
  (YIELD-CHOICE-MENU-STRING TIMEOUTS "NAME='TIMEOUT'"))

;;; (DEFUN HTML-WRITE-QUERY-FORM-PAGE-FROM-TEMPLATE ...)

(CL:DEFUN HTML-WRITE-QUERY-FORM-PAGE-FROM-TEMPLATE (STREAM TEMPLATESTREAM)
  (CL:LET* ((VARIABLES (NEW-KEY-VALUE-LIST)) (FORMHEADER "<FORM NAME='QUERY' METHOD='POST' ACTION='do-query' ENCTYPE='application/www-url-form-encoded'>"))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING FORMHEADER)) (INSERT-AT VARIABLES (WRAP-STRING "MODULE-MENU") (WRAP-STRING (YIELD-MODULE-MENU-STRING (SORTED-CONTEXTS))))
   (CL:SETQ FORMHEADER (CONCATENATE FORMHEADER EOL-STRING (YIELD-PRESET-QUERIES-SCRIPT *PRESET-QUERIES*)))
   (INSERT-AT VARIABLES (WRAP-STRING "QUERY-MENU") (WRAP-STRING (YIELD-QUERY-MENU-STRING *PRESET-QUERIES*)))
   (INSERT-AT VARIABLES (WRAP-STRING "NOF-ANSWERS-MENU")
    (WRAP-STRING (YIELD-NOF-ANSWERS-MENU-STRING (GET-QUOTED-TREE "((\"All\" \"1\" \"2\" \"5\" \"10\" \"20\" \"50\" \"100\") \"/ONTOSAURUS\")" "/ONTOSAURUS"))))
   (INSERT-AT VARIABLES (WRAP-STRING "TIMEOUTS-MENU")
    (WRAP-STRING
     (YIELD-TIMEOUTS-MENU-STRING (GET-QUOTED-TREE "((\"None\" \"1.0\" \"2.0\" \"5.0\" \"10.0\" \"30.0\" \"60.0\" \"120.0\") \"/ONTOSAURUS\")" "/ONTOSAURUS"))))
   (INSERT-AT VARIABLES (WRAP-STRING "QUERY-INPUT-AREA") (WRAP-STRING "<TEXTAREA NAME='QUERYSOURCE' ROWS='4' COLS='80'></TEXTAREA>"))
   (INSERT-AT VARIABLES (WRAP-STRING "SUBMIT-BUTTON") (WRAP-STRING "<INPUT TYPE='SUBMIT' VALUE='Submit'>"))
   (INSERT-AT VARIABLES (WRAP-STRING "RESET-BUTTON") (WRAP-STRING "<INPUT TYPE='RESET' VALUE='Clear'>"))
   (INSERT-AT VARIABLES (WRAP-STRING "FORM-TRAILER") (WRAP-STRING "</FORM>"))
   (CL:SETQ FORMHEADER
    (CONCATENATE FORMHEADER EOL-STRING "<SCRIPT LANGUAGE='JavaScript'>
var cookieValue = document.cookie.substring(document.cookie.indexOf('qmodule=')+8,document.cookie.length);
if (cookieValue.indexOf(';') != -1) {
cookieValue = cookieValue.substring(0,cookieValue.indexOf(';'));
}
for (var i = 0; i < document.QUERY.MODULE.length; i++) {
   if (document.QUERY.MODULE[i].value==cookieValue) {
     document.QUERY.MODULE.selectedIndex = i; }
}</SCRIPT>"))
   (INSERT-AT VARIABLES (WRAP-STRING "FORM-HEADER") (WRAP-STRING FORMHEADER)) (SUBSTITUTE-TEMPLATE-VARIABLES-TO-STREAM TEMPLATESTREAM STREAM VARIABLES)))

;;; (DEFUN HTML-EXECUTE-QUERY ...)

(CL:DEFUN HTML-EXECUTE-QUERY (QUERYDATA STREAM)
  (CL:LET*
   ((MODULENAME (%WRAPPER-VALUE (LOOKUP QUERYDATA (WRAP-STRING "MODULE")))) (MODULE (GET-MODULE (WRAP-STRING MODULENAME)))
    (NVALUEENTRY (LOOKUP QUERYDATA (WRAP-STRING "NANSWERS")))
    (NVALUEOBJECT (CL:IF (CL:NOT (CL:EQ NVALUEENTRY NULL)) (READ-S-EXPRESSION-FROM-STRING (%WRAPPER-VALUE NVALUEENTRY)) NULL))
    (NVALUES (CL:IF (INTEGER? NVALUEOBJECT) (%WRAPPER-VALUE NVALUEOBJECT) NULL-INTEGER)) (TIMEOUTENTRY (LOOKUP QUERYDATA (WRAP-STRING "TIMEOUT")))
    (TIMEOUTOBJECT (CL:IF (CL:NOT (CL:EQ TIMEOUTENTRY NULL)) (READ-S-EXPRESSION-FROM-STRING (%WRAPPER-VALUE TIMEOUTENTRY)) NULL))
    (TIMEOUT (CL:IF (FLOAT? TIMEOUTOBJECT) (%WRAPPER-VALUE TIMEOUTOBJECT) NULL-FLOAT)) (QUERY NIL)
    (OPTIONS (LIST* KWD-GENERAL-QUERY-SORT-BY KWD-GENERAL-QUERY-VALUES NIL)) (VARIABLES (NEW-LIST)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MODULENAME) (CL:TYPE CL:FIXNUM NVALUES) (CL:TYPE CL:DOUBLE-FLOAT TIMEOUT))
   (CL:IF (CL:NOT (CL:EQ MODULE NULL))
    (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*)) (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
     (CL:SETQ QUERY (READ-S-EXPRESSION-FROM-STRING (%WRAPPER-VALUE (LOOKUP QUERYDATA (WRAP-STRING "QUERYSOURCE"))))) (COLLECT-UNDECLARED-VARIABLES QUERY NIL VARIABLES)
     (CL:WHEN (CL:NOT (CL:= TIMEOUT NULL-FLOAT)) (CL:SETQ OPTIONS (CONCATENATE OPTIONS (LIST* KWD-GENERAL-QUERY-TIMEOUT (WRAP-FLOAT TIMEOUT) NIL))))
     (CL:IF (EMPTY? VARIABLES) (HTML-EXECUTE-ASK-QUERY QUERY OPTIONS MODULE STREAM)
      (HTML-EXECUTE-RETRIEVE-QUERY NVALUES (%THE-CONS-LIST VARIABLES) QUERY OPTIONS MODULE STREAM))
     (HTML-LINE-BREAK STREAM) (%%PRINT-STREAM STREAM "<HR SIZE=2>" EOL) (WRITE-POWERLOOM-TRAILER STREAM))
    (HTML-UNKNOWN-MODULE-RESPONSE KWD-GENERAL-QUERY-QUERY "" MODULENAME STREAM))))

;;; (DEFUN HTML-EXECUTE-ASK-QUERY ...)

(CL:DEFUN HTML-EXECUTE-ASK-QUERY (QUERY OPTIONS MOD STREAM)
  (CL:LET* ((ANSWER (PLI::ASK (CONS QUERY OPTIONS) MOD NULL)))
   (CL:COND
    ((CL:OR (CL:EQ ANSWER TRUE-TRUTH-VALUE) (CL:EQ ANSWER DEFAULT-TRUE-TRUTH-VALUE))
     (CL:PROGN (%%PRINT-STREAM STREAM "<FONT COLOR='#33FF66'>") (%%PRINT-STREAM STREAM "TRUE") (%%PRINT-STREAM STREAM "</FONT>" EOL)))
    ((CL:OR (CL:EQ ANSWER FALSE-TRUTH-VALUE) (CL:EQ ANSWER DEFAULT-FALSE-TRUTH-VALUE))
     (CL:PROGN (%%PRINT-STREAM STREAM "<FONT COLOR='#FF6633'>") (%%PRINT-STREAM STREAM "FALSE") (%%PRINT-STREAM STREAM "</FONT>" EOL)))
    (CL:T (CL:PROGN (%%PRINT-STREAM STREAM "<FONT COLOR='#888888'>") (%%PRINT-STREAM STREAM "UNKNOWN") (%%PRINT-STREAM STREAM "</FONT>" EOL))))
   (CL:FORCE-OUTPUT STREAM)))

;;; (DEFUN HTML-EXECUTE-RETRIEVE-QUERY ...)

(CL:DEFUN HTML-EXECUTE-RETRIEVE-QUERY (NVALUES VARIABLES QUERY OPTIONS MOD STREAM)
  (CL:DECLARE (CL:TYPE CL:FIXNUM NVALUES))
  #+(or MCL OpenMCL)
  (CL:CHECK-TYPE NVALUES CL:FIXNUM)
  (CL:LET* ((*PRINTREADABLY?* CL:T)) (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
   (CL:LET* ((QUERYITERATOR NULL) (SOLUTIONS NIL))
    (CL:LET* ((MDL-000 MOD) (CXT-000 MDL-000)) (CL:WHEN (CL:EQ MDL-000 NULL) (CL:SETQ MDL-000 *MODULE*) (CL:SETQ CXT-000 *CONTEXT*))
     (CL:LET* ((*MODULE* MDL-000) (*CONTEXT* CXT-000)) (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
      (WITH-PROCESS-LOCK *POWERLOOM-LOCK*
       (CL:SETQ QUERYITERATOR
        (CALL-RETRIEVE (CONS (CL:IF (CL:> NVALUES 0) (WRAP-INTEGER NVALUES) SYM-GENERAL-QUERY-LOGIC-ALL) (CONS VARIABLES (CONS QUERY (CONCATENATE OPTIONS NIL)))))))))
    (CL:SETQ SOLUTIONS (CONSIFY-CURRENT-SOLUTIONS QUERYITERATOR))
    (CL:PROGN (%%PRINT-STREAM STREAM "<HTML>")
     (CL:PROGN (%%PRINT-STREAM STREAM "<HEAD>") (%%PRINT-STREAM STREAM "<BASE TARGET='content'>" EOL)
      (CL:PROGN (%%PRINT-STREAM STREAM "<TITLE>") (%%PRINT-STREAM STREAM "Answer Page") (%%PRINT-STREAM STREAM "</TITLE>" EOL)) (%%PRINT-STREAM STREAM "</HEAD>" EOL))
     (CL:LET* ((TAG-011 (MAKE-HTML-BODY-TAG *ANSWER-BACKGROUND-COLOR*))) (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TAG-011)) (%%PRINT-STREAM STREAM "<" TAG-011 ">")
      (CL:WHEN (%TIMEOUT? QUERYITERATOR) (%%PRINT-STREAM STREAM "The query timed out.<BR>" EOL))
      (CL:IF (CL:EQ SOLUTIONS NIL)
       (CL:PROGN (%%PRINT-STREAM STREAM "<FONT COLOR='#CC3366'>")
        (CL:PROGN (%%PRINT-STREAM STREAM "<I>") (%%PRINT-STREAM STREAM "No Solutions") (%%PRINT-STREAM STREAM "</I>")) (%%PRINT-STREAM STREAM "</FONT>" EOL))
       (CL:LET* ((SOLN NULL) (ITER-000 SOLUTIONS) (ANSWERCOUNTER NULL-INTEGER) (ITER-001 1)) (CL:DECLARE (CL:TYPE CL:FIXNUM ANSWERCOUNTER ITER-001))
        (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO (CL:SETQ SOLN (%%VALUE ITER-000)) (CL:SETQ ANSWERCOUNTER ITER-001)
         (CL:PROGN (%%PRINT-STREAM STREAM "<DL>")
          (CL:PROGN (%%PRINT-STREAM STREAM "<DT>")
           (CL:PROGN (%%PRINT-STREAM STREAM "<FONT COLOR='#999999'>") (%%PRINT-STREAM STREAM "Solution " ANSWERCOUNTER ":" EOL)
            (WRITE-EXPLANATION-ICON QUERYITERATOR SOLN STREAM) (%%PRINT-STREAM STREAM "</FONT>"))
           (%%PRINT-STREAM STREAM "</DT>" EOL))
          (CL:LET* ((BINDING NULL) (ITER-002 SOLN) (VAR NULL) (ITER-003 VARIABLES))
           (CL:LOOP WHILE (CL:AND (CL:NOT (CL:EQ ITER-002 NIL)) (CL:NOT (CL:EQ ITER-003 NIL))) DO (CL:SETQ BINDING (%%VALUE ITER-002)) (CL:SETQ VAR (%%VALUE ITER-003))
            (CL:PROGN (%%PRINT-STREAM STREAM "<DD>") (%%PRINT-STREAM STREAM VAR " = ")
             (CL:COND ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE BINDING) SGT-GENERAL-QUERY-LOGIC-LOGIC-OBJECT) (CL:PROGN (HTML-WRITE-HREF STREAM "show" "concept" BINDING)))
              (CL:T (%%PRINT-STREAM STREAM BINDING)))
             (%%PRINT-STREAM STREAM "</DD>" EOL))
            (CL:SETQ ITER-002 (%%REST ITER-002)) (CL:SETQ ITER-003 (%%REST ITER-003))))
          (%%PRINT-STREAM STREAM "</DL>" EOL))
         (CL:SETQ ITER-000 (%%REST ITER-000)) (CL:SETQ ITER-001 (CL:1+ ITER-001)))))
      (%%PRINT-STREAM STREAM "</" (SUBSEQUENCE TAG-011 0 (POSITION TAG-011 #\  0)) ">" EOL))
     (%%PRINT-STREAM STREAM "</HTML>" EOL)))))

;;; (DEFUN WRITE-EXPLANATION-ICON ...)

(CL:DEFUN WRITE-EXPLANATION-ICON (QUERY BINDINGS STREAM)
  (CL:LET*
   ((MODULE (%BASE-MODULE (%QUERY-CONTEXT QUERY))) (DESCRIPTION (%DESCRIPTION (%PATTERN-RECORD (%BASE-CONTROL-FRAME QUERY))))
    (EXISTSVARS (%INTERNAL-VARIABLES DESCRIPTION)) (PROPOSITION NULL) (MAPPING (NEW-KEY-VALUE-MAP)))
   (CL:LET* ((BINDING NULL) (ITER-000 BINDINGS) (VAR NULL) (VECTOR-000 (%IO-VARIABLES DESCRIPTION)) (INDEX-000 0) (LENGTH-000 (LENGTH VECTOR-000)))
    (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
    (CL:LOOP WHILE (CL:AND (CL:NOT (CL:EQ ITER-000 NIL)) (CL:< INDEX-000 LENGTH-000)) DO (CL:SETQ BINDING (%%VALUE ITER-000))
     (CL:SETQ VAR (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-000)) INDEX-000)) (INSERT-AT MAPPING VAR BINDING) (CL:SETQ ITER-000 (%%REST ITER-000))
     (CL:SETQ INDEX-000 (CL:1+ INDEX-000))))
   (CL:LET* ((VAR NULL) (VECTOR-001 EXISTSVARS) (INDEX-001 0) (LENGTH-001 (LENGTH VECTOR-001))) (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-001 LENGTH-001))
    (CL:LOOP WHILE (CL:< INDEX-001 LENGTH-001) DO (CL:SETQ VAR (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-001)) INDEX-001)) (INSERT-AT MAPPING VAR VAR)
     (CL:SETQ INDEX-001 (CL:1+ INDEX-001))))
   (CL:SETQ PROPOSITION (GENERATE-PROPOSITION (COPY-PROPOSITION (%PROPOSITION DESCRIPTION) MAPPING)))
   (CL:WHEN (NON-EMPTY? EXISTSVARS) (CL:SETQ PROPOSITION (LIST* SYM-GENERAL-QUERY-STELLA-EXISTS (GENERATE-VARIABLES EXISTSVARS CL:NIL) (CONS PROPOSITION NIL))))
   (HTML-WRITE-HREF-IN-DETAIL STREAM STELLA::NULL-STRING "explain" "query" (NAME MODULE) (STRINGIFY PROPOSITION)
    "<IMG SRC='/ploom/icons/button-question.gif' ALT='Explain result' BORDER='0' WIDTH='14' HEIGHT='15' /></A>" CL:T)))

;;; (DEFUN HTML-WRITE-EXPLANATION-RESPONSE-PAGE ...)

(CL:DEFUN HTML-WRITE-EXPLANATION-RESPONSE-PAGE (MODULENAME QUERY STREAM)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MODULENAME QUERY))
  #+(or MCL OpenMCL)
  (CL:CHECK-TYPE MODULENAME CL:SIMPLE-STRING)
  #+(or MCL OpenMCL)
  (CL:CHECK-TYPE QUERY CL:SIMPLE-STRING)
  (CL:LET* ((MODULE (GET-STELLA-MODULE MODULENAME CL:NIL)))
   (CL:WHEN (CL:EQ MODULE NULL) (HTML-UNKNOWN-MODULE-RESPONSE KWD-GENERAL-QUERY-RELATION QUERY MODULENAME STREAM) (CL:RETURN-FROM HTML-WRITE-EXPLANATION-RESPONSE-PAGE))
   (CL:LET* ((MDL-000 MODULE) (CXT-000 MDL-000)) (CL:WHEN (CL:EQ MDL-000 NULL) (CL:SETQ MDL-000 *MODULE*) (CL:SETQ CXT-000 *CONTEXT*))
    (CL:LET* ((*MODULE* MDL-000) (*CONTEXT* CXT-000)) (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
     (WITH-PROCESS-LOCK *POWERLOOM-LOCK*
      (CL:LET* ((*RECORD-JUSTIFICATIONS?* CL:T)) (CL:DECLARE (CL:SPECIAL *RECORD-JUSTIFICATIONS?*))
       (CL:LET* ((QUERYITERATOR (CREATE-ASK-QUERY (CONS (READ-S-EXPRESSION-FROM-STRING QUERY) NIL))) (EXPLANATION (NEW-OUTPUT-STRING-STREAM)) (JUSTIFICATION NULL))
        (CALL-ASK QUERYITERATOR)
        (CL:SETQ JUSTIFICATION (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS (%BASE-CONTROL-FRAME QUERYITERATOR)) SYM-GENERAL-QUERY-LOGIC-JUSTIFICATION NULL))
        (CL:LET* ((*EXPLANATION-FORMAT* KWD-GENERAL-QUERY-HTML) (*EXPLANATION-AUDIENCE* KWD-GENERAL-QUERY-LAY) (*LOGIC-DIALECT* KWD-GENERAL-QUERY-KIF-ONTOSAURUS))
         (CL:DECLARE (CL:SPECIAL *EXPLANATION-FORMAT* *EXPLANATION-AUDIENCE* *LOGIC-DIALECT*))
         (PRINT-EXPLANATION JUSTIFICATION EXPLANATION NULL 4 *EXPLANATION-AUDIENCE*))
        (CL:LET* ((TAG-012 (MAKE-HTML-BODY-TAG "FFFFFF"))) (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TAG-012)) (%%PRINT-STREAM STREAM "<" TAG-012 ">")
         (%%PRINT-STREAM STREAM (THE-STRING-READER EXPLANATION) EOL) (%%PRINT-STREAM STREAM "</" (SUBSEQUENCE TAG-012 0 (POSITION TAG-012 #\  0)) ">" EOL)))))))))

;;; (DEFUN PLOOM-QUERY-HANDLER ...)

(CL:DEFUN PLOOM-QUERY-HANDLER (XCHG)
  (CL:LET* ((STREAM (GET-REPLY-STREAM XCHG)) (METHOD (GET-REQUEST-METHOD XCHG)))
   (CL:COND ((CL:EQ METHOD KWD-GENERAL-QUERY-GET) (HTML-WRITE-QUERY-FORM-PAGE STREAM))
    ((CL:EQ METHOD KWD-GENERAL-QUERY-POST)
     (CL:HANDLER-CASE
      (CL:LET* ((BODY (GET-REQUEST-BODY XCHG)) (VALUES (PARSE-AND-DECODE-FORM-VALUES BODY))) (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING BODY))
       (HTML-EXECUTE-QUERY VALUES STREAM))
      (LOGIC-EXCEPTION (E) (GENERATE-ERROR-RESPONSE XCHG KWD-GENERAL-QUERY-BAD-REQUEST (EXCEPTION-MESSAGE E)))
      (CL:CONDITION (E) (GENERATE-ERROR-RESPONSE XCHG KWD-GENERAL-QUERY-INTERNAL-ERROR (EXCEPTION-MESSAGE E)))))
    (CL:T
     (CL:LET* ((MESSAGE-000 STELLA::NULL-STRING)) (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MESSAGE-000))
      (CL:LET* ((*PRINTREADABLY?* CL:T)) (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
       (CL:SETQ MESSAGE-000 (CONCATENATE "Unhandled request method: " "`" (STRINGIFY METHOD) "'")))
      (GENERATE-ERROR-RESPONSE XCHG KWD-GENERAL-QUERY-BAD-REQUEST MESSAGE-000))))))

(CL:DEFUN STARTUP-GENERAL-QUERY ()
  (CL:LET* ((*MODULE* (GET-STELLA-MODULE "/ONTOSAURUS" (> *STARTUP-TIME-PHASE* 1))) (*CONTEXT* *MODULE*)) (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2) (CL:SETQ SGT-GENERAL-QUERY-STELLA-CONS (INTERN-RIGID-SYMBOL-WRT-MODULE "CONS" (GET-STELLA-MODULE "/STELLA" CL:T) 1))
    (CL:SETQ KWD-GENERAL-QUERY-SORT-BY (INTERN-RIGID-SYMBOL-WRT-MODULE "SORT-BY" NULL 2))
    (CL:SETQ KWD-GENERAL-QUERY-VALUES (INTERN-RIGID-SYMBOL-WRT-MODULE "VALUES" NULL 2))
    (CL:SETQ KWD-GENERAL-QUERY-TIMEOUT (INTERN-RIGID-SYMBOL-WRT-MODULE "TIMEOUT" NULL 2))
    (CL:SETQ KWD-GENERAL-QUERY-QUERY (INTERN-RIGID-SYMBOL-WRT-MODULE "QUERY" NULL 2))
    (CL:SETQ SYM-GENERAL-QUERY-LOGIC-ALL (INTERN-RIGID-SYMBOL-WRT-MODULE "ALL" (GET-STELLA-MODULE "/LOGIC" CL:T) 0))
    (CL:SETQ SGT-GENERAL-QUERY-LOGIC-LOGIC-OBJECT (INTERN-RIGID-SYMBOL-WRT-MODULE "LOGIC-OBJECT" (GET-STELLA-MODULE "/LOGIC" CL:T) 1))
    (CL:SETQ SYM-GENERAL-QUERY-STELLA-EXISTS (INTERN-RIGID-SYMBOL-WRT-MODULE "EXISTS" (GET-STELLA-MODULE "/STELLA" CL:T) 0))
    (CL:SETQ KWD-GENERAL-QUERY-RELATION (INTERN-RIGID-SYMBOL-WRT-MODULE "RELATION" NULL 2))
    (CL:SETQ SYM-GENERAL-QUERY-LOGIC-JUSTIFICATION (INTERN-RIGID-SYMBOL-WRT-MODULE "JUSTIFICATION" (GET-STELLA-MODULE "/LOGIC" CL:T) 0))
    (CL:SETQ KWD-GENERAL-QUERY-HTML (INTERN-RIGID-SYMBOL-WRT-MODULE "HTML" NULL 2)) (CL:SETQ KWD-GENERAL-QUERY-LAY (INTERN-RIGID-SYMBOL-WRT-MODULE "LAY" NULL 2))
    (CL:SETQ KWD-GENERAL-QUERY-KIF-ONTOSAURUS (INTERN-RIGID-SYMBOL-WRT-MODULE "KIF-ONTOSAURUS" NULL 2))
    (CL:SETQ KWD-GENERAL-QUERY-GET (INTERN-RIGID-SYMBOL-WRT-MODULE "GET" NULL 2)) (CL:SETQ KWD-GENERAL-QUERY-POST (INTERN-RIGID-SYMBOL-WRT-MODULE "POST" NULL 2))
    (CL:SETQ KWD-GENERAL-QUERY-BAD-REQUEST (INTERN-RIGID-SYMBOL-WRT-MODULE "BAD-REQUEST" NULL 2))
    (CL:SETQ KWD-GENERAL-QUERY-INTERNAL-ERROR (INTERN-RIGID-SYMBOL-WRT-MODULE "INTERNAL-ERROR" NULL 2))
    (CL:SETQ KWD-GENERAL-QUERY-CONTENT-TYPE (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTENT-TYPE" NULL 2))
    (CL:SETQ KWD-GENERAL-QUERY-DOCUMENTATION (INTERN-RIGID-SYMBOL-WRT-MODULE "DOCUMENTATION" NULL 2))
    (CL:SETQ SYM-GENERAL-QUERY-ONTOSAURUS-STARTUP-GENERAL-QUERY (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-GENERAL-QUERY" NULL 0))
    (CL:SETQ SYM-GENERAL-QUERY-STELLA-METHOD-STARTUP-CLASSNAME (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME" (GET-STELLA-MODULE "/STELLA" CL:T) 0)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 4) (CL:SETQ *PRESET-QUERIES* NIL)
    (CL:SETQ *GENERAL-QUERY-FORM-TEMPLATE*
     (CONCATENATE "<HTML>
<HEAD>
<BASE TARGET='answer'>
<TITLE>Query Form</TITLE>
</HEAD>
<" (MAKE-HTML-BODY-TAG *STANDARD-BACKGROUND-COLOR*) ">

#$(FORM-HEADER)

<H1>Query Form</H1>

Module:&nbsp;#$(MODULE-MENU)
<BR>

Queries:&nbsp;#$(QUERY-MENU)
<BR>
Number of answers:&nbsp;#$(NOF-ANSWERS-MENU)
<BR>
#$(QUERY-INPUT-AREA)
<BR>
#$(SUBMIT-BUTTON)
#$(RESET-BUTTON)

#$(FORM-TRAILER)

<BR>
<HR SIZE=2>
" *POWERLOOM-COPYRIGHT-TRAILER* "</BODY>
</HTML>
")))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (DEFINE-FUNCTION-OBJECT "HTML-WRITE-QUERY-FORM-PAGE" "(DEFUN HTML-WRITE-QUERY-FORM-PAGE ((STREAM NATIVE-OUTPUT-STREAM)))" (CL:FUNCTION HTML-WRITE-QUERY-FORM-PAGE)
     NULL)
    (DEFINE-FUNCTION-OBJECT "YIELD-PRESET-QUERIES-SCRIPT" "(DEFUN (YIELD-PRESET-QUERIES-SCRIPT STRING) ((QUERIES (CONS OF (CONS OF STRING-WRAPPER)))))"
     (CL:FUNCTION YIELD-PRESET-QUERIES-SCRIPT) NULL)
    (DEFINE-FUNCTION-OBJECT "YIELD-CHOICE-MENU-STRING" "(DEFUN (YIELD-CHOICE-MENU-STRING STRING) ((ITEMS CONS) (SELECTOPTIONS STRING)))"
     (CL:FUNCTION YIELD-CHOICE-MENU-STRING) NULL)
    (DEFINE-FUNCTION-OBJECT "YIELD-MODULE-MENU-STRING" "(DEFUN (YIELD-MODULE-MENU-STRING STRING) ((MODULES (CONS OF STRING-WRAPPER))))"
     (CL:FUNCTION YIELD-MODULE-MENU-STRING) NULL)
    (DEFINE-FUNCTION-OBJECT "YIELD-QUERY-MENU-STRING" "(DEFUN (YIELD-QUERY-MENU-STRING STRING) ((QUERIES (CONS OF (CONS OF STRING-WRAPPER)))))"
     (CL:FUNCTION YIELD-QUERY-MENU-STRING) NULL)
    (DEFINE-FUNCTION-OBJECT "YIELD-NOF-ANSWERS-MENU-STRING" "(DEFUN (YIELD-NOF-ANSWERS-MENU-STRING STRING) ((NOFANSWERS (CONS OF STRING-WRAPPER))))"
     (CL:FUNCTION YIELD-NOF-ANSWERS-MENU-STRING) NULL)
    (DEFINE-FUNCTION-OBJECT "YIELD-TIMEOUTS-MENU-STRING" "(DEFUN (YIELD-TIMEOUTS-MENU-STRING STRING) ((TIMEOUTS (CONS OF STRING-WRAPPER))))"
     (CL:FUNCTION YIELD-TIMEOUTS-MENU-STRING) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-WRITE-QUERY-FORM-PAGE-FROM-TEMPLATE"
     "(DEFUN HTML-WRITE-QUERY-FORM-PAGE-FROM-TEMPLATE ((STREAM OUTPUT-STREAM) (TEMPLATESTREAM INPUT-STREAM)))" (CL:FUNCTION HTML-WRITE-QUERY-FORM-PAGE-FROM-TEMPLATE)
     NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-EXECUTE-QUERY" "(DEFUN HTML-EXECUTE-QUERY ((QUERYDATA KEY-VALUE-LIST) (STREAM NATIVE-OUTPUT-STREAM)))" (CL:FUNCTION HTML-EXECUTE-QUERY)
     NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-EXECUTE-ASK-QUERY" "(DEFUN HTML-EXECUTE-ASK-QUERY ((QUERY CONS) (OPTIONS CONS) (MOD MODULE) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION HTML-EXECUTE-ASK-QUERY) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-EXECUTE-RETRIEVE-QUERY"
     "(DEFUN HTML-EXECUTE-RETRIEVE-QUERY ((NVALUES INTEGER) (VARIABLES CONS) (QUERY CONS) (OPTIONS CONS) (MOD MODULE) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION HTML-EXECUTE-RETRIEVE-QUERY) NULL)
    (DEFINE-FUNCTION-OBJECT "WRITE-EXPLANATION-ICON" "(DEFUN WRITE-EXPLANATION-ICON ((QUERY QUERY-ITERATOR) (BINDINGS CONS) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION WRITE-EXPLANATION-ICON) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-WRITE-EXPLANATION-RESPONSE-PAGE"
     "(DEFUN HTML-WRITE-EXPLANATION-RESPONSE-PAGE ((MODULENAME STRING) (QUERY STRING) (STREAM NATIVE-OUTPUT-STREAM)))" (CL:FUNCTION HTML-WRITE-EXPLANATION-RESPONSE-PAGE)
     NULL)
    (DEFINE-FUNCTION-OBJECT "PLOOM-QUERY-HANDLER" "(DEFUN PLOOM-QUERY-HANDLER ((XCHG /HTTP/HTTP-EXCHANGE)))" (CL:FUNCTION PLOOM-QUERY-HANDLER) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-GENERAL-QUERY" "(DEFUN STARTUP-GENERAL-QUERY () :PUBLIC? TRUE)" (CL:FUNCTION STARTUP-GENERAL-QUERY) NULL)
    (CL:LET* ((FUNCTION (LOOKUP-FUNCTION SYM-GENERAL-QUERY-ONTOSAURUS-STARTUP-GENERAL-QUERY)))
     (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FUNCTION) SYM-GENERAL-QUERY-STELLA-METHOD-STARTUP-CLASSNAME (WRAP-STRING "_StartupGeneralQuery") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS) (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9) (%IN-MODULE (COPY-CONS-TREE (WRAP-STRING "ONTOSAURUS")))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *PRESET-QUERIES* (CONS OF (CONS OF STRING-WRAPPER)) NIL :DOCUMENTATION \"A list of preset queries to make entry easier.  Format is
(\\\"Title\\\" \\\"ModuleName\\\" \\\"QueryBody\\\") \")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE "(DEFGLOBAL *GENERAL-QUERY-FORM-TEMPLATE* STRING (CONCATENATE \"<HTML>
<HEAD>
<BASE TARGET='answer'>
<TITLE>Query Form</TITLE>
</HEAD>
<\" (MAKE-HTML-BODY-TAG *STANDARD-BACKGROUND-COLOR*) \">

#$(FORM-HEADER)

<H1>Query Form</H1>

Module:&nbsp;#$(MODULE-MENU)
<BR>

Queries:&nbsp;#$(QUERY-MENU)
<BR>
Number of answers:&nbsp;#$(NOF-ANSWERS-MENU)
<BR>
#$(QUERY-INPUT-AREA)
<BR>
#$(SUBMIT-BUTTON)
#$(RESET-BUTTON)

#$(FORM-TRAILER)

<BR>
<HR SIZE=2>
\" *POWERLOOM-COPYRIGHT-TRAILER* \"</BODY>
</HTML>
\"))")
    (PUBLISH-HANDLER "/ploom/ontosaurus/do-query" (CL:FUNCTION PLOOM-QUERY-HANDLER) KWD-GENERAL-QUERY-CONTENT-TYPE
     (WRAP-STRING (GET-HTTP-MIME-TYPE KWD-GENERAL-QUERY-HTML NULL)) KWD-GENERAL-QUERY-DOCUMENTATION (WRAP-STRING "Ontosaurus form to send PowerLoom queries.")))))
