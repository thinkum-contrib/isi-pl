;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; html-describe-object.slisp

#|
 +---------------------------- BEGIN LICENSE BLOCK ---------------------------+
 |                                                                            |
 | Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
 |                                                                            |
 | The contents of this file are subject to the Mozilla Public License        |
 | Version 1.1 (the "License"); you may not use this file except in           |
 | compliance with the License. You may obtain a copy of the License at       |
 | http://www.mozilla.org/MPL/                                                |
 |                                                                            |
 | Software distributed under the License is distributed on an "AS IS" basis, |
 | WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
 | for the specific language governing rights and limitations under the       |
 | License.                                                                   |
 |                                                                            |
 | The Original Code is the PowerLoom KR&R System.                            |
 |                                                                            |
 | The Initial Developer of the Original Code is                              |
 | UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
 | 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
 |                                                                            |
 | Portions created by the Initial Developer are Copyright (C) 2000-2014      |
 | the Initial Developer. All Rights Reserved.                                |
 |                                                                            |
 | Contributor(s):                                                            |
 |                                                                            |
 | Alternatively, the contents of this file may be used under the terms of    |
 | either the GNU General Public License Version 2 or later (the "GPL"), or   |
 | the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
 | in which case the provisions of the GPL or the LGPL are applicable instead |
 | of those above. If you wish to allow use of your version of this file only |
 | under the terms of either the GPL or the LGPL, and not to allow others to  |
 | use your version of this file under the terms of the MPL, indicate your    |
 | decision by deleting the provisions above and replace them with the notice |
 | and other provisions required by the GPL or the LGPL. If you do not delete |
 | the provisions above, a recipient may use your version of this file under  |
 | the terms of any one of the MPL, the GPL or the LGPL.                      |
 |                                                                            |
 +----------------------------- END LICENSE BLOCK ----------------------------+
|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR KWD-HTML-DESCRIBE-OBJECT-CONCEPT NULL)
(CL:DEFVAR KWD-HTML-DESCRIBE-OBJECT-RELATION NULL)
(CL:DEFVAR KWD-HTML-DESCRIBE-OBJECT-CONTEXT NULL)
(CL:DEFVAR KWD-HTML-DESCRIBE-OBJECT-INSTANCE NULL)
(CL:DEFVAR KWD-HTML-DESCRIBE-OBJECT-QUERY NULL)
(CL:DEFVAR KWD-HTML-DESCRIBE-OBJECT-OBJECT NULL)
(CL:DEFVAR SGT-HTML-DESCRIBE-OBJECT-STELLA-MODULE NULL)
(CL:DEFVAR KWD-HTML-DESCRIBE-OBJECT-PREORDER NULL)
(CL:DEFVAR KWD-HTML-DESCRIBE-OBJECT-EQUIVALENT NULL)
(CL:DEFVAR KWD-HTML-DESCRIBE-OBJECT-IMPLIES NULL)
(CL:DEFVAR SGT-HTML-DESCRIBE-OBJECT-LOGIC-NAMED-DESCRIPTION NULL)
(CL:DEFVAR SYM-HTML-DESCRIBE-OBJECT-STELLA-CODE-ONLY? NULL)
(CL:DEFVAR SYM-HTML-DESCRIBE-OBJECT-STELLA-NAMESPACE? NULL)
(CL:DEFVAR KWD-HTML-DESCRIBE-OBJECT-MODULE NULL)
(CL:DEFVAR SGT-HTML-DESCRIBE-OBJECT-LOGIC-LOGIC-OBJECT NULL)
(CL:DEFVAR KWD-HTML-DESCRIBE-OBJECT-EXACT NULL)
(CL:DEFVAR KWD-HTML-DESCRIBE-OBJECT-CASE-INSENSITIVE NULL)
(CL:DEFVAR KWD-HTML-DESCRIBE-OBJECT-SUBSTRING NULL)
(CL:DEFVAR KWD-HTML-DESCRIBE-OBJECT-WILDCARD NULL)
(CL:DEFVAR KWD-HTML-DESCRIBE-OBJECT-REGEX NULL)
(CL:DEFVAR SGT-HTML-DESCRIBE-OBJECT-LOGIC-DESCRIPTION NULL)
(CL:DEFVAR SYM-HTML-DESCRIBE-OBJECT-ONTOSAURUS-PPRINT-ATOMIC-OBJECT-FOR-HTML NULL)
(CL:DEFVAR KWD-HTML-DESCRIBE-OBJECT-BAD-REQUEST NULL)
(CL:DEFVAR KWD-HTML-DESCRIBE-OBJECT-CONTENT-TYPE NULL)
(CL:DEFVAR KWD-HTML-DESCRIBE-OBJECT-HTML NULL)
(CL:DEFVAR KWD-HTML-DESCRIBE-OBJECT-DOCUMENTATION NULL)
(CL:DEFVAR SYM-HTML-DESCRIBE-OBJECT-ONTOSAURUS-STARTUP-HTML-DESCRIBE-OBJECT NULL)
(CL:DEFVAR SYM-HTML-DESCRIBE-OBJECT-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STARTUP-TIME-PHASE* *MODULE-BACKGROUND-COLOR* *STANDARD-BACKGROUND-COLOR* *ERROR-BACKGROUND-COLOR*
  FALSE-WRAPPER *POWERLOOM-LOCK* *CONTEXT* ASSERTION-INFERENCE *REVERSEPOLARITY?* TRUE-WRAPPER NULL-INTEGER NIL
  *MODULE* EOL))

;;; (DEFUN (LOOKUP-TERM STRING) ...)

(CL:DECLAIM (CL:FTYPE (CL:FUNCTION (CL:T CL:T CL:T) CL:SIMPLE-STRING) LOOKUP-TERM))
(CL:DEFUN LOOKUP-TERM (TERM CAPITALIZED? PLURAL?)
  (CL:COND
   ((CL:AND PLURAL? CAPITALIZED?)
    (CL:COND ((CL:EQ TERM KWD-HTML-DESCRIBE-OBJECT-CONCEPT) "Concepts")
     ((CL:EQ TERM KWD-HTML-DESCRIBE-OBJECT-RELATION) "Relations")
     ((CL:EQ TERM KWD-HTML-DESCRIBE-OBJECT-CONTEXT) "Modules")
     ((CL:EQ TERM KWD-HTML-DESCRIBE-OBJECT-INSTANCE) "Instances")
     ((CL:EQ TERM KWD-HTML-DESCRIBE-OBJECT-QUERY) "Queries") ((CL:EQ TERM KWD-HTML-DESCRIBE-OBJECT-OBJECT) "Objects")
     (CL:T (CONCATENATE (STRING-CAPITALIZE (%KEYWORD.SYMBOL-NAME TERM)) "s"))))
   (CAPITALIZED?
    (CL:COND ((CL:EQ TERM KWD-HTML-DESCRIBE-OBJECT-CONCEPT) "Concept")
     ((CL:EQ TERM KWD-HTML-DESCRIBE-OBJECT-RELATION) "Relation")
     ((CL:EQ TERM KWD-HTML-DESCRIBE-OBJECT-CONTEXT) "Module")
     ((CL:EQ TERM KWD-HTML-DESCRIBE-OBJECT-INSTANCE) "Instance") ((CL:EQ TERM KWD-HTML-DESCRIBE-OBJECT-QUERY) "Query")
     ((CL:EQ TERM KWD-HTML-DESCRIBE-OBJECT-OBJECT) "Object") (CL:T (STRING-CAPITALIZE (%KEYWORD.SYMBOL-NAME TERM)))))
   (PLURAL?
    (CL:COND ((CL:EQ TERM KWD-HTML-DESCRIBE-OBJECT-CONCEPT) "concepts")
     ((CL:EQ TERM KWD-HTML-DESCRIBE-OBJECT-RELATION) "relations")
     ((CL:EQ TERM KWD-HTML-DESCRIBE-OBJECT-CONTEXT) "modules")
     ((CL:EQ TERM KWD-HTML-DESCRIBE-OBJECT-INSTANCE) "instances")
     ((CL:EQ TERM KWD-HTML-DESCRIBE-OBJECT-QUERY) "queries") ((CL:EQ TERM KWD-HTML-DESCRIBE-OBJECT-OBJECT) "objects")
     (CL:T (CONCATENATE (STRING-DOWNCASE (%KEYWORD.SYMBOL-NAME TERM)) "s"))))
   (CL:T
    (CL:COND ((CL:EQ TERM KWD-HTML-DESCRIBE-OBJECT-CONCEPT) "concept")
     ((CL:EQ TERM KWD-HTML-DESCRIBE-OBJECT-RELATION) "relation")
     ((CL:EQ TERM KWD-HTML-DESCRIBE-OBJECT-CONTEXT) "module")
     ((CL:EQ TERM KWD-HTML-DESCRIBE-OBJECT-INSTANCE) "instance") ((CL:EQ TERM KWD-HTML-DESCRIBE-OBJECT-QUERY) "query")
     ((CL:EQ TERM KWD-HTML-DESCRIBE-OBJECT-OBJECT) "object") (CL:T (STRING-DOWNCASE (%KEYWORD.SYMBOL-NAME TERM)))))))

;;; (DEFUN (SAFE-OBJECT-NAME-STRING STRING) ...)

(CL:DECLAIM (CL:FTYPE (CL:FUNCTION (CL:T) CL:SIMPLE-STRING) SAFE-OBJECT-NAME-STRING))
(CL:DEFUN SAFE-OBJECT-NAME-STRING (INSTANCE)
  (CL:LET* ((SURROGATE (%LOGIC-OBJECT.SURROGATE-VALUE-INVERSE INSTANCE)))
   (CL:IF (CL:NOT (CL:EQ SURROGATE NULL)) (%SURROGATE.SYMBOL-NAME SURROGATE) STELLA::NULL-STRING)))

;;; (DEFUN HTML-DESCRIBE-LOCATION ...)

(CL:DEFUN HTML-DESCRIBE-LOCATION (SELF STREAM)
  (CL:PROGN (%%PRINT-STREAM STREAM "<PRE>")
   (%%PRINT-STREAM STREAM (LOOKUP-TERM KWD-HTML-DESCRIBE-OBJECT-CONTEXT CL:T CL:NIL) ": ")
   (CL:IF (CL:AND (CL:NOT (CL:EQ SELF NULL)) (ISA? (HOME-MODULE SELF) SGT-HTML-DESCRIBE-OBJECT-STELLA-MODULE))
    (HTML-WRITE-HREF STREAM "show" "context" (HOME-MODULE SELF)) (%%PRINT-STREAM STREAM (%CC NIL)))
   (%%PRINT-STREAM STREAM EOL)
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ SELF NULL)) (CL:NOT (CL:EQ (OBJECT-NAME SELF) NULL))
     (CL:NOT (CL:EQ (HOME-MODULE (OBJECT-NAME SELF)) (HOME-MODULE SELF))))
    (%%PRINT-STREAM STREAM "Namespace: ") (HTML-WRITE-HREF STREAM "show" "context" (HOME-MODULE (OBJECT-NAME SELF)))
    (%%PRINT-STREAM STREAM EOL))
   (%%PRINT-STREAM STREAM "</PRE>" EOL))
  NULL)

;;; (DEFUN HTML-WRITE-CONTEXT-VIEW-OPTION ...)

(CL:DEFUN HTML-WRITE-CONTEXT-VIEW-OPTION (STREAM OBJECTNAME CTX)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING OBJECTNAME))
  #+MCL
  (CL:CHECK-TYPE OBJECTNAME CL:SIMPLE-STRING)
  (%%PRINT-STREAM STREAM "<option VALUE=\"do-action?show+object+")
  (WRITE-HTML-ESCAPING-URL-SPECIAL-CHARACTERS STREAM (NAME CTX))
  (%%PRINT-STREAM STREAM "+")
  (WRITE-HTML-ESCAPING-URL-SPECIAL-CHARACTERS STREAM OBJECTNAME)
  (%%PRINT-STREAM STREAM "\"")
  (CL:WHEN (CL:EQ CTX *MODULE*) (%%PRINT-STREAM STREAM " SELECTED"))
  (%%PRINT-STREAM STREAM ">")
  (WRITE-HTML-QUOTING-SPECIAL-CHARACTERS STREAM (NAME CTX))
  (%%PRINT-STREAM STREAM "</OPTION>" EOL)
  NULL)

;;; (DEFUN HTML-DESCRIBE-CONTEXT-VIEW ...)

(CL:DEFUN HTML-DESCRIBE-CONTEXT-VIEW (SELF STREAM)
  (CL:LET*
   ((HOMEC (HOME-MODULE SELF)) (OBJECTNAME (GET-HTML-OBJECT-HANDLE SELF))
    (CONTEXTLIST (ALL-SUBCONTEXTS HOMEC KWD-HTML-DESCRIBE-OBJECT-PREORDER)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING OBJECTNAME))
   (CL:WHEN (CL:NOT (CL:EQ (CHILD-MODULES HOMEC) NIL))
    (HTML-WRITE-JAVASCRIPT STREAM "
function jumpLink (opt) {
  var URLpath = self.location.href.substring(0 , self.location.href.lastIndexOf('/') + 1);
  self.location.href=URLpath + opt.options[opt.selectedIndex].value;
};
")
    (CL:PROGN (%%PRINT-STREAM STREAM "<FORM Name='CFORM'>") (%%PRINT-STREAM STREAM "Seen from: ")
     (CL:PROGN (%%PRINT-STREAM STREAM "<SELECT NAME='context' onchange='jumpLink(this);'>") (%%PRINT-STREAM STREAM EOL)
      (HTML-WRITE-CONTEXT-VIEW-OPTION STREAM OBJECTNAME HOMEC)
      (CL:LET* ((C NULL) (ITER-000 CONTEXTLIST))
       (CL:LOOP WHILE (NEXT? ITER-000) DO (CL:SETQ C (%ALL-PURPOSE-ITERATOR.VALUE ITER-000))
        (CL:WHEN (ISA? C SGT-HTML-DESCRIBE-OBJECT-STELLA-MODULE)
         (HTML-WRITE-CONTEXT-VIEW-OPTION STREAM OBJECTNAME C))))
      (%%PRINT-STREAM STREAM "</SELECT>"))
     (%%PRINT-STREAM STREAM "</FORM>" EOL))))
  NULL)

;;; (DEFGLOBAL *IMAGE-URL-RELATION* ...)

(CL:DEFVAR *IMAGE-URL-RELATION* NULL)

;;; (DEFUN HTML-DISPLAY-IMAGES ...)

(CL:DEFUN HTML-DISPLAY-IMAGES (SELF STREAM)
  (CL:LET* ((FIRST? CL:T) (IMAGES (PLI::GET-INFERRED-BINARY-PROPOSITION-VALUES *IMAGE-URL-RELATION* SELF NULL NULL)))
   (CL:WHEN (CL:NOT (EMPTY? IMAGES)) (%%PRINT-STREAM STREAM EOL)
    (CL:PROGN (%%PRINT-STREAM STREAM "<P>")
     (CL:LET* ((I NULL) (ITER-000 IMAGES))
      (CL:LOOP WHILE (NEXT? ITER-000) DO (CL:SETQ I (PLI::%PL-ITERATOR.VALUE ITER-000))
       (CL:IF FIRST? (HTML-LINE-BREAK STREAM) (%%PRINT-STREAM STREAM " "))
       (HTML-EMIT-IMAGE STREAM (%STRING-WRAPPER.WRAPPER-VALUE I) "" NULL-INTEGER NULL-INTEGER "BOTTOM" 0)))
     (%%PRINT-STREAM STREAM "</P>"))))
  NULL)

;;; (DEFGLOBAL *DOCUMENTATION-RELATION* ...)

(CL:DEFVAR *DOCUMENTATION-RELATION* NULL)

;;; (DEFUN HTML-DISPLAY-DOCUMENTATION ...)

(CL:DEFUN HTML-DISPLAY-DOCUMENTATION (SELF STREAM)
  (CL:LET* ((DOCSTRINGS (PLI::GET-INFERRED-BINARY-PROPOSITION-VALUES *DOCUMENTATION-RELATION* SELF NULL NULL)))
   (CL:WHEN (CL:NOT (CL:EQ DOCSTRINGS NULL))
    (CL:PROGN (%%PRINT-STREAM STREAM "<FONT COLOR='#007700'>")
     (CL:PROGN (%%PRINT-STREAM STREAM "<DL>")
      (CL:LET* ((DOC NULL) (ITER-000 DOCSTRINGS))
       (CL:LOOP WHILE (NEXT? ITER-000) DO (CL:SETQ DOC (PLI::%PL-ITERATOR.VALUE ITER-000))
        (CL:WHEN
         (CL:AND (CL:NOT (CL:EQ DOC NULL)) (CL:NOT (CL:EQ (%STRING-WRAPPER.WRAPPER-VALUE DOC) STELLA::NULL-STRING)))
         (CL:PROGN (%%PRINT-STREAM STREAM "<DT>")
          (HTML-DISPLAY-STRING-IN-PARAGRAPHS (%STRING-WRAPPER.WRAPPER-VALUE DOC) STREAM)
          (%%PRINT-STREAM STREAM "</DT>")))))
      (%%PRINT-STREAM STREAM "</DL>"))
     (%%PRINT-STREAM STREAM "</FONT>" EOL)))
   (%%PRINT-STREAM STREAM "<HR SIZE=2>" EOL)))

;;; (DEFUN HTML-DISPLAY-SYNONYMS ...)

(CL:DEFUN HTML-DISPLAY-SYNONYMS (SELF STREAM)
  (CL:LET* ((SYNONYMS (GET-SYNONYMS SELF)))
   (CL:WHEN (CL:NOT (CL:EQ SYNONYMS NIL))
    (CL:PROGN (%%PRINT-STREAM STREAM "<P>")
     (CL:PROGN (%%PRINT-STREAM STREAM "<B>") (%%PRINT-STREAM STREAM "Synonyms: ") (%%PRINT-STREAM STREAM "</B>"))
     (WRITE-HTML-ESCAPING-URL-SPECIAL-CHARACTERS STREAM (OBJECT-STRING-NAME (%%VALUE SYNONYMS)))
     (CL:LET* ((SYN NULL) (ITER-000 (%%REST SYNONYMS)))
      (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO (CL:SETQ SYN (%%VALUE ITER-000)) (%%PRINT-STREAM STREAM ", ")
       (WRITE-HTML-ESCAPING-URL-SPECIAL-CHARACTERS STREAM (OBJECT-STRING-NAME SYN))
       (CL:SETQ ITER-000 (%%REST ITER-000))))
     (%%PRINT-STREAM STREAM "</P>" EOL)))))

;;; (DEFUN HTML-DESCRIBE-EQUIVALENTS ...)

(CL:DEFUN HTML-DESCRIBE-EQUIVALENTS (TITLE HEAD RELATION STREAM RULE?)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TITLE HEAD))
  #+MCL
  (CL:CHECK-TYPE TITLE CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE HEAD CL:SIMPLE-STRING)
  (CL:LET* ((EQUIVALENTS (COPY-CONS-LIST (ALL-EQUIVALENT-RELATIONS RELATION CL:T))))
   (CL:WHEN (CL:NOT (CL:EQ (%%REST EQUIVALENTS) NIL))
    (CL:SETQ EQUIVALENTS (SORT (REMOVE EQUIVALENTS RELATION) (CL:FUNCTION OBJECT-NAME-LESS-THAN?)))
    (HTML-WRITE-HEADER-WITH-TABLE STREAM TITLE HEAD) (HTML-WRITE-HREF STREAM "show" "concept" (%%VALUE EQUIVALENTS))
    (CL:LET* ((C NULL) (ITER-000 (%%REST EQUIVALENTS)))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO (CL:SETQ C (%%VALUE ITER-000)) (%%PRINT-STREAM STREAM ", ")
      (HTML-WRITE-HREF STREAM "show" "concept" C) (CL:SETQ ITER-000 (%%REST ITER-000))))
    (CL:WHEN RULE? (%%PRINT-STREAM STREAM "<HR SIZE=2>" EOL)))
   NULL))

;;; (DEFUN HTML-DESCRIBE-ONE-SUB-LEVEL ...)

(CL:DEFUN HTML-DESCRIBE-ONE-SUB-LEVEL (OBJECT DEPTH CUTOFF STREAM)
  (CL:DECLARE (CL:TYPE CL:FIXNUM DEPTH CUTOFF))
  #+MCL
  (CL:CHECK-TYPE DEPTH CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE CUTOFF CL:FIXNUM)
  (CL:LET* ((DIRECTSUBS (CONSIFY (PLI::GET-DIRECT-SUBRELATIONS OBJECT NULL NULL))))
   (CL:WHEN (CL:EQ DIRECTSUBS NIL) (CL:RETURN-FROM HTML-DESCRIBE-ONE-SUB-LEVEL))
   (CL:SETQ DIRECTSUBS (SORT DIRECTSUBS (CL:FUNCTION OBJECT-NAME-LESS-THAN?)))
   (CL:PROGN (%%PRINT-STREAM STREAM "<DL STYLE=' margin-top: 0; margin-bottom:0'>")
    (CL:LET* ((SUB NULL) (ITER-000 DIRECTSUBS))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO (CL:SETQ SUB (%%VALUE ITER-000))
      (CL:PROGN (%%PRINT-STREAM STREAM "<DT STYLE='margin-top: 0'>") (HTML-WRITE-HREF STREAM "show" "concept" SUB)
       (CL:WHEN (CL:AND (CL:>= DEPTH CUTOFF) (CL:NOT (EMPTY? (PLI::GET-DIRECT-SUBRELATIONS SUB NULL NULL))))
        (%%PRINT-STREAM STREAM "    +..."))
       (%%PRINT-STREAM STREAM "</DT>" EOL))
      (CL:WHEN (CL:< DEPTH CUTOFF)
       (CL:PROGN (%%PRINT-STREAM STREAM "<DD>") (HTML-DESCRIBE-ONE-SUB-LEVEL SUB (CL:1+ DEPTH) CUTOFF STREAM)
        (%%PRINT-STREAM STREAM "</DD>" EOL)))
      (CL:SETQ ITER-000 (%%REST ITER-000))))
    (%%PRINT-STREAM STREAM "</DL>" EOL))
   NULL))

;;; (DEFUN HTML-DESCRIBE-SUBS ...)

(CL:DEFUN HTML-DESCRIBE-SUBS (TITLE HEAD RELATION STREAM RULE?)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TITLE HEAD))
  #+MCL
  (CL:CHECK-TYPE TITLE CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE HEAD CL:SIMPLE-STRING)
  (CL:LET* ((HEURISTICDEPTH 4) (SUBLENGTH (LENGTH (PLI::GET-DIRECT-SUBRELATIONS RELATION NULL NULL))))
   (CL:DECLARE (CL:TYPE CL:FIXNUM HEURISTICDEPTH SUBLENGTH))
   (CL:WHEN (CL:> SUBLENGTH 30) (CL:SETQ HEURISTICDEPTH (CL:1- HEURISTICDEPTH)))
   (HTML-WRITE-HEADER-WITH-TABLE STREAM TITLE HEAD)
   (CL:IF (CL:= SUBLENGTH 0)
    (CL:PROGN (%%PRINT-STREAM STREAM "<I>") (%%PRINT-STREAM STREAM "None") (%%PRINT-STREAM STREAM "</I>" EOL))
    (HTML-DESCRIBE-ONE-SUB-LEVEL RELATION 0 HEURISTICDEPTH STREAM))
   (CL:WHEN RULE? (%%PRINT-STREAM STREAM "<HR SIZE=2>" EOL)) NULL))

;;; (DEFUN HTML-DESCRIBE-ONE-SUPER-LEVEL ...)

(CL:DEFUN HTML-DESCRIBE-ONE-SUPER-LEVEL (DIRECTSUPERS ALREADYOUTPUT STREAM)
  (CL:LET* ((ALREADYOUTPUT? CL:NIL)) (CL:WHEN (CL:EQ DIRECTSUPERS NIL) (CL:RETURN-FROM HTML-DESCRIBE-ONE-SUPER-LEVEL))
   (CL:SETQ DIRECTSUPERS (SORT (COPY-CONS-LIST DIRECTSUPERS) (CL:FUNCTION OBJECT-NAME-LESS-THAN?)))
   (CL:PROGN (%%PRINT-STREAM STREAM "<DL STYLE=' margin-top: 0; margin-bottom:0'>")
    (CL:LET* ((SUPER NULL) (ITER-000 DIRECTSUPERS))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO (CL:SETQ SUPER (%%VALUE ITER-000))
      (CL:SETQ ALREADYOUTPUT? (CL:NOT (CL:EQ (LOOKUP ALREADYOUTPUT SUPER) NULL)))
      (CL:PROGN (%%PRINT-STREAM STREAM "<DT STYLE='margin-top: 0'>") (HTML-WRITE-HREF STREAM "show" "concept" SUPER)
       (CL:WHEN ALREADYOUTPUT? (%%PRINT-STREAM STREAM "...")) (%%PRINT-STREAM STREAM "</DT>" EOL))
      (CL:WHEN (CL:NOT ALREADYOUTPUT?) (INSERT-AT ALREADYOUTPUT SUPER TRUE-WRAPPER)
       (CL:PROGN (%%PRINT-STREAM STREAM "<DD>")
        (HTML-DESCRIBE-ONE-SUPER-LEVEL (CONSIFY (PLI::GET-DIRECT-SUPERRELATIONS SUPER NULL NULL)) ALREADYOUTPUT STREAM)
        (%%PRINT-STREAM STREAM "</DD>" EOL)))
      (CL:SETQ ITER-000 (%%REST ITER-000))))
    (%%PRINT-STREAM STREAM "</DL>" EOL))
   NULL))

;;; (DEFUN HTML-DESCRIBE-SUPERS ...)

(CL:DEFUN HTML-DESCRIBE-SUPERS (TITLE HEAD RELATION STREAM RULE?)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TITLE HEAD))
  #+MCL
  (CL:CHECK-TYPE TITLE CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE HEAD CL:SIMPLE-STRING)
  (CL:LET*
   ((ALREADYOUTPUT (NEW-HASH-TABLE)) (DIRECTSUPERS (CONSIFY (PLI::GET-DIRECT-SUPERRELATIONS RELATION NULL NULL))))
   (HTML-WRITE-HEADER-WITH-TABLE STREAM TITLE HEAD)
   (CL:IF (CL:EQ DIRECTSUPERS NIL)
    (CL:PROGN (%%PRINT-STREAM STREAM "<I>") (%%PRINT-STREAM STREAM "None") (%%PRINT-STREAM STREAM "</I>" EOL))
    (HTML-DESCRIBE-ONE-SUPER-LEVEL DIRECTSUPERS ALREADYOUTPUT STREAM))
   (CL:WHEN RULE? (%%PRINT-STREAM STREAM "<HR SIZE=2>" EOL)) NULL))

;;; (DEFUN HTML-DESCRIBE-TYPES ...)

(CL:DEFUN HTML-DESCRIBE-TYPES (TITLE HEAD RELATION STREAM RULE?)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TITLE HEAD))
  #+MCL
  (CL:CHECK-TYPE TITLE CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE HEAD CL:SIMPLE-STRING)
  (CL:LET* ((ALREADYOUTPUT (NEW-HASH-TABLE)) (TYPES (CONSIFY (PLI::GET-DIRECT-TYPES RELATION NULL NULL))))
   (HTML-WRITE-HEADER-WITH-TABLE STREAM TITLE HEAD)
   (CL:IF (CL:EQ TYPES NIL)
    (CL:PROGN (%%PRINT-STREAM STREAM "<I>") (%%PRINT-STREAM STREAM "None") (%%PRINT-STREAM STREAM "</I>" EOL))
    (HTML-DESCRIBE-ONE-SUPER-LEVEL TYPES ALREADYOUTPUT STREAM))
   (CL:WHEN RULE? (%%PRINT-STREAM STREAM "<HR SIZE=2>" EOL)) NULL))

;;; (DEFUN HTML-DESCRIBE-ONE-PARENT-WITH-SIBLINGS ...)

(CL:DEFUN HTML-DESCRIBE-ONE-PARENT-WITH-SIBLINGS (PARENT CHILD STREAM)
  (CL:LET* ((DIRECTSUBS (CONSIFY (PLI::GET-DIRECT-SUBRELATIONS PARENT NULL NULL))))
   (CL:SETQ DIRECTSUBS (SORT DIRECTSUBS (CL:FUNCTION OBJECT-NAME-LESS-THAN?)))
   (CL:PROGN (%%PRINT-STREAM STREAM "<DT>") (%%PRINT-STREAM STREAM "Common parent: ")
    (HTML-WRITE-HREF STREAM "show" "concept" PARENT) (%%PRINT-STREAM STREAM "</DT>" EOL))
   (CL:LET* ((SUB NULL) (ITER-000 DIRECTSUBS))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO (CL:SETQ SUB (%%VALUE ITER-000))
     (CL:WHEN (CL:NOT (CL:EQ SUB CHILD))
      (CL:PROGN (%%PRINT-STREAM STREAM "<DD>") (HTML-WRITE-HREF STREAM "show" "concept" SUB)
       (%%PRINT-STREAM STREAM "</DD>" EOL)))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   NULL))

;;; (DEFUN (HAS-CHILD-OTHER-THAN? BOOLEAN) ...)

(CL:DEFUN HAS-CHILD-OTHER-THAN? (PARENT CHILD)
  (CL:LET* ((C NULL) (ITER-000 (PLI::GET-DIRECT-SUBRELATIONS PARENT NULL NULL)))
   (CL:LOOP WHILE (NEXT? ITER-000) DO (CL:SETQ C (PLI::%PL-ITERATOR.VALUE ITER-000))
    (CL:WHEN (CL:NOT (CL:EQ C CHILD)) (CL:RETURN-FROM HAS-CHILD-OTHER-THAN? CL:T))))
  CL:NIL)

;;; (DEFUN HTML-DESCRIBE-SIBLINGS ...)

(CL:DEFUN HTML-DESCRIBE-SIBLINGS (TITLE HEAD RELATION STREAM RULE?)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TITLE HEAD))
  #+MCL
  (CL:CHECK-TYPE TITLE CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE HEAD CL:SIMPLE-STRING)
  (CL:LET* ((PARENTSOFSIBS NIL))
   (CL:LET* ((P NULL) (ITER-000 (PLI::GET-DIRECT-SUPERRELATIONS RELATION NULL NULL)) (COLLECT-000 NULL))
    (CL:LOOP WHILE (NEXT? ITER-000) DO (CL:SETQ P (PLI::%PL-ITERATOR.VALUE ITER-000))
     (CL:WHEN (HAS-CHILD-OTHER-THAN? P RELATION)
      (CL:IF (CL:EQ COLLECT-000 NULL)
       (CL:PROGN (CL:SETQ COLLECT-000 (CONS P NIL))
        (CL:IF (CL:EQ PARENTSOFSIBS NIL) (CL:SETQ PARENTSOFSIBS COLLECT-000)
         (ADD-CONS-TO-END-OF-CONS-LIST PARENTSOFSIBS COLLECT-000)))
       (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS P NIL)) (CL:SETQ COLLECT-000 (%%REST COLLECT-000)))))))
   (CL:SETQ PARENTSOFSIBS (SORT PARENTSOFSIBS (CL:FUNCTION OBJECT-NAME-LESS-THAN?)))
   (HTML-WRITE-HEADER-WITH-TABLE STREAM TITLE HEAD)
   (CL:IF (CL:EQ PARENTSOFSIBS NIL)
    (CL:PROGN (%%PRINT-STREAM STREAM "<I>") (%%PRINT-STREAM STREAM "None") (%%PRINT-STREAM STREAM "</I>" EOL))
    (CL:PROGN (%%PRINT-STREAM STREAM "<DL>")
     (CL:LET* ((P NULL) (ITER-001 PARENTSOFSIBS))
      (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO (CL:SETQ P (%%VALUE ITER-001))
       (HTML-DESCRIBE-ONE-PARENT-WITH-SIBLINGS P RELATION STREAM) (CL:SETQ ITER-001 (%%REST ITER-001))))
     (%%PRINT-STREAM STREAM "</DL>" EOL)))
   (CL:WHEN RULE? (%%PRINT-STREAM STREAM "<HR SIZE=2>" EOL)) NULL))

;;; (DEFUN HTML-DESCRIBE-RULES ...)

(CL:DEFUN HTML-DESCRIBE-RULES (TITLE HEAD RELATION STREAM RULE?)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TITLE HEAD))
  #+MCL
  (CL:CHECK-TYPE TITLE CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE HEAD CL:SIMPLE-STRING)
  (CL:LET* ((RULES (CONSIFY (PLI::GET-RULES RELATION NULL NULL))) (RULE-WRITTEN? CL:NIL))
   (HTML-WRITE-HEADER-WITH-TABLE STREAM TITLE HEAD)
   (CL:PROGN (%%PRINT-STREAM STREAM "<PRE>") (CL:SETQ RULES (SORT RULES (CL:FUNCTION PROPOSITION-LESS-THAN?)))
    (CL:LET* ((RULE NULL) (ITER-000 RULES))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO (CL:SETQ RULE (%%VALUE ITER-000))
      (CL:WHEN
       (CL:AND (CL:NOT (DELETED? RULE))
        (CL:IF *REVERSEPOLARITY?* (FALSE? RULE) (CL:OR (TRUE? RULE) (FUNCTION-WITH-DEFINED-VALUE? RULE))))
       (CL:WHEN (CL:NOT (SIMPLE-SUBRELATION-PROPOSITION? RULE)) (PPRINT-OBJECT RULE STREAM)
        (%%PRINT-STREAM STREAM EOL EOL) (CL:SETQ RULE-WRITTEN? CL:T)))
      (CL:SETQ ITER-000 (%%REST ITER-000))))
    (%%PRINT-STREAM STREAM "</PRE>" EOL))
   (CL:WHEN (CL:NOT RULE-WRITTEN?)
    (CL:PROGN (%%PRINT-STREAM STREAM "<I>") (%%PRINT-STREAM STREAM "None") (%%PRINT-STREAM STREAM "</I>" EOL)))
   (CL:WHEN RULE? (%%PRINT-STREAM STREAM "<HR SIZE=2>" EOL)) NULL))

;;; (DEFUN HTML-DESCRIBE-FACTS ...)

(CL:DEFUN HTML-DESCRIBE-FACTS (TITLE HEAD RELATION STREAM FILTER-RULES? RULE?)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TITLE HEAD))
  #+MCL
  (CL:CHECK-TYPE TITLE CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE HEAD CL:SIMPLE-STRING)
  (CL:LET* ((FACTS (CONSIFY (PLI::GET-PROPOSITIONS-OF RELATION NULL NULL))) (FACT-WRITTEN? CL:NIL))
   (HTML-WRITE-HEADER-WITH-TABLE STREAM TITLE HEAD)
   (CL:PROGN (%%PRINT-STREAM STREAM "<PRE>") (CL:SETQ FACTS (SORT FACTS (CL:FUNCTION PROPOSITION-LESS-THAN?)))
    (CL:LET* ((FACT NULL) (ITER-000 FACTS))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO (CL:SETQ FACT (%%VALUE ITER-000))
      (CL:WHEN
       (CL:AND (CL:NOT (DELETED? FACT))
        (CL:IF *REVERSEPOLARITY?* (FALSE? FACT) (CL:OR (TRUE? FACT) (FUNCTION-WITH-DEFINED-VALUE? FACT))))
       (CL:WHEN (CL:NOT (CLASS? (%PROPOSITION.OPERATOR FACT)))
        (CL:WHEN (CL:NOT (CL:EQ (%PROPOSITION.KIND FACT) KWD-HTML-DESCRIBE-OBJECT-EQUIVALENT))
         (CL:WHEN (CL:NOT (CL:AND FILTER-RULES? (CL:EQ (%PROPOSITION.KIND FACT) KWD-HTML-DESCRIBE-OBJECT-IMPLIES)))
          (CL:SETQ FACT-WRITTEN? CL:T) (PPRINT-OBJECT FACT STREAM) (%%PRINT-STREAM STREAM EOL EOL)))))
      (CL:SETQ ITER-000 (%%REST ITER-000))))
    (%%PRINT-STREAM STREAM "</PRE>" EOL))
   (CL:WHEN (CL:NOT FACT-WRITTEN?)
    (CL:PROGN (%%PRINT-STREAM STREAM "<I>") (%%PRINT-STREAM STREAM "None") (%%PRINT-STREAM STREAM "</I>" EOL)))
   (CL:WHEN RULE? (%%PRINT-STREAM STREAM "<HR SIZE=2>" EOL)) NULL))

;;; (DEFUN HTML-DESCRIBE-INSTANCES ...)

(CL:DEFUN HTML-DESCRIBE-INSTANCES (TITLE HEAD RELATION STREAM RULE?)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TITLE HEAD))
  #+MCL
  (CL:CHECK-TYPE TITLE CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE HEAD CL:SIMPLE-STRING)
  (CL:LET*
   ((INSTANCES (CONSIFY (PLI::GET-CONCEPT-INSTANCES RELATION NULL NULL)))
    (ASSERTEDINSTANCES
     (LEVELLIZED-ALL-CLASS-INSTANCES ASSERTION-INFERENCE (%NAMED-DESCRIPTION.SURROGATE-VALUE-INVERSE RELATION)))
    (DIRECTINSTANCES (CONSIFY (PLI::GET-DIRECT-CONCEPT-INSTANCES RELATION NULL NULL)))
    (N-INSTANCES (LENGTH INSTANCES)))
   (CL:DECLARE (CL:TYPE CL:FIXNUM N-INSTANCES)) (HTML-WRITE-HEADER-WITH-TABLE STREAM TITLE HEAD)
   (CL:IF (CL:EQ INSTANCES NIL)
    (CL:PROGN (%%PRINT-STREAM STREAM "<I>") (%%PRINT-STREAM STREAM "None") (%%PRINT-STREAM STREAM "</I>" EOL))
    (CL:PROGN
     (%%PRINT-STREAM STREAM N-INSTANCES (CL:IF (CL:= N-INSTANCES 1) " instance; " " instances; ")
      (LENGTH DIRECTINSTANCES) " direct (")
     (HTML-EMIT-IMAGE STREAM "icons/small-circ-filled.gif" "x" 11 11 "BOTTOM" 0) (%%PRINT-STREAM STREAM ")" EOL)
     (CL:PROGN (%%PRINT-STREAM STREAM "<DL>") (CL:SETQ INSTANCES (SORT INSTANCES (CL:FUNCTION LOGIC-FORM-LESS?)))
      (CL:LET* ((INSTANCE NULL) (ITER-000 INSTANCES))
       (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO (CL:SETQ INSTANCE (%%VALUE ITER-000))
        (CL:PROGN (%%PRINT-STREAM STREAM "<DT>")
         (HTML-EMIT-IMAGE STREAM
          (CL:IF (MEMBER? DIRECTINSTANCES INSTANCE) "icons/small-circ-filled.gif" "icons/small-circ-open.gif")
          (CL:IF (MEMBER? DIRECTINSTANCES INSTANCE) "x" "o") 11 11 "BOTTOM" 0)
         (%%PRINT-STREAM STREAM "&nbsp;")
         (CL:IF (MEMBER? ASSERTEDINSTANCES INSTANCE) (PPRINT-OBJECT INSTANCE STREAM)
          (CL:PROGN (%%PRINT-STREAM STREAM "<I>") (PPRINT-OBJECT INSTANCE STREAM) (%%PRINT-STREAM STREAM "</I>")))
         (%%PRINT-STREAM STREAM "</DT>" EOL))
        (CL:SETQ ITER-000 (%%REST ITER-000))))
      (%%PRINT-STREAM STREAM "</DL>" EOL))))
   (CL:WHEN RULE? (%%PRINT-STREAM STREAM "<HR SIZE=2>" EOL)) NULL))

;;; (DEFUN HTML-DESCRIBE-TUPLES ...)

(CL:DEFUN HTML-DESCRIBE-TUPLES (TITLE HEAD RELATION STREAM RULE?)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TITLE HEAD))
  #+MCL
  (CL:CHECK-TYPE TITLE CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE HEAD CL:SIMPLE-STRING)
  (CL:LET* ((TUPLES (CONSIFY (PLI::GET-RELATION-EXTENSION RELATION NULL NULL))))
   (HTML-WRITE-HEADER-WITH-TABLE STREAM TITLE HEAD)
   (CL:IF (CL:EQ TUPLES NIL)
    (CL:PROGN (%%PRINT-STREAM STREAM "<I>") (%%PRINT-STREAM STREAM "None") (%%PRINT-STREAM STREAM "</I>" EOL))
    (CL:PROGN (%%PRINT-STREAM STREAM "<PRE>") (CL:SETQ TUPLES (SORT TUPLES (CL:FUNCTION PROPOSITION-LESS-THAN?)))
     (CL:LET* ((TUPLE NULL) (ITER-000 TUPLES))
      (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO (CL:SETQ TUPLE (%%VALUE ITER-000)) (PPRINT-OBJECT TUPLE STREAM)
       (%%PRINT-STREAM STREAM EOL EOL) (CL:SETQ ITER-000 (%%REST ITER-000))))
     (%%PRINT-STREAM STREAM "</PRE>" EOL)))
   (CL:WHEN RULE? (%%PRINT-STREAM STREAM "<HR SIZE=2>" EOL)) NULL))

;;; (DEFUN HTML-DESCRIBE-NAMED-DESCRIPTION ...)

(CL:DEFUN HTML-DESCRIBE-NAMED-DESCRIPTION (CONCEPT STREAM)
  (CL:WHEN (CL:EQ CONCEPT NULL) (CL:RETURN-FROM HTML-DESCRIBE-NAMED-DESCRIPTION))
  (CL:LET*
   ((NAMESTRING (OBJECT-NAME-STRING CONCEPT))
    (DESCRIPTIONTERM
     (LOOKUP-TERM (CL:IF (CLASS? CONCEPT) KWD-HTML-DESCRIBE-OBJECT-CONCEPT KWD-HTML-DESCRIBE-OBJECT-RELATION) CL:NIL
      CL:T)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING NAMESTRING DESCRIPTIONTERM))
   (WITH-PROCESS-LOCK *POWERLOOM-LOCK*
    (CL:LET* ((*CONTEXT* (GET-QUERY-CONTEXT)) (*MODULE* (%CONTEXT.BASE-MODULE *CONTEXT*)))
     (CL:DECLARE (CL:SPECIAL *CONTEXT* *MODULE*)) (ELABORATE-INSTANCE CONCEPT)))
   (HTML-DESCRIBE-LOCATION CONCEPT STREAM) (HTML-DESCRIBE-CONTEXT-VIEW CONCEPT STREAM)
   (HTML-DISPLAY-SYNONYMS CONCEPT STREAM) (HTML-DISPLAY-IMAGES CONCEPT STREAM)
   (HTML-DISPLAY-DOCUMENTATION CONCEPT STREAM)
   (HTML-DESCRIBE-EQUIVALENTS (STRING-CONCATENATE "Equivalent " DESCRIPTIONTERM) NAMESTRING CONCEPT STREAM CL:T)
   (CL:WHEN (VIZ-SERVER-AVAILABLE?)
    (HTML-WRITE-HREF-IN-DETAIL STREAM "Graph" "graph" "relation" (NAME *MODULE*)
     (VISIBLE-NAME (OBJECT-NAME CONCEPT) CL:T) (CONCATENATE "Graph " NAMESTRING) CL:NIL)
    (%%PRINT-STREAM STREAM "<HR SIZE=2>" EOL))
   (HTML-DESCRIBE-TYPES "Types" NAMESTRING CONCEPT STREAM CL:T)
   (HTML-DESCRIBE-SUBS (STRING-CONCATENATE "Sub" DESCRIPTIONTERM) NAMESTRING CONCEPT STREAM CL:T)
   (HTML-DESCRIBE-SUPERS (STRING-CONCATENATE "Super" DESCRIPTIONTERM) NAMESTRING CONCEPT STREAM CL:T)
   (HTML-DESCRIBE-SIBLINGS "Siblings" NAMESTRING CONCEPT STREAM CL:T)
   (HTML-DESCRIBE-FACTS "Facts" NAMESTRING CONCEPT STREAM CL:T CL:T)
   (HTML-DESCRIBE-RULES "Rules" NAMESTRING CONCEPT STREAM CL:T)
   (CL:LET* ((*CONTEXT* (GET-QUERY-CONTEXT)) (*MODULE* (%CONTEXT.BASE-MODULE *CONTEXT*)))
    (CL:DECLARE (CL:SPECIAL *CONTEXT* *MODULE*))
    (CL:IF (CL:= (PLI::GET-ARITY CONCEPT) 1) (HTML-DESCRIBE-INSTANCES "Instances" NAMESTRING CONCEPT STREAM CL:T)
     (HTML-DESCRIBE-TUPLES "Tuples" NAMESTRING CONCEPT STREAM CL:T)))
   NULL))

;;; (DEFUN HTML-DESCRIBE-INSTANCE ...)

(CL:DEFUN HTML-DESCRIBE-INSTANCE (INSTANCE STREAM)
  (CL:WHEN (CL:EQ INSTANCE NULL) (CL:RETURN-FROM HTML-DESCRIBE-INSTANCE))
  (CL:LET* ((NAMESTRING (GET-HTML-OBJECT-HANDLE INSTANCE))) (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING NAMESTRING))
   (WITH-PROCESS-LOCK *POWERLOOM-LOCK*
    (CL:LET* ((*CONTEXT* (GET-QUERY-CONTEXT)) (*MODULE* (%CONTEXT.BASE-MODULE *CONTEXT*)))
     (CL:DECLARE (CL:SPECIAL *CONTEXT* *MODULE*)) (ELABORATE-INSTANCE INSTANCE)))
   (HTML-DESCRIBE-LOCATION INSTANCE STREAM) (HTML-DESCRIBE-CONTEXT-VIEW INSTANCE STREAM)
   (HTML-DISPLAY-SYNONYMS INSTANCE STREAM) (HTML-DISPLAY-IMAGES INSTANCE STREAM)
   (HTML-DISPLAY-DOCUMENTATION INSTANCE STREAM) (HTML-DESCRIBE-TYPES "Types" NAMESTRING INSTANCE STREAM CL:T)
   (CL:LET* ((*CONTEXT* (GET-QUERY-CONTEXT)) (*MODULE* (%CONTEXT.BASE-MODULE *CONTEXT*)))
    (CL:DECLARE (CL:SPECIAL *CONTEXT* *MODULE*)) (HTML-DESCRIBE-FACTS "Facts" NAMESTRING INSTANCE STREAM CL:NIL CL:T))
   NULL))

;;; (DEFUN (CHILD-MODULES (CONS OF MODULE)) ...)

(CL:DEFUN CHILD-MODULES (MODULE)
  (CL:LET* ((DIRECTSUBMODULES NIL))
   (CL:LET* ((CHILD NULL) (ITER-000 (%LIST.THE-CONS-LIST (%MODULE.CHILD-CONTEXTS MODULE))) (COLLECT-000 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO (CL:SETQ CHILD (%%VALUE ITER-000))
     (CL:WHEN (ISA? CHILD SGT-HTML-DESCRIBE-OBJECT-STELLA-MODULE)
      (CL:IF (CL:EQ COLLECT-000 NULL)
       (CL:PROGN (CL:SETQ COLLECT-000 (CONS CHILD NIL))
        (CL:IF (CL:EQ DIRECTSUBMODULES NIL) (CL:SETQ DIRECTSUBMODULES COLLECT-000)
         (ADD-CONS-TO-END-OF-CONS-LIST DIRECTSUBMODULES COLLECT-000)))
       (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS CHILD NIL)) (CL:SETQ COLLECT-000 (%%REST COLLECT-000)))))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   DIRECTSUBMODULES))

;;; (DEFUN HTML-DESCRIBE-ONE-MODULE-SUB-LEVEL ...)

(CL:DEFUN HTML-DESCRIBE-ONE-MODULE-SUB-LEVEL (MODULE DEPTH CUTOFF STREAM)
  (CL:DECLARE (CL:TYPE CL:FIXNUM DEPTH CUTOFF))
  #+MCL
  (CL:CHECK-TYPE DEPTH CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE CUTOFF CL:FIXNUM)
  (CL:LET* ((DIRECTSUBMODULES (CHILD-MODULES MODULE)))
   (CL:WHEN (CL:EQ DIRECTSUBMODULES NIL) (CL:RETURN-FROM HTML-DESCRIBE-ONE-MODULE-SUB-LEVEL))
   (CL:SETQ DIRECTSUBMODULES (SORT DIRECTSUBMODULES (CL:FUNCTION MODULE-NAME-LESS-THAN?)))
   (CL:PROGN (%%PRINT-STREAM STREAM "<DL STYLE=' margin-top: 0; margin-bottom:0'>")
    (CL:LET* ((SUB NULL) (ITER-000 DIRECTSUBMODULES))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO (CL:SETQ SUB (%%VALUE ITER-000))
      (CL:PROGN (%%PRINT-STREAM STREAM "<DT STYLE='margin-top: 0'>") (HTML-WRITE-HREF STREAM "show" "context" SUB)
       (CL:WHEN (CL:AND (CL:>= DEPTH CUTOFF) (CL:NOT (CL:EQ (CHILD-MODULES SUB) NIL)))
        (%%PRINT-STREAM STREAM "    +..."))
       (%%PRINT-STREAM STREAM "</DT>" EOL))
      (CL:WHEN (CL:< DEPTH CUTOFF)
       (CL:PROGN (%%PRINT-STREAM STREAM "<DD>") (HTML-DESCRIBE-ONE-MODULE-SUB-LEVEL SUB (CL:1+ DEPTH) CUTOFF STREAM)
        (%%PRINT-STREAM STREAM "</DD>" EOL)))
      (CL:SETQ ITER-000 (%%REST ITER-000))))
    (%%PRINT-STREAM STREAM "</DL>" EOL))
   NULL))

;;; (DEFUN HTML-DESCRIBE-MODULE-SUBS ...)

(CL:DEFUN HTML-DESCRIBE-MODULE-SUBS (TITLE HEAD MODULE STREAM RULE?)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TITLE HEAD))
  #+MCL
  (CL:CHECK-TYPE TITLE CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE HEAD CL:SIMPLE-STRING)
  (CL:LET* ((HEURISTICDEPTH 4) (SUBLENGTH (LENGTH (CHILD-MODULES MODULE))))
   (CL:DECLARE (CL:TYPE CL:FIXNUM HEURISTICDEPTH SUBLENGTH))
   (CL:WHEN (CL:> SUBLENGTH 30) (CL:SETQ HEURISTICDEPTH (CL:1- HEURISTICDEPTH)))
   (HTML-WRITE-HEADER-WITH-TABLE STREAM TITLE HEAD)
   (CL:IF (CL:= SUBLENGTH 0)
    (CL:PROGN (%%PRINT-STREAM STREAM "<I>") (%%PRINT-STREAM STREAM "None") (%%PRINT-STREAM STREAM "</I>" EOL))
    (HTML-DESCRIBE-ONE-MODULE-SUB-LEVEL MODULE 0 HEURISTICDEPTH STREAM))
   (CL:WHEN RULE? (%%PRINT-STREAM STREAM "<HR SIZE=2>" EOL)) NULL))

;;; (DEFUN HTML-DESCRIBE-ONE-MODULE-SUPER-LEVEL ...)

(CL:DEFUN HTML-DESCRIBE-ONE-MODULE-SUPER-LEVEL (MODULE ALREADYOUTPUT STREAM)
  (CL:LET*
   ((PARENTS
     (SORT (COPY-CONS-LIST (%LIST.THE-CONS-LIST (%MODULE.PARENT-MODULES MODULE)))
      (CL:FUNCTION MODULE-NAME-LESS-THAN?)))
    (ALREADYOUTPUT? CL:NIL))
   (CL:WHEN (CL:EQ PARENTS NIL) (CL:RETURN-FROM HTML-DESCRIBE-ONE-MODULE-SUPER-LEVEL))
   (CL:PROGN (%%PRINT-STREAM STREAM "<DL STYLE=' margin-top: 0; margin-bottom:0'>")
    (CL:LET* ((PARENT NULL) (ITER-000 PARENTS))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO (CL:SETQ PARENT (%%VALUE ITER-000))
      (CL:SETQ ALREADYOUTPUT? (CL:NOT (CL:EQ (LOOKUP ALREADYOUTPUT PARENT) NULL)))
      (CL:PROGN (%%PRINT-STREAM STREAM "<DT STYLE='margin-top: 0'>") (HTML-WRITE-HREF STREAM "show" "context" PARENT)
       (CL:WHEN ALREADYOUTPUT? (%%PRINT-STREAM STREAM "...")) (%%PRINT-STREAM STREAM "</DT>" EOL))
      (CL:WHEN (CL:NOT ALREADYOUTPUT?) (INSERT-AT ALREADYOUTPUT PARENT TRUE-WRAPPER)
       (CL:PROGN (%%PRINT-STREAM STREAM "<DD>") (HTML-DESCRIBE-ONE-MODULE-SUPER-LEVEL PARENT ALREADYOUTPUT STREAM)
        (%%PRINT-STREAM STREAM "</DD>" EOL)))
      (CL:SETQ ITER-000 (%%REST ITER-000))))
    (%%PRINT-STREAM STREAM "</DL>" EOL)))
  NULL)

;;; (DEFUN HTML-DESCRIBE-MODULE-SUPERS ...)

(CL:DEFUN HTML-DESCRIBE-MODULE-SUPERS (TITLE HEAD MODULE STREAM RULE?)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TITLE HEAD))
  #+MCL
  (CL:CHECK-TYPE TITLE CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE HEAD CL:SIMPLE-STRING)
  (CL:LET* ((ALREADYOUTPUT (NEW-HASH-TABLE))) (HTML-WRITE-HEADER-WITH-TABLE STREAM TITLE HEAD)
   (CL:IF (CL:EQ (PARENT-MODULE MODULE) NULL)
    (CL:PROGN (%%PRINT-STREAM STREAM "<I>") (%%PRINT-STREAM STREAM "None") (%%PRINT-STREAM STREAM "</I>" EOL))
    (HTML-DESCRIBE-ONE-MODULE-SUPER-LEVEL MODULE ALREADYOUTPUT STREAM))
   (CL:WHEN RULE? (%%PRINT-STREAM STREAM "<HR SIZE=2>" EOL)) NULL))

;;; (DEFUN HTML-DISPLAY-MODULE-STATS ...)

(CL:DEFUN HTML-DISPLAY-MODULE-STATS (TITLE HEAD MODULE STREAM RULE?)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TITLE HEAD))
  #+MCL
  (CL:CHECK-TYPE TITLE CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE HEAD CL:SIMPLE-STRING)
  (CL:LET*
   ((NCONCEPTS 0) (NRELATIONS 0) (NINSTANCES 0) (ALLCLASSES (NEW-LIST)) (TOPLEVELCLASSES (NEW-LIST)) (ADD? CL:NIL))
   (CL:DECLARE (CL:TYPE CL:FIXNUM NCONCEPTS NRELATIONS NINSTANCES))
   (CL:LET* ((OBJECT NULL) (ITER-000 (ALL-NAMED-TERMS MODULE CL:T)))
    (CL:LOOP WHILE (NEXT? ITER-000) DO (CL:SETQ OBJECT (%ITERATOR.VALUE ITER-000))
     (CL:COND
      ((ISA? OBJECT SGT-HTML-DESCRIBE-OBJECT-LOGIC-NAMED-DESCRIPTION)
       (CL:COND ((CLASS? OBJECT) (CL:SETQ NCONCEPTS (CL:1+ NCONCEPTS)) (PUSH ALLCLASSES OBJECT))
        ((RELATION? OBJECT) (CL:SETQ NRELATIONS (CL:1+ NRELATIONS))) (CL:T (CL:SETQ NINSTANCES (CL:1+ NINSTANCES)))))
      ((STELLA-CLASS? OBJECT) (CL:SETQ NCONCEPTS (CL:1+ NCONCEPTS))) (CL:T (CL:SETQ NINSTANCES (CL:1+ NINSTANCES))))))
   (CL:LET* ((CLASS NULL) (ITER-001 (%LIST.THE-CONS-LIST ALLCLASSES)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO (CL:SETQ CLASS (%%VALUE ITER-001)) (CL:SETQ ADD? CL:T)
     (CL:LET* ((PARENT NULL) (ITER-002 (ALL-DIRECT-SUPERRELATIONS CLASS CL:T)))
      (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-002 NIL)) DO (CL:SETQ PARENT (%%VALUE ITER-002))
       (CL:WHEN (MEMBER? ALLCLASSES PARENT) (CL:SETQ ADD? CL:NIL) (CL:RETURN)) (CL:SETQ ITER-002 (%%REST ITER-002))))
     (CL:WHEN ADD? (PUSH TOPLEVELCLASSES CLASS)) (CL:SETQ ITER-001 (%%REST ITER-001))))
   (HTML-WRITE-HEADER-WITH-TABLE STREAM TITLE HEAD)
   (%%PRINT-STREAM STREAM NCONCEPTS " "
    (LOOKUP-TERM KWD-HTML-DESCRIBE-OBJECT-CONCEPT CL:NIL (CL:NOT (CL:= NCONCEPTS 1))) "; " NRELATIONS " "
    (LOOKUP-TERM KWD-HTML-DESCRIBE-OBJECT-RELATION CL:NIL (CL:NOT (CL:= NRELATIONS 1))) "; " NINSTANCES " "
    (LOOKUP-TERM KWD-HTML-DESCRIBE-OBJECT-INSTANCE CL:NIL (CL:NOT (CL:= NINSTANCES 1))) ";  TOTAL of objects = "
    (CL:+ NCONCEPTS NRELATIONS NINSTANCES))
   (CL:PROGN (%%PRINT-STREAM STREAM "<P>")
    (CL:PROGN (%%PRINT-STREAM STREAM "<B>") (%%PRINT-STREAM STREAM "Top Level Classes:")
     (%%PRINT-STREAM STREAM "</B>"))
    (%%PRINT-STREAM STREAM "<BR>" EOL)
    (CL:IF (EMPTY? TOPLEVELCLASSES)
     (CL:PROGN (%%PRINT-STREAM STREAM "<I>") (%%PRINT-STREAM STREAM "None") (%%PRINT-STREAM STREAM "</I>" EOL))
     (CL:PROGN (%%PRINT-STREAM STREAM "<DL>")
      (CL:SETQ TOPLEVELCLASSES (SORT TOPLEVELCLASSES (CL:FUNCTION OBJECT-NAME-LESS-THAN?)))
      (CL:LET* ((CLASS NULL) (ITER-003 (%LIST.THE-CONS-LIST TOPLEVELCLASSES)))
       (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-003 NIL)) DO (CL:SETQ CLASS (%%VALUE ITER-003))
        (CL:PROGN (%%PRINT-STREAM STREAM "<DT STYLE='margin-top: 0'>") (HTML-WRITE-HREF STREAM "show" "concept" CLASS)
         (%%PRINT-STREAM STREAM "</DT>" EOL))
        (CL:SETQ ITER-003 (%%REST ITER-003))))
      (%%PRINT-STREAM STREAM "</DL>")))
    (%%PRINT-STREAM STREAM "</P>" EOL))
   (CL:WHEN RULE? (%%PRINT-STREAM STREAM "<HR SIZE=2>" EOL)) NULL))

;;; (DEFUN HTML-DESCRIBE-MODULE ...)

(CL:DEFUN HTML-DESCRIBE-MODULE (MODULE STREAM)
  (CL:WHEN (CL:EQ MODULE NULL) (CL:RETURN-FROM HTML-DESCRIBE-MODULE))
  (CL:LET* ((NAMESTRING (NAME MODULE))) (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING NAMESTRING))
   (CL:WHEN
    (CL:AND (VIZ-SERVER-AVAILABLE?)
     (CL:NOT
      (%BOOLEAN-WRAPPER.WRAPPER-VALUE
       (DYNAMIC-SLOT-VALUE (%MODULE.DYNAMIC-SLOTS MODULE) SYM-HTML-DESCRIBE-OBJECT-STELLA-CODE-ONLY? FALSE-WRAPPER)))
     (CL:NOT
      (%BOOLEAN-WRAPPER.WRAPPER-VALUE
       (DYNAMIC-SLOT-VALUE (%MODULE.DYNAMIC-SLOTS MODULE) SYM-HTML-DESCRIBE-OBJECT-STELLA-NAMESPACE? FALSE-WRAPPER))))
    (HTML-WRITE-HREF-IN-DETAIL STREAM "Graph" "graph" "context" (NAME MODULE) (NAME MODULE)
     (CONCATENATE "Graph " (NAME MODULE)) CL:NIL))
   (HTML-DISPLAY-IMAGES MODULE STREAM) (HTML-DISPLAY-DOCUMENTATION MODULE STREAM)
   (HTML-DESCRIBE-MODULE-SUBS "Child Modules" NAMESTRING MODULE STREAM CL:T)
   (HTML-DESCRIBE-MODULE-SUPERS "Parent Modules" NAMESTRING MODULE STREAM CL:T)
   (HTML-DISPLAY-MODULE-STATS "Contents" NAMESTRING MODULE STREAM CL:T) NULL))

;;; (DEFUN HTML-UNKNOWN-MODULE-RESPONSE ...)

(CL:DEFUN HTML-UNKNOWN-MODULE-RESPONSE (ITEMTYPE ITEMNAME MODULENAME STREAM)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING ITEMNAME MODULENAME))
  #+MCL
  (CL:CHECK-TYPE ITEMNAME CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE MODULENAME CL:SIMPLE-STRING)
  (CL:PROGN (%%PRINT-STREAM STREAM "<HTML>")
   (CL:PROGN (%%PRINT-STREAM STREAM "<HEAD>")
    (CL:PROGN (%%PRINT-STREAM STREAM "<TITLE>") (%%PRINT-STREAM STREAM (LOOKUP-TERM ITEMTYPE CL:T CL:NIL) " ")
     (WRITE-HTML-QUOTING-SPECIAL-CHARACTERS STREAM ITEMNAME) (%%PRINT-STREAM STREAM "</TITLE>" EOL))
    (%%PRINT-STREAM STREAM "</HEAD>" EOL))
   (CL:LET* ((TAG-001 (CONCATENATE "BODY BGCOLOR='#" *ERROR-BACKGROUND-COLOR* "'")))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TAG-001)) (%%PRINT-STREAM STREAM "<" TAG-001 ">")
    (CL:PROGN (%%PRINT-STREAM STREAM "<H1>") (%%PRINT-STREAM STREAM (LOOKUP-TERM ITEMTYPE CL:T CL:NIL) " ")
     (WRITE-HTML-QUOTING-SPECIAL-CHARACTERS STREAM ITEMNAME) (%%PRINT-STREAM STREAM "</H1>" EOL))
    (%%PRINT-STREAM STREAM "<HR SIZE=4>" EOL)
    (CL:PROGN (%%PRINT-STREAM STREAM "<STRONG>")
     (%%PRINT-STREAM STREAM "SORRY: Unknown " (LOOKUP-TERM KWD-HTML-DESCRIBE-OBJECT-CONTEXT CL:NIL CL:NIL) " `")
     (WRITE-HTML-QUOTING-SPECIAL-CHARACTERS STREAM MODULENAME) (%%PRINT-STREAM STREAM "'.") (HTML-LINE-BREAK STREAM)
     (%%PRINT-STREAM STREAM "<HR SIZE=2>" EOL) (WRITE-POWERLOOM-TRAILER STREAM)
     (%%PRINT-STREAM STREAM "</STRONG>" EOL))
    (%%PRINT-STREAM STREAM "</" (SUBSEQUENCE TAG-001 0 (POSITION TAG-001 #\  0)) ">" EOL))
   (%%PRINT-STREAM STREAM "</HTML>" EOL)))

;;; (DEFUN HTML-UNKNOWN-OBJECT-RESPONSE ...)

(CL:DEFUN HTML-UNKNOWN-OBJECT-RESPONSE (ITEMTYPE ITEMNAME STREAM)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING ITEMNAME))
  #+MCL
  (CL:CHECK-TYPE ITEMNAME CL:SIMPLE-STRING)
  (CL:PROGN (%%PRINT-STREAM STREAM "<HTML>")
   (CL:PROGN (%%PRINT-STREAM STREAM "<HEAD>")
    (CL:PROGN (%%PRINT-STREAM STREAM "<TITLE>") (%%PRINT-STREAM STREAM (LOOKUP-TERM ITEMTYPE CL:T CL:NIL) " ")
     (WRITE-HTML-QUOTING-SPECIAL-CHARACTERS STREAM ITEMNAME) (%%PRINT-STREAM STREAM "</TITLE>"))
    (%%PRINT-STREAM STREAM EOL) (%%PRINT-STREAM STREAM "</HEAD>"))
   (%%PRINT-STREAM STREAM EOL)
   (CL:LET* ((TAG-002 (CONCATENATE "BODY BGCOLOR='#" *ERROR-BACKGROUND-COLOR* "'")))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TAG-002)) (%%PRINT-STREAM STREAM "<" TAG-002 ">")
    (CL:PROGN (%%PRINT-STREAM STREAM "<H1>") (%%PRINT-STREAM STREAM (LOOKUP-TERM ITEMTYPE CL:T CL:NIL) " ")
     (WRITE-HTML-QUOTING-SPECIAL-CHARACTERS STREAM ITEMNAME) (%%PRINT-STREAM STREAM "</H1>" EOL))
    (%%PRINT-STREAM STREAM "<HR SIZE=4>" EOL)
    (CL:PROGN (%%PRINT-STREAM STREAM "<STRONG>")
     (%%PRINT-STREAM STREAM "SORRY: Unknown " (LOOKUP-TERM ITEMTYPE CL:NIL CL:NIL) " `" ITEMNAME "' in "
      (LOOKUP-TERM KWD-HTML-DESCRIBE-OBJECT-CONTEXT CL:NIL CL:NIL) " ")
     (WRITE-HTML-QUOTING-SPECIAL-CHARACTERS STREAM (NAME *MODULE*)) (%%PRINT-STREAM STREAM ".")
     (%%PRINT-STREAM STREAM "</STRONG>"))
    (HTML-LINE-BREAK STREAM) (%%PRINT-STREAM STREAM "<HR SIZE=2>" EOL) (WRITE-POWERLOOM-TRAILER STREAM)
    (%%PRINT-STREAM STREAM "</" (SUBSEQUENCE TAG-002 0 (POSITION TAG-002 #\  0)) ">" EOL))
   (%%PRINT-STREAM STREAM "</HTML>")))

;;; (DEFUN HTML-WRITE-RELATION-RESPONSE-PAGE ...)

(CL:DEFUN HTML-WRITE-RELATION-RESPONSE-PAGE (RELATION STREAM)
  (CL:LET* ((OBJECTNAME (GET-HTML-OBJECT-HANDLE RELATION))) (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING OBJECTNAME))
   (CL:PROGN (%%PRINT-STREAM STREAM "<HTML>")
    (CL:PROGN (%%PRINT-STREAM STREAM "<HEAD>") (%%PRINT-STREAM STREAM "<BASE TARGET='content'>" EOL)
     (CL:PROGN (%%PRINT-STREAM STREAM "<TITLE>")
      (%%PRINT-STREAM STREAM
       (LOOKUP-TERM (CL:IF (CLASS? RELATION) KWD-HTML-DESCRIBE-OBJECT-CONCEPT KWD-HTML-DESCRIBE-OBJECT-RELATION) CL:T
        CL:NIL)
       " ")
      (WRITE-HTML-QUOTING-SPECIAL-CHARACTERS STREAM OBJECTNAME) (%%PRINT-STREAM STREAM "</TITLE>" EOL))
     (%%PRINT-STREAM STREAM "</HEAD>" EOL))
    (CL:LET* ((TAG-003 (CONCATENATE "BODY BGCOLOR='#" *STANDARD-BACKGROUND-COLOR* "'")))
     (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TAG-003)) (%%PRINT-STREAM STREAM "<" TAG-003 ">")
     (CL:PROGN (%%PRINT-STREAM STREAM "<H1>")
      (%%PRINT-STREAM STREAM
       (LOOKUP-TERM (CL:IF (CLASS? RELATION) KWD-HTML-DESCRIBE-OBJECT-CONCEPT KWD-HTML-DESCRIBE-OBJECT-RELATION) CL:T
        CL:NIL)
       " ")
      (WRITE-HTML-QUOTING-SPECIAL-CHARACTERS STREAM OBJECTNAME) (%%PRINT-STREAM STREAM "</H1>" EOL))
     (%%PRINT-STREAM STREAM "<HR SIZE=4>" EOL) (HTML-DESCRIBE-NAMED-DESCRIPTION RELATION STREAM)
     (WRITE-POWERLOOM-TRAILER STREAM)
     (%%PRINT-STREAM STREAM "</" (SUBSEQUENCE TAG-003 0 (POSITION TAG-003 #\  0)) ">" EOL))
    (%%PRINT-STREAM STREAM "</HTML>" EOL))))

;;; (DEFUN HTML-WRITE-INSTANCE-RESPONSE-PAGE ...)

(CL:DEFUN HTML-WRITE-INSTANCE-RESPONSE-PAGE (INSTANCE STREAM)
  (CL:LET* ((OBJECTNAME (GET-HTML-OBJECT-HANDLE INSTANCE))) (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING OBJECTNAME))
   (CL:PROGN (%%PRINT-STREAM STREAM "<HTML>")
    (CL:PROGN (%%PRINT-STREAM STREAM "<HEAD>") (%%PRINT-STREAM STREAM "<BASE TARGET='content'>" EOL)
     (CL:PROGN (%%PRINT-STREAM STREAM "<TITLE>")
      (%%PRINT-STREAM STREAM (LOOKUP-TERM KWD-HTML-DESCRIBE-OBJECT-INSTANCE CL:T CL:NIL) " ")
      (WRITE-HTML-QUOTING-SPECIAL-CHARACTERS STREAM OBJECTNAME) (%%PRINT-STREAM STREAM "</TITLE>" EOL))
     (%%PRINT-STREAM STREAM "</HEAD>" EOL))
    (CL:LET* ((TAG-004 (CONCATENATE "BODY BGCOLOR='#" *STANDARD-BACKGROUND-COLOR* "'")))
     (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TAG-004)) (%%PRINT-STREAM STREAM "<" TAG-004 ">")
     (CL:PROGN (%%PRINT-STREAM STREAM "<H1>")
      (%%PRINT-STREAM STREAM (LOOKUP-TERM KWD-HTML-DESCRIBE-OBJECT-INSTANCE CL:T CL:NIL) " ")
      (WRITE-HTML-QUOTING-SPECIAL-CHARACTERS STREAM OBJECTNAME) (%%PRINT-STREAM STREAM "</H1>" EOL))
     (%%PRINT-STREAM STREAM "<HR SIZE=4>" EOL) (HTML-DESCRIBE-INSTANCE INSTANCE STREAM)
     (WRITE-POWERLOOM-TRAILER STREAM)
     (%%PRINT-STREAM STREAM "</" (SUBSEQUENCE TAG-004 0 (POSITION TAG-004 #\  0)) ">" EOL))
    (%%PRINT-STREAM STREAM "</HTML>" EOL))))

;;; (DEFUN HTML-WRITE-OBJECT-RESPONSE-PAGE-INTERNAL ...)

(CL:DEFUN HTML-WRITE-OBJECT-RESPONSE-PAGE-INTERNAL (OBJECT STREAM)
  (CL:LET* ((OBJECTNAME (GET-HTML-OBJECT-HANDLE OBJECT))) (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING OBJECTNAME))
   (CL:WHEN (CL:EQ OBJECTNAME STELLA::NULL-STRING) (CL:SETQ OBJECTNAME (STRINGIFY OBJECT)))
   (CL:PROGN (%%PRINT-STREAM STREAM "<HTML>")
    (CL:PROGN (%%PRINT-STREAM STREAM "<HEAD>") (%%PRINT-STREAM STREAM "<BASE TARGET='content'>" EOL)
     (CL:PROGN (%%PRINT-STREAM STREAM "<TITLE>")
      (%%PRINT-STREAM STREAM (LOOKUP-TERM KWD-HTML-DESCRIBE-OBJECT-OBJECT CL:T CL:NIL) " ")
      (WRITE-HTML-QUOTING-SPECIAL-CHARACTERS STREAM OBJECTNAME) (%%PRINT-STREAM STREAM "</TITLE>" EOL))
     (%%PRINT-STREAM STREAM "</HEAD>" EOL))
    (CL:LET* ((TAG-005 (CONCATENATE "BODY BGCOLOR='#" *STANDARD-BACKGROUND-COLOR* "'")))
     (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TAG-005)) (%%PRINT-STREAM STREAM "<" TAG-005 ">")
     (CL:PROGN (%%PRINT-STREAM STREAM "<H1>")
      (%%PRINT-STREAM STREAM (LOOKUP-TERM KWD-HTML-DESCRIBE-OBJECT-OBJECT CL:T CL:NIL) " ")
      (WRITE-HTML-QUOTING-SPECIAL-CHARACTERS STREAM OBJECTNAME) (%%PRINT-STREAM STREAM "</H1>" EOL))
     (%%PRINT-STREAM STREAM "<HR SIZE=4>" EOL) (WRITE-HTML-QUOTING-SPECIAL-CHARACTERS STREAM OBJECTNAME)
     (%%PRINT-STREAM STREAM "<BR>" EOL) (%%PRINT-STREAM STREAM "<HR SIZE=2>" EOL) (WRITE-POWERLOOM-TRAILER STREAM)
     (%%PRINT-STREAM STREAM "</" (SUBSEQUENCE TAG-005 0 (POSITION TAG-005 #\  0)) ">" EOL))
    (%%PRINT-STREAM STREAM "</HTML>" EOL))))

;;; (DEFUN HTML-WRITE-MODULE-RESPONSE-PAGE-INTERNAL ...)

(CL:DEFUN HTML-WRITE-MODULE-RESPONSE-PAGE-INTERNAL (MODULE STREAM)
  (CL:LET* ((MODULENAME (NAME MODULE))) (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MODULENAME))
   (CL:PROGN (%%PRINT-STREAM STREAM "<HTML>")
    (CL:PROGN (%%PRINT-STREAM STREAM "<HEAD>") (%%PRINT-STREAM STREAM "<BASE TARGET='content'>" EOL)
     (CL:PROGN (%%PRINT-STREAM STREAM "<TITLE>")
      (%%PRINT-STREAM STREAM (LOOKUP-TERM KWD-HTML-DESCRIBE-OBJECT-MODULE CL:T CL:NIL) " ")
      (WRITE-HTML-QUOTING-SPECIAL-CHARACTERS STREAM MODULENAME) (%%PRINT-STREAM STREAM "</TITLE>" EOL))
     (%%PRINT-STREAM STREAM "</HEAD>" EOL))
    (CL:LET* ((TAG-006 (CONCATENATE "BODY BGCOLOR='#" *MODULE-BACKGROUND-COLOR* "'")))
     (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TAG-006)) (%%PRINT-STREAM STREAM "<" TAG-006 ">")
     (CL:PROGN (%%PRINT-STREAM STREAM "<H1>")
      (%%PRINT-STREAM STREAM (LOOKUP-TERM KWD-HTML-DESCRIBE-OBJECT-CONTEXT CL:T CL:NIL) " ")
      (WRITE-HTML-QUOTING-SPECIAL-CHARACTERS STREAM MODULENAME) (%%PRINT-STREAM STREAM "</H1>" EOL))
     (%%PRINT-STREAM STREAM "<HR SIZE=4>" EOL) (HTML-DESCRIBE-MODULE MODULE STREAM) (WRITE-POWERLOOM-TRAILER STREAM)
     (%%PRINT-STREAM STREAM "</" (SUBSEQUENCE TAG-006 0 (POSITION TAG-006 #\  0)) ">" EOL))
    (%%PRINT-STREAM STREAM "</HTML>" EOL))))

;;; (DEFUN HTML-WRITE-MODULE-RESPONSE-PAGE ...)

(CL:DEFUN HTML-WRITE-MODULE-RESPONSE-PAGE (MODULENAME STREAM)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MODULENAME))
  #+MCL
  (CL:CHECK-TYPE MODULENAME CL:SIMPLE-STRING)
  (CL:LET* ((MODULE (GET-STELLA-MODULE MODULENAME CL:NIL)))
   (CL:COND ((CL:EQ MODULE NULL) (HTML-UNKNOWN-OBJECT-RESPONSE KWD-HTML-DESCRIBE-OBJECT-CONTEXT MODULENAME STREAM))
    (CL:T
     (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*)) (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
      (HTML-WRITE-MODULE-RESPONSE-PAGE-INTERNAL MODULE STREAM))))))

;;; (DEFUN HTML-WRITE-OBJECT-RESPONSE-PAGE ...)

(CL:DEFUN HTML-WRITE-OBJECT-RESPONSE-PAGE (MODULENAME OBJECTNAME STREAM)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MODULENAME OBJECTNAME))
  #+MCL
  (CL:CHECK-TYPE MODULENAME CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE OBJECTNAME CL:SIMPLE-STRING)
  (CL:LET* ((MODULE (GET-STELLA-MODULE MODULENAME CL:NIL)))
   (CL:WHEN (CL:EQ MODULE NULL)
    (HTML-UNKNOWN-MODULE-RESPONSE KWD-HTML-DESCRIBE-OBJECT-RELATION OBJECTNAME MODULENAME STREAM)
    (CL:RETURN-FROM HTML-WRITE-OBJECT-RESPONSE-PAGE))
   (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*)) (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
    (CL:LET*
     ((INSTANCE
       (CL:IF (STARTS-WITH? OBJECTNAME "(" 0) (COERCE-TO-INSTANCE (READ-S-EXPRESSION-FROM-STRING OBJECTNAME) NULL)
        (PLI::GET-OBJECT OBJECTNAME NULL NULL))))
     (CL:IF (CL:NOT (CL:EQ INSTANCE NULL))
      (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE INSTANCE)))
       (CL:COND
        ((SUBTYPE-OF? TEST-VALUE-000 SGT-HTML-DESCRIBE-OBJECT-LOGIC-NAMED-DESCRIPTION)
         (CL:PROGN (HTML-WRITE-RELATION-RESPONSE-PAGE INSTANCE STREAM)))
        ((SUBTYPE-OF? TEST-VALUE-000 SGT-HTML-DESCRIBE-OBJECT-LOGIC-LOGIC-OBJECT)
         (CL:PROGN (HTML-WRITE-INSTANCE-RESPONSE-PAGE INSTANCE STREAM)))
        (CL:T (HTML-WRITE-OBJECT-RESPONSE-PAGE-INTERNAL INSTANCE STREAM))))
      (HTML-UNKNOWN-OBJECT-RESPONSE KWD-HTML-DESCRIBE-OBJECT-OBJECT OBJECTNAME STREAM))))))

;;; (DEFUN (FIND-CANDIDATE-OBJECTS (LIST OF LOGIC-OBJECT)) ...)

(CL:DEFUN FIND-CANDIDATE-OBJECTS (OBJECTNAME OBJECTTYPE MATCHTYPE)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING OBJECTNAME OBJECTTYPE))
  #+MCL
  (CL:CHECK-TYPE OBJECTNAME CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE OBJECTTYPE CL:SIMPLE-STRING)
  (CL:LET*
   ((BARENAME STELLA::NULL-STRING) (MODULENAME STELLA::NULL-STRING) (KIND NULL) (RESULTS (NEW-LIST))
    (CANDIDATEOBJECTNAME NULL) (OBJECTMODULE NULL) (UPCASEDOBJECTNAME STELLA::NULL-STRING) (CANDIDATETERMS NULL))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING BARENAME MODULENAME UPCASEDOBJECTNAME)) (CL:SETQ KIND KIND)
   (CL:HANDLER-CASE (CL:MULTIPLE-VALUE-SETQ (BARENAME MODULENAME KIND) (PARSE-STELLA-NAME OBJECTNAME CL:NIL))
    (READ-EXCEPTION () (CL:SETQ BARENAME OBJECTNAME)))
   (CL:SETQ UPCASEDOBJECTNAME (STRING-UPCASE BARENAME)) (CL:SETQ CANDIDATETERMS (ALL-NAMED-TERMS *CONTEXT* CL:NIL))
   (CL:WHEN (CL:NOT (CL:EQ MODULENAME STELLA::NULL-STRING)) (CL:SETQ OBJECTMODULE (GET-STELLA-MODULE MODULENAME CL:T)))
   (CL:COND
    ((CL:EQ MATCHTYPE KWD-HTML-DESCRIBE-OBJECT-EXACT)
     (CL:LET* ((OBJ NULL) (ITER-000 CANDIDATETERMS))
      (CL:LOOP WHILE (NEXT? ITER-000) DO (CL:SETQ OBJ (%ITERATOR.VALUE ITER-000))
       (CL:TAGBODY
        (CL:WHEN (ISA? OBJ SGT-HTML-DESCRIBE-OBJECT-LOGIC-LOGIC-OBJECT) (CL:SETQ CANDIDATEOBJECTNAME (OBJECT-NAME OBJ))
         (CL:WHEN (CL:NOT (CL:EQ CANDIDATEOBJECTNAME NULL))
          (CL:WHEN
           (CL:AND (STRING-EQL? (%SYMBOL.SYMBOL-NAME CANDIDATEOBJECTNAME) BARENAME)
            (CL:OR (CL:EQ OBJECTMODULE NULL) (CL:EQ (HOME-MODULE CANDIDATEOBJECTNAME) OBJECTMODULE)))
           (PUSH RESULTS OBJ) (CL:GO :CONTINUE)))
         (CL:LET* ((SYN NULL) (ITER-001 (GET-SYNONYMS OBJ)))
          (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO (CL:SETQ SYN (%%VALUE ITER-001))
           (CL:SETQ CANDIDATEOBJECTNAME (OBJECT-NAME SYN))
           (CL:WHEN (CL:NOT (CL:EQ CANDIDATEOBJECTNAME NULL))
            (CL:WHEN
             (CL:AND (STRING-EQL? (%SYMBOL.SYMBOL-NAME CANDIDATEOBJECTNAME) BARENAME)
              (CL:OR (CL:EQ OBJECTMODULE NULL) (CL:EQ (HOME-MODULE CANDIDATEOBJECTNAME) OBJECTMODULE)))
             (PUSH RESULTS SYN) (CL:RETURN)))
           (CL:SETQ ITER-001 (%%REST ITER-001)))))
        :CONTINUE))))
    ((CL:EQ MATCHTYPE KWD-HTML-DESCRIBE-OBJECT-CASE-INSENSITIVE)
     (CL:LET* ((OBJ NULL) (ITER-002 CANDIDATETERMS))
      (CL:LOOP WHILE (NEXT? ITER-002) DO (CL:SETQ OBJ (%ITERATOR.VALUE ITER-002))
       (CL:TAGBODY
        (CL:WHEN (ISA? OBJ SGT-HTML-DESCRIBE-OBJECT-LOGIC-LOGIC-OBJECT) (CL:SETQ CANDIDATEOBJECTNAME (OBJECT-NAME OBJ))
         (CL:WHEN (CL:NOT (CL:EQ CANDIDATEOBJECTNAME NULL))
          (CL:WHEN
           (CL:AND (STRING-EQUAL? (%SYMBOL.SYMBOL-NAME CANDIDATEOBJECTNAME) BARENAME)
            (CL:OR (CL:EQ OBJECTMODULE NULL) (CL:EQ (HOME-MODULE CANDIDATEOBJECTNAME) OBJECTMODULE)))
           (PUSH RESULTS OBJ) (CL:GO :CONTINUE)))
         (CL:LET* ((SYN NULL) (ITER-003 (GET-SYNONYMS OBJ)))
          (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-003 NIL)) DO (CL:SETQ SYN (%%VALUE ITER-003))
           (CL:SETQ CANDIDATEOBJECTNAME (OBJECT-NAME SYN))
           (CL:WHEN (CL:NOT (CL:EQ CANDIDATEOBJECTNAME NULL))
            (CL:WHEN
             (CL:AND (STRING-EQUAL? (%SYMBOL.SYMBOL-NAME CANDIDATEOBJECTNAME) BARENAME)
              (CL:OR (CL:EQ OBJECTMODULE NULL) (CL:EQ (HOME-MODULE CANDIDATEOBJECTNAME) OBJECTMODULE)))
             (PUSH RESULTS SYN) (CL:RETURN)))
           (CL:SETQ ITER-003 (%%REST ITER-003)))))
        :CONTINUE))))
    ((CL:EQ MATCHTYPE KWD-HTML-DESCRIBE-OBJECT-SUBSTRING)
     (CL:LET* ((OBJ NULL) (ITER-004 CANDIDATETERMS))
      (CL:LOOP WHILE (NEXT? ITER-004) DO (CL:SETQ OBJ (%ITERATOR.VALUE ITER-004))
       (CL:TAGBODY
        (CL:WHEN (ISA? OBJ SGT-HTML-DESCRIBE-OBJECT-LOGIC-LOGIC-OBJECT) (CL:SETQ CANDIDATEOBJECTNAME (OBJECT-NAME OBJ))
         (CL:WHEN (CL:NOT (CL:EQ CANDIDATEOBJECTNAME NULL))
          (CL:WHEN
           (CL:AND
            (CL:NOT
             (CL:= (STRING-SEARCH (STRING-UPCASE (%SYMBOL.SYMBOL-NAME CANDIDATEOBJECTNAME)) UPCASEDOBJECTNAME 0)
              NULL-INTEGER))
            (CL:OR (CL:EQ OBJECTMODULE NULL) (CL:EQ (HOME-MODULE CANDIDATEOBJECTNAME) OBJECTMODULE)))
           (PUSH RESULTS OBJ) (CL:GO :CONTINUE)))
         (CL:LET* ((SYN NULL) (ITER-005 (GET-SYNONYMS OBJ)))
          (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-005 NIL)) DO (CL:SETQ SYN (%%VALUE ITER-005))
           (CL:SETQ CANDIDATEOBJECTNAME (OBJECT-NAME SYN))
           (CL:WHEN (CL:NOT (CL:EQ CANDIDATEOBJECTNAME NULL))
            (CL:WHEN
             (CL:AND
              (CL:NOT
               (CL:= (STRING-SEARCH (STRING-UPCASE (%SYMBOL.SYMBOL-NAME CANDIDATEOBJECTNAME)) UPCASEDOBJECTNAME 0)
                NULL-INTEGER))
              (CL:OR (CL:EQ OBJECTMODULE NULL) (CL:EQ (HOME-MODULE CANDIDATEOBJECTNAME) OBJECTMODULE)))
             (PUSH RESULTS SYN) (CL:RETURN)))
           (CL:SETQ ITER-005 (%%REST ITER-005)))))
        :CONTINUE))))
    ((CL:EQ MATCHTYPE KWD-HTML-DESCRIBE-OBJECT-WILDCARD)
     (CL:ERROR (NEW-STELLA-EXCEPTION ":WILDCARD matching not implemented yet")))
    ((CL:EQ MATCHTYPE KWD-HTML-DESCRIBE-OBJECT-REGEX)
     (CL:ERROR (NEW-STELLA-EXCEPTION ":REGEX matching not implemented yet")))
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`" MATCHTYPE "' is not a valid case option")
      (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
   (REMOVE-DUPLICATES RESULTS) (SORT RESULTS (CL:FUNCTION LOGIC-FORM-LESS?)) RESULTS))

;;; (DEFUN (RESOLVE-SYNONYMS LOGIC-OBJECT) ...)

(CL:DEFUN RESOLVE-SYNONYMS (OBJ)
  (CL:LET* ((SURROGATE (%LOGIC-OBJECT.SURROGATE-VALUE-INVERSE OBJ)))
   (CL:IF (CL:AND (CL:NOT (CL:EQ SURROGATE NULL)) (SYNONYM-SURROGATE? SURROGATE))
    (%SURROGATE.SURROGATE-VALUE SURROGATE) OBJ)))

;;; (DEFUN HTML-WRITE-FIND-OBJECT-RESPONSE-PAGE ...)

(CL:DEFUN HTML-WRITE-FIND-OBJECT-RESPONSE-PAGE (MODULENAME OBJECTNAME OBJECTTYPE MATCHTYPE STREAM)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MODULENAME OBJECTNAME OBJECTTYPE))
  #+MCL
  (CL:CHECK-TYPE MODULENAME CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE OBJECTNAME CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE OBJECTTYPE CL:SIMPLE-STRING)
  (CL:LET* ((MODULE (GET-STELLA-MODULE MODULENAME CL:NIL)))
   (CL:WHEN (CL:EQ MODULE NULL)
    (HTML-UNKNOWN-MODULE-RESPONSE KWD-HTML-DESCRIBE-OBJECT-RELATION OBJECTNAME MODULENAME STREAM)
    (CL:RETURN-FROM HTML-WRITE-FIND-OBJECT-RESPONSE-PAGE))
   (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*)) (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
    (CL:LET* ((CANDIDATEOBJECTS (FIND-CANDIDATE-OBJECTS OBJECTNAME OBJECTTYPE MATCHTYPE)))
     (CL:CASE (LENGTH CANDIDATEOBJECTS)
      (0
       (HTML-UNKNOWN-OBJECT-RESPONSE
        (CL:IF (STRING-EQL? OBJECTTYPE "instance") KWD-HTML-DESCRIBE-OBJECT-OBJECT KWD-HTML-DESCRIBE-OBJECT-RELATION)
        OBJECTNAME STREAM))
      (1
       (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE (FIRST CANDIDATEOBJECTS))))
        (CL:COND
         ((SUBTYPE-OF? TEST-VALUE-000 SGT-HTML-DESCRIBE-OBJECT-LOGIC-NAMED-DESCRIPTION)
          (HTML-WRITE-RELATION-RESPONSE-PAGE (RESOLVE-SYNONYMS (FIRST CANDIDATEOBJECTS)) STREAM))
         ((SUBTYPE-OF? TEST-VALUE-000 SGT-HTML-DESCRIBE-OBJECT-LOGIC-LOGIC-OBJECT)
          (HTML-WRITE-INSTANCE-RESPONSE-PAGE (RESOLVE-SYNONYMS (FIRST CANDIDATEOBJECTS)) STREAM))
         (CL:T (CL:ERROR (NEW-STELLA-EXCEPTION "Can't handle object in html-write-find-object-response-page"))))))
      (CL:OTHERWISE (HTML-WRITE-MULTIPLE-CHOICE-PAGE OBJECTNAME CANDIDATEOBJECTS STREAM)))))))

;;; (DEFUN HTML-WRITE-MULTIPLE-CHOICE-PAGE ...)

(CL:DEFUN HTML-WRITE-MULTIPLE-CHOICE-PAGE (SEARCHSTRING CANDIDATEOBJECTS STREAM)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SEARCHSTRING))
  #+MCL
  (CL:CHECK-TYPE SEARCHSTRING CL:SIMPLE-STRING)
  (CL:PROGN (%%PRINT-STREAM STREAM "<HTML>")
   (CL:PROGN (%%PRINT-STREAM STREAM "<HEAD>") (%%PRINT-STREAM STREAM "<BASE TARGET='content'>" EOL)
    (CL:PROGN (%%PRINT-STREAM STREAM "<TITLE>") (WRITE-HTML-QUOTING-SPECIAL-CHARACTERS STREAM SEARCHSTRING)
     (%%PRINT-STREAM STREAM "</TITLE>" EOL))
    (%%PRINT-STREAM STREAM "</HEAD>" EOL))
   (CL:LET* ((TAG-007 (CONCATENATE "BODY BGCOLOR='#" *STANDARD-BACKGROUND-COLOR* "'")))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TAG-007)) (%%PRINT-STREAM STREAM "<" TAG-007 ">")
    (CL:PROGN (%%PRINT-STREAM STREAM "<H1>") (%%PRINT-STREAM STREAM "Matches for &quot;")
     (CL:PROGN (%%PRINT-STREAM STREAM "<FONT COLOR='#990033'>")
      (WRITE-HTML-QUOTING-SPECIAL-CHARACTERS STREAM SEARCHSTRING) (%%PRINT-STREAM STREAM "</FONT>"))
     (%%PRINT-STREAM STREAM "&quot;") (%%PRINT-STREAM STREAM "</H1>" EOL))
    (%%PRINT-STREAM STREAM "<HR SIZE=4>" EOL)
    (CL:LET* ((OBJ NULL) (ITER-000 (%LIST.THE-CONS-LIST CANDIDATEOBJECTS)))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO (CL:SETQ OBJ (%%VALUE ITER-000))
      (CL:COND
       ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE OBJ) SGT-HTML-DESCRIBE-OBJECT-LOGIC-DESCRIPTION)
        (CL:PROGN (CL:IF (CLASS? OBJ) (%%PRINT-STREAM STREAM "Concept ") (%%PRINT-STREAM STREAM "Relation "))
         (PPRINT-OBJECT OBJ STREAM)))
       (CL:T (%%PRINT-STREAM STREAM "Object ") (PPRINT-OBJECT OBJ STREAM)))
      (HTML-LINE-BREAK STREAM) (CL:SETQ ITER-000 (%%REST ITER-000))))
    (%%PRINT-STREAM STREAM "<HR SIZE=2>" EOL) (WRITE-POWERLOOM-TRAILER STREAM)
    (%%PRINT-STREAM STREAM "</" (SUBSEQUENCE TAG-007 0 (POSITION TAG-007 #\  0)) ">" EOL))
   (%%PRINT-STREAM STREAM "</HTML>" EOL)))

;;; (DEFUN HTML-POWERLOOM-RESPONSE ...)

(CL:DEFUN HTML-POWERLOOM-RESPONSE (ACTION OBJECTTYPE MODULENAME OBJECTNAME STREAM)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING ACTION OBJECTTYPE MODULENAME OBJECTNAME))
  #+MCL
  (CL:CHECK-TYPE ACTION CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE OBJECTTYPE CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE MODULENAME CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE OBJECTNAME CL:SIMPLE-STRING)
  (CL:LET*
   ((*PPRINT-ATOMIC-OBJECT-RENDERER*
     (%METHOD-SLOT.FUNCTION-CODE (LOOKUP-FUNCTION SYM-HTML-DESCRIBE-OBJECT-ONTOSAURUS-PPRINT-ATOMIC-OBJECT-FOR-HTML)))
    (*PPRINT-INDENT* 0) (*PRINTREADABLY?* CL:T))
   (CL:DECLARE (CL:SPECIAL *PPRINT-ATOMIC-OBJECT-RENDERER* *PPRINT-INDENT* *PRINTREADABLY?*))
   (CL:DECLARE (CL:TYPE CL:FIXNUM *PPRINT-INDENT*))
   (CL:COND
    ((CL:OR (STRING-EQL? OBJECTTYPE "object") (STRING-EQL? OBJECTTYPE "concept") (STRING-EQL? OBJECTTYPE "relation")
      (STRING-EQL? OBJECTTYPE "instance"))
     (CL:COND
      ((STRING-EQL? ACTION "show")
       (CL:LET* ((*ONTOSAURUS-URL-ACTION* "show")) (CL:DECLARE (CL:SPECIAL *ONTOSAURUS-URL-ACTION*))
        (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING *ONTOSAURUS-URL-ACTION*))
        (HTML-WRITE-OBJECT-RESPONSE-PAGE MODULENAME OBJECTNAME STREAM))
       (CL:RETURN-FROM HTML-POWERLOOM-RESPONSE))
      ((CL:OR (STRING-EQL? ACTION "find") (STRING-EQL? ACTION "findsubstring"))
       (CL:LET* ((*ONTOSAURUS-URL-ACTION* "show")) (CL:DECLARE (CL:SPECIAL *ONTOSAURUS-URL-ACTION*))
        (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING *ONTOSAURUS-URL-ACTION*))
        (HTML-WRITE-FIND-OBJECT-RESPONSE-PAGE MODULENAME OBJECTNAME OBJECTTYPE KWD-HTML-DESCRIBE-OBJECT-SUBSTRING
         STREAM))
       (CL:RETURN-FROM HTML-POWERLOOM-RESPONSE))
      ((STRING-EQL? ACTION "findexact")
       (CL:LET* ((*ONTOSAURUS-URL-ACTION* "show")) (CL:DECLARE (CL:SPECIAL *ONTOSAURUS-URL-ACTION*))
        (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING *ONTOSAURUS-URL-ACTION*))
        (HTML-WRITE-FIND-OBJECT-RESPONSE-PAGE MODULENAME OBJECTNAME OBJECTTYPE KWD-HTML-DESCRIBE-OBJECT-EXACT STREAM))
       (CL:RETURN-FROM HTML-POWERLOOM-RESPONSE))
      ((STRING-EQL? ACTION "findinsensitive")
       (CL:LET* ((*ONTOSAURUS-URL-ACTION* "show")) (CL:DECLARE (CL:SPECIAL *ONTOSAURUS-URL-ACTION*))
        (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING *ONTOSAURUS-URL-ACTION*))
        (HTML-WRITE-FIND-OBJECT-RESPONSE-PAGE MODULENAME OBJECTNAME OBJECTTYPE
         KWD-HTML-DESCRIBE-OBJECT-CASE-INSENSITIVE STREAM))
       (CL:RETURN-FROM HTML-POWERLOOM-RESPONSE))))
    ((CL:AND (STRING-EQL? OBJECTTYPE "context") (STRING-EQL? ACTION "show"))
     (HTML-WRITE-MODULE-RESPONSE-PAGE MODULENAME STREAM) (CL:RETURN-FROM HTML-POWERLOOM-RESPONSE))
    ((STRING-EQL? OBJECTTYPE "query")
     (CL:COND
      ((STRING-EQL? ACTION "explain") (HTML-WRITE-EXPLANATION-RESPONSE-PAGE MODULENAME OBJECTNAME STREAM)
       (CL:RETURN-FROM HTML-POWERLOOM-RESPONSE))))))
  (CL:PROGN (%%PRINT-STREAM STREAM "<FONT COLOR='#BB0000'>")
   (CL:PROGN (%%PRINT-STREAM STREAM "<B>")
    (%%PRINT-STREAM STREAM "ERROR: Unrecognized action-type pair: '" ACTION "' '" OBJECTTYPE "'.")
    (%%PRINT-STREAM STREAM "</B>"))
   (%%PRINT-STREAM STREAM "</FONT>" EOL))
  NULL)

;;; (DEFUN DO-ACTION-HANDLER ...)

(CL:DEFUN DO-ACTION-HANDLER (XCHG)
  (CL:LET*
   ((KEYS (PARSE-AND-DECODE-URL-ARGUMENTS (GET-REQUEST-URI-QUERY XCHG) #\+)) (ACTION (%%VALUE KEYS))
    (OBJECTTYPE (%%VALUE (%%REST KEYS))) (MODULENAME (%%VALUE (%%REST (%%REST KEYS)))) (OBJECTNAME (FOURTH KEYS))
    (STREAM (GET-REPLY-STREAM XCHG)))
   (CL:HANDLER-CASE
    (CL:COND
     ((CL:>= (LENGTH KEYS) 4)
      (CL:COND ((STARTS-WITH? (%STRING-WRAPPER.WRAPPER-VALUE ACTION) "graph" 0) (VIZ-SERVER-HANDLER XCHG))
       (CL:T
        (HTML-POWERLOOM-RESPONSE (%STRING-WRAPPER.WRAPPER-VALUE ACTION) (%STRING-WRAPPER.WRAPPER-VALUE OBJECTTYPE)
         (%STRING-WRAPPER.WRAPPER-VALUE MODULENAME) (%STRING-WRAPPER.WRAPPER-VALUE OBJECTNAME) STREAM))))
     (CL:T (SET-RESPONSE-CODE XCHG KWD-HTML-DESCRIBE-OBJECT-BAD-REQUEST)
      (CL:LET* ((TAG-008 (MAKE-HTML-BODY-TAG *ERROR-BACKGROUND-COLOR*)))
       (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TAG-008)) (%%PRINT-STREAM STREAM "<" TAG-008 ">")
       (%%PRINT-STREAM STREAM "ERROR: expected four parameters, only received " (LENGTH KEYS) EOL)
       (%%PRINT-STREAM STREAM "<BR><OL>" EOL)
       (CL:LET* ((KEY NULL) (ITER-000 KEYS))
        (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO (CL:SETQ KEY (%%VALUE ITER-000))
         (%%PRINT-STREAM STREAM "<LI>" KEY "</LI>" EOL) (CL:SETQ ITER-000 (%%REST ITER-000))))
       (%%PRINT-STREAM STREAM "</OL>" EOL)
       (%%PRINT-STREAM STREAM "</" (SUBSEQUENCE TAG-008 0 (POSITION TAG-008 #\  0)) ">" EOL))))
    (CL:CONDITION (E) (GENERATE-ERROR-RESPONSE XCHG KWD-HTML-DESCRIBE-OBJECT-BAD-REQUEST (EXCEPTION-MESSAGE E))))))

(CL:DEFUN HELP-STARTUP-HTML-DESCRIBE-OBJECT1 ()
  (CL:PROGN (CL:SETQ KWD-HTML-DESCRIBE-OBJECT-CONCEPT (INTERN-RIGID-SYMBOL-WRT-MODULE "CONCEPT" NULL 2))
   (CL:SETQ KWD-HTML-DESCRIBE-OBJECT-RELATION (INTERN-RIGID-SYMBOL-WRT-MODULE "RELATION" NULL 2))
   (CL:SETQ KWD-HTML-DESCRIBE-OBJECT-CONTEXT (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTEXT" NULL 2))
   (CL:SETQ KWD-HTML-DESCRIBE-OBJECT-INSTANCE (INTERN-RIGID-SYMBOL-WRT-MODULE "INSTANCE" NULL 2))
   (CL:SETQ KWD-HTML-DESCRIBE-OBJECT-QUERY (INTERN-RIGID-SYMBOL-WRT-MODULE "QUERY" NULL 2))
   (CL:SETQ KWD-HTML-DESCRIBE-OBJECT-OBJECT (INTERN-RIGID-SYMBOL-WRT-MODULE "OBJECT" NULL 2))
   (CL:SETQ SGT-HTML-DESCRIBE-OBJECT-STELLA-MODULE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MODULE" (GET-STELLA-MODULE "/STELLA" CL:T) 1))
   (CL:SETQ KWD-HTML-DESCRIBE-OBJECT-PREORDER (INTERN-RIGID-SYMBOL-WRT-MODULE "PREORDER" NULL 2))
   (CL:SETQ KWD-HTML-DESCRIBE-OBJECT-EQUIVALENT (INTERN-RIGID-SYMBOL-WRT-MODULE "EQUIVALENT" NULL 2))
   (CL:SETQ KWD-HTML-DESCRIBE-OBJECT-IMPLIES (INTERN-RIGID-SYMBOL-WRT-MODULE "IMPLIES" NULL 2))
   (CL:SETQ SGT-HTML-DESCRIBE-OBJECT-LOGIC-NAMED-DESCRIPTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NAMED-DESCRIPTION" (GET-STELLA-MODULE "/LOGIC" CL:T) 1))
   (CL:SETQ SYM-HTML-DESCRIBE-OBJECT-STELLA-CODE-ONLY?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CODE-ONLY?" (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-HTML-DESCRIBE-OBJECT-STELLA-NAMESPACE?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NAMESPACE?" (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ KWD-HTML-DESCRIBE-OBJECT-MODULE (INTERN-RIGID-SYMBOL-WRT-MODULE "MODULE" NULL 2))
   (CL:SETQ SGT-HTML-DESCRIBE-OBJECT-LOGIC-LOGIC-OBJECT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LOGIC-OBJECT" (GET-STELLA-MODULE "/LOGIC" CL:T) 1))
   (CL:SETQ KWD-HTML-DESCRIBE-OBJECT-EXACT (INTERN-RIGID-SYMBOL-WRT-MODULE "EXACT" NULL 2))
   (CL:SETQ KWD-HTML-DESCRIBE-OBJECT-CASE-INSENSITIVE (INTERN-RIGID-SYMBOL-WRT-MODULE "CASE-INSENSITIVE" NULL 2))
   (CL:SETQ KWD-HTML-DESCRIBE-OBJECT-SUBSTRING (INTERN-RIGID-SYMBOL-WRT-MODULE "SUBSTRING" NULL 2))
   (CL:SETQ KWD-HTML-DESCRIBE-OBJECT-WILDCARD (INTERN-RIGID-SYMBOL-WRT-MODULE "WILDCARD" NULL 2))
   (CL:SETQ KWD-HTML-DESCRIBE-OBJECT-REGEX (INTERN-RIGID-SYMBOL-WRT-MODULE "REGEX" NULL 2))
   (CL:SETQ SGT-HTML-DESCRIBE-OBJECT-LOGIC-DESCRIPTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DESCRIPTION" (GET-STELLA-MODULE "/LOGIC" CL:T) 1))
   (CL:SETQ SYM-HTML-DESCRIBE-OBJECT-ONTOSAURUS-PPRINT-ATOMIC-OBJECT-FOR-HTML
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PPRINT-ATOMIC-OBJECT-FOR-HTML" NULL 0))
   (CL:SETQ KWD-HTML-DESCRIBE-OBJECT-BAD-REQUEST (INTERN-RIGID-SYMBOL-WRT-MODULE "BAD-REQUEST" NULL 2))
   (CL:SETQ KWD-HTML-DESCRIBE-OBJECT-CONTENT-TYPE (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTENT-TYPE" NULL 2))
   (CL:SETQ KWD-HTML-DESCRIBE-OBJECT-HTML (INTERN-RIGID-SYMBOL-WRT-MODULE "HTML" NULL 2))
   (CL:SETQ KWD-HTML-DESCRIBE-OBJECT-DOCUMENTATION (INTERN-RIGID-SYMBOL-WRT-MODULE "DOCUMENTATION" NULL 2))
   (CL:SETQ SYM-HTML-DESCRIBE-OBJECT-ONTOSAURUS-STARTUP-HTML-DESCRIBE-OBJECT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-HTML-DESCRIBE-OBJECT" NULL 0))
   (CL:SETQ SYM-HTML-DESCRIBE-OBJECT-STELLA-METHOD-STARTUP-CLASSNAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME" (GET-STELLA-MODULE "/STELLA" CL:T) 0))))

(CL:DEFUN STARTUP-HTML-DESCRIBE-OBJECT ()
  (CL:LET* ((*MODULE* (GET-STELLA-MODULE "/ONTOSAURUS" (> *STARTUP-TIME-PHASE* 1))) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2) (HELP-STARTUP-HTML-DESCRIBE-OBJECT1))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 4)
    (CL:SETQ *IMAGE-URL-RELATION* (PLI::S-GET-RELATION "IMAGE-URL" "PL-USER" NULL))
    (CL:SETQ *DOCUMENTATION-RELATION* (PLI::S-GET-RELATION "DOCUMENTATION" "PL-USER" NULL)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (DEFINE-FUNCTION-OBJECT "LOOKUP-TERM"
     "(DEFUN (LOOKUP-TERM STRING) ((TERM KEYWORD) (CAPITALIZED? BOOLEAN) (PLURAL? BOOLEAN)))" (CL:FUNCTION LOOKUP-TERM)
     NULL)
    (DEFINE-FUNCTION-OBJECT "SAFE-OBJECT-NAME-STRING"
     "(DEFUN (SAFE-OBJECT-NAME-STRING STRING) ((INSTANCE LOGIC-OBJECT)))" (CL:FUNCTION SAFE-OBJECT-NAME-STRING) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-DESCRIBE-LOCATION"
     "(DEFUN HTML-DESCRIBE-LOCATION ((SELF LOGIC-OBJECT) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION HTML-DESCRIBE-LOCATION) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-WRITE-CONTEXT-VIEW-OPTION"
     "(DEFUN HTML-WRITE-CONTEXT-VIEW-OPTION ((STREAM NATIVE-OUTPUT-STREAM) (OBJECTNAME STRING) (CTX MODULE)))"
     (CL:FUNCTION HTML-WRITE-CONTEXT-VIEW-OPTION) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-DESCRIBE-CONTEXT-VIEW"
     "(DEFUN HTML-DESCRIBE-CONTEXT-VIEW ((SELF LOGIC-OBJECT) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION HTML-DESCRIBE-CONTEXT-VIEW) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-DISPLAY-IMAGES"
     "(DEFUN HTML-DISPLAY-IMAGES ((SELF STANDARD-OBJECT) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION HTML-DISPLAY-IMAGES) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-DISPLAY-DOCUMENTATION"
     "(DEFUN HTML-DISPLAY-DOCUMENTATION ((SELF STANDARD-OBJECT) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION HTML-DISPLAY-DOCUMENTATION) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-DISPLAY-SYNONYMS"
     "(DEFUN HTML-DISPLAY-SYNONYMS ((SELF OBJECT) (STREAM NATIVE-OUTPUT-STREAM)))" (CL:FUNCTION HTML-DISPLAY-SYNONYMS)
     NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-DESCRIBE-EQUIVALENTS"
     "(DEFUN HTML-DESCRIBE-EQUIVALENTS ((TITLE STRING) (HEAD STRING) (RELATION NAMED-DESCRIPTION) (STREAM NATIVE-OUTPUT-STREAM) (RULE? BOOLEAN)))"
     (CL:FUNCTION HTML-DESCRIBE-EQUIVALENTS) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-DESCRIBE-ONE-SUB-LEVEL"
     "(DEFUN HTML-DESCRIBE-ONE-SUB-LEVEL ((OBJECT NAMED-DESCRIPTION) (DEPTH INTEGER) (CUTOFF INTEGER) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION HTML-DESCRIBE-ONE-SUB-LEVEL) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-DESCRIBE-SUBS"
     "(DEFUN HTML-DESCRIBE-SUBS ((TITLE STRING) (HEAD STRING) (RELATION NAMED-DESCRIPTION) (STREAM NATIVE-OUTPUT-STREAM) (RULE? BOOLEAN)))"
     (CL:FUNCTION HTML-DESCRIBE-SUBS) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-DESCRIBE-ONE-SUPER-LEVEL"
     "(DEFUN HTML-DESCRIBE-ONE-SUPER-LEVEL ((DIRECTSUPERS (CONS OF NAMED-DESCRIPTION)) (ALREADYOUTPUT HASH-TABLE) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION HTML-DESCRIBE-ONE-SUPER-LEVEL) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-DESCRIBE-SUPERS"
     "(DEFUN HTML-DESCRIBE-SUPERS ((TITLE STRING) (HEAD STRING) (RELATION NAMED-DESCRIPTION) (STREAM NATIVE-OUTPUT-STREAM) (RULE? BOOLEAN)))"
     (CL:FUNCTION HTML-DESCRIBE-SUPERS) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-DESCRIBE-TYPES"
     "(DEFUN HTML-DESCRIBE-TYPES ((TITLE STRING) (HEAD STRING) (RELATION LOGIC-OBJECT) (STREAM NATIVE-OUTPUT-STREAM) (RULE? BOOLEAN)))"
     (CL:FUNCTION HTML-DESCRIBE-TYPES) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-DESCRIBE-ONE-PARENT-WITH-SIBLINGS"
     "(DEFUN HTML-DESCRIBE-ONE-PARENT-WITH-SIBLINGS ((PARENT NAMED-DESCRIPTION) (CHILD NAMED-DESCRIPTION) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION HTML-DESCRIBE-ONE-PARENT-WITH-SIBLINGS) NULL)
    (DEFINE-FUNCTION-OBJECT "HAS-CHILD-OTHER-THAN?"
     "(DEFUN (HAS-CHILD-OTHER-THAN? BOOLEAN) ((PARENT NAMED-DESCRIPTION) (CHILD NAMED-DESCRIPTION)))"
     (CL:FUNCTION HAS-CHILD-OTHER-THAN?) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-DESCRIBE-SIBLINGS"
     "(DEFUN HTML-DESCRIBE-SIBLINGS ((TITLE STRING) (HEAD STRING) (RELATION NAMED-DESCRIPTION) (STREAM NATIVE-OUTPUT-STREAM) (RULE? BOOLEAN)))"
     (CL:FUNCTION HTML-DESCRIBE-SIBLINGS) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-DESCRIBE-RULES"
     "(DEFUN HTML-DESCRIBE-RULES ((TITLE STRING) (HEAD STRING) (RELATION LOGIC-OBJECT) (STREAM NATIVE-OUTPUT-STREAM) (RULE? BOOLEAN)))"
     (CL:FUNCTION HTML-DESCRIBE-RULES) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-DESCRIBE-FACTS"
     "(DEFUN HTML-DESCRIBE-FACTS ((TITLE STRING) (HEAD STRING) (RELATION LOGIC-OBJECT) (STREAM NATIVE-OUTPUT-STREAM) (FILTER-RULES? BOOLEAN) (RULE? BOOLEAN)))"
     (CL:FUNCTION HTML-DESCRIBE-FACTS) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-DESCRIBE-INSTANCES"
     "(DEFUN HTML-DESCRIBE-INSTANCES ((TITLE STRING) (HEAD STRING) (RELATION NAMED-DESCRIPTION) (STREAM NATIVE-OUTPUT-STREAM) (RULE? BOOLEAN)))"
     (CL:FUNCTION HTML-DESCRIBE-INSTANCES) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-DESCRIBE-TUPLES"
     "(DEFUN HTML-DESCRIBE-TUPLES ((TITLE STRING) (HEAD STRING) (RELATION NAMED-DESCRIPTION) (STREAM NATIVE-OUTPUT-STREAM) (RULE? BOOLEAN)))"
     (CL:FUNCTION HTML-DESCRIBE-TUPLES) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-DESCRIBE-NAMED-DESCRIPTION"
     "(DEFUN HTML-DESCRIBE-NAMED-DESCRIPTION ((CONCEPT NAMED-DESCRIPTION) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION HTML-DESCRIBE-NAMED-DESCRIPTION) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-DESCRIBE-INSTANCE"
     "(DEFUN HTML-DESCRIBE-INSTANCE ((INSTANCE LOGIC-OBJECT) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION HTML-DESCRIBE-INSTANCE) NULL)
    (DEFINE-FUNCTION-OBJECT "CHILD-MODULES" "(DEFUN (CHILD-MODULES (CONS OF MODULE)) ((MODULE MODULE)))"
     (CL:FUNCTION CHILD-MODULES) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-DESCRIBE-ONE-MODULE-SUB-LEVEL"
     "(DEFUN HTML-DESCRIBE-ONE-MODULE-SUB-LEVEL ((MODULE MODULE) (DEPTH INTEGER) (CUTOFF INTEGER) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION HTML-DESCRIBE-ONE-MODULE-SUB-LEVEL) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-DESCRIBE-MODULE-SUBS"
     "(DEFUN HTML-DESCRIBE-MODULE-SUBS ((TITLE STRING) (HEAD STRING) (MODULE MODULE) (STREAM NATIVE-OUTPUT-STREAM) (RULE? BOOLEAN)))"
     (CL:FUNCTION HTML-DESCRIBE-MODULE-SUBS) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-DESCRIBE-ONE-MODULE-SUPER-LEVEL"
     "(DEFUN HTML-DESCRIBE-ONE-MODULE-SUPER-LEVEL ((MODULE MODULE) (ALREADYOUTPUT HASH-TABLE) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION HTML-DESCRIBE-ONE-MODULE-SUPER-LEVEL) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-DESCRIBE-MODULE-SUPERS"
     "(DEFUN HTML-DESCRIBE-MODULE-SUPERS ((TITLE STRING) (HEAD STRING) (MODULE MODULE) (STREAM NATIVE-OUTPUT-STREAM) (RULE? BOOLEAN)))"
     (CL:FUNCTION HTML-DESCRIBE-MODULE-SUPERS) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-DISPLAY-MODULE-STATS"
     "(DEFUN HTML-DISPLAY-MODULE-STATS ((TITLE STRING) (HEAD STRING) (MODULE MODULE) (STREAM NATIVE-OUTPUT-STREAM) (RULE? BOOLEAN)))"
     (CL:FUNCTION HTML-DISPLAY-MODULE-STATS) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-DESCRIBE-MODULE"
     "(DEFUN HTML-DESCRIBE-MODULE ((MODULE MODULE) (STREAM NATIVE-OUTPUT-STREAM)))" (CL:FUNCTION HTML-DESCRIBE-MODULE)
     NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-UNKNOWN-MODULE-RESPONSE"
     "(DEFUN HTML-UNKNOWN-MODULE-RESPONSE ((ITEMTYPE KEYWORD) (ITEMNAME STRING) (MODULENAME STRING) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION HTML-UNKNOWN-MODULE-RESPONSE) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-UNKNOWN-OBJECT-RESPONSE"
     "(DEFUN HTML-UNKNOWN-OBJECT-RESPONSE ((ITEMTYPE KEYWORD) (ITEMNAME STRING) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION HTML-UNKNOWN-OBJECT-RESPONSE) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-WRITE-RELATION-RESPONSE-PAGE"
     "(DEFUN HTML-WRITE-RELATION-RESPONSE-PAGE ((RELATION NAMED-DESCRIPTION) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION HTML-WRITE-RELATION-RESPONSE-PAGE) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-WRITE-INSTANCE-RESPONSE-PAGE"
     "(DEFUN HTML-WRITE-INSTANCE-RESPONSE-PAGE ((INSTANCE LOGIC-OBJECT) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION HTML-WRITE-INSTANCE-RESPONSE-PAGE) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-WRITE-OBJECT-RESPONSE-PAGE-INTERNAL"
     "(DEFUN HTML-WRITE-OBJECT-RESPONSE-PAGE-INTERNAL ((OBJECT OBJECT) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION HTML-WRITE-OBJECT-RESPONSE-PAGE-INTERNAL) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-WRITE-MODULE-RESPONSE-PAGE-INTERNAL"
     "(DEFUN HTML-WRITE-MODULE-RESPONSE-PAGE-INTERNAL ((MODULE MODULE) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION HTML-WRITE-MODULE-RESPONSE-PAGE-INTERNAL) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-WRITE-MODULE-RESPONSE-PAGE"
     "(DEFUN HTML-WRITE-MODULE-RESPONSE-PAGE ((MODULENAME STRING) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION HTML-WRITE-MODULE-RESPONSE-PAGE) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-WRITE-OBJECT-RESPONSE-PAGE"
     "(DEFUN HTML-WRITE-OBJECT-RESPONSE-PAGE ((MODULENAME STRING) (OBJECTNAME STRING) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION HTML-WRITE-OBJECT-RESPONSE-PAGE) NULL)
    (DEFINE-FUNCTION-OBJECT "FIND-CANDIDATE-OBJECTS"
     "(DEFUN (FIND-CANDIDATE-OBJECTS (LIST OF LOGIC-OBJECT)) ((OBJECTNAME STRING) (OBJECTTYPE STRING) (MATCHTYPE KEYWORD)))"
     (CL:FUNCTION FIND-CANDIDATE-OBJECTS) NULL)
    (DEFINE-FUNCTION-OBJECT "RESOLVE-SYNONYMS" "(DEFUN (RESOLVE-SYNONYMS LOGIC-OBJECT) ((OBJ LOGIC-OBJECT)))"
     (CL:FUNCTION RESOLVE-SYNONYMS) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-WRITE-FIND-OBJECT-RESPONSE-PAGE"
     "(DEFUN HTML-WRITE-FIND-OBJECT-RESPONSE-PAGE ((MODULENAME STRING) (OBJECTNAME STRING) (OBJECTTYPE STRING) (MATCHTYPE KEYWORD) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION HTML-WRITE-FIND-OBJECT-RESPONSE-PAGE) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-WRITE-MULTIPLE-CHOICE-PAGE"
     "(DEFUN HTML-WRITE-MULTIPLE-CHOICE-PAGE ((SEARCHSTRING STRING) (CANDIDATEOBJECTS (LIST OF LOGIC-OBJECT)) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION HTML-WRITE-MULTIPLE-CHOICE-PAGE) NULL)
    (DEFINE-FUNCTION-OBJECT "HTML-POWERLOOM-RESPONSE"
     "(DEFUN HTML-POWERLOOM-RESPONSE ((ACTION STRING) (OBJECTTYPE STRING) (MODULENAME STRING) (OBJECTNAME STRING) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION HTML-POWERLOOM-RESPONSE) NULL)
    (DEFINE-FUNCTION-OBJECT "DO-ACTION-HANDLER" "(DEFUN DO-ACTION-HANDLER ((XCHG /HTTP/HTTP-EXCHANGE)))"
     (CL:FUNCTION DO-ACTION-HANDLER) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-HTML-DESCRIBE-OBJECT" "(DEFUN STARTUP-HTML-DESCRIBE-OBJECT () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-HTML-DESCRIBE-OBJECT) NULL)
    (CL:LET* ((FUNCTION (LOOKUP-FUNCTION SYM-HTML-DESCRIBE-OBJECT-ONTOSAURUS-STARTUP-HTML-DESCRIBE-OBJECT)))
     (SET-DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
      SYM-HTML-DESCRIBE-OBJECT-STELLA-METHOD-STARTUP-CLASSNAME (WRAP-STRING "_StartupHtmlDescribeObject")
      NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS) (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9) (%IN-MODULE (COPY-CONS-TREE (WRAP-STRING "ONTOSAURUS")))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *IMAGE-URL-RELATION* LOGIC-OBJECT (/PLI/S-GET-RELATION \"IMAGE-URL\" \"PL-USER\" NULL))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *DOCUMENTATION-RELATION* LOGIC-OBJECT (/PLI/S-GET-RELATION \"DOCUMENTATION\" \"PL-USER\" NULL))")
    (PUBLISH-HANDLER "/ploom/ontosaurus/do-action" (CL:FUNCTION DO-ACTION-HANDLER)
     KWD-HTML-DESCRIBE-OBJECT-CONTENT-TYPE (WRAP-STRING (GET-HTTP-MIME-TYPE KWD-HTML-DESCRIBE-OBJECT-HTML NULL))
     KWD-HTML-DESCRIBE-OBJECT-DOCUMENTATION
     (WRAP-STRING "Various parameterized Ontosaurus actions to describe objects.")))))
