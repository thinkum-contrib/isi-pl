;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; new-pprint.lisp

#|
 +---------------------------- BEGIN LICENSE BLOCK ---------------------------+
 |                                                                            |
 | Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
 |                                                                            |
 | The contents of this file are subject to the Mozilla Public License        |
 | Version 1.1 (the "License"); you may not use this file except in           |
 | compliance with the License. You may obtain a copy of the License at       |
 | http://www.mozilla.org/MPL/                                                |
 |                                                                            |
 | Software distributed under the License is distributed on an "AS IS" basis, |
 | WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
 | for the specific language governing rights and limitations under the       |
 | License.                                                                   |
 |                                                                            |
 | The Original Code is the PowerLoom KR&R System.                            |
 |                                                                            |
 | The Initial Developer of the Original Code is                              |
 | UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
 | 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
 |                                                                            |
 | Portions created by the Initial Developer are Copyright (C) 2000-2010      |
 | the Initial Developer. All Rights Reserved.                                |
 |                                                                            |
 | Contributor(s):                                                            |
 |                                                                            |
 | Alternatively, the contents of this file may be used under the terms of    |
 | either the GNU General Public License Version 2 or later (the "GPL"), or   |
 | the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
 | in which case the provisions of the GPL or the LGPL are applicable instead |
 | of those above. If you wish to allow use of your version of this file only |
 | under the terms of either the GPL or the LGPL, and not to allow others to  |
 | use your version of this file under the terms of the MPL, indicate your    |
 | decision by deleting the provisions above and replace them with the notice |
 | and other provisions required by the GPL or the LGPL. If you do not delete |
 | the provisions above, a recipient may use your version of this file under  |
 | the terms of any one of the MPL, the GPL or the LGPL.                      |
 |                                                                            |
 +----------------------------- END LICENSE BLOCK ----------------------------+
|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SGT-NEW-PPRINT-STELLA-LITERAL-WRAPPER NULL)
(CL:DEFVAR SGT-NEW-PPRINT-LOGIC-PATTERN-VARIABLE NULL)
(CL:DEFVAR SGT-NEW-PPRINT-LOGIC-SKOLEM NULL)
(CL:DEFVAR SGT-NEW-PPRINT-LOGIC-LOGIC-OBJECT NULL)
(CL:DEFVAR SGT-NEW-PPRINT-LOGIC-LOGIC-THING NULL)
(CL:DEFVAR SGT-NEW-PPRINT-STELLA-THING NULL)
(CL:DEFVAR SGT-NEW-PPRINT-STELLA-MUTABLE-STRING-WRAPPER NULL)
(CL:DEFVAR SGT-NEW-PPRINT-LOGIC-NAMED-DESCRIPTION NULL)
(CL:DEFVAR SGT-NEW-PPRINT-LOGIC-PROPOSITION NULL)
(CL:DEFVAR SGT-NEW-PPRINT-LOGIC-DESCRIPTION NULL)
(CL:DEFVAR SGT-NEW-PPRINT-STELLA-COLLECTION NULL)
(CL:DEFVAR SGT-NEW-PPRINT-STELLA-CONS NULL)
(CL:DEFVAR SGT-NEW-PPRINT-PL-KERNEL-KB-AND NULL)
(CL:DEFVAR SGT-NEW-PPRINT-PL-KERNEL-KB-OR NULL)
(CL:DEFVAR SGT-NEW-PPRINT-PL-KERNEL-KB-NOT NULL)
(CL:DEFVAR SGT-NEW-PPRINT-PL-KERNEL-KB-FAIL NULL)
(CL:DEFVAR SGT-NEW-PPRINT-PL-KERNEL-KB-FORALL NULL)
(CL:DEFVAR SGT-NEW-PPRINT-PL-KERNEL-KB-EXISTS NULL)
(CL:DEFVAR SGT-NEW-PPRINT-PL-KERNEL-KB-KAPPA NULL)
(CL:DEFVAR SGT-NEW-PPRINT-PL-KERNEL-KB-SUBSET-OF NULL)
(CL:DEFVAR SGT-NEW-PPRINT-PL-KERNEL-KB-SETOF NULL)
(CL:DEFVAR SGT-NEW-PPRINT-PL-KERNEL-KB-LISTOF NULL)
(CL:DEFVAR SGT-NEW-PPRINT-PL-KERNEL-KB-BAGOF NULL)
(CL:DEFVAR SGT-NEW-PPRINT-STELLA-TRUE NULL)
(CL:DEFVAR SGT-NEW-PPRINT-STELLA-FALSE NULL)
(CL:DEFVAR SGT-NEW-PPRINT-PL-KERNEL-KB-EQUIVALENT NULL)
(CL:DEFVAR KWD-NEW-PPRINT-PREDICATE NULL)
(CL:DEFVAR KWD-NEW-PPRINT-ISA NULL)
(CL:DEFVAR KWD-NEW-PPRINT-FUNCTION NULL)
(CL:DEFVAR KWD-NEW-PPRINT-AND NULL)
(CL:DEFVAR KWD-NEW-PPRINT-OR NULL)
(CL:DEFVAR KWD-NEW-PPRINT-NOT NULL)
(CL:DEFVAR KWD-NEW-PPRINT-EQUIVALENT NULL)
(CL:DEFVAR KWD-NEW-PPRINT-FAIL NULL)
(CL:DEFVAR KWD-NEW-PPRINT-CONSTANT NULL)
(CL:DEFVAR KWD-NEW-PPRINT-EXISTS NULL)
(CL:DEFVAR SYM-NEW-PPRINT-LOGIC-IO-VARIABLES NULL)
(CL:DEFVAR KWD-NEW-PPRINT-FORALL NULL)
(CL:DEFVAR KWD-NEW-PPRINT-IMPLIES NULL)
(CL:DEFVAR SYM-NEW-PPRINT-LOGIC-COMPLEMENT-DESCRIPTION NULL)
(CL:DEFVAR SYM-NEW-PPRINT-LOGIC-FORWARD-ONLY? NULL)
(CL:DEFVAR SGT-NEW-PPRINT-STELLA-SYMBOL NULL)
(CL:DEFVAR KWD-NEW-PPRINT-KIF NULL)
(CL:DEFVAR KWD-NEW-PPRINT-KIF-ONTOSAURUS NULL)
(CL:DEFVAR SYM-NEW-PPRINT-ONTOSAURUS-STARTUP-NEW-PPRINT NULL)
(CL:DEFVAR SYM-NEW-PPRINT-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STARTUP-TIME-PHASE* *MODULE* FALSE-WRAPPER
  SYSTEM-DEFINED-ARGUMENT-NAMES NIL *PRINTFUNCTIONSASRELATIONS?*
  *PRINTREADABLY?* *SKOLEMNAMEMAPPINGTABLE* *CURRENTJUSTIFICATION*
  VALUE-OF-SEPARATOR EOL NULL-INTEGER))

;;; (DEFCONSTANT REUSABLE-SKOLEM-MAPPING-TABLE ...)

(CL:DEFVAR REUSABLE-SKOLEM-MAPPING-TABLE NULL
  "Stores reusable key-value list for use by
'print-descriptions-as-kif-rule'.")

;;; (DEFSPECIAL *PPRINT-ATOMIC-OBJECT-RENDERER* ...)

(CL:DEFVAR *PPRINT-ATOMIC-OBJECT-RENDERER* NULL
  "A function that takes two arguments, a Stella Object
and a NATIVE-(?) OUTPUT-STREAM, and writes a representation of that
object on that stream.  This will only be called on `atomic' Stella
objects -- compound objects like Conses, Propositions, etc. are handled
by the outer code.")

;;; (DEFSPECIAL *PPRINT-BEFORE-PROPOSITION-FUNCTION* ...)

(CL:DEFVAR *PPRINT-BEFORE-PROPOSITION-FUNCTION* NULL
  "A function that takes two arguments, a Stella Proposition
and a NATIVE-(?) OUTPUT-STREAM, and writes something that precedes the
normal printed representation of a proposition.   This will only be called 
on `PROPOSITION' objects.")

;;; (DEFSPECIAL *PPRINT-AFTER-PROPOSITION-FUNCTION* ...)

(CL:DEFVAR *PPRINT-AFTER-PROPOSITION-FUNCTION* NULL
  "A function that takes two arguments, a Stella Proposition
and a NATIVE-(?) OUTPUT-STREAM, and writes something that precedes the
normal printed representation of a proposition.   This will only be called 
on `PROPOSITION' objects.")

;;; (DEFSPECIAL *PPRINT-BEFORE-DEFINITION-FUNCTION* ...)

(CL:DEFVAR *PPRINT-BEFORE-DEFINITION-FUNCTION* NULL
  "A function that takes two arguments, a Stella Definition
and a NATIVE-(?) OUTPUT-STREAM, and writes something that precedes the
normal printed representation of a definition.   This will only be called 
on `DEFINITION' objects.")

;;; (DEFSPECIAL *PPRINT-AFTER-DEFINITION-FUNCTION* ...)

(CL:DEFVAR *PPRINT-AFTER-DEFINITION-FUNCTION* NULL
  "A function that takes two arguments, a Stella Definition
and a NATIVE-(?) OUTPUT-STREAM, and writes something that precedes the
normal printed representation of a definition.   This will only be called 
on `DEFINITION' objects.")

;;; (DEFSPECIAL *PPRINT-INDENT* ...)

(CL:DEFVAR *PPRINT-INDENT* 0)
(CL:DECLAIM (CL:TYPE CL:FIXNUM *PPRINT-INDENT*))

;;; (DEFUN PPRINT-NEWLINE ...)

(CL:DEFUN PPRINT-NEWLINE (STREAM)
  (%%PRINT-STREAM STREAM EOL)
  (CL:LET*
   ((I NULL-INTEGER) (ITER-000 1) (UPPER-BOUND-000 *PPRINT-INDENT*)
    (UNBOUNDED?-000 (CL:= UPPER-BOUND-000 NULL-INTEGER)))
   (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-000 UPPER-BOUND-000))
   (CL:LOOP WHILE (CL:OR UNBOUNDED?-000 (CL:<= ITER-000 UPPER-BOUND-000)) DO
    (CL:SETQ I ITER-000) (CL:SETQ I I) (%%PRINT-STREAM STREAM " ")
    (CL:SETQ ITER-000 (CL:1+ ITER-000)))))

;;; (DEFUN PPRINT-ATOMIC-OBJECT ...)

(CL:DEFUN PPRINT-ATOMIC-OBJECT (SELF STREAM)
  (CL:WHEN (CL:NOT (CL:EQ SELF NULL))
   (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE SELF)))
    (CL:COND
     ((SUBTYPE-OF? TEST-VALUE-000 SGT-NEW-PPRINT-STELLA-LITERAL-WRAPPER)
      (CL:PROGN (PPRINT-LITERAL-WRAPPER SELF STREAM)))
     ((SUBTYPE-OF? TEST-VALUE-000 SGT-NEW-PPRINT-LOGIC-PATTERN-VARIABLE)
      (CL:PROGN
       (CL:COND
        ((CL:AND (CL:NOT (CL:EQ *SKOLEMNAMEMAPPINGTABLE* NULL))
          (CL:NOT (CL:EQ (LOOKUP *SKOLEMNAMEMAPPINGTABLE* SELF) NULL)))
         (%%PRINT-STREAM STREAM
          (GENERATE-NAME-OF-VARIABLE (LOOKUP *SKOLEMNAMEMAPPINGTABLE* SELF))))
        ((CL:AND (CL:NOT (CL:EQ *CURRENTJUSTIFICATION* NULL))
          (CL:NOT (CL:EQ (JUSTIFICATION-ARGUMENT-BOUND-TO SELF NULL) NULL)))
         (PPRINT-OBJECT (JUSTIFICATION-ARGUMENT-BOUND-TO SELF NULL) STREAM))
        (CL:T (%%PRINT-STREAM STREAM (GENERATE-NAME-OF-VARIABLE SELF))))))
     ((SUBTYPE-OF? TEST-VALUE-000 SGT-NEW-PPRINT-LOGIC-SKOLEM)
      (CL:PROGN
       (CL:COND
        ((CL:NOT (CL:EQ (NATIVE-VALUE-OF SELF) NULL))
         (PPRINT-ATOMIC-OBJECT (NATIVE-VALUE-OF SELF) STREAM))
        ((CL:NOT (CL:EQ (INNERMOST-OF SELF) NULL))
         (%%PRINT-STREAM STREAM
          (STRING-DOWNCASE (GET-SKOLEM-PRINT-NAME SELF)))
         (CL:COND
          ((CL:NOT (CL:EQ (INNERMOST-OF SELF) SELF))
           (%%PRINT-STREAM STREAM VALUE-OF-SEPARATOR)
           (PPRINT-OBJECT (INNERMOST-OF SELF) STREAM))
          ((CL:NOT (CL:EQ (%DEFINING-PROPOSITION SELF) NULL))
           (%%PRINT-STREAM STREAM VALUE-OF-SEPARATOR)
           (PPRINT-FUNCTION-TERM (%DEFINING-PROPOSITION SELF) STREAM))
          (CL:T)))
        (CL:T (%%PRINT-STREAM STREAM (GENERATE-SKOLEM SELF))))))
     ((SUBTYPE-OF? TEST-VALUE-000 SGT-NEW-PPRINT-LOGIC-LOGIC-OBJECT)
      (CL:PROGN
       (CL:IF (CL:NOT (CL:EQ (%SURROGATE-VALUE-INVERSE SELF) NULL))
        (%%PRINT-STREAM STREAM
         (SURROGATE-TO-SYMBOL (%SURROGATE-VALUE-INVERSE SELF)))
        (%%PRINT-STREAM STREAM "Unamed_Object"))))
     ((SUBTYPE-OF-SURROGATE? TEST-VALUE-000)
      (CL:PROGN (%%PRINT-STREAM STREAM (OPERATOR-TO-STRING SELF))))
     ((SUBTYPE-OF? TEST-VALUE-000 SGT-NEW-PPRINT-LOGIC-LOGIC-THING)
      (CL:PROGN
       (CL:COND
        ((CL:NOT (CL:EQ (GENERATE-TERM SELF) NULL))
         (PPRINT-OBJECT (GENERATE-TERM SELF) STREAM))
        ((CL:NOT (CL:EQ (%SURROGATE-VALUE-INVERSE SELF) NULL))
         (%%PRINT-STREAM STREAM (%SURROGATE-VALUE-INVERSE SELF)))
        (CL:T (%%PRINT-STREAM STREAM SELF)))))
     ((SUBTYPE-OF? TEST-VALUE-000 SGT-NEW-PPRINT-STELLA-THING)
      (CL:PROGN
       (CL:IF (CL:NOT (CL:EQ (%SURROGATE-VALUE-INVERSE SELF) NULL))
        (%%PRINT-STREAM STREAM (%SURROGATE-VALUE-INVERSE SELF))
        (%%PRINT-STREAM STREAM SELF))))
     (CL:T (%%PRINT-STREAM STREAM SELF))))))

;;; (DEFUN PPRINT-LITERAL-WRAPPER ...)

(CL:DEFUN PPRINT-LITERAL-WRAPPER (SELF STREAM)
  (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE SELF)))
   (CL:COND
    ((SUBTYPE-OF-BOOLEAN? TEST-VALUE-000)
     (CL:PROGN (%%PRINT-STREAM STREAM (%WRAPPER-VALUE SELF))))
    ((SUBTYPE-OF-INTEGER? TEST-VALUE-000)
     (CL:PROGN (%%PRINT-STREAM STREAM (%WRAPPER-VALUE SELF))))
    ((SUBTYPE-OF-FLOAT? TEST-VALUE-000)
     (CL:PROGN (%%PRINT-STREAM STREAM (%WRAPPER-VALUE SELF))))
    ((SUBTYPE-OF-CHARACTER? TEST-VALUE-000)
     (CL:PROGN (%%PRINT-STREAM STREAM (%WRAPPER-VALUE SELF))))
    ((SUBTYPE-OF-STRING? TEST-VALUE-000)
     (CL:PROGN
      (CL:IF *PRINTREADABLY?*
       (%%PRINT-STREAM STREAM "\"" (%WRAPPER-VALUE SELF) "\"")
       (%%PRINT-STREAM STREAM (%WRAPPER-VALUE SELF)))))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-NEW-PPRINT-STELLA-MUTABLE-STRING-WRAPPER)
     (CL:PROGN
      (CL:IF *PRINTREADABLY?*
       (%%PRINT-STREAM STREAM "\"" (%WRAPPER-VALUE SELF) "\"")
       (%%PRINT-STREAM STREAM (%WRAPPER-VALUE SELF)))))
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" TEST-VALUE-000
       "' is not a valid case option")
      (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))

;;; (DEFUN (PPRINT-AS-ATOMIC-OBJECT? BOOLEAN) ...)

(CL:DEFUN PPRINT-AS-ATOMIC-OBJECT? (SELF)
  (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE SELF)))
   (CL:COND
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-NEW-PPRINT-LOGIC-NAMED-DESCRIPTION)
     (CL:PROGN CL:T))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-NEW-PPRINT-LOGIC-PROPOSITION)
     (CL:PROGN CL:NIL))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-NEW-PPRINT-LOGIC-DESCRIPTION)
     (CL:PROGN CL:NIL))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-NEW-PPRINT-STELLA-COLLECTION)
     (CL:PROGN CL:NIL))
    ((CL:EQ TEST-VALUE-000 SGT-NEW-PPRINT-STELLA-CONS) (CL:PROGN CL:NIL))
    (CL:T CL:T))))

;;; (DEFUN PPRINT-COMPOSITE-OBJECT ...)

(CL:DEFUN PPRINT-COMPOSITE-OBJECT (SELF STREAM)
  (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE SELF)))
   (CL:COND
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-NEW-PPRINT-LOGIC-PROPOSITION)
     (CL:PROGN (PPRINT-PROPOSITION SELF STREAM)))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-NEW-PPRINT-LOGIC-DESCRIPTION)
     (CL:PROGN (PPRINT-DESCRIPTION SELF STREAM)))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-NEW-PPRINT-STELLA-COLLECTION)
     (CL:PROGN (PPRINT-STELLA-COLLECTION SELF STREAM)))
    ((CL:EQ TEST-VALUE-000 SGT-NEW-PPRINT-STELLA-CONS)
     (CL:PROGN (PPRINT-STELLA-CONS SELF STREAM)))
    (CL:T (CL:WARN "UNKNOWN composite object: `~A'" SELF)))))

;;; (DEFUN PPRINT-OBJECT ...)

(CL:DEFUN PPRINT-OBJECT (SELF STREAM)
  (CL:COND ((CL:EQ SELF NULL))
   ((CL:NOT (PPRINT-AS-ATOMIC-OBJECT? SELF))
    (PPRINT-COMPOSITE-OBJECT SELF STREAM))
   ((CL:NOT (CL:EQ *PPRINT-ATOMIC-OBJECT-RENDERER* NULL))
    (CL:FUNCALL *PPRINT-ATOMIC-OBJECT-RENDERER* SELF STREAM))
   (CL:T (PPRINT-ATOMIC-OBJECT SELF STREAM))))

;;; (DEFUN PPRINT-ARGUMENTS ...)

(CL:DEFUN PPRINT-ARGUMENTS (ARGUMENTS SEPARATELINES? OMITLASTARGUMENT? STREAM)
  (CL:WHEN (CL:EQ ARGUMENTS NULL) (CL:RETURN-FROM PPRINT-ARGUMENTS))
  (CL:LET*
   ((ARGUMENTSITERATOR
     (CL:IF OMITLASTARGUMENT? (BUT-LAST ARGUMENTS)
      (ALLOCATE-ITERATOR ARGUMENTS)))
    (VISIBLEARGCOUNT (VISIBLE-ARGUMENTS-COUNT ARGUMENTS)) (ARGINDEX 0))
   (CL:DECLARE (CL:TYPE CL:FIXNUM VISIBLEARGCOUNT ARGINDEX))
   (CL:WHEN (CL:AND OMITLASTARGUMENT? (VISIBLE-ARGUMENT? (LAST ARGUMENTS)))
    (CL:SETQ VISIBLEARGCOUNT (CL:1- VISIBLEARGCOUNT)))
   (CL:LET* ((ARG NULL) (ITER-000 ARGUMENTSITERATOR))
    (CL:LOOP WHILE (NEXT? ITER-000) DO (CL:SETQ ARG (%VALUE ITER-000))
     (CL:WHEN (CL:OR (VISIBLE-ARGUMENT? ARG) (CL:= VISIBLEARGCOUNT 0))
      (CL:SETQ ARGINDEX (CL:1+ ARGINDEX))
      (CL:WHEN (CL:> ARGINDEX 1)
       (CL:IF SEPARATELINES? (PPRINT-NEWLINE STREAM)
        (%%PRINT-STREAM STREAM " ")))
      (PPRINT-OBJECT ARG STREAM))))))

;;; (DEFUN (SHORT-TERM? BOOLEAN) ...)

(CL:DEFUN SHORT-TERM? (ARG)
  (CL:LET* ((TEST-VALUE-001 (SAFE-PRIMARY-TYPE ARG)))
   (CL:COND
    ((SUBTYPE-OF? TEST-VALUE-001 SGT-NEW-PPRINT-STELLA-LITERAL-WRAPPER)
     (CL:PROGN
      (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE ARG)))
       (CL:COND
        ((SUBTYPE-OF-STRING? TEST-VALUE-000)
         (CL:PROGN
          (<
           (CL:THE CL:FIXNUM
            (CL:LENGTH (CL:THE CL:SIMPLE-STRING (%WRAPPER-VALUE ARG))))
           9)))
        ((SUBTYPE-OF? TEST-VALUE-000
          SGT-NEW-PPRINT-STELLA-MUTABLE-STRING-WRAPPER)
         (CL:PROGN
          (<
           (CL:THE CL:FIXNUM
            (CL:LENGTH (CL:THE CL:SIMPLE-STRING (%WRAPPER-VALUE ARG))))
           9)))
        (CL:T CL:T)))))
    ((SUBTYPE-OF-SYMBOL? TEST-VALUE-001)
     (CL:PROGN
      (<
       (CL:THE CL:FIXNUM
        (CL:LENGTH (CL:THE CL:SIMPLE-STRING (%SYMBOL-NAME ARG))))
       9)))
    ((SUBTYPE-OF? TEST-VALUE-001 SGT-NEW-PPRINT-LOGIC-PATTERN-VARIABLE)
     (CL:PROGN
      (<
       (CL:THE CL:FIXNUM
        (CL:LENGTH
         (CL:THE CL:SIMPLE-STRING (%SYMBOL-NAME (%SKOLEM-NAME ARG)))))
       9)))
    ((SUBTYPE-OF? TEST-VALUE-001 SGT-NEW-PPRINT-LOGIC-LOGIC-OBJECT)
     (CL:PROGN
      (CL:LET* ((NAME (OBJECT-NAME ARG)))
       (CL:IF (CL:NOT (CL:EQ NAME NULL))
        (<
         (CL:THE CL:FIXNUM
          (CL:LENGTH (CL:THE CL:SIMPLE-STRING (%SYMBOL-NAME NAME))))
         9)
        CL:NIL))))
    (CL:T CL:NIL))))

;;; (DEFGLOBAL *DOWNCASE-STANDARD-KIF-OPERATORS?* ...)

(CL:DEFVAR *DOWNCASE-STANDARD-KIF-OPERATORS?* CL:T)

;;; (DEFUN (OPERATOR-TO-STRING STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T) CL:SIMPLE-STRING) OPERATOR-TO-STRING))
(CL:DEFUN OPERATOR-TO-STRING (OPERATOR)
  (CL:WHEN (CL:EQ OPERATOR NULL) (CL:RETURN-FROM OPERATOR-TO-STRING "NULL"))
  (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE OPERATOR)))
   (CL:COND
    ((SUBTYPE-OF-SURROGATE? TEST-VALUE-000)
     (CL:PROGN
      (CL:LET* ((PRINTNAME (STRINGIFIED-SURROGATE OPERATOR)))
       (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING PRINTNAME))
       (CL:COND
        ((CL:OR (CL:EQ OPERATOR SGT-NEW-PPRINT-PL-KERNEL-KB-AND)
          (CL:EQ OPERATOR SGT-NEW-PPRINT-PL-KERNEL-KB-OR)
          (CL:EQ OPERATOR SGT-NEW-PPRINT-PL-KERNEL-KB-NOT)
          (CL:EQ OPERATOR SGT-NEW-PPRINT-PL-KERNEL-KB-FAIL)
          (CL:EQ OPERATOR SGT-NEW-PPRINT-PL-KERNEL-KB-FORALL)
          (CL:EQ OPERATOR SGT-NEW-PPRINT-PL-KERNEL-KB-EXISTS)
          (CL:EQ OPERATOR SGT-NEW-PPRINT-PL-KERNEL-KB-KAPPA)
          (CL:EQ OPERATOR SGT-NEW-PPRINT-PL-KERNEL-KB-SUBSET-OF)
          (CL:EQ OPERATOR SGT-NEW-PPRINT-PL-KERNEL-KB-SETOF)
          (CL:EQ OPERATOR SGT-NEW-PPRINT-PL-KERNEL-KB-LISTOF)
          (CL:EQ OPERATOR SGT-NEW-PPRINT-PL-KERNEL-KB-BAGOF)
          (CL:EQ OPERATOR SGT-NEW-PPRINT-STELLA-TRUE)
          (CL:EQ OPERATOR SGT-NEW-PPRINT-STELLA-FALSE))
         (CL:WHEN *DOWNCASE-STANDARD-KIF-OPERATORS?*
          (CL:SETQ PRINTNAME (STRING-DOWNCASE PRINTNAME))))
        ((CL:EQ OPERATOR SGT-NEW-PPRINT-PL-KERNEL-KB-EQUIVALENT)
         (CL:SETQ PRINTNAME "="))
        (CL:T))
       PRINTNAME)))
    ((SUBTYPE-OF-SYMBOL? TEST-VALUE-000)
     (CL:PROGN (MAYBE-DOWNCASE (%SYMBOL-NAME OPERATOR))))
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" TEST-VALUE-000
       "' is not a valid case option")
      (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))

;;; (DEFUN PPRINT-OPERATOR-WITH-ARGUMENTS ...)

(CL:DEFUN PPRINT-OPERATOR-WITH-ARGUMENTS (OPERATORNAME ARGUMENTS SEPARATELINES? OMITLASTARGUMENT? STREAM)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING OPERATORNAME))
  #+MCL
  (CL:CHECK-TYPE OPERATORNAME CL:SIMPLE-STRING)
  (CL:LET*
   ((OPERATORINDENT (CL:+ (CL:THE CL:FIXNUM (CL:LENGTH OPERATORNAME)) 2)))
   (CL:DECLARE (CL:TYPE CL:FIXNUM OPERATORINDENT))
   (%%PRINT-STREAM STREAM "(" OPERATORNAME " ")
   (CL:SETQ *PPRINT-INDENT* (CL:+ *PPRINT-INDENT* OPERATORINDENT))
   (PPRINT-ARGUMENTS ARGUMENTS SEPARATELINES? OMITLASTARGUMENT? STREAM)
   (CL:SETQ *PPRINT-INDENT* (CL:- *PPRINT-INDENT* OPERATORINDENT))
   (%%PRINT-STREAM STREAM ")")))

;;; (DEFUN PPRINT-RELATION-PROPOSITION ...)

(CL:DEFUN PPRINT-RELATION-PROPOSITION (SELF STREAM)
  (CL:LET* ((NARGS (LENGTH (%ARGUMENTS SELF))))
   (CL:DECLARE (CL:TYPE CL:FIXNUM NARGS)) (%%PRINT-STREAM STREAM "(")
   (PPRINT-OBJECT (%OPERATOR SELF) STREAM)
   (CL:SETQ *PPRINT-INDENT* (CL:+ *PPRINT-INDENT* 3))
   (CL:LET* ((TEST-VALUE-000 CL:NIL))
    (CL:IF (CL:>= NARGS 4) (CL:SETQ TEST-VALUE-000 CL:T)
     (CL:PROGN (CL:SETQ TEST-VALUE-000 (CL:= NARGS 3))
      (CL:WHEN TEST-VALUE-000
       (CL:LET* ((ALWAYS?-000 CL:T))
        (CL:LET*
         ((ARG NULL) (VECTOR-000 (%ARGUMENTS SELF)) (INDEX-000 0)
          (LENGTH-000 (LENGTH VECTOR-000)))
         (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
         (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
          (CL:SETQ ARG
           (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-000))
            INDEX-000))
          (CL:WHEN (SHORT-TERM? ARG) (CL:SETQ ALWAYS?-000 CL:NIL) (CL:RETURN))
          (CL:SETQ INDEX-000 (CL:1+ INDEX-000))))
        (CL:SETQ TEST-VALUE-000 ALWAYS?-000)))))
    (CL:IF TEST-VALUE-000
     (CL:LET*
      ((ARG NULL) (VECTOR-001 (%ARGUMENTS SELF)) (INDEX-001 0)
       (LENGTH-001 (LENGTH VECTOR-001)))
      (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-001 LENGTH-001))
      (CL:LOOP WHILE (CL:< INDEX-001 LENGTH-001) DO
       (CL:SETQ ARG
        (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-001)) INDEX-001))
       (PPRINT-NEWLINE STREAM) (PPRINT-OBJECT ARG STREAM)
       (CL:SETQ INDEX-001 (CL:1+ INDEX-001))))
     (CL:LET*
      ((ARG NULL) (VECTOR-002 (%ARGUMENTS SELF)) (INDEX-002 0)
       (LENGTH-002 (LENGTH VECTOR-002)))
      (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-002 LENGTH-002))
      (CL:LOOP WHILE (CL:< INDEX-002 LENGTH-002) DO
       (CL:SETQ ARG
        (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-002)) INDEX-002))
       (CL:IF (PPRINT-AS-ATOMIC-OBJECT? ARG) (%%PRINT-STREAM STREAM " ")
        (PPRINT-NEWLINE STREAM))
       (PPRINT-OBJECT ARG STREAM) (CL:SETQ INDEX-002 (CL:1+ INDEX-002))))))
   (CL:SETQ *PPRINT-INDENT* (CL:- *PPRINT-INDENT* 3))
   (%%PRINT-STREAM STREAM ")")))

;;; (DEFUN PPRINT-FUNCTION-TERM ...)

(CL:DEFUN PPRINT-FUNCTION-TERM (SELF STREAM)
  (%%PRINT-STREAM STREAM "(")
  (PPRINT-OBJECT (%OPERATOR SELF) STREAM)
  (CL:LET* ((TEST-VALUE-000 CL:NIL))
   (CL:IF (CL:>= (LENGTH (%ARGUMENTS SELF)) 5) (CL:SETQ TEST-VALUE-000 CL:T)
    (CL:PROGN (CL:SETQ TEST-VALUE-000 (CL:= (LENGTH (%ARGUMENTS SELF)) 4))
     (CL:WHEN TEST-VALUE-000
      (CL:LET* ((ALWAYS?-000 CL:T))
       (CL:LET*
        ((ARG NULL) (VECTOR-000 (%ARGUMENTS SELF)) (INDEX-000 0)
         (LENGTH-000 (LENGTH VECTOR-000)))
        (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
        (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
         (CL:SETQ ARG
          (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-000))
           INDEX-000))
         (CL:WHEN (SHORT-TERM? ARG) (CL:SETQ ALWAYS?-000 CL:NIL) (CL:RETURN))
         (CL:SETQ INDEX-000 (CL:1+ INDEX-000))))
       (CL:SETQ TEST-VALUE-000 ALWAYS?-000)))))
   (CL:IF TEST-VALUE-000
    (CL:LET*
     ((INDENT
       (CL:+
        (CL:THE CL:FIXNUM
         (CL:LENGTH
          (CL:THE CL:SIMPLE-STRING (%SYMBOL-NAME (%OPERATOR SELF)))))
        2))
      (FIRST? CL:T))
     (CL:DECLARE (CL:TYPE CL:FIXNUM INDENT))
     (CL:SETQ *PPRINT-INDENT* (CL:+ *PPRINT-INDENT* INDENT))
     (CL:LET* ((ARG NULL) (ITER-000 (BUT-LAST (%ARGUMENTS SELF))))
      (CL:LOOP WHILE (NEXT? ITER-000) DO (CL:SETQ ARG (%VALUE ITER-000))
       (CL:IF FIRST?
        (CL:PROGN (%%PRINT-STREAM STREAM " ") (CL:SETQ FIRST? CL:NIL))
        (PPRINT-NEWLINE STREAM))
       (PPRINT-OBJECT ARG STREAM)))
     (CL:SETQ *PPRINT-INDENT* (CL:- *PPRINT-INDENT* INDENT)))
    (CL:LET* ((ARG NULL) (ITER-001 (BUT-LAST (%ARGUMENTS SELF))))
     (CL:LOOP WHILE (NEXT? ITER-001) DO (CL:SETQ ARG (%VALUE ITER-001))
      (%%PRINT-STREAM STREAM " ") (PPRINT-OBJECT ARG STREAM)))))
  (%%PRINT-STREAM STREAM ")"))

;;; (DEFUN PPRINT-FUNCTION-PROPOSITION ...)

(CL:DEFUN PPRINT-FUNCTION-PROPOSITION (SELF STREAM)
  (CL:LET* ((LASTARG (LAST (%ARGUMENTS SELF)))) (%%PRINT-STREAM STREAM "(= ")
   (CL:SETQ *PPRINT-INDENT* (CL:+ *PPRINT-INDENT* 3))
   (PPRINT-FUNCTION-TERM SELF STREAM)
   (CL:IF (PPRINT-AS-ATOMIC-OBJECT? LASTARG) (%%PRINT-STREAM STREAM " ")
    (PPRINT-NEWLINE STREAM))
   (PPRINT-OBJECT LASTARG STREAM)
   (CL:SETQ *PPRINT-INDENT* (CL:- *PPRINT-INDENT* 3))
   (%%PRINT-STREAM STREAM ")")))

;;; (DEFUN PPRINT-PROPOSITION ...)

(CL:DEFUN PPRINT-PROPOSITION (SELF STREAM)
  (CL:WHEN (CL:NOT (CL:EQ *PPRINT-BEFORE-PROPOSITION-FUNCTION* NULL))
   (CL:FUNCALL *PPRINT-BEFORE-PROPOSITION-FUNCTION* SELF STREAM))
  (CL:LET* ((TEST-VALUE-000 (%KIND SELF)))
   (CL:COND
    ((CL:OR (CL:EQ TEST-VALUE-000 KWD-NEW-PPRINT-PREDICATE)
      (CL:EQ TEST-VALUE-000 KWD-NEW-PPRINT-ISA))
     (PPRINT-RELATION-PROPOSITION SELF STREAM))
    ((CL:EQ TEST-VALUE-000 KWD-NEW-PPRINT-FUNCTION)
     (CL:IF *PRINTFUNCTIONSASRELATIONS?*
      (PPRINT-RELATION-PROPOSITION SELF STREAM)
      (PPRINT-FUNCTION-PROPOSITION SELF STREAM)))
    ((CL:EQ TEST-VALUE-000 KWD-NEW-PPRINT-AND) (%%PRINT-STREAM STREAM "(")
     (PPRINT-OBJECT (%OPERATOR SELF) STREAM)
     (CL:SETQ *PPRINT-INDENT* (CL:+ *PPRINT-INDENT* 5))
     (%%PRINT-STREAM STREAM " ")
     (PPRINT-ARGUMENTS (%ARGUMENTS SELF) CL:T CL:NIL STREAM)
     (CL:SETQ *PPRINT-INDENT* (CL:- *PPRINT-INDENT* 5))
     (%%PRINT-STREAM STREAM ")"))
    ((CL:EQ TEST-VALUE-000 KWD-NEW-PPRINT-OR) (%%PRINT-STREAM STREAM "(")
     (PPRINT-OBJECT (%OPERATOR SELF) STREAM)
     (CL:SETQ *PPRINT-INDENT* (CL:+ *PPRINT-INDENT* 4))
     (%%PRINT-STREAM STREAM " ")
     (PPRINT-ARGUMENTS (%ARGUMENTS SELF) CL:T CL:NIL STREAM)
     (CL:SETQ *PPRINT-INDENT* (CL:- *PPRINT-INDENT* 4))
     (%%PRINT-STREAM STREAM ")"))
    ((CL:EQ TEST-VALUE-000 KWD-NEW-PPRINT-NOT) (%%PRINT-STREAM STREAM "(")
     (PPRINT-OBJECT (%OPERATOR SELF) STREAM)
     (CL:SETQ *PPRINT-INDENT* (CL:+ *PPRINT-INDENT* 5))
     (%%PRINT-STREAM STREAM " ")
     (PPRINT-OBJECT
      (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS SELF))) 0)
      STREAM)
     (CL:SETQ *PPRINT-INDENT* (CL:- *PPRINT-INDENT* 5))
     (%%PRINT-STREAM STREAM ")"))
    ((CL:EQ TEST-VALUE-000 KWD-NEW-PPRINT-EQUIVALENT)
     (%%PRINT-STREAM STREAM "(=")
     (CL:SETQ *PPRINT-INDENT* (CL:+ *PPRINT-INDENT* 3))
     (%%PRINT-STREAM STREAM " ")
     (PPRINT-ARGUMENTS (%ARGUMENTS SELF) CL:NIL CL:NIL STREAM)
     (CL:SETQ *PPRINT-INDENT* (CL:- *PPRINT-INDENT* 3))
     (%%PRINT-STREAM STREAM ")"))
    ((CL:EQ TEST-VALUE-000 KWD-NEW-PPRINT-FAIL) (%%PRINT-STREAM STREAM "(")
     (PPRINT-OBJECT (%OPERATOR SELF) STREAM)
     (CL:SETQ *PPRINT-INDENT* (CL:+ *PPRINT-INDENT* 6))
     (%%PRINT-STREAM STREAM " ")
     (PPRINT-PROPOSITION
      (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS SELF))) 0)
      STREAM)
     (CL:SETQ *PPRINT-INDENT* (CL:- *PPRINT-INDENT* 6))
     (%%PRINT-STREAM STREAM ")"))
    ((CL:EQ TEST-VALUE-000 KWD-NEW-PPRINT-CONSTANT)
     (PPRINT-OBJECT (GENERATE-OPERATOR SELF) STREAM))
    ((CL:EQ TEST-VALUE-000 KWD-NEW-PPRINT-EXISTS) (%%PRINT-STREAM STREAM "(")
     (PPRINT-OBJECT (%OPERATOR SELF) STREAM)
     (CL:SETQ *PPRINT-INDENT* (CL:+ *PPRINT-INDENT* 8))
     (%%PRINT-STREAM STREAM " ")
     (PPRINT-QUANTIFIED-VARIABLES
      (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS SELF)
       SYM-NEW-PPRINT-LOGIC-IO-VARIABLES NULL)
      CL:NIL STREAM)
     (CL:SETQ *PPRINT-INDENT* (CL:- *PPRINT-INDENT* 5))
     (PPRINT-NEWLINE STREAM)
     (PPRINT-PROPOSITION
      (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS SELF))) 0)
      STREAM)
     (CL:SETQ *PPRINT-INDENT* (CL:- *PPRINT-INDENT* 3))
     (%%PRINT-STREAM STREAM ")"))
    ((CL:EQ TEST-VALUE-000 KWD-NEW-PPRINT-FORALL) (%%PRINT-STREAM STREAM "(")
     (PPRINT-OBJECT (%OPERATOR SELF) STREAM)
     (CL:SETQ *PPRINT-INDENT* (CL:+ *PPRINT-INDENT* 8))
     (%%PRINT-STREAM STREAM " ")
     (PPRINT-QUANTIFIED-VARIABLES
      (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS SELF)
       SYM-NEW-PPRINT-LOGIC-IO-VARIABLES NULL)
      CL:NIL STREAM)
     (CL:SETQ *PPRINT-INDENT* (CL:- *PPRINT-INDENT* 5))
     (PPRINT-NEWLINE STREAM) (%%PRINT-STREAM STREAM "(=> ")
     (CL:SETQ *PPRINT-INDENT* (CL:+ *PPRINT-INDENT* 4))
     (PPRINT-PROPOSITION
      (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS SELF))) 0)
      STREAM)
     (PPRINT-NEWLINE STREAM)
     (PPRINT-PROPOSITION
      (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS SELF))) 1)
      STREAM)
     (CL:SETQ *PPRINT-INDENT* (CL:- *PPRINT-INDENT* 7))
     (%%PRINT-STREAM STREAM ")"))
    ((CL:EQ TEST-VALUE-000 KWD-NEW-PPRINT-IMPLIES)
     (PPRINT-IMPLIES-PROPOSITION SELF STREAM))
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" TEST-VALUE-000
       "' is not a valid case option")
      (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
  (CL:WHEN (CL:NOT (CL:EQ *PPRINT-AFTER-PROPOSITION-FUNCTION* NULL))
   (CL:FUNCALL *PPRINT-AFTER-PROPOSITION-FUNCTION* SELF STREAM)))

;;; (DEFUN PPRINT-QUANTIFIED-VARIABLES ...)

(CL:DEFUN PPRINT-QUANTIFIED-VARIABLES (VARIABLES INCLUDETYPES? STREAM)
  (CL:WHEN (CL:EQ VARIABLES NULL) (CL:RETURN-FROM PPRINT-QUANTIFIED-VARIABLES))
  (%%PRINT-STREAM STREAM "(")
  (CL:SETQ *PPRINT-INDENT* (CL:1+ *PPRINT-INDENT*))
  (CL:LET*
   ((VBL NULL) (VECTOR-000 VARIABLES) (INDEX-000 0)
    (LENGTH-000 (LENGTH VECTOR-000)) (I NULL-INTEGER) (ITER-000 1))
   (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000 I ITER-000))
   (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
    (CL:SETQ VBL
     (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-000)) INDEX-000))
    (CL:SETQ I ITER-000) (CL:WHEN INCLUDETYPES? (%%PRINT-STREAM STREAM "("))
    (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE VBL)))
     (CL:COND
      ((SUBTYPE-OF? TEST-VALUE-000 SGT-NEW-PPRINT-LOGIC-PATTERN-VARIABLE)
       (CL:PROGN (PPRINT-OBJECT VBL STREAM)))
      ((SUBTYPE-OF? TEST-VALUE-000 SGT-NEW-PPRINT-LOGIC-SKOLEM)
       (CL:PROGN (PPRINT-OBJECT VBL STREAM)))
      (CL:T
       (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
        (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" TEST-VALUE-000
         "' is not a valid case option")
        (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
    (CL:WHEN INCLUDETYPES? (PPRINT-OBJECT (LOGICAL-TYPE VBL) STREAM)
     (%%PRINT-STREAM STREAM ")"))
    (CL:WHEN (CL:< I (LENGTH VARIABLES))
     (CL:IF INCLUDETYPES? (PPRINT-NEWLINE STREAM)
      (%%PRINT-STREAM STREAM " ")))
    (CL:SETQ INDEX-000 (CL:1+ INDEX-000)) (CL:SETQ ITER-000 (CL:1+ ITER-000))))
  (CL:SETQ *PPRINT-INDENT* (CL:1- *PPRINT-INDENT*))
  (%%PRINT-STREAM STREAM ")"))

;;; (DEFUN PPRINT-NAMED-DESCRIPTION ...)

(CL:DEFUN PPRINT-NAMED-DESCRIPTION (SELF STREAM)
  (CL:IF (CL:NOT (CL:EQ *PPRINT-ATOMIC-OBJECT-RENDERER* NULL))
   (CL:FUNCALL *PPRINT-ATOMIC-OBJECT-RENDERER* SELF STREAM)
   (PPRINT-ATOMIC-OBJECT SELF STREAM)))

;;; (DEFUN PPRINT-DESCRIPTION ...)

(CL:DEFUN PPRINT-DESCRIPTION (SELF STREAM)
  (CL:COND ((NAMED-DESCRIPTION? SELF) (PPRINT-NAMED-DESCRIPTION SELF STREAM))
   ((CL:NOT
     (CL:EQ
      (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS SELF)
       SYM-NEW-PPRINT-LOGIC-COMPLEMENT-DESCRIPTION NULL)
      NULL))
    (%%PRINT-STREAM STREAM "("
     (OPERATOR-TO-STRING SGT-NEW-PPRINT-PL-KERNEL-KB-NOT) " ")
    (CL:SETQ *PPRINT-INDENT* (CL:+ *PPRINT-INDENT* 5))
    (PPRINT-OBJECT
     (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS SELF)
      SYM-NEW-PPRINT-LOGIC-COMPLEMENT-DESCRIPTION NULL)
     STREAM)
    (CL:SETQ *PPRINT-INDENT* (CL:- *PPRINT-INDENT* 5))
    (%%PRINT-STREAM STREAM ")"))
   (CL:T
    (%%PRINT-STREAM STREAM "("
     (OPERATOR-TO-STRING SGT-NEW-PPRINT-PL-KERNEL-KB-KAPPA) " ")
    (CL:SETQ *PPRINT-INDENT* (CL:+ *PPRINT-INDENT* 7))
    (PPRINT-OBJECT (%IO-VARIABLES SELF) STREAM)
    (CL:SETQ *PPRINT-INDENT* (CL:- *PPRINT-INDENT* 4))
    (PPRINT-OBJECT (%PROPOSITION SELF) STREAM)
    (CL:SETQ *PPRINT-INDENT* (CL:- *PPRINT-INDENT* 3))
    (%%PRINT-STREAM STREAM ")"))))

;;; (DEFUN PPRINT-DESCRIPTION-BODY ...)

(CL:DEFUN PPRINT-DESCRIPTION-BODY (DESCRIPTION STREAM)
  (CL:COND
   ((CL:EQ (%PROPOSITION DESCRIPTION) NULL) (%%PRINT-STREAM STREAM "(")
    (PPRINT-OBJECT (%SURROGATE-VALUE-INVERSE DESCRIPTION) STREAM)
    (CL:SETQ *PPRINT-INDENT* (CL:+ *PPRINT-INDENT* 3))
    (CL:IF (CL:NOT (CL:EQ *SKOLEMNAMEMAPPINGTABLE* NULL))
     (CL:LET*
      ((VAR NULL) (VECTOR-000 (%IO-VARIABLES DESCRIPTION)) (INDEX-000 0)
       (LENGTH-000 (LENGTH VECTOR-000)))
      (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
      (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
       (CL:SETQ VAR
        (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-000)) INDEX-000))
       (%%PRINT-STREAM STREAM " ")
       (CL:IF (CL:NOT (CL:EQ (LOOKUP *SKOLEMNAMEMAPPINGTABLE* VAR) NULL))
        (PPRINT-OBJECT (LOOKUP *SKOLEMNAMEMAPPINGTABLE* VAR) STREAM)
        (PPRINT-OBJECT VAR STREAM))
       (CL:SETQ INDEX-000 (CL:1+ INDEX-000))))
     (CL:LET*
      ((NAME NULL)
       (ITER-000 (%THE-CONS-LIST (%IO-VARIABLE-NAMES DESCRIPTION))))
      (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
       (CL:SETQ NAME (%%VALUE ITER-000)) (%%PRINT-STREAM STREAM " ")
       (PPRINT-OBJECT NAME STREAM) (CL:SETQ ITER-000 (%%REST ITER-000)))))
    (%%PRINT-STREAM STREAM ")")
    (CL:SETQ *PPRINT-INDENT* (CL:+ *PPRINT-INDENT* 3)))
   (CL:T (PPRINT-PROPOSITION (%PROPOSITION DESCRIPTION) STREAM))))

;;; (DEFUN PPRINT-NAMED-DESCRIPTIONS-AS-RULE ...)

(CL:DEFUN PPRINT-NAMED-DESCRIPTIONS-AS-RULE (HEAD TAIL OPERATORPREFIX STREAM)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING OPERATORPREFIX))
  #+MCL
  (CL:CHECK-TYPE OPERATORPREFIX CL:SIMPLE-STRING)
  (CL:LET*
   ((OPERATORINDENT (CL:+ (CL:THE CL:FIXNUM (CL:LENGTH OPERATORPREFIX)) 2))
    (VARIABLES NIL))
   (CL:DECLARE (CL:TYPE CL:FIXNUM OPERATORINDENT))
   (CL:LET*
    ((V NULL) (ITER-000 SYSTEM-DEFINED-ARGUMENT-NAMES)
     (I (INTERVAL 1 (ARITY HEAD))) (COLLECT-000 NULL))
    (CL:LOOP WHILE (CL:AND (CL:NOT (CL:EQ ITER-000 NIL)) (NEXT? I)) DO
     (CL:SETQ V (%%VALUE ITER-000))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN (CL:SETQ COLLECT-000 (CONS V NIL))
       (CL:IF (CL:EQ VARIABLES NIL) (CL:SETQ VARIABLES COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST VARIABLES COLLECT-000)))
      (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS V NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:SETQ *PPRINT-INDENT* (CL:+ *PPRINT-INDENT* 3))
   (%%PRINT-STREAM STREAM "("
    (OPERATOR-TO-STRING SGT-NEW-PPRINT-PL-KERNEL-KB-FORALL) " (")
   (PPRINT-OBJECT (%%VALUE VARIABLES) STREAM)
   (CL:LET* ((V NULL) (ITER-001 (%%REST VARIABLES)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
     (CL:SETQ V (%%VALUE ITER-001)) (%%PRINT-STREAM STREAM " ")
     (PPRINT-OBJECT V STREAM) (CL:SETQ ITER-001 (%%REST ITER-001))))
   (%%PRINT-STREAM STREAM ")") (PPRINT-NEWLINE STREAM)
   (%%PRINT-STREAM STREAM "(" OPERATORPREFIX " (") (PPRINT-OBJECT HEAD STREAM)
   (CL:SETQ *PPRINT-INDENT* (CL:+ *PPRINT-INDENT* OPERATORINDENT))
   (CL:LET* ((V NULL) (ITER-002 VARIABLES))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-002 NIL)) DO
     (CL:SETQ V (%%VALUE ITER-002)) (%%PRINT-STREAM STREAM " ")
     (PPRINT-OBJECT V STREAM) (CL:SETQ ITER-002 (%%REST ITER-002))))
   (%%PRINT-STREAM STREAM ")") (PPRINT-NEWLINE STREAM)
   (%%PRINT-STREAM STREAM "(") (PPRINT-OBJECT TAIL STREAM)
   (CL:LET* ((V NULL) (ITER-003 VARIABLES))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-003 NIL)) DO
     (CL:SETQ V (%%VALUE ITER-003)) (%%PRINT-STREAM STREAM " ")
     (PPRINT-OBJECT V STREAM) (CL:SETQ ITER-003 (%%REST ITER-003))))
   (%%PRINT-STREAM STREAM "))")
   (CL:SETQ *PPRINT-INDENT* (CL:- *PPRINT-INDENT* OPERATORINDENT))
   (CL:SETQ *PPRINT-INDENT* (CL:- *PPRINT-INDENT* 3))))

;;; (DEFUN HELP-PPRINT-DESCRIPTIONS-AS-RULE ...)

(CL:DEFUN HELP-PPRINT-DESCRIPTIONS-AS-RULE (DESC STREAM)
  (CL:LET*
   ((EXISTENTIALS
     (COPY-CONS-LIST-TO-VARIABLES-VECTOR
      (TOP-LEVEL-EXISTENTIAL-VARIABLES DESC)))
    (EXISTENTIALVARIABLES? (NON-EMPTY? EXISTENTIALS)))
   (CL:WHEN EXISTENTIALVARIABLES?
    (%%PRINT-STREAM STREAM "("
     (OPERATOR-TO-STRING SGT-NEW-PPRINT-PL-KERNEL-KB-EXISTS) " ")
    (CL:SETQ *PPRINT-INDENT* (CL:+ *PPRINT-INDENT* 8))
    (PPRINT-QUANTIFIED-VARIABLES EXISTENTIALS CL:NIL STREAM)
    (CL:SETQ *PPRINT-INDENT* (CL:- *PPRINT-INDENT* 5))
    (PPRINT-NEWLINE STREAM))
   (PPRINT-DESCRIPTION-BODY DESC STREAM)
   (CL:WHEN EXISTENTIALVARIABLES? (%%PRINT-STREAM STREAM ")")
    (CL:SETQ *PPRINT-INDENT* (CL:- *PPRINT-INDENT* 3)))))

;;; (DEFUN PPRINT-DESCRIPTIONS-AS-RULE ...)

(CL:DEFUN PPRINT-DESCRIPTIONS-AS-RULE (HEAD TAIL RULE STREAM)
  (CL:LET*
   ((HEADVARIABLES NULL) (TAILVARIABLES NULL)
    (FORWARDRULE?
     (%WRAPPER-VALUE
      (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS RULE)
       SYM-NEW-PPRINT-LOGIC-FORWARD-ONLY? FALSE-WRAPPER)))
    (OPERATORPREFIX
     (%SYMBOL-NAME (CHOOSE-IMPLICATION-OPERATOR RULE FORWARDRULE?)))
    (OPERATORINDENT (CL:+ (CL:THE CL:FIXNUM (CL:LENGTH OPERATORPREFIX)) 2)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING OPERATORPREFIX)
    (CL:TYPE CL:FIXNUM OPERATORINDENT))
   (CL:WHEN (CL:OR (DELETED? HEAD) (DELETED? TAIL))
    (CL:LET* ((*PRINTREADABLY?* CL:NIL))
     (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
     (PPRINT-OBJECT (WRAP-STRING "(=> <DeLeTeD ArGuMeNt(S)>)") STREAM))
    (CL:RETURN-FROM PPRINT-DESCRIPTIONS-AS-RULE))
   (CL:WHEN FORWARDRULE?
    (CL:LET* ((TEMP HEAD)) (CL:SETQ HEAD TAIL) (CL:SETQ TAIL TEMP)))
   (CL:WHEN
    (CL:AND (CL:EQ (%PROPOSITION TAIL) NULL) (CL:EQ (%PROPOSITION HEAD) NULL))
    (PPRINT-NAMED-DESCRIPTIONS-AS-RULE HEAD TAIL OPERATORPREFIX STREAM)
    (CL:RETURN-FROM PPRINT-DESCRIPTIONS-AS-RULE))
   (CL:SETQ HEADVARIABLES (%IO-VARIABLES HEAD))
   (CL:SETQ TAILVARIABLES (%IO-VARIABLES TAIL))
   (CL:COND
    ((CL:EQ (%PROPOSITION TAIL) NULL) (CL:SETQ TAILVARIABLES HEADVARIABLES))
    ((CL:EQ (%PROPOSITION HEAD) NULL) (CL:SETQ HEADVARIABLES TAILVARIABLES)))
   (CLEAR REUSABLE-SKOLEM-MAPPING-TABLE)
   (CL:LET*
    ((TAILVBL NULL) (VECTOR-000 TAILVARIABLES) (INDEX-000 0)
     (LENGTH-000 (LENGTH VECTOR-000)) (HEADVBL NULL)
     (VECTOR-001 HEADVARIABLES) (INDEX-001 0)
     (LENGTH-001 (LENGTH VECTOR-001)))
    (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000 INDEX-001 LENGTH-001))
    (CL:LOOP WHILE
     (CL:AND (CL:< INDEX-000 LENGTH-000) (CL:< INDEX-001 LENGTH-001)) DO
     (CL:SETQ TAILVBL
      (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-000)) INDEX-000))
     (CL:SETQ HEADVBL
      (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-001)) INDEX-001))
     (INSERT-AT REUSABLE-SKOLEM-MAPPING-TABLE HEADVBL TAILVBL)
     (CL:SETQ INDEX-000 (CL:1+ INDEX-000))
     (CL:SETQ INDEX-001 (CL:1+ INDEX-001))))
   (%%PRINT-STREAM STREAM "("
    (OPERATOR-TO-STRING SGT-NEW-PPRINT-PL-KERNEL-KB-FORALL) " ")
   (CL:SETQ *PPRINT-INDENT* (CL:+ *PPRINT-INDENT* 8))
   (PPRINT-QUANTIFIED-VARIABLES TAILVARIABLES CL:NIL STREAM)
   (CL:SETQ *PPRINT-INDENT* (CL:- *PPRINT-INDENT* 5)) (PPRINT-NEWLINE STREAM)
   (%%PRINT-STREAM STREAM "(")
   (CL:LET* ((*PRINTREADABLY?* CL:NIL))
    (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
    (PPRINT-OBJECT (WRAP-STRING OPERATORPREFIX) STREAM))
   (%%PRINT-STREAM STREAM " ")
   (CL:SETQ *PPRINT-INDENT* (CL:+ *PPRINT-INDENT* OPERATORINDENT))
   (CL:LET* ((*SKOLEMNAMEMAPPINGTABLE* REUSABLE-SKOLEM-MAPPING-TABLE))
    (CL:DECLARE (CL:SPECIAL *SKOLEMNAMEMAPPINGTABLE*))
    (HELP-PPRINT-DESCRIPTIONS-AS-RULE HEAD STREAM))
   (CLEAR REUSABLE-SKOLEM-MAPPING-TABLE) (PPRINT-NEWLINE STREAM)
   (HELP-PPRINT-DESCRIPTIONS-AS-RULE TAIL STREAM)
   (CL:SETQ *PPRINT-INDENT* (CL:- *PPRINT-INDENT* OPERATORINDENT))
   (CL:SETQ *PPRINT-INDENT* (CL:- *PPRINT-INDENT* 3))
   (%%PRINT-STREAM STREAM "))")))

;;; (DEFUN PPRINT-IMPLIES-PROPOSITION ...)

(CL:DEFUN PPRINT-IMPLIES-PROPOSITION (SELF STREAM)
  (CL:LET*
   ((TAILARG
     (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS SELF))) 0))
    (HEADARG
     (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS SELF))) 1)))
   (CL:IF
    (CL:AND (ISA? HEADARG SGT-NEW-PPRINT-LOGIC-DESCRIPTION)
     (ISA? TAILARG SGT-NEW-PPRINT-LOGIC-DESCRIPTION))
    (PPRINT-DESCRIPTIONS-AS-RULE HEADARG TAILARG SELF STREAM)
    (PPRINT-OPERATOR-WITH-ARGUMENTS
     (OPERATOR-TO-STRING SGT-NEW-PPRINT-PL-KERNEL-KB-SUBSET-OF)
     (%ARGUMENTS SELF) CL:NIL CL:NIL STREAM))))

;;; (DEFUN PPRINT-STELLA-COLLECTION ...)

(CL:DEFUN PPRINT-STELLA-COLLECTION (SELF STREAM)
  (CL:LET* ((SET? (NO-DUPLICATES? SELF)) (FIRST? CL:T))
   (CL:IF SET?
    (CL:PROGN
     (%%PRINT-STREAM STREAM "("
      (OPERATOR-TO-STRING SGT-NEW-PPRINT-PL-KERNEL-KB-SETOF))
     (CL:SETQ *PPRINT-INDENT* (CL:+ *PPRINT-INDENT* 7)))
    (CL:PROGN
     (%%PRINT-STREAM STREAM "("
      (OPERATOR-TO-STRING SGT-NEW-PPRINT-PL-KERNEL-KB-LISTOF))
     (CL:SETQ *PPRINT-INDENT* (CL:+ *PPRINT-INDENT* 8))))
   (CL:CASE (LENGTH SELF) (0)
    (1
     (CL:LET* ((M NULL) (ITER-000 (ALLOCATE-ITERATOR SELF)))
      (CL:LOOP WHILE (NEXT? ITER-000) DO (CL:SETQ M (%VALUE ITER-000))
       (PPRINT-OBJECT M STREAM))))
    ((2 3)
     (CL:LET* ((M NULL) (ITER-001 (ALLOCATE-ITERATOR SELF)))
      (CL:LOOP WHILE (NEXT? ITER-001) DO (CL:SETQ M (%VALUE ITER-001))
       (%%PRINT-STREAM STREAM " ") (PPRINT-OBJECT M STREAM))))
    (CL:OTHERWISE
     (CL:LET* ((M NULL) (ITER-002 (ALLOCATE-ITERATOR SELF)))
      (CL:LOOP WHILE (NEXT? ITER-002) DO (CL:SETQ M (%VALUE ITER-002))
       (CL:IF FIRST?
        (CL:PROGN (%%PRINT-STREAM STREAM " ") (CL:SETQ FIRST? CL:NIL))
        (PPRINT-NEWLINE STREAM))
       (PPRINT-OBJECT M STREAM)))))
   (%%PRINT-STREAM STREAM ")")
   (CL:IF SET? (CL:SETQ *PPRINT-INDENT* (CL:- *PPRINT-INDENT* 7))
    (CL:SETQ *PPRINT-INDENT* (CL:- *PPRINT-INDENT* 8)))))

;;; (DEFUN PPRINT-STELLA-CONS ...)

(CL:DEFUN PPRINT-STELLA-CONS (SELF STREAM)
  (%%PRINT-STREAM STREAM "(")
  (CL:SETQ *PPRINT-INDENT* (CL:1+ *PPRINT-INDENT*))
  (CL:CASE (LENGTH SELF) (0) (1 (PPRINT-OBJECT (%%VALUE SELF) STREAM))
   (2 (PPRINT-OBJECT (%%VALUE SELF) STREAM) (%%PRINT-STREAM STREAM " ")
    (PPRINT-OBJECT (%%VALUE (%%REST SELF)) STREAM))
   (3 (PPRINT-OBJECT (%%VALUE SELF) STREAM) (%%PRINT-STREAM STREAM " ")
    (PPRINT-OBJECT (%%VALUE (%%REST SELF)) STREAM) (%%PRINT-STREAM STREAM " ")
    (PPRINT-OBJECT (%%VALUE (%%REST (%%REST SELF))) STREAM))
   ((4 5) (PPRINT-OBJECT (%%VALUE SELF) STREAM)
    (CL:LET* ((OBJ NULL) (ITER-000 (%%REST SELF)))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:SETQ OBJ (%%VALUE ITER-000))
      (CL:IF (CL:> *PPRINT-INDENT* 2) (PPRINT-NEWLINE STREAM)
       (%%PRINT-STREAM STREAM " "))
      (PPRINT-OBJECT OBJ STREAM) (CL:SETQ ITER-000 (%%REST ITER-000)))))
   (CL:OTHERWISE (PPRINT-OBJECT (%%VALUE SELF) STREAM)
    (CL:LET* ((OBJ NULL) (ITER-001 (%%REST SELF)))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
      (CL:SETQ OBJ (%%VALUE ITER-001)) (PPRINT-NEWLINE STREAM)
      (PPRINT-OBJECT OBJ STREAM) (CL:SETQ ITER-001 (%%REST ITER-001))))))
  (%%PRINT-STREAM STREAM ")")
  (CL:SETQ *PPRINT-INDENT* (CL:1- *PPRINT-INDENT*)))

;;; (DEFUN PPRINT-DEFINITION ...)

(CL:DEFUN PPRINT-DEFINITION (SELF HASVARIABLES? STREAM)
  (CL:WHEN (CL:NOT (CL:EQ *PPRINT-BEFORE-DEFINITION-FUNCTION* NULL))
   (CL:FUNCALL *PPRINT-BEFORE-DEFINITION-FUNCTION* SELF STREAM))
  (%%PRINT-STREAM STREAM "(")
  (PPRINT-OBJECT (%%VALUE SELF) STREAM)
  (%%PRINT-STREAM STREAM " ")
  (CL:IF (ISA? (%%VALUE (%%REST SELF)) SGT-NEW-PPRINT-STELLA-SYMBOL)
   (PPRINT-ATOMIC-OBJECT (%%VALUE (%%REST SELF)) STREAM)
   (PPRINT-OBJECT (%%VALUE (%%REST SELF)) STREAM))
  (CL:COND
   ((CL:NOT HASVARIABLES?) (CL:SETQ SELF (%%REST (%%REST SELF)))
    (CL:SETQ *PPRINT-INDENT* (CL:+ *PPRINT-INDENT* 3)))
   ((CL:> (LENGTH (%%VALUE (%%REST (%%REST SELF)))) 5)
    (CL:SETQ *PPRINT-INDENT* (CL:+ *PPRINT-INDENT* 10))
    (PPRINT-NEWLINE STREAM)
    (PPRINT-OBJECT (%%VALUE (%%REST (%%REST SELF))) STREAM)
    (CL:SETQ SELF (%%REST (%%REST (%%REST SELF))))
    (CL:SETQ *PPRINT-INDENT* (CL:- *PPRINT-INDENT* 7)))
   (CL:T (%%PRINT-STREAM STREAM " ")
    (PPRINT-OBJECT (%%VALUE (%%REST (%%REST SELF))) STREAM)
    (CL:SETQ SELF (%%REST (%%REST (%%REST SELF))))
    (CL:SETQ *PPRINT-INDENT* (CL:+ *PPRINT-INDENT* 3))))
  (CL:LOOP WHILE (CL:NOT (CL:EQ SELF NIL)) DO (PPRINT-NEWLINE STREAM)
   (PPRINT-OBJECT (%%VALUE SELF) STREAM) (%%PRINT-STREAM STREAM " ")
   (CL:SETQ *PPRINT-INDENT* (CL:+ *PPRINT-INDENT* 8))
   (PPRINT-OBJECT (%%VALUE (%%REST SELF)) STREAM)
   (CL:SETQ *PPRINT-INDENT* (CL:- *PPRINT-INDENT* 8))
   (CL:SETQ SELF (%%REST (%%REST SELF))))
  (CL:SETQ *PPRINT-INDENT* (CL:- *PPRINT-INDENT* 3))
  (%%PRINT-STREAM STREAM ")")
  (CL:WHEN (CL:NOT (CL:EQ *PPRINT-AFTER-DEFINITION-FUNCTION* NULL))
   (CL:FUNCALL *PPRINT-AFTER-DEFINITION-FUNCTION* SELF STREAM)))

;;; (DEFUN PPRINT-ONTOSAURUS-OBJECT ...)

(CL:DEFUN PPRINT-ONTOSAURUS-OBJECT (SELF STREAM)
  (CL:LET*
   ((*LOGIC-DIALECT* KWD-NEW-PPRINT-KIF)
    (*PPRINT-ATOMIC-OBJECT-RENDERER*
     (CL:FUNCTION PPRINT-ATOMIC-OBJECT-FOR-HTML)))
   (CL:DECLARE (CL:SPECIAL *LOGIC-DIALECT* *PPRINT-ATOMIC-OBJECT-RENDERER*))
   (CL:COND
    ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE SELF) SGT-NEW-PPRINT-LOGIC-PROPOSITION)
     (CL:PROGN
      (CL:LET* ((TEST-VALUE-000 (%KIND SELF)))
       (CL:COND
        ((CL:OR (CL:EQ TEST-VALUE-000 KWD-NEW-PPRINT-ISA)
          (CL:EQ TEST-VALUE-000 KWD-NEW-PPRINT-FUNCTION)
          (CL:EQ TEST-VALUE-000 KWD-NEW-PPRINT-PREDICATE)
          (CL:EQ TEST-VALUE-000 KWD-NEW-PPRINT-NOT)
          (CL:EQ TEST-VALUE-000 KWD-NEW-PPRINT-EQUIVALENT)
          (CL:EQ TEST-VALUE-000 KWD-NEW-PPRINT-FAIL)))
        (CL:T
         (CL:PROGN (%%PRINT-STREAM (%NATIVE-STREAM STREAM) "<PRE>")
          (PPRINT-OBJECT SELF (%NATIVE-STREAM STREAM))
          (%%PRINT-STREAM (%NATIVE-STREAM STREAM) "</PRE>" EOL))
         (CL:RETURN-FROM PPRINT-ONTOSAURUS-OBJECT))))))
    (CL:T))
   (PPRINT-OBJECT SELF (%NATIVE-STREAM STREAM))))

(CL:DEFUN HELP-STARTUP-NEW-PPRINT1 ()
  (CL:PROGN
   (CL:SETQ SGT-NEW-PPRINT-STELLA-LITERAL-WRAPPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LITERAL-WRAPPER"
     (GET-STELLA-MODULE "/STELLA" CL:T) 1))
   (CL:SETQ SGT-NEW-PPRINT-LOGIC-PATTERN-VARIABLE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PATTERN-VARIABLE"
     (GET-STELLA-MODULE "/LOGIC" CL:T) 1))
   (CL:SETQ SGT-NEW-PPRINT-LOGIC-SKOLEM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SKOLEM" (GET-STELLA-MODULE "/LOGIC" CL:T)
     1))
   (CL:SETQ SGT-NEW-PPRINT-LOGIC-LOGIC-OBJECT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LOGIC-OBJECT"
     (GET-STELLA-MODULE "/LOGIC" CL:T) 1))
   (CL:SETQ SGT-NEW-PPRINT-LOGIC-LOGIC-THING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LOGIC-THING"
     (GET-STELLA-MODULE "/LOGIC" CL:T) 1))
   (CL:SETQ SGT-NEW-PPRINT-STELLA-THING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "THING" (GET-STELLA-MODULE "/STELLA" CL:T)
     1))
   (CL:SETQ SGT-NEW-PPRINT-STELLA-MUTABLE-STRING-WRAPPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MUTABLE-STRING-WRAPPER"
     (GET-STELLA-MODULE "/STELLA" CL:T) 1))
   (CL:SETQ SGT-NEW-PPRINT-LOGIC-NAMED-DESCRIPTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NAMED-DESCRIPTION"
     (GET-STELLA-MODULE "/LOGIC" CL:T) 1))
   (CL:SETQ SGT-NEW-PPRINT-LOGIC-PROPOSITION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PROPOSITION"
     (GET-STELLA-MODULE "/LOGIC" CL:T) 1))
   (CL:SETQ SGT-NEW-PPRINT-LOGIC-DESCRIPTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DESCRIPTION"
     (GET-STELLA-MODULE "/LOGIC" CL:T) 1))
   (CL:SETQ SGT-NEW-PPRINT-STELLA-COLLECTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "COLLECTION"
     (GET-STELLA-MODULE "/STELLA" CL:T) 1))
   (CL:SETQ SGT-NEW-PPRINT-STELLA-CONS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONS" (GET-STELLA-MODULE "/STELLA" CL:T)
     1))
   (CL:SETQ SGT-NEW-PPRINT-PL-KERNEL-KB-AND
    (INTERN-RIGID-SYMBOL-WRT-MODULE "AND"
     (GET-STELLA-MODULE "/PL-KERNEL-KB" CL:T) 1))
   (CL:SETQ SGT-NEW-PPRINT-PL-KERNEL-KB-OR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "OR"
     (GET-STELLA-MODULE "/PL-KERNEL-KB" CL:T) 1))
   (CL:SETQ SGT-NEW-PPRINT-PL-KERNEL-KB-NOT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NOT"
     (GET-STELLA-MODULE "/PL-KERNEL-KB" CL:T) 1))
   (CL:SETQ SGT-NEW-PPRINT-PL-KERNEL-KB-FAIL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FAIL"
     (GET-STELLA-MODULE "/PL-KERNEL-KB" CL:T) 1))
   (CL:SETQ SGT-NEW-PPRINT-PL-KERNEL-KB-FORALL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FORALL"
     (GET-STELLA-MODULE "/PL-KERNEL-KB" CL:T) 1))
   (CL:SETQ SGT-NEW-PPRINT-PL-KERNEL-KB-EXISTS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "EXISTS"
     (GET-STELLA-MODULE "/PL-KERNEL-KB" CL:T) 1))
   (CL:SETQ SGT-NEW-PPRINT-PL-KERNEL-KB-KAPPA
    (INTERN-RIGID-SYMBOL-WRT-MODULE "KAPPA"
     (GET-STELLA-MODULE "/PL-KERNEL-KB" CL:T) 1))
   (CL:SETQ SGT-NEW-PPRINT-PL-KERNEL-KB-SUBSET-OF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SUBSET-OF"
     (GET-STELLA-MODULE "/PL-KERNEL-KB" CL:T) 1))
   (CL:SETQ SGT-NEW-PPRINT-PL-KERNEL-KB-SETOF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SETOF"
     (GET-STELLA-MODULE "/PL-KERNEL-KB" CL:T) 1))
   (CL:SETQ SGT-NEW-PPRINT-PL-KERNEL-KB-LISTOF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LISTOF"
     (GET-STELLA-MODULE "/PL-KERNEL-KB" CL:T) 1))
   (CL:SETQ SGT-NEW-PPRINT-PL-KERNEL-KB-BAGOF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BAGOF"
     (GET-STELLA-MODULE "/PL-KERNEL-KB" CL:T) 1))
   (CL:SETQ SGT-NEW-PPRINT-STELLA-TRUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TRUE" (GET-STELLA-MODULE "/STELLA" CL:T)
     1))
   (CL:SETQ SGT-NEW-PPRINT-STELLA-FALSE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FALSE" (GET-STELLA-MODULE "/STELLA" CL:T)
     1))
   (CL:SETQ SGT-NEW-PPRINT-PL-KERNEL-KB-EQUIVALENT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "EQUIVALENT"
     (GET-STELLA-MODULE "/PL-KERNEL-KB" CL:T) 1))
   (CL:SETQ KWD-NEW-PPRINT-PREDICATE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PREDICATE" NULL 2))
   (CL:SETQ KWD-NEW-PPRINT-ISA (INTERN-RIGID-SYMBOL-WRT-MODULE "ISA" NULL 2))
   (CL:SETQ KWD-NEW-PPRINT-FUNCTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FUNCTION" NULL 2))
   (CL:SETQ KWD-NEW-PPRINT-AND (INTERN-RIGID-SYMBOL-WRT-MODULE "AND" NULL 2))
   (CL:SETQ KWD-NEW-PPRINT-OR (INTERN-RIGID-SYMBOL-WRT-MODULE "OR" NULL 2))
   (CL:SETQ KWD-NEW-PPRINT-NOT (INTERN-RIGID-SYMBOL-WRT-MODULE "NOT" NULL 2))
   (CL:SETQ KWD-NEW-PPRINT-EQUIVALENT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "EQUIVALENT" NULL 2))
   (CL:SETQ KWD-NEW-PPRINT-FAIL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FAIL" NULL 2))
   (CL:SETQ KWD-NEW-PPRINT-CONSTANT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONSTANT" NULL 2))
   (CL:SETQ KWD-NEW-PPRINT-EXISTS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "EXISTS" NULL 2))
   (CL:SETQ SYM-NEW-PPRINT-LOGIC-IO-VARIABLES
    (INTERN-RIGID-SYMBOL-WRT-MODULE "IO-VARIABLES"
     (GET-STELLA-MODULE "/LOGIC" CL:T) 0))
   (CL:SETQ KWD-NEW-PPRINT-FORALL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FORALL" NULL 2))
   (CL:SETQ KWD-NEW-PPRINT-IMPLIES
    (INTERN-RIGID-SYMBOL-WRT-MODULE "IMPLIES" NULL 2))
   (CL:SETQ SYM-NEW-PPRINT-LOGIC-COMPLEMENT-DESCRIPTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "COMPLEMENT-DESCRIPTION"
     (GET-STELLA-MODULE "/LOGIC" CL:T) 0))
   (CL:SETQ SYM-NEW-PPRINT-LOGIC-FORWARD-ONLY?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FORWARD-ONLY?"
     (GET-STELLA-MODULE "/LOGIC" CL:T) 0))
   (CL:SETQ SGT-NEW-PPRINT-STELLA-SYMBOL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYMBOL"
     (GET-STELLA-MODULE "/STELLA" CL:T) 1))
   (CL:SETQ KWD-NEW-PPRINT-KIF (INTERN-RIGID-SYMBOL-WRT-MODULE "KIF" NULL 2))
   (CL:SETQ KWD-NEW-PPRINT-KIF-ONTOSAURUS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "KIF-ONTOSAURUS" NULL 2))
   (CL:SETQ SYM-NEW-PPRINT-ONTOSAURUS-STARTUP-NEW-PPRINT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-NEW-PPRINT" NULL 0))
   (CL:SETQ SYM-NEW-PPRINT-STELLA-METHOD-STARTUP-CLASSNAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))))

(CL:DEFUN STARTUP-NEW-PPRINT ()
  (CL:LET*
   ((*MODULE* (GET-STELLA-MODULE "/ONTOSAURUS" (> *STARTUP-TIME-PHASE* 1)))
    (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2) (HELP-STARTUP-NEW-PPRINT1))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 4)
    (CL:SETQ REUSABLE-SKOLEM-MAPPING-TABLE (NEW-KEY-VALUE-MAP)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (DEFINE-FUNCTION-OBJECT "PPRINT-NEWLINE"
     "(DEFUN PPRINT-NEWLINE ((STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION PPRINT-NEWLINE) NULL)
    (DEFINE-FUNCTION-OBJECT "PPRINT-ATOMIC-OBJECT"
     "(DEFUN PPRINT-ATOMIC-OBJECT ((SELF OBJECT) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION PPRINT-ATOMIC-OBJECT) NULL)
    (DEFINE-FUNCTION-OBJECT "PPRINT-LITERAL-WRAPPER"
     "(DEFUN PPRINT-LITERAL-WRAPPER ((SELF LITERAL-WRAPPER) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION PPRINT-LITERAL-WRAPPER) NULL)
    (DEFINE-FUNCTION-OBJECT "PPRINT-AS-ATOMIC-OBJECT?"
     "(DEFUN (PPRINT-AS-ATOMIC-OBJECT? BOOLEAN) ((SELF OBJECT)))"
     (CL:FUNCTION PPRINT-AS-ATOMIC-OBJECT?) NULL)
    (DEFINE-FUNCTION-OBJECT "PPRINT-COMPOSITE-OBJECT"
     "(DEFUN PPRINT-COMPOSITE-OBJECT ((SELF OBJECT) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION PPRINT-COMPOSITE-OBJECT) NULL)
    (DEFINE-FUNCTION-OBJECT "PPRINT-OBJECT"
     "(DEFUN PPRINT-OBJECT ((SELF OBJECT) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION PPRINT-OBJECT) NULL)
    (DEFINE-FUNCTION-OBJECT "PPRINT-ARGUMENTS"
     "(DEFUN PPRINT-ARGUMENTS ((ARGUMENTS ARGUMENTS-VECTOR) (SEPARATELINES? BOOLEAN) (OMITLASTARGUMENT? BOOLEAN) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION PPRINT-ARGUMENTS) NULL)
    (DEFINE-FUNCTION-OBJECT "SHORT-TERM?"
     "(DEFUN (SHORT-TERM? BOOLEAN) ((ARG OBJECT)))" (CL:FUNCTION SHORT-TERM?)
     NULL)
    (DEFINE-FUNCTION-OBJECT "OPERATOR-TO-STRING"
     "(DEFUN (OPERATOR-TO-STRING STRING) ((OPERATOR OBJECT)))"
     (CL:FUNCTION OPERATOR-TO-STRING) NULL)
    (DEFINE-FUNCTION-OBJECT "PPRINT-OPERATOR-WITH-ARGUMENTS"
     "(DEFUN PPRINT-OPERATOR-WITH-ARGUMENTS ((OPERATORNAME STRING) (ARGUMENTS ARGUMENTS-VECTOR) (SEPARATELINES? BOOLEAN) (OMITLASTARGUMENT? BOOLEAN) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION PPRINT-OPERATOR-WITH-ARGUMENTS) NULL)
    (DEFINE-FUNCTION-OBJECT "PPRINT-RELATION-PROPOSITION"
     "(DEFUN PPRINT-RELATION-PROPOSITION ((SELF PROPOSITION) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION PPRINT-RELATION-PROPOSITION) NULL)
    (DEFINE-FUNCTION-OBJECT "PPRINT-FUNCTION-TERM"
     "(DEFUN PPRINT-FUNCTION-TERM ((SELF PROPOSITION) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION PPRINT-FUNCTION-TERM) NULL)
    (DEFINE-FUNCTION-OBJECT "PPRINT-FUNCTION-PROPOSITION"
     "(DEFUN PPRINT-FUNCTION-PROPOSITION ((SELF PROPOSITION) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION PPRINT-FUNCTION-PROPOSITION) NULL)
    (DEFINE-FUNCTION-OBJECT "PPRINT-PROPOSITION"
     "(DEFUN PPRINT-PROPOSITION ((SELF PROPOSITION) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION PPRINT-PROPOSITION) NULL)
    (DEFINE-FUNCTION-OBJECT "PPRINT-QUANTIFIED-VARIABLES"
     "(DEFUN PPRINT-QUANTIFIED-VARIABLES ((VARIABLES (VECTOR OF SKOLEM)) (INCLUDETYPES? BOOLEAN) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION PPRINT-QUANTIFIED-VARIABLES) NULL)
    (DEFINE-FUNCTION-OBJECT "PPRINT-NAMED-DESCRIPTION"
     "(DEFUN PPRINT-NAMED-DESCRIPTION ((SELF NAMED-DESCRIPTION) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION PPRINT-NAMED-DESCRIPTION) NULL)
    (DEFINE-FUNCTION-OBJECT "PPRINT-DESCRIPTION"
     "(DEFUN PPRINT-DESCRIPTION ((SELF DESCRIPTION) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION PPRINT-DESCRIPTION) NULL)
    (DEFINE-FUNCTION-OBJECT "PPRINT-DESCRIPTION-BODY"
     "(DEFUN PPRINT-DESCRIPTION-BODY ((DESCRIPTION DESCRIPTION) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION PPRINT-DESCRIPTION-BODY) NULL)
    (DEFINE-FUNCTION-OBJECT "PPRINT-NAMED-DESCRIPTIONS-AS-RULE"
     "(DEFUN PPRINT-NAMED-DESCRIPTIONS-AS-RULE ((HEAD NAMED-DESCRIPTION) (TAIL NAMED-DESCRIPTION) (OPERATORPREFIX STRING) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION PPRINT-NAMED-DESCRIPTIONS-AS-RULE) NULL)
    (DEFINE-FUNCTION-OBJECT "HELP-PPRINT-DESCRIPTIONS-AS-RULE"
     "(DEFUN HELP-PPRINT-DESCRIPTIONS-AS-RULE ((DESC DESCRIPTION) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION HELP-PPRINT-DESCRIPTIONS-AS-RULE) NULL)
    (DEFINE-FUNCTION-OBJECT "PPRINT-DESCRIPTIONS-AS-RULE"
     "(DEFUN PPRINT-DESCRIPTIONS-AS-RULE ((HEAD DESCRIPTION) (TAIL DESCRIPTION) (RULE PROPOSITION) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION PPRINT-DESCRIPTIONS-AS-RULE) NULL)
    (DEFINE-FUNCTION-OBJECT "PPRINT-IMPLIES-PROPOSITION"
     "(DEFUN PPRINT-IMPLIES-PROPOSITION ((SELF PROPOSITION) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION PPRINT-IMPLIES-PROPOSITION) NULL)
    (DEFINE-FUNCTION-OBJECT "PPRINT-STELLA-COLLECTION"
     "(DEFUN PPRINT-STELLA-COLLECTION ((SELF COLLECTION) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION PPRINT-STELLA-COLLECTION) NULL)
    (DEFINE-FUNCTION-OBJECT "PPRINT-STELLA-CONS"
     "(DEFUN PPRINT-STELLA-CONS ((SELF CONS) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION PPRINT-STELLA-CONS) NULL)
    (DEFINE-FUNCTION-OBJECT "PPRINT-DEFINITION"
     "(DEFUN PPRINT-DEFINITION ((SELF CONS) (HASVARIABLES? BOOLEAN) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION PPRINT-DEFINITION) NULL)
    (DEFINE-FUNCTION-OBJECT "PPRINT-ONTOSAURUS-OBJECT"
     "(DEFUN PPRINT-ONTOSAURUS-OBJECT ((SELF OBJECT) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION PPRINT-ONTOSAURUS-OBJECT) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-NEW-PPRINT"
     "(DEFUN STARTUP-NEW-PPRINT () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-NEW-PPRINT) NULL)
    (CL:LET*
     ((FUNCTION
       (LOOKUP-FUNCTION SYM-NEW-PPRINT-ONTOSAURUS-STARTUP-NEW-PPRINT)))
     (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FUNCTION)
      SYM-NEW-PPRINT-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "_StartupNewPprint") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (%IN-MODULE (COPY-CONS-TREE (WRAP-STRING "ONTOSAURUS")))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFCONSTANT REUSABLE-SKOLEM-MAPPING-TABLE (ENTITY-MAPPING OF SKOLEM SKOLEM) (NEW ENTITY-MAPPING) :DOCUMENTATION \"Stores reusable key-value list for use by
'print-descriptions-as-kif-rule'.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *PPRINT-ATOMIC-OBJECT-RENDERER* FUNCTION-CODE NULL :PUBLIC? TRUE :DOCUMENTATION \"A function that takes two arguments, a Stella Object
and a NATIVE-(?) OUTPUT-STREAM, and writes a representation of that
object on that stream.  This will only be called on `atomic' Stella
objects -- compound objects like Conses, Propositions, etc. are handled
by the outer code.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *PPRINT-BEFORE-PROPOSITION-FUNCTION* FUNCTION-CODE NULL :PUBLIC? TRUE :DOCUMENTATION \"A function that takes two arguments, a Stella Proposition
and a NATIVE-(?) OUTPUT-STREAM, and writes something that precedes the
normal printed representation of a proposition.   This will only be called 
on `PROPOSITION' objects.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *PPRINT-AFTER-PROPOSITION-FUNCTION* FUNCTION-CODE NULL :PUBLIC? TRUE :DOCUMENTATION \"A function that takes two arguments, a Stella Proposition
and a NATIVE-(?) OUTPUT-STREAM, and writes something that precedes the
normal printed representation of a proposition.   This will only be called 
on `PROPOSITION' objects.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *PPRINT-BEFORE-DEFINITION-FUNCTION* FUNCTION-CODE NULL :PUBLIC? TRUE :DOCUMENTATION \"A function that takes two arguments, a Stella Definition
and a NATIVE-(?) OUTPUT-STREAM, and writes something that precedes the
normal printed representation of a definition.   This will only be called 
on `DEFINITION' objects.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *PPRINT-AFTER-DEFINITION-FUNCTION* FUNCTION-CODE NULL :PUBLIC? TRUE :DOCUMENTATION \"A function that takes two arguments, a Stella Definition
and a NATIVE-(?) OUTPUT-STREAM, and writes something that precedes the
normal printed representation of a definition.   This will only be called 
on `DEFINITION' objects.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *PPRINT-INDENT* INTEGER 0)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *DOWNCASE-STANDARD-KIF-OPERATORS?* BOOLEAN TRUE)")
    (REGISTER-LOGIC-DIALECT-PRINT-FUNCTION KWD-NEW-PPRINT-KIF-ONTOSAURUS
     (WRAP-FUNCTION-CODE (CL:FUNCTION PPRINT-ONTOSAURUS-OBJECT))))))
