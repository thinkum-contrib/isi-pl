;;; -*- Mode: Lisp; Package: PLSOAP; Syntax: COMMON-LISP; Base: 10 -*-

;;; soap-server.lisp

#|
 +---------------------------- BEGIN LICENSE BLOCK ---------------------------+
 |                                                                            |
 | Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
 |                                                                            |
 | The contents of this file are subject to the Mozilla Public License        |
 | Version 1.1 (the "License"); you may not use this file except in           |
 | compliance with the License. You may obtain a copy of the License at       |
 | http://www.mozilla.org/MPL/                                                |
 |                                                                            |
 | Software distributed under the License is distributed on an "AS IS" basis, |
 | WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
 | for the specific language governing rights and limitations under the       |
 | License.                                                                   |
 |                                                                            |
 | The Original Code is the PowerLoom KR&R System.                            |
 |                                                                            |
 | The Initial Developer of the Original Code is                              |
 | UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
 | 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
 |                                                                            |
 | Portions created by the Initial Developer are Copyright (C) 2002-2014      |
 | the Initial Developer. All Rights Reserved.                                |
 |                                                                            |
 | Contributor(s):                                                            |
 |                                                                            |
 | Alternatively, the contents of this file may be used under the terms of    |
 | either the GNU General Public License Version 2 or later (the "GPL"), or   |
 | the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
 | in which case the provisions of the GPL or the LGPL are applicable instead |
 | of those above. If you wish to allow use of your version of this file only |
 | under the terms of either the GPL or the LGPL, and not to allow others to  |
 | use your version of this file under the terms of the MPL, indicate your    |
 | decision by deleting the provisions above and replace them with the notice |
 | and other provisions required by the GPL or the LGPL. If you do not delete |
 | the provisions above, a recipient may use your version of this file under  |
 | the terms of any one of the MPL, the GPL or the LGPL.                      |
 |                                                                            |
 +----------------------------- END LICENSE BLOCK ----------------------------+
|#

(CL:EVAL-WHEN (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)
  (CL:UNLESS (CL:FIND-PACKAGE "PLSOAP")
     (CL:DEFPACKAGE "PLSOAP" (:USE))))

(CL:IN-PACKAGE "PLSOAP")

;;; Auxiliary variables:

(CL:DEFVAR |SGT-SOAP-SERVER-PLSOAP-module| STELLA::NULL)
(CL:DEFVAR |SGT-SOAP-SERVER-PLSOAP-nresults| STELLA::NULL)
(CL:DEFVAR |SYM-SOAP-SERVER-XSI-type| STELLA::NULL)
(CL:DEFVAR |SGT-SOAP-SERVER-PLSOAP-pattern| STELLA::NULL)
(CL:DEFVAR |SGT-SOAP-SERVER-PLSOAP-options| STELLA::NULL)
(CL:DEFVAR SGT-SOAP-SERVER-PLSOAP-SOAP-COMMAND STELLA::NULL)
(CL:DEFVAR SYM-SOAP-SERVER-PLSOAP-TARGET-MODULE STELLA::NULL)
(CL:DEFVAR |SGT-SOAP-SERVER-PLSOAP-command| STELLA::NULL)
(CL:DEFVAR |SGT-SOAP-SERVER-PLSOAP-assertion| STELLA::NULL)
(CL:DEFVAR |SGT-SOAP-SERVER-PLSOAP-retraction| STELLA::NULL)
(CL:DEFVAR |SGT-SOAP-SERVER-PLSOAP-ask| STELLA::NULL)
(CL:DEFVAR SYM-SOAP-SERVER-STELLA-OPTIONS STELLA::NULL)
(CL:DEFVAR |SGT-SOAP-SERVER-PLSOAP-retrieval| STELLA::NULL)
(CL:DEFVAR SYM-SOAP-SERVER-PLSOAP-NRESULTS STELLA::NULL)
(CL:DEFVAR SYM-SOAP-SERVER-LOGIC-PATTERN STELLA::NULL)
(CL:DEFVAR |SGT-SOAP-SERVER-PLSOAP-query| STELLA::NULL)
(CL:DEFVAR |SGT-SOAP-SERVER-PLSOAP-result| STELLA::NULL)
(CL:DEFVAR |SGT-SOAP-SERVER-PLSOAP-answer| STELLA::NULL)
(CL:DEFVAR SYM-SOAP-SERVER-LOGIC-QUERY STELLA::NULL)
(CL:DEFVAR SYM-SOAP-SERVER-STELLA-RESULT STELLA::NULL)
(CL:DEFVAR |SGT-SOAP-SERVER-PLSOAP-item| STELLA::NULL)
(CL:DEFVAR |SGT-SOAP-SERVER-PLSOAP-proposition| STELLA::NULL)
(CL:DEFVAR |SGT-SOAP-SERVER-PLSOAP-tuple| STELLA::NULL)
(CL:DEFVAR SYM-SOAP-SERVER-STELLA-ITEM STELLA::NULL)
(CL:DEFVAR |SGT-SOAP-SERVER-PLSOAP-tuples| STELLA::NULL)
(CL:DEFVAR SYM-SOAP-SERVER-PLSOAP-TUPLE STELLA::NULL)
(CL:DEFVAR |SGT-SOAP-SERVER-PLSOAP-propositions| STELLA::NULL)
(CL:DEFVAR SYM-SOAP-SERVER-LOGIC-PROPOSITION STELLA::NULL)
(CL:DEFVAR |SGT-SOAP-SERVER-PLSOAP-powerloomerror| STELLA::NULL)
(CL:DEFVAR |SGT-SOAP-SERVER-PLSOAP-stellaerror| STELLA::NULL)
(CL:DEFVAR |SGT-SOAP-SERVER-PLSOAP-nativeerror| STELLA::NULL)
(CL:DEFVAR KWD-SOAP-SERVER-CONTENT-TYPE STELLA::NULL)
(CL:DEFVAR KWD-SOAP-SERVER-XML STELLA::NULL)
(CL:DEFVAR KWD-SOAP-SERVER-DOCUMENTATION STELLA::NULL)
(CL:DEFVAR KWD-SOAP-SERVER-IGNORE-TYPE-VIOLATIONS STELLA::NULL)
(CL:DEFVAR KWD-SOAP-SERVER-REALISTIC STELLA::NULL)
(CL:DEFVAR SGT-SOAP-SERVER-STELLA-CONS STELLA::NULL)
(CL:DEFVAR KWD-SOAP-SERVER-METHOD STELLA::NULL)
(CL:DEFVAR KWD-SOAP-SERVER-POST STELLA::NULL)
(CL:DEFVAR KWD-SOAP-SERVER-HEADERS STELLA::NULL)
(CL:DEFVAR KWD-SOAP-SERVER-CONTENT STELLA::NULL)
(CL:DEFVAR SYM-SOAP-SERVER-PLSOAP-STARTUP-SOAP-SERVER STELLA::NULL)
(CL:DEFVAR SYM-SOAP-SERVER-STELLA-METHOD-STARTUP-CLASSNAME STELLA::NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL STELLA::*STARTUP-TIME-PHASE* STELLA::STANDARD-OUTPUT STELLA::EOL STELLA::*MODULE* STELLA::NIL
  STELLA::*CONTEXT* STELLA::*POWERLOOM-LOCK* STELLA::NULL-INTEGER))

;;; (DEFGLOBAL *SOAP-READ-ONLY?* ...)

(CL:DEFVAR *SOAP-READ-ONLY?* CL:NIL)

;;; (DEFCLASS |module| ...)

(CL:DEFCLASS |module| (STELLA::|XMLObject|)
  ())

(CL:DEFUN |new-module| ()
  (CL:LET* ((SELF STELLA::NULL)) (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE |module|)))
   (CL:SETF (STELLA::|%cdataContent| SELF) STELLA::NULL-STRING)
   (CL:SETF (STELLA::|%textContent| SELF) STELLA::NULL-STRING) SELF))

(CL:DEFMETHOD STELLA::PRIMARY-TYPE ((SELF |module|))
  |SGT-SOAP-SERVER-PLSOAP-module|)

;;; (DEFCLASS |nresults| ...)

(CL:DEFCLASS |nresults| (STELLA::|XMLObject|)
  ((STELLA::|type| :TYPE CL:SIMPLE-STRING :INITFORM STELLA::NULL-STRING :ALLOCATION :INSTANCE :ACCESSOR
    STELLA::|%type|)))

(CL:DEFUN |new-nresults| ()
  (CL:LET* ((SELF STELLA::NULL)) (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE |nresults|)))
   (CL:SETF (STELLA::|%cdataContent| SELF) STELLA::NULL-STRING)
   (CL:SETF (STELLA::|%textContent| SELF) STELLA::NULL-STRING) (CL:SETF (STELLA::|%type| SELF) STELLA::NULL-STRING)
   SELF))

(CL:DEFMETHOD STELLA::PRIMARY-TYPE ((SELF |nresults|))
  |SGT-SOAP-SERVER-PLSOAP-nresults|)

(CL:DEFUN |access-nresults-Slot-Value| (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME |SYM-SOAP-SERVER-XSI-type|)
    (CL:IF SETVALUE? (CL:SETF (STELLA::|%type| SELF) (STELLA::%WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE (STELLA::WRAP-STRING (STELLA::|%type| SELF)))))
   (CL:T
    (CL:LET* ((STREAM-000 (STELLA::NEW-OUTPUT-STRING-STREAM)))
     (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM STREAM-000) "`" SLOTNAME "' is not a valid case option")
     (CL:ERROR (STELLA::NEW-STELLA-EXCEPTION (STELLA::THE-STRING-READER STREAM-000))))))
  VALUE)

;;; (DEFCLASS |pattern| ...)

(CL:DEFCLASS |pattern| (STELLA::|XMLObject|)
  ())

(CL:DEFUN |new-pattern| ()
  (CL:LET* ((SELF STELLA::NULL)) (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE |pattern|)))
   (CL:SETF (STELLA::|%cdataContent| SELF) STELLA::NULL-STRING)
   (CL:SETF (STELLA::|%textContent| SELF) STELLA::NULL-STRING) SELF))

(CL:DEFMETHOD STELLA::PRIMARY-TYPE ((SELF |pattern|))
  |SGT-SOAP-SERVER-PLSOAP-pattern|)

;;; (DEFCLASS |options| ...)

(CL:DEFCLASS |options| (STELLA::|XMLObject|)
  ())

(CL:DEFUN |new-options| ()
  (CL:LET* ((SELF STELLA::NULL)) (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE |options|)))
   (CL:SETF (STELLA::|%cdataContent| SELF) STELLA::NULL-STRING)
   (CL:SETF (STELLA::|%textContent| SELF) STELLA::NULL-STRING) SELF))

(CL:DEFMETHOD STELLA::PRIMARY-TYPE ((SELF |options|))
  |SGT-SOAP-SERVER-PLSOAP-options|)

;;; (DEFCLASS SOAP-COMMAND ...)

(CL:DEFCLASS SOAP-COMMAND (STELLA::|XMLObject|)
  ((TARGET-MODULE :ALLOCATION :INSTANCE :ACCESSOR %TARGET-MODULE))
  (:DOCUMENTATION "Common parent in type hierarchy.  This will
not actually be realized in surface syntax."))

(CL:DEFUN NEW-SOAP-COMMAND ()
  (CL:LET* ((SELF STELLA::NULL)) (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE SOAP-COMMAND)))
   (CL:SETF (STELLA::|%cdataContent| SELF) STELLA::NULL-STRING)
   (CL:SETF (STELLA::|%textContent| SELF) STELLA::NULL-STRING) (CL:SETF (%TARGET-MODULE SELF) STELLA::NULL) SELF))

(CL:DEFMETHOD STELLA::PRIMARY-TYPE ((SELF SOAP-COMMAND))
  SGT-SOAP-SERVER-PLSOAP-SOAP-COMMAND)

(CL:DEFUN ACCESS-SOAP-COMMAND-SLOT-VALUE (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-SOAP-SERVER-PLSOAP-TARGET-MODULE)
    (CL:IF SETVALUE? (CL:SETF (%TARGET-MODULE SELF) VALUE) (CL:SETQ VALUE (%TARGET-MODULE SELF))))
   (CL:T
    (CL:LET* ((STREAM-000 (STELLA::NEW-OUTPUT-STRING-STREAM)))
     (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM STREAM-000) "`" SLOTNAME "' is not a valid case option")
     (CL:ERROR (STELLA::NEW-STELLA-EXCEPTION (STELLA::THE-STRING-READER STREAM-000))))))
  VALUE)

;;; (DEFCLASS |command| ...)

(CL:DEFCLASS |command| (SOAP-COMMAND)
  ())

(CL:DEFUN |new-command| ()
  (CL:LET* ((SELF STELLA::NULL)) (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE |command|)))
   (CL:SETF (STELLA::|%cdataContent| SELF) STELLA::NULL-STRING)
   (CL:SETF (STELLA::|%textContent| SELF) STELLA::NULL-STRING) (CL:SETF (%TARGET-MODULE SELF) STELLA::NULL) SELF))

(CL:DEFMETHOD STELLA::PRIMARY-TYPE ((SELF |command|))
  |SGT-SOAP-SERVER-PLSOAP-command|)

(CL:DEFUN |access-command-Slot-Value| (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-SOAP-SERVER-PLSOAP-TARGET-MODULE)
    (CL:IF SETVALUE? (CL:SETF (%TARGET-MODULE SELF) VALUE) (CL:SETQ VALUE (%TARGET-MODULE SELF))))
   (CL:T
    (CL:LET* ((STREAM-000 (STELLA::NEW-OUTPUT-STRING-STREAM)))
     (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM STREAM-000) "`" SLOTNAME "' is not a valid case option")
     (CL:ERROR (STELLA::NEW-STELLA-EXCEPTION (STELLA::THE-STRING-READER STREAM-000))))))
  VALUE)

;;; (DEFCLASS |assertion| ...)

(CL:DEFCLASS |assertion| (SOAP-COMMAND)
  ())

(CL:DEFUN |new-assertion| ()
  (CL:LET* ((SELF STELLA::NULL)) (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE |assertion|)))
   (CL:SETF (STELLA::|%cdataContent| SELF) STELLA::NULL-STRING)
   (CL:SETF (STELLA::|%textContent| SELF) STELLA::NULL-STRING) (CL:SETF (%TARGET-MODULE SELF) STELLA::NULL) SELF))

(CL:DEFMETHOD STELLA::PRIMARY-TYPE ((SELF |assertion|))
  |SGT-SOAP-SERVER-PLSOAP-assertion|)

(CL:DEFUN |access-assertion-Slot-Value| (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-SOAP-SERVER-PLSOAP-TARGET-MODULE)
    (CL:IF SETVALUE? (CL:SETF (%TARGET-MODULE SELF) VALUE) (CL:SETQ VALUE (%TARGET-MODULE SELF))))
   (CL:T
    (CL:LET* ((STREAM-000 (STELLA::NEW-OUTPUT-STRING-STREAM)))
     (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM STREAM-000) "`" SLOTNAME "' is not a valid case option")
     (CL:ERROR (STELLA::NEW-STELLA-EXCEPTION (STELLA::THE-STRING-READER STREAM-000))))))
  VALUE)

;;; (DEFCLASS |retraction| ...)

(CL:DEFCLASS |retraction| (SOAP-COMMAND)
  ())

(CL:DEFUN |new-retraction| ()
  (CL:LET* ((SELF STELLA::NULL)) (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE |retraction|)))
   (CL:SETF (STELLA::|%cdataContent| SELF) STELLA::NULL-STRING)
   (CL:SETF (STELLA::|%textContent| SELF) STELLA::NULL-STRING) (CL:SETF (%TARGET-MODULE SELF) STELLA::NULL) SELF))

(CL:DEFMETHOD STELLA::PRIMARY-TYPE ((SELF |retraction|))
  |SGT-SOAP-SERVER-PLSOAP-retraction|)

(CL:DEFUN |access-retraction-Slot-Value| (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-SOAP-SERVER-PLSOAP-TARGET-MODULE)
    (CL:IF SETVALUE? (CL:SETF (%TARGET-MODULE SELF) VALUE) (CL:SETQ VALUE (%TARGET-MODULE SELF))))
   (CL:T
    (CL:LET* ((STREAM-000 (STELLA::NEW-OUTPUT-STRING-STREAM)))
     (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM STREAM-000) "`" SLOTNAME "' is not a valid case option")
     (CL:ERROR (STELLA::NEW-STELLA-EXCEPTION (STELLA::THE-STRING-READER STREAM-000))))))
  VALUE)

;;; (DEFCLASS |ask| ...)

(CL:DEFCLASS |ask| (SOAP-COMMAND)
  ((STELLA::OPTIONS :ALLOCATION :INSTANCE :ACCESSOR STELLA::%OPTIONS)))

(CL:DEFUN |new-ask| ()
  (CL:LET* ((SELF STELLA::NULL)) (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE |ask|)))
   (CL:SETF (STELLA::|%cdataContent| SELF) STELLA::NULL-STRING)
   (CL:SETF (STELLA::|%textContent| SELF) STELLA::NULL-STRING) (CL:SETF (STELLA::%OPTIONS SELF) STELLA::NULL)
   (CL:SETF (%TARGET-MODULE SELF) STELLA::NULL) SELF))

(CL:DEFMETHOD STELLA::PRIMARY-TYPE ((SELF |ask|))
  |SGT-SOAP-SERVER-PLSOAP-ask|)

(CL:DEFUN |access-ask-Slot-Value| (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-SOAP-SERVER-PLSOAP-TARGET-MODULE)
    (CL:IF SETVALUE? (CL:SETF (%TARGET-MODULE SELF) VALUE) (CL:SETQ VALUE (%TARGET-MODULE SELF))))
   ((CL:EQ SLOTNAME SYM-SOAP-SERVER-STELLA-OPTIONS)
    (CL:IF SETVALUE? (CL:SETF (STELLA::%OPTIONS SELF) VALUE) (CL:SETQ VALUE (STELLA::%OPTIONS SELF))))
   (CL:T
    (CL:LET* ((STREAM-000 (STELLA::NEW-OUTPUT-STRING-STREAM)))
     (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM STREAM-000) "`" SLOTNAME "' is not a valid case option")
     (CL:ERROR (STELLA::NEW-STELLA-EXCEPTION (STELLA::THE-STRING-READER STREAM-000))))))
  VALUE)

;;; (DEFCLASS |retrieval| ...)

(CL:DEFCLASS |retrieval| (SOAP-COMMAND)
  ((NRESULTS :ALLOCATION :INSTANCE :ACCESSOR %NRESULTS)
   (STELLA::PATTERN :ALLOCATION :INSTANCE :ACCESSOR STELLA::%PATTERN)
   (STELLA::OPTIONS :ALLOCATION :INSTANCE :ACCESSOR STELLA::%OPTIONS)))

(CL:DEFUN |new-retrieval| ()
  (CL:LET* ((SELF STELLA::NULL)) (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE |retrieval|)))
   (CL:SETF (STELLA::|%cdataContent| SELF) STELLA::NULL-STRING)
   (CL:SETF (STELLA::|%textContent| SELF) STELLA::NULL-STRING) (CL:SETF (STELLA::%OPTIONS SELF) STELLA::NULL)
   (CL:SETF (STELLA::%PATTERN SELF) STELLA::NULL) (CL:SETF (%NRESULTS SELF) STELLA::NULL)
   (CL:SETF (%TARGET-MODULE SELF) STELLA::NULL) SELF))

(CL:DEFMETHOD STELLA::PRIMARY-TYPE ((SELF |retrieval|))
  |SGT-SOAP-SERVER-PLSOAP-retrieval|)

(CL:DEFUN |access-retrieval-Slot-Value| (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-SOAP-SERVER-PLSOAP-TARGET-MODULE)
    (CL:IF SETVALUE? (CL:SETF (%TARGET-MODULE SELF) VALUE) (CL:SETQ VALUE (%TARGET-MODULE SELF))))
   ((CL:EQ SLOTNAME SYM-SOAP-SERVER-PLSOAP-NRESULTS)
    (CL:IF SETVALUE? (CL:SETF (%NRESULTS SELF) VALUE) (CL:SETQ VALUE (%NRESULTS SELF))))
   ((CL:EQ SLOTNAME SYM-SOAP-SERVER-LOGIC-PATTERN)
    (CL:IF SETVALUE? (CL:SETF (STELLA::%PATTERN SELF) VALUE) (CL:SETQ VALUE (STELLA::%PATTERN SELF))))
   ((CL:EQ SLOTNAME SYM-SOAP-SERVER-STELLA-OPTIONS)
    (CL:IF SETVALUE? (CL:SETF (STELLA::%OPTIONS SELF) VALUE) (CL:SETQ VALUE (STELLA::%OPTIONS SELF))))
   (CL:T
    (CL:LET* ((STREAM-000 (STELLA::NEW-OUTPUT-STRING-STREAM)))
     (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM STREAM-000) "`" SLOTNAME "' is not a valid case option")
     (CL:ERROR (STELLA::NEW-STELLA-EXCEPTION (STELLA::THE-STRING-READER STREAM-000))))))
  VALUE)

;;; (DEFCLASS |query| ...)

(CL:DEFCLASS |query| (STELLA::|XMLObject|)
  ())

(CL:DEFUN |new-query| ()
  (CL:LET* ((SELF STELLA::NULL)) (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE |query|)))
   (CL:SETF (STELLA::|%cdataContent| SELF) STELLA::NULL-STRING)
   (CL:SETF (STELLA::|%textContent| SELF) STELLA::NULL-STRING) SELF))

(CL:DEFMETHOD STELLA::PRIMARY-TYPE ((SELF |query|))
  |SGT-SOAP-SERVER-PLSOAP-query|)

;;; (DEFCLASS |result| ...)

(CL:DEFCLASS |result| (STELLA::|XMLObject|)
  ())

(CL:DEFUN |new-result| ()
  (CL:LET* ((SELF STELLA::NULL)) (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE |result|)))
   (CL:SETF (STELLA::|%cdataContent| SELF) STELLA::NULL-STRING)
   (CL:SETF (STELLA::|%textContent| SELF) STELLA::NULL-STRING) SELF))

(CL:DEFMETHOD STELLA::PRIMARY-TYPE ((SELF |result|))
  |SGT-SOAP-SERVER-PLSOAP-result|)

;;; (DEFCLASS |answer| ...)

(CL:DEFCLASS |answer| (STELLA::|XMLObject|)
  ((STELLA::QUERY :ALLOCATION :INSTANCE :ACCESSOR STELLA::%QUERY)
   (STELLA::RESULT :ALLOCATION :INSTANCE :ACCESSOR STELLA::%RESULT)))

(CL:DEFUN |new-answer| ()
  (CL:LET* ((SELF STELLA::NULL)) (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE |answer|)))
   (CL:SETF (STELLA::|%cdataContent| SELF) STELLA::NULL-STRING)
   (CL:SETF (STELLA::|%textContent| SELF) STELLA::NULL-STRING) (CL:SETF (STELLA::%RESULT SELF) STELLA::NULL)
   (CL:SETF (STELLA::%QUERY SELF) STELLA::NULL) SELF))

(CL:DEFMETHOD STELLA::PRIMARY-TYPE ((SELF |answer|))
  |SGT-SOAP-SERVER-PLSOAP-answer|)

(CL:DEFUN |access-answer-Slot-Value| (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-SOAP-SERVER-LOGIC-QUERY)
    (CL:IF SETVALUE? (CL:SETF (STELLA::%QUERY SELF) VALUE) (CL:SETQ VALUE (STELLA::%QUERY SELF))))
   ((CL:EQ SLOTNAME SYM-SOAP-SERVER-STELLA-RESULT)
    (CL:IF SETVALUE? (CL:SETF (STELLA::%RESULT SELF) VALUE) (CL:SETQ VALUE (STELLA::%RESULT SELF))))
   (CL:T
    (CL:LET* ((STREAM-000 (STELLA::NEW-OUTPUT-STRING-STREAM)))
     (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM STREAM-000) "`" SLOTNAME "' is not a valid case option")
     (CL:ERROR (STELLA::NEW-STELLA-EXCEPTION (STELLA::THE-STRING-READER STREAM-000))))))
  VALUE)

;;; (DEFCLASS |item| ...)

(CL:DEFCLASS |item| (STELLA::|XMLObject|)
  ((STELLA::|type| :TYPE CL:SIMPLE-STRING :INITFORM STELLA::NULL-STRING :ALLOCATION :INSTANCE :ACCESSOR
    STELLA::|%type|)))

(CL:DEFUN |new-item| ()
  (CL:LET* ((SELF STELLA::NULL)) (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE |item|)))
   (CL:SETF (STELLA::|%cdataContent| SELF) STELLA::NULL-STRING)
   (CL:SETF (STELLA::|%textContent| SELF) STELLA::NULL-STRING) (CL:SETF (STELLA::|%type| SELF) STELLA::NULL-STRING)
   SELF))

(CL:DEFMETHOD STELLA::PRIMARY-TYPE ((SELF |item|))
  |SGT-SOAP-SERVER-PLSOAP-item|)

(CL:DEFUN |access-item-Slot-Value| (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME |SYM-SOAP-SERVER-XSI-type|)
    (CL:IF SETVALUE? (CL:SETF (STELLA::|%type| SELF) (STELLA::%WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE (STELLA::WRAP-STRING (STELLA::|%type| SELF)))))
   (CL:T
    (CL:LET* ((STREAM-000 (STELLA::NEW-OUTPUT-STRING-STREAM)))
     (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM STREAM-000) "`" SLOTNAME "' is not a valid case option")
     (CL:ERROR (STELLA::NEW-STELLA-EXCEPTION (STELLA::THE-STRING-READER STREAM-000))))))
  VALUE)

;;; (DEFCLASS |proposition| ...)

(CL:DEFCLASS |proposition| (STELLA::|XMLObject|)
  ())

(CL:DEFUN |new-proposition| ()
  (CL:LET* ((SELF STELLA::NULL)) (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE |proposition|)))
   (CL:SETF (STELLA::|%cdataContent| SELF) STELLA::NULL-STRING)
   (CL:SETF (STELLA::|%textContent| SELF) STELLA::NULL-STRING) SELF))

(CL:DEFMETHOD STELLA::PRIMARY-TYPE ((SELF |proposition|))
  |SGT-SOAP-SERVER-PLSOAP-proposition|)

;;; (DEFCLASS |tuple| ...)

(CL:DEFCLASS |tuple| (STELLA::|XMLObject|)
  ((NRESULTS :ALLOCATION :INSTANCE :ACCESSOR %NRESULTS) (STELLA::ITEM :ALLOCATION :INSTANCE :ACCESSOR STELLA::%ITEM)))

(CL:DEFUN |new-tuple| ()
  (CL:LET* ((SELF STELLA::NULL)) (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE |tuple|)))
   (CL:SETF (STELLA::|%cdataContent| SELF) STELLA::NULL-STRING)
   (CL:SETF (STELLA::|%textContent| SELF) STELLA::NULL-STRING) (CL:SETF (STELLA::%ITEM SELF) STELLA::NULL)
   (CL:SETF (%NRESULTS SELF) STELLA::NULL) SELF))

(CL:DEFMETHOD STELLA::PRIMARY-TYPE ((SELF |tuple|))
  |SGT-SOAP-SERVER-PLSOAP-tuple|)

(CL:DEFUN |access-tuple-Slot-Value| (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-SOAP-SERVER-PLSOAP-NRESULTS)
    (CL:IF SETVALUE? (CL:SETF (%NRESULTS SELF) VALUE) (CL:SETQ VALUE (%NRESULTS SELF))))
   ((CL:EQ SLOTNAME SYM-SOAP-SERVER-STELLA-ITEM)
    (CL:IF SETVALUE? (CL:SETF (STELLA::%ITEM SELF) VALUE) (CL:SETQ VALUE (STELLA::%ITEM SELF))))
   (CL:T
    (CL:LET* ((STREAM-000 (STELLA::NEW-OUTPUT-STRING-STREAM)))
     (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM STREAM-000) "`" SLOTNAME "' is not a valid case option")
     (CL:ERROR (STELLA::NEW-STELLA-EXCEPTION (STELLA::THE-STRING-READER STREAM-000))))))
  VALUE)

;;; (DEFCLASS |tuples| ...)

(CL:DEFCLASS |tuples| (STELLA::|XMLObject|)
  ((NRESULTS :ALLOCATION :INSTANCE :ACCESSOR %NRESULTS) (STELLA::QUERY :ALLOCATION :INSTANCE :ACCESSOR STELLA::%QUERY)
   (STELLA::PATTERN :ALLOCATION :INSTANCE :ACCESSOR STELLA::%PATTERN) (TUPLE :ALLOCATION :INSTANCE :ACCESSOR %TUPLE)))

(CL:DEFUN |new-tuples| ()
  (CL:LET* ((SELF STELLA::NULL)) (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE |tuples|)))
   (CL:SETF (STELLA::|%cdataContent| SELF) STELLA::NULL-STRING)
   (CL:SETF (STELLA::|%textContent| SELF) STELLA::NULL-STRING) (CL:SETF (%TUPLE SELF) STELLA::NULL)
   (CL:SETF (STELLA::%PATTERN SELF) STELLA::NULL) (CL:SETF (STELLA::%QUERY SELF) STELLA::NULL)
   (CL:SETF (%NRESULTS SELF) STELLA::NULL) SELF))

(CL:DEFMETHOD STELLA::PRIMARY-TYPE ((SELF |tuples|))
  |SGT-SOAP-SERVER-PLSOAP-tuples|)

(CL:DEFUN |access-tuples-Slot-Value| (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-SOAP-SERVER-PLSOAP-NRESULTS)
    (CL:IF SETVALUE? (CL:SETF (%NRESULTS SELF) VALUE) (CL:SETQ VALUE (%NRESULTS SELF))))
   ((CL:EQ SLOTNAME SYM-SOAP-SERVER-LOGIC-QUERY)
    (CL:IF SETVALUE? (CL:SETF (STELLA::%QUERY SELF) VALUE) (CL:SETQ VALUE (STELLA::%QUERY SELF))))
   ((CL:EQ SLOTNAME SYM-SOAP-SERVER-LOGIC-PATTERN)
    (CL:IF SETVALUE? (CL:SETF (STELLA::%PATTERN SELF) VALUE) (CL:SETQ VALUE (STELLA::%PATTERN SELF))))
   ((CL:EQ SLOTNAME SYM-SOAP-SERVER-PLSOAP-TUPLE)
    (CL:IF SETVALUE? (CL:SETF (%TUPLE SELF) VALUE) (CL:SETQ VALUE (%TUPLE SELF))))
   (CL:T
    (CL:LET* ((STREAM-000 (STELLA::NEW-OUTPUT-STRING-STREAM)))
     (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM STREAM-000) "`" SLOTNAME "' is not a valid case option")
     (CL:ERROR (STELLA::NEW-STELLA-EXCEPTION (STELLA::THE-STRING-READER STREAM-000))))))
  VALUE)

;;; (DEFCLASS |propositions| ...)

(CL:DEFCLASS |propositions| (STELLA::|XMLObject|)
  ((NRESULTS :ALLOCATION :INSTANCE :ACCESSOR %NRESULTS)
   (STELLA::PROPOSITION :ALLOCATION :INSTANCE :ACCESSOR STELLA::%PROPOSITION)))

(CL:DEFUN |new-propositions| ()
  (CL:LET* ((SELF STELLA::NULL)) (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE |propositions|)))
   (CL:SETF (STELLA::|%cdataContent| SELF) STELLA::NULL-STRING)
   (CL:SETF (STELLA::|%textContent| SELF) STELLA::NULL-STRING) (CL:SETF (STELLA::%PROPOSITION SELF) STELLA::NULL)
   (CL:SETF (%NRESULTS SELF) STELLA::NULL) SELF))

(CL:DEFMETHOD STELLA::PRIMARY-TYPE ((SELF |propositions|))
  |SGT-SOAP-SERVER-PLSOAP-propositions|)

(CL:DEFUN |access-propositions-Slot-Value| (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-SOAP-SERVER-PLSOAP-NRESULTS)
    (CL:IF SETVALUE? (CL:SETF (%NRESULTS SELF) VALUE) (CL:SETQ VALUE (%NRESULTS SELF))))
   ((CL:EQ SLOTNAME SYM-SOAP-SERVER-LOGIC-PROPOSITION)
    (CL:IF SETVALUE? (CL:SETF (STELLA::%PROPOSITION SELF) VALUE) (CL:SETQ VALUE (STELLA::%PROPOSITION SELF))))
   (CL:T
    (CL:LET* ((STREAM-000 (STELLA::NEW-OUTPUT-STRING-STREAM)))
     (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM STREAM-000) "`" SLOTNAME "' is not a valid case option")
     (CL:ERROR (STELLA::NEW-STELLA-EXCEPTION (STELLA::THE-STRING-READER STREAM-000))))))
  VALUE)

;;; (DEFCLASS |powerloomerror| ...)

(CL:DEFCLASS |powerloomerror| (STELLA::|XMLObject|)
  ())

(CL:DEFUN |new-powerloomerror| ()
  (CL:LET* ((SELF STELLA::NULL)) (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE |powerloomerror|)))
   (CL:SETF (STELLA::|%cdataContent| SELF) STELLA::NULL-STRING)
   (CL:SETF (STELLA::|%textContent| SELF) STELLA::NULL-STRING) SELF))

(CL:DEFMETHOD STELLA::PRIMARY-TYPE ((SELF |powerloomerror|))
  |SGT-SOAP-SERVER-PLSOAP-powerloomerror|)

;;; (DEFCLASS |stellaerror| ...)

(CL:DEFCLASS |stellaerror| (STELLA::|XMLObject|)
  ())

(CL:DEFUN |new-stellaerror| ()
  (CL:LET* ((SELF STELLA::NULL)) (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE |stellaerror|)))
   (CL:SETF (STELLA::|%cdataContent| SELF) STELLA::NULL-STRING)
   (CL:SETF (STELLA::|%textContent| SELF) STELLA::NULL-STRING) SELF))

(CL:DEFMETHOD STELLA::PRIMARY-TYPE ((SELF |stellaerror|))
  |SGT-SOAP-SERVER-PLSOAP-stellaerror|)

;;; (DEFCLASS |nativeerror| ...)

(CL:DEFCLASS |nativeerror| (STELLA::|XMLObject|)
  ())

(CL:DEFUN |new-nativeerror| ()
  (CL:LET* ((SELF STELLA::NULL)) (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE |nativeerror|)))
   (CL:SETF (STELLA::|%cdataContent| SELF) STELLA::NULL-STRING)
   (CL:SETF (STELLA::|%textContent| SELF) STELLA::NULL-STRING) SELF))

(CL:DEFMETHOD STELLA::PRIMARY-TYPE ((SELF |nativeerror|))
  |SGT-SOAP-SERVER-PLSOAP-nativeerror|)

;;; (DEFGLOBAL *POWERLOOM-SOAP-MODULE* ...)

(CL:DEFVAR *POWERLOOM-SOAP-MODULE* STELLA::NULL)

;;; (DEFUN (POWERLOOM-PROCESS-SOAP-REQUEST STRING) ...)

(CL:DECLAIM (CL:FTYPE (CL:FUNCTION (CL:SIMPLE-STRING) CL:SIMPLE-STRING) POWERLOOM-PROCESS-SOAP-REQUEST))
(CL:DEFUN POWERLOOM-PROCESS-SOAP-REQUEST (REQUEST-BODY)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING REQUEST-BODY))
  #+MCL
  (CL:CHECK-TYPE REQUEST-BODY CL:SIMPLE-STRING)
  (CL:LET* ((ANSWER STELLA::NULL) (REQUEST STELLA::NULL))
   (CL:LET* ((STELLA::*DEFAULT-XML-OBJECT-MODULE* *POWERLOOM-SOAP-MODULE*))
    (CL:DECLARE (CL:SPECIAL STELLA::*DEFAULT-XML-OBJECT-MODULE*))
    (CL:HANDLER-CASE
     (CL:PROGN (CL:SETQ REQUEST (STELLA::FROM-XML-STRING REQUEST-BODY))
      (CL:SETQ ANSWER (PROCESS-SOAP-ENCODED-COMMAND (STELLA::|%contents| (STELLA::|%body| REQUEST)))))
     (STELLA::LOGIC-EXCEPTION (E) (CL:SETQ ANSWER (|new-powerloomerror|))
      (STELLA::SET-CONTENT ANSWER (STELLA::EXCEPTION-MESSAGE E))
      (CL:SETQ ANSWER (STELLA::CREATE-SOAP-FAULT "SOAP-ENV:Server" "PowerLoom error" STELLA::NULL-STRING ANSWER)))
     (STELLA::STELLA-EXCEPTION (E) (CL:SETQ ANSWER (|new-stellaerror|))
      (STELLA::SET-CONTENT ANSWER (STELLA::EXCEPTION-MESSAGE E))
      (CL:SETQ ANSWER (STELLA::CREATE-SOAP-FAULT "SOAP-ENV:Server" "PowerLoom error" STELLA::NULL-STRING ANSWER)))
     (CL:CONDITION (E) (CL:SETQ ANSWER (|new-nativeerror|)) (STELLA::SET-CONTENT ANSWER (STELLA::EXCEPTION-MESSAGE E))
      (CL:SETQ ANSWER (STELLA::CREATE-SOAP-FAULT "SOAP-ENV:Server" "PowerLoom error" STELLA::NULL-STRING ANSWER))))
    (STELLA::TO-XML-STRING (STELLA::CREATE-SOAP-ENVELOPE ANSWER)))))

;;; (DEFUN POWERLOOM-SOAP-REQUEST-HANDLER ...)

(CL:DEFUN POWERLOOM-SOAP-REQUEST-HANDLER (XCHG)
  "WRITE ME"
  (CL:LET* ((REQUEST (STELLA::GET-REQUEST-BODY XCHG)) (REPLY (STELLA::GET-REPLY-STREAM XCHG)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING REQUEST))
   (STELLA::%%PRINT-STREAM REPLY (POWERLOOM-PROCESS-SOAP-REQUEST REQUEST))))

;;; (DEFUN (SAFE-GET-CONTENT STRING) ...)

(CL:DECLAIM (CL:FTYPE (CL:FUNCTION (CL:T) CL:SIMPLE-STRING) SAFE-GET-CONTENT))
(CL:DEFUN SAFE-GET-CONTENT (OBJ)
  (CL:IF (CL:NOT (CL:EQ OBJ STELLA::NULL)) (STELLA::GET-CONTENT OBJ) STELLA::NULL-STRING))

;;; (DEFUN CHECK-READ-ONLY ...)

(CL:DEFUN CHECK-READ-ONLY (COMMAND-FORM)
  (CL:WHEN *SOAP-READ-ONLY?*
   (CL:LET* ((TEST-VALUE-000 (STELLA::SAFE-PRIMARY-TYPE COMMAND-FORM)))
    (CL:COND ((STELLA::SUBTYPE-OF? TEST-VALUE-000 |SGT-SOAP-SERVER-PLSOAP-ask|) (CL:PROGN))
     ((STELLA::SUBTYPE-OF? TEST-VALUE-000 |SGT-SOAP-SERVER-PLSOAP-retrieval|) (CL:PROGN))
     (CL:T
      (CL:LET* ((STREAM-000 (STELLA::NEW-OUTPUT-STRING-STREAM)))
       (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM STREAM-000) "Command not supported in read-only mode.`"
        COMMAND-FORM "'")
       (CL:ERROR (STELLA::NEW-STELLA-EXCEPTION (STELLA::THE-STRING-READER STREAM-000)))))))))

;;; (DEFUN (PROCESS-SOAP-ENCODED-COMMAND |XMLObject|) ...)

(CL:DEFUN PROCESS-SOAP-ENCODED-COMMAND (COMMAND-FORM)
  (CL:LET* ((MODULE-NAME (SAFE-GET-CONTENT (%TARGET-MODULE COMMAND-FORM))) (MODULE STELLA::NULL))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MODULE-NAME)) (CHECK-READ-ONLY COMMAND-FORM)
   (CL:WHEN (CL:EQ MODULE-NAME STELLA::NULL-STRING)
    (CL:LET* ((STREAM-000 (STELLA::NEW-OUTPUT-STRING-STREAM)))
     (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM STREAM-000) "No module specified. `" COMMAND-FORM "'")
     (CL:ERROR (STELLA::NEW-STELLA-EXCEPTION (STELLA::THE-STRING-READER STREAM-000)))))
   (CL:SETQ MODULE (PLI::GET-MODULE MODULE-NAME STELLA::NULL))
   (CL:WHEN (CL:EQ MODULE STELLA::NULL)
    (CL:LET* ((STREAM-001 (STELLA::NEW-OUTPUT-STRING-STREAM)))
     (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM STREAM-001) "No module named '`" MODULE-NAME "''.  `" COMMAND-FORM
      "'")
     (CL:ERROR (STELLA::NEW-STELLA-EXCEPTION (STELLA::THE-STRING-READER STREAM-001)))))
   (CL:LET* ((STELLA::*TYPECHECKMODE* KWD-SOAP-SERVER-IGNORE-TYPE-VIOLATIONS))
    (CL:DECLARE (CL:SPECIAL STELLA::*TYPECHECKMODE*))
    (CL:LET* ((STELLA::*MODULE* (PLI::GET-MODULE MODULE-NAME STELLA::NULL)) (STELLA::*CONTEXT* STELLA::*MODULE*))
     (CL:DECLARE (CL:SPECIAL STELLA::*MODULE* STELLA::*CONTEXT*))
     (CL:LET* ((TEST-VALUE-000 (STELLA::SAFE-PRIMARY-TYPE COMMAND-FORM)))
      (CL:COND
       ((STELLA::SUBTYPE-OF? TEST-VALUE-000 |SGT-SOAP-SERVER-PLSOAP-command|)
        (CL:PROGN
         (CL:LET* ((COMMAND-STRING (SAFE-GET-CONTENT COMMAND-FORM)))
          (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING COMMAND-STRING))
          (CL:WHEN (CL:OR (CL:EQ COMMAND-STRING STELLA::NULL-STRING) (STELLA::STRING-EQL? COMMAND-STRING ""))
           (CL:LET* ((STREAM-002 (STELLA::NEW-OUTPUT-STRING-STREAM)))
            (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM STREAM-002) "Command was empty.`" COMMAND-FORM "'")
            (CL:ERROR (STELLA::NEW-STELLA-EXCEPTION (STELLA::THE-STRING-READER STREAM-002)))))
          (SOAP-ENCODE-COMMAND-RESPONSE (PLI::S-EVALUATE COMMAND-STRING MODULE-NAME STELLA::NULL)))))
       ((STELLA::SUBTYPE-OF? TEST-VALUE-000 |SGT-SOAP-SERVER-PLSOAP-assertion|)
        (CL:PROGN
         (CL:LET* ((COMMAND-STRING (SAFE-GET-CONTENT COMMAND-FORM)))
          (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING COMMAND-STRING))
          (CL:WHEN (CL:OR (CL:EQ COMMAND-STRING STELLA::NULL-STRING) (STELLA::STRING-EQL? COMMAND-STRING ""))
           (CL:LET* ((STREAM-003 (STELLA::NEW-OUTPUT-STRING-STREAM)))
            (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM STREAM-003) "Command was empty.`" COMMAND-FORM "'")
            (CL:ERROR (STELLA::NEW-STELLA-EXCEPTION (STELLA::THE-STRING-READER STREAM-003)))))
          (SOAP-ENCODE-ASSERT-RESPONSE (PLI::S-ASSERT-PROPOSITION COMMAND-STRING MODULE-NAME STELLA::NULL)))))
       ((STELLA::SUBTYPE-OF? TEST-VALUE-000 |SGT-SOAP-SERVER-PLSOAP-retraction|)
        (CL:PROGN
         (CL:LET* ((COMMAND-STRING (SAFE-GET-CONTENT COMMAND-FORM)))
          (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING COMMAND-STRING))
          (CL:WHEN (CL:OR (CL:EQ COMMAND-STRING STELLA::NULL-STRING) (STELLA::STRING-EQL? COMMAND-STRING ""))
           (CL:LET* ((STREAM-004 (STELLA::NEW-OUTPUT-STRING-STREAM)))
            (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM STREAM-004) "Command was empty.`" COMMAND-FORM "'")
            (CL:ERROR (STELLA::NEW-STELLA-EXCEPTION (STELLA::THE-STRING-READER STREAM-004)))))
          (SOAP-ENCODE-ASSERT-RESPONSE (PLI::S-RETRACT-PROPOSITION COMMAND-STRING MODULE-NAME STELLA::NULL)))))
       ((STELLA::SUBTYPE-OF? TEST-VALUE-000 |SGT-SOAP-SERVER-PLSOAP-ask|)
        (CL:PROGN
         (CL:LET*
          ((BASE-QUERY-STRING (SAFE-GET-CONTENT COMMAND-FORM)) (QUERY-STRING BASE-QUERY-STRING)
           (QUERY-OPTIONS (SAFE-GET-CONTENT (STELLA::%OPTIONS COMMAND-FORM))))
          (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING BASE-QUERY-STRING QUERY-STRING QUERY-OPTIONS))
          (CL:WHEN (CL:OR (CL:EQ QUERY-STRING STELLA::NULL-STRING) (STELLA::STRING-EQL? QUERY-STRING ""))
           (CL:LET* ((STREAM-005 (STELLA::NEW-OUTPUT-STRING-STREAM)))
            (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM STREAM-005) "Query was empty.`" COMMAND-FORM "'")
            (CL:ERROR (STELLA::NEW-STELLA-EXCEPTION (STELLA::THE-STRING-READER STREAM-005)))))
          (CL:WHEN (CL:NOT (CL:OR (CL:EQ QUERY-OPTIONS STELLA::NULL-STRING) (STELLA::STRING-EQL? QUERY-OPTIONS "")))
           (CL:SETQ QUERY-STRING (STELLA::CONCATENATE QUERY-STRING " " QUERY-OPTIONS)))
          (SOAP-ENCODE-SIMPLE-ANSWER QUERY-STRING (PLI::S-ASK BASE-QUERY-STRING MODULE-NAME STELLA::NULL)))))
       ((STELLA::SUBTYPE-OF? TEST-VALUE-000 |SGT-SOAP-SERVER-PLSOAP-retrieval|)
        (CL:PROGN
         (CL:LET*
          ((N-RESULTS (SAFE-GET-CONTENT (%NRESULTS COMMAND-FORM)))
           (QUERY-PATTERN (SAFE-GET-CONTENT (STELLA::%PATTERN COMMAND-FORM)))
           (QUERY-OPTIONS (SAFE-GET-CONTENT (STELLA::%OPTIONS COMMAND-FORM)))
           (BASE-QUERY-STRING (SAFE-GET-CONTENT COMMAND-FORM)) (QUERY-STRING BASE-QUERY-STRING)
           (QUERY-FORM STELLA::NIL))
          (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING N-RESULTS QUERY-PATTERN QUERY-OPTIONS BASE-QUERY-STRING QUERY-STRING))
          (CL:WHEN (CL:OR (CL:EQ QUERY-STRING STELLA::NULL-STRING) (STELLA::STRING-EQL? QUERY-STRING ""))
           (CL:LET* ((STREAM-006 (STELLA::NEW-OUTPUT-STRING-STREAM)))
            (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM STREAM-006) "Query was empty.`" COMMAND-FORM "'")
            (CL:ERROR (STELLA::NEW-STELLA-EXCEPTION (STELLA::THE-STRING-READER STREAM-006)))))
          (CL:WHEN (CL:NOT (CL:OR (CL:EQ QUERY-PATTERN STELLA::NULL-STRING) (STELLA::STRING-EQL? QUERY-PATTERN "")))
           (CL:IF (CL:NOT (CL:= (STELLA::POSITION QUERY-PATTERN #\( 0) STELLA::NULL-INTEGER))
            (CL:SETQ QUERY-STRING (STELLA::CONCATENATE QUERY-PATTERN " " QUERY-STRING))
            (CL:SETQ QUERY-STRING (STELLA::CONCATENATE "(" QUERY-PATTERN ") " QUERY-STRING))))
          (CL:IF (CL:OR (CL:EQ N-RESULTS STELLA::NULL-STRING) (STELLA::STRING-EQL? N-RESULTS ""))
           (CL:SETQ QUERY-STRING (STELLA::CONCATENATE "/STELLA/ALL " QUERY-STRING))
           (CL:SETQ QUERY-STRING (STELLA::CONCATENATE N-RESULTS " " QUERY-STRING)))
          (CL:WHEN (CL:NOT (CL:OR (CL:EQ QUERY-OPTIONS STELLA::NULL-STRING) (STELLA::STRING-EQL? QUERY-OPTIONS "")))
           (CL:SETQ QUERY-STRING (STELLA::CONCATENATE QUERY-STRING " " QUERY-OPTIONS)))
          (CL:LET* ((MDL-000 (PLI::GET-MODULE MODULE-NAME STELLA::NULL)) (CXT-000 MDL-000))
           (CL:WHEN (CL:EQ MDL-000 STELLA::NULL) (CL:SETQ MDL-000 STELLA::*MODULE*)
            (CL:SETQ CXT-000 STELLA::*CONTEXT*))
           (CL:LET* ((STELLA::*MODULE* MDL-000) (STELLA::*CONTEXT* CXT-000))
            (CL:DECLARE (CL:SPECIAL STELLA::*MODULE* STELLA::*CONTEXT*))
            (STELLA::WITH-PROCESS-LOCK STELLA::*POWERLOOM-LOCK*
             (CL:LET*
              ((SEXP STELLA::NULL) (ITER-000 (STELLA::S-EXPRESSIONS (STELLA::NEW-INPUT-STRING-STREAM QUERY-STRING)))
               (COLLECT-000 STELLA::NULL))
              (CL:LOOP WHILE (STELLA::NEXT? ITER-000) DO (CL:SETQ SEXP (STELLA::%VALUE ITER-000))
               (CL:IF (CL:EQ COLLECT-000 STELLA::NULL)
                (CL:PROGN (CL:SETQ COLLECT-000 (STELLA::CONS SEXP STELLA::NIL))
                 (CL:IF (CL:EQ QUERY-FORM STELLA::NIL) (CL:SETQ QUERY-FORM COLLECT-000)
                  (STELLA::ADD-CONS-TO-END-OF-CONS-LIST QUERY-FORM COLLECT-000)))
                (CL:PROGN (CL:SETF (STELLA::%%REST COLLECT-000) (STELLA::CONS SEXP STELLA::NIL))
                 (CL:SETQ COLLECT-000 (STELLA::%%REST COLLECT-000))))))
             (SOAP-ENCODE-RETRIEVAL-ANSWER BASE-QUERY-STRING (STELLA::CALL-RETRIEVE QUERY-FORM))))))))
       (CL:T
        (CL:LET* ((STREAM-007 (STELLA::NEW-OUTPUT-STRING-STREAM)))
         (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM STREAM-007) "XML is not a recognized command: `" COMMAND-FORM
          "'")
         (CL:ERROR (STELLA::NEW-STELLA-EXCEPTION (STELLA::THE-STRING-READER STREAM-007)))))))))))

;;; (DEFUN (SOAP-ENCODE-COMMAND-RESPONSE |XMLObject|) ...)

(CL:DEFUN SOAP-ENCODE-COMMAND-RESPONSE (OBJ)
  (CL:LET* ((STELLA::*PRINTREADABLY?* CL:T) (STELLA::*PRINTMODE* KWD-SOAP-SERVER-REALISTIC))
   (CL:DECLARE (CL:SPECIAL STELLA::*PRINTREADABLY?* STELLA::*PRINTMODE*))
   (CL:LET* ((ANSWER (|new-result|))) (STELLA::SET-CONTENT ANSWER (STELLA::STRINGIFY OBJ)) ANSWER)))

;;; (DEFUN (SOAP-ENCODE-ASSERT-RESPONSE |XMLObject|) ...)

(CL:DEFUN SOAP-ENCODE-ASSERT-RESPONSE (ITER)
  (CL:LET* ((STELLA::*PRINTREADABLY?* CL:T) (STELLA::*PRINTMODE* KWD-SOAP-SERVER-REALISTIC))
   (CL:DECLARE (CL:SPECIAL STELLA::*PRINTREADABLY?* STELLA::*PRINTMODE*))
   (CL:LET*
    ((ANSWER (|new-propositions|)) (PROPS (STELLA::NEW-LIST)) (PROP-FORM STELLA::NULL) (COUNT (|new-nresults|)) (N 0))
    (CL:DECLARE (CL:TYPE CL:FIXNUM N))
    (CL:LET* ((PROP STELLA::NULL) (ITER-000 ITER))
     (CL:LOOP WHILE (STELLA::NEXT? ITER-000) DO (CL:SETQ PROP (STELLA::%VALUE ITER-000)) (CL:SETQ N (CL:1+ N))
      (CL:SETQ PROP-FORM (|new-proposition|)) (STELLA::SET-CONTENT PROP-FORM (STELLA::STRINGIFY PROP))
      (STELLA::PUSH PROPS PROP-FORM)))
    (CL:SETF (STELLA::|%textContent| COUNT) (STELLA::INTEGER-TO-STRING (CL:TRUNCATE N)))
    (CL:SETF (STELLA::|%type| COUNT) "XSD:int") (CL:SETF (%NRESULTS ANSWER) COUNT)
    (CL:SETF (STELLA::%PROPOSITION ANSWER) (STELLA::REVERSE PROPS)) ANSWER)))

;;; (DEFUN (SOAP-ENCODE-SIMPLE-ANSWER |XMLObject|) ...)

(CL:DEFUN SOAP-ENCODE-SIMPLE-ANSWER (QUERY-STRING TV)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING QUERY-STRING))
  #+MCL
  (CL:CHECK-TYPE QUERY-STRING CL:SIMPLE-STRING)
  (CL:LET* ((STELLA::*PRINTREADABLY?* CL:T) (STELLA::*PRINTMODE* KWD-SOAP-SERVER-REALISTIC))
   (CL:DECLARE (CL:SPECIAL STELLA::*PRINTREADABLY?* STELLA::*PRINTMODE*))
   (CL:LET* ((SELF-000 (|new-result|))) (CL:SETF (STELLA::|%textContent| SELF-000) (STELLA::STRINGIFY TV))
    (CL:LET* ((TRUTH-VALUE SELF-000) (ANS (|new-answer|)))
     (CL:LET* ((SELF-002 (|new-query|))) (CL:SETF (STELLA::|%textContent| SELF-002) QUERY-STRING)
      (CL:SETF (STELLA::%QUERY ANS) SELF-002))
     (CL:SETF (STELLA::%RESULT ANS) TRUTH-VALUE) ANS))))

;;; (DEFUN (SOAP-ENCODE-ITEM |item|) ...)

(CL:DEFUN SOAP-ENCODE-ITEM (OBJ)
  (CL:LET* ((ENCODED-ITEM (|new-item|)))
   (CL:LET* ((TEST-VALUE-000 (STELLA::SAFE-PRIMARY-TYPE OBJ)))
    (CL:COND
     ((STELLA::SUBTYPE-OF-FLOAT? TEST-VALUE-000)
      (CL:PROGN (CL:SETF (STELLA::|%textContent| ENCODED-ITEM) (STELLA::FLOAT-TO-STRING (STELLA::UNWRAP-FLOAT OBJ)))
       (CL:SETF (STELLA::|%type| ENCODED-ITEM) "XSD:double")))
     ((STELLA::SUBTYPE-OF-INTEGER? TEST-VALUE-000)
      (CL:PROGN
       (CL:SETF (STELLA::|%textContent| ENCODED-ITEM)
        (STELLA::INTEGER-TO-STRING (CL:TRUNCATE (STELLA::UNWRAP-INTEGER OBJ))))
       (CL:SETF (STELLA::|%type| ENCODED-ITEM) "XSD:int")))
     ((STELLA::SUBTYPE-OF-STRING? TEST-VALUE-000)
      (CL:PROGN (CL:SETF (STELLA::|%cdataContent| ENCODED-ITEM) (STELLA::UNWRAP-STRING OBJ))
       (CL:SETF (STELLA::|%type| ENCODED-ITEM) "XSD:string")))
     (CL:T (STELLA::SET-CONTENT ENCODED-ITEM (STELLA::STRINGIFY OBJ)))))
   ENCODED-ITEM))

;;; (DEFUN (SOAP-ENCODE-TUPLE |tuple|) ...)

(CL:DEFUN SOAP-ENCODE-TUPLE (OBJ)
  (CL:LET* ((RESULT (|new-tuple|)) (ITEMS (STELLA::NEW-LIST)) (COUNT (|new-nresults|)) (N 0))
   (CL:DECLARE (CL:TYPE CL:FIXNUM N))
   (CL:COND
    ((CL:EQ (STELLA::SAFE-PRIMARY-TYPE OBJ) SGT-SOAP-SERVER-STELLA-CONS)
     (CL:PROGN
      (CL:LET* ((I STELLA::NULL) (ITER-000 OBJ))
       (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 STELLA::NIL)) DO (CL:SETQ I (STELLA::%%VALUE ITER-000))
        (CL:SETQ N (CL:1+ N)) (STELLA::PUSH ITEMS (SOAP-ENCODE-ITEM I))
        (CL:SETQ ITER-000 (STELLA::%%REST ITER-000))))))
    (CL:T (CL:SETQ N 1) (STELLA::PUSH ITEMS (SOAP-ENCODE-ITEM OBJ))))
   (CL:SETF (STELLA::|%textContent| COUNT) (STELLA::INTEGER-TO-STRING (CL:TRUNCATE N)))
   (CL:SETF (STELLA::|%type| COUNT) "XSD:int") (CL:SETF (%NRESULTS RESULT) COUNT)
   (CL:SETF (STELLA::%ITEM RESULT) (STELLA::REVERSE ITEMS)) RESULT))

;;; (DEFUN (SOAP-ENCODE-RETRIEVAL-ANSWER |XMLObject|) ...)

(CL:DEFUN SOAP-ENCODE-RETRIEVAL-ANSWER (QUERY-STRING ITER)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING QUERY-STRING))
  #+MCL
  (CL:CHECK-TYPE QUERY-STRING CL:SIMPLE-STRING)
  (CL:LET* ((STELLA::*PRINTREADABLY?* CL:T) (STELLA::*PRINTMODE* KWD-SOAP-SERVER-REALISTIC))
   (CL:DECLARE (CL:SPECIAL STELLA::*PRINTREADABLY?* STELLA::*PRINTMODE*))
   (CL:LET*
    ((RESULT (|new-tuples|)) (TUPLES (STELLA::NEW-LIST)) (COUNT (|new-nresults|)) (THE-QUERY (|new-query|))
     (QUERY-PATTERN (|new-pattern|)) (SS (STELLA::NEW-OUTPUT-STRING-STREAM)) (FIRST? CL:T) (N 0))
    (CL:DECLARE (CL:TYPE CL:FIXNUM N))
    (CL:LET*
     ((VAR STELLA::NULL) (VECTOR-000 (STELLA::%EXTERNAL-VARIABLES ITER)) (INDEX-000 0)
      (LENGTH-000 (STELLA::LENGTH VECTOR-000)))
     (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
     (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
      (CL:SETQ VAR (CL:AREF (CL:THE CL:SIMPLE-VECTOR (STELLA::%THE-ARRAY VECTOR-000)) INDEX-000))
      (CL:IF FIRST?
       (CL:PROGN (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM SS) "(" (STELLA::%SKOLEM-NAME VAR))
        (CL:SETQ FIRST? CL:NIL))
       (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM SS) " " (STELLA::%SKOLEM-NAME VAR)))
      (CL:SETQ INDEX-000 (CL:1+ INDEX-000))))
    (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM SS) ")")
    (CL:LET* ((ANSWER STELLA::NULL) (ITER-000 (STELLA::CONSIFY-CURRENT-SOLUTIONS ITER)))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 STELLA::NIL)) DO (CL:SETQ ANSWER (STELLA::%%VALUE ITER-000))
      (CL:SETQ N (CL:1+ N)) (STELLA::PUSH TUPLES (SOAP-ENCODE-TUPLE ANSWER))
      (CL:SETQ ITER-000 (STELLA::%%REST ITER-000))))
    (CL:SETF (STELLA::|%textContent| COUNT) (STELLA::INTEGER-TO-STRING (CL:TRUNCATE N)))
    (CL:SETF (STELLA::|%type| COUNT) "XSD:int") (CL:SETF (STELLA::|%textContent| THE-QUERY) QUERY-STRING)
    (CL:SETF (STELLA::|%textContent| QUERY-PATTERN) (STELLA::THE-STRING-READER SS)) (CL:SETF (%NRESULTS RESULT) COUNT)
    (CL:SETF (STELLA::%QUERY RESULT) THE-QUERY) (CL:SETF (STELLA::%PATTERN RESULT) QUERY-PATTERN)
    (CL:SETF (%TUPLE RESULT) (STELLA::REVERSE TUPLES)) RESULT)))

;;; (DEFUN BUILD-AND-SEND-REQUEST ...)

(CL:DEFUN BUILD-AND-SEND-REQUEST (TARGET TYPE CONTENT)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TARGET TYPE CONTENT))
  #+MCL
  (CL:CHECK-TYPE TARGET CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE TYPE CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE CONTENT CL:SIMPLE-STRING)
  (CL:LET*
   ((REQ (CREATE-TEST-STRING TYPE CONTENT))
    (RES
     (STELLA::%DO-HTTP-REQUEST (STELLA::CONCATENATE "http://" TARGET "/ploom/soap-rpc/powerloom-soap-service")
      (STELLA::CONS-LIST KWD-SOAP-SERVER-METHOD KWD-SOAP-SERVER-POST KWD-SOAP-SERVER-HEADERS
       (STELLA::MAKE-SOAP-RPC-REQUEST-HEADERS) KWD-SOAP-SERVER-CONTENT (STELLA::WRAP-STRING REQ))))
    (R-STREAM (STELLA::NEW-INPUT-STRING-STREAM RES)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING REQ RES))
   (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM STELLA::STANDARD-OUTPUT) "Sent" EOL REQ EOL)
   (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM STELLA::STANDARD-OUTPUT) EOL EOL "Received" EOL)
   (CL:LET* ((LINE STELLA::NULL-STRING) (ITER-000 (STELLA::LINES R-STREAM)))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING LINE))
    (CL:LOOP WHILE (STELLA::NEXT? ITER-000) DO (CL:SETQ LINE (STELLA::%VALUE ITER-000))
     (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM STELLA::STANDARD-OUTPUT) LINE EOL)))
   (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM STELLA::STANDARD-OUTPUT) EOL EOL)))

;;; (DEFUN (CREATE-TEST-STRING STRING) ...)

(CL:DECLAIM (CL:FTYPE (CL:FUNCTION (CL:SIMPLE-STRING CL:SIMPLE-STRING) CL:SIMPLE-STRING) CREATE-TEST-STRING))
(CL:DEFUN CREATE-TEST-STRING (BODY-TAG-NAME CONTENT)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING BODY-TAG-NAME CONTENT))
  #+MCL
  (CL:CHECK-TYPE BODY-TAG-NAME CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE CONTENT CL:SIMPLE-STRING)
  (STELLA::CONCATENATE "<?xml version='1.0' encoding='UTF-8'?>
  <SOAP-ENV:Envelope xmlns:SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:enc='http://schemas.xmlsoap.org/soap/encoding/' xmlns:ns0='http://hello.org/wsdl' SOAP-ENV:encodingStyle='http://schemas.xmlsoap.org/soap/encoding/'>
 <SOAP-ENV:Body>
 <" BODY-TAG-NAME " xmlns='http://www.isi.edu/powerloom/'" ">" CONTENT "</" BODY-TAG-NAME ">
</SOAP-ENV:Body></SOAP-ENV:Envelope>"))

(CL:DEFUN HELP-STARTUP-SOAP-SERVER1 ()
  (CL:PROGN (CL:SETQ |SGT-SOAP-SERVER-PLSOAP-module| (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "module" STELLA::NULL 1))
   (CL:SETQ |SGT-SOAP-SERVER-PLSOAP-nresults| (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "nresults" STELLA::NULL 1))
   (CL:SETQ |SYM-SOAP-SERVER-XSI-type|
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "type" (STELLA::GET-STELLA-MODULE "/STELLA/XML-OBJECTS/XSI" CL:T) 0))
   (CL:SETQ |SGT-SOAP-SERVER-PLSOAP-pattern| (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "pattern" STELLA::NULL 1))
   (CL:SETQ |SGT-SOAP-SERVER-PLSOAP-options| (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "options" STELLA::NULL 1))
   (CL:SETQ SGT-SOAP-SERVER-PLSOAP-SOAP-COMMAND (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "SOAP-COMMAND" STELLA::NULL 1))
   (CL:SETQ SYM-SOAP-SERVER-PLSOAP-TARGET-MODULE
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "TARGET-MODULE" STELLA::NULL 0))
   (CL:SETQ |SGT-SOAP-SERVER-PLSOAP-command| (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "command" STELLA::NULL 1))
   (CL:SETQ |SGT-SOAP-SERVER-PLSOAP-assertion| (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "assertion" STELLA::NULL 1))
   (CL:SETQ |SGT-SOAP-SERVER-PLSOAP-retraction| (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "retraction" STELLA::NULL 1))
   (CL:SETQ |SGT-SOAP-SERVER-PLSOAP-ask| (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "ask" STELLA::NULL 1))
   (CL:SETQ SYM-SOAP-SERVER-STELLA-OPTIONS
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "OPTIONS" (STELLA::GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ |SGT-SOAP-SERVER-PLSOAP-retrieval| (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "retrieval" STELLA::NULL 1))
   (CL:SETQ SYM-SOAP-SERVER-PLSOAP-NRESULTS (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "NRESULTS" STELLA::NULL 0))
   (CL:SETQ SYM-SOAP-SERVER-LOGIC-PATTERN
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "PATTERN" (STELLA::GET-STELLA-MODULE "/LOGIC" CL:T) 0))
   (CL:SETQ |SGT-SOAP-SERVER-PLSOAP-query| (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "query" STELLA::NULL 1))
   (CL:SETQ |SGT-SOAP-SERVER-PLSOAP-result| (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "result" STELLA::NULL 1))
   (CL:SETQ |SGT-SOAP-SERVER-PLSOAP-answer| (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "answer" STELLA::NULL 1))
   (CL:SETQ SYM-SOAP-SERVER-LOGIC-QUERY
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "QUERY" (STELLA::GET-STELLA-MODULE "/LOGIC" CL:T) 0))
   (CL:SETQ SYM-SOAP-SERVER-STELLA-RESULT
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "RESULT" (STELLA::GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ |SGT-SOAP-SERVER-PLSOAP-item| (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "item" STELLA::NULL 1))
   (CL:SETQ |SGT-SOAP-SERVER-PLSOAP-proposition| (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "proposition" STELLA::NULL 1))
   (CL:SETQ |SGT-SOAP-SERVER-PLSOAP-tuple| (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "tuple" STELLA::NULL 1))
   (CL:SETQ SYM-SOAP-SERVER-STELLA-ITEM
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "ITEM" (STELLA::GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ |SGT-SOAP-SERVER-PLSOAP-tuples| (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "tuples" STELLA::NULL 1))
   (CL:SETQ SYM-SOAP-SERVER-PLSOAP-TUPLE (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "TUPLE" STELLA::NULL 0))
   (CL:SETQ |SGT-SOAP-SERVER-PLSOAP-propositions|
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "propositions" STELLA::NULL 1))
   (CL:SETQ SYM-SOAP-SERVER-LOGIC-PROPOSITION
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "PROPOSITION" (STELLA::GET-STELLA-MODULE "/LOGIC" CL:T) 0))
   (CL:SETQ |SGT-SOAP-SERVER-PLSOAP-powerloomerror|
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "powerloomerror" STELLA::NULL 1))
   (CL:SETQ |SGT-SOAP-SERVER-PLSOAP-stellaerror| (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "stellaerror" STELLA::NULL 1))
   (CL:SETQ |SGT-SOAP-SERVER-PLSOAP-nativeerror| (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "nativeerror" STELLA::NULL 1))
   (CL:SETQ KWD-SOAP-SERVER-CONTENT-TYPE (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "CONTENT-TYPE" STELLA::NULL 2))
   (CL:SETQ KWD-SOAP-SERVER-XML (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "XML" STELLA::NULL 2))
   (CL:SETQ KWD-SOAP-SERVER-DOCUMENTATION (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "DOCUMENTATION" STELLA::NULL 2))
   (CL:SETQ KWD-SOAP-SERVER-IGNORE-TYPE-VIOLATIONS
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "IGNORE-TYPE-VIOLATIONS" STELLA::NULL 2))
   (CL:SETQ KWD-SOAP-SERVER-REALISTIC (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "REALISTIC" STELLA::NULL 2))
   (CL:SETQ SGT-SOAP-SERVER-STELLA-CONS
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "CONS" (STELLA::GET-STELLA-MODULE "/STELLA" CL:T) 1))
   (CL:SETQ KWD-SOAP-SERVER-METHOD (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD" STELLA::NULL 2))
   (CL:SETQ KWD-SOAP-SERVER-POST (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "POST" STELLA::NULL 2))
   (CL:SETQ KWD-SOAP-SERVER-HEADERS (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "HEADERS" STELLA::NULL 2))
   (CL:SETQ KWD-SOAP-SERVER-CONTENT (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "CONTENT" STELLA::NULL 2))
   (CL:SETQ SYM-SOAP-SERVER-PLSOAP-STARTUP-SOAP-SERVER
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-SOAP-SERVER" STELLA::NULL 0))
   (CL:SETQ SYM-SOAP-SERVER-STELLA-METHOD-STARTUP-CLASSNAME
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME" (STELLA::GET-STELLA-MODULE "/STELLA" CL:T) 0))))

(CL:DEFUN STARTUP-SOAP-SERVER ()
  (CL:LET*
   ((STELLA::*MODULE*
     (STELLA::GET-STELLA-MODULE "/POWERLOOM-SERVER/PLSOAP" (STELLA::> STELLA::*STARTUP-TIME-PHASE* 1)))
    (STELLA::*CONTEXT* STELLA::*MODULE*))
   (CL:DECLARE (CL:SPECIAL STELLA::*MODULE* STELLA::*CONTEXT*))
   (CL:WHEN (STELLA::CURRENT-STARTUP-TIME-PHASE? 2) (HELP-STARTUP-SOAP-SERVER1))
   (CL:WHEN (STELLA::CURRENT-STARTUP-TIME-PHASE? 4)
    (CL:SETQ *POWERLOOM-SOAP-MODULE* (STELLA::GET-STELLA-MODULE "PLSOAP" CL:T)))
   (CL:WHEN (STELLA::CURRENT-STARTUP-TIME-PHASE? 5)
    (CL:LET* ((CLASS (STELLA::DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "module" "(DEFCLASS |module| (|XMLObject|))")))
     (CL:SETF (STELLA::%CLASS-CONSTRUCTOR-CODE CLASS) (CL:FUNCTION |new-module|)))
    (CL:LET*
     ((CLASS
       (STELLA::DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "nresults"
        "(DEFCLASS |nresults| (|XMLObject|) :PUBLIC-SLOTS ((/STELLA/XML-OBJECTS/XSI/|type| :TYPE STRING)))")))
     (CL:SETF (STELLA::%CLASS-CONSTRUCTOR-CODE CLASS) (CL:FUNCTION |new-nresults|))
     (CL:SETF (STELLA::%CLASS-SLOT-ACCESSOR-CODE CLASS) (CL:FUNCTION |access-nresults-Slot-Value|)))
    (CL:LET* ((CLASS (STELLA::DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "pattern" "(DEFCLASS |pattern| (|XMLObject|))")))
     (CL:SETF (STELLA::%CLASS-CONSTRUCTOR-CODE CLASS) (CL:FUNCTION |new-pattern|)))
    (CL:LET* ((CLASS (STELLA::DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "options" "(DEFCLASS |options| (|XMLObject|))")))
     (CL:SETF (STELLA::%CLASS-CONSTRUCTOR-CODE CLASS) (CL:FUNCTION |new-options|)))
    (CL:LET*
     ((CLASS
       (STELLA::DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "SOAP-COMMAND"
        "(DEFCLASS SOAP-COMMAND (|XMLObject|) :DOCUMENTATION \"Common parent in type hierarchy.  This will
not actually be realized in surface syntax.\" :PUBLIC-SLOTS ((TARGET-MODULE :TYPE |module|)))")))
     (CL:SETF (STELLA::%CLASS-CONSTRUCTOR-CODE CLASS) (CL:FUNCTION NEW-SOAP-COMMAND))
     (CL:SETF (STELLA::%CLASS-SLOT-ACCESSOR-CODE CLASS) (CL:FUNCTION ACCESS-SOAP-COMMAND-SLOT-VALUE)))
    (CL:LET*
     ((CLASS
       (STELLA::DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "command"
        "(DEFCLASS |command| (SOAP-COMMAND) :PUBLIC-SLOTS ((TARGET-MODULE :TYPE |module|)))")))
     (CL:SETF (STELLA::%CLASS-CONSTRUCTOR-CODE CLASS) (CL:FUNCTION |new-command|))
     (CL:SETF (STELLA::%CLASS-SLOT-ACCESSOR-CODE CLASS) (CL:FUNCTION |access-command-Slot-Value|)))
    (CL:LET*
     ((CLASS
       (STELLA::DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "assertion"
        "(DEFCLASS |assertion| (SOAP-COMMAND) :PUBLIC-SLOTS ((TARGET-MODULE :TYPE |module|)))")))
     (CL:SETF (STELLA::%CLASS-CONSTRUCTOR-CODE CLASS) (CL:FUNCTION |new-assertion|))
     (CL:SETF (STELLA::%CLASS-SLOT-ACCESSOR-CODE CLASS) (CL:FUNCTION |access-assertion-Slot-Value|)))
    (CL:LET*
     ((CLASS
       (STELLA::DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "retraction"
        "(DEFCLASS |retraction| (SOAP-COMMAND) :PUBLIC-SLOTS ((TARGET-MODULE :TYPE |module|)))")))
     (CL:SETF (STELLA::%CLASS-CONSTRUCTOR-CODE CLASS) (CL:FUNCTION |new-retraction|))
     (CL:SETF (STELLA::%CLASS-SLOT-ACCESSOR-CODE CLASS) (CL:FUNCTION |access-retraction-Slot-Value|)))
    (CL:LET*
     ((CLASS
       (STELLA::DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "ask"
        "(DEFCLASS |ask| (SOAP-COMMAND) :PUBLIC-SLOTS ((TARGET-MODULE :TYPE |module|) (OPTIONS :TYPE |options|)))")))
     (CL:SETF (STELLA::%CLASS-CONSTRUCTOR-CODE CLASS) (CL:FUNCTION |new-ask|))
     (CL:SETF (STELLA::%CLASS-SLOT-ACCESSOR-CODE CLASS) (CL:FUNCTION |access-ask-Slot-Value|)))
    (CL:LET*
     ((CLASS
       (STELLA::DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "retrieval"
        "(DEFCLASS |retrieval| (SOAP-COMMAND) :PUBLIC-SLOTS ((TARGET-MODULE :TYPE |module|) (NRESULTS :TYPE |nresults|) (PATTERN :TYPE |pattern|) (OPTIONS :TYPE |options|)))")))
     (CL:SETF (STELLA::%CLASS-CONSTRUCTOR-CODE CLASS) (CL:FUNCTION |new-retrieval|))
     (CL:SETF (STELLA::%CLASS-SLOT-ACCESSOR-CODE CLASS) (CL:FUNCTION |access-retrieval-Slot-Value|)))
    (CL:LET* ((CLASS (STELLA::DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "query" "(DEFCLASS |query| (|XMLObject|))")))
     (CL:SETF (STELLA::%CLASS-CONSTRUCTOR-CODE CLASS) (CL:FUNCTION |new-query|)))
    (CL:LET* ((CLASS (STELLA::DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "result" "(DEFCLASS |result| (|XMLObject|))")))
     (CL:SETF (STELLA::%CLASS-CONSTRUCTOR-CODE CLASS) (CL:FUNCTION |new-result|)))
    (CL:LET*
     ((CLASS
       (STELLA::DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "answer"
        "(DEFCLASS |answer| (|XMLObject|) :PUBLIC-SLOTS ((QUERY :TYPE |query|) (RESULT :TYPE |result|)))")))
     (CL:SETF (STELLA::%CLASS-CONSTRUCTOR-CODE CLASS) (CL:FUNCTION |new-answer|))
     (CL:SETF (STELLA::%CLASS-SLOT-ACCESSOR-CODE CLASS) (CL:FUNCTION |access-answer-Slot-Value|)))
    (CL:LET*
     ((CLASS
       (STELLA::DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "item"
        "(DEFCLASS |item| (|XMLObject|) :PUBLIC-SLOTS ((/STELLA/XML-OBJECTS/XSI/|type| :TYPE STRING)))")))
     (CL:SETF (STELLA::%CLASS-CONSTRUCTOR-CODE CLASS) (CL:FUNCTION |new-item|))
     (CL:SETF (STELLA::%CLASS-SLOT-ACCESSOR-CODE CLASS) (CL:FUNCTION |access-item-Slot-Value|)))
    (CL:LET*
     ((CLASS (STELLA::DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "proposition" "(DEFCLASS |proposition| (|XMLObject|))")))
     (CL:SETF (STELLA::%CLASS-CONSTRUCTOR-CODE CLASS) (CL:FUNCTION |new-proposition|)))
    (CL:LET*
     ((CLASS
       (STELLA::DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "tuple"
        "(DEFCLASS |tuple| (|XMLObject|) :PUBLIC-SLOTS ((NRESULTS :TYPE |nresults|) (ITEM :TYPE (LIST OF |item|))))")))
     (CL:SETF (STELLA::%CLASS-CONSTRUCTOR-CODE CLASS) (CL:FUNCTION |new-tuple|))
     (CL:SETF (STELLA::%CLASS-SLOT-ACCESSOR-CODE CLASS) (CL:FUNCTION |access-tuple-Slot-Value|)))
    (CL:LET*
     ((CLASS
       (STELLA::DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "tuples"
        "(DEFCLASS |tuples| (|XMLObject|) :PUBLIC-SLOTS ((NRESULTS :TYPE |nresults|) (QUERY :TYPE |query|) (PATTERN :TYPE |pattern|) (TUPLE :TYPE (LIST OF |tuple|))))")))
     (CL:SETF (STELLA::%CLASS-CONSTRUCTOR-CODE CLASS) (CL:FUNCTION |new-tuples|))
     (CL:SETF (STELLA::%CLASS-SLOT-ACCESSOR-CODE CLASS) (CL:FUNCTION |access-tuples-Slot-Value|)))
    (CL:LET*
     ((CLASS
       (STELLA::DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "propositions"
        "(DEFCLASS |propositions| (|XMLObject|) :PUBLIC-SLOTS ((NRESULTS :TYPE |nresults|) (PROPOSITION :TYPE (LIST OF |proposition|))))")))
     (CL:SETF (STELLA::%CLASS-CONSTRUCTOR-CODE CLASS) (CL:FUNCTION |new-propositions|))
     (CL:SETF (STELLA::%CLASS-SLOT-ACCESSOR-CODE CLASS) (CL:FUNCTION |access-propositions-Slot-Value|)))
    (CL:LET*
     ((CLASS
       (STELLA::DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "powerloomerror" "(DEFCLASS |powerloomerror| (|XMLObject|))")))
     (CL:SETF (STELLA::%CLASS-CONSTRUCTOR-CODE CLASS) (CL:FUNCTION |new-powerloomerror|)))
    (CL:LET*
     ((CLASS (STELLA::DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "stellaerror" "(DEFCLASS |stellaerror| (|XMLObject|))")))
     (CL:SETF (STELLA::%CLASS-CONSTRUCTOR-CODE CLASS) (CL:FUNCTION |new-stellaerror|)))
    (CL:LET*
     ((CLASS (STELLA::DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "nativeerror" "(DEFCLASS |nativeerror| (|XMLObject|))")))
     (CL:SETF (STELLA::%CLASS-CONSTRUCTOR-CODE CLASS) (CL:FUNCTION |new-nativeerror|))))
   (CL:WHEN (STELLA::CURRENT-STARTUP-TIME-PHASE? 6) (STELLA::FINALIZE-CLASSES))
   (CL:WHEN (STELLA::CURRENT-STARTUP-TIME-PHASE? 7)
    (STELLA::DEFINE-FUNCTION-OBJECT "POWERLOOM-PROCESS-SOAP-REQUEST"
     "(DEFUN (POWERLOOM-PROCESS-SOAP-REQUEST STRING) ((REQUEST-BODY STRING)))"
     (CL:FUNCTION POWERLOOM-PROCESS-SOAP-REQUEST) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "POWERLOOM-SOAP-REQUEST-HANDLER"
     "(DEFUN POWERLOOM-SOAP-REQUEST-HANDLER ((XCHG /HTTP/HTTP-EXCHANGE)) :DOCUMENTATION \"WRITE ME\" :PUBLIC? TRUE)"
     (CL:FUNCTION POWERLOOM-SOAP-REQUEST-HANDLER) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "SAFE-GET-CONTENT" "(DEFUN (SAFE-GET-CONTENT STRING) ((OBJ |XMLObject|)))"
     (CL:FUNCTION SAFE-GET-CONTENT) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "CHECK-READ-ONLY" "(DEFUN CHECK-READ-ONLY ((COMMAND-FORM SOAP-COMMAND)))"
     (CL:FUNCTION CHECK-READ-ONLY) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "PROCESS-SOAP-ENCODED-COMMAND"
     "(DEFUN (PROCESS-SOAP-ENCODED-COMMAND |XMLObject|) ((COMMAND-FORM SOAP-COMMAND)))"
     (CL:FUNCTION PROCESS-SOAP-ENCODED-COMMAND) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "SOAP-ENCODE-COMMAND-RESPONSE"
     "(DEFUN (SOAP-ENCODE-COMMAND-RESPONSE |XMLObject|) ((OBJ OBJECT)))" (CL:FUNCTION SOAP-ENCODE-COMMAND-RESPONSE)
     STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "SOAP-ENCODE-ASSERT-RESPONSE"
     "(DEFUN (SOAP-ENCODE-ASSERT-RESPONSE |XMLObject|) ((ITER (/PLI/PL-ITERATOR OF PROPOSITION))))"
     (CL:FUNCTION SOAP-ENCODE-ASSERT-RESPONSE) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "SOAP-ENCODE-SIMPLE-ANSWER"
     "(DEFUN (SOAP-ENCODE-SIMPLE-ANSWER |XMLObject|) ((QUERY-STRING STRING) (TV TRUTH-VALUE)))"
     (CL:FUNCTION SOAP-ENCODE-SIMPLE-ANSWER) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "SOAP-ENCODE-ITEM" "(DEFUN (SOAP-ENCODE-ITEM |item|) ((OBJ OBJECT)))"
     (CL:FUNCTION SOAP-ENCODE-ITEM) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "SOAP-ENCODE-TUPLE" "(DEFUN (SOAP-ENCODE-TUPLE |tuple|) ((OBJ OBJECT)))"
     (CL:FUNCTION SOAP-ENCODE-TUPLE) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "SOAP-ENCODE-RETRIEVAL-ANSWER"
     "(DEFUN (SOAP-ENCODE-RETRIEVAL-ANSWER |XMLObject|) ((QUERY-STRING STRING) (ITER QUERY-ITERATOR)))"
     (CL:FUNCTION SOAP-ENCODE-RETRIEVAL-ANSWER) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "BUILD-AND-SEND-REQUEST"
     "(DEFUN BUILD-AND-SEND-REQUEST ((TARGET STRING) (TYPE STRING) (CONTENT STRING)))"
     (CL:FUNCTION BUILD-AND-SEND-REQUEST) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "CREATE-TEST-STRING"
     "(DEFUN (CREATE-TEST-STRING STRING) ((BODY-TAG-NAME STRING) (CONTENT STRING)))" (CL:FUNCTION CREATE-TEST-STRING)
     STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "STARTUP-SOAP-SERVER" "(DEFUN STARTUP-SOAP-SERVER () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-SOAP-SERVER) STELLA::NULL)
    (CL:LET* ((FUNCTION (STELLA::LOOKUP-FUNCTION SYM-SOAP-SERVER-PLSOAP-STARTUP-SOAP-SERVER)))
     (STELLA::SET-DYNAMIC-SLOT-VALUE (STELLA::%DYNAMIC-SLOTS FUNCTION) SYM-SOAP-SERVER-STELLA-METHOD-STARTUP-CLASSNAME
      (STELLA::WRAP-STRING "_StartupSoapServer") STELLA::NULL-STRING-WRAPPER)))
   (CL:WHEN (STELLA::CURRENT-STARTUP-TIME-PHASE? 8) (STELLA::FINALIZE-SLOTS) (STELLA::CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (STELLA::CURRENT-STARTUP-TIME-PHASE? 9)
    (STELLA::%IN-MODULE (STELLA::COPY-CONS-TREE (STELLA::WRAP-STRING "PLSOAP")))
    (STELLA::DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE "(DEFGLOBAL *SOAP-READ-ONLY?* BOOLEAN FALSE)")
    (STELLA::INSERT-AT STELLA::*NAMESPACE-PREFIX-URI-TABLE* (STELLA::WRAP-STRING "PLSOAP")
     (STELLA::WRAP-STRING "http://www.isi.edu/powerloom/"))
    (STELLA::INSERT-AT STELLA::*NAMESPACE-URI-PREFIX-TABLE* (STELLA::WRAP-STRING "http://www.isi.edu/powerloom/")
     (STELLA::WRAP-STRING "PLSOAP"))
    (STELLA::DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *POWERLOOM-SOAP-MODULE* MODULE (GET-STELLA-MODULE \"PLSOAP\" TRUE))")
    (STELLA::PUBLISH-HANDLER "/ploom/soap-rpc/powerloom-soap-service" (CL:FUNCTION POWERLOOM-SOAP-REQUEST-HANDLER)
     KWD-SOAP-SERVER-CONTENT-TYPE (STELLA::WRAP-STRING (STELLA::GET-HTTP-MIME-TYPE KWD-SOAP-SERVER-XML STELLA::NULL))
     KWD-SOAP-SERVER-DOCUMENTATION (STELLA::WRAP-STRING "Service for PowerLoom SOAP server.")))))
