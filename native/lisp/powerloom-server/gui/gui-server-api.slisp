;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; gui-server-api.slisp

#|
 +---------------------------- BEGIN LICENSE BLOCK ---------------------------+
 |                                                                            |
 | Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
 |                                                                            |
 | The contents of this file are subject to the Mozilla Public License        |
 | Version 1.1 (the "License"); you may not use this file except in           |
 | compliance with the License. You may obtain a copy of the License at       |
 | http://www.mozilla.org/MPL/                                                |
 |                                                                            |
 | Software distributed under the License is distributed on an "AS IS" basis, |
 | WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
 | for the specific language governing rights and limitations under the       |
 | License.                                                                   |
 |                                                                            |
 | The Original Code is the PowerLoom KR&R System.                            |
 |                                                                            |
 | The Initial Developer of the Original Code is                              |
 | UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
 | 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
 |                                                                            |
 | Portions created by the Initial Developer are Copyright (C) 2002-2014      |
 | the Initial Developer. All Rights Reserved.                                |
 |                                                                            |
 | Contributor(s):                                                            |
 |                                                                            |
 | Alternatively, the contents of this file may be used under the terms of    |
 | either the GNU General Public License Version 2 or later (the "GPL"), or   |
 | the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
 | in which case the provisions of the GPL or the LGPL are applicable instead |
 | of those above. If you wish to allow use of your version of this file only |
 | under the terms of either the GPL or the LGPL, and not to allow others to  |
 | use your version of this file under the terms of the MPL, indicate your    |
 | decision by deleting the provisions above and replace them with the notice |
 | and other provisions required by the GPL or the LGPL. If you do not delete |
 | the provisions above, a recipient may use your version of this file under  |
 | the terms of any one of the MPL, the GPL or the LGPL.                      |
 |                                                                            |
 +----------------------------- END LICENSE BLOCK ----------------------------+
|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR KWD-GUI-SERVER-API-LOG-LEVELS NULL)
(CL:DEFVAR KWD-GUI-SERVER-API-LEVEL NULL)
(CL:DEFVAR KWD-GUI-SERVER-API-DEVELOPMENT NULL)
(CL:DEFVAR KWD-GUI-SERVER-API-HIGH NULL)
(CL:DEFVAR KWD-GUI-SERVER-API-LOW NULL)
(CL:DEFVAR KWD-GUI-SERVER-API-PREFIX NULL)
(CL:DEFVAR KWD-GUI-SERVER-API-MAX-WIDTH NULL)
(CL:DEFVAR KWD-GUI-SERVER-API-STREAM NULL)
(CL:DEFVAR SGT-GUI-SERVER-API-LOGIC-LOGIC-OBJECT NULL)
(CL:DEFVAR SGT-GUI-SERVER-API-STELLA-CONS NULL)
(CL:DEFVAR SGT-GUI-SERVER-API-LOGIC-TRUTH-VALUE NULL)
(CL:DEFVAR SGT-GUI-SERVER-API-LOGIC-NAMED-DESCRIPTION NULL)
(CL:DEFVAR SGT-GUI-SERVER-API-LOGIC-SKOLEM NULL)
(CL:DEFVAR SYM-GUI-SERVER-API-STELLA-CODE-ONLY? NULL)
(CL:DEFVAR SYM-GUI-SERVER-API-STELLA-JAVA-FLOTSAM-CLASS NULL)
(CL:DEFVAR SYM-GUI-SERVER-API-STELLA-API? NULL)
(CL:DEFVAR SGT-GUI-SERVER-API-STELLA-LITERAL NULL)
(CL:DEFVAR KWD-GUI-SERVER-API-FORALL NULL)
(CL:DEFVAR KWD-GUI-SERVER-API-EXISTS NULL)
(CL:DEFVAR KWD-GUI-SERVER-API-IMPLIES NULL)
(CL:DEFVAR SYM-GUI-SERVER-API-LOGIC-MASTER-PROPOSITION NULL)
(CL:DEFVAR SYM-GUI-SERVER-API-STELLA-ASK NULL)
(CL:DEFVAR KWD-GUI-SERVER-API-ORIGINAL NULL)
(CL:DEFVAR SYM-GUI-SERVER-API-GUI-SERVER-WILD NULL)
(CL:DEFVAR SYM-GUI-SERVER-API-GUI-SERVER-STARTUP-GUI-SERVER-API NULL)
(CL:DEFVAR SYM-GUI-SERVER-API-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STARTUP-TIME-PHASE* NULL-CHARACTER *MOST-RECENT-QUERY*
  *LAZY-SATELLITE-RULES?* PLI::TAXONOMIC-ENV EOL-STRING *CONTEXT*
  TRUE-WRAPPER NULL-STRING-WRAPPER FALSE-WRAPPER NULL-INTEGER
  *KB-DIRECTORY* STANDARD-OUTPUT EOL *MODULE* *ROOT-MODULE* NIL))

;;; (DEFGLOBAL *ALLOW-REMOTE-FILEBROWSING* ...)

(CL:DEFVAR *ALLOW-REMOTE-FILEBROWSING* CL:NIL)

;;; (DEFGLOBAL *SERVER-LOG-FILE* ...)

(CL:DEFVAR *SERVER-LOG-FILE* "PL:logs;powerloom-server.log")
(CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING *SERVER-LOG-FILE*))

;;; (DEFUN SERVER-LOG ...)

(CL:DEFUN SERVER-LOG (LOGLEVEL CL:&REST MESSAGE)
  (CL:LET* ((ARGLIST-000 NIL))
   (CL:LET* ((ARG-000 NULL) (ITER-000 MESSAGE) (COLLECT-000 NULL))
    (CL:LOOP WHILE ITER-000 DO (CL:SETQ ARG-000 (CL:POP ITER-000))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN (CL:SETQ COLLECT-000 (CONS ARG-000 NIL))
       (CL:IF (CL:EQ ARGLIST-000 NIL) (CL:SETQ ARGLIST-000 COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST ARGLIST-000 COLLECT-000)))
      (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS ARG-000 NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
   (LOG-MESSAGE "PL-Server" LOGLEVEL ARGLIST-000)))

;;; (DEFUN (PL-OBJECT-TO-GUI-NAME STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T) CL:SIMPLE-STRING) PL-OBJECT-TO-GUI-NAME))
(CL:DEFUN PL-OBJECT-TO-GUI-NAME (X)
  (CL:LET*
   ((HOMEMODULE (HOME-MODULE X)) (SURROGATE (OBJECT-SURROGATE X)))
   (CL:WHEN (CL:AND (CL:EQ SURROGATE NULL) (SURROGATE? X))
    (CL:SETQ SURROGATE X))
   (CL:IF (CL:NOT (CL:EQ SURROGATE NULL))
    (CL:IF
     (CL:NOT (CL:EQ HOMEMODULE (%SURROGATE.HOME-CONTEXT SURROGATE)))
     (CONCATENATE
      (%MODULE.MODULE-NAME (%SURROGATE.HOME-CONTEXT SURROGATE)) "/"
      (%SURROGATE.SYMBOL-NAME SURROGATE))
     (%SURROGATE.SYMBOL-NAME SURROGATE))
    (PLI::OBJECT-TO-STRING X))))

;;; (DEFUN (GUI-NAME-TO-PL-NAME STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:SIMPLE-STRING) CL:SIMPLE-STRING)
  GUI-NAME-TO-PL-NAME))
(CL:DEFUN GUI-NAME-TO-PL-NAME (NAME)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING NAME))
  #+MCL
  (CL:CHECK-TYPE NAME CL:SIMPLE-STRING)
  (CL:IF (QUALIFIED-STELLA-NAME? NAME)
   (CL:LET*
    ((BARENAME STELLA::NULL-STRING) (MODULE STELLA::NULL-STRING)
     (TYPE NULL))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING BARENAME MODULE))
    (CL:MULTIPLE-VALUE-SETQ (BARENAME MODULE TYPE)
     (PARSE-STELLA-NAME NAME CL:NIL))
    (CL:SETQ TYPE TYPE)
    (CL:IF
     (CL:EQL
      (CL:LET ((SELF BARENAME) (POSITION 0))
       (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
        (CL:TYPE CL:FIXNUM POSITION))
       (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
        (CL:THE CL:FIXNUM POSITION)))
      #\|)
     (CONCATENATE MODULE "/" BARENAME "")
     (CONCATENATE MODULE "/|" BARENAME "|")))
   (CL:IF
    (CL:EQL
     (CL:LET ((SELF NAME) (POSITION 0))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
       (CL:THE CL:FIXNUM POSITION)))
     #\|)
    NAME (CONCATENATE "|" NAME "|"))))

;;; (DEFUN (SERVER-GET-MODULES |PLModuleContainer|) ...)

(CL:DEFUN SERVER-GET-MODULES ()
  "Get all the loaded modules, structured, hierarchically"
  (CL:LET* ((ROOTMODULE *ROOT-MODULE*)) (GET-MODULES ROOTMODULE)))

;;; (DEFUN (SERVER-GET-CONCEPTS-FOR-MODULE |PLConceptContainer|) ...)

(CL:DEFUN SERVER-GET-CONCEPTS-FOR-MODULE (PLSTRING)
  "Get all the concepts in a module, structured hierarchically"
  (CL:LET*
   ((MODULE (PLI::GET-MODULE (|%PLString.Value| PLSTRING) NULL)))
   (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*))
    (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*)) (GET-CONCEPTS MODULE))))

;;; (DEFUN (SERVER-GET-CONCEPT-COMPLETIONS |PLConceptContainer|) ...)

(CL:DEFUN SERVER-GET-CONCEPT-COMPLETIONS (PLMODULE PREFIX)
  "Get all the concepts in a module and included/used modules that begin with 'prefix'"
  (CL:LET*
   ((MODULE (PLI::GET-MODULE (|%PLString.Value| PLMODULE) NULL)))
   (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*))
    (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
    (GET-CONCEPTS-WITH-PREFIX MODULE (|%PLString.Value| PREFIX)))))

;;; (DEFUN (SERVER-GET-INSTANCES-FOR-MODULE |PLInstanceContainer|) ...)

(CL:DEFUN SERVER-GET-INSTANCES-FOR-MODULE (PLSTRING)
  "Get all the instances in a module, excluding skolems"
  (CL:LET*
   ((MODULE (PLI::GET-MODULE (|%PLString.Value| PLSTRING) NULL))
    (ALLINSTANCES (ALL-INSTANCES MODULE CL:T))
    (NONSKOLEMINSTANCES (NEW-LIST))
    (RESULT (|new-PLInstanceContainer|)) (XMLINSTANCES (NEW-LIST)))
   (CL:LET*
    ((INSTANCE NULL) (ITER-000 ALLINSTANCES) (COLLECT-000 NULL))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ INSTANCE (%ITERATOR.VALUE ITER-000))
     (CL:WHEN (CL:NOT (SKOLEM? INSTANCE))
      (CL:IF (CL:EQ COLLECT-000 NULL)
       (CL:PROGN (CL:SETQ COLLECT-000 (CONS INSTANCE NIL))
        (CL:IF (CL:EQ (%LIST.THE-CONS-LIST NONSKOLEMINSTANCES) NIL)
         (CL:SETF (%LIST.THE-CONS-LIST NONSKOLEMINSTANCES) COLLECT-000)
         (ADD-CONS-TO-END-OF-CONS-LIST
          (%LIST.THE-CONS-LIST NONSKOLEMINSTANCES) COLLECT-000)))
       (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS INSTANCE NIL))
        (CL:SETQ COLLECT-000 (%%REST COLLECT-000)))))))
   (CL:SETQ XMLINSTANCES (MAKE-PL-INSTANCES NONSKOLEMINSTANCES CL:T))
   (CL:SETQ XMLINSTANCES
    (SORT XMLINSTANCES (CL:FUNCTION |PLInstance<|)))
   (CL:SETF (|%PLInstanceContainer.PLInstance| RESULT) XMLINSTANCES)
   RESULT))

;;; (DEFUN (SERVER-GET-INSTANCE-COMPLETIONS |PLInstanceContainer|) ...)

(CL:DEFUN SERVER-GET-INSTANCE-COMPLETIONS (PLMODULE PREFIX)
  "Get all the instances begining with 'prefix' in all modules accessible from 'plModule'."
  (CL:LET*
   ((MODULE (PLI::GET-MODULE (|%PLString.Value| PLMODULE) NULL))
    (ALLINSTANCES (ALL-INSTANCES MODULE CL:NIL))
    (NONSKOLEMINSTANCES (NEW-LIST))
    (RESULT (|new-PLInstanceContainer|)) (XMLINSTANCES (NEW-LIST))
    (DOWNCASEDPREFIX (STRING-DOWNCASE (|%PLString.Value| PREFIX))))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING DOWNCASEDPREFIX))
   (CL:LET*
    ((INSTANCE NULL) (ITER-000 ALLINSTANCES) (COLLECT-000 NULL))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ INSTANCE (%ITERATOR.VALUE ITER-000))
     (CL:WHEN
      (CL:AND (CL:NOT (SKOLEM? INSTANCE))
       (STARTS-WITH? (GET-LOGIC-OBJECT-NAME INSTANCE "FALSE")
        DOWNCASEDPREFIX 0))
      (CL:IF (CL:EQ COLLECT-000 NULL)
       (CL:PROGN (CL:SETQ COLLECT-000 (CONS INSTANCE NIL))
        (CL:IF (CL:EQ (%LIST.THE-CONS-LIST NONSKOLEMINSTANCES) NIL)
         (CL:SETF (%LIST.THE-CONS-LIST NONSKOLEMINSTANCES) COLLECT-000)
         (ADD-CONS-TO-END-OF-CONS-LIST
          (%LIST.THE-CONS-LIST NONSKOLEMINSTANCES) COLLECT-000)))
       (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS INSTANCE NIL))
        (CL:SETQ COLLECT-000 (%%REST COLLECT-000)))))))
   (CL:SETQ XMLINSTANCES (MAKE-PL-INSTANCES NONSKOLEMINSTANCES CL:T))
   (CL:SETQ XMLINSTANCES
    (SORT XMLINSTANCES (CL:FUNCTION |PLInstance<|)))
   (CL:SETF (|%PLInstanceContainer.PLInstance| RESULT) XMLINSTANCES)
   RESULT))

;;; (DEFUN (SERVER-GET-RELATIONS-FOR-MODULE |PLRelationContainer|) ...)

(CL:DEFUN SERVER-GET-RELATIONS-FOR-MODULE (PLSTRING)
  "Get all the relations in a module, structured hierarchically"
  (CL:LET*
   ((MODULE (PLI::GET-MODULE (|%PLString.Value| PLSTRING) NULL)))
   (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*))
    (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
    (GET-RELATIONS MODULE))))

;;; (DEFUN (SERVER-GET-RELATION-COMPLETIONS |PLRelationContainer|) ...)

(CL:DEFUN SERVER-GET-RELATION-COMPLETIONS (PLMODULE PREFIX)
  "Get all the relations in a module and included/used modules that begin with 'prefix'"
  (CL:LET*
   ((MODULE (PLI::GET-MODULE (|%PLString.Value| PLMODULE) NULL)))
   (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*))
    (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
    (GET-RELATIONS-WITH-PREFIX MODULE (|%PLString.Value| PREFIX)))))

;;; (DEFUN (SERVER-GET-INSTANCES-FOR-CONCEPT |PLInstanceContainer|) ...)

(CL:DEFUN SERVER-GET-INSTANCES-FOR-CONCEPT (MODULENAME CONCEPTNAME)
  "Get all the instances for a given module+concept"
  (CL:LET*
   ((MODULE (PLI::GET-MODULE (|%PLString.Value| MODULENAME) NULL))
    (ITER
     (PLI::GET-CONCEPT-INSTANCES
      (PLI::GET-CONCEPT (|%PLString.Value| CONCEPTNAME) MODULE NULL)
      MODULE NULL))
    (INSTANCES (NEW-LIST)) (RESULT (|new-PLInstanceContainer|))
    (XMLINSTANCES (NEW-LIST)))
   (CL:LET* ((INSTANCE NULL) (ITER-000 ITER) (COLLECT-000 NULL))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ INSTANCE (PLI::%PL-ITERATOR.VALUE ITER-000))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN (CL:SETQ COLLECT-000 (CONS INSTANCE NIL))
       (CL:IF (CL:EQ (%LIST.THE-CONS-LIST INSTANCES) NIL)
        (CL:SETF (%LIST.THE-CONS-LIST INSTANCES) COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST (%LIST.THE-CONS-LIST INSTANCES)
         COLLECT-000)))
      (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS INSTANCE NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
   (CL:SETQ XMLINSTANCES (MAKE-PL-INSTANCES INSTANCES CL:T))
   (CL:SETQ XMLINSTANCES
    (SORT XMLINSTANCES (CL:FUNCTION |PLInstance<|)))
   (CL:SETF (|%PLInstanceContainer.PLInstance| RESULT) XMLINSTANCES)
   RESULT))

;;; (DEFUN (SERVER-GET-DIRECT-INSTANCES-FOR-CONCEPT |PLInstanceContainer|) ...)

(CL:DEFUN SERVER-GET-DIRECT-INSTANCES-FOR-CONCEPT (MODULENAME CONCEPTNAME)
  "Get all the instances for a given module+concept"
  (CL:LET*
   ((MODULE (PLI::GET-MODULE (|%PLString.Value| MODULENAME) NULL))
    (ITER
     (PLI::GET-DIRECT-CONCEPT-INSTANCES
      (PLI::GET-CONCEPT (|%PLString.Value| CONCEPTNAME) MODULE NULL)
      MODULE NULL))
    (INSTANCES (NEW-LIST)) (RESULT (|new-PLInstanceContainer|))
    (XMLINSTANCES (NEW-LIST)))
   (CL:LET* ((INSTANCE NULL) (ITER-000 ITER) (COLLECT-000 NULL))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ INSTANCE (PLI::%PL-ITERATOR.VALUE ITER-000))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN (CL:SETQ COLLECT-000 (CONS INSTANCE NIL))
       (CL:IF (CL:EQ (%LIST.THE-CONS-LIST INSTANCES) NIL)
        (CL:SETF (%LIST.THE-CONS-LIST INSTANCES) COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST (%LIST.THE-CONS-LIST INSTANCES)
         COLLECT-000)))
      (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS INSTANCE NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
   (CL:SETQ XMLINSTANCES (MAKE-PL-INSTANCES INSTANCES CL:T))
   (CL:SETQ XMLINSTANCES
    (SORT XMLINSTANCES (CL:FUNCTION |PLInstance<|)))
   (CL:SETF (|%PLInstanceContainer.PLInstance| RESULT) XMLINSTANCES)
   RESULT))

;;; (DEFUN (SERVER-GET-DOCUMENTATION-FOR-CONCEPT |PLString|) ...)

(CL:DEFUN SERVER-GET-DOCUMENTATION-FOR-CONCEPT (MODULENAME CONCEPTNAME)
  "Get the documentation string for module+concept"
  (GET-DOCUMENTATION-FOR-OBJECT (|%PLString.Value| MODULENAME)
   (|%PLString.Value| CONCEPTNAME)))

;;; (DEFUN (SERVER-GET-SOURCE-FOR-CONCEPT |PLString|) ...)

(CL:DEFUN SERVER-GET-SOURCE-FOR-CONCEPT (MODULENAME CONCEPTNAME)
  "Get the source string for module+concept"
  (CL:LET*
   ((RESULT (|new-PLString|))
    (SOURCE
     (STRINGIFIED-SOURCE
      (PLI::S-GET-CONCEPT
       (GUI-NAME-TO-PL-NAME (|%PLString.Value| CONCEPTNAME))
       (|%PLString.Value| MODULENAME) NULL))))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SOURCE))
   (CL:SETF (|%PLString.Value| RESULT) (XMLIFY-STRING SOURCE)) RESULT))

;;; (DEFUN (SERVER-GET-DOCUMENTATION-FOR-RELATION |PLString|) ...)

(CL:DEFUN SERVER-GET-DOCUMENTATION-FOR-RELATION (MODULENAME RELATIONNAME)
  "Get the documentation string for module+relation"
  (GET-DOCUMENTATION-FOR-OBJECT (|%PLString.Value| MODULENAME)
   (|%PLString.Value| RELATIONNAME)))

;;; (DEFUN (SERVER-GET-SUPERCONCEPTS-FOR-CONCEPT |PLSurrogateCollection|) ...)

(CL:DEFUN SERVER-GET-SUPERCONCEPTS-FOR-CONCEPT (MODULENAME CONCEPTNAME)
  "Get the superconcepts for module+concept"
  (CL:LET*
   ((CONCEPT
     (PLI::S-GET-CONCEPT
      (GUI-NAME-TO-PL-NAME (|%PLString.Value| CONCEPTNAME))
      (|%PLString.Value| MODULENAME) NULL))
    (MODULE (PLI::GET-MODULE (|%PLString.Value| MODULENAME) NULL)))
   (CREATE-SUPERRELATIONS-CONTAINER CONCEPT MODULE)))

;;; (DEFUN (SERVER-GET-SUPERRELATIONS-FOR-RELATION |PLSurrogateCollection|) ...)

(CL:DEFUN SERVER-GET-SUPERRELATIONS-FOR-RELATION (MODULENAME RELATIONNAME)
  "Get the superrelations for module+relation"
  (CL:LET*
   ((RELATION
     (PLI::S-GET-RELATION
      (GUI-NAME-TO-PL-NAME (|%PLString.Value| RELATIONNAME))
      (|%PLString.Value| MODULENAME) NULL))
    (MODULE (PLI::GET-MODULE (|%PLString.Value| MODULENAME) NULL)))
   (CREATE-SUPERRELATIONS-CONTAINER RELATION MODULE)))

;;; (DEFUN (SERVER-GET-INCLUDES-FOR-MODULE |PLSurrogateCollection|) ...)

(CL:DEFUN SERVER-GET-INCLUDES-FOR-MODULE (MODULENAME)
  "Get the includes for module"
  (CL:LET*
   ((MODULE (PLI::GET-MODULE (|%PLString.Value| MODULENAME) NULL)))
   (CREATE-MODULE-COLLECTION
    (LISTIFY (PLI::GET-PARENT-MODULES MODULE)))))

;;; (DEFUN (SERVER-GET-USES-FOR-MODULE |PLSurrogateCollection|) ...)

(CL:DEFUN SERVER-GET-USES-FOR-MODULE (MODULENAME)
  "Get the uses for module"
  (CL:LET*
   ((MODULE (PLI::GET-MODULE (|%PLString.Value| MODULENAME) NULL)))
   (CREATE-MODULE-COLLECTION (%MODULE.USES MODULE))))

;;; (DEFUN (SERVER-GET-SHADOWED-SURROGATES-FOR-MODULE |PLSurrogateCollection|) ...)

(CL:DEFUN SERVER-GET-SHADOWED-SURROGATES-FOR-MODULE (MODULENAME)
  "Get the uses for module"
  (CL:LET*
   ((MODULE (PLI::GET-MODULE (|%PLString.Value| MODULENAME) NULL)))
   (CREATE-SURROGATE-COLLECTION (SHADOWED-SURROGATES MODULE))))

;;; (DEFUN (SERVER-GET-VARIABLES-FOR-RELATION |PLVariableList|) ...)

(CL:DEFUN SERVER-GET-VARIABLES-FOR-RELATION (MODULENAME RELATIONNAME)
  "Get the superrelations for module+relation"
  (CL:LET*
   ((RELATION
     (PLI::S-GET-RELATION
      (GUI-NAME-TO-PL-NAME (|%PLString.Value| RELATIONNAME))
      (|%PLString.Value| MODULENAME) NULL)))
   (CREATE-VARIABLES-LIST RELATION)))

;;; (DEFUN (SERVER-GET-PROPOSITIONS-FOR-MODULE |PLPropositionContainer|) ...)

(CL:DEFUN SERVER-GET-PROPOSITIONS-FOR-MODULE (MODULENAME)
  "Get all the propositions for a given module"
  (CL:LET*
   ((MODULE (PLI::GET-MODULE (|%PLString.Value| MODULENAME) NULL)))
   (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*))
    (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
    (CL:LET*
     ((ITER (PLI::GET-PROPOSITIONS-IN-MODULE MODULE NULL))
      (PROPOSITIONS (NEW-LIST)) (RESULT (|new-PLPropositionContainer|))
      (XMLINSTANCES (NEW-LIST)))
     (CL:LET* ((PROPOSITION NULL) (ITER-000 ITER) (COLLECT-000 NULL))
      (CL:LOOP WHILE (NEXT? ITER-000) DO
       (CL:SETQ PROPOSITION (PLI::%PL-ITERATOR.VALUE ITER-000))
       (CL:IF (CL:EQ COLLECT-000 NULL)
        (CL:PROGN (CL:SETQ COLLECT-000 (CONS PROPOSITION NIL))
         (CL:IF (CL:EQ (%LIST.THE-CONS-LIST PROPOSITIONS) NIL)
          (CL:SETF (%LIST.THE-CONS-LIST PROPOSITIONS) COLLECT-000)
          (ADD-CONS-TO-END-OF-CONS-LIST
           (%LIST.THE-CONS-LIST PROPOSITIONS) COLLECT-000)))
        (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS PROPOSITION NIL))
         (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
     (CL:SETQ XMLINSTANCES
      (MAKE-PL-PROPOSITIONS PROPOSITIONS MODULE CL:NIL))
     (CL:SETF (|%PLPropositionContainer.PLProposition| RESULT)
      XMLINSTANCES)
     RESULT))))

;;; (DEFUN (SERVER-GET-RELATIONS-FOR-CONCEPT |PLRelationContainer|) ...)

(CL:DEFUN SERVER-GET-RELATIONS-FOR-CONCEPT (MODULENAME CONCEPTNAME)
  "Get all the direct relations which have 'conceptName' as their domain"
  (CL:LET*
   ((MODULE (PLI::GET-MODULE (|%PLString.Value| MODULENAME) NULL)))
   (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*))
    (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
    (CL:LET*
     ((CONCEPT
       (PLI::GET-CONCEPT (|%PLString.Value| CONCEPTNAME) MODULE NULL))
      (XMLINSTANCES (NEW-LIST))
      (RELATIONS (GET-DIRECT-RELATIONS-FOR-CONCEPT MODULE CONCEPT))
      (CONTAINER (|new-PLRelationContainer|)))
     (CL:SETQ XMLINSTANCES
      (MAKE-PL-RELATIONS RELATIONS (|%PLString.Value| MODULENAME)))
     (CL:SETF (|%PLRelationContainer.PLRelation| CONTAINER)
      XMLINSTANCES)
     CONTAINER))))

;;; (DEFUN (SERVER-GET-INHERITED-RELATIONS-FOR-CONCEPT |PLRelationContainer|) ...)

(CL:DEFUN SERVER-GET-INHERITED-RELATIONS-FOR-CONCEPT (MODULENAME CONCEPTNAME)
  "Get all the relations which have 'conceptName' as a subtype of their domain"
  (CL:LET*
   ((MODULE (PLI::GET-MODULE (|%PLString.Value| MODULENAME) NULL)))
   (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*))
    (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
    (CL:LET*
     ((CONCEPT
       (PLI::GET-CONCEPT (|%PLString.Value| CONCEPTNAME) MODULE NULL))
      (XMLINSTANCES (NEW-LIST))
      (RELATIONS (GET-INHERITED-RELATIONS-FOR-CONCEPT MODULE CONCEPT))
      (CONTAINER (|new-PLRelationContainer|)))
     (CL:SETQ XMLINSTANCES
      (MAKE-PL-RELATIONS RELATIONS (|%PLString.Value| MODULENAME)))
     (CL:SETF (|%PLRelationContainer.PLRelation| CONTAINER)
      XMLINSTANCES)
     CONTAINER))))

;;; (DEFUN (SERVER-GET-PROPOSITIONS-FOR-INSTANCE |PLPropositionContainer|) ...)

(CL:DEFUN SERVER-GET-PROPOSITIONS-FOR-INSTANCE (MODULENAME INSTANCENAME)
  "Get all the propositions for a given instance"
  (CL:LET*
   ((MODULE (PLI::GET-MODULE (|%PLString.Value| MODULENAME) NULL)))
   (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*))
    (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
    (CL:LET*
     ((PROPOSITIONS
       (GET-PROPOSITIONS-FOR-OBJECT (|%PLString.Value| MODULENAME)
        (|%PLString.Value| INSTANCENAME) CL:NIL))
      (XMLINSTANCES (NEW-LIST))
      (RESULT (|new-PLPropositionContainer|)))
     (CL:SETQ XMLINSTANCES
      (MAKE-PL-PROPOSITIONS PROPOSITIONS MODULE CL:NIL))
     (CL:SETF (|%PLPropositionContainer.PLProposition| RESULT)
      XMLINSTANCES)
     RESULT))))

;;; (DEFUN (SERVER-GET-TYPES-FOR-INSTANCE |PLSurrogateCollection|) ...)

(CL:DEFUN SERVER-GET-TYPES-FOR-INSTANCE (MODULENAME INSTANCENAME)
  "Get all the types of an instance."
  (CL:LET*
   ((MODULE (PLI::GET-MODULE (|%PLString.Value| MODULENAME) NULL))
    (INSTANCE
     (PLI::S-GET-OBJECT
      (GUI-NAME-TO-PL-NAME (|%PLString.Value| INSTANCENAME))
      (|%PLString.Value| MODULENAME) NULL))
    (TYPES (LISTIFY (PLI::GET-DIRECT-TYPES INSTANCE MODULE NULL))))
   (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*))
    (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
    (CREATE-SURROGATE-COLLECTION-FOR-LOGIC-OBJECT TYPES))))

;;; (DEFUN (SERVER-GET-DOCUMENTATION-FOR-INSTANCE |PLString|) ...)

(CL:DEFUN SERVER-GET-DOCUMENTATION-FOR-INSTANCE (MODULENAME INSTANCENAME)
  "Get the documentation string for module+instance."
  (GET-DOCUMENTATION-FOR-OBJECT (|%PLString.Value| MODULENAME)
   (|%PLString.Value| INSTANCENAME)))

;;; (DEFUN (SERVER-GET-PROPOSITIONS-FOR-CONCEPT |PLPropositionContainer|) ...)

(CL:DEFUN SERVER-GET-PROPOSITIONS-FOR-CONCEPT (MODULENAME INSTANCENAME)
  "Get all the propositions for a given concept"
  (SERVER-GET-PROPOSITIONS-FOR-RELATION MODULENAME INSTANCENAME))

;;; (DEFUN (SERVER-GET-PROPOSITIONS-FOR-RELATION |PLPropositionContainer|) ...)

(CL:DEFUN SERVER-GET-PROPOSITIONS-FOR-RELATION (MODULENAME INSTANCENAME)
  "Get all the propositions for a given relation"
  (CL:LET*
   ((MODULE (PLI::GET-MODULE (|%PLString.Value| MODULENAME) NULL)))
   (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*))
    (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
    (CL:LET*
     ((PROPOSITIONS
       (GET-PROPOSITIONS-FOR-OBJECT (|%PLString.Value| MODULENAME)
        (|%PLString.Value| INSTANCENAME) CL:T))
      (XMLINSTANCES (NEW-LIST))
      (RESULT (|new-PLPropositionContainer|)))
     (CL:SETQ XMLINSTANCES
      (MAKE-PL-PROPOSITIONS PROPOSITIONS MODULE CL:NIL))
     (CL:SETF (|%PLPropositionContainer.PLProposition| RESULT)
      XMLINSTANCES)
     RESULT))))

;;; (DEFUN (SERVER-GET-RULES-FOR-CONCEPT |PLPropositionContainer|) ...)

(CL:DEFUN SERVER-GET-RULES-FOR-CONCEPT (MODULENAME INSTANCENAME)
  "Get all the rules for a given concept"
  (SERVER-GET-RULES-FOR-RELATION MODULENAME INSTANCENAME))

;;; (DEFUN (SERVER-GET-RULES-FOR-RELATION |PLPropositionContainer|) ...)

(CL:DEFUN SERVER-GET-RULES-FOR-RELATION (MODULENAME INSTANCENAME)
  "Get all the rules for a given relation"
  (CL:LET*
   ((MODULE (PLI::GET-MODULE (|%PLString.Value| MODULENAME) NULL)))
   (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*))
    (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
    (CL:LET*
     ((PROPOSITIONS
       (GET-RELEVANT-RULES-FOR-RELATION (|%PLString.Value| MODULENAME)
        (|%PLString.Value| INSTANCENAME)))
      (XMLINSTANCES (NEW-LIST))
      (RESULT (|new-PLPropositionContainer|)))
     (CL:SETQ XMLINSTANCES
      (MAKE-PL-PROPOSITIONS PROPOSITIONS MODULE CL:T))
     (CL:SETF (|%PLPropositionContainer.PLProposition| RESULT)
      XMLINSTANCES)
     RESULT))))

;;; (DEFUN (SERVER-GET-PROPOSITIONS-FOR-INSTANCE-AND-RELATION |PLPropositionContainer|) ...)

(CL:DEFUN SERVER-GET-PROPOSITIONS-FOR-INSTANCE-AND-RELATION (MODULENAME INSTANCENAME RELATIONNAME)
  "Get all the propositions for a given instance and relation"
  (CL:LET*
   ((MODULE (PLI::GET-MODULE (|%PLString.Value| MODULENAME) NULL)))
   (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*))
    (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
    (CL:LET*
     ((PROPOSITIONS
       (GET-PROPOSITIONS-FOR-INSTANCE-AND-RELATION
        (|%PLString.Value| MODULENAME) (|%PLString.Value| INSTANCENAME)
        (|%PLString.Value| RELATIONNAME)))
      (XMLINSTANCES (NEW-LIST))
      (RESULT (|new-PLPropositionContainer|)))
     (CL:SETQ XMLINSTANCES
      (MAKE-PL-PROPOSITIONS PROPOSITIONS MODULE CL:NIL))
     (CL:SETF (|%PLPropositionContainer.PLProposition| RESULT)
      XMLINSTANCES)
     RESULT))))

;;; (DEFUN (SERVER-EVALUATE-LOGIC-COMMAND |PLString|) ...)

(CL:DEFUN SERVER-EVALUATE-LOGIC-COMMAND (MODULENAME COMMANDSTRING)
  "Evaluate 'commandString' and return the result"
  (CL:LET*
   ((COMMAND (|%PLString.Value| COMMANDSTRING))
    (MODULE (|%PLString.Value| MODULENAME))
    (EVALRESULT STELLA::NULL-STRING) (RESULT (|new-PLString|)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING COMMAND MODULE EVALRESULT))
   (CL:SETQ EVALRESULT
    (EVALUATE-LOGIC-COMMAND-IN-MODULE COMMAND MODULE CL:T))
   (CL:SETF (|%PLString.Value| RESULT) (XMLIFY-STRING EVALRESULT))
   RESULT))

;;; (DEFUN (SERVER-GET-LOADABLE-KBS |PLModuleFileList|) ...)

(CL:DEFUN SERVER-GET-LOADABLE-KBS ()
  (CL:LET*
   ((FILEDESCRIPTIONS (LOAD-INDEX-FILE))
    (RESULT (|new-PLModuleFileList|)) (PLFILES (NEW-LIST)))
   (CL:LET* ((DESC NULL) (ITER-000 FILEDESCRIPTIONS))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ DESC (%%VALUE ITER-000))
     (INSERT PLFILES (MAKE-PL-FILE DESC))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:SETF (|%PLModuleFileList.PLModuleFile| RESULT) PLFILES) RESULT))

;;; (DEFUN (SERVER-LOAD-KB |PLString|) ...)

(CL:DEFUN SERVER-LOAD-KB (PLKBNAME)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
   "in server-load-kb" EOL)
  (CL:LET*
   ((KBNAME (|%PLString.Value| PLKBNAME))
    (FILEINDEX (SERVER-GET-LOADABLE-KBS))
    (FILENAME (FIND-FILENAME-FOR-KB FILEINDEX KBNAME))
    (RESULT (|new-PLString|)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING KBNAME FILENAME))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
    "kbName is:" KBNAME EOL)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
    "fileName is:" FILENAME EOL)
   (CL:IF (CL:NOT (CL:EQ FILENAME STELLA::NULL-STRING))
    (CL:PROGN
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
      "Loading KB: " FILENAME EOL)
     (%LOAD FILENAME NIL) (CL:SETF (|%PLString.Value| RESULT) "OK"))
    (CL:PROGN
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
      "Error: couldn't find fileName for " KBNAME)
     (CL:SETF (|%PLString.Value| RESULT) "ERROR")))
   RESULT))

;;; (DEFUN (SERVER-LOAD-KB2 |PLString|) ...)

(CL:DEFUN SERVER-LOAD-KB2 (FILE)
  (CL:LET*
   ((FILENAME (|%PLFile.FileName| FILE))
    (CONTENT (|%PLFile.PLFileContent| FILE)) (RESULT (|new-PLString|)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING FILENAME))
   (CL:COND
    ((CL:AND (CL:NOT (CL:EQ CONTENT NULL))
      (CL:NOT
       (CL:EQ (|%PLFileContent.textContent| CONTENT)
        STELLA::NULL-STRING)))
     (LOAD-STREAM
      (NEW-INPUT-STRING-STREAM (|%PLFileContent.textContent| CONTENT)))
     (CL:SETF (|%PLString.Value| RESULT)
      (EXTRACT-MODULE-NAME-FROM-STREAM
       (NEW-INPUT-STRING-STREAM
        (|%PLFileContent.textContent| CONTENT)))))
    ((CL:NOT (CL:EQ FILENAME STELLA::NULL-STRING)) (%LOAD FILENAME NIL)
     (CL:SETF (|%PLString.Value| RESULT)
      (EXTRACT-MODULE-NAME-FROM-FILE FILENAME))))
   RESULT))

;;; (DEFUN (SERVER-SAVE-KB |PLString|) ...)

(CL:DEFUN SERVER-SAVE-KB (PLMODULENAME PLKBNAME PLDESCRIPTION)
  (CL:LET*
   ((KBNAME (|%PLString.Value| PLKBNAME))
    (MODULENAME (|%PLString.Value| PLMODULENAME))
    (MODULE (PLI::GET-MODULE MODULENAME NULL))
    (DESCRIPTION (|%PLString.Value| PLDESCRIPTION))
    (RAWFILEINDEX (LOAD-INDEX-FILE))
    (FILEINDEX (SERVER-GET-LOADABLE-KBS))
    (FILENAME (FIND-FILENAME-FOR-KB FILEINDEX KBNAME))
    (RESULT (|new-PLString|)))
   (CL:DECLARE
    (CL:TYPE CL:SIMPLE-STRING KBNAME MODULENAME DESCRIPTION FILENAME))
   (CL:IF (CL:NOT (CL:EQ FILENAME STELLA::NULL-STRING))
    (CL:PROGN
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
      "Saving KB: " MODULENAME " to " FILENAME EOL)
     (CL:LET* ((STREAM (NEW-OUTPUT-FILE-STREAM FILENAME)))
      (DO-SAVE-MODULE MODULE STREAM) (FREE STREAM)))
    (CL:LET*
     ((NEWFILE (CONCATENATE *KB-DIRECTORY* KBNAME ".ploom"))
      (NEWINDEX
       (CONS
        (CONS (WRAP-STRING KBNAME)
         (CONS (WRAP-STRING MODULENAME)
          (CONS (WRAP-STRING NEWFILE)
           (CONS (WRAP-STRING DESCRIPTION) NIL))))
        RAWFILEINDEX)))
     (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING NEWFILE))
     (SAVE-INDEX-FILE NEWINDEX)
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
      "Saving new KB: " MODULENAME " to " NEWFILE EOL)
     (CL:LET* ((STREAM (NEW-OUTPUT-FILE-STREAM NEWFILE)))
      (DO-SAVE-MODULE MODULE STREAM) (FREE STREAM))
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
      "new index: " NEWINDEX EOL)))
   (CL:SETF (|%PLString.Value| RESULT) "OK") RESULT))

;;; (DEFUN (SERVER-SAVE-KB2 |PLFile|) ...)

(CL:DEFUN SERVER-SAVE-KB2 (PLMODULENAME PLFILENAME)
  (CL:LET*
   ((MODULENAME (|%PLString.Value| PLMODULENAME))
    (MODULE (PLI::GET-MODULE MODULENAME NULL))
    (FILENAME (|%PLString.Value| PLFILENAME))
    (STREAM (NEW-OUTPUT-STRING-STREAM)) (RESULT (|new-PLFile|)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MODULENAME FILENAME))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
    "Saving KB: " MODULENAME " to " FILENAME EOL)
   (DO-SAVE-MODULE MODULE STREAM)
   (CL:SETF (|%PLFile.FileName| RESULT) FILENAME)
   (CL:LET* ((SELF-002 (|new-PLFileContent|)))
    (CL:SETF (|%PLFileContent.textContent| SELF-002)
     (THE-STRING-READER STREAM))
    (CL:SETF (|%PLFile.PLFileContent| RESULT) SELF-002))
   RESULT))

;;; (DEFUN (SERVER-CLEAR-KB |PLString|) ...)

(CL:DEFUN SERVER-CLEAR-KB (MODULE)
  (CL:LET*
   ((MODNAME (|%PLModule.ModuleName| MODULE))
    (RESULT (|new-PLString|)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MODNAME))
   (PLI::S-CLEAR-MODULE MODNAME NULL)
   (CL:SETF (|%PLString.Value| RESULT) "OK") RESULT))

;;; (DEFGLOBAL *QUERY-SESSION-TIMEOUT* ...)

(CL:DEFVAR *QUERY-SESSION-TIMEOUT* 86400)
(CL:DECLAIM (CL:TYPE CL:FIXNUM *QUERY-SESSION-TIMEOUT*))

;;; (DEFUN (GET-QUERY-SESSION /HTTP/SESSION) ...)

(CL:DEFUN GET-QUERY-SESSION (QUERY ERROR?)
  (CL:LET*
   ((SESSIONNAME (|%PLQuery.QueryName| QUERY))
    (SESSION (LOOKUP-SESSION SESSIONNAME CL:NIL)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SESSIONNAME))
   (CL:WHEN (CL:OR (CL:EQ SESSION NULL) (TIMED-OUT? SESSION))
    (CL:IF ERROR?
     (CL:ERROR (NEW-STELLA-EXCEPTION "Query session expired"))
     (CL:SETQ SESSION
      (CREATE-SESSION SESSIONNAME *QUERY-SESSION-TIMEOUT*))))
   SESSION))

;;; (DEFUN (SERVER-QUERY |PLQueryResult|) ...)

(CL:DEFUN SERVER-QUERY (PLQUERY CONTINUEQUERY?)
  (CL:LET*
   ((CONTINUE? (STRING-EQL? (|%PLString.Value| CONTINUEQUERY?) "TRUE"))
    (SESSION (GET-QUERY-SESSION PLQUERY CONTINUE?))
    (RESULT (|new-PLQueryResult|)) (PLTUPLES (NEW-LIST))
    (QUERY STELLA::NULL-STRING)
    (MODULENAME (|%PLQuery.Module| PLQUERY)) (QUERYRESULT NULL)
    (MODULE (PLI::GET-MODULE MODULENAME NULL)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING QUERY MODULENAME))
   (CL:IF CONTINUE?
    (CL:SETQ QUERY (CREATE-FOLLOWUP-QUERY-STRING PLQUERY))
    (CL:SETQ QUERY (CREATE-QUERY-STRING PLQUERY)))
   (CL:SETQ QUERYRESULT
    (EVALUATE-QUERY-COMMAND-IN-MODULE SESSION QUERY MODULENAME
     CONTINUE? (IS-QUERY-PARTIAL? PLQUERY)))
   (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*))
    (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
    (CL:LET* ((TUPLE NULL) (ITER-000 QUERYRESULT) (COLLECT-000 NULL))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:SETQ TUPLE (%%VALUE ITER-000))
      (CL:IF (CL:EQ COLLECT-000 NULL)
       (CL:PROGN (CL:SETQ COLLECT-000 (CONS (MAKE-PL-TUPLE TUPLE) NIL))
        (CL:IF (CL:EQ (%LIST.THE-CONS-LIST PLTUPLES) NIL)
         (CL:SETF (%LIST.THE-CONS-LIST PLTUPLES) COLLECT-000)
         (ADD-CONS-TO-END-OF-CONS-LIST (%LIST.THE-CONS-LIST PLTUPLES)
          COLLECT-000)))
       (CL:PROGN
        (CL:SETF (%%REST COLLECT-000) (CONS (MAKE-PL-TUPLE TUPLE) NIL))
        (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))
      (CL:SETQ ITER-000 (%%REST ITER-000))))
    (CL:SETF (|%PLQueryResult.PLTuple| RESULT) PLTUPLES) RESULT)))

;;; (DEFUN (SERVER-SEARCH |PLSearchResult|) ...)

(CL:DEFUN SERVER-SEARCH (SEARCHPARAMETER)
  (CL:LET*
   ((MODULENAME (|%PLSearchParameter.ModuleName| SEARCHPARAMETER))
    (SEARCHSTRING (|%PLSearchParameter.SearchString| SEARCHPARAMETER))
    (SEARCHCONCEPT?
     (|%PLSearchParameter.SearchConcept| SEARCHPARAMETER))
    (SEARCHRELATION?
     (|%PLSearchParameter.SearchRelation| SEARCHPARAMETER))
    (SEARCHINSTANCE?
     (|%PLSearchParameter.SearchInstance| SEARCHPARAMETER))
    (CASESENSITIVE?
     (|%PLSearchParameter.CaseSensitive| SEARCHPARAMETER))
    (RESULT (|new-PLSearchResult|)) (SEARCHRESULTS (NEW-LIST)))
   (CL:DECLARE
    (CL:TYPE CL:SIMPLE-STRING MODULENAME SEARCHSTRING SEARCHCONCEPT?
     SEARCHRELATION? SEARCHINSTANCE? CASESENSITIVE?))
   (CL:IF (STRING-EQL? MODULENAME "ALL")
    (CL:SETQ SEARCHRESULTS
     (SEARCH-ALL-MODULES SEARCHSTRING SEARCHINSTANCE? SEARCHCONCEPT?
      SEARCHRELATION? CASESENSITIVE?))
    (CL:SETQ SEARCHRESULTS
     (SEARCH-MODULE MODULENAME SEARCHSTRING SEARCHINSTANCE?
      SEARCHCONCEPT? SEARCHRELATION? CASESENSITIVE?)))
   (CL:SETF (|%PLSearchResult.PLSearchResultItem| RESULT)
    SEARCHRESULTS)
   RESULT))

;;; (DEFUN (SERVER-GET-EXTENSION-FOR-RELATION |PLQueryResult|) ...)

(CL:DEFUN SERVER-GET-EXTENSION-FOR-RELATION (MODULENAME RELATIONNAME)
  "Get the extension for a relation"
  (CL:LET*
   ((MODULE (PLI::GET-MODULE (|%PLString.Value| MODULENAME) NULL)))
   (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*))
    (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
    (CL:LET*
     ((RESULT (|new-PLQueryResult|)) (PLTUPLES (NEW-LIST))
      (EXTENSION
       (PLI::S-GET-RELATION-EXTENSION
        (GUI-NAME-TO-PL-NAME (|%PLString.Value| RELATIONNAME)) MODULE
        NULL)))
     (CL:LET*
      ((PROPOSITION NULL) (ITER-000 EXTENSION) (COLLECT-000 NULL))
      (CL:LOOP WHILE (NEXT? ITER-000) DO
       (CL:SETQ PROPOSITION (PLI::%PL-ITERATOR.VALUE ITER-000))
       (CL:IF (CL:EQ COLLECT-000 NULL)
        (CL:PROGN
         (CL:SETQ COLLECT-000
          (CONS (MAKE-PL-TUPLE-FROM-PROPOSITION PROPOSITION) NIL))
         (CL:IF (CL:EQ (%LIST.THE-CONS-LIST PLTUPLES) NIL)
          (CL:SETF (%LIST.THE-CONS-LIST PLTUPLES) COLLECT-000)
          (ADD-CONS-TO-END-OF-CONS-LIST (%LIST.THE-CONS-LIST PLTUPLES)
           COLLECT-000)))
        (CL:PROGN
         (CL:SETF (%%REST COLLECT-000)
          (CONS (MAKE-PL-TUPLE-FROM-PROPOSITION PROPOSITION) NIL))
         (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
     (CL:SETF (|%PLQueryResult.PLTuple| RESULT) PLTUPLES) RESULT))))

;;; (DEFUN (SERVER-DESTROY-OBJECT |PLString|) ...)

(CL:DEFUN SERVER-DESTROY-OBJECT (MODULENAME OBJECTNAME)
  "Destroy an object"
  (CL:LET*
   ((MODULESTRING (|%PLString.Value| MODULENAME))
    (MODULE (PLI::GET-MODULE MODULESTRING NULL))
    (OBJECTSTRING (|%PLString.Value| OBJECTNAME))
    (RESULT (|new-PLString|)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MODULESTRING OBJECTSTRING))
   (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*))
    (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
    (PLI::S-DESTROY-OBJECT OBJECTSTRING MODULESTRING NULL)
    (CL:SETF (|%PLString.Value| RESULT) "OK") RESULT)))

;;; (DEFUN (SERVER-GET-RELATION |PLRelationContainer|) ...)

(CL:DEFUN SERVER-GET-RELATION (MODULENAME RELATIONNAME)
  (CL:LET*
   ((MODULE (PLI::GET-MODULE (|%PLString.Value| MODULENAME) NULL)))
   (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*))
    (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
    (CL:LET*
     ((RESULT (|new-PLRelationContainer|))
      (RELATION
       (PLI::S-GET-RELATION
        (GUI-NAME-TO-PL-NAME (|%PLString.Value| RELATIONNAME))
        (|%PLString.Value| MODULENAME) NULL))
      (XMLRELATIONS (NEW-LIST)))
     (CL:WHEN (CL:NOT (CL:EQ RELATION NULL))
      (INSERT XMLRELATIONS
       (MAKE-PL-RELATION RELATION (|%PLString.Value| MODULENAME))))
     (CL:SETF (|%PLRelationContainer.PLRelation| RESULT) XMLRELATIONS)
     RESULT))))

;;; (DEFUN (SERVER-GET-CONCEPT |PLConceptContainer|) ...)

(CL:DEFUN SERVER-GET-CONCEPT (MODULENAME CONCEPTNAME)
  (CL:LET*
   ((MODULE (PLI::GET-MODULE (|%PLString.Value| MODULENAME) NULL)))
   (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*))
    (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
    (CL:LET*
     ((RESULT (|new-PLConceptContainer|))
      (CONCEPT
       (PLI::S-GET-CONCEPT
        (GUI-NAME-TO-PL-NAME (|%PLString.Value| CONCEPTNAME))
        (|%PLString.Value| MODULENAME) NULL))
      (XMLCONCEPTS (NEW-LIST)))
     (CL:WHEN (CL:NOT (CL:EQ CONCEPT NULL))
      (INSERT XMLCONCEPTS (MAKE-PL-CONCEPT CONCEPT)))
     (CL:SETF (|%PLConceptContainer.PLConcept| RESULT) XMLCONCEPTS)
     RESULT))))

;;; (DEFUN (SERVER-GET-INSTANCE |PLInstanceContainer|) ...)

(CL:DEFUN SERVER-GET-INSTANCE (MODULENAME INSTANCENAME)
  (CL:LET*
   ((MODULE (PLI::GET-MODULE (|%PLString.Value| MODULENAME) NULL)))
   (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*))
    (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
    (CL:LET*
     ((RESULT (|new-PLInstanceContainer|))
      (INSTANCE
       (PLI::S-GET-OBJECT
        (GUI-NAME-TO-PL-NAME (|%PLString.Value| INSTANCENAME))
        (|%PLString.Value| MODULENAME) NULL))
      (XMLINSTANCES (NEW-LIST)))
     (CL:WHEN
      (CL:AND (ISA? INSTANCE SGT-GUI-SERVER-API-LOGIC-LOGIC-OBJECT)
       (CL:NOT (CL:EQ INSTANCE NULL)))
      (INSERT XMLINSTANCES (MAKE-PL-INSTANCE INSTANCE)))
     (CL:SETF (|%PLInstanceContainer.PLInstance| RESULT) XMLINSTANCES)
     RESULT))))

;;; (DEFUN (SERVER-GET-EXPLANATION-FOR-QUERY |PLString|) ...)

(CL:DEFUN SERVER-GET-EXPLANATION-FOR-QUERY (QUERY RESULTNUMBER)
  (CL:LET*
   ((SESSION (GET-QUERY-SESSION QUERY CL:T))
    (QUERYITERATOR (LOOKUP SESSION (WRAP-STRING "QueryIterator")))
    (SOLUTIONINDEX
     (CL:1- (STRING-TO-INTEGER (|%PLString.Value| RESULTNUMBER))))
    (JUSTIFICATIONS NULL) (EXPLANATION "No explanation available.")
    (RESULT (|new-PLString|)) (MODULENAME (|%PLQuery.Module| QUERY))
    (MODULE (PLI::GET-MODULE MODULENAME NULL)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING EXPLANATION MODULENAME))
   (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*))
    (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
    (CL:SETQ JUSTIFICATIONS
     (GET-QUERY-JUSTIFICATIONS QUERYITERATOR
      (CL:TRUNCATE SOLUTIONINDEX) NULL-INTEGER CL:T))
    (CL:WHEN (CL:> (LENGTH JUSTIFICATIONS) 0)
     (CL:SETQ EXPLANATION
      (GET-JUSTIFICATION-STRING (FIRST JUSTIFICATIONS))))
    (CL:SETF (|%PLString.Value| RESULT) EXPLANATION) RESULT)))

;;; (DEFUN (SERVER-GET-INFO |PLServerInfo|) ...)

(CL:DEFUN SERVER-GET-INFO ()
  "Return a data structure describing the characteristics and capabilities of this server instance."
  (CL:LET* ((RESULT (|new-PLServerInfo|)))
   (CL:IF *ALLOW-REMOTE-FILEBROWSING*
    (CL:SETF (|%PLServerInfo.AllowRemoteFileBrowsing| RESULT) "TRUE")
    (CL:SETF (|%PLServerInfo.AllowRemoteFileBrowsing| RESULT) "FALSE"))
   RESULT))

;;; (DEFUN (EXTRACT-MODULE-NAME-FROM-STREAM STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T) CL:SIMPLE-STRING)
  EXTRACT-MODULE-NAME-FROM-STREAM))
(CL:DEFUN EXTRACT-MODULE-NAME-FROM-STREAM (STREAM)
  (CL:LET*
   ((TREE NULL) (ITER-000 (S-EXPRESSIONS STREAM)) (I NULL-INTEGER)
    (ITER-001 1) (UPPER-BOUND-000 20))
   (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-001 UPPER-BOUND-000))
   (CL:LOOP WHILE
    (CL:AND (NEXT? ITER-000) (CL:<= ITER-001 UPPER-BOUND-000)) DO
    (CL:SETQ TREE (%S-EXPRESSION-ITERATOR.VALUE ITER-000))
    (CL:SETQ I ITER-001) (CL:SETQ I I)
    (CL:COND
     ((CL:EQ (SAFE-PRIMARY-TYPE TREE) SGT-GUI-SERVER-API-STELLA-CONS)
      (CL:PROGN
       (CL:LET*
        ((OPERATOR (%%VALUE TREE)) (MODULENAME STELLA::NULL-STRING))
        (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MODULENAME))
        (CL:COND
         ((SUBTYPE-OF-SYMBOL? (SAFE-PRIMARY-TYPE OPERATOR))
          (CL:PROGN
           (CL:COND
            ((STRING-EQL?
              (CL:IF (%MODULE.CASE-SENSITIVE? *MODULE*)
               (STRING-UPCASE (%SYMBOL.SYMBOL-NAME OPERATOR))
               (%SYMBOL.SYMBOL-NAME OPERATOR))
              "IN-MODULE")
             (CL:SETQ MODULENAME
              (COERCE-TO-MODULE-NAME (%%VALUE (%%REST TREE)) CL:NIL))
             (CL:IF (CL:EQ MODULENAME STELLA::NULL-STRING)
              (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
               (%%PRINT-STREAM
                (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
                "Illegal IN-MODULE declaration: `" TREE "'")
               (CL:ERROR
                (NEW-READ-EXCEPTION (THE-STRING-READER STREAM-000))))
              (CL:RETURN-FROM EXTRACT-MODULE-NAME-FROM-STREAM
               MODULENAME)))
            (CL:T))))
         (CL:T)))))
     (CL:T))
    (CL:SETQ ITER-001 (CL:1+ ITER-001))))
  "**NOTFOUND**")

;;; (DEFUN (EXTRACT-MODULE-NAME-FROM-FILE STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:SIMPLE-STRING) CL:SIMPLE-STRING)
  EXTRACT-MODULE-NAME-FROM-FILE))
(CL:DEFUN EXTRACT-MODULE-NAME-FROM-FILE (FILENAME)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING FILENAME))
  #+MCL
  (CL:CHECK-TYPE FILENAME CL:SIMPLE-STRING)
  (CL:LET* ((MODULENAME STELLA::NULL-STRING))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MODULENAME))
   (CL:LET* ((IN NULL))
    (CL:UNWIND-PROTECT
     (CL:PROGN (CL:SETQ IN (OPEN-INPUT-FILE FILENAME))
      (CL:SETQ MODULENAME (EXTRACT-MODULE-NAME-FROM-STREAM IN)))
     (CL:WHEN (CL:NOT (CL:EQ IN NULL)) (FREE IN))))
   MODULENAME))

;;; (DEFUN (CREATE-QUERY-STRING STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T) CL:SIMPLE-STRING) CREATE-QUERY-STRING))
(CL:DEFUN CREATE-QUERY-STRING (PLQUERY)
  (CL:LET*
   ((RESULT "") (QUERYBODY STELLA::NULL-STRING) (HOWMANYCLAUSE "")
    (INFERENCELEVELCLAUSE "") (MINSCORECLAUSE "")
    (MAXUNKNOWNSCLAUSE "") (MATCHMODECLAUSE "") (TIMEOUTCLAUSE "")
    (COMMANDCLAUSE "") (MOVEOUTCLAUSE "") (MAXIMIZESCORECLAUSE "")
    (DONTOPTIMIZECLAUSE ""))
   (CL:DECLARE
    (CL:TYPE CL:SIMPLE-STRING RESULT QUERYBODY HOWMANYCLAUSE
     INFERENCELEVELCLAUSE MINSCORECLAUSE MAXUNKNOWNSCLAUSE
     MATCHMODECLAUSE TIMEOUTCLAUSE COMMANDCLAUSE MOVEOUTCLAUSE
     MAXIMIZESCORECLAUSE DONTOPTIMIZECLAUSE))
   (CL:WHEN
    (CL:AND
     (CL:NOT
      (CL:EQ (|%PLQuery.NumResults| PLQUERY) STELLA::NULL-STRING))
     (CL:>
      (CL:THE CL:FIXNUM
       (CL:LENGTH
        (CL:THE CL:SIMPLE-STRING (|%PLQuery.NumResults| PLQUERY))))
      0)
     (CL:NOT (STRING-EQL? (|%PLQuery.NumResults| PLQUERY) "ALL")))
    (CL:SETQ HOWMANYCLAUSE
     (CONCATENATE " :HOW-MANY " (|%PLQuery.NumResults| PLQUERY))))
   (CL:WHEN
    (CL:AND
     (CL:NOT (CL:EQ (|%PLQuery.Timeout| PLQUERY) STELLA::NULL-STRING))
     (CL:>
      (CL:THE CL:FIXNUM
       (CL:LENGTH
        (CL:THE CL:SIMPLE-STRING (|%PLQuery.Timeout| PLQUERY))))
      0))
    (CL:SETQ TIMEOUTCLAUSE
     (CONCATENATE " :TIMEOUT " (|%PLQuery.Timeout| PLQUERY))))
   (CL:WHEN
    (CL:AND
     (CL:NOT (CL:EQ (|%PLQuery.Moveout| PLQUERY) STELLA::NULL-STRING))
     (CL:>
      (CL:THE CL:FIXNUM
       (CL:LENGTH
        (CL:THE CL:SIMPLE-STRING (|%PLQuery.Moveout| PLQUERY))))
      0))
    (CL:SETQ MOVEOUTCLAUSE
     (CONCATENATE " :MOVEOUT " (|%PLQuery.Moveout| PLQUERY))))
   (CL:WHEN
    (CL:AND
     (CL:NOT (CL:EQ (|%PLQuery.MinScore| PLQUERY) STELLA::NULL-STRING))
     (CL:>
      (CL:THE CL:FIXNUM
       (CL:LENGTH
        (CL:THE CL:SIMPLE-STRING (|%PLQuery.MinScore| PLQUERY))))
      0))
    (CL:SETQ MINSCORECLAUSE
     (CONCATENATE " :MINIMUM-SCORE " (|%PLQuery.MinScore| PLQUERY))))
   (CL:WHEN
    (CL:AND
     (CL:NOT
      (CL:EQ (|%PLQuery.MaximizeScore| PLQUERY) STELLA::NULL-STRING))
     (CL:>
      (CL:THE CL:FIXNUM
       (CL:LENGTH
        (CL:THE CL:SIMPLE-STRING (|%PLQuery.MaximizeScore| PLQUERY))))
      0))
    (CL:SETQ MAXIMIZESCORECLAUSE
     (CONCATENATE " :MAXIMIZE-SCORE? "
      (|%PLQuery.MaximizeScore| PLQUERY))))
   (CL:WHEN
    (CL:AND
     (CL:NOT
      (CL:EQ (|%PLQuery.DontOptimize| PLQUERY) STELLA::NULL-STRING))
     (CL:>
      (CL:THE CL:FIXNUM
       (CL:LENGTH
        (CL:THE CL:SIMPLE-STRING (|%PLQuery.DontOptimize| PLQUERY))))
      0))
    (CL:SETQ DONTOPTIMIZECLAUSE
     (CONCATENATE " :DONT-OPTIMIZE? "
      (|%PLQuery.DontOptimize| PLQUERY))))
   (CL:WHEN
    (CL:AND
     (CL:NOT
      (CL:EQ (|%PLQuery.MaxUnknowns| PLQUERY) STELLA::NULL-STRING))
     (CL:>
      (CL:THE CL:FIXNUM
       (CL:LENGTH
        (CL:THE CL:SIMPLE-STRING (|%PLQuery.MaxUnknowns| PLQUERY))))
      0))
    (CL:SETQ MAXUNKNOWNSCLAUSE
     (CONCATENATE " :MAXIMUM-UNKNOWNS "
      (|%PLQuery.MaxUnknowns| PLQUERY))))
   (CL:WHEN
    (CL:AND
     (CL:NOT
      (CL:EQ (|%PLQuery.MatchMode| PLQUERY) STELLA::NULL-STRING))
     (CL:>
      (CL:THE CL:FIXNUM
       (CL:LENGTH
        (CL:THE CL:SIMPLE-STRING (|%PLQuery.MatchMode| PLQUERY))))
      0))
    (CL:SETQ MATCHMODECLAUSE
     (CONCATENATE " :MATCH-MODE :" (|%PLQuery.MatchMode| PLQUERY))))
   (CL:WHEN
    (CL:AND
     (CL:NOT
      (CL:EQ (|%PLQuery.InferenceLevel| PLQUERY) STELLA::NULL-STRING))
     (CL:>
      (CL:THE CL:FIXNUM
       (CL:LENGTH
        (CL:THE CL:SIMPLE-STRING (|%PLQuery.InferenceLevel| PLQUERY))))
      0))
    (CL:SETQ INFERENCELEVELCLAUSE
     (CONCATENATE " :INFERENCE-LEVEL :"
      (|%PLQuery.InferenceLevel| PLQUERY))))
   (CL:IF
    (CL:AND
     (CL:NOT (CL:EQ (|%PLQuery.IsAsk| PLQUERY) STELLA::NULL-STRING))
     (STRING-EQL? (|%PLQuery.IsAsk| PLQUERY) "TRUE"))
    (CL:SETQ COMMANDCLAUSE "/LOGIC/ASK ")
    (CL:SETQ COMMANDCLAUSE "/LOGIC/RETRIEVE "))
   (CL:SETQ QUERYBODY
    (CONCATENATE (|%PLQuery.NumResults| PLQUERY) " "
     (|%PLQuery.Query| PLQUERY)))
   (CL:SETQ RESULT
    (CONCATENATE "(" COMMANDCLAUSE QUERYBODY HOWMANYCLAUSE
     TIMEOUTCLAUSE MOVEOUTCLAUSE MINSCORECLAUSE MAXIMIZESCORECLAUSE
     DONTOPTIMIZECLAUSE MAXUNKNOWNSCLAUSE MATCHMODECLAUSE
     INFERENCELEVELCLAUSE ")"))
   RESULT))

;;; (DEFUN (CREATE-FOLLOWUP-QUERY-STRING STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T) CL:SIMPLE-STRING)
  CREATE-FOLLOWUP-QUERY-STRING))
(CL:DEFUN CREATE-FOLLOWUP-QUERY-STRING (PLQUERY)
  (CL:LET*
   ((RESULT "") (QUERYBODY STELLA::NULL-STRING)
    (COMMANDCLAUSE STELLA::NULL-STRING))
   (CL:DECLARE
    (CL:TYPE CL:SIMPLE-STRING RESULT QUERYBODY COMMANDCLAUSE))
   (CL:SETQ COMMANDCLAUSE "/LOGIC/RETRIEVE ")
   (CL:SETQ QUERYBODY (CONCATENATE (|%PLQuery.NumResults| PLQUERY) ""))
   (CL:SETQ RESULT (CONCATENATE "(" COMMANDCLAUSE QUERYBODY ")"))
   RESULT))

;;; (DEFUN (MAKE-PL-TUPLE-FROM-PROPOSITION |PLTuple|) ...)

(CL:DEFUN MAKE-PL-TUPLE-FROM-PROPOSITION (PROPOSITION)
  (CL:LET*
   ((ARGUMENTS (%PROPOSITION.ARGUMENTS PROPOSITION))
    (PLOBJECTUNIONS (NEW-LIST)) (RESULT (|new-PLTuple|)))
   (CL:LET*
    ((ARGUMENT NULL) (VECTOR-000 ARGUMENTS) (INDEX-000 0)
     (LENGTH-000 (LENGTH VECTOR-000)) (COLLECT-000 NULL))
    (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
    (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
     (CL:SETQ ARGUMENT
      (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-000))
       INDEX-000))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-000 (CONS (MAKE-PL-OBJECT-UNION ARGUMENT) NIL))
       (CL:IF (CL:EQ (%LIST.THE-CONS-LIST PLOBJECTUNIONS) NIL)
        (CL:SETF (%LIST.THE-CONS-LIST PLOBJECTUNIONS) COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST
         (%LIST.THE-CONS-LIST PLOBJECTUNIONS) COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000)
        (CONS (MAKE-PL-OBJECT-UNION ARGUMENT) NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))
     (CL:SETQ INDEX-000 (CL:1+ INDEX-000))))
   (CL:SETF (|%PLTuple.PLObjectUnion| RESULT) PLOBJECTUNIONS) RESULT))

;;; (DEFUN (MAKE-PL-TUPLE |PLTuple|) ...)

(CL:DEFUN MAKE-PL-TUPLE (TUPLE)
  (CL:LET* ((RESULT (|new-PLTuple|)) (PLOBJECTUNIONS (NEW-LIST)))
   (CL:LET* ((OBJECT NULL) (ITER-000 TUPLE) (COLLECT-000 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ OBJECT (%%VALUE ITER-000))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-000 (CONS (MAKE-PL-OBJECT-UNION OBJECT) NIL))
       (CL:IF (CL:EQ (%LIST.THE-CONS-LIST PLOBJECTUNIONS) NIL)
        (CL:SETF (%LIST.THE-CONS-LIST PLOBJECTUNIONS) COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST
         (%LIST.THE-CONS-LIST PLOBJECTUNIONS) COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000)
        (CONS (MAKE-PL-OBJECT-UNION OBJECT) NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:SETF (|%PLTuple.PLObjectUnion| RESULT) PLOBJECTUNIONS) RESULT))

;;; (DEFUN (MAKE-PL-OBJECT-UNION |PLObjectUnion|) ...)

(CL:DEFUN MAKE-PL-OBJECT-UNION (OBJECT)
  (CL:LET* ((RESULT (|new-PLObjectUnion|)))
   (CL:SETF (|%PLObjectUnion.LiteralValue| RESULT) "")
   (CL:SETF (|%PLObjectUnion.Type| RESULT) "")
   (CL:WHEN (CL:EQ OBJECT NULL)
    (CL:SETF (|%PLObjectUnion.LiteralValue| RESULT) "")
    (CL:SETF (|%PLObjectUnion.Type| RESULT) "STRING")
    (CL:RETURN-FROM MAKE-PL-OBJECT-UNION RESULT))
   (CL:WHEN
    (CL:AND (SKOLEM? OBJECT)
     (CL:NOT
      (CL:EQ
       (ACCESS-IN-CONTEXT (%SKOLEM.VARIABLE-VALUE OBJECT)
        (%SKOLEM.HOME-CONTEXT OBJECT) CL:NIL)
       NULL)))
    (CL:SETQ OBJECT
     (ACCESS-IN-CONTEXT (%SKOLEM.VARIABLE-VALUE OBJECT)
      (%SKOLEM.HOME-CONTEXT OBJECT) CL:NIL)))
   (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE OBJECT)))
    (CL:COND
     ((SUBTYPE-OF-INTEGER? TEST-VALUE-000)
      (CL:PROGN
       (CL:SETF (|%PLObjectUnion.LiteralValue| RESULT)
        (STRINGIFY
         (WRAP-INTEGER (%INTEGER-WRAPPER.WRAPPER-VALUE OBJECT))))
       (CL:SETF (|%PLObjectUnion.Type| RESULT) "INTEGER")))
     ((SUBTYPE-OF-FLOAT? TEST-VALUE-000)
      (CL:PROGN
       (CL:SETF (|%PLObjectUnion.LiteralValue| RESULT)
        (STRINGIFY (WRAP-FLOAT (%FLOAT-WRAPPER.WRAPPER-VALUE OBJECT))))
       (CL:SETF (|%PLObjectUnion.Type| RESULT) "FLOAT")))
     ((SUBTYPE-OF-STRING? TEST-VALUE-000)
      (CL:PROGN
       (CL:SETF (|%PLObjectUnion.LiteralValue| RESULT)
        (%STRING-WRAPPER.WRAPPER-VALUE OBJECT))
       (CL:SETF (|%PLObjectUnion.Type| RESULT) "STRING")))
     ((SUBTYPE-OF? TEST-VALUE-000 SGT-GUI-SERVER-API-LOGIC-TRUTH-VALUE)
      (CL:PROGN
       (CL:SETF (|%PLObjectUnion.LiteralValue| RESULT)
        (GET-TRUTH-VALUE-STRING OBJECT))
       (CL:SETF (|%PLObjectUnion.Type| RESULT) "TRUTH-VALUE")))
     ((SUBTYPE-OF? TEST-VALUE-000
       SGT-GUI-SERVER-API-LOGIC-NAMED-DESCRIPTION)
      (CL:PROGN
       (CL:SETF (|%PLObjectUnion.PLSurrogate| RESULT)
        (MAKE-LOGIC-SURROGATE OBJECT))
       (CL:IF (CLASS? OBJECT)
        (CL:SETF (|%PLObjectUnion.Type| RESULT) "CONCEPT")
        (CL:SETF (|%PLObjectUnion.Type| RESULT) "RELATION"))))
     ((SUBTYPE-OF? TEST-VALUE-000 SGT-GUI-SERVER-API-LOGIC-SKOLEM)
      (CL:PROGN
       (CL:SETF (|%PLObjectUnion.PLSurrogate| RESULT)
        (MAKE-LOGIC-SURROGATE OBJECT))
       (CL:SETF (|%PLObjectUnion.Type| RESULT) "INSTANCE")))
     ((SUBTYPE-OF? TEST-VALUE-000
       SGT-GUI-SERVER-API-LOGIC-LOGIC-OBJECT)
      (CL:PROGN
       (CL:SETF (|%PLObjectUnion.PLSurrogate| RESULT)
        (MAKE-LOGIC-SURROGATE OBJECT))
       (CL:SETF (|%PLObjectUnion.Type| RESULT) "INSTANCE")))
     (CL:T
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
       "This object has unknown type: " OBJECT " (type = )" EOL)
      (CL:IF (CL:EQ OBJECT NULL)
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
        "make-pl-object-union: object is NOT defined" EOL)
       (CL:SETQ RESULT
        (MAKE-PL-OBJECT-UNION (WRAP-STRING (STRINGIFY OBJECT))))))))
   RESULT))

;;; (DEFUN (GET-MODULES |PLModuleContainer|) ...)

(CL:DEFUN GET-MODULES (MODULE)
  (CL:LET*
   ((ALLMODULES (COLLECT-ALL-MODULES MODULE (NEW-LIST)))
    (RESULT (CREATE-MODULE-CONTAINER ALLMODULES)))
   RESULT))

;;; (DEFUN (CODE-MODULE? BOOLEAN) ...)

(CL:DEFUN CODE-MODULE? (MODULE)
  (CL:OR
   (%BOOLEAN-WRAPPER.WRAPPER-VALUE
    (DYNAMIC-SLOT-VALUE (%MODULE.DYNAMIC-SLOTS MODULE)
     SYM-GUI-SERVER-API-STELLA-CODE-ONLY? FALSE-WRAPPER))
   (STRING-EQL? (%MODULE.MODULE-NAME MODULE) "IDL-THEORY")
   (STRING-EQL? (%MODULE.MODULE-NAME MODULE) "IDL-USER-THEORY")))

;;; (DEFUN (COLLECT-ALL-MODULES (LIST OF MODULE)) ...)

(CL:DEFUN COLLECT-ALL-MODULES (MODULE COLLECTEDMODULES)
  (CL:LET* ((CHILD NULL) (ITER-000 (PLI::GET-CHILD-MODULES MODULE)))
   (CL:LOOP WHILE (NEXT? ITER-000) DO
    (CL:SETQ CHILD (PLI::%PL-ITERATOR.VALUE ITER-000))
    (CL:WHEN (CL:NOT (CODE-MODULE? CHILD))
     (COLLECT-ALL-MODULES CHILD COLLECTEDMODULES))))
  (INSERT COLLECTEDMODULES MODULE)
  COLLECTEDMODULES)

;;; (DEFUN (CREATE-MODULE-CONTAINER |PLModuleContainer|) ...)

(CL:DEFUN CREATE-MODULE-CONTAINER (COLLECTEDMODULES)
  (CL:LET*
   ((CONTAINER (|new-PLModuleContainer|)) (PLMODULES (NEW-LIST)))
   (CL:LET*
    ((MODULE NULL) (ITER-000 (%LIST.THE-CONS-LIST COLLECTEDMODULES)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ MODULE (%%VALUE ITER-000))
     (CL:LET*
      ((PLMODULE (|new-PLModule|))
       (CHILDMODULEITER (PLI::GET-CHILD-MODULES MODULE))
       (SURROGATECHILDREN (NEW-LIST)))
      (CL:SETF (|%PLModule.ModuleName| PLMODULE)
       (%MODULE.MODULE-NAME MODULE))
      (CL:IF (CL:EQ (MODULE-CPP-PACKAGE MODULE) STELLA::NULL-STRING)
       (CL:SETF (|%PLModule.CppPackage| PLMODULE) "")
       (CL:SETF (|%PLModule.CppPackage| PLMODULE)
        (MODULE-CPP-PACKAGE MODULE)))
      (CL:IF (CL:EQ (MODULE-LISP-PACKAGE MODULE) STELLA::NULL-STRING)
       (CL:SETF (|%PLModule.LispPackage| PLMODULE) "")
       (CL:SETF (|%PLModule.LispPackage| PLMODULE)
        (MODULE-LISP-PACKAGE MODULE)))
      (CL:IF (CL:EQ (JAVA-PACKAGE MODULE) STELLA::NULL-STRING)
       (CL:SETF (|%PLModule.JavaPackage| PLMODULE) "")
       (CL:SETF (|%PLModule.JavaPackage| PLMODULE)
        (JAVA-PACKAGE MODULE)))
      (CL:IF
       (CL:EQ
        (%STRING-WRAPPER.WRAPPER-VALUE
         (DYNAMIC-SLOT-VALUE (%MODULE.DYNAMIC-SLOTS MODULE)
          SYM-GUI-SERVER-API-STELLA-JAVA-FLOTSAM-CLASS
          NULL-STRING-WRAPPER))
        STELLA::NULL-STRING)
       (CL:SETF (|%PLModule.JavaCatchallClass| PLMODULE) "")
       (CL:SETF (|%PLModule.JavaCatchallClass| PLMODULE)
        (%STRING-WRAPPER.WRAPPER-VALUE
         (DYNAMIC-SLOT-VALUE (%MODULE.DYNAMIC-SLOTS MODULE)
          SYM-GUI-SERVER-API-STELLA-JAVA-FLOTSAM-CLASS
          NULL-STRING-WRAPPER))))
      (CL:IF (CL:EQ (%MODULE.DOCUMENTATION MODULE) STELLA::NULL-STRING)
       (CL:SETF (|%PLModule.Documentation| PLMODULE) "")
       (CL:SETF (|%PLModule.Documentation| PLMODULE)
        (XMLIFY-STRING (%MODULE.DOCUMENTATION MODULE))))
      (CL:IF (%MODULE.CASE-SENSITIVE? MODULE)
       (CL:SETF (|%PLModule.CaseSensitive| PLMODULE) "TRUE")
       (CL:SETF (|%PLModule.CaseSensitive| PLMODULE) "FALSE"))
      (CL:IF
       (%BOOLEAN-WRAPPER.WRAPPER-VALUE
        (DYNAMIC-SLOT-VALUE (%MODULE.DYNAMIC-SLOTS MODULE)
         SYM-GUI-SERVER-API-STELLA-API? FALSE-WRAPPER))
       (CL:SETF (|%PLModule.API| PLMODULE) "TRUE")
       (CL:SETF (|%PLModule.API| PLMODULE) "FALSE"))
      (CL:SETF (|%PLModule.SourceString| PLMODULE)
       (REPLACE-CHOKABLE-CHARS-WITH-ENTITIES
        (GET-STRINGIFIED-MODULE MODULE)))
      (CL:LET*
       ((CHILD NULL) (ITER-001 CHILDMODULEITER) (COLLECT-000 NULL))
       (CL:LOOP WHILE (NEXT? ITER-001) DO
        (CL:SETQ CHILD (PLI::%PL-ITERATOR.VALUE ITER-001))
        (CL:WHEN (CL:NOT (CODE-MODULE? CHILD))
         (CL:IF (CL:EQ COLLECT-000 NULL)
          (CL:PROGN
           (CL:SETQ COLLECT-000
            (CONS (MAKE-MODULE-SURROGATE CHILD) NIL))
           (CL:IF (CL:EQ (%LIST.THE-CONS-LIST SURROGATECHILDREN) NIL)
            (CL:SETF (%LIST.THE-CONS-LIST SURROGATECHILDREN)
             COLLECT-000)
            (ADD-CONS-TO-END-OF-CONS-LIST
             (%LIST.THE-CONS-LIST SURROGATECHILDREN) COLLECT-000)))
          (CL:PROGN
           (CL:SETF (%%REST COLLECT-000)
            (CONS (MAKE-MODULE-SURROGATE CHILD) NIL))
           (CL:SETQ COLLECT-000 (%%REST COLLECT-000)))))))
      (CL:SETF (|%PLModule.PLSurrogate| PLMODULE) SURROGATECHILDREN)
      (INSERT PLMODULES PLMODULE))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:SETF (|%PLModuleContainer.PLModule| CONTAINER) PLMODULES)
   CONTAINER))

;;; (DEFUN (GET-STELLA-LITERAL-CONCEPTS (LIST OF NAMED-DESCRIPTION)) ...)

(CL:DEFUN GET-STELLA-LITERAL-CONCEPTS ()
  (CL:LET*
   ((COLLECTEDCONCEPTS (NEW-LIST))
    (TOPCONCEPT
     (GET-DESCRIPTION
      (%SURROGATE.SURROGATE-VALUE SGT-GUI-SERVER-API-STELLA-LITERAL)))
    (MODULE (PLI::GET-MODULE "PL-KERNEL-KB" NULL)))
   (GET-STELLA-LITERAL-CONCEPTS-HELPER MODULE TOPCONCEPT
    COLLECTEDCONCEPTS)
   COLLECTEDCONCEPTS))

;;; (DEFUN GET-STELLA-LITERAL-CONCEPTS-HELPER ...)

(CL:DEFUN GET-STELLA-LITERAL-CONCEPTS-HELPER (MODULE CONCEPT COLLECTEDCONCEPTS)
  (CL:LET*
   ((CHILD NULL)
    (ITER-000 (PLI::GET-DIRECT-SUBRELATIONS CONCEPT MODULE NULL)))
   (CL:LOOP WHILE (NEXT? ITER-000) DO
    (CL:SETQ CHILD (PLI::%PL-ITERATOR.VALUE ITER-000))
    (GET-STELLA-LITERAL-CONCEPTS-HELPER MODULE CHILD
     COLLECTEDCONCEPTS)))
  (INSERT COLLECTEDCONCEPTS CONCEPT))

;;; (DEFUN (GET-CONCEPTS |PLConceptContainer|) ...)

(CL:DEFUN GET-CONCEPTS (MODULE)
  (CL:LET* ((ALLCONCEPTS (GET-ALL-CONCEPTS MODULE CL:T)) (RESULT NULL))
   (CL:WHEN (CL:EQ MODULE (PLI::GET-MODULE "PL-KERNEL-KB" NULL))
    (CONCATENATE ALLCONCEPTS (GET-STELLA-LITERAL-CONCEPTS)))
   (CL:SETQ RESULT (CREATE-CONCEPT-CONTAINER ALLCONCEPTS MODULE CL:T))
   RESULT))

;;; (DEFUN (GET-CONCEPTS-WITH-PREFIX |PLConceptContainer|) ...)

(CL:DEFUN GET-CONCEPTS-WITH-PREFIX (MODULE PREFIX)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING PREFIX))
  #+MCL
  (CL:CHECK-TYPE PREFIX CL:SIMPLE-STRING)
  (CL:LET*
   ((ALLCONCEPTS (GET-ALL-CONCEPTS-WITH-PREFIX MODULE CL:NIL PREFIX))
    (RESULT NULL))
   (CL:SETQ RESULT
    (CREATE-CONCEPT-CONTAINER ALLCONCEPTS MODULE CL:NIL))
   RESULT))

;;; (DEFUN (CREATE-CONCEPT-CONTAINER |PLConceptContainer|) ...)

(CL:DEFUN CREATE-CONCEPT-CONTAINER (COLLECTEDCONCEPTS MODULE INCLUDECHILDREN?)
  (CL:LET*
   ((CONTAINER (|new-PLConceptContainer|)) (PLCONCEPTS (NEW-LIST)))
   (CL:LET*
    ((CONCEPT NULL) (ITER-000 (%LIST.THE-CONS-LIST COLLECTEDCONCEPTS)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ CONCEPT (%%VALUE ITER-000))
     (CL:LET*
      ((PLCONCEPT (|new-PLConcept|))
       (CHILDCONCEPTITER
        (PLI::GET-DIRECT-SUBRELATIONS CONCEPT MODULE NULL))
       (SURROGATECHILDREN (NEW-LIST)))
      (CL:SETF (|%PLConcept.ConceptName| PLCONCEPT)
       (XMLIFY-STRING (PL-OBJECT-TO-GUI-NAME CONCEPT)))
      (CL:SETF (|%PLConcept.Module| PLCONCEPT)
       (%MODULE.MODULE-FULL-NAME (HOME-MODULE CONCEPT)))
      (CL:SETF (|%PLConcept.SourceString| PLCONCEPT) "")
      (CL:WHEN INCLUDECHILDREN?
       (CL:LET*
        ((CHILD NULL) (ITER-001 CHILDCONCEPTITER) (COLLECT-000 NULL))
        (CL:LOOP WHILE (NEXT? ITER-001) DO
         (CL:SETQ CHILD (PLI::%PL-ITERATOR.VALUE ITER-001))
         (CL:WHEN
          (CL:AND (CLASS? CHILD)
           (CL:NOT
            (COERCE-WRAPPED-BOOLEAN-TO-BOOLEAN
             (CL:IF (DELETED? CHILD) TRUE-WRAPPER FALSE-WRAPPER))))
          (CL:IF (CL:EQ COLLECT-000 NULL)
           (CL:PROGN
            (CL:SETQ COLLECT-000
             (CONS (MAKE-LOGIC-SURROGATE CHILD) NIL))
            (CL:IF (CL:EQ (%LIST.THE-CONS-LIST SURROGATECHILDREN) NIL)
             (CL:SETF (%LIST.THE-CONS-LIST SURROGATECHILDREN)
              COLLECT-000)
             (ADD-CONS-TO-END-OF-CONS-LIST
              (%LIST.THE-CONS-LIST SURROGATECHILDREN) COLLECT-000)))
           (CL:PROGN
            (CL:SETF (%%REST COLLECT-000)
             (CONS (MAKE-LOGIC-SURROGATE CHILD) NIL))
            (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))))
      (CL:SETQ SURROGATECHILDREN
       (SORT SURROGATECHILDREN (CL:FUNCTION |PLSurrogate<|)))
      (CL:SETF (|%PLConcept.PLSurrogate| PLCONCEPT) SURROGATECHILDREN)
      (INSERT PLCONCEPTS PLCONCEPT))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:SETQ PLCONCEPTS (SORT PLCONCEPTS (CL:FUNCTION |PLConcept<|)))
   (CL:SETF (|%PLConceptContainer.PLConcept| CONTAINER) PLCONCEPTS)
   CONTAINER))

;;; (DEFUN (GET-RELATIONS |PLRelationContainer|) ...)

(CL:DEFUN GET-RELATIONS (MODULE)
  (CL:LET*
   ((ALLRELATIONS (GET-ALL-RELATIONS MODULE))
    (RESULT (CREATE-RELATION-CONTAINER ALLRELATIONS MODULE CL:T)))
   RESULT))

;;; (DEFUN (GET-RELATIONS-WITH-PREFIX |PLRelationContainer|) ...)

(CL:DEFUN GET-RELATIONS-WITH-PREFIX (MODULE PREFIX)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING PREFIX))
  #+MCL
  (CL:CHECK-TYPE PREFIX CL:SIMPLE-STRING)
  (CL:LET*
   ((ALLRELATIONS (GET-ALL-RELATIONS-WITH-PREFIX MODULE CL:NIL PREFIX))
    (RESULT NULL))
   (CL:SETQ RESULT
    (CREATE-RELATION-CONTAINER ALLRELATIONS MODULE CL:NIL))
   RESULT))

;;; (DEFUN (CREATE-RELATION-CONTAINER |PLRelationContainer|) ...)

(CL:DEFUN CREATE-RELATION-CONTAINER (COLLECTEDRELATIONS MODULE INCLUDECHILDREN?)
  (CL:LET*
   ((CONTAINER (|new-PLRelationContainer|)) (PLRELATIONS (NEW-LIST)))
   (CL:LET*
    ((RELATION NULL)
     (ITER-000 (%LIST.THE-CONS-LIST COLLECTEDRELATIONS)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ RELATION (%%VALUE ITER-000))
     (CL:LET*
      ((PLRELATION (|new-PLRelation|))
       (CHILDRELATIONITER
        (PLI::GET-DIRECT-SUBRELATIONS RELATION MODULE NULL))
       (SURROGATECHILDREN (NEW-LIST)))
      (CL:IF (FUNCTION? RELATION)
       (CL:SETF (|%PLRelation.IsFunction| PLRELATION) "TRUE")
       (CL:SETF (|%PLRelation.IsFunction| PLRELATION) "FALSE"))
      (CL:IF (CLOSED-TERM? RELATION)
       (CL:SETF (|%PLRelation.IsClosed| PLRELATION) "TRUE")
       (CL:SETF (|%PLRelation.IsClosed| PLRELATION) "FALSE"))
      (CL:SETF (|%PLRelation.RelationName| PLRELATION)
       (XMLIFY-STRING (PL-OBJECT-TO-GUI-NAME RELATION)))
      (CL:SETF (|%PLRelation.Module| PLRELATION)
       (%MODULE.MODULE-FULL-NAME (HOME-MODULE RELATION)))
      (CL:SETF (|%PLRelation.SourceString| PLRELATION) "")
      (CL:WHEN INCLUDECHILDREN?
       (CL:LET*
        ((CHILD NULL) (ITER-001 CHILDRELATIONITER) (COLLECT-000 NULL))
        (CL:LOOP WHILE (NEXT? ITER-001) DO
         (CL:SETQ CHILD (PLI::%PL-ITERATOR.VALUE ITER-001))
         (CL:WHEN
          (CL:AND (CL:NOT (CLASS? CHILD))
           (CL:NOT
            (COERCE-WRAPPED-BOOLEAN-TO-BOOLEAN
             (CL:IF (DELETED? CHILD) TRUE-WRAPPER FALSE-WRAPPER))))
          (CL:IF (CL:EQ COLLECT-000 NULL)
           (CL:PROGN
            (CL:SETQ COLLECT-000
             (CONS (MAKE-LOGIC-SURROGATE CHILD) NIL))
            (CL:IF (CL:EQ (%LIST.THE-CONS-LIST SURROGATECHILDREN) NIL)
             (CL:SETF (%LIST.THE-CONS-LIST SURROGATECHILDREN)
              COLLECT-000)
             (ADD-CONS-TO-END-OF-CONS-LIST
              (%LIST.THE-CONS-LIST SURROGATECHILDREN) COLLECT-000)))
           (CL:PROGN
            (CL:SETF (%%REST COLLECT-000)
             (CONS (MAKE-LOGIC-SURROGATE CHILD) NIL))
            (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))))
      (CL:SETQ SURROGATECHILDREN
       (SORT SURROGATECHILDREN (CL:FUNCTION |PLSurrogate<|)))
      (CL:SETF (|%PLRelation.PLSurrogate| PLRELATION)
       SURROGATECHILDREN)
      (INSERT PLRELATIONS PLRELATION))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:SETQ PLRELATIONS (SORT PLRELATIONS (CL:FUNCTION |PLRelation<|)))
   (CL:SETF (|%PLRelationContainer.PLRelation| CONTAINER) PLRELATIONS)
   CONTAINER))

;;; (DEFUN (CREATE-MODULE-COLLECTION |PLSurrogateCollection|) ...)

(CL:DEFUN CREATE-MODULE-COLLECTION (MODULES)
  (CL:LET*
   ((SURROGATECHILDREN (NEW-LIST))
    (PLSURROGATECOLLECTION (|new-PLSurrogateCollection|)))
   (CL:LET*
    ((MODULE NULL) (ITER-000 (%LIST.THE-CONS-LIST MODULES))
     (COLLECT-000 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ MODULE (%%VALUE ITER-000))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-000 (CONS (MAKE-MODULE-SURROGATE MODULE) NIL))
       (CL:IF (CL:EQ (%LIST.THE-CONS-LIST SURROGATECHILDREN) NIL)
        (CL:SETF (%LIST.THE-CONS-LIST SURROGATECHILDREN) COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST
         (%LIST.THE-CONS-LIST SURROGATECHILDREN) COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000)
        (CONS (MAKE-MODULE-SURROGATE MODULE) NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:SETQ SURROGATECHILDREN
    (SORT SURROGATECHILDREN (CL:FUNCTION |PLSurrogate<|)))
   (CL:SETF
    (|%PLSurrogateCollection.PLSurrogate| PLSURROGATECOLLECTION)
    SURROGATECHILDREN)
   PLSURROGATECOLLECTION))

;;; (DEFUN (CREATE-SURROGATE-COLLECTION |PLSurrogateCollection|) ...)

(CL:DEFUN CREATE-SURROGATE-COLLECTION (SURROGATES)
  (CL:LET*
   ((SURROGATECHILDREN (NEW-LIST))
    (PLSURROGATECOLLECTION (|new-PLSurrogateCollection|)))
   (CL:LET*
    ((SURROGATE NULL) (ITER-000 (%LIST.THE-CONS-LIST SURROGATES))
     (COLLECT-000 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ SURROGATE (%%VALUE ITER-000))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-000
        (CONS (MAKE-SURROGATE-SURROGATE SURROGATE) NIL))
       (CL:IF (CL:EQ (%LIST.THE-CONS-LIST SURROGATECHILDREN) NIL)
        (CL:SETF (%LIST.THE-CONS-LIST SURROGATECHILDREN) COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST
         (%LIST.THE-CONS-LIST SURROGATECHILDREN) COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000)
        (CONS (MAKE-SURROGATE-SURROGATE SURROGATE) NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:SETQ SURROGATECHILDREN
    (SORT SURROGATECHILDREN (CL:FUNCTION |PLSurrogate<|)))
   (CL:SETF
    (|%PLSurrogateCollection.PLSurrogate| PLSURROGATECOLLECTION)
    SURROGATECHILDREN)
   PLSURROGATECOLLECTION))

;;; (DEFUN (CREATE-SURROGATE-COLLECTION-FOR-LOGIC-OBJECT |PLSurrogateCollection|) ...)

(CL:DEFUN CREATE-SURROGATE-COLLECTION-FOR-LOGIC-OBJECT (RELATIONS)
  (CL:LET*
   ((SURROGATECHILDREN (NEW-LIST))
    (PLSURROGATECOLLECTION (|new-PLSurrogateCollection|)))
   (CL:LET*
    ((RELATION NULL) (ITER-000 (%LIST.THE-CONS-LIST RELATIONS))
     (COLLECT-000 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ RELATION (%%VALUE ITER-000))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-000 (CONS (MAKE-LOGIC-SURROGATE RELATION) NIL))
       (CL:IF (CL:EQ (%LIST.THE-CONS-LIST SURROGATECHILDREN) NIL)
        (CL:SETF (%LIST.THE-CONS-LIST SURROGATECHILDREN) COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST
         (%LIST.THE-CONS-LIST SURROGATECHILDREN) COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000)
        (CONS (MAKE-LOGIC-SURROGATE RELATION) NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:SETQ SURROGATECHILDREN
    (SORT SURROGATECHILDREN (CL:FUNCTION |PLSurrogate<|)))
   (CL:SETF
    (|%PLSurrogateCollection.PLSurrogate| PLSURROGATECOLLECTION)
    SURROGATECHILDREN)
   PLSURROGATECOLLECTION))

;;; (DEFUN (CREATE-SUPERRELATIONS-CONTAINER |PLSurrogateCollection|) ...)

(CL:DEFUN CREATE-SUPERRELATIONS-CONTAINER (RELATION MODULE)
  (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:LET*
    ((PARENTRELATIONITER
      (PLI::GET-DIRECT-SUPERRELATIONS RELATION MODULE NULL))
     (SURROGATECHILDREN (NEW-LIST))
     (PLSURROGATECOLLECTION (|new-PLSurrogateCollection|)))
    (CL:LET*
     ((PARENT NULL) (ITER-000 PARENTRELATIONITER) (COLLECT-000 NULL))
     (CL:LOOP WHILE (NEXT? ITER-000) DO
      (CL:SETQ PARENT (PLI::%PL-ITERATOR.VALUE ITER-000))
      (CL:IF (CL:EQ COLLECT-000 NULL)
       (CL:PROGN
        (CL:SETQ COLLECT-000 (CONS (MAKE-LOGIC-SURROGATE PARENT) NIL))
        (CL:IF (CL:EQ (%LIST.THE-CONS-LIST SURROGATECHILDREN) NIL)
         (CL:SETF (%LIST.THE-CONS-LIST SURROGATECHILDREN) COLLECT-000)
         (ADD-CONS-TO-END-OF-CONS-LIST
          (%LIST.THE-CONS-LIST SURROGATECHILDREN) COLLECT-000)))
       (CL:PROGN
        (CL:SETF (%%REST COLLECT-000)
         (CONS (MAKE-LOGIC-SURROGATE PARENT) NIL))
        (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
    (CL:SETQ SURROGATECHILDREN
     (SORT SURROGATECHILDREN (CL:FUNCTION |PLSurrogate<|)))
    (CL:SETF
     (|%PLSurrogateCollection.PLSurrogate| PLSURROGATECOLLECTION)
     SURROGATECHILDREN)
    PLSURROGATECOLLECTION)))

;;; (DEFUN (CREATE-VARIABLES-LIST |PLVariableList|) ...)

(CL:DEFUN CREATE-VARIABLES-LIST (RELATION)
  (CL:LET*
   ((VARIABLES (NEW-LIST)) (PLVARIABLELIST (|new-PLVariableList|)))
   (CL:COND
    ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE RELATION)
      SGT-GUI-SERVER-API-LOGIC-NAMED-DESCRIPTION)
     (CL:PROGN
      (CL:LET*
       ((VARIABLENAME NULL)
        (ITER-000
         (%LIST.THE-CONS-LIST
          (%NAMED-DESCRIPTION.IO-VARIABLE-NAMES RELATION)))
        (VARIABLETYPE NULL)
        (ITER-001
         (%LIST.THE-CONS-LIST
          (%NAMED-DESCRIPTION.IO-VARIABLE-TYPES RELATION)))
        (COLLECT-000 NULL))
       (CL:LOOP WHILE
        (CL:AND (CL:NOT (CL:EQ ITER-000 NIL))
         (CL:NOT (CL:EQ ITER-001 NIL)))
        DO (CL:SETQ VARIABLENAME (%%VALUE ITER-000))
        (CL:SETQ VARIABLETYPE (%%VALUE ITER-001))
        (CL:IF (CL:EQ COLLECT-000 NULL)
         (CL:PROGN
          (CL:SETQ COLLECT-000
           (CONS
            (MAKE-PL-VARIABLE (%SYMBOL.SYMBOL-NAME VARIABLENAME)
             VARIABLETYPE)
            NIL))
          (CL:IF (CL:EQ (%LIST.THE-CONS-LIST VARIABLES) NIL)
           (CL:SETF (%LIST.THE-CONS-LIST VARIABLES) COLLECT-000)
           (ADD-CONS-TO-END-OF-CONS-LIST
            (%LIST.THE-CONS-LIST VARIABLES) COLLECT-000)))
         (CL:PROGN
          (CL:SETF (%%REST COLLECT-000)
           (CONS
            (MAKE-PL-VARIABLE (%SYMBOL.SYMBOL-NAME VARIABLENAME)
             VARIABLETYPE)
            NIL))
          (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))
        (CL:SETQ ITER-000 (%%REST ITER-000))
        (CL:SETQ ITER-001 (%%REST ITER-001))))))
    (CL:T))
   (CL:SETF (|%PLVariableList.PLVariable| PLVARIABLELIST) VARIABLES)
   PLVARIABLELIST))

;;; (DEFUN (MAKE-PL-VARIABLE |PLVariable|) ...)

(CL:DEFUN MAKE-PL-VARIABLE (VARIABLENAME VARIABLETYPE)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING VARIABLENAME))
  #+MCL
  (CL:CHECK-TYPE VARIABLENAME CL:SIMPLE-STRING)
  (CL:LET*
   ((RESULT (|new-PLVariable|)) (PLVARIABLENAME (|new-PLString|))
    (PLVARIABLETYPE (|new-PLSurrogate|)))
   (CL:SETF (|%PLString.Value| PLVARIABLENAME) VARIABLENAME)
   (CL:SETF (|%PLSurrogate.ID| PLVARIABLETYPE)
    (%SURROGATE.SYMBOL-NAME VARIABLETYPE))
   (CL:SETF (|%PLVariable.VariableName| RESULT) PLVARIABLENAME)
   (CL:SETF (|%PLVariable.VariableType| RESULT) PLVARIABLETYPE) RESULT))

;;; (DEFUN (MAKE-PL-RELATION |PLRelation|) ...)

(CL:DEFUN MAKE-PL-RELATION (RELATION MODULENAME)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MODULENAME))
  #+MCL
  (CL:CHECK-TYPE MODULENAME CL:SIMPLE-STRING)
  (CL:SETQ MODULENAME MODULENAME)
  (CL:LET* ((XMLRELATION (|new-PLRelation|)))
   (CL:SETF (|%PLRelation.Module| XMLRELATION)
    (%MODULE.MODULE-FULL-NAME (HOME-MODULE RELATION)))
   (CL:IF (FUNCTION? RELATION)
    (CL:SETF (|%PLRelation.IsFunction| XMLRELATION) "TRUE")
    (CL:SETF (|%PLRelation.IsFunction| XMLRELATION) "FALSE"))
   (CL:IF (CLOSED-TERM? RELATION)
    (CL:SETF (|%PLRelation.IsClosed| XMLRELATION) "TRUE")
    (CL:SETF (|%PLRelation.IsClosed| XMLRELATION) "FALSE"))
   (CL:SETF (|%PLRelation.SourceString| XMLRELATION) "")
   (CL:SETF (|%PLRelation.RelationName| XMLRELATION)
    (XMLIFY-STRING (PL-OBJECT-TO-GUI-NAME RELATION)))
   XMLRELATION))

;;; (DEFUN (MAKE-PL-CONCEPT |PLConcept|) ...)

(CL:DEFUN MAKE-PL-CONCEPT (CONCEPT)
  (CL:LET* ((XMLCONCEPT (|new-PLConcept|)))
   (CL:SETF (|%PLConcept.Module| XMLCONCEPT)
    (%MODULE.MODULE-FULL-NAME (HOME-MODULE CONCEPT)))
   (CL:SETF (|%PLConcept.SourceString| XMLCONCEPT) "")
   (CL:SETF (|%PLConcept.ConceptName| XMLCONCEPT)
    (XMLIFY-STRING (PL-OBJECT-TO-GUI-NAME CONCEPT)))
   XMLCONCEPT))

;;; (DEFUN (MAKE-PL-RELATIONS (LIST OF |PLRelation|)) ...)

(CL:DEFUN MAKE-PL-RELATIONS (RELATIONS MODULENAME)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MODULENAME))
  #+MCL
  (CL:CHECK-TYPE MODULENAME CL:SIMPLE-STRING)
  (CL:LET* ((RESULT (NEW-LIST)))
   (CL:LET*
    ((RELATION NULL) (ITER-000 (%LIST.THE-CONS-LIST RELATIONS))
     (COLLECT-000 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ RELATION (%%VALUE ITER-000))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-000
        (CONS (MAKE-PL-RELATION RELATION MODULENAME) NIL))
       (CL:IF (CL:EQ (%LIST.THE-CONS-LIST RESULT) NIL)
        (CL:SETF (%LIST.THE-CONS-LIST RESULT) COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST (%LIST.THE-CONS-LIST RESULT)
         COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000)
        (CONS (MAKE-PL-RELATION RELATION MODULENAME) NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   RESULT))

;;; (DEFUN (MAKE-MODULE-SURROGATE |PLSurrogate|) ...)

(CL:DEFUN MAKE-MODULE-SURROGATE (MODULE)
  (CL:LET* ((RESULT (|new-PLSurrogate|)))
   (CL:SETF (|%PLSurrogate.ID| RESULT) (%MODULE.MODULE-NAME MODULE))
   RESULT))

;;; (DEFUN (MAKE-SURROGATE-SURROGATE |PLSurrogate|) ...)

(CL:DEFUN MAKE-SURROGATE-SURROGATE (SURROGATE)
  (CL:LET* ((RESULT (|new-PLSurrogate|)))
   (CL:SETF (|%PLSurrogate.ID| RESULT)
    (XMLIFY-STRING (PL-OBJECT-TO-GUI-NAME SURROGATE)))
   RESULT))

;;; (DEFUN (MAKE-LOGIC-SURROGATE |PLSurrogate|) ...)

(CL:DEFUN MAKE-LOGIC-SURROGATE (OBJ)
  (CL:LET* ((RESULT (|new-PLSurrogate|)))
   (CL:WHEN (SKOLEM? OBJ)
    (CL:LET*
     ((RESULTSTREAM (NEW-OUTPUT-STRING-STREAM))
      (NATIVESTREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM RESULTSTREAM))
      (PRINTNAME STELLA::NULL-STRING))
     (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING PRINTNAME))
     (CL:LET* ((*PRINTREADABLY?* CL:T) (*PRINTPRETTY?* CL:T))
      (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?* *PRINTPRETTY?*))
      (CL:WHEN (USE-CL-CONSES?)
			      (CL:LET ((CL:*PRINT-PRETTY* CL:T))
				(PRINT-TOP-LEVEL-OBJECT obj nativeStream)))
      (CL:SETQ PRINTNAME
       (XMLIFY-STRING (THE-STRING-READER RESULTSTREAM))))
     (CL:SETF (|%PLSurrogate.ID| RESULT) PRINTNAME)
     (CL:RETURN-FROM MAKE-LOGIC-SURROGATE RESULT)))
   (CL:SETF (|%PLSurrogate.ID| RESULT)
    (XMLIFY-STRING (PL-OBJECT-TO-GUI-NAME OBJ)))
   RESULT))

;;; (DEFUN (GET-ALL-RELATIONS (LIST OF DESCRIPTION)) ...)

(CL:DEFUN GET-ALL-RELATIONS (MODULE)
  (CL:LET*
   ((ITER (ALL-NAMED-DESCRIPTIONS MODULE CL:T)) (RESULT (NEW-LIST)))
   (CL:LET* ((DESCRIPTION NULL) (ITER-000 ITER) (COLLECT-000 NULL))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ DESCRIPTION (%ITERATOR.VALUE ITER-000))
     (CL:WHEN (CL:NOT (CLASS? DESCRIPTION))
      (CL:IF (CL:EQ COLLECT-000 NULL)
       (CL:PROGN (CL:SETQ COLLECT-000 (CONS DESCRIPTION NIL))
        (CL:IF (CL:EQ (%LIST.THE-CONS-LIST RESULT) NIL)
         (CL:SETF (%LIST.THE-CONS-LIST RESULT) COLLECT-000)
         (ADD-CONS-TO-END-OF-CONS-LIST (%LIST.THE-CONS-LIST RESULT)
          COLLECT-000)))
       (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS DESCRIPTION NIL))
        (CL:SETQ COLLECT-000 (%%REST COLLECT-000)))))))
   RESULT))

;;; (DEFUN (GET-ALL-RELATIONS-WITH-PREFIX (LIST OF DESCRIPTION)) ...)

(CL:DEFUN GET-ALL-RELATIONS-WITH-PREFIX (MODULE LOCAL? PREFIX)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING PREFIX))
  #+MCL
  (CL:CHECK-TYPE PREFIX CL:SIMPLE-STRING)
  (CL:LET*
   ((ITER (ALL-NAMED-DESCRIPTIONS MODULE LOCAL?)) (RESULT (NEW-LIST))
    (DOWNCASEDPREFIX (STRING-DOWNCASE PREFIX)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING DOWNCASEDPREFIX))
   (CL:LET* ((DESCRIPTION NULL) (ITER-000 ITER) (COLLECT-000 NULL))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ DESCRIPTION (%ITERATOR.VALUE ITER-000))
     (CL:WHEN
      (CL:AND (CL:NOT (CLASS? DESCRIPTION))
       (CL:NOT (CL:EQ PREFIX STELLA::NULL-STRING))
       (STARTS-WITH? (GET-LOGIC-OBJECT-NAME DESCRIPTION "FALSE")
        DOWNCASEDPREFIX 0))
      (CL:IF (CL:EQ COLLECT-000 NULL)
       (CL:PROGN (CL:SETQ COLLECT-000 (CONS DESCRIPTION NIL))
        (CL:IF (CL:EQ (%LIST.THE-CONS-LIST RESULT) NIL)
         (CL:SETF (%LIST.THE-CONS-LIST RESULT) COLLECT-000)
         (ADD-CONS-TO-END-OF-CONS-LIST (%LIST.THE-CONS-LIST RESULT)
          COLLECT-000)))
       (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS DESCRIPTION NIL))
        (CL:SETQ COLLECT-000 (%%REST COLLECT-000)))))))
   RESULT))

;;; (DEFUN (GET-ALL-CONCEPTS (LIST OF DESCRIPTION)) ...)

(CL:DEFUN GET-ALL-CONCEPTS (MODULE LOCAL?)
  (CL:LET*
   ((ITER (ALL-NAMED-DESCRIPTIONS MODULE LOCAL?)) (RESULT (NEW-LIST)))
   (CL:LET* ((DESCRIPTION NULL) (ITER-000 ITER) (COLLECT-000 NULL))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ DESCRIPTION (%ITERATOR.VALUE ITER-000))
     (CL:WHEN (CLASS? DESCRIPTION)
      (CL:IF (CL:EQ COLLECT-000 NULL)
       (CL:PROGN (CL:SETQ COLLECT-000 (CONS DESCRIPTION NIL))
        (CL:IF (CL:EQ (%LIST.THE-CONS-LIST RESULT) NIL)
         (CL:SETF (%LIST.THE-CONS-LIST RESULT) COLLECT-000)
         (ADD-CONS-TO-END-OF-CONS-LIST (%LIST.THE-CONS-LIST RESULT)
          COLLECT-000)))
       (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS DESCRIPTION NIL))
        (CL:SETQ COLLECT-000 (%%REST COLLECT-000)))))))
   RESULT))

;;; (DEFUN (GET-ALL-CONCEPTS-WITH-PREFIX (LIST OF DESCRIPTION)) ...)

(CL:DEFUN GET-ALL-CONCEPTS-WITH-PREFIX (MODULE LOCAL? PREFIX)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING PREFIX))
  #+MCL
  (CL:CHECK-TYPE PREFIX CL:SIMPLE-STRING)
  (CL:LET*
   ((ITER (ALL-NAMED-DESCRIPTIONS MODULE LOCAL?)) (RESULT (NEW-LIST))
    (DOWNCASEDPREFIX (STRING-DOWNCASE PREFIX)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING DOWNCASEDPREFIX))
   (CL:LET* ((DESCRIPTION NULL) (ITER-000 ITER) (COLLECT-000 NULL))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ DESCRIPTION (%ITERATOR.VALUE ITER-000))
     (CL:WHEN
      (CL:AND (CLASS? DESCRIPTION)
       (CL:NOT (CL:EQ PREFIX STELLA::NULL-STRING))
       (STARTS-WITH? (GET-LOGIC-OBJECT-NAME DESCRIPTION "FALSE")
        DOWNCASEDPREFIX 0))
      (CL:IF (CL:EQ COLLECT-000 NULL)
       (CL:PROGN (CL:SETQ COLLECT-000 (CONS DESCRIPTION NIL))
        (CL:IF (CL:EQ (%LIST.THE-CONS-LIST RESULT) NIL)
         (CL:SETF (%LIST.THE-CONS-LIST RESULT) COLLECT-000)
         (ADD-CONS-TO-END-OF-CONS-LIST (%LIST.THE-CONS-LIST RESULT)
          COLLECT-000)))
       (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS DESCRIPTION NIL))
        (CL:SETQ COLLECT-000 (%%REST COLLECT-000)))))))
   RESULT))

;;; (DEFUN (GET-SUBCONCEPTS (LIST OF DESCRIPTION)) ...)

(CL:DEFUN GET-SUBCONCEPTS (CONCEPT MODULE)
  (CL:LET*
   ((ITER (PLI::GET-DIRECT-SUBRELATIONS CONCEPT MODULE NULL))
    (RESULT (NEW-LIST)))
   (CL:LET* ((SUB NULL) (ITER-000 ITER) (COLLECT-000 NULL))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ SUB (PLI::%PL-ITERATOR.VALUE ITER-000))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN (CL:SETQ COLLECT-000 (CONS SUB NIL))
       (CL:IF (CL:EQ (%LIST.THE-CONS-LIST RESULT) NIL)
        (CL:SETF (%LIST.THE-CONS-LIST RESULT) COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST (%LIST.THE-CONS-LIST RESULT)
         COLLECT-000)))
      (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS SUB NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
   RESULT))

;;; (DEFUN (GET-SUBRELATIONS (LIST OF DESCRIPTION)) ...)

(CL:DEFUN GET-SUBRELATIONS (RELATION MODULE)
  (CL:LET*
   ((ITER (PLI::GET-DIRECT-SUBRELATIONS RELATION MODULE NULL))
    (RESULT (NEW-LIST)))
   (CL:LET* ((SUB NULL) (ITER-000 ITER) (COLLECT-000 NULL))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ SUB (PLI::%PL-ITERATOR.VALUE ITER-000))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN (CL:SETQ COLLECT-000 (CONS SUB NIL))
       (CL:IF (CL:EQ (%LIST.THE-CONS-LIST RESULT) NIL)
        (CL:SETF (%LIST.THE-CONS-LIST RESULT) COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST (%LIST.THE-CONS-LIST RESULT)
         COLLECT-000)))
      (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS SUB NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
   RESULT))

;;; (DEFUN (GET-SUPERCONCEPTS (LIST OF DESCRIPTION)) ...)

(CL:DEFUN GET-SUPERCONCEPTS (CONCEPT MODULE)
  (CL:LET*
   ((ITER (PLI::GET-DIRECT-SUPERRELATIONS CONCEPT MODULE NULL))
    (RESULT (NEW-LIST)))
   (CL:LET* ((SUPER NULL) (ITER-000 ITER) (COLLECT-000 NULL))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ SUPER (PLI::%PL-ITERATOR.VALUE ITER-000))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN (CL:SETQ COLLECT-000 (CONS SUPER NIL))
       (CL:IF (CL:EQ (%LIST.THE-CONS-LIST RESULT) NIL)
        (CL:SETF (%LIST.THE-CONS-LIST RESULT) COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST (%LIST.THE-CONS-LIST RESULT)
         COLLECT-000)))
      (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS SUPER NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
   RESULT))

;;; (DEFUN (GET-SUPERRELATIONS (LIST OF DESCRIPTION)) ...)

(CL:DEFUN GET-SUPERRELATIONS (RELATION MODULE)
  (CL:LET*
   ((ITER (PLI::GET-DIRECT-SUPERRELATIONS RELATION MODULE NULL))
    (RESULT (NEW-LIST)))
   (CL:LET* ((SUPER NULL) (ITER-000 ITER) (COLLECT-000 NULL))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ SUPER (PLI::%PL-ITERATOR.VALUE ITER-000))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN (CL:SETQ COLLECT-000 (CONS SUPER NIL))
       (CL:IF (CL:EQ (%LIST.THE-CONS-LIST RESULT) NIL)
        (CL:SETF (%LIST.THE-CONS-LIST RESULT) COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST (%LIST.THE-CONS-LIST RESULT)
         COLLECT-000)))
      (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS SUPER NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
   RESULT))

;;; (DEFUN (MAKE-PL-INSTANCE |PLInstance|) ...)

(CL:DEFUN MAKE-PL-INSTANCE (INSTANCE)
  (CL:LET* ((XMLINSTANCE (|new-PLInstance|)))
   (CL:SETF (|%PLInstance.InstanceName| XMLINSTANCE)
    (XMLIFY-STRING (PL-OBJECT-TO-GUI-NAME INSTANCE)))
   (CL:IF (CL:NOT (CL:EQ (HOME-MODULE INSTANCE) NULL))
    (CL:SETF (|%PLInstance.Module| XMLINSTANCE)
     (%MODULE.MODULE-FULL-NAME (HOME-MODULE INSTANCE)))
    (CL:SETF (|%PLInstance.Module| XMLINSTANCE) ""))
   (CL:SETF (|%PLInstance.SourceString| XMLINSTANCE)
    (CONCATENATE "(DEFOBJECT " (|%PLInstance.InstanceName| XMLINSTANCE)
     ")"))
   XMLINSTANCE))

;;; (DEFUN (MAKE-PL-INSTANCES (LIST OF |PLInstance|)) ...)

(CL:DEFUN MAKE-PL-INSTANCES (INSTANCES SKIPUNINTERNEDINSTANCES?)
  (CL:LET* ((RESULT (NEW-LIST)))
   (CL:LET*
    ((INSTANCE NULL) (ITER-000 (%LIST.THE-CONS-LIST INSTANCES))
     (COLLECT-000 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ INSTANCE (%%VALUE ITER-000))
     (CL:WHEN
      (CL:OR (CL:NOT SKIPUNINTERNEDINSTANCES?)
       (CL:NOT (CL:EQ (HOME-MODULE INSTANCE) NULL)))
      (CL:IF (CL:EQ COLLECT-000 NULL)
       (CL:PROGN
        (CL:SETQ COLLECT-000 (CONS (MAKE-PL-INSTANCE INSTANCE) NIL))
        (CL:IF (CL:EQ (%LIST.THE-CONS-LIST RESULT) NIL)
         (CL:SETF (%LIST.THE-CONS-LIST RESULT) COLLECT-000)
         (ADD-CONS-TO-END-OF-CONS-LIST (%LIST.THE-CONS-LIST RESULT)
          COLLECT-000)))
       (CL:PROGN
        (CL:SETF (%%REST COLLECT-000)
         (CONS (MAKE-PL-INSTANCE INSTANCE) NIL))
        (CL:SETQ COLLECT-000 (%%REST COLLECT-000)))))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   RESULT))

;;; (DEFUN (MAKE-PL-PROPOSITION |PLProposition|) ...)

(CL:DEFUN MAKE-PL-PROPOSITION (PROPOSITION MODULE ISRULE)
  (CL:LET* ((XMLPROPOSITION (|new-PLProposition|)))
   (CL:SETF (|%PLProposition.PropositionName| XMLPROPOSITION)
    (GET-PROPOSITION-STRING PROPOSITION MODULE))
   (CL:IF (ASSERTED-AS-TRUE? PROPOSITION)
    (CL:SETF (|%PLProposition.IsAsserted| XMLPROPOSITION) "TRUE")
    (CL:SETF (|%PLProposition.IsAsserted| XMLPROPOSITION) "FALSE"))
   (CL:LET*
    ((*CONTEXT* (GET-QUERY-CONTEXT))
     (*MODULE* (%CONTEXT.BASE-MODULE *CONTEXT*)))
    (CL:DECLARE (CL:SPECIAL *CONTEXT* *MODULE*))
    (CL:IF (PLI::IS-STRICT (PROPOSITION-TRUTH-VALUE PROPOSITION))
     (CL:SETF (|%PLProposition.IsStrict| XMLPROPOSITION) "TRUE")
     (CL:SETF (|%PLProposition.IsStrict| XMLPROPOSITION) "FALSE")))
   (CL:IF ISRULE
    (CL:SETF (|%PLProposition.IsRule| XMLPROPOSITION) "TRUE")
    (CL:SETF (|%PLProposition.IsRule| XMLPROPOSITION) "FALSE"))
   XMLPROPOSITION))

;;; (DEFUN (MAKE-PL-PROPOSITIONS (LIST OF |PLProposition|)) ...)

(CL:DEFUN MAKE-PL-PROPOSITIONS (PROPOSITIONS MODULE ISRULE)
  (CL:LET* ((RESULT (NEW-LIST)))
   (CL:LET*
    ((PROPOSITION NULL) (ITER-000 (%LIST.THE-CONS-LIST PROPOSITIONS))
     (COLLECT-000 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ PROPOSITION (%%VALUE ITER-000))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-000
        (CONS (MAKE-PL-PROPOSITION PROPOSITION MODULE ISRULE) NIL))
       (CL:IF (CL:EQ (%LIST.THE-CONS-LIST RESULT) NIL)
        (CL:SETF (%LIST.THE-CONS-LIST RESULT) COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST (%LIST.THE-CONS-LIST RESULT)
         COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000)
        (CONS (MAKE-PL-PROPOSITION PROPOSITION MODULE ISRULE) NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   RESULT))

;;; (DEFUN (GET-DOCUMENTATION-FOR-OBJECT |PLString|) ...)

(CL:DEFUN GET-DOCUMENTATION-FOR-OBJECT (MODULENAME OBJECTNAME)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MODULENAME OBJECTNAME))
  #+MCL
  (CL:CHECK-TYPE MODULENAME CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE OBJECTNAME CL:SIMPLE-STRING)
  (CL:LET* ((RESULT (|new-PLString|)) (DOCSTRING ""))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING DOCSTRING))
   (CL:LET*
    ((DOC NULL)
     (ITER-000
      (PLI::S-GET-INFERRED-BINARY-PROPOSITION-VALUES "DOCUMENTATION"
       (GUI-NAME-TO-PL-NAME OBJECTNAME) MODULENAME NULL))
     (I NULL-INTEGER) (ITER-001 1))
    (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-001))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ DOC (PLI::%PL-ITERATOR.VALUE ITER-000))
     (CL:SETQ I ITER-001)
     (CL:WHEN (STRING? DOC)
      (CL:SETQ DOCSTRING
       (CONCATENATE DOCSTRING (CL:IF (CL:= I 1) "" EOL-STRING)
        (%STRING-WRAPPER.WRAPPER-VALUE DOC))))
     (CL:SETQ ITER-001 (CL:1+ ITER-001))))
   (CL:SETF (|%PLString.Value| RESULT)
    (XMLIFY-FORMATTED-STRING DOCSTRING))
   RESULT))

;;; (DEFUN (GET-DIRECT-RELATIONS-FOR-CONCEPT (LIST OF DESCRIPTION)) ...)

(CL:DEFUN GET-DIRECT-RELATIONS-FOR-CONCEPT (MODULE CONCEPT)
  (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:LET*
    ((MODULE (PLI::GET-HOME-MODULE CONCEPT))
     (ALLRELATIONS (GET-ALL-RELATIONS MODULE)) (RESULT (NEW-LIST)))
    (CL:LET*
     ((RELATION NULL) (ITER-000 (%LIST.THE-CONS-LIST ALLRELATIONS))
      (COLLECT-000 NULL))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:SETQ RELATION (%%VALUE ITER-000))
      (CL:WHEN (CL:EQ CONCEPT (PLI::GET-DOMAIN RELATION))
       (CL:IF (CL:EQ COLLECT-000 NULL)
        (CL:PROGN (CL:SETQ COLLECT-000 (CONS RELATION NIL))
         (CL:IF (CL:EQ (%LIST.THE-CONS-LIST RESULT) NIL)
          (CL:SETF (%LIST.THE-CONS-LIST RESULT) COLLECT-000)
          (ADD-CONS-TO-END-OF-CONS-LIST (%LIST.THE-CONS-LIST RESULT)
           COLLECT-000)))
        (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS RELATION NIL))
         (CL:SETQ COLLECT-000 (%%REST COLLECT-000)))))
      (CL:SETQ ITER-000 (%%REST ITER-000))))
    RESULT)))

;;; (DEFUN (GET-INHERITED-RELATIONS-FOR-CONCEPT (LIST OF DESCRIPTION)) ...)

(CL:DEFUN GET-INHERITED-RELATIONS-FOR-CONCEPT (MODULE CONCEPT)
  (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:LET*
    ((MODULE (PLI::GET-HOME-MODULE CONCEPT))
     (ALLRELATIONS (GET-ALL-RELATIONS MODULE)) (RESULT (NEW-LIST)))
    (CL:LET*
     ((RELATION NULL) (ITER-000 (%LIST.THE-CONS-LIST ALLRELATIONS))
      (COLLECT-000 NULL))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:SETQ RELATION (%%VALUE ITER-000))
      (CL:WHEN
       (PLI::IS-SUBRELATION CONCEPT (PLI::GET-DOMAIN RELATION) MODULE
        PLI::TAXONOMIC-ENV)
       (CL:IF (CL:EQ COLLECT-000 NULL)
        (CL:PROGN (CL:SETQ COLLECT-000 (CONS RELATION NIL))
         (CL:IF (CL:EQ (%LIST.THE-CONS-LIST RESULT) NIL)
          (CL:SETF (%LIST.THE-CONS-LIST RESULT) COLLECT-000)
          (ADD-CONS-TO-END-OF-CONS-LIST (%LIST.THE-CONS-LIST RESULT)
           COLLECT-000)))
        (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS RELATION NIL))
         (CL:SETQ COLLECT-000 (%%REST COLLECT-000)))))
      (CL:SETQ ITER-000 (%%REST ITER-000))))
    RESULT)))

;;; (DEFUN (GET-PROPOSITIONS-FOR-OBJECT (LIST OF PROPOSITION)) ...)

(CL:DEFUN GET-PROPOSITIONS-FOR-OBJECT (MODULENAME INSTANCENAME RELATION?)
  "Get all the propositions for a given instance"
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MODULENAME INSTANCENAME))
  #+MCL
  (CL:CHECK-TYPE MODULENAME CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE INSTANCENAME CL:SIMPLE-STRING)
  (CL:SETQ RELATION? RELATION?)
  (CL:LET*
   ((ITER
     (PLI::S-GET-PROPOSITIONS-OF (GUI-NAME-TO-PL-NAME INSTANCENAME)
      MODULENAME NULL))
    (PROPOSITIONS (NEW-LIST)))
   (CL:LET* ((PROP NULL) (ITER-000 ITER) (COLLECT-000 NULL))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ PROP (PLI::%PL-ITERATOR.VALUE ITER-000))
     (CL:WHEN (CL:NOT (RULE-PROPOSITION? PROP))
      (CL:IF (CL:EQ COLLECT-000 NULL)
       (CL:PROGN (CL:SETQ COLLECT-000 (CONS PROP NIL))
        (CL:IF (CL:EQ (%LIST.THE-CONS-LIST PROPOSITIONS) NIL)
         (CL:SETF (%LIST.THE-CONS-LIST PROPOSITIONS) COLLECT-000)
         (ADD-CONS-TO-END-OF-CONS-LIST
          (%LIST.THE-CONS-LIST PROPOSITIONS) COLLECT-000)))
       (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS PROP NIL))
        (CL:SETQ COLLECT-000 (%%REST COLLECT-000)))))))
   (SORT PROPOSITIONS (CL:FUNCTION PROPOSITION-LESS-THAN?))))

;;; (DEFUN (GET-RULES-FOR-RELATION (LIST OF PROPOSITION)) ...)

(CL:DEFUN GET-RULES-FOR-RELATION (MODULENAME INSTANCENAME)
  "Get all the rules for a given logic object"
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MODULENAME INSTANCENAME))
  #+MCL
  (CL:CHECK-TYPE MODULENAME CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE INSTANCENAME CL:SIMPLE-STRING)
  (CL:LET*
   ((ITER
     (PLI::S-GET-RULES (GUI-NAME-TO-PL-NAME INSTANCENAME) MODULENAME
      NULL))
    (RULES (NEW-LIST)))
   (CL:LET* ((RULE NULL) (ITER-000 ITER) (COLLECT-000 NULL))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ RULE (PLI::%PL-ITERATOR.VALUE ITER-000))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN (CL:SETQ COLLECT-000 (CONS RULE NIL))
       (CL:IF (CL:EQ (%LIST.THE-CONS-LIST RULES) NIL)
        (CL:SETF (%LIST.THE-CONS-LIST RULES) COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST (%LIST.THE-CONS-LIST RULES)
         COLLECT-000)))
      (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS RULE NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
   (SORT RULES (CL:FUNCTION PROPOSITION-LESS-THAN?))))

;;; (DEFUN (RULE-PROPOSITION? BOOLEAN) ...)

(CL:DEFUN RULE-PROPOSITION? (PROPOSITION)
  (CL:LET* ((TEST-VALUE-000 (%PROPOSITION.KIND PROPOSITION)))
   (CL:COND
    ((CL:OR (CL:EQ TEST-VALUE-000 KWD-GUI-SERVER-API-FORALL)
      (CL:EQ TEST-VALUE-000 KWD-GUI-SERVER-API-EXISTS)
      (CL:EQ TEST-VALUE-000 KWD-GUI-SERVER-API-IMPLIES))
     CL:T)
    (CL:T CL:NIL))))

;;; (DEFUN (SUBRELATION-RULE? BOOLEAN) ...)

(CL:DEFUN SUBRELATION-RULE? (RULE)
  (CL:AND (CL:EQ (%PROPOSITION.KIND RULE) KWD-GUI-SERVER-API-IMPLIES)
   (ISA?
    (CL:AREF
     (CL:THE CL:SIMPLE-VECTOR
      (%VECTOR.THE-ARRAY (%PROPOSITION.ARGUMENTS RULE)))
     0)
    SGT-GUI-SERVER-API-LOGIC-NAMED-DESCRIPTION)
   (ISA?
    (CL:AREF
     (CL:THE CL:SIMPLE-VECTOR
      (%VECTOR.THE-ARRAY (%PROPOSITION.ARGUMENTS RULE)))
     1)
    SGT-GUI-SERVER-API-LOGIC-NAMED-DESCRIPTION)))

;;; (DEFUN (GET-RELEVANT-RULES-FOR-RELATION (LIST OF PROPOSITION)) ...)

(CL:DEFUN GET-RELEVANT-RULES-FOR-RELATION (MODULENAME RELATIONNAME)
  "Get all the relevant rules for a given logic object."
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MODULENAME RELATIONNAME))
  #+MCL
  (CL:CHECK-TYPE MODULENAME CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE RELATIONNAME CL:SIMPLE-STRING)
  (CL:LET*
   ((MODULE (PLI::GET-MODULE MODULENAME NULL))
    (RELATION
     (PLI::S-GET-RELATION (GUI-NAME-TO-PL-NAME RELATIONNAME) MODULENAME
      NULL))
    (RULES (NEW-LIST)))
   (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*))
    (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
    (CL:LET*
     ((*CONTEXT* (GET-QUERY-CONTEXT))
      (*MODULE* (%CONTEXT.BASE-MODULE *CONTEXT*)))
     (CL:DECLARE (CL:SPECIAL *CONTEXT* *MODULE*))
     (CL:LET*
      ((RULE NULL) (ITER-000 (CALL-GET-RULES RELATION))
       (COLLECT-000 NULL))
      (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
       (CL:SETQ RULE (%%VALUE ITER-000))
       (CL:WHEN (CL:AND (TRUE? RULE) (CL:NOT (SUBRELATION-RULE? RULE)))
        (CL:IF (CL:EQ COLLECT-000 NULL)
         (CL:PROGN
          (CL:LET*
           ((TEMP-000
             (DYNAMIC-SLOT-VALUE (%PROPOSITION.DYNAMIC-SLOTS RULE)
              SYM-GUI-SERVER-API-LOGIC-MASTER-PROPOSITION NULL)))
           (CL:SETQ COLLECT-000
            (CONS (CL:IF (CL:NOT (CL:EQ TEMP-000 NULL)) TEMP-000 RULE)
             NIL)))
          (CL:IF (CL:EQ (%LIST.THE-CONS-LIST RULES) NIL)
           (CL:SETF (%LIST.THE-CONS-LIST RULES) COLLECT-000)
           (ADD-CONS-TO-END-OF-CONS-LIST (%LIST.THE-CONS-LIST RULES)
            COLLECT-000)))
         (CL:PROGN
          (CL:LET*
           ((TEMP-001
             (DYNAMIC-SLOT-VALUE (%PROPOSITION.DYNAMIC-SLOTS RULE)
              SYM-GUI-SERVER-API-LOGIC-MASTER-PROPOSITION NULL)))
           (CL:SETF (%%REST COLLECT-000)
            (CONS (CL:IF (CL:NOT (CL:EQ TEMP-001 NULL)) TEMP-001 RULE)
             NIL)))
          (CL:SETQ COLLECT-000 (%%REST COLLECT-000)))))
       (CL:SETQ ITER-000 (%%REST ITER-000))))
     (REMOVE-DUPLICATES RULES)
     (SORT RULES (CL:FUNCTION PROPOSITION-LESS-THAN?))))))

;;; (DEFUN (GET-PROPOSITIONS-FOR-INSTANCE-AND-RELATION (LIST OF PROPOSITION)) ...)

(CL:DEFUN GET-PROPOSITIONS-FOR-INSTANCE-AND-RELATION (MODULENAME INSTANCENAME RELATIONNAME)
  (CL:DECLARE
   (CL:TYPE CL:SIMPLE-STRING MODULENAME INSTANCENAME RELATIONNAME))
  #+MCL
  (CL:CHECK-TYPE MODULENAME CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE INSTANCENAME CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE RELATIONNAME CL:SIMPLE-STRING)
  (CL:LET*
   ((EXPRESSIONSTRING
     (CONCATENATE "(" (GUI-NAME-TO-PL-NAME RELATIONNAME) " "
      (GUI-NAME-TO-PL-NAME INSTANCENAME)))
    (RELATION
     (PLI::S-GET-RELATION (GUI-NAME-TO-PL-NAME RELATIONNAME) MODULENAME
      NULL))
    (ARITY (ARITY RELATION)) (RESULT (NEW-LIST)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING EXPRESSIONSTRING)
    (CL:TYPE CL:FIXNUM ARITY))
   (CL:LET*
    ((I NULL-INTEGER) (ITER-000 2) (UPPER-BOUND-000 ARITY)
     (UNBOUNDED?-000 (CL:= UPPER-BOUND-000 NULL-INTEGER)))
    (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-000 UPPER-BOUND-000))
    (CL:LOOP WHILE
     (CL:OR UNBOUNDED?-000 (CL:<= ITER-000 UPPER-BOUND-000)) DO
     (CL:SETQ I ITER-000) (CL:SETQ I I)
     (CL:SETQ EXPRESSIONSTRING (CONCATENATE EXPRESSIONSTRING " NULL"))
     (CL:SETQ ITER-000 (CL:1+ ITER-000))))
   (CL:SETQ EXPRESSIONSTRING (CONCATENATE EXPRESSIONSTRING ")"))
   (CL:LET*
    ((PROP NULL)
     (ITER-001
      (PLI::S-GET-PROPOSITIONS EXPRESSIONSTRING MODULENAME NULL))
     (COLLECT-000 NULL))
    (CL:LOOP WHILE (NEXT? ITER-001) DO
     (CL:SETQ PROP (PLI::%PL-ITERATOR.VALUE ITER-001))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN (CL:SETQ COLLECT-000 (CONS PROP NIL))
       (CL:IF (CL:EQ (%LIST.THE-CONS-LIST RESULT) NIL)
        (CL:SETF (%LIST.THE-CONS-LIST RESULT) COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST (%LIST.THE-CONS-LIST RESULT)
         COLLECT-000)))
      (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS PROP NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
   (SORT RESULT (CL:FUNCTION PROPOSITION-LESS-THAN?))))

;;; (DEFUN (EVALUATE-LOGIC-COMMAND-IN-MODULE STRING) ...)

(CL:DECLAIM
 (CL:FTYPE
  (CL:FUNCTION (CL:SIMPLE-STRING CL:SIMPLE-STRING CL:T)
   CL:SIMPLE-STRING)
  EVALUATE-LOGIC-COMMAND-IN-MODULE))
(CL:DEFUN EVALUATE-LOGIC-COMMAND-IN-MODULE (COMMAND MODULENAME FINALIZE?)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING COMMAND MODULENAME))
  #+MCL
  (CL:CHECK-TYPE COMMAND CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE MODULENAME CL:SIMPLE-STRING)
  (CL:LET*
   ((MODULE (GET-STELLA-MODULE MODULENAME CL:NIL)) (RESULT NULL))
   (CL:WHEN (CL:EQ MODULE NULL) (CL:SETQ MODULE *MODULE*))
   (CL:HANDLER-CASE
    (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*))
     (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
     (CL:SETQ *LAZY-SATELLITE-RULES?* CL:NIL)
     (CL:SETQ RESULT
      (EVALUATE-LOGIC-COMMAND
       (READ-S-EXPRESSION (NEW-INPUT-STRING-STREAM COMMAND))
       FINALIZE?))
     (CL:COND
      ((CL:EQ RESULT NULL)
       (CL:RETURN-FROM EVALUATE-LOGIC-COMMAND-IN-MODULE ""))
      ((STRING? RESULT)
       (CL:RETURN-FROM EVALUATE-LOGIC-COMMAND-IN-MODULE
        (%STRING-WRAPPER.WRAPPER-VALUE RESULT)))
      (CL:T
       (CL:LET*
        ((RESULTSTREAM (NEW-OUTPUT-STRING-STREAM))
         (NATIVESTREAM
          (%OUTPUT-STRING-STREAM.NATIVE-STREAM RESULTSTREAM)))
        (CL:LET* ((*PRINTREADABLY?* CL:T) (*PRINTPRETTY?* CL:T))
         (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?* *PRINTPRETTY?*))
         (CL:WHEN (USE-CL-CONSES?)
                         (CL:LET ((CL:*PRINT-PRETTY* CL:T))
                           (CL:PRIN1 result nativeStream)
                           (SETQ result NULL)))
         (CL:WHEN (CL:NOT (CL:EQ RESULT NULL))
          (%%PRINT-STREAM
           (%OUTPUT-STRING-STREAM.NATIVE-STREAM RESULTSTREAM) RESULT)))
        (CL:RETURN-FROM EVALUATE-LOGIC-COMMAND-IN-MODULE
         (THE-STRING-READER RESULTSTREAM))))))
    (CL:CONDITION (E) (CL:ERROR E)))))

;;; (DEFUN (IS-QUERY-PARTIAL? BOOLEAN) ...)

(CL:DEFUN IS-QUERY-PARTIAL? (PLQUERY)
  (CL:AND
   (CL:NOT (CL:EQ (|%PLQuery.MatchMode| PLQUERY) STELLA::NULL-STRING))
   (CL:NOT (STRING-EQL? (|%PLQuery.MatchMode| PLQUERY) "STRICT"))))

;;; (DEFUN (EVALUATE-QUERY-COMMAND-IN-MODULE CONS) ...)

(CL:DEFUN EVALUATE-QUERY-COMMAND-IN-MODULE (SESSION QUERY MODULENAME CONTINUATIONQUERY? PARTIALQUERY?)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING QUERY MODULENAME))
  #+MCL
  (CL:CHECK-TYPE QUERY CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE MODULENAME CL:SIMPLE-STRING)
  (CL:LET*
   ((MODULE (GET-STELLA-MODULE MODULENAME CL:NIL)) (QUERYTREE NIL)
    (QUERYITERATOR NULL) (TUPLE NIL) (RESULT NIL))
   (CL:WHEN (CL:EQ MODULE NULL) (CL:SETQ MODULE *MODULE*))
   (CL:HANDLER-CASE
    (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*))
     (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
     (CL:SETQ QUERYTREE (READ-S-EXPRESSION-FROM-STRING QUERY))
     (CL:IF (CL:EQ (%%VALUE QUERYTREE) SYM-GUI-SERVER-API-STELLA-ASK)
      (CL:PROGN
       (CL:SETQ QUERYITERATOR (CREATE-ASK-QUERY (%%REST QUERYTREE)))
       (INSERT-AT SESSION (WRAP-STRING "QueryIterator") QUERYITERATOR)
       (CL:IF PARTIALQUERY?
        (CL:SETQ RESULT
         (CONS (WRAP-FLOAT (CALL-ASK-PARTIAL QUERYITERATOR)) NIL))
        (CL:SETQ RESULT (CONS (CALL-ASK QUERYITERATOR) NIL)))
       (CL:RETURN-FROM EVALUATE-QUERY-COMMAND-IN-MODULE
        (CONS RESULT NIL)))
      (CL:PROGN
       (CL:IF CONTINUATIONQUERY?
        (CL:SETQ *MOST-RECENT-QUERY*
         (LOOKUP SESSION (WRAP-STRING "QueryIterator")))
        (CL:SETQ *MOST-RECENT-QUERY* NULL))
       (CL:SETQ QUERYITERATOR
        (CREATE-RETRIEVE-QUERY (%%REST QUERYTREE)))
       (INSERT-AT SESSION (WRAP-STRING "QueryIterator") QUERYITERATOR)
       (CL:IF PARTIALQUERY? (CALL-RETRIEVE-PARTIAL QUERYITERATOR)
        (CALL-RETRIEVE QUERYITERATOR))
       (CL:LET*
        ((SOLUTION NULL)
         (ITER-000
          (ALLOCATE-ITERATOR
           (%QUERY-ITERATOR.SOLUTIONS QUERYITERATOR)))
         (COLLECT-000 NULL))
        (CL:LOOP WHILE (NEXT? ITER-000) DO
         (CL:SETQ SOLUTION (%DICTIONARY-ITERATOR.VALUE ITER-000))
         (CL:SETQ TUPLE (CONSIFY (%QUERY-SOLUTION.BINDINGS SOLUTION)))
         (CL:WHEN PARTIALQUERY?
          (CONCATENATE TUPLE
           (CONS (WRAP-FLOAT (%QUERY-SOLUTION.MATCH-SCORE SOLUTION))
            NIL)))
         (CL:IF (CL:EQ COLLECT-000 NULL)
          (CL:PROGN (CL:SETQ COLLECT-000 (CONS TUPLE NIL))
           (CL:IF (CL:EQ RESULT NIL) (CL:SETQ RESULT COLLECT-000)
            (ADD-CONS-TO-END-OF-CONS-LIST RESULT COLLECT-000)))
          (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS TUPLE NIL))
           (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
       (CL:RETURN-FROM EVALUATE-QUERY-COMMAND-IN-MODULE RESULT))))
    (CL:CONDITION (E) (CL:ERROR E)))))

;;; (DEFUN (GET-PROPOSITION-STRING STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T CL:T) CL:SIMPLE-STRING)
  GET-PROPOSITION-STRING))
(CL:DEFUN GET-PROPOSITION-STRING (PROP MODULE)
  (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:LET* ((SS (NEW-OUTPUT-STRING-STREAM)))
    (CL:LET*
     ((*PRINTMODE* KWD-GUI-SERVER-API-ORIGINAL)
      (*PRINTLOGICALFORMSTREAM* SS) (*PRINTREADABLY?* CL:T))
     (CL:DECLARE
      (CL:SPECIAL *PRINTMODE* *PRINTLOGICALFORMSTREAM*
       *PRINTREADABLY?*))
     (PRETTY-PRINT-LOGICAL-FORM PROP SS))
    (XMLIFY-FORMATTED-STRING (THE-STRING-READER SS)))))

;;; (DEFUN (GET-TRUTH-VALUE-STRING STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T) CL:SIMPLE-STRING)
  GET-TRUTH-VALUE-STRING))
(CL:DEFUN GET-TRUTH-VALUE-STRING (TV)
  (CL:LET* ((SS (NEW-OUTPUT-STRING-STREAM))) (PRINT-TRUTH-VALUE TV SS)
   (THE-STRING-READER SS)))

;;; (DEFUN (XMLIFY-STRING STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:SIMPLE-STRING) CL:SIMPLE-STRING)
  XMLIFY-STRING))
(CL:DEFUN XMLIFY-STRING (INSTRING)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING INSTRING))
  #+MCL
  (CL:CHECK-TYPE INSTRING CL:SIMPLE-STRING)
  (COMPACT-WHITESPACE (STRIP-NEWLINES INSTRING)))

;;; (DEFUN (XMLIFY-FORMATTED-STRING STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:SIMPLE-STRING) CL:SIMPLE-STRING)
  XMLIFY-FORMATTED-STRING))
(CL:DEFUN XMLIFY-FORMATTED-STRING (INSTRING)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING INSTRING))
  #+MCL
  (CL:CHECK-TYPE INSTRING CL:SIMPLE-STRING)
  INSTRING)

;;; (DEFUN (GET-STRINGIFIED-MODULE STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T) CL:SIMPLE-STRING)
  GET-STRINGIFIED-MODULE))
(CL:DEFUN GET-STRINGIFIED-MODULE (MODULE)
  (CL:LET*
   ((MODULENAME (%MODULE.MODULE-NAME MODULE))
    (PARENTS (%MODULE.PARENT-MODULES MODULE))
    (USES (%MODULE.USES MODULE))
    (DOCUMENTATION (%MODULE.DOCUMENTATION MODULE)) (PARENTSTRINGS "")
    (USESSTRINGS "") (RESULT STELLA::NULL-STRING))
   (CL:DECLARE
    (CL:TYPE CL:SIMPLE-STRING MODULENAME DOCUMENTATION PARENTSTRINGS
     USESSTRINGS RESULT))
   (CL:LET* ((PARENT NULL) (ITER-000 (%LIST.THE-CONS-LIST PARENTS)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ PARENT (%%VALUE ITER-000))
     (CL:SETQ PARENTSTRINGS
      (CONCATENATE PARENTSTRINGS " "
       (%MODULE.MODULE-FULL-NAME PARENT)))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:LET* ((USE NULL) (ITER-001 (%LIST.THE-CONS-LIST USES)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
     (CL:SETQ USE (%%VALUE ITER-001))
     (CL:SETQ USESSTRINGS
      (CONCATENATE USESSTRINGS " " (%MODULE.MODULE-NAME USE)))
     (CL:SETQ ITER-001 (%%REST ITER-001))))
   (CL:SETQ RESULT
    (CONCATENATE "(defmodule " MODULENAME " :includes (" PARENTSTRINGS
     ") :uses (" USESSTRINGS ") "))
   (CL:WHEN (CL:NOT (CL:EQ DOCUMENTATION STELLA::NULL-STRING))
    (CL:SETQ RESULT
     (CONCATENATE RESULT ":documentation \"" DOCUMENTATION "\"")))
   (CL:SETQ RESULT (CONCATENATE RESULT ")")) RESULT))

;;; (DEFUN (REPLACE-CHOKABLE-CHARS-WITH-ENTITIES STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:SIMPLE-STRING) CL:SIMPLE-STRING)
  REPLACE-CHOKABLE-CHARS-WITH-ENTITIES))
(CL:DEFUN REPLACE-CHOKABLE-CHARS-WITH-ENTITIES (INSTRING)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING INSTRING))
  #+MCL
  (CL:CHECK-TYPE INSTRING CL:SIMPLE-STRING)
  (CL:LET* ((SS (NEW-OUTPUT-STRING-STREAM)))
   (WRITE-HTML-QUOTING-CHOKABLE-CHARACTERS
    (%OUTPUT-STRING-STREAM.NATIVE-STREAM SS) INSTRING)
   (THE-STRING-READER SS)))

;;; (DEFUN WRITE-HTML-CHARACTER-QUOTING-CHOKABLE-CHARACTERS ...)

(CL:DEFUN WRITE-HTML-CHARACTER-QUOTING-CHOKABLE-CHARACTERS (STREAM CH)
  (CL:IF
   (CL:OR (CL:= (CL:THE CL:FIXNUM (CL:CHAR-CODE CH)) 10)
    (CL:> (CL:THE CL:FIXNUM (CL:CHAR-CODE CH)) 127))
   (%%PRINT-STREAM STREAM "&#" (CL:THE CL:FIXNUM (CL:CHAR-CODE CH))
    ";")
   (WRITE-HTML-CHARACTER-QUOTING-SPECIAL-CHARACTERS STREAM CH)))

;;; (DEFUN WRITE-HTML-QUOTING-CHOKABLE-CHARACTERS ...)

(CL:DEFUN WRITE-HTML-QUOTING-CHOKABLE-CHARACTERS (STREAM INPUT)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING INPUT))
  #+MCL
  (CL:CHECK-TYPE INPUT CL:SIMPLE-STRING)
  (CL:LET*
   ((CH NULL-CHARACTER) (VECTOR-000 INPUT) (INDEX-000 0)
    (LENGTH-000 (CL:THE CL:FIXNUM (CL:LENGTH VECTOR-000))))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING VECTOR-000)
    (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
   (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
    (CL:SETQ CH
     (CL:LET ((SELF VECTOR-000) (POSITION INDEX-000))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
       (CL:THE CL:FIXNUM POSITION))))
    (WRITE-HTML-CHARACTER-QUOTING-CHOKABLE-CHARACTERS STREAM CH)
    (CL:SETQ INDEX-000 (CL:1+ INDEX-000))))
  NULL)

;;; (DEFUN (COMPACT-WHITESPACE STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:SIMPLE-STRING) CL:SIMPLE-STRING)
  COMPACT-WHITESPACE))
(CL:DEFUN COMPACT-WHITESPACE (INSTRING)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING INSTRING))
  #+MCL
  (CL:CHECK-TYPE INSTRING CL:SIMPLE-STRING)
  (CL:LET*
   ((COUNT 0) (LENGTH (CL:THE CL:FIXNUM (CL:LENGTH INSTRING)))
    (CURSOR 0) (NEWCURSOR 0) (RESULT STELLA::NULL-STRING))
   (CL:DECLARE (CL:TYPE CL:FIXNUM COUNT LENGTH CURSOR NEWCURSOR)
    (CL:TYPE CL:SIMPLE-STRING RESULT))
   (CL:WHEN (CL:= LENGTH 0) (CL:RETURN-FROM COMPACT-WHITESPACE ""))
   (CL:LOOP
    (CL:WHEN
     (CL:AND (CL:> CURSOR 0)
      (STRING-EQL?
       (MAKE-STRING 1
        (CL:LET ((SELF INSTRING) (POSITION CURSOR))
         (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
          (CL:TYPE CL:FIXNUM POSITION))
         (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
          (CL:THE CL:FIXNUM POSITION))))
       " ")
      (STRING-EQL?
       (MAKE-STRING 1
        (CL:LET ((SELF INSTRING) (POSITION (CL:1- CURSOR)))
         (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
          (CL:TYPE CL:FIXNUM POSITION))
         (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
          (CL:THE CL:FIXNUM POSITION))))
       " "))
     (CL:SETQ COUNT (CL:1+ COUNT)))
    (CL:WHEN (CL:= CURSOR (CL:1- LENGTH)) (CL:RETURN))
    (CL:SETQ CURSOR (CL:1+ CURSOR)))
   (CL:SETQ RESULT (MAKE-RAW-MUTABLE-STRING (CL:- LENGTH COUNT)))
   (CL:SETQ CURSOR 0)
   (CL:LOOP
    (CL:WHEN
     (CL:NOT
      (CL:AND (CL:> CURSOR 0)
       (STRING-EQL?
        (MAKE-STRING 1
         (CL:LET ((SELF INSTRING) (POSITION CURSOR))
          (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
           (CL:TYPE CL:FIXNUM POSITION))
          (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
           (CL:THE CL:FIXNUM POSITION))))
        " ")
       (STRING-EQL?
        (MAKE-STRING 1
         (CL:LET ((SELF INSTRING) (POSITION (CL:1- CURSOR)))
          (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
           (CL:TYPE CL:FIXNUM POSITION))
          (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
           (CL:THE CL:FIXNUM POSITION))))
        " ")))
     (CL:LET
      ((SELF RESULT)
       (CH
        (CL:LET ((SELF INSTRING) (POSITION CURSOR))
         (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
          (CL:TYPE CL:FIXNUM POSITION))
         (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
          (CL:THE CL:FIXNUM POSITION))))
       (POSITION NEWCURSOR))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (SETF
       (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
        (CL:THE CL:FIXNUM POSITION))
       (CL:THE CL:CHARACTER CH)))
     (CL:SETQ NEWCURSOR (CL:1+ NEWCURSOR)))
    (CL:WHEN (CL:= CURSOR (CL:1- LENGTH)) (CL:RETURN))
    (CL:SETQ CURSOR (CL:1+ CURSOR)))
   (CL:LET ((S RESULT)) (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING S))
    (CL:THE CL:SIMPLE-STRING S))))

;;; (DEFUN (STRIP-NEWLINES STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:SIMPLE-STRING) CL:SIMPLE-STRING)
  STRIP-NEWLINES))
(CL:DEFUN STRIP-NEWLINES (INSTRING)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING INSTRING))
  #+MCL
  (CL:CHECK-TYPE INSTRING CL:SIMPLE-STRING)
  (REPLACE-SUBSTRINGS INSTRING " " (MAKE-STRING 1 #\Linefeed)))

;;; (DEFUN (STRIP-MODULE STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:SIMPLE-STRING CL:T) CL:SIMPLE-STRING)
  STRIP-MODULE))
(CL:DEFUN STRIP-MODULE (INSTRING MODULE)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING INSTRING))
  #+MCL
  (CL:CHECK-TYPE INSTRING CL:SIMPLE-STRING)
  (CL:LET*
   ((MODNAME (CONCATENATE (%MODULE.MODULE-FULL-NAME MODULE) "/")))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MODNAME))
   (REPLACE-SUBSTRINGS INSTRING "" MODNAME)))

;;; (DEFUN (REPLACE-DOUBLE-QUOTES-WITH-SINGLE-QUOTES STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:SIMPLE-STRING) CL:SIMPLE-STRING)
  REPLACE-DOUBLE-QUOTES-WITH-SINGLE-QUOTES))
(CL:DEFUN REPLACE-DOUBLE-QUOTES-WITH-SINGLE-QUOTES (INSTRING)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING INSTRING))
  #+MCL
  (CL:CHECK-TYPE INSTRING CL:SIMPLE-STRING)
  (REPLACE-SUBSTRINGS INSTRING "'" "\""))

;;; (DEFGLOBAL *KB-FILENAME-INDEX* ...)

(CL:DEFVAR *KB-FILENAME-INDEX* "PL:kbs;kbs.ste")
(CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING *KB-FILENAME-INDEX*))

;;; (DEFGLOBAL *KB-DIRECTORY* ...)

(CL:DEFVAR *KB-DIRECTORY* "PL:kbs;")
(CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING *KB-DIRECTORY*))

;;; (DEFUN (LOAD-INDEX-FILE (CONS OF (CONS OF STRING-WRAPPER))) ...)

(CL:DEFUN LOAD-INDEX-FILE ()
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
   "Loading index " *KB-FILENAME-INDEX* "..." EOL)
  (CL:LET*
   ((INSTREAM (NEW-INPUT-FILE-STREAM *KB-FILENAME-INDEX*))
    (STREAMITER (S-EXPRESSIONS INSTREAM)))
   (CL:LET* ((SEXP NULL) (ITER-000 STREAMITER))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ SEXP (%S-EXPRESSION-ITERATOR.VALUE ITER-000))
     (CL:RETURN-FROM LOAD-INDEX-FILE SEXP)))
   NIL))

;;; (DEFUN SAVE-INDEX-FILE ...)

(CL:DEFUN SAVE-INDEX-FILE (INDEX)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
   "Saving index " *KB-FILENAME-INDEX* "..." EOL)
  (CL:LET* ((OUTSTREAM (NEW-OUTPUT-FILE-STREAM *KB-FILENAME-INDEX*)))
   (%%PRINT-STREAM (%OUTPUT-FILE-STREAM.NATIVE-STREAM OUTSTREAM) "("
    EOL)
   (CL:LET* ((TUPLE NULL) (ITER-000 INDEX))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ TUPLE (%%VALUE ITER-000))
     (%%PRINT-STREAM (%OUTPUT-FILE-STREAM.NATIVE-STREAM OUTSTREAM)
      "  (\"" (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE TUPLE)) "\" \""
      (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE (%%REST TUPLE))) "\" \""
      (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE (%%REST (%%REST TUPLE))))
      "\" \"" (%STRING-WRAPPER.WRAPPER-VALUE (FOURTH TUPLE)) "\")" EOL)
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (%%PRINT-STREAM (%OUTPUT-FILE-STREAM.NATIVE-STREAM OUTSTREAM) ")"
    EOL)
   (CLOSE-STREAM OUTSTREAM)))

;;; (DEFUN (MAKE-PL-FILE |PLModuleFile|) ...)

(CL:DEFUN MAKE-PL-FILE (FILEDESCRIPTION)
  (CL:LET*
   ((KB (%%VALUE FILEDESCRIPTION))
    (MODULENAME (%%VALUE (%%REST FILEDESCRIPTION)))
    (FILENAME (%%VALUE (%%REST (%%REST FILEDESCRIPTION))))
    (DESCRIPTION (FOURTH FILEDESCRIPTION))
    (PLFILE (|new-PLModuleFile|)))
   (CL:SETF (|%PLModuleFile.ModuleName| PLFILE)
    (%STRING-WRAPPER.WRAPPER-VALUE MODULENAME))
   (CL:SETF (|%PLModuleFile.FileName| PLFILE)
    (%STRING-WRAPPER.WRAPPER-VALUE FILENAME))
   (CL:SETF (|%PLModuleFile.KBName| PLFILE)
    (%STRING-WRAPPER.WRAPPER-VALUE KB))
   (CL:SETF (|%PLModuleFile.KBDescription| PLFILE)
    (%STRING-WRAPPER.WRAPPER-VALUE DESCRIPTION))
   PLFILE))

;;; (DEFUN (FIND-FILENAME-FOR-KB STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T CL:SIMPLE-STRING) CL:SIMPLE-STRING)
  FIND-FILENAME-FOR-KB))
(CL:DEFUN FIND-FILENAME-FOR-KB (FILEINDEX KBNAME)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING KBNAME))
  #+MCL
  (CL:CHECK-TYPE KBNAME CL:SIMPLE-STRING)
  (CL:LET*
   ((PLFILE NULL)
    (ITER-000
     (%LIST.THE-CONS-LIST
      (|%PLModuleFileList.PLModuleFile| FILEINDEX))))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ PLFILE (%%VALUE ITER-000))
    (CL:WHEN
     (STRING-EQL? (STRING-DOWNCASE KBNAME)
      (STRING-DOWNCASE (|%PLModuleFile.KBName| PLFILE)))
     (CL:RETURN-FROM FIND-FILENAME-FOR-KB
      (|%PLModuleFile.FileName| PLFILE)))
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  STELLA::NULL-STRING)

;;; (DEFUN (PARSE-MATCH-STRING (CONS OF OBJECT)) ...)

(CL:DEFUN PARSE-MATCH-STRING (MATCHSTRING CASESENSITIVE?)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MATCHSTRING CASESENSITIVE?))
  #+MCL
  (CL:CHECK-TYPE MATCHSTRING CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE CASESENSITIVE? CL:SIMPLE-STRING)
  (CL:LET*
   ((RESULT NIL) (WILDCARDPOS 0) (CURSOR 0) (WILDCARD "*")
    (FRAGMENT STELLA::NULL-STRING))
   (CL:DECLARE (CL:TYPE CL:FIXNUM WILDCARDPOS CURSOR)
    (CL:TYPE CL:SIMPLE-STRING WILDCARD FRAGMENT))
   (CL:LOOP WHILE
    (CL:NOT
     (CL:=
      (CL:SETQ WILDCARDPOS (STRING-SEARCH MATCHSTRING WILDCARD CURSOR))
      NULL-INTEGER))
    DO
    (CL:WHEN (CL:> WILDCARDPOS CURSOR)
     (CL:SETQ FRAGMENT (SUBSEQUENCE MATCHSTRING CURSOR WILDCARDPOS))
     (CL:WHEN (STRING-EQL? CASESENSITIVE? "FALSE")
      (CL:SETQ FRAGMENT (STRING-DOWNCASE FRAGMENT)))
     (CL:SETQ RESULT (CONS (WRAP-STRING FRAGMENT) RESULT)))
    (CL:SETQ RESULT (CONS SYM-GUI-SERVER-API-GUI-SERVER-WILD RESULT))
    (CL:SETQ CURSOR (CL:1+ WILDCARDPOS)))
   (CL:WHEN (CL:< CURSOR (CL:THE CL:FIXNUM (CL:LENGTH MATCHSTRING)))
    (CL:SETQ FRAGMENT
     (SUBSEQUENCE MATCHSTRING CURSOR
      (CL:THE CL:FIXNUM (CL:LENGTH MATCHSTRING))))
    (CL:SETQ RESULT (CONS (WRAP-STRING FRAGMENT) RESULT)))
   (REVERSE RESULT)))

;;; (DEFUN (SEARCH-STRING-MATCH? BOOLEAN) ...)

(CL:DEFUN SEARCH-STRING-MATCH? (INPUTSTRING MATCHLIST)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING INPUTSTRING))
  #+MCL
  (CL:CHECK-TYPE INPUTSTRING CL:SIMPLE-STRING)
  (CL:WHEN (CL:EQ MATCHLIST NIL)
   (CL:IF (CL:= (CL:THE CL:FIXNUM (CL:LENGTH INPUTSTRING)) 0)
    (CL:RETURN-FROM SEARCH-STRING-MATCH? CL:T)
    (CL:RETURN-FROM SEARCH-STRING-MATCH? CL:NIL)))
  (CL:IF (SYMBOL? (%%VALUE MATCHLIST))
   (CL:LET*
    ((FIRSTNONWILD (GET-FIRST-NON-WILD MATCHLIST)) (MATCHPOS 0)
     (RESTOFINPUT STELLA::NULL-STRING))
    (CL:DECLARE (CL:TYPE CL:FIXNUM MATCHPOS)
     (CL:TYPE CL:SIMPLE-STRING RESTOFINPUT))
    (CL:WHEN (CL:EQ FIRSTNONWILD NULL)
     (CL:RETURN-FROM SEARCH-STRING-MATCH? CL:T))
    (CL:WHEN
     (CL:NOT
      (CL:=
       (CL:SETQ MATCHPOS
        (STRING-SEARCH INPUTSTRING
         (%STRING-WRAPPER.WRAPPER-VALUE FIRSTNONWILD) 0))
       NULL-INTEGER))
     (CL:SETQ RESTOFINPUT
      (SUBSEQUENCE INPUTSTRING
       (CL:+ MATCHPOS
        (CL:THE CL:FIXNUM
         (CL:LENGTH
          (CL:THE CL:SIMPLE-STRING
           (%STRING-WRAPPER.WRAPPER-VALUE FIRSTNONWILD)))))
       (CL:THE CL:FIXNUM (CL:LENGTH INPUTSTRING))))
     (CL:RETURN-FROM SEARCH-STRING-MATCH?
      (SEARCH-STRING-MATCH? RESTOFINPUT
       (GET-REST-AFTER-FIRST-NON-WILD MATCHLIST))))
    CL:NIL)
   (CL:LET* ((FRAGMENT (%%VALUE MATCHLIST)))
    (CL:IF
     (CL:>
      (CL:THE CL:FIXNUM
       (CL:LENGTH
        (CL:THE CL:SIMPLE-STRING
         (%STRING-WRAPPER.WRAPPER-VALUE FRAGMENT))))
      (CL:THE CL:FIXNUM (CL:LENGTH INPUTSTRING)))
     CL:NIL
     (CL:LET*
      ((INPUTSTART
        (SUBSEQUENCE INPUTSTRING 0
         (CL:THE CL:FIXNUM
          (CL:LENGTH
           (CL:THE CL:SIMPLE-STRING
            (%STRING-WRAPPER.WRAPPER-VALUE FRAGMENT))))))
       (RESTOFINPUT
        (SUBSEQUENCE INPUTSTRING
         (CL:THE CL:FIXNUM
          (CL:LENGTH
           (CL:THE CL:SIMPLE-STRING
            (%STRING-WRAPPER.WRAPPER-VALUE FRAGMENT))))
         (CL:THE CL:FIXNUM (CL:LENGTH INPUTSTRING)))))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING INPUTSTART RESTOFINPUT))
      (CL:AND
       (STRING-EQL? (%STRING-WRAPPER.WRAPPER-VALUE FRAGMENT)
        INPUTSTART)
       (SEARCH-STRING-MATCH? RESTOFINPUT (%%REST MATCHLIST))))))))

;;; (DEFUN (GET-FIRST-NON-WILD STRING-WRAPPER) ...)

(CL:DEFUN GET-FIRST-NON-WILD (MATCHLIST)
  (CL:LET* ((CANDIDATE NULL) (ITER-000 MATCHLIST))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ CANDIDATE (%%VALUE ITER-000))
    (CL:WHEN (STRING? CANDIDATE)
     (CL:RETURN-FROM GET-FIRST-NON-WILD CANDIDATE))
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  NULL)

;;; (DEFUN (GET-REST-AFTER-FIRST-NON-WILD (CONS OF OBJECT)) ...)

(CL:DEFUN GET-REST-AFTER-FIRST-NON-WILD (MATCHLIST)
  (CL:LOOP WHILE (CL:NOT (CL:EQ MATCHLIST NULL)) DO
   (CL:WHEN (STRING? (%%VALUE MATCHLIST))
    (CL:RETURN-FROM GET-REST-AFTER-FIRST-NON-WILD (%%REST MATCHLIST)))
   (CL:SETQ MATCHLIST (%%REST MATCHLIST)))
  NULL)

;;; (DEFUN (SEARCH-LOGIC-OBJECTS (LIST OF |PLSearchResultItem|)) ...)

(CL:DEFUN SEARCH-LOGIC-OBJECTS (MODULENAME OBJECTS MATCHLIST CASESENSITIVE?)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MODULENAME CASESENSITIVE?))
  #+MCL
  (CL:CHECK-TYPE MODULENAME CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE CASESENSITIVE? CL:SIMPLE-STRING)
  (CL:LET* ((RESULT (NEW-LIST)))
   (CL:LET*
    ((OBJECT NULL) (ITER-000 (%LIST.THE-CONS-LIST OBJECTS))
     (COLLECT-000 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ OBJECT (%%VALUE ITER-000))
     (CL:WHEN
      (SEARCH-STRING-MATCH?
       (GET-LOGIC-OBJECT-NAME OBJECT CASESENSITIVE?) MATCHLIST)
      (CL:IF (CL:EQ COLLECT-000 NULL)
       (CL:PROGN
        (CL:SETQ COLLECT-000
         (CONS (MAKE-SEARCH-RESULT-ITEM MODULENAME OBJECT) NIL))
        (CL:IF (CL:EQ (%LIST.THE-CONS-LIST RESULT) NIL)
         (CL:SETF (%LIST.THE-CONS-LIST RESULT) COLLECT-000)
         (ADD-CONS-TO-END-OF-CONS-LIST (%LIST.THE-CONS-LIST RESULT)
          COLLECT-000)))
       (CL:PROGN
        (CL:SETF (%%REST COLLECT-000)
         (CONS (MAKE-SEARCH-RESULT-ITEM MODULENAME OBJECT) NIL))
        (CL:SETQ COLLECT-000 (%%REST COLLECT-000)))))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   RESULT))

;;; (DEFUN (GET-LOGIC-OBJECT-NAME STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T CL:SIMPLE-STRING) CL:SIMPLE-STRING)
  GET-LOGIC-OBJECT-NAME))
(CL:DEFUN GET-LOGIC-OBJECT-NAME (OBJECT CASESENSITIVE?)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING CASESENSITIVE?))
  #+MCL
  (CL:CHECK-TYPE CASESENSITIVE? CL:SIMPLE-STRING)
  (CL:LET* ((NAME (OBJECT-NAME-STRING OBJECT)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING NAME))
   (CL:IF (STRING-EQL? CASESENSITIVE? "TRUE") NAME
    (STRING-DOWNCASE NAME))))

;;; (DEFUN (SEARCH-CONCEPTS (LIST OF |PLSearchResultItem|)) ...)

(CL:DEFUN SEARCH-CONCEPTS (MODULENAME MATCHLIST CASESENSITIVE?)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MODULENAME CASESENSITIVE?))
  #+MCL
  (CL:CHECK-TYPE MODULENAME CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE CASESENSITIVE? CL:SIMPLE-STRING)
  (CL:LET* ((MODULE (PLI::GET-MODULE MODULENAME NULL)))
   (SEARCH-LOGIC-OBJECTS MODULENAME (GET-ALL-CONCEPTS MODULE CL:T)
    MATCHLIST CASESENSITIVE?)))

;;; (DEFUN (SEARCH-RELATIONS (LIST OF |PLSearchResultItem|)) ...)

(CL:DEFUN SEARCH-RELATIONS (MODULENAME MATCHLIST CASESENSITIVE?)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MODULENAME CASESENSITIVE?))
  #+MCL
  (CL:CHECK-TYPE MODULENAME CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE CASESENSITIVE? CL:SIMPLE-STRING)
  (CL:LET* ((MODULE (PLI::GET-MODULE MODULENAME NULL)))
   (SEARCH-LOGIC-OBJECTS MODULENAME (GET-ALL-RELATIONS MODULE)
    MATCHLIST CASESENSITIVE?)))

;;; (DEFUN (SEARCH-INSTANCES (LIST OF |PLSearchResultItem|)) ...)

(CL:DEFUN SEARCH-INSTANCES (MODULENAME MATCHLIST CASESENSITIVE?)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MODULENAME CASESENSITIVE?))
  #+MCL
  (CL:CHECK-TYPE MODULENAME CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE CASESENSITIVE? CL:SIMPLE-STRING)
  (CL:LET*
   ((MODULE (PLI::GET-MODULE MODULENAME NULL))
    (ALLINSTANCES (ALL-INSTANCES MODULE CL:T))
    (NONSKOLEMINSTANCES (NEW-LIST)))
   (CL:LET*
    ((INSTANCE NULL) (ITER-000 ALLINSTANCES) (COLLECT-000 NULL))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ INSTANCE (%ITERATOR.VALUE ITER-000))
     (CL:WHEN (CL:NOT (SKOLEM? INSTANCE))
      (CL:IF (CL:EQ COLLECT-000 NULL)
       (CL:PROGN (CL:SETQ COLLECT-000 (CONS INSTANCE NIL))
        (CL:IF (CL:EQ (%LIST.THE-CONS-LIST NONSKOLEMINSTANCES) NIL)
         (CL:SETF (%LIST.THE-CONS-LIST NONSKOLEMINSTANCES) COLLECT-000)
         (ADD-CONS-TO-END-OF-CONS-LIST
          (%LIST.THE-CONS-LIST NONSKOLEMINSTANCES) COLLECT-000)))
       (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS INSTANCE NIL))
        (CL:SETQ COLLECT-000 (%%REST COLLECT-000)))))))
   (SEARCH-LOGIC-OBJECTS MODULENAME NONSKOLEMINSTANCES MATCHLIST
    CASESENSITIVE?)))

;;; (DEFUN (SEARCH-ALL-MODULES (LIST OF |PLSearchResultItem|)) ...)

(CL:DEFUN SEARCH-ALL-MODULES (SEARCHSTRING SEARCHINSTANCE? SEARCHCONCEPT? SEARCHRELATION? CASESENSITIVE?)
  (CL:DECLARE
   (CL:TYPE CL:SIMPLE-STRING SEARCHSTRING SEARCHINSTANCE?
    SEARCHCONCEPT? SEARCHRELATION? CASESENSITIVE?))
  #+MCL
  (CL:CHECK-TYPE SEARCHSTRING CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE SEARCHINSTANCE? CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE SEARCHCONCEPT? CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE SEARCHRELATION? CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE CASESENSITIVE? CL:SIMPLE-STRING)
  (CL:LET*
   ((ROOTMODULE *ROOT-MODULE*)
    (ALLMODULES (COLLECT-ALL-MODULES ROOTMODULE (NEW-LIST)))
    (RESULT (NEW-LIST)))
   (CL:LET* ((MODULE NULL) (ITER-000 (%LIST.THE-CONS-LIST ALLMODULES)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ MODULE (%%VALUE ITER-000))
     (CONCATENATE RESULT
      (SEARCH-MODULE (%MODULE.MODULE-NAME MODULE) SEARCHSTRING
       SEARCHINSTANCE? SEARCHCONCEPT? SEARCHRELATION? CASESENSITIVE?))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   RESULT))

;;; (DEFUN (SEARCH-MODULE (LIST OF |PLSearchResultItem|)) ...)

(CL:DEFUN SEARCH-MODULE (MODULENAME SEARCHSTRING SEARCHINSTANCE? SEARCHCONCEPT? SEARCHRELATION? CASESENSITIVE?)
  (CL:DECLARE
   (CL:TYPE CL:SIMPLE-STRING MODULENAME SEARCHSTRING SEARCHINSTANCE?
    SEARCHCONCEPT? SEARCHRELATION? CASESENSITIVE?))
  #+MCL
  (CL:CHECK-TYPE MODULENAME CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE SEARCHSTRING CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE SEARCHINSTANCE? CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE SEARCHCONCEPT? CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE SEARCHRELATION? CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE CASESENSITIVE? CL:SIMPLE-STRING)
  (CL:LET*
   ((CONCEPTRESULTS (NEW-LIST)) (RELATIONRESULTS (NEW-LIST))
    (INSTANCERESULTS (NEW-LIST))
    (MATCHLIST (PARSE-MATCH-STRING SEARCHSTRING CASESENSITIVE?))
    (RESULT (NEW-LIST)) (MODULE (PLI::GET-MODULE MODULENAME NULL)))
   (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*))
    (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
    (CL:WHEN (STRING-EQL? SEARCHINSTANCE? "TRUE")
     (CL:SETQ INSTANCERESULTS
      (SEARCH-INSTANCES MODULENAME MATCHLIST CASESENSITIVE?)))
    (CL:WHEN (STRING-EQL? SEARCHRELATION? "TRUE")
     (CL:SETQ RELATIONRESULTS
      (SEARCH-RELATIONS MODULENAME MATCHLIST CASESENSITIVE?)))
    (CL:WHEN (STRING-EQL? SEARCHCONCEPT? "TRUE")
     (CL:SETQ CONCEPTRESULTS
      (SEARCH-CONCEPTS MODULENAME MATCHLIST CASESENSITIVE?)))
    (CL:SETQ RESULT
     (CONCATENATE CONCEPTRESULTS INSTANCERESULTS RELATIONRESULTS))
    RESULT)))

;;; (DEFUN (MAKE-SEARCH-RESULT-ITEM |PLSearchResultItem|) ...)

(CL:DEFUN MAKE-SEARCH-RESULT-ITEM (MODULENAME OBJECT)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MODULENAME))
  #+MCL
  (CL:CHECK-TYPE MODULENAME CL:SIMPLE-STRING)
  (CL:LET*
   ((UNION (MAKE-PL-OBJECT-UNION OBJECT))
    (RESULT (|new-PLSearchResultItem|)))
   (CL:SETF (|%PLSearchResultItem.ModuleName| RESULT) MODULENAME)
   (CL:SETF (|%PLSearchResultItem.PLObjectUnion| RESULT) UNION) RESULT))

;;; (DEFGLOBAL *DEFAULT-KB-DIRECTORY* ...)

(CL:DEFVAR *DEFAULT-KB-DIRECTORY* "/nfs/topaz/melz/")
(CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING *DEFAULT-KB-DIRECTORY*))

;;; (DEFUN (GET-DIRECTORY-LISTING (LIST OF LIST)) ...)

(CL:DEFUN GET-DIRECTORY-LISTING (CURRENTDIRECTORY)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING CURRENTDIRECTORY))
  #+MCL
  (CL:CHECK-TYPE CURRENTDIRECTORY CL:SIMPLE-STRING)
  (CL:LET*
   ((FILESINDIR (NEW-LIST)) (DIRSINDIR (NEW-LIST)) (RESULT (NEW-LIST)))
   		  (cl:LET ((dirListing (cl:directory currentDirectory)))
			  (cl:loop for file in dirListing 
				   do 
                               (cl:let ((wrapper (STELLA::NEW-STRING-WRAPPER 
                                           (cl:subseq (cl:namestring file) 
                                                      (cl:1+ (cl:position (cl:character "/") 
                                                                    (cl:namestring file)
                                                                    :from-end cl:t)))))
                                        (directoryP (cl:probe-file 
                                                      (cl:concatenate (cl:quote cl:string) 
                                                                (cl:namestring file) "/"))))
                                   (cl:if directoryP
                                       (STELLA::INSERT dirsInDir wrapper)
                                       (STELLA::INSERT filesInDir wrapper)))))
   (INSERT RESULT DIRSINDIR) (INSERT RESULT FILESINDIR) RESULT))

;;; (DEFUN (SERVER-GET-DIRECTORY-LISTING |PLDirectoryContents|) ...)

(CL:DEFUN SERVER-GET-DIRECTORY-LISTING (CURRENTDIRECTORY EXTENSIONFILTER)
  "Return the files and directories in 'currentDirectory'."
  (CL:LET*
   ((DIRECTORYLISTING
     (GET-DIRECTORY-LISTING (|%PLString.Value| CURRENTDIRECTORY)))
    (PLDIRECTORYLISTING (|new-PLDirectoryContents|))
    (PLFILES (NEW-LIST)) (PLDIRECTORIES (NEW-LIST))
    (MATCHLIST
     (PARSE-MATCH-STRING (|%PLString.Value| EXTENSIONFILTER) "FALSE")))
   (CL:SETF (|%PLDirectoryContents.DirectoryName| PLDIRECTORYLISTING)
    (|%PLString.Value| CURRENTDIRECTORY))
   (CL:LET*
    ((FILENAME NULL)
     (ITER-000 (%LIST.THE-CONS-LIST (FIRST DIRECTORYLISTING))))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ FILENAME (%%VALUE ITER-000))
     (CL:WHEN
      (SEARCH-STRING-MATCH? (%STRING-WRAPPER.WRAPPER-VALUE FILENAME)
       MATCHLIST)
      (CL:LET* ((PLFILE (|new-PLFile|)))
       (CL:SETF (|%PLFile.FileName| PLFILE)
        (%STRING-WRAPPER.WRAPPER-VALUE FILENAME))
       (INSERT PLFILES PLFILE)))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:LET*
    ((DIRNAME NULL)
     (ITER-001 (%LIST.THE-CONS-LIST (SECOND DIRECTORYLISTING))))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
     (CL:SETQ DIRNAME (%%VALUE ITER-001))
     (CL:LET* ((PLDIRECTORY (|new-PLDirectory|)))
      (CL:SETF (|%PLDirectory.DirectoryName| PLDIRECTORY)
       (%STRING-WRAPPER.WRAPPER-VALUE DIRNAME))
      (INSERT PLDIRECTORIES PLDIRECTORY))
     (CL:SETQ ITER-001 (%%REST ITER-001))))
   (CL:SETF (|%PLDirectoryContents.PLFile| PLDIRECTORYLISTING) PLFILES)
   (CL:SETF (|%PLDirectoryContents.PLDirectory| PLDIRECTORYLISTING)
    PLDIRECTORIES)
   PLDIRECTORYLISTING))

;;; (DEFUN (SERVER-GET-DEFAULT-DIRECTORY-LISTING |PLDirectoryContents|) ...)

(CL:DEFUN SERVER-GET-DEFAULT-DIRECTORY-LISTING (EXTENSIONFILTER)
  "Return the files and directories in the directory designated by '*DEFAULT-KB-DIRECTORY*'."
  (CL:LET* ((DIR (|new-PLString|)))
   (CL:SETF (|%PLString.Value| DIR) *DEFAULT-KB-DIRECTORY*)
   (SERVER-GET-DIRECTORY-LISTING DIR EXTENSIONFILTER)))

;;; (DEFGLOBAL *SERVER-DISPATCH-TABLE* ...)

(CL:DEFVAR *SERVER-DISPATCH-TABLE* NULL
  "Hash Table for used for dispatching server API methods.")

;;; (DEFUN (DISPATCH-CALL OBJECT) ...)

(CL:DEFUN DISPATCH-CALL (FUNCTIONNAME ARGS)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING FUNCTIONNAME))
  #+MCL
  (CL:CHECK-TYPE FUNCTIONNAME CL:SIMPLE-STRING)
  (CL:LET* ((CODE (LOOKUP *SERVER-DISPATCH-TABLE* FUNCTIONNAME)))
   (CL:IF (CL:EQ CODE NULL)
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "Couldn't find function `" FUNCTIONNAME "' for dispatch.")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))
    (APPLY (%FUNCTION-CODE-WRAPPER.WRAPPER-VALUE CODE) ARGS))))

;;; (DEFUN INITIALIZE-DISPATCH-TABLE ...)

(CL:DEFUN INITIALIZE-DISPATCH-TABLE ()
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-GET-MODULES"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-GET-MODULES)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-GET-CONCEPTS-FOR-MODULE"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-GET-CONCEPTS-FOR-MODULE)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-GET-INSTANCES-FOR-MODULE"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-GET-INSTANCES-FOR-MODULE)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-GET-RELATIONS-FOR-MODULE"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-GET-RELATIONS-FOR-MODULE)))
  (INSERT-AT *SERVER-DISPATCH-TABLE*
   "SERVER-GET-DIRECT-INSTANCES-FOR-CONCEPT"
   (WRAP-FUNCTION-CODE
    (CL:FUNCTION SERVER-GET-DIRECT-INSTANCES-FOR-CONCEPT)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-GET-INSTANCES-FOR-CONCEPT"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-GET-INSTANCES-FOR-CONCEPT)))
  (INSERT-AT *SERVER-DISPATCH-TABLE*
   "SERVER-GET-PROPOSITIONS-FOR-MODULE"
   (WRAP-FUNCTION-CODE
    (CL:FUNCTION SERVER-GET-PROPOSITIONS-FOR-MODULE)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-GET-RELATIONS-FOR-CONCEPT"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-GET-RELATIONS-FOR-CONCEPT)))
  (INSERT-AT *SERVER-DISPATCH-TABLE*
   "SERVER-GET-INHERITED-RELATIONS-FOR-CONCEPT"
   (WRAP-FUNCTION-CODE
    (CL:FUNCTION SERVER-GET-INHERITED-RELATIONS-FOR-CONCEPT)))
  (INSERT-AT *SERVER-DISPATCH-TABLE*
   "SERVER-GET-DOCUMENTATION-FOR-CONCEPT"
   (WRAP-FUNCTION-CODE
    (CL:FUNCTION SERVER-GET-DOCUMENTATION-FOR-CONCEPT)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-GET-SOURCE-FOR-CONCEPT"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-GET-SOURCE-FOR-CONCEPT)))
  (INSERT-AT *SERVER-DISPATCH-TABLE*
   "SERVER-GET-DOCUMENTATION-FOR-RELATION"
   (WRAP-FUNCTION-CODE
    (CL:FUNCTION SERVER-GET-DOCUMENTATION-FOR-RELATION)))
  (INSERT-AT *SERVER-DISPATCH-TABLE*
   "SERVER-GET-DOCUMENTATION-FOR-INSTANCE"
   (WRAP-FUNCTION-CODE
    (CL:FUNCTION SERVER-GET-DOCUMENTATION-FOR-INSTANCE)))
  (INSERT-AT *SERVER-DISPATCH-TABLE*
   "SERVER-GET-SUPERCONCEPTS-FOR-CONCEPT"
   (WRAP-FUNCTION-CODE
    (CL:FUNCTION SERVER-GET-SUPERCONCEPTS-FOR-CONCEPT)))
  (INSERT-AT *SERVER-DISPATCH-TABLE*
   "SERVER-GET-SUPERRELATIONS-FOR-RELATION"
   (WRAP-FUNCTION-CODE
    (CL:FUNCTION SERVER-GET-SUPERRELATIONS-FOR-RELATION)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-GET-INCLUDES-FOR-MODULE"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-GET-INCLUDES-FOR-MODULE)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-GET-USES-FOR-MODULE"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-GET-USES-FOR-MODULE)))
  (INSERT-AT *SERVER-DISPATCH-TABLE*
   "SERVER-GET-SHADOWED-SURROGATES-FOR-MODULE"
   (WRAP-FUNCTION-CODE
    (CL:FUNCTION SERVER-GET-SHADOWED-SURROGATES-FOR-MODULE)))
  (INSERT-AT *SERVER-DISPATCH-TABLE*
   "SERVER-GET-VARIABLES-FOR-RELATION"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-GET-VARIABLES-FOR-RELATION)))
  (INSERT-AT *SERVER-DISPATCH-TABLE*
   "SERVER-GET-PROPOSITIONS-FOR-INSTANCE"
   (WRAP-FUNCTION-CODE
    (CL:FUNCTION SERVER-GET-PROPOSITIONS-FOR-INSTANCE)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-GET-TYPES-FOR-INSTANCE"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-GET-TYPES-FOR-INSTANCE)))
  (INSERT-AT *SERVER-DISPATCH-TABLE*
   "SERVER-GET-PROPOSITIONS-FOR-CONCEPT"
   (WRAP-FUNCTION-CODE
    (CL:FUNCTION SERVER-GET-PROPOSITIONS-FOR-CONCEPT)))
  (INSERT-AT *SERVER-DISPATCH-TABLE*
   "SERVER-GET-PROPOSITIONS-FOR-RELATION"
   (WRAP-FUNCTION-CODE
    (CL:FUNCTION SERVER-GET-PROPOSITIONS-FOR-RELATION)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-GET-RULES-FOR-CONCEPT"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-GET-RULES-FOR-CONCEPT)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-GET-RULES-FOR-RELATION"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-GET-RULES-FOR-RELATION)))
  (INSERT-AT *SERVER-DISPATCH-TABLE*
   "SERVER-GET-PROPOSITIONS-FOR-INSTANCE-AND-RELATION"
   (WRAP-FUNCTION-CODE
    (CL:FUNCTION SERVER-GET-PROPOSITIONS-FOR-INSTANCE-AND-RELATION)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-EVALUATE-LOGIC-COMMAND"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-EVALUATE-LOGIC-COMMAND)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-GET-LOADABLE-KBS"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-GET-LOADABLE-KBS)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-LOAD-KB"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-LOAD-KB)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-LOAD-KB2"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-LOAD-KB2)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-SAVE-KB"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-SAVE-KB)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-SAVE-KB2"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-SAVE-KB2)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-CLEAR-KB"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-CLEAR-KB)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-QUERY"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-QUERY)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-SEARCH"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-SEARCH)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-GET-DIRECTORY-LISTING"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-GET-DIRECTORY-LISTING)))
  (INSERT-AT *SERVER-DISPATCH-TABLE*
   "SERVER-GET-DEFAULT-DIRECTORY-LISTING"
   (WRAP-FUNCTION-CODE
    (CL:FUNCTION SERVER-GET-DEFAULT-DIRECTORY-LISTING)))
  (INSERT-AT *SERVER-DISPATCH-TABLE*
   "SERVER-GET-EXTENSION-FOR-RELATION"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-GET-EXTENSION-FOR-RELATION)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-GET-RELATION"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-GET-RELATION)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-GET-CONCEPT"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-GET-CONCEPT)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-GET-INSTANCE"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-GET-INSTANCE)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-GET-CONCEPT-COMPLETIONS"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-GET-CONCEPT-COMPLETIONS)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-GET-RELATION-COMPLETIONS"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-GET-RELATION-COMPLETIONS)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-GET-INSTANCE-COMPLETIONS"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-GET-INSTANCE-COMPLETIONS)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-DESTROY-OBJECT"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-DESTROY-OBJECT)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-GET-EXPLANATION-FOR-QUERY"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-GET-EXPLANATION-FOR-QUERY)))
  (INSERT-AT *SERVER-DISPATCH-TABLE* "SERVER-GET-INFO"
   (WRAP-FUNCTION-CODE (CL:FUNCTION SERVER-GET-INFO))))

;;; (DEFUN MEMBER-TEST ...)

(CL:DEFUN MEMBER-TEST (CONCEPT)
  (CL:LET* ((CONCEPTLIST (NEW-LIST)) (NEWCONC (|new-PLConcept|)))
   (CL:SETF (|%PLConcept.ConceptName| NEWCONC)
    (|%PLConcept.ConceptName| CONCEPT))
   (INSERT CONCEPTLIST CONCEPT)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
    "IDENTICAL MEMBER: " (MEMBER? CONCEPTLIST CONCEPT) EOL)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
    "NONIDENTICAL MEMBER: " (MEMBER? CONCEPTLIST NEWCONC) EOL)))

;;; (DEFUN (TEST-SERVER-GET-CONCEPTS-FOR-MODULE |PLConceptContainer|) ...)

(CL:DEFUN TEST-SERVER-GET-CONCEPTS-FOR-MODULE ()
  (CL:LET* ((PLSTRING (|new-PLString|)))
   (CL:SETF (|%PLString.Value| PLSTRING) "EELD")
   (SERVER-GET-CONCEPTS-FOR-MODULE PLSTRING)))

;;; (DEFUN (TEST-SERVER-GET-INSTANCES-FOR-MODULE |PLInstanceContainer|) ...)

(CL:DEFUN TEST-SERVER-GET-INSTANCES-FOR-MODULE ()
  (CL:LET* ((PLSTRING (|new-PLString|)))
   (CL:SETF (|%PLString.Value| PLSTRING) "LOGIC")
   (SERVER-GET-INSTANCES-FOR-MODULE PLSTRING)))

;;; (DEFUN (TEST-SERVER-GET-RELATIONS-FOR-MODULE |PLRelationContainer|) ...)

(CL:DEFUN TEST-SERVER-GET-RELATIONS-FOR-MODULE ()
  (CL:LET* ((PLSTRING (|new-PLString|)))
   (CL:SETF (|%PLString.Value| PLSTRING) "PL-KERNEL-KB")
   (SERVER-GET-RELATIONS-FOR-MODULE PLSTRING)))

;;; (DEFUN (TEST-SERVER-GET-DIRECT-INSTANCES-FOR-CONCEPT |PLInstanceContainer|) ...)

(CL:DEFUN TEST-SERVER-GET-DIRECT-INSTANCES-FOR-CONCEPT ()
  (CL:LET* ((MODULE (|new-PLString|)) (CONCEPT (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MODULE) "AIRCRAFT-KB")
   (CL:SETF (|%PLString.Value| CONCEPT) "AIRCRAFT")
   (SERVER-GET-DIRECT-INSTANCES-FOR-CONCEPT MODULE CONCEPT)))

;;; (DEFUN (TEST-SERVER-GET-INSTANCES-FOR-CONCEPT |PLInstanceContainer|) ...)

(CL:DEFUN TEST-SERVER-GET-INSTANCES-FOR-CONCEPT ()
  (CL:LET* ((MODULE (|new-PLString|)) (CONCEPT (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MODULE) "AIRCRAFT-KB")
   (CL:SETF (|%PLString.Value| CONCEPT) "AIRCRAFT")
   (SERVER-GET-INSTANCES-FOR-CONCEPT MODULE CONCEPT)))

;;; (DEFUN (TEST-SERVER-GET-PROPOSITIONS-FOR-MODULE |PLPropositionContainer|) ...)

(CL:DEFUN TEST-SERVER-GET-PROPOSITIONS-FOR-MODULE ()
  (CL:LET* ((PLSTRING (|new-PLString|)))
   (CL:SETF (|%PLString.Value| PLSTRING) "AIRCRAFT-KB")
   (SERVER-GET-PROPOSITIONS-FOR-MODULE PLSTRING)))

;;; (DEFUN (TEST-SERVER-GET-PROPOSITIONS-FOR-INSTANCE |PLPropositionContainer|) ...)

(CL:DEFUN TEST-SERVER-GET-PROPOSITIONS-FOR-INSTANCE ()
  (CL:LET*
   ((MODSTRING (|new-PLString|)) (INSTANCESTRING (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MODSTRING) "AIRCRAFT-KB")
   (CL:SETF (|%PLString.Value| INSTANCESTRING) "F-117")
   (SERVER-GET-PROPOSITIONS-FOR-INSTANCE MODSTRING INSTANCESTRING)))

;;; (DEFUN (TEST-SERVER-GET-TYPES-FOR-INSTANCE |PLSurrogateCollection|) ...)

(CL:DEFUN TEST-SERVER-GET-TYPES-FOR-INSTANCE ()
  (CL:LET*
   ((MODSTRING (|new-PLString|)) (INSTANCESTRING (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MODSTRING) "AIRCRAFT-KB")
   (CL:SETF (|%PLString.Value| INSTANCESTRING) "A-10")
   (SERVER-GET-TYPES-FOR-INSTANCE MODSTRING INSTANCESTRING)))

;;; (DEFUN (TEST-SERVER-GET-DOCUMENTATION-FOR-INSTANCE |PLString|) ...)

(CL:DEFUN TEST-SERVER-GET-DOCUMENTATION-FOR-INSTANCE ()
  (CL:LET*
   ((MODSTRING (|new-PLString|)) (INSTANCESTRING (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MODSTRING) "EELD")
   (CL:SETF (|%PLString.Value| INSTANCESTRING) "Action_105")
   (SERVER-GET-DOCUMENTATION-FOR-INSTANCE MODSTRING INSTANCESTRING)))

;;; (DEFUN (TEST-SERVER-GET-RELATIONS-FOR-CONCEPT |PLRelationContainer|) ...)

(CL:DEFUN TEST-SERVER-GET-RELATIONS-FOR-CONCEPT ()
  (CL:LET*
   ((MODSTRING (|new-PLString|)) (INSTANCESTRING (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MODSTRING) "AIRCRAFT-KB")
   (CL:SETF (|%PLString.Value| INSTANCESTRING) "ENGINE")
   (SERVER-GET-RELATIONS-FOR-CONCEPT MODSTRING INSTANCESTRING)))

;;; (DEFUN (TEST-SERVER-GET-INHERITED-RELATIONS-FOR-CONCEPT |PLRelationContainer|) ...)

(CL:DEFUN TEST-SERVER-GET-INHERITED-RELATIONS-FOR-CONCEPT ()
  (CL:LET*
   ((MODSTRING (|new-PLString|)) (INSTANCESTRING (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MODSTRING) "AIRCRAFT-KB")
   (CL:SETF (|%PLString.Value| INSTANCESTRING) "AIRCRAFT")
   (SERVER-GET-INHERITED-RELATIONS-FOR-CONCEPT MODSTRING
    INSTANCESTRING)))

;;; (DEFUN (TEST-SERVER-GET-DOCUMENTATION-FOR-CONCEPT |PLString|) ...)

(CL:DEFUN TEST-SERVER-GET-DOCUMENTATION-FOR-CONCEPT ()
  (CL:LET*
   ((MODSTRING (|new-PLString|)) (CONCEPTSTRING (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MODSTRING) "AIRCRAFT-KB")
   (CL:SETF (|%PLString.Value| CONCEPTSTRING) "JFC9")
   (SERVER-GET-DOCUMENTATION-FOR-CONCEPT MODSTRING CONCEPTSTRING)))

;;; (DEFUN (TEST-SERVER-GET-SOURCE-FOR-CONCEPT |PLString|) ...)

(CL:DEFUN TEST-SERVER-GET-SOURCE-FOR-CONCEPT ()
  (CL:LET*
   ((MODSTRING (|new-PLString|)) (CONCEPTSTRING (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MODSTRING) "AIRCRAFT-KB")
   (CL:SETF (|%PLString.Value| CONCEPTSTRING) "AIR-ORGANIZATION")
   (SERVER-GET-SOURCE-FOR-CONCEPT MODSTRING CONCEPTSTRING)))

;;; (DEFUN (TEST-SERVER-GET-DOCUMENTATION-FOR-RELATION |PLString|) ...)

(CL:DEFUN TEST-SERVER-GET-DOCUMENTATION-FOR-RELATION ()
  (CL:LET*
   ((MODSTRING (|new-PLString|)) (RELATIONSTRING (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MODSTRING) "AIRCRAFT-KB")
   (CL:SETF (|%PLString.Value| RELATIONSTRING) "ORDNANCE")
   (SERVER-GET-DOCUMENTATION-FOR-RELATION MODSTRING RELATIONSTRING)))

;;; (DEFUN (TEST-SERVER-GET-SUPERCONCEPTS-FOR-CONCEPT |PLSurrogateCollection|) ...)

(CL:DEFUN TEST-SERVER-GET-SUPERCONCEPTS-FOR-CONCEPT ()
  (CL:LET*
   ((MODSTRING (|new-PLString|)) (CONCEPTSTRING (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MODSTRING) "AIRCRAFT-KB")
   (CL:SETF (|%PLString.Value| CONCEPTSTRING) "AIR-ORGANIZATION")
   (SERVER-GET-SUPERCONCEPTS-FOR-CONCEPT MODSTRING CONCEPTSTRING)))

;;; (DEFUN (TEST-SERVER-GET-SUPERRELATIONS-FOR-RELATION |PLSurrogateCollection|) ...)

(CL:DEFUN TEST-SERVER-GET-SUPERRELATIONS-FOR-RELATION ()
  (CL:LET*
   ((MODSTRING (|new-PLString|)) (RELATIONSTRING (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MODSTRING) "AIRCRAFT-KB")
   (CL:SETF (|%PLString.Value| RELATIONSTRING) "AG-ORDNANCE")
   (SERVER-GET-SUPERRELATIONS-FOR-RELATION MODSTRING RELATIONSTRING)))

;;; (DEFUN (TEST-SERVER-GET-INCLUDES-FOR-MODULE |PLSurrogateCollection|) ...)

(CL:DEFUN TEST-SERVER-GET-INCLUDES-FOR-MODULE ()
  (CL:LET* ((MODSTRING (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MODSTRING) "AIRCRAFT-KB")
   (SERVER-GET-INCLUDES-FOR-MODULE MODSTRING)))

;;; (DEFUN (TEST-SERVER-GET-SHADOWED-SURROGATES-FOR-MODULE |PLSurrogateCollection|) ...)

(CL:DEFUN TEST-SERVER-GET-SHADOWED-SURROGATES-FOR-MODULE ()
  (CL:LET* ((MODSTRING (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MODSTRING) "AIRCRAFT-KB")
   (SERVER-GET-SHADOWED-SURROGATES-FOR-MODULE MODSTRING)))

;;; (DEFUN (TEST-SERVER-GET-USES-FOR-MODULE |PLSurrogateCollection|) ...)

(CL:DEFUN TEST-SERVER-GET-USES-FOR-MODULE ()
  (CL:LET* ((MODSTRING (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MODSTRING) "AIRCRAFT-KB")
   (SERVER-GET-USES-FOR-MODULE MODSTRING)))

;;; (DEFUN (TEST-SERVER-GET-VARIABLES-FOR-RELATION |PLVariableList|) ...)

(CL:DEFUN TEST-SERVER-GET-VARIABLES-FOR-RELATION ()
  (CL:LET*
   ((MODSTRING (|new-PLString|)) (RELATIONSTRING (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MODSTRING) "AIRCRAFT-KB")
   (CL:SETF (|%PLString.Value| RELATIONSTRING) "STORES")
   (SERVER-GET-VARIABLES-FOR-RELATION MODSTRING RELATIONSTRING)))

;;; (DEFUN (TEST-SERVER-GET-PROPOSITIONS-FOR-CONCEPT |PLPropositionContainer|) ...)

(CL:DEFUN TEST-SERVER-GET-PROPOSITIONS-FOR-CONCEPT ()
  (CL:LET*
   ((MODSTRING (|new-PLString|)) (INSTANCESTRING (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MODSTRING) "SUBMOD1")
   (CL:SETF (|%PLString.Value| INSTANCESTRING) "WIDTH-RELATION")
   (SERVER-GET-PROPOSITIONS-FOR-CONCEPT MODSTRING INSTANCESTRING)))

;;; (DEFUN (TEST-SERVER-GET-RULES-FOR-CONCEPT |PLPropositionContainer|) ...)

(CL:DEFUN TEST-SERVER-GET-RULES-FOR-CONCEPT ()
  (CL:LET*
   ((MODSTRING (|new-PLString|)) (INSTANCESTRING (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MODSTRING) "AIRCRAFT-KB")
   (CL:SETF (|%PLString.Value| INSTANCESTRING) "WIDTH-RELATION")
   (SERVER-GET-RULES-FOR-CONCEPT MODSTRING INSTANCESTRING)))

;;; (DEFUN (TEST-SERVER-GET-PROPOSITIONS-FOR-RELATION |PLPropositionContainer|) ...)

(CL:DEFUN TEST-SERVER-GET-PROPOSITIONS-FOR-RELATION ()
  (CL:LET*
   ((MODSTRING (|new-PLString|)) (INSTANCESTRING (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MODSTRING) "AIRCRAFT-KB")
   (CL:SETF (|%PLString.Value| INSTANCESTRING) "ABCD")
   (SERVER-GET-PROPOSITIONS-FOR-RELATION MODSTRING INSTANCESTRING)))

;;; (DEFUN (TEST-SERVER-GET-RULES-FOR-RELATION |PLPropositionContainer|) ...)

(CL:DEFUN TEST-SERVER-GET-RULES-FOR-RELATION ()
  (CL:LET*
   ((MODSTRING (|new-PLString|)) (INSTANCESTRING (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MODSTRING) "AIRCRAFT-KB")
   (CL:SETF (|%PLString.Value| INSTANCESTRING) "SMART-BOMB")
   (SERVER-GET-RULES-FOR-RELATION MODSTRING INSTANCESTRING)))

;;; (DEFUN (TEST-SERVER-GET-PROPOSITIONS-FOR-INSTANCE-AND-RELATION |PLPropositionContainer|) ...)

(CL:DEFUN TEST-SERVER-GET-PROPOSITIONS-FOR-INSTANCE-AND-RELATION ()
  (CL:LET*
   ((MODSTRING (|new-PLString|)) (RELATIONSTRING (|new-PLString|))
    (INSTANCESTRING (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MODSTRING) "AIRCRAFT-KB")
   (CL:SETF (|%PLString.Value| RELATIONSTRING) "FLEET-SIZE")
   (CL:SETF (|%PLString.Value| INSTANCESTRING) "USAF")
   (SERVER-GET-PROPOSITIONS-FOR-INSTANCE-AND-RELATION MODSTRING
    INSTANCESTRING RELATIONSTRING)))

;;; (DEFUN (TEST-SERVER-EVALUATE-LOGIC-COMMAND |PLString|) ...)

(CL:DEFUN TEST-SERVER-EVALUATE-LOGIC-COMMAND (COMMAND)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING COMMAND))
  #+MCL
  (CL:CHECK-TYPE COMMAND CL:SIMPLE-STRING)
  (CL:LET*
   ((MODSTRING (|new-PLString|)) (COMMANDSTRING (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MODSTRING) "AIRCRAFT-KB")
   (CL:SETF (|%PLString.Value| COMMANDSTRING) COMMAND)
   (SERVER-EVALUATE-LOGIC-COMMAND MODSTRING COMMANDSTRING)))

;;; (DEFUN (TEST-SERVER-LOAD-KB |PLString|) ...)

(CL:DEFUN TEST-SERVER-LOAD-KB ()
  (CL:LET* ((KBSTRING (|new-PLString|)))
   (CL:SETF (|%PLString.Value| KBSTRING) "aircraft-kb")
   (SERVER-LOAD-KB KBSTRING)))

;;; (DEFUN TEST-SERVER-CLEAR-KB ...)

(CL:DEFUN TEST-SERVER-CLEAR-KB ()
  (CL:LET* ((MOD (|new-PLModule|)))
   (CL:SETF (|%PLModule.ModuleName| MOD) "AIRCRAFT-KB")
   (SERVER-CLEAR-KB MOD)))

;;; (DEFUN (TEST-SERVER-SAVE-KB |PLString|) ...)

(CL:DEFUN TEST-SERVER-SAVE-KB ()
  (CL:LET*
   ((KBSTRING (|new-PLString|)) (MODSTRING (|new-PLString|))
    (DESCSTRING (|new-PLString|)))
   (CL:SETF (|%PLString.Value| KBSTRING) "aircraft-kb10")
   (CL:SETF (|%PLString.Value| MODSTRING) "AIRCRAFT-KB")
   (CL:SETF (|%PLString.Value| DESCSTRING)
    "groovy new desc for aircraft-kb10")
   (SERVER-SAVE-KB MODSTRING KBSTRING DESCSTRING)))

;;; (DEFUN (TEST-SERVER-SAVE-KB2 |PLFile|) ...)

(CL:DEFUN TEST-SERVER-SAVE-KB2 ()
  (CL:LET* ((FILESTRING (|new-PLString|)) (MODSTRING (|new-PLString|)))
   (CL:SETF (|%PLString.Value| FILESTRING)
    "/nfs/topaz/melz/cvscheckout/powerloom/sources/logic/demos/aircraft.ploom")
   (CL:SETF (|%PLString.Value| MODSTRING) "AIRCRAFT-KB")
   (SERVER-SAVE-KB2 MODSTRING FILESTRING)))

;;; (DEFUN (MAKE-PL-QUERY |PLQuery|) ...)

(CL:DEFUN MAKE-PL-QUERY ()
  (CL:LET* ((PLQUERY (|new-PLQuery|)))
   (CL:SETF (|%PLQuery.Query| PLQUERY) "(HAPPY ?X)")
   (CL:SETF (|%PLQuery.NumResults| PLQUERY) "ALL")
   (CL:SETF (|%PLQuery.Module| PLQUERY) "SUBMOD1")
   (CL:SETF (|%PLQuery.IsAsk| PLQUERY) "FALSE")
   (CL:SETF (|%PLQuery.QueryName| PLQUERY) "")
   (CL:SETF (|%PLQuery.InferenceLevel| PLQUERY) "")
   (CL:SETF (|%PLQuery.Timeout| PLQUERY) "")
   (CL:SETF (|%PLQuery.Moveout| PLQUERY) "")
   (CL:SETF (|%PLQuery.MatchMode| PLQUERY) "PARTIAL")
   (CL:SETF (|%PLQuery.MinScore| PLQUERY) "")
   (CL:SETF (|%PLQuery.MaxUnknowns| PLQUERY) "")
   (CL:SETF (|%PLQuery.MaximizeScore| PLQUERY) "")
   (CL:SETF (|%PLQuery.DontOptimize| PLQUERY) "") PLQUERY))

;;; (DEFUN (TEST-SERVER-QUERY |PLQueryResult|) ...)

(CL:DEFUN TEST-SERVER-QUERY ()
  (CL:LET*
   ((RESULT NULL) (CONTINUEQUERY? (|new-PLString|))
    (PLQUERY (MAKE-PL-QUERY)))
   (CL:SETF (|%PLString.Value| CONTINUEQUERY?) "FALSE")
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
    "result1 is: " (SERVER-QUERY PLQUERY CONTINUEQUERY?) EOL)
   RESULT))

;;; (DEFUN (TEST-SERVER-SEARCH1 |PLSearchResult|) ...)

(CL:DEFUN TEST-SERVER-SEARCH1 ()
  (CL:LET* ((SEARCHPARAMETER (|new-PLSearchParameter|)))
   (CL:SETF (|%PLSearchParameter.ModuleName| SEARCHPARAMETER)
    "AIRCRAFT-KB")
   (CL:SETF (|%PLSearchParameter.SearchString| SEARCHPARAMETER)
    "*pod*")
   (CL:SETF (|%PLSearchParameter.SearchConcept| SEARCHPARAMETER)
    "TRUE")
   (CL:SETF (|%PLSearchParameter.SearchRelation| SEARCHPARAMETER)
    "FALSE")
   (CL:SETF (|%PLSearchParameter.SearchInstance| SEARCHPARAMETER)
    "FALSE")
   (CL:SETF (|%PLSearchParameter.CaseSensitive| SEARCHPARAMETER)
    "FALSE")
   (SERVER-SEARCH SEARCHPARAMETER)))

;;; (DEFUN (TEST-SERVER-GET-DEFAULT-DIRECTORY-LISTING |PLDirectoryContents|) ...)

(CL:DEFUN TEST-SERVER-GET-DEFAULT-DIRECTORY-LISTING ()
  (CL:LET* ((EXTENSION (|new-PLString|)))
   (CL:SETF (|%PLString.Value| EXTENSION) "*.edu")
   (SERVER-GET-DEFAULT-DIRECTORY-LISTING EXTENSION)))

;;; (DEFUN (TEST-SERVER-GET-EXTENSION-FOR-RELATION |PLQueryResult|) ...)

(CL:DEFUN TEST-SERVER-GET-EXTENSION-FOR-RELATION ()
  (CL:LET* ((MOD (|new-PLString|)) (RELATION (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MOD) "AIRCRAFT-KB")
   (CL:SETF (|%PLString.Value| RELATION) "cost")
   (SERVER-GET-EXTENSION-FOR-RELATION MOD RELATION)))

;;; (DEFUN (TEST-SERVER-GET-RELATION |PLRelationContainer|) ...)

(CL:DEFUN TEST-SERVER-GET-RELATION ()
  (CL:LET* ((MOD (|new-PLString|)) (RELATION (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MOD) "AIRCRAFT-KB")
   (CL:SETF (|%PLString.Value| RELATION) "DUPLICATE-FREE")
   (SERVER-GET-RELATION MOD RELATION)))

;;; (DEFUN (TEST-SERVER-GET-CONCEPT |PLConceptContainer|) ...)

(CL:DEFUN TEST-SERVER-GET-CONCEPT ()
  (CL:LET* ((MOD (|new-PLString|)) (CONCEPT (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MOD) "AIRCRAFT-KB")
   (CL:SETF (|%PLString.Value| CONCEPT) "DUPLICATE-FREE")
   (SERVER-GET-CONCEPT MOD CONCEPT)))

;;; (DEFUN (TEST-SERVER-GET-INSTANCE |PLInstanceContainer|) ...)

(CL:DEFUN TEST-SERVER-GET-INSTANCE ()
  (CL:LET* ((MOD (|new-PLString|)) (INSTANCE (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MOD) "AIRCRAFT-KB")
   (CL:SETF (|%PLString.Value| INSTANCE) "A-10")
   (SERVER-GET-INSTANCE MOD INSTANCE)))

;;; (DEFUN (TEST-SERVER-GET-CONCEPT-COMPLETIONS |PLConceptContainer|) ...)

(CL:DEFUN TEST-SERVER-GET-CONCEPT-COMPLETIONS ()
  (CL:LET* ((MOD (|new-PLString|)) (PREFIX (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MOD) "AIRCRAFT-KB")
   (CL:SETF (|%PLString.Value| PREFIX) "CO")
   (SERVER-GET-CONCEPT-COMPLETIONS MOD PREFIX)))

;;; (DEFUN (TEST-SERVER-GET-RELATION-COMPLETIONS |PLRelationContainer|) ...)

(CL:DEFUN TEST-SERVER-GET-RELATION-COMPLETIONS ()
  (CL:LET* ((MOD (|new-PLString|)) (PREFIX (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MOD) "AIRCRAFT-KB")
   (CL:SETF (|%PLString.Value| PREFIX) "CO")
   (SERVER-GET-RELATION-COMPLETIONS MOD PREFIX)))

;;; (DEFUN (TEST-SERVER-GET-INSTANCE-COMPLETIONS |PLInstanceContainer|) ...)

(CL:DEFUN TEST-SERVER-GET-INSTANCE-COMPLETIONS ()
  (CL:LET* ((MOD (|new-PLString|)) (PREFIX (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MOD) "AIRCRAFT-KB")
   (CL:SETF (|%PLString.Value| PREFIX) "A")
   (SERVER-GET-INSTANCE-COMPLETIONS MOD PREFIX)))

;;; (DEFUN (TEST-SERVER-DESTROY-OBJECT |PLString|) ...)

(CL:DEFUN TEST-SERVER-DESTROY-OBJECT ()
  (CL:LET* ((MOD (|new-PLString|)) (OBJECT (|new-PLString|)))
   (CL:SETF (|%PLString.Value| MOD) "AIRCRAFT-KB")
   (CL:SETF (|%PLString.Value| OBJECT) "SWING-WING")
   (SERVER-DESTROY-OBJECT MOD OBJECT)))

;;; (DEFUN (TEST-SERVER-GET-EXPLANATION-FOR-QUERY |PLString|) ...)

(CL:DEFUN TEST-SERVER-GET-EXPLANATION-FOR-QUERY ()
  (CL:LET* ((PLQUERY (MAKE-PL-QUERY)) (RESULTNUM (|new-PLString|)))
   (CL:SETF (|%PLString.Value| RESULTNUM) "4")
   (SERVER-GET-EXPLANATION-FOR-QUERY PLQUERY RESULTNUM)))

;;; (DEFUN (TEST-SERVER-GET-INFO |PLServerInfo|) ...)

(CL:DEFUN TEST-SERVER-GET-INFO ()
  (CL:LET* ((RESULT (SERVER-GET-INFO))) RESULT))

(CL:DEFUN HELP-STARTUP-GUI-SERVER-API1 ()
  (CL:PROGN
   (CL:SETQ KWD-GUI-SERVER-API-LOG-LEVELS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LOG-LEVELS" NULL 2))
   (CL:SETQ KWD-GUI-SERVER-API-LEVEL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LEVEL" NULL 2))
   (CL:SETQ KWD-GUI-SERVER-API-DEVELOPMENT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DEVELOPMENT" NULL 2))
   (CL:SETQ KWD-GUI-SERVER-API-HIGH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "HIGH" NULL 2))
   (CL:SETQ KWD-GUI-SERVER-API-LOW
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LOW" NULL 2))
   (CL:SETQ KWD-GUI-SERVER-API-PREFIX
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PREFIX" NULL 2))
   (CL:SETQ KWD-GUI-SERVER-API-MAX-WIDTH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MAX-WIDTH" NULL 2))
   (CL:SETQ KWD-GUI-SERVER-API-STREAM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STREAM" NULL 2))
   (CL:SETQ SGT-GUI-SERVER-API-LOGIC-LOGIC-OBJECT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LOGIC-OBJECT"
     (GET-STELLA-MODULE "/LOGIC" CL:T) 1))
   (CL:SETQ SGT-GUI-SERVER-API-STELLA-CONS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONS"
     (GET-STELLA-MODULE "/STELLA" CL:T) 1))
   (CL:SETQ SGT-GUI-SERVER-API-LOGIC-TRUTH-VALUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TRUTH-VALUE"
     (GET-STELLA-MODULE "/LOGIC" CL:T) 1))
   (CL:SETQ SGT-GUI-SERVER-API-LOGIC-NAMED-DESCRIPTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NAMED-DESCRIPTION"
     (GET-STELLA-MODULE "/LOGIC" CL:T) 1))
   (CL:SETQ SGT-GUI-SERVER-API-LOGIC-SKOLEM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SKOLEM"
     (GET-STELLA-MODULE "/LOGIC" CL:T) 1))
   (CL:SETQ SYM-GUI-SERVER-API-STELLA-CODE-ONLY?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CODE-ONLY?"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-GUI-SERVER-API-STELLA-JAVA-FLOTSAM-CLASS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA-FLOTSAM-CLASS"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-GUI-SERVER-API-STELLA-API?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "API?"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SGT-GUI-SERVER-API-STELLA-LITERAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LITERAL"
     (GET-STELLA-MODULE "/STELLA" CL:T) 1))
   (CL:SETQ KWD-GUI-SERVER-API-FORALL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FORALL" NULL 2))
   (CL:SETQ KWD-GUI-SERVER-API-EXISTS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "EXISTS" NULL 2))
   (CL:SETQ KWD-GUI-SERVER-API-IMPLIES
    (INTERN-RIGID-SYMBOL-WRT-MODULE "IMPLIES" NULL 2))
   (CL:SETQ SYM-GUI-SERVER-API-LOGIC-MASTER-PROPOSITION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MASTER-PROPOSITION"
     (GET-STELLA-MODULE "/LOGIC" CL:T) 0))
   (CL:SETQ SYM-GUI-SERVER-API-STELLA-ASK
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ASK"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ KWD-GUI-SERVER-API-ORIGINAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ORIGINAL" NULL 2))
   (CL:SETQ SYM-GUI-SERVER-API-GUI-SERVER-WILD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WILD" NULL 0))
   (CL:SETQ SYM-GUI-SERVER-API-GUI-SERVER-STARTUP-GUI-SERVER-API
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-GUI-SERVER-API" NULL 0))
   (CL:SETQ SYM-GUI-SERVER-API-STELLA-METHOD-STARTUP-CLASSNAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))))

(CL:DEFUN HELP-STARTUP-GUI-SERVER-API2 ()
  (CL:PROGN
   (DEFINE-FUNCTION-OBJECT "SERVER-LOG"
    "(DEFUN SERVER-LOG ((LOGLEVEL KEYWORD) |&REST| (MESSAGE OBJECT)))"
    (CL:FUNCTION SERVER-LOG) NULL)
   (DEFINE-FUNCTION-OBJECT "PL-OBJECT-TO-GUI-NAME"
    "(DEFUN (PL-OBJECT-TO-GUI-NAME STRING) ((X OBJECT)))"
    (CL:FUNCTION PL-OBJECT-TO-GUI-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "GUI-NAME-TO-PL-NAME"
    "(DEFUN (GUI-NAME-TO-PL-NAME STRING) ((NAME STRING)))"
    (CL:FUNCTION GUI-NAME-TO-PL-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-MODULES"
    "(DEFUN (SERVER-GET-MODULES |PLModuleContainer|) () :DOCUMENTATION \"Get all the loaded modules, structured, hierarchically\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-MODULES) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-CONCEPTS-FOR-MODULE"
    "(DEFUN (SERVER-GET-CONCEPTS-FOR-MODULE |PLConceptContainer|) ((PLSTRING |PLString|)) :DOCUMENTATION \"Get all the concepts in a module, structured hierarchically\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-CONCEPTS-FOR-MODULE) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-CONCEPT-COMPLETIONS"
    "(DEFUN (SERVER-GET-CONCEPT-COMPLETIONS |PLConceptContainer|) ((PLMODULE |PLString|) (PREFIX |PLString|)) :DOCUMENTATION \"Get all the concepts in a module and included/used modules that begin with 'prefix'\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-CONCEPT-COMPLETIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-INSTANCES-FOR-MODULE"
    "(DEFUN (SERVER-GET-INSTANCES-FOR-MODULE |PLInstanceContainer|) ((PLSTRING |PLString|)) :DOCUMENTATION \"Get all the instances in a module, excluding skolems\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-INSTANCES-FOR-MODULE) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-INSTANCE-COMPLETIONS"
    "(DEFUN (SERVER-GET-INSTANCE-COMPLETIONS |PLInstanceContainer|) ((PLMODULE |PLString|) (PREFIX |PLString|)) :DOCUMENTATION \"Get all the instances begining with 'prefix' in all modules accessible from 'plModule'.\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-INSTANCE-COMPLETIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-RELATIONS-FOR-MODULE"
    "(DEFUN (SERVER-GET-RELATIONS-FOR-MODULE |PLRelationContainer|) ((PLSTRING |PLString|)) :DOCUMENTATION \"Get all the relations in a module, structured hierarchically\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-RELATIONS-FOR-MODULE) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-RELATION-COMPLETIONS"
    "(DEFUN (SERVER-GET-RELATION-COMPLETIONS |PLRelationContainer|) ((PLMODULE |PLString|) (PREFIX |PLString|)) :DOCUMENTATION \"Get all the relations in a module and included/used modules that begin with 'prefix'\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-RELATION-COMPLETIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-INSTANCES-FOR-CONCEPT"
    "(DEFUN (SERVER-GET-INSTANCES-FOR-CONCEPT |PLInstanceContainer|) ((MODULENAME |PLString|) (CONCEPTNAME |PLString|)) :DOCUMENTATION \"Get all the instances for a given module+concept\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-INSTANCES-FOR-CONCEPT) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-DIRECT-INSTANCES-FOR-CONCEPT"
    "(DEFUN (SERVER-GET-DIRECT-INSTANCES-FOR-CONCEPT |PLInstanceContainer|) ((MODULENAME |PLString|) (CONCEPTNAME |PLString|)) :DOCUMENTATION \"Get all the instances for a given module+concept\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-DIRECT-INSTANCES-FOR-CONCEPT) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-DOCUMENTATION-FOR-CONCEPT"
    "(DEFUN (SERVER-GET-DOCUMENTATION-FOR-CONCEPT |PLString|) ((MODULENAME |PLString|) (CONCEPTNAME |PLString|)) :DOCUMENTATION \"Get the documentation string for module+concept\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-DOCUMENTATION-FOR-CONCEPT) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-SOURCE-FOR-CONCEPT"
    "(DEFUN (SERVER-GET-SOURCE-FOR-CONCEPT |PLString|) ((MODULENAME |PLString|) (CONCEPTNAME |PLString|)) :DOCUMENTATION \"Get the source string for module+concept\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-SOURCE-FOR-CONCEPT) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-DOCUMENTATION-FOR-RELATION"
    "(DEFUN (SERVER-GET-DOCUMENTATION-FOR-RELATION |PLString|) ((MODULENAME |PLString|) (RELATIONNAME |PLString|)) :DOCUMENTATION \"Get the documentation string for module+relation\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-DOCUMENTATION-FOR-RELATION) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-SUPERCONCEPTS-FOR-CONCEPT"
    "(DEFUN (SERVER-GET-SUPERCONCEPTS-FOR-CONCEPT |PLSurrogateCollection|) ((MODULENAME |PLString|) (CONCEPTNAME |PLString|)) :DOCUMENTATION \"Get the superconcepts for module+concept\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-SUPERCONCEPTS-FOR-CONCEPT) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-SUPERRELATIONS-FOR-RELATION"
    "(DEFUN (SERVER-GET-SUPERRELATIONS-FOR-RELATION |PLSurrogateCollection|) ((MODULENAME |PLString|) (RELATIONNAME |PLString|)) :DOCUMENTATION \"Get the superrelations for module+relation\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-SUPERRELATIONS-FOR-RELATION) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-INCLUDES-FOR-MODULE"
    "(DEFUN (SERVER-GET-INCLUDES-FOR-MODULE |PLSurrogateCollection|) ((MODULENAME |PLString|)) :DOCUMENTATION \"Get the includes for module\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-INCLUDES-FOR-MODULE) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-USES-FOR-MODULE"
    "(DEFUN (SERVER-GET-USES-FOR-MODULE |PLSurrogateCollection|) ((MODULENAME |PLString|)) :DOCUMENTATION \"Get the uses for module\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-USES-FOR-MODULE) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-SHADOWED-SURROGATES-FOR-MODULE"
    "(DEFUN (SERVER-GET-SHADOWED-SURROGATES-FOR-MODULE |PLSurrogateCollection|) ((MODULENAME |PLString|)) :DOCUMENTATION \"Get the uses for module\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-SHADOWED-SURROGATES-FOR-MODULE) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-VARIABLES-FOR-RELATION"
    "(DEFUN (SERVER-GET-VARIABLES-FOR-RELATION |PLVariableList|) ((MODULENAME |PLString|) (RELATIONNAME |PLString|)) :DOCUMENTATION \"Get the superrelations for module+relation\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-VARIABLES-FOR-RELATION) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-PROPOSITIONS-FOR-MODULE"
    "(DEFUN (SERVER-GET-PROPOSITIONS-FOR-MODULE |PLPropositionContainer|) ((MODULENAME |PLString|)) :DOCUMENTATION \"Get all the propositions for a given module\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-PROPOSITIONS-FOR-MODULE) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-RELATIONS-FOR-CONCEPT"
    "(DEFUN (SERVER-GET-RELATIONS-FOR-CONCEPT |PLRelationContainer|) ((MODULENAME |PLString|) (CONCEPTNAME |PLString|)) :DOCUMENTATION \"Get all the direct relations which have 'conceptName' as their domain\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-RELATIONS-FOR-CONCEPT) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-INHERITED-RELATIONS-FOR-CONCEPT"
    "(DEFUN (SERVER-GET-INHERITED-RELATIONS-FOR-CONCEPT |PLRelationContainer|) ((MODULENAME |PLString|) (CONCEPTNAME |PLString|)) :DOCUMENTATION \"Get all the relations which have 'conceptName' as a subtype of their domain\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-INHERITED-RELATIONS-FOR-CONCEPT) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-PROPOSITIONS-FOR-INSTANCE"
    "(DEFUN (SERVER-GET-PROPOSITIONS-FOR-INSTANCE |PLPropositionContainer|) ((MODULENAME |PLString|) (INSTANCENAME |PLString|)) :DOCUMENTATION \"Get all the propositions for a given instance\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-PROPOSITIONS-FOR-INSTANCE) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-TYPES-FOR-INSTANCE"
    "(DEFUN (SERVER-GET-TYPES-FOR-INSTANCE |PLSurrogateCollection|) ((MODULENAME |PLString|) (INSTANCENAME |PLString|)) :DOCUMENTATION \"Get all the types of an instance.\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-TYPES-FOR-INSTANCE) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-DOCUMENTATION-FOR-INSTANCE"
    "(DEFUN (SERVER-GET-DOCUMENTATION-FOR-INSTANCE |PLString|) ((MODULENAME |PLString|) (INSTANCENAME |PLString|)) :DOCUMENTATION \"Get the documentation string for module+instance.\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-DOCUMENTATION-FOR-INSTANCE) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-PROPOSITIONS-FOR-CONCEPT"
    "(DEFUN (SERVER-GET-PROPOSITIONS-FOR-CONCEPT |PLPropositionContainer|) ((MODULENAME |PLString|) (INSTANCENAME |PLString|)) :DOCUMENTATION \"Get all the propositions for a given concept\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-PROPOSITIONS-FOR-CONCEPT) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-PROPOSITIONS-FOR-RELATION"
    "(DEFUN (SERVER-GET-PROPOSITIONS-FOR-RELATION |PLPropositionContainer|) ((MODULENAME |PLString|) (INSTANCENAME |PLString|)) :DOCUMENTATION \"Get all the propositions for a given relation\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-PROPOSITIONS-FOR-RELATION) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-RULES-FOR-CONCEPT"
    "(DEFUN (SERVER-GET-RULES-FOR-CONCEPT |PLPropositionContainer|) ((MODULENAME |PLString|) (INSTANCENAME |PLString|)) :DOCUMENTATION \"Get all the rules for a given concept\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-RULES-FOR-CONCEPT) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-RULES-FOR-RELATION"
    "(DEFUN (SERVER-GET-RULES-FOR-RELATION |PLPropositionContainer|) ((MODULENAME |PLString|) (INSTANCENAME |PLString|)) :DOCUMENTATION \"Get all the rules for a given relation\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-RULES-FOR-RELATION) NULL)
   (DEFINE-FUNCTION-OBJECT
    "SERVER-GET-PROPOSITIONS-FOR-INSTANCE-AND-RELATION"
    "(DEFUN (SERVER-GET-PROPOSITIONS-FOR-INSTANCE-AND-RELATION |PLPropositionContainer|) ((MODULENAME |PLString|) (INSTANCENAME |PLString|) (RELATIONNAME |PLString|)) :DOCUMENTATION \"Get all the propositions for a given instance and relation\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-PROPOSITIONS-FOR-INSTANCE-AND-RELATION)
    NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-EVALUATE-LOGIC-COMMAND"
    "(DEFUN (SERVER-EVALUATE-LOGIC-COMMAND |PLString|) ((MODULENAME |PLString|) (COMMANDSTRING |PLString|)) :DOCUMENTATION \"Evaluate 'commandString' and return the result\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-EVALUATE-LOGIC-COMMAND) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-LOADABLE-KBS"
    "(DEFUN (SERVER-GET-LOADABLE-KBS |PLModuleFileList|) () :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-LOADABLE-KBS) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-LOAD-KB"
    "(DEFUN (SERVER-LOAD-KB |PLString|) ((PLKBNAME |PLString|)) :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-LOAD-KB) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-LOAD-KB2"
    "(DEFUN (SERVER-LOAD-KB2 |PLString|) ((FILE |PLFile|)) :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-LOAD-KB2) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-SAVE-KB"
    "(DEFUN (SERVER-SAVE-KB |PLString|) ((PLMODULENAME |PLString|) (PLKBNAME |PLString|) (PLDESCRIPTION |PLString|)) :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-SAVE-KB) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-SAVE-KB2"
    "(DEFUN (SERVER-SAVE-KB2 |PLFile|) ((PLMODULENAME |PLString|) (PLFILENAME |PLString|)) :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-SAVE-KB2) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-CLEAR-KB"
    "(DEFUN (SERVER-CLEAR-KB |PLString|) ((MODULE |PLModule|)) :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-CLEAR-KB) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-QUERY-SESSION"
    "(DEFUN (GET-QUERY-SESSION /HTTP/SESSION) ((QUERY |PLQuery|) (ERROR? BOOLEAN)))"
    (CL:FUNCTION GET-QUERY-SESSION) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-QUERY"
    "(DEFUN (SERVER-QUERY |PLQueryResult|) ((PLQUERY |PLQuery|) (CONTINUEQUERY? |PLString|)) :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-QUERY) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-SEARCH"
    "(DEFUN (SERVER-SEARCH |PLSearchResult|) ((SEARCHPARAMETER |PLSearchParameter|)) :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-SEARCH) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-EXTENSION-FOR-RELATION"
    "(DEFUN (SERVER-GET-EXTENSION-FOR-RELATION |PLQueryResult|) ((MODULENAME |PLString|) (RELATIONNAME |PLString|)) :DOCUMENTATION \"Get the extension for a relation\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-GET-EXTENSION-FOR-RELATION) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-DESTROY-OBJECT"
    "(DEFUN (SERVER-DESTROY-OBJECT |PLString|) ((MODULENAME |PLString|) (OBJECTNAME |PLString|)) :DOCUMENTATION \"Destroy an object\" :PUBLIC? TRUE)"
    (CL:FUNCTION SERVER-DESTROY-OBJECT) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-RELATION"
    "(DEFUN (SERVER-GET-RELATION |PLRelationContainer|) ((MODULENAME |PLString|) (RELATIONNAME |PLString|)))"
    (CL:FUNCTION SERVER-GET-RELATION) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-CONCEPT"
    "(DEFUN (SERVER-GET-CONCEPT |PLConceptContainer|) ((MODULENAME |PLString|) (CONCEPTNAME |PLString|)))"
    (CL:FUNCTION SERVER-GET-CONCEPT) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-INSTANCE"
    "(DEFUN (SERVER-GET-INSTANCE |PLInstanceContainer|) ((MODULENAME |PLString|) (INSTANCENAME |PLString|)))"
    (CL:FUNCTION SERVER-GET-INSTANCE) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-EXPLANATION-FOR-QUERY"
    "(DEFUN (SERVER-GET-EXPLANATION-FOR-QUERY |PLString|) ((QUERY |PLQuery|) (RESULTNUMBER |PLString|)))"
    (CL:FUNCTION SERVER-GET-EXPLANATION-FOR-QUERY) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-INFO"
    "(DEFUN (SERVER-GET-INFO |PLServerInfo|) () :DOCUMENTATION \"Return a data structure describing the characteristics and capabilities of this server instance.\")"
    (CL:FUNCTION SERVER-GET-INFO) NULL)
   (DEFINE-FUNCTION-OBJECT "EXTRACT-MODULE-NAME-FROM-STREAM"
    "(DEFUN (EXTRACT-MODULE-NAME-FROM-STREAM STRING) ((STREAM INPUT-STREAM)))"
    (CL:FUNCTION EXTRACT-MODULE-NAME-FROM-STREAM) NULL)
   (DEFINE-FUNCTION-OBJECT "EXTRACT-MODULE-NAME-FROM-FILE"
    "(DEFUN (EXTRACT-MODULE-NAME-FROM-FILE STRING) ((FILENAME STRING)))"
    (CL:FUNCTION EXTRACT-MODULE-NAME-FROM-FILE) NULL)
   (DEFINE-FUNCTION-OBJECT "CREATE-QUERY-STRING"
    "(DEFUN (CREATE-QUERY-STRING STRING) ((PLQUERY |PLQuery|)))"
    (CL:FUNCTION CREATE-QUERY-STRING) NULL)
   (DEFINE-FUNCTION-OBJECT "CREATE-FOLLOWUP-QUERY-STRING"
    "(DEFUN (CREATE-FOLLOWUP-QUERY-STRING STRING) ((PLQUERY |PLQuery|)))"
    (CL:FUNCTION CREATE-FOLLOWUP-QUERY-STRING) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-PL-TUPLE-FROM-PROPOSITION"
    "(DEFUN (MAKE-PL-TUPLE-FROM-PROPOSITION |PLTuple|) ((PROPOSITION PROPOSITION)))"
    (CL:FUNCTION MAKE-PL-TUPLE-FROM-PROPOSITION) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-PL-TUPLE"
    "(DEFUN (MAKE-PL-TUPLE |PLTuple|) ((TUPLE (CONS OF OBJECT))))"
    (CL:FUNCTION MAKE-PL-TUPLE) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-PL-OBJECT-UNION"
    "(DEFUN (MAKE-PL-OBJECT-UNION |PLObjectUnion|) ((OBJECT OBJECT)))"
    (CL:FUNCTION MAKE-PL-OBJECT-UNION) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-MODULES"
    "(DEFUN (GET-MODULES |PLModuleContainer|) ((MODULE MODULE)))"
    (CL:FUNCTION GET-MODULES) NULL)
   (DEFINE-FUNCTION-OBJECT "CODE-MODULE?"
    "(DEFUN (CODE-MODULE? BOOLEAN) ((MODULE MODULE)))"
    (CL:FUNCTION CODE-MODULE?) NULL)
   (DEFINE-FUNCTION-OBJECT "COLLECT-ALL-MODULES"
    "(DEFUN (COLLECT-ALL-MODULES (LIST OF MODULE)) ((MODULE MODULE) (COLLECTEDMODULES (LIST OF MODULE))))"
    (CL:FUNCTION COLLECT-ALL-MODULES) NULL)
   (DEFINE-FUNCTION-OBJECT "CREATE-MODULE-CONTAINER"
    "(DEFUN (CREATE-MODULE-CONTAINER |PLModuleContainer|) ((COLLECTEDMODULES (LIST OF MODULE))))"
    (CL:FUNCTION CREATE-MODULE-CONTAINER) NULL)))

(CL:DEFUN HELP-STARTUP-GUI-SERVER-API3 ()
  (CL:PROGN
   (DEFINE-FUNCTION-OBJECT "GET-STELLA-LITERAL-CONCEPTS"
    "(DEFUN (GET-STELLA-LITERAL-CONCEPTS (LIST OF NAMED-DESCRIPTION)) ())"
    (CL:FUNCTION GET-STELLA-LITERAL-CONCEPTS) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-STELLA-LITERAL-CONCEPTS-HELPER"
    "(DEFUN GET-STELLA-LITERAL-CONCEPTS-HELPER ((MODULE MODULE) (CONCEPT NAMED-DESCRIPTION) (COLLECTEDCONCEPTS (LIST OF NAMED-DESCRIPTION))))"
    (CL:FUNCTION GET-STELLA-LITERAL-CONCEPTS-HELPER) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-CONCEPTS"
    "(DEFUN (GET-CONCEPTS |PLConceptContainer|) ((MODULE MODULE)))"
    (CL:FUNCTION GET-CONCEPTS) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-CONCEPTS-WITH-PREFIX"
    "(DEFUN (GET-CONCEPTS-WITH-PREFIX |PLConceptContainer|) ((MODULE MODULE) (PREFIX STRING)))"
    (CL:FUNCTION GET-CONCEPTS-WITH-PREFIX) NULL)
   (DEFINE-FUNCTION-OBJECT "CREATE-CONCEPT-CONTAINER"
    "(DEFUN (CREATE-CONCEPT-CONTAINER |PLConceptContainer|) ((COLLECTEDCONCEPTS (LIST OF DESCRIPTION)) (MODULE MODULE) (INCLUDECHILDREN? BOOLEAN)))"
    (CL:FUNCTION CREATE-CONCEPT-CONTAINER) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-RELATIONS"
    "(DEFUN (GET-RELATIONS |PLRelationContainer|) ((MODULE MODULE)))"
    (CL:FUNCTION GET-RELATIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-RELATIONS-WITH-PREFIX"
    "(DEFUN (GET-RELATIONS-WITH-PREFIX |PLRelationContainer|) ((MODULE MODULE) (PREFIX STRING)))"
    (CL:FUNCTION GET-RELATIONS-WITH-PREFIX) NULL)
   (DEFINE-FUNCTION-OBJECT "CREATE-RELATION-CONTAINER"
    "(DEFUN (CREATE-RELATION-CONTAINER |PLRelationContainer|) ((COLLECTEDRELATIONS (LIST OF DESCRIPTION)) (MODULE MODULE) (INCLUDECHILDREN? BOOLEAN)))"
    (CL:FUNCTION CREATE-RELATION-CONTAINER) NULL)
   (DEFINE-FUNCTION-OBJECT "CREATE-MODULE-COLLECTION"
    "(DEFUN (CREATE-MODULE-COLLECTION |PLSurrogateCollection|) ((MODULES (LIST OF MODULE))))"
    (CL:FUNCTION CREATE-MODULE-COLLECTION) NULL)
   (DEFINE-FUNCTION-OBJECT "CREATE-SURROGATE-COLLECTION"
    "(DEFUN (CREATE-SURROGATE-COLLECTION |PLSurrogateCollection|) ((SURROGATES (LIST OF SURROGATE))))"
    (CL:FUNCTION CREATE-SURROGATE-COLLECTION) NULL)
   (DEFINE-FUNCTION-OBJECT
    "CREATE-SURROGATE-COLLECTION-FOR-LOGIC-OBJECT"
    "(DEFUN (CREATE-SURROGATE-COLLECTION-FOR-LOGIC-OBJECT |PLSurrogateCollection|) ((RELATIONS (LIST OF LOGIC-OBJECT))))"
    (CL:FUNCTION CREATE-SURROGATE-COLLECTION-FOR-LOGIC-OBJECT) NULL)
   (DEFINE-FUNCTION-OBJECT "CREATE-SUPERRELATIONS-CONTAINER"
    "(DEFUN (CREATE-SUPERRELATIONS-CONTAINER |PLSurrogateCollection|) ((RELATION LOGIC-OBJECT) (MODULE MODULE)))"
    (CL:FUNCTION CREATE-SUPERRELATIONS-CONTAINER) NULL)
   (DEFINE-FUNCTION-OBJECT "CREATE-VARIABLES-LIST"
    "(DEFUN (CREATE-VARIABLES-LIST |PLVariableList|) ((RELATION LOGIC-OBJECT)))"
    (CL:FUNCTION CREATE-VARIABLES-LIST) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-PL-VARIABLE"
    "(DEFUN (MAKE-PL-VARIABLE |PLVariable|) ((VARIABLENAME STRING) (VARIABLETYPE SURROGATE)))"
    (CL:FUNCTION MAKE-PL-VARIABLE) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-PL-RELATION"
    "(DEFUN (MAKE-PL-RELATION |PLRelation|) ((RELATION LOGIC-OBJECT) (MODULENAME STRING)))"
    (CL:FUNCTION MAKE-PL-RELATION) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-PL-CONCEPT"
    "(DEFUN (MAKE-PL-CONCEPT |PLConcept|) ((CONCEPT LOGIC-OBJECT)))"
    (CL:FUNCTION MAKE-PL-CONCEPT) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-PL-RELATIONS"
    "(DEFUN (MAKE-PL-RELATIONS (LIST OF |PLRelation|)) ((RELATIONS (LIST OF DESCRIPTION)) (MODULENAME STRING)))"
    (CL:FUNCTION MAKE-PL-RELATIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-MODULE-SURROGATE"
    "(DEFUN (MAKE-MODULE-SURROGATE |PLSurrogate|) ((MODULE MODULE)))"
    (CL:FUNCTION MAKE-MODULE-SURROGATE) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-SURROGATE-SURROGATE"
    "(DEFUN (MAKE-SURROGATE-SURROGATE |PLSurrogate|) ((SURROGATE SURROGATE)))"
    (CL:FUNCTION MAKE-SURROGATE-SURROGATE) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-LOGIC-SURROGATE"
    "(DEFUN (MAKE-LOGIC-SURROGATE |PLSurrogate|) ((OBJ LOGIC-OBJECT)))"
    (CL:FUNCTION MAKE-LOGIC-SURROGATE) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-ALL-RELATIONS"
    "(DEFUN (GET-ALL-RELATIONS (LIST OF DESCRIPTION)) ((MODULE MODULE)))"
    (CL:FUNCTION GET-ALL-RELATIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-ALL-RELATIONS-WITH-PREFIX"
    "(DEFUN (GET-ALL-RELATIONS-WITH-PREFIX (LIST OF DESCRIPTION)) ((MODULE MODULE) (LOCAL? BOOLEAN) (PREFIX STRING)))"
    (CL:FUNCTION GET-ALL-RELATIONS-WITH-PREFIX) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-ALL-CONCEPTS"
    "(DEFUN (GET-ALL-CONCEPTS (LIST OF DESCRIPTION)) ((MODULE MODULE) (LOCAL? BOOLEAN)))"
    (CL:FUNCTION GET-ALL-CONCEPTS) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-ALL-CONCEPTS-WITH-PREFIX"
    "(DEFUN (GET-ALL-CONCEPTS-WITH-PREFIX (LIST OF DESCRIPTION)) ((MODULE MODULE) (LOCAL? BOOLEAN) (PREFIX STRING)))"
    (CL:FUNCTION GET-ALL-CONCEPTS-WITH-PREFIX) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-SUBCONCEPTS"
    "(DEFUN (GET-SUBCONCEPTS (LIST OF DESCRIPTION)) ((CONCEPT DESCRIPTION) (MODULE MODULE)))"
    (CL:FUNCTION GET-SUBCONCEPTS) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-SUBRELATIONS"
    "(DEFUN (GET-SUBRELATIONS (LIST OF DESCRIPTION)) ((RELATION DESCRIPTION) (MODULE MODULE)))"
    (CL:FUNCTION GET-SUBRELATIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-SUPERCONCEPTS"
    "(DEFUN (GET-SUPERCONCEPTS (LIST OF DESCRIPTION)) ((CONCEPT DESCRIPTION) (MODULE MODULE)))"
    (CL:FUNCTION GET-SUPERCONCEPTS) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-SUPERRELATIONS"
    "(DEFUN (GET-SUPERRELATIONS (LIST OF DESCRIPTION)) ((RELATION DESCRIPTION) (MODULE MODULE)))"
    (CL:FUNCTION GET-SUPERRELATIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-PL-INSTANCE"
    "(DEFUN (MAKE-PL-INSTANCE |PLInstance|) ((INSTANCE LOGIC-OBJECT)))"
    (CL:FUNCTION MAKE-PL-INSTANCE) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-PL-INSTANCES"
    "(DEFUN (MAKE-PL-INSTANCES (LIST OF |PLInstance|)) ((INSTANCES (LIST OF LOGIC-OBJECT)) (SKIPUNINTERNEDINSTANCES? BOOLEAN)))"
    (CL:FUNCTION MAKE-PL-INSTANCES) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-PL-PROPOSITION"
    "(DEFUN (MAKE-PL-PROPOSITION |PLProposition|) ((PROPOSITION PROPOSITION) (MODULE MODULE) (ISRULE BOOLEAN)))"
    (CL:FUNCTION MAKE-PL-PROPOSITION) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-PL-PROPOSITIONS"
    "(DEFUN (MAKE-PL-PROPOSITIONS (LIST OF |PLProposition|)) ((PROPOSITIONS (LIST OF PROPOSITION)) (MODULE MODULE) (ISRULE BOOLEAN)))"
    (CL:FUNCTION MAKE-PL-PROPOSITIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-DOCUMENTATION-FOR-OBJECT"
    "(DEFUN (GET-DOCUMENTATION-FOR-OBJECT |PLString|) ((MODULENAME STRING) (OBJECTNAME STRING)))"
    (CL:FUNCTION GET-DOCUMENTATION-FOR-OBJECT) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-DIRECT-RELATIONS-FOR-CONCEPT"
    "(DEFUN (GET-DIRECT-RELATIONS-FOR-CONCEPT (LIST OF DESCRIPTION)) ((MODULE MODULE) (CONCEPT LOGIC-OBJECT)))"
    (CL:FUNCTION GET-DIRECT-RELATIONS-FOR-CONCEPT) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-INHERITED-RELATIONS-FOR-CONCEPT"
    "(DEFUN (GET-INHERITED-RELATIONS-FOR-CONCEPT (LIST OF DESCRIPTION)) ((MODULE MODULE) (CONCEPT LOGIC-OBJECT)))"
    (CL:FUNCTION GET-INHERITED-RELATIONS-FOR-CONCEPT) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-PROPOSITIONS-FOR-OBJECT"
    "(DEFUN (GET-PROPOSITIONS-FOR-OBJECT (LIST OF PROPOSITION)) ((MODULENAME STRING) (INSTANCENAME STRING) (RELATION? BOOLEAN)) :DOCUMENTATION \"Get all the propositions for a given instance\")"
    (CL:FUNCTION GET-PROPOSITIONS-FOR-OBJECT) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-RULES-FOR-RELATION"
    "(DEFUN (GET-RULES-FOR-RELATION (LIST OF PROPOSITION)) ((MODULENAME STRING) (INSTANCENAME STRING)) :DOCUMENTATION \"Get all the rules for a given logic object\")"
    (CL:FUNCTION GET-RULES-FOR-RELATION) NULL)
   (DEFINE-FUNCTION-OBJECT "RULE-PROPOSITION?"
    "(DEFUN (RULE-PROPOSITION? BOOLEAN) ((PROPOSITION PROPOSITION)))"
    (CL:FUNCTION RULE-PROPOSITION?) NULL)
   (DEFINE-FUNCTION-OBJECT "SUBRELATION-RULE?"
    "(DEFUN (SUBRELATION-RULE? BOOLEAN) ((RULE PROPOSITION)))"
    (CL:FUNCTION SUBRELATION-RULE?) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-RELEVANT-RULES-FOR-RELATION"
    "(DEFUN (GET-RELEVANT-RULES-FOR-RELATION (LIST OF PROPOSITION)) ((MODULENAME STRING) (RELATIONNAME STRING)) :DOCUMENTATION \"Get all the relevant rules for a given logic object.\")"
    (CL:FUNCTION GET-RELEVANT-RULES-FOR-RELATION) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-PROPOSITIONS-FOR-INSTANCE-AND-RELATION"
    "(DEFUN (GET-PROPOSITIONS-FOR-INSTANCE-AND-RELATION (LIST OF PROPOSITION)) ((MODULENAME STRING) (INSTANCENAME STRING) (RELATIONNAME STRING)))"
    (CL:FUNCTION GET-PROPOSITIONS-FOR-INSTANCE-AND-RELATION) NULL)
   (DEFINE-FUNCTION-OBJECT "EVALUATE-LOGIC-COMMAND-IN-MODULE"
    "(DEFUN (EVALUATE-LOGIC-COMMAND-IN-MODULE STRING) ((COMMAND STRING) (MODULENAME STRING) (FINALIZE? BOOLEAN)))"
    (CL:FUNCTION EVALUATE-LOGIC-COMMAND-IN-MODULE) NULL)
   (DEFINE-FUNCTION-OBJECT "IS-QUERY-PARTIAL?"
    "(DEFUN (IS-QUERY-PARTIAL? BOOLEAN) ((PLQUERY |PLQuery|)))"
    (CL:FUNCTION IS-QUERY-PARTIAL?) NULL)
   (DEFINE-FUNCTION-OBJECT "EVALUATE-QUERY-COMMAND-IN-MODULE"
    "(DEFUN (EVALUATE-QUERY-COMMAND-IN-MODULE CONS) ((SESSION /HTTP/SESSION) (QUERY STRING) (MODULENAME STRING) (CONTINUATIONQUERY? BOOLEAN) (PARTIALQUERY? BOOLEAN)))"
    (CL:FUNCTION EVALUATE-QUERY-COMMAND-IN-MODULE) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-PROPOSITION-STRING"
    "(DEFUN (GET-PROPOSITION-STRING STRING) ((PROP PROPOSITION) (MODULE MODULE)))"
    (CL:FUNCTION GET-PROPOSITION-STRING) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-TRUTH-VALUE-STRING"
    "(DEFUN (GET-TRUTH-VALUE-STRING STRING) ((TV TRUTH-VALUE)))"
    (CL:FUNCTION GET-TRUTH-VALUE-STRING) NULL)
   (DEFINE-FUNCTION-OBJECT "XMLIFY-STRING"
    "(DEFUN (XMLIFY-STRING STRING) ((INSTRING STRING)))"
    (CL:FUNCTION XMLIFY-STRING) NULL)
   (DEFINE-FUNCTION-OBJECT "XMLIFY-FORMATTED-STRING"
    "(DEFUN (XMLIFY-FORMATTED-STRING STRING) ((INSTRING STRING)))"
    (CL:FUNCTION XMLIFY-FORMATTED-STRING) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-STRINGIFIED-MODULE"
    "(DEFUN (GET-STRINGIFIED-MODULE STRING) ((MODULE MODULE)))"
    (CL:FUNCTION GET-STRINGIFIED-MODULE) NULL)
   (DEFINE-FUNCTION-OBJECT "REPLACE-CHOKABLE-CHARS-WITH-ENTITIES"
    "(DEFUN (REPLACE-CHOKABLE-CHARS-WITH-ENTITIES STRING) ((INSTRING STRING)))"
    (CL:FUNCTION REPLACE-CHOKABLE-CHARS-WITH-ENTITIES) NULL)
   (DEFINE-FUNCTION-OBJECT
    "WRITE-HTML-CHARACTER-QUOTING-CHOKABLE-CHARACTERS"
    "(DEFUN WRITE-HTML-CHARACTER-QUOTING-CHOKABLE-CHARACTERS ((STREAM NATIVE-OUTPUT-STREAM) (CH CHARACTER)) :GLOBALLY-INLINE? TRUE (IF (OR (= (CHARACTER-CODE CH) 10) (> (CHARACTER-CODE CH) 127)) (PRINT-STREAM STREAM \"&#\" (CHARACTER-CODE CH) \";\") (WRITE-HTML-CHARACTER-QUOTING-SPECIAL-CHARACTERS STREAM CH)))"
    (CL:FUNCTION WRITE-HTML-CHARACTER-QUOTING-CHOKABLE-CHARACTERS)
    NULL)
   (DEFINE-FUNCTION-OBJECT "WRITE-HTML-QUOTING-CHOKABLE-CHARACTERS"
    "(DEFUN WRITE-HTML-QUOTING-CHOKABLE-CHARACTERS ((STREAM NATIVE-OUTPUT-STREAM) (INPUT STRING)))"
    (CL:FUNCTION WRITE-HTML-QUOTING-CHOKABLE-CHARACTERS) NULL)
   (DEFINE-FUNCTION-OBJECT "COMPACT-WHITESPACE"
    "(DEFUN (COMPACT-WHITESPACE STRING) ((INSTRING STRING)))"
    (CL:FUNCTION COMPACT-WHITESPACE) NULL)
   (DEFINE-FUNCTION-OBJECT "STRIP-NEWLINES"
    "(DEFUN (STRIP-NEWLINES STRING) ((INSTRING STRING)))"
    (CL:FUNCTION STRIP-NEWLINES) NULL)
   (DEFINE-FUNCTION-OBJECT "STRIP-MODULE"
    "(DEFUN (STRIP-MODULE STRING) ((INSTRING STRING) (MODULE MODULE)))"
    (CL:FUNCTION STRIP-MODULE) NULL)
   (DEFINE-FUNCTION-OBJECT "REPLACE-DOUBLE-QUOTES-WITH-SINGLE-QUOTES"
    "(DEFUN (REPLACE-DOUBLE-QUOTES-WITH-SINGLE-QUOTES STRING) ((INSTRING STRING)))"
    (CL:FUNCTION REPLACE-DOUBLE-QUOTES-WITH-SINGLE-QUOTES) NULL)
   (DEFINE-FUNCTION-OBJECT "LOAD-INDEX-FILE"
    "(DEFUN (LOAD-INDEX-FILE (CONS OF (CONS OF STRING-WRAPPER))) ())"
    (CL:FUNCTION LOAD-INDEX-FILE) NULL)
   (DEFINE-FUNCTION-OBJECT "SAVE-INDEX-FILE"
    "(DEFUN SAVE-INDEX-FILE ((INDEX (CONS OF (CONS OF STRING-WRAPPER)))))"
    (CL:FUNCTION SAVE-INDEX-FILE) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-PL-FILE"
    "(DEFUN (MAKE-PL-FILE |PLModuleFile|) ((FILEDESCRIPTION (CONS OF STRING-WRAPPER))))"
    (CL:FUNCTION MAKE-PL-FILE) NULL)
   (DEFINE-FUNCTION-OBJECT "FIND-FILENAME-FOR-KB"
    "(DEFUN (FIND-FILENAME-FOR-KB STRING) ((FILEINDEX |PLModuleFileList|) (KBNAME STRING)))"
    (CL:FUNCTION FIND-FILENAME-FOR-KB) NULL)))

(CL:DEFUN HELP-STARTUP-GUI-SERVER-API4 ()
  (CL:PROGN
   (DEFINE-FUNCTION-OBJECT "PARSE-MATCH-STRING"
    "(DEFUN (PARSE-MATCH-STRING (CONS OF OBJECT)) ((MATCHSTRING STRING) (CASESENSITIVE? STRING)))"
    (CL:FUNCTION PARSE-MATCH-STRING) NULL)
   (DEFINE-FUNCTION-OBJECT "SEARCH-STRING-MATCH?"
    "(DEFUN (SEARCH-STRING-MATCH? BOOLEAN) ((INPUTSTRING STRING) (MATCHLIST (CONS OF OBJECT))))"
    (CL:FUNCTION SEARCH-STRING-MATCH?) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-FIRST-NON-WILD"
    "(DEFUN (GET-FIRST-NON-WILD STRING-WRAPPER) ((MATCHLIST (CONS OF OBJECT))))"
    (CL:FUNCTION GET-FIRST-NON-WILD) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-REST-AFTER-FIRST-NON-WILD"
    "(DEFUN (GET-REST-AFTER-FIRST-NON-WILD (CONS OF OBJECT)) ((MATCHLIST (CONS OF OBJECT))))"
    (CL:FUNCTION GET-REST-AFTER-FIRST-NON-WILD) NULL)
   (DEFINE-FUNCTION-OBJECT "SEARCH-LOGIC-OBJECTS"
    "(DEFUN (SEARCH-LOGIC-OBJECTS (LIST OF |PLSearchResultItem|)) ((MODULENAME STRING) (OBJECTS (LIST OF LOGIC-OBJECT)) (MATCHLIST (CONS OF OBJECT)) (CASESENSITIVE? STRING)))"
    (CL:FUNCTION SEARCH-LOGIC-OBJECTS) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-LOGIC-OBJECT-NAME"
    "(DEFUN (GET-LOGIC-OBJECT-NAME STRING) ((OBJECT LOGIC-OBJECT) (CASESENSITIVE? STRING)))"
    (CL:FUNCTION GET-LOGIC-OBJECT-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "SEARCH-CONCEPTS"
    "(DEFUN (SEARCH-CONCEPTS (LIST OF |PLSearchResultItem|)) ((MODULENAME STRING) (MATCHLIST (CONS OF OBJECT)) (CASESENSITIVE? STRING)))"
    (CL:FUNCTION SEARCH-CONCEPTS) NULL)
   (DEFINE-FUNCTION-OBJECT "SEARCH-RELATIONS"
    "(DEFUN (SEARCH-RELATIONS (LIST OF |PLSearchResultItem|)) ((MODULENAME STRING) (MATCHLIST (CONS OF OBJECT)) (CASESENSITIVE? STRING)))"
    (CL:FUNCTION SEARCH-RELATIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "SEARCH-INSTANCES"
    "(DEFUN (SEARCH-INSTANCES (LIST OF |PLSearchResultItem|)) ((MODULENAME STRING) (MATCHLIST (CONS OF OBJECT)) (CASESENSITIVE? STRING)))"
    (CL:FUNCTION SEARCH-INSTANCES) NULL)
   (DEFINE-FUNCTION-OBJECT "SEARCH-ALL-MODULES"
    "(DEFUN (SEARCH-ALL-MODULES (LIST OF |PLSearchResultItem|)) ((SEARCHSTRING STRING) (SEARCHINSTANCE? STRING) (SEARCHCONCEPT? STRING) (SEARCHRELATION? STRING) (CASESENSITIVE? STRING)))"
    (CL:FUNCTION SEARCH-ALL-MODULES) NULL)
   (DEFINE-FUNCTION-OBJECT "SEARCH-MODULE"
    "(DEFUN (SEARCH-MODULE (LIST OF |PLSearchResultItem|)) ((MODULENAME STRING) (SEARCHSTRING STRING) (SEARCHINSTANCE? STRING) (SEARCHCONCEPT? STRING) (SEARCHRELATION? STRING) (CASESENSITIVE? STRING)))"
    (CL:FUNCTION SEARCH-MODULE) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-SEARCH-RESULT-ITEM"
    "(DEFUN (MAKE-SEARCH-RESULT-ITEM |PLSearchResultItem|) ((MODULENAME STRING) (OBJECT LOGIC-OBJECT)))"
    (CL:FUNCTION MAKE-SEARCH-RESULT-ITEM) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-DIRECTORY-LISTING"
    "(DEFUN (GET-DIRECTORY-LISTING (LIST OF LIST)) ((CURRENTDIRECTORY STRING)))"
    (CL:FUNCTION GET-DIRECTORY-LISTING) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-DIRECTORY-LISTING"
    "(DEFUN (SERVER-GET-DIRECTORY-LISTING |PLDirectoryContents|) ((CURRENTDIRECTORY |PLString|) (EXTENSIONFILTER |PLString|)) :PUBLIC? TRUE :DOCUMENTATION \"Return the files and directories in 'currentDirectory'.\")"
    (CL:FUNCTION SERVER-GET-DIRECTORY-LISTING) NULL)
   (DEFINE-FUNCTION-OBJECT "SERVER-GET-DEFAULT-DIRECTORY-LISTING"
    "(DEFUN (SERVER-GET-DEFAULT-DIRECTORY-LISTING |PLDirectoryContents|) ((EXTENSIONFILTER |PLString|)) :PUBLIC? TRUE :DOCUMENTATION \"Return the files and directories in the directory designated by '*DEFAULT-KB-DIRECTORY*'.\")"
    (CL:FUNCTION SERVER-GET-DEFAULT-DIRECTORY-LISTING) NULL)
   (DEFINE-FUNCTION-OBJECT "DISPATCH-CALL"
    "(DEFUN (DISPATCH-CALL OBJECT) ((FUNCTIONNAME STRING) (ARGS CONS)))"
    (CL:FUNCTION DISPATCH-CALL) NULL)
   (DEFINE-FUNCTION-OBJECT "INITIALIZE-DISPATCH-TABLE"
    "(DEFUN INITIALIZE-DISPATCH-TABLE ())"
    (CL:FUNCTION INITIALIZE-DISPATCH-TABLE) NULL)
   (DEFINE-FUNCTION-OBJECT "MEMBER-TEST"
    "(DEFUN MEMBER-TEST ((CONCEPT |PLConcept|)))"
    (CL:FUNCTION MEMBER-TEST) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-CONCEPTS-FOR-MODULE"
    "(DEFUN (TEST-SERVER-GET-CONCEPTS-FOR-MODULE |PLConceptContainer|) ())"
    (CL:FUNCTION TEST-SERVER-GET-CONCEPTS-FOR-MODULE) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-INSTANCES-FOR-MODULE"
    "(DEFUN (TEST-SERVER-GET-INSTANCES-FOR-MODULE |PLInstanceContainer|) ())"
    (CL:FUNCTION TEST-SERVER-GET-INSTANCES-FOR-MODULE) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-RELATIONS-FOR-MODULE"
    "(DEFUN (TEST-SERVER-GET-RELATIONS-FOR-MODULE |PLRelationContainer|) ())"
    (CL:FUNCTION TEST-SERVER-GET-RELATIONS-FOR-MODULE) NULL)
   (DEFINE-FUNCTION-OBJECT
    "TEST-SERVER-GET-DIRECT-INSTANCES-FOR-CONCEPT"
    "(DEFUN (TEST-SERVER-GET-DIRECT-INSTANCES-FOR-CONCEPT |PLInstanceContainer|) ())"
    (CL:FUNCTION TEST-SERVER-GET-DIRECT-INSTANCES-FOR-CONCEPT) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-INSTANCES-FOR-CONCEPT"
    "(DEFUN (TEST-SERVER-GET-INSTANCES-FOR-CONCEPT |PLInstanceContainer|) ())"
    (CL:FUNCTION TEST-SERVER-GET-INSTANCES-FOR-CONCEPT) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-PROPOSITIONS-FOR-MODULE"
    "(DEFUN (TEST-SERVER-GET-PROPOSITIONS-FOR-MODULE |PLPropositionContainer|) ())"
    (CL:FUNCTION TEST-SERVER-GET-PROPOSITIONS-FOR-MODULE) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-PROPOSITIONS-FOR-INSTANCE"
    "(DEFUN (TEST-SERVER-GET-PROPOSITIONS-FOR-INSTANCE |PLPropositionContainer|) ())"
    (CL:FUNCTION TEST-SERVER-GET-PROPOSITIONS-FOR-INSTANCE) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-TYPES-FOR-INSTANCE"
    "(DEFUN (TEST-SERVER-GET-TYPES-FOR-INSTANCE |PLSurrogateCollection|) ())"
    (CL:FUNCTION TEST-SERVER-GET-TYPES-FOR-INSTANCE) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-DOCUMENTATION-FOR-INSTANCE"
    "(DEFUN (TEST-SERVER-GET-DOCUMENTATION-FOR-INSTANCE |PLString|) ())"
    (CL:FUNCTION TEST-SERVER-GET-DOCUMENTATION-FOR-INSTANCE) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-RELATIONS-FOR-CONCEPT"
    "(DEFUN (TEST-SERVER-GET-RELATIONS-FOR-CONCEPT |PLRelationContainer|) ())"
    (CL:FUNCTION TEST-SERVER-GET-RELATIONS-FOR-CONCEPT) NULL)
   (DEFINE-FUNCTION-OBJECT
    "TEST-SERVER-GET-INHERITED-RELATIONS-FOR-CONCEPT"
    "(DEFUN (TEST-SERVER-GET-INHERITED-RELATIONS-FOR-CONCEPT |PLRelationContainer|) ())"
    (CL:FUNCTION TEST-SERVER-GET-INHERITED-RELATIONS-FOR-CONCEPT) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-DOCUMENTATION-FOR-CONCEPT"
    "(DEFUN (TEST-SERVER-GET-DOCUMENTATION-FOR-CONCEPT |PLString|) ())"
    (CL:FUNCTION TEST-SERVER-GET-DOCUMENTATION-FOR-CONCEPT) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-SOURCE-FOR-CONCEPT"
    "(DEFUN (TEST-SERVER-GET-SOURCE-FOR-CONCEPT |PLString|) ())"
    (CL:FUNCTION TEST-SERVER-GET-SOURCE-FOR-CONCEPT) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-DOCUMENTATION-FOR-RELATION"
    "(DEFUN (TEST-SERVER-GET-DOCUMENTATION-FOR-RELATION |PLString|) ())"
    (CL:FUNCTION TEST-SERVER-GET-DOCUMENTATION-FOR-RELATION) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-SUPERCONCEPTS-FOR-CONCEPT"
    "(DEFUN (TEST-SERVER-GET-SUPERCONCEPTS-FOR-CONCEPT |PLSurrogateCollection|) ())"
    (CL:FUNCTION TEST-SERVER-GET-SUPERCONCEPTS-FOR-CONCEPT) NULL)
   (DEFINE-FUNCTION-OBJECT
    "TEST-SERVER-GET-SUPERRELATIONS-FOR-RELATION"
    "(DEFUN (TEST-SERVER-GET-SUPERRELATIONS-FOR-RELATION |PLSurrogateCollection|) ())"
    (CL:FUNCTION TEST-SERVER-GET-SUPERRELATIONS-FOR-RELATION) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-INCLUDES-FOR-MODULE"
    "(DEFUN (TEST-SERVER-GET-INCLUDES-FOR-MODULE |PLSurrogateCollection|) ())"
    (CL:FUNCTION TEST-SERVER-GET-INCLUDES-FOR-MODULE) NULL)
   (DEFINE-FUNCTION-OBJECT
    "TEST-SERVER-GET-SHADOWED-SURROGATES-FOR-MODULE"
    "(DEFUN (TEST-SERVER-GET-SHADOWED-SURROGATES-FOR-MODULE |PLSurrogateCollection|) ())"
    (CL:FUNCTION TEST-SERVER-GET-SHADOWED-SURROGATES-FOR-MODULE) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-USES-FOR-MODULE"
    "(DEFUN (TEST-SERVER-GET-USES-FOR-MODULE |PLSurrogateCollection|) ())"
    (CL:FUNCTION TEST-SERVER-GET-USES-FOR-MODULE) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-VARIABLES-FOR-RELATION"
    "(DEFUN (TEST-SERVER-GET-VARIABLES-FOR-RELATION |PLVariableList|) ())"
    (CL:FUNCTION TEST-SERVER-GET-VARIABLES-FOR-RELATION) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-PROPOSITIONS-FOR-CONCEPT"
    "(DEFUN (TEST-SERVER-GET-PROPOSITIONS-FOR-CONCEPT |PLPropositionContainer|) ())"
    (CL:FUNCTION TEST-SERVER-GET-PROPOSITIONS-FOR-CONCEPT) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-RULES-FOR-CONCEPT"
    "(DEFUN (TEST-SERVER-GET-RULES-FOR-CONCEPT |PLPropositionContainer|) ())"
    (CL:FUNCTION TEST-SERVER-GET-RULES-FOR-CONCEPT) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-PROPOSITIONS-FOR-RELATION"
    "(DEFUN (TEST-SERVER-GET-PROPOSITIONS-FOR-RELATION |PLPropositionContainer|) ())"
    (CL:FUNCTION TEST-SERVER-GET-PROPOSITIONS-FOR-RELATION) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-RULES-FOR-RELATION"
    "(DEFUN (TEST-SERVER-GET-RULES-FOR-RELATION |PLPropositionContainer|) ())"
    (CL:FUNCTION TEST-SERVER-GET-RULES-FOR-RELATION) NULL)
   (DEFINE-FUNCTION-OBJECT
    "TEST-SERVER-GET-PROPOSITIONS-FOR-INSTANCE-AND-RELATION"
    "(DEFUN (TEST-SERVER-GET-PROPOSITIONS-FOR-INSTANCE-AND-RELATION |PLPropositionContainer|) ())"
    (CL:FUNCTION
     TEST-SERVER-GET-PROPOSITIONS-FOR-INSTANCE-AND-RELATION)
    NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-EVALUATE-LOGIC-COMMAND"
    "(DEFUN (TEST-SERVER-EVALUATE-LOGIC-COMMAND |PLString|) ((COMMAND STRING)))"
    (CL:FUNCTION TEST-SERVER-EVALUATE-LOGIC-COMMAND) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-LOAD-KB"
    "(DEFUN (TEST-SERVER-LOAD-KB |PLString|) ())"
    (CL:FUNCTION TEST-SERVER-LOAD-KB) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-CLEAR-KB"
    "(DEFUN TEST-SERVER-CLEAR-KB ())"
    (CL:FUNCTION TEST-SERVER-CLEAR-KB) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-SAVE-KB"
    "(DEFUN (TEST-SERVER-SAVE-KB |PLString|) ())"
    (CL:FUNCTION TEST-SERVER-SAVE-KB) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-SAVE-KB2"
    "(DEFUN (TEST-SERVER-SAVE-KB2 |PLFile|) ())"
    (CL:FUNCTION TEST-SERVER-SAVE-KB2) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-PL-QUERY"
    "(DEFUN (MAKE-PL-QUERY |PLQuery|) ())" (CL:FUNCTION MAKE-PL-QUERY)
    NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-QUERY"
    "(DEFUN (TEST-SERVER-QUERY |PLQueryResult|) ())"
    (CL:FUNCTION TEST-SERVER-QUERY) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-SEARCH1"
    "(DEFUN (TEST-SERVER-SEARCH1 |PLSearchResult|) ())"
    (CL:FUNCTION TEST-SERVER-SEARCH1) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-DEFAULT-DIRECTORY-LISTING"
    "(DEFUN (TEST-SERVER-GET-DEFAULT-DIRECTORY-LISTING |PLDirectoryContents|) ())"
    (CL:FUNCTION TEST-SERVER-GET-DEFAULT-DIRECTORY-LISTING) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-EXTENSION-FOR-RELATION"
    "(DEFUN (TEST-SERVER-GET-EXTENSION-FOR-RELATION |PLQueryResult|) ())"
    (CL:FUNCTION TEST-SERVER-GET-EXTENSION-FOR-RELATION) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-RELATION"
    "(DEFUN (TEST-SERVER-GET-RELATION |PLRelationContainer|) ())"
    (CL:FUNCTION TEST-SERVER-GET-RELATION) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-CONCEPT"
    "(DEFUN (TEST-SERVER-GET-CONCEPT |PLConceptContainer|) ())"
    (CL:FUNCTION TEST-SERVER-GET-CONCEPT) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-INSTANCE"
    "(DEFUN (TEST-SERVER-GET-INSTANCE |PLInstanceContainer|) ())"
    (CL:FUNCTION TEST-SERVER-GET-INSTANCE) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-CONCEPT-COMPLETIONS"
    "(DEFUN (TEST-SERVER-GET-CONCEPT-COMPLETIONS |PLConceptContainer|) ())"
    (CL:FUNCTION TEST-SERVER-GET-CONCEPT-COMPLETIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-RELATION-COMPLETIONS"
    "(DEFUN (TEST-SERVER-GET-RELATION-COMPLETIONS |PLRelationContainer|) ())"
    (CL:FUNCTION TEST-SERVER-GET-RELATION-COMPLETIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-INSTANCE-COMPLETIONS"
    "(DEFUN (TEST-SERVER-GET-INSTANCE-COMPLETIONS |PLInstanceContainer|) ())"
    (CL:FUNCTION TEST-SERVER-GET-INSTANCE-COMPLETIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "TEST-SERVER-DESTROY-OBJECT"
    "(DEFUN (TEST-SERVER-DESTROY-OBJECT |PLString|) ())"
    (CL:FUNCTION TEST-SERVER-DESTROY-OBJECT) NULL)))

(CL:DEFUN STARTUP-GUI-SERVER-API ()
  (CL:LET*
   ((*MODULE*
     (GET-STELLA-MODULE "/POWERLOOM-SERVER/GUI-SERVER"
      (> *STARTUP-TIME-PHASE* 1)))
    (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2)
    (HELP-STARTUP-GUI-SERVER-API1))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 4)
    (CL:SETQ *SERVER-DISPATCH-TABLE* (NEW-STRING-HASH-TABLE)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (HELP-STARTUP-GUI-SERVER-API2) (HELP-STARTUP-GUI-SERVER-API3)
    (HELP-STARTUP-GUI-SERVER-API4)
    (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-EXPLANATION-FOR-QUERY"
     "(DEFUN (TEST-SERVER-GET-EXPLANATION-FOR-QUERY |PLString|) ())"
     (CL:FUNCTION TEST-SERVER-GET-EXPLANATION-FOR-QUERY) NULL)
    (DEFINE-FUNCTION-OBJECT "TEST-SERVER-GET-INFO"
     "(DEFUN (TEST-SERVER-GET-INFO |PLServerInfo|) ())"
     (CL:FUNCTION TEST-SERVER-GET-INFO) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-GUI-SERVER-API"
     "(DEFUN STARTUP-GUI-SERVER-API () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-GUI-SERVER-API) NULL)
    (CL:LET*
     ((FUNCTION
       (LOOKUP-FUNCTION
        SYM-GUI-SERVER-API-GUI-SERVER-STARTUP-GUI-SERVER-API)))
     (SET-DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
      SYM-GUI-SERVER-API-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "_StartupGuiServerApi") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (%IN-MODULE (COPY-CONS-TREE (WRAP-STRING "GUI-SERVER")))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *ALLOW-REMOTE-FILEBROWSING* BOOLEAN FALSE)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *SERVER-LOG-FILE* STRING \"PL:logs;powerloom-server.log\")")
    (%SET-LOGGING-PARAMETERS "PL-Server"
     (CONS-LIST KWD-GUI-SERVER-API-LOG-LEVELS
      (GET-QUOTED-TREE
       "((:NONE :LOW :MEDIUM :HIGH) \"/POWERLOOM-SERVER/GUI-SERVER\")"
       "/POWERLOOM-SERVER/GUI-SERVER")
      KWD-GUI-SERVER-API-LEVEL
      (CL:IF
       (CL:EQ *POWERLOOM-EXECUTION-MODE*
        KWD-GUI-SERVER-API-DEVELOPMENT)
       KWD-GUI-SERVER-API-HIGH KWD-GUI-SERVER-API-LOW)
      KWD-GUI-SERVER-API-PREFIX (WRAP-STRING "PL-Server")
      KWD-GUI-SERVER-API-MAX-WIDTH (WRAP-INTEGER 2000)
      KWD-GUI-SERVER-API-STREAM (WRAP-STRING *SERVER-LOG-FILE*)))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *QUERY-SESSION-TIMEOUT* INTEGER 86400)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *KB-FILENAME-INDEX* STRING \"PL:kbs;kbs.ste\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *KB-DIRECTORY* STRING \"PL:kbs;\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *DEFAULT-KB-DIRECTORY* STRING \"/nfs/topaz/melz/\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *SERVER-DISPATCH-TABLE* (STRING-HASH-TABLE OF STRING FUNCTION-CODE-WRAPPER) (NEW (STRING-HASH-TABLE OF STRING FUNCTION-CODE-WRAPPER)) :DOCUMENTATION \"Hash Table for used for dispatching server API methods.\")")
    (INITIALIZE-DISPATCH-TABLE))))
