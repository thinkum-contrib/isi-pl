;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

#|--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1996-2000              | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied "AS IS",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SYM-IDL-TRANSLATE-FILE-STELLA-METHOD NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-FILE-STELLA-PRINT-METHOD NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-FILE-STELLA-MACRO NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-FILE-STELLA-VERBATIM NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-FILE-STELLA-GLOBAL-VARIABLE NULL)
(CL:DEFVAR KWD-IDL-TRANSLATE-FILE-IDL NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-FILE-STELLA-STARTUP-IDL-TRANSLATE-FILE NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-FILE-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STELLA-MODULE* *MODULE* *TRANSLATIONUNITS* STANDARD-OUTPUT
  EOL *CURRENT-STREAM*))

;;; (DEFUN IDL-TRANSLATE-CLASS-TO-STREAM ...)

(CL:DEFUN IDL-TRANSLATE-CLASS-TO-STREAM (CLASS NATIVE-STREAM)
  (CL:LET* ((SELF-000 (NEW-TRANSLATION-UNIT)))
   (CL:SETF (%TRANSLATION-UNIT.THE-OBJECT SELF-000) CLASS)
   (CL:LET* ((TEMPUNIT SELF-000))
    (CL:LET* ((*CURRENT-STREAM* NULL))
     (CL:DECLARE (CL:SPECIAL *CURRENT-STREAM*))
     (CL:LET* ((SELF-001 (NEW-OUTPUT-STREAM)))
      (CL:SETF (%OUTPUT-STREAM.NATIVE-STREAM SELF-001) NATIVE-STREAM)
      (CL:SETQ *CURRENT-STREAM* SELF-001))
     (IDL-OUTPUT-STATEMENT
      (IDL-TRANSLATE-DEFINE-NATIVE-CLASS-UNIT TEMPUNIT)))))
  :VOID)

;;; (DEFGLOBAL *IDL-TRANSLATED-FILE-SUFFIX* ...)

(CL:PROGN (CL:DEFVAR *IDL-TRANSLATED-FILE-SUFFIX* "") (CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING *IDL-TRANSLATED-FILE-SUFFIX*)))

;;; (DEFUN (IDL-MAKE-CODE-OUTPUT-FILE-NAME FILE-NAME) ...)

(CL:DEFUN IDL-MAKE-CODE-OUTPUT-FILE-NAME (SOURCEFILE)
  (CL:RETURN-FROM IDL-MAKE-CODE-OUTPUT-FILE-NAME
   (CONCATENATE (FILE-NAME-WITHOUT-EXTENSION SOURCEFILE)
    (CONCATENATE *IDL-TRANSLATED-FILE-SUFFIX* ".sidl"))))

;;; (DEFUN IDL-OUTPUT-ALL-UNITS-TO-FILE ...)

(CL:DEFUN IDL-OUTPUT-ALL-UNITS-TO-FILE (SOURCEFILE)
  (CL:LET*
   ((CODEOUTPUTFILE (IDL-MAKE-CODE-OUTPUT-FILE-NAME SOURCEFILE))
    (CODEOUTPUTSTREAM (NEW-OUTPUT-FILE-STREAM CODEOUTPUTFILE))
    (GLOBALS NIL) (METHODS NIL) (VERBATIMSTATEMENTS NIL) (FORMS NIL))
   (CL:LET* ((*CURRENT-STREAM* CODEOUTPUTSTREAM))
    (CL:DECLARE (CL:SPECIAL *CURRENT-STREAM*))
    (CL:SETQ *TRANSLATIONUNITS* (REVERSE *TRANSLATIONUNITS*))
    (CL:LET*
     ((UNIT NULL) (ITER-000 (%LIST.THE-CONS-LIST *TRANSLATIONUNITS*)))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:PROGN (CL:SETQ UNIT (%%VALUE ITER-000))
       (CL:SETQ ITER-000 (%%REST ITER-000)))
      (CL:LET* ((TEST-VALUE-000 (%TRANSLATION-UNIT.CATEGORY UNIT)))
       (CL:COND
        ((CL:OR
          (CL:EQ TEST-VALUE-000 SYM-IDL-TRANSLATE-FILE-STELLA-METHOD)
          (CL:EQ TEST-VALUE-000
           SYM-IDL-TRANSLATE-FILE-STELLA-PRINT-METHOD)
          (CL:EQ TEST-VALUE-000 SYM-IDL-TRANSLATE-FILE-STELLA-MACRO))
         (CL:SETQ METHODS
          (CONS (%TRANSLATION-UNIT.TRANSLATION UNIT) METHODS)))
        ((CL:EQ TEST-VALUE-000 SYM-IDL-TRANSLATE-FILE-STELLA-VERBATIM)
         (CL:SETQ VERBATIMSTATEMENTS
          (CONS (%TRANSLATION-UNIT.TRANSLATION UNIT) VERBATIMSTATEMENTS)))
        ((CL:EQ TEST-VALUE-000
          SYM-IDL-TRANSLATE-FILE-STELLA-GLOBAL-VARIABLE)
         (CL:SETQ GLOBALS
          (CONS (%TRANSLATION-UNIT.TRANSLATION UNIT) GLOBALS)))
        (CL:T
         (CL:SETQ FORMS
          (CONS (%TRANSLATION-UNIT.TRANSLATION UNIT) FORMS)))))))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
     "Writing `" CODEOUTPUTFILE "'..." EOL)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "// "
     CODEOUTPUTFILE EOL EOL)
    (CL:WHEN (TRANSLATE-WITH-COPYRIGHT-HEADER?)
     (OUTPUT-COPYRIGHT-HEADER *CURRENT-STREAM*))
    (CL:LET* ((FORM NULL) (ITER-001 FORMS))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
      (CL:PROGN (CL:SETQ FORM (%%VALUE ITER-001))
       (CL:SETQ ITER-001 (%%REST ITER-001)))
      (IDL-OUTPUT-STATEMENT FORM)))
    (FREE CODEOUTPUTSTREAM)))
  :VOID)

;;; (DEFUN IDL-TRANSLATE-FILE ...)

(CL:DEFUN IDL-TRANSLATE-FILE (FILENAME)
  (TRANSLATE-FILE FILENAME KWD-IDL-TRANSLATE-FILE-IDL FALSE)
  :VOID)

(CL:DEFUN STARTUP-IDL-TRANSLATE-FILE ()
  (CL:LET* ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2)
    (CL:SETQ SYM-IDL-TRANSLATE-FILE-STELLA-METHOD
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD" NULL 0))
    (CL:SETQ SYM-IDL-TRANSLATE-FILE-STELLA-PRINT-METHOD
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT-METHOD" NULL 0))
    (CL:SETQ SYM-IDL-TRANSLATE-FILE-STELLA-MACRO
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MACRO" NULL 0))
    (CL:SETQ SYM-IDL-TRANSLATE-FILE-STELLA-VERBATIM
     (INTERN-RIGID-SYMBOL-WRT-MODULE "VERBATIM" NULL 0))
    (CL:SETQ SYM-IDL-TRANSLATE-FILE-STELLA-GLOBAL-VARIABLE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "GLOBAL-VARIABLE" NULL 0))
    (CL:SETQ KWD-IDL-TRANSLATE-FILE-IDL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "IDL" NULL 2))
    (CL:SETQ SYM-IDL-TRANSLATE-FILE-STELLA-STARTUP-IDL-TRANSLATE-FILE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-IDL-TRANSLATE-FILE" NULL 0))
    (CL:SETQ SYM-IDL-TRANSLATE-FILE-STELLA-METHOD-STARTUP-CLASSNAME
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME" NULL 0)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (DEFINE-FUNCTION-OBJECT "IDL-TRANSLATE-CLASS-TO-STREAM"
     "(DEFUN IDL-TRANSLATE-CLASS-TO-STREAM ((CLASS CLASS) (NATIVE-STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION IDL-TRANSLATE-CLASS-TO-STREAM) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-MAKE-CODE-OUTPUT-FILE-NAME"
     "(DEFUN (IDL-MAKE-CODE-OUTPUT-FILE-NAME FILE-NAME) ((SOURCEFILE FILE-NAME)))"
     (CL:FUNCTION IDL-MAKE-CODE-OUTPUT-FILE-NAME) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-OUTPUT-ALL-UNITS-TO-FILE"
     "(DEFUN IDL-OUTPUT-ALL-UNITS-TO-FILE ((SOURCEFILE FILE-NAME)))"
     (CL:FUNCTION IDL-OUTPUT-ALL-UNITS-TO-FILE) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-TRANSLATE-FILE"
     "(DEFUN IDL-TRANSLATE-FILE ((FILENAME FILE-NAME)))"
     (CL:FUNCTION IDL-TRANSLATE-FILE) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-IDL-TRANSLATE-FILE"
     "(DEFUN STARTUP-IDL-TRANSLATE-FILE () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-IDL-TRANSLATE-FILE) NULL)
    (CL:LET*
     ((FUNCTION
       (LOOKUP-FUNCTION
        SYM-IDL-TRANSLATE-FILE-STELLA-STARTUP-IDL-TRANSLATE-FILE)))
     (SET-DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
      SYM-IDL-TRANSLATE-FILE-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "Startup-Idl-Translate-File") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *IDL-TRANSLATED-FILE-SUFFIX* STRING \"\")")))
  :VOID)
