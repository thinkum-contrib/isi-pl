;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

#|--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1996-2000              | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied "AS IS",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SGT-CONTEXTS-STELLA-CS-VALUE NULL)
(CL:DEFVAR SGT-CONTEXTS-STELLA-MODULE NULL)
(CL:DEFVAR SYM-CONTEXTS-STELLA-CC NULL)
(CL:DEFVAR KWD-CONTEXTS-COMMON-LISP NULL)
(CL:DEFVAR KWD-CONTEXTS-FUNCTION NULL)
(CL:DEFVAR SYM-CONTEXTS-STELLA-WORLD-NAME NULL)
(CL:DEFVAR SGT-CONTEXTS-STELLA-WORLD NULL)
(CL:DEFVAR SYM-CONTEXTS-STELLA-STARTUP-CONTEXTS NULL)
(CL:DEFVAR SYM-CONTEXTS-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STELLA-MODULE* *MODULE* *CLASS-HIERARCHY-BOOTED?*
  NULL-STRING-WRAPPER *PRINTREADABLY?* *CONTEXT* STANDARD-OUTPUT EOL
  *ROOT-MODULE*))

;;; (DEFGLOBAL *UNLINK-DISCARDED-CONTEXTS-ON-READ?* ...)

(CL:DEFVAR *UNLINK-DISCARDED-CONTEXTS-ON-READ?* TRUE
  "Eliminate pointers to discarded contexts while
accessing a CS-VALUE context table.")

;;; (DEFGLOBAL *UNLINK-DISCARDED-CONTEXTS-ON-WRITE?* ...)

(CL:DEFVAR *UNLINK-DISCARDED-CONTEXTS-ON-WRITE?* TRUE
  "Eliminate pointers to discarded contexts while
inserting into a CS-VALUE context table.")

;;; (DEFGLOBAL *CONTEXT-BACKTRACKING-MODE* ...)

(CL:DEFVAR *CONTEXT-BACKTRACKING-MODE* FALSE
  "If true, indicates that contexts are being allocated
and deallocated in depth-first fashion, and that deallocation of
CS-VALUE entries is taken care of during context destruction.")

;;; (DEFUN (CS-VALUE? BOOLEAN) ...)

(CL:DEFUN CS-VALUE? (SELF)
  (CL:RETURN-FROM CS-VALUE?
   (CL:AND (CL:NOT (CL:EQ SELF NULL))
    (CL:EQ (PRIMARY-TYPE SELF) SGT-CONTEXTS-STELLA-CS-VALUE))))

;;; (DEFUN (SUBCONTEXT? BOOLEAN) ...)

(CL:DEFUN SUBCONTEXT? (SUBCONTEXT SUPERCONTEXT)
  (CL:RETURN-FROM SUBCONTEXT?
   (CL:OR (CL:EQ SUBCONTEXT SUPERCONTEXT)
    (MEMB? (%ALL-SUPER-CONTEXTS SUBCONTEXT) SUPERCONTEXT))))

;;; (DEFUN (DISCARDED-CONTEXT? BOOLEAN) ...)

(CL:DEFUN DISCARDED-CONTEXT? (CONTEXT)
  (CL:RETURN-FROM DISCARDED-CONTEXT?
   (CL:LOGBITP 0 (CL:THE CL:FIXNUM (%CONTEXT-NUMBER CONTEXT)))))

;;; (DEFMETHOD (DELETED? BOOLEAN) ...)

(CL:DEFMETHOD DELETED? ((CONTEXT CONTEXT))
  (CL:RETURN-FROM DELETED?
   (CL:LOGBITP 0 (CL:THE CL:FIXNUM (%CONTEXT-NUMBER CONTEXT)))))

;;; (DEFUN (HELP-FIND-CONTEXT-BY-NUMBER CONTEXT) ...)

(CL:DEFUN HELP-FIND-CONTEXT-BY-NUMBER (NUMBER SIBLINGS)
  (CL:DECLARE (CL:TYPE CL:FIXNUM NUMBER))
  (CL:LET* ((C NULL) (ITER-000 (%THE-CONS-LIST SIBLINGS)))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:PROGN (CL:SETQ C (%%VALUE ITER-000))
     (CL:SETQ ITER-000 (%%REST ITER-000)))
    (CL:TAGBODY
     (CL:COND
      ((CL:= (%CONTEXT-NUMBER C) NUMBER)
       (CL:RETURN-FROM HELP-FIND-CONTEXT-BY-NUMBER C))
      ((CL:< (%CONTEXT-NUMBER C) NUMBER)
       (CL:RETURN-FROM HELP-FIND-CONTEXT-BY-NUMBER
        (HELP-FIND-CONTEXT-BY-NUMBER NUMBER (%CHILD-CONTEXTS C))))
      (CL:T (CL:GO :CONTINUE)))
     :CONTINUE)))
  (CL:RETURN-FROM HELP-FIND-CONTEXT-BY-NUMBER NULL))

;;; (DEFUN (FIND-CONTEXT-BY-NUMBER CONTEXT) ...)

(CL:DEFUN FIND-CONTEXT-BY-NUMBER (CONTEXTNUMBER)
  (CL:DECLARE (CL:TYPE CL:FIXNUM CONTEXTNUMBER))
  (CL:RETURN-FROM FIND-CONTEXT-BY-NUMBER
   (HELP-FIND-CONTEXT-BY-NUMBER CONTEXTNUMBER
    (%CHILD-CONTEXTS *ROOT-MODULE*))))

;;; (DEFMETHOD (GET-STELLA-CONTEXT-SLOWLY CONTEXT) ...)

(CL:DEFMETHOD GET-STELLA-CONTEXT-SLOWLY ((SELF CL:STRING))
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF))
  (CL:LET* ((CONTEXT NULL))
   (CL:LET*
    ((CXT NULL)
     (ITER-000 (%THE-CONS-LIST (%CHILD-CONTEXTS *ROOT-MODULE*))))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:PROGN (CL:SETQ CXT (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (CL:WHEN (STRING-EQL? (CONTEXT-NAME CXT) SELF)
      (CL:RETURN-FROM GET-STELLA-CONTEXT-SLOWLY CXT))))
   (CL:LET* ((CXT NULL) (ITER-001 (ALL-CONTEXTS)))
    (CL:LOOP WHILE (NEXT? ITER-001) DO (CL:SETQ CXT (%VALUE ITER-001))
     (CL:WHEN
      (CL:OR (STRING-EQL? (CONTEXT-NAME CXT) SELF)
       (CL:AND (ISA? CXT SGT-CONTEXTS-STELLA-MODULE)
        (CL:NOT (CL:EQ (%NICKNAMES CXT) NULL))
        (MEMBER? (%NICKNAMES CXT) (WRAP-STRING SELF))))
      (CL:WHEN (CL:NOT (CL:EQ CONTEXT NULL))
       (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT)
        "More than one context has the name or nickname`" SELF "'" EOL)
       (CL:RETURN-FROM GET-STELLA-CONTEXT-SLOWLY NULL))
      (CL:SETQ CONTEXT CXT))))
   (CL:RETURN-FROM GET-STELLA-CONTEXT-SLOWLY CONTEXT)))

;;; (DEFMETHOD (GET-STELLA-CONTEXT-SLOWLY CONTEXT) ...)

(CL:DEFMETHOD GET-STELLA-CONTEXT-SLOWLY ((SELF CL:INTEGER))
  (CL:DECLARE (CL:TYPE CL:FIXNUM SELF))
  (CL:RETURN-FROM GET-STELLA-CONTEXT-SLOWLY (FIND-CONTEXT-BY-NUMBER SELF)))

;;; (DEFMETHOD (GET-STELLA-CONTEXT-SLOWLY CONTEXT) ...)

(CL:DEFMETHOD GET-STELLA-CONTEXT-SLOWLY ((SELF SYMBOL))
  (CL:RETURN-FROM GET-STELLA-CONTEXT-SLOWLY
   (GET-STELLA-CONTEXT-SLOWLY (RELATIVE-NAME SELF))))

;;; (DEFUN (CHANGE-CONTEXT-SLOWLY CONTEXT) ...)

(CL:DEFUN CHANGE-CONTEXT-SLOWLY (SELF)
  (CL:IF (CL:NOT (CL:EQ SELF NULL))
   (CL:RETURN-FROM CHANGE-CONTEXT-SLOWLY (CHANGE-CONTEXT SELF))
   (CL:RETURN-FROM CHANGE-CONTEXT-SLOWLY *CONTEXT*)))

;;; (DEFUN (CC CONTEXT) ...)

(CL:DEFUN %CC (NAME)
  "Change the current context to the one named `name'.  Return the
value of the new current context.  If no `name' is supplied, return
the value of `*context*'.  `cc' is a no-op if the context reference
cannot be successfully evaluated."
  (CL:LET* ((CONTEXT *CONTEXT*) (NAMESPEC (%%VALUE NAME)))
   (CL:WHEN (CL:NOT (CL:EQ NAMESPEC NULL))
    (CL:COND
     ((SUBTYPE-OF-INTEGER? (SAFE-PRIMARY-TYPE NAMESPEC))
      (CL:PROGN
       (CL:SETQ CONTEXT
        (GET-STELLA-CONTEXT-SLOWLY (%WRAPPER-VALUE NAMESPEC)))))
     (CL:T
      (CL:LET* ((CONTEXTNAME (COERCE-TO-MODULE-NAME NAMESPEC TRUE)))
       (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING CONTEXTNAME))
       (CL:WHEN (CL:NOT (CL:EQ CONTEXTNAME STELLA::NULL-STRING))
        (CL:SETQ CONTEXT (GET-STELLA-CONTEXT CONTEXTNAME TRUE)))))))
   (CL:RETURN-FROM %CC (CHANGE-CONTEXT-SLOWLY CONTEXT))))

(CL:DEFUN CC-EVALUATOR-WRAPPER (ARGUMENTS)
  (CL:RETURN-FROM CC-EVALUATOR-WRAPPER (%CC ARGUMENTS)))

(CL:DEFMACRO CC (CL:&WHOLE EXPRESSION CL:&REST IGNORE)
  "Change the current context to the one named `name'.  Return the
value of the new current context.  If no `name' is supplied, return
the value of `*context*'.  `cc' is a no-op if the context reference
cannot be successfully evaluated."
  (CL:DECLARE (CL:IGNORE IGNORE))
  (CL:LET ((*IGNORETRANSLATIONERRORS?* FALSE))
   (INCREMENTALLY-TRANSLATE EXPRESSION FALSE)))

(CL:SETF (CL:MACRO-FUNCTION (CL:QUOTE /STELLA/CC)) (CL:MACRO-FUNCTION (CL:QUOTE CC)))

;;; (DEFUN PRINT-CONTEXT ...)

(CL:DEFUN PRINT-CONTEXT (SELF STREAM)
  (CL:LET*
   ((TYPESTRING STELLA::NULL-STRING) (NAME STELLA::NULL-STRING)
    (NUMBER (%CONTEXT-NUMBER SELF)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TYPESTRING NAME)
    (CL:TYPE CL:FIXNUM NUMBER))
   (CL:WHEN (CL:NOT *CLASS-HIERARCHY-BOOTED?*)
    (%%PRINT-STREAM STREAM "|MDL|" (%MODULE-NAME SELF))
    (CL:RETURN-FROM PRINT-CONTEXT))
   (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE SELF)))
    (CL:COND
     ((SUBTYPE-OF? TEST-VALUE-000 SGT-CONTEXTS-STELLA-MODULE)
      (CL:PROGN (CL:SETQ NAME (%MODULE-FULL-NAME SELF))
       (CL:IF (CL:LOGBITP 0 (CL:THE CL:FIXNUM (%CONTEXT-NUMBER SELF)))
        (CL:SETQ TYPESTRING "|DeLeTeD MDL|")
        (CL:SETQ TYPESTRING "|MDL|"))))
     ((SUBTYPE-OF? TEST-VALUE-000 SGT-CONTEXTS-STELLA-WORLD)
      (CL:PROGN
       (CL:SETQ NAME
        (%WRAPPER-VALUE
         (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS SELF)
          SYM-CONTEXTS-STELLA-WORLD-NAME NULL-STRING-WRAPPER)))
       (CL:IF (CL:LOGBITP 0 (CL:THE CL:FIXNUM (%CONTEXT-NUMBER SELF)))
        (CL:SETQ TYPESTRING "|DeLeTeD WLD|")
        (CL:SETQ TYPESTRING "|WLD|"))))
     (CL:T
      (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" TEST-VALUE-000
        "' is not a valid case option")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
   (CL:WHEN (CL:LOGBITP 0 (CL:THE CL:FIXNUM (%CONTEXT-NUMBER SELF)))
    (CL:SETQ NUMBER (CL:1+ NUMBER)))
   (CL:IF *PRINTREADABLY?*
    (CL:IF (CL:NOT (CL:EQ NAME STELLA::NULL-STRING))
     (%%PRINT-STREAM STREAM NAME)
     (%%PRINT-STREAM STREAM "#<" TYPESTRING NUMBER ">"))
    (CL:IF (CL:NOT (CL:EQ NAME STELLA::NULL-STRING))
     (%%PRINT-STREAM STREAM TYPESTRING NAME)
     (%%PRINT-STREAM STREAM TYPESTRING NUMBER))))
  :VOID)

;;; (DEFUN HELP-PRINT-CONTEXT-TREE ...)

(CL:DEFUN HELP-PRINT-CONTEXT-TREE (LIST LEVEL)
  (CL:DECLARE (CL:TYPE CL:FIXNUM LEVEL))
  (CL:LET* ((C NULL) (ITER-000 (%THE-CONS-LIST LIST)))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:PROGN (CL:SETQ C (%%VALUE ITER-000))
     (CL:SETQ ITER-000 (%%REST ITER-000)))
    (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) EOL)
    (CL:LET*
     ((I NULL-INTEGER) (ITER-001 1) (UPPER-BOUND-000 (CL:* 3 LEVEL)))
     (CL:DECLARE (CL:TYPE CL:FIXNUM ITER-001 UPPER-BOUND-000 I))
     (CL:LOOP WHILE (CL:<= ITER-001 UPPER-BOUND-000) DO
      (CL:PROGN (CL:SETQ I ITER-001) (CL:SETQ ITER-001 (CL:1+ ITER-001)))
      (CL:PROGN) (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) " ")))
    (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) (%CONTEXT-NUMBER C))
    (CL:WHEN (CL:NOT (CL:EQ (CONTEXT-NAME C) STELLA::NULL-STRING))
     (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) "   "
      (CONTEXT-NAME C)))
    (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) EOL)
    (HELP-PRINT-CONTEXT-TREE (%CHILD-CONTEXTS C) (CL:1+ LEVEL))))
  :VOID)

;;; (DEFUN PRINT-CONTEXT-TREE ...)

(CL:DEFUN PRINT-CONTEXT-TREE (ROOT)
  (CL:WHEN (CL:EQ ROOT NULL) (CL:SETQ ROOT *ROOT-MODULE*))
  (CL:LET* ((TOPLIST (LIST ROOT))) (HELP-PRINT-CONTEXT-TREE TOPLIST 0)
   (FREE TOPLIST))
  :VOID)

;;; (DEFUN (ACCESS-IN-CONTEXT OBJECT) ...)

(CL:DEFUN ACCESS-IN-CONTEXT (VALUE HOMECONTEXT DONTINHERIT?)
  (CL:WHEN
   (CL:OR (CL:EQ VALUE NULL)
    (CL:NOT
     (CL:AND (CL:NOT (CL:EQ VALUE NULL))
      (CL:EQ (PRIMARY-TYPE VALUE) SGT-CONTEXTS-STELLA-CS-VALUE))))
   (CL:IF DONTINHERIT?
    (CL:WHEN (CL:EQ *CONTEXT* HOMECONTEXT)
     (CL:RETURN-FROM ACCESS-IN-CONTEXT VALUE))
    (CL:WHEN
     (CL:OR (CL:EQ HOMECONTEXT NULL)
      (CL:OR (CL:EQ *CONTEXT* HOMECONTEXT)
       (MEMB? (%ALL-SUPER-CONTEXTS *CONTEXT*) HOMECONTEXT))
      (CL:AND (ISA? HOMECONTEXT SGT-CONTEXTS-STELLA-MODULE)
       (VISIBLE-FROM? HOMECONTEXT *MODULE*)))
     (CL:RETURN-FROM ACCESS-IN-CONTEXT VALUE)))
   (CL:RETURN-FROM ACCESS-IN-CONTEXT NULL))
  (CL:LET* ((KVCONS (%THE-KV-LIST VALUE)) (CONTEXTNUMBER NULL-INTEGER))
   (CL:DECLARE (CL:TYPE CL:FIXNUM CONTEXTNUMBER))
   (CL:LET* ((TARGET *CONTEXT*))
    (CL:SETQ CONTEXTNUMBER (%CONTEXT-NUMBER TARGET))
    (CL:LOOP WHILE
     (CL:AND (CL:NOT (CL:EQ KVCONS NULL))
      (CL:< CONTEXTNUMBER (%CONTEXT-NUMBER (%KEY KVCONS))))
     DO
     (CL:IF
      (CL:AND
       (CL:LOGBITP 0 (CL:THE CL:FIXNUM (%CONTEXT-NUMBER (%KEY KVCONS))))
       (CL:NOT *CONTEXT-BACKTRACKING-MODE*)
       *UNLINK-DISCARDED-CONTEXTS-ON-READ?*)
      (CL:IF (CL:NOT (CL:EQ (%REST KVCONS) NULL))
       (CL:LET* ((NEXTKVCONS (%REST KVCONS)))
        (CL:SETF (%KEY KVCONS) (%KEY NEXTKVCONS))
        (CL:SETF (%VALUE KVCONS) (%VALUE NEXTKVCONS))
        (CL:SETF (%REST KVCONS) (%REST NEXTKVCONS)) (FREE NEXTKVCONS))
       (CL:PROGN (REMOVE-AT VALUE (%KEY KVCONS))
        (CL:RETURN-FROM ACCESS-IN-CONTEXT NULL)))
      (CL:SETQ KVCONS (%REST KVCONS))))
    (CL:WHEN (CL:EQ KVCONS NULL) (CL:RETURN-FROM ACCESS-IN-CONTEXT NULL))
    (CL:WHEN (CL:EQ TARGET (%KEY KVCONS))
     (CL:RETURN-FROM ACCESS-IN-CONTEXT (%VALUE KVCONS)))
    (CL:WHEN DONTINHERIT? (CL:RETURN-FROM ACCESS-IN-CONTEXT NULL)))
   (CL:LET* ((TARGET NULL) (ITER-000 (%ALL-SUPER-CONTEXTS *CONTEXT*)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:PROGN (CL:SETQ TARGET (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (CL:SETQ CONTEXTNUMBER (%CONTEXT-NUMBER TARGET))
     (CL:LOOP WHILE
      (CL:AND (CL:NOT (CL:EQ KVCONS NULL))
       (CL:< CONTEXTNUMBER (%CONTEXT-NUMBER (%KEY KVCONS))))
      DO
      (CL:IF
       (CL:AND
        (CL:LOGBITP 0 (CL:THE CL:FIXNUM (%CONTEXT-NUMBER (%KEY KVCONS))))
        (CL:NOT *CONTEXT-BACKTRACKING-MODE*)
        *UNLINK-DISCARDED-CONTEXTS-ON-READ?*)
       (CL:IF (CL:NOT (CL:EQ (%REST KVCONS) NULL))
        (CL:LET* ((NEXTKVCONS (%REST KVCONS)))
         (CL:SETF (%KEY KVCONS) (%KEY NEXTKVCONS))
         (CL:SETF (%VALUE KVCONS) (%VALUE NEXTKVCONS))
         (CL:SETF (%REST KVCONS) (%REST NEXTKVCONS)) (FREE NEXTKVCONS))
        (CL:PROGN (REMOVE-AT VALUE (%KEY KVCONS))
         (CL:RETURN-FROM ACCESS-IN-CONTEXT NULL)))
       (CL:SETQ KVCONS (%REST KVCONS))))
     (CL:WHEN (CL:EQ KVCONS NULL) (CL:RETURN-FROM ACCESS-IN-CONTEXT NULL))
     (CL:WHEN (CL:EQ TARGET (%KEY KVCONS))
      (CL:RETURN-FROM ACCESS-IN-CONTEXT (%VALUE KVCONS)))
     (CL:WHEN DONTINHERIT? (CL:RETURN-FROM ACCESS-IN-CONTEXT NULL))))
   (CL:RETURN-FROM ACCESS-IN-CONTEXT NULL)))

;;; (DEFUN HELP-INSERT-A-CS-VALUE ...)

(CL:DEFUN HELP-INSERT-A-CS-VALUE (KVCONS NEWVALUE TARGET OVERWRITE?)
  (CL:LET* ((CONTEXTNUMBER (%CONTEXT-NUMBER TARGET)))
   (CL:DECLARE (CL:TYPE CL:FIXNUM CONTEXTNUMBER))
   (CL:LOOP
    (CL:WHEN
     (CL:AND (CL:NOT *CONTEXT-BACKTRACKING-MODE*)
      *UNLINK-DISCARDED-CONTEXTS-ON-WRITE?*
      (CL:LOGBITP 0 (CL:THE CL:FIXNUM (%CONTEXT-NUMBER (%KEY KVCONS)))))
     (CL:IF (CL:NOT (CL:EQ (%REST KVCONS) NULL))
      (CL:LET* ((NEXTKVCONS (%REST KVCONS)))
       (CL:SETF (%KEY KVCONS) (%KEY NEXTKVCONS))
       (CL:SETF (%VALUE KVCONS) (%VALUE NEXTKVCONS))
       (CL:SETF (%REST KVCONS) (%REST NEXTKVCONS)) (FREE NEXTKVCONS))
      (CL:PROGN (CL:SETF (%KEY KVCONS) TARGET)
       (CL:SETF (%VALUE KVCONS) NEWVALUE)
       (CL:RETURN-FROM HELP-INSERT-A-CS-VALUE))))
    (CL:COND
     ((CL:EQ (%KEY KVCONS) TARGET)
      (CL:WHEN OVERWRITE? (CL:SETF (%VALUE KVCONS) NEWVALUE))
      (CL:RETURN-FROM HELP-INSERT-A-CS-VALUE))
     ((CL:< (%CONTEXT-NUMBER (%KEY KVCONS)) CONTEXTNUMBER)
      (CL:SETF (%REST KVCONS)
       (KV-CONS (%KEY KVCONS) (%VALUE KVCONS) (%REST KVCONS)))
      (CL:SETF (%KEY KVCONS) TARGET) (CL:SETF (%VALUE KVCONS) NEWVALUE)
      (CL:RETURN-FROM HELP-INSERT-A-CS-VALUE))
     ((CL:EQ (%REST KVCONS) NULL)
      (CL:SETF (%REST KVCONS) (KV-CONS TARGET NEWVALUE NULL))
      (CL:RETURN-FROM HELP-INSERT-A-CS-VALUE))
     (CL:T (CL:SETQ KVCONS (%REST KVCONS))))))
  :VOID)

;;; (DEFMETHOD INSERT-AT ...)

(CL:DEFMETHOD INSERT-AT ((SELF CS-VALUE) CONTEXT NEWVALUE)
  (CL:WHEN (CL:EQ (%THE-KV-LIST SELF) NULL)
   (CL:LET* ((KVCONS (NEW-KV-CONS))) (CL:SETF (%KEY KVCONS) CONTEXT)
    (CL:SETF (%VALUE KVCONS) NEWVALUE)
    (CL:SETF (%THE-KV-LIST SELF) KVCONS) (CL:RETURN-FROM INSERT-AT)))
  (HELP-INSERT-A-CS-VALUE (%THE-KV-LIST SELF) NEWVALUE CONTEXT TRUE)
  :VOID)

;;; (DEFUN (UPDATE-IN-CONTEXT OBJECT) ...)

(CL:DEFUN UPDATE-IN-CONTEXT (OLDVALUE NEWVALUE HOMECONTEXT COPYTOCHILDREN?)
  (CL:LET* ((CSVALUE NULL))
   (CL:IF
    (CL:AND (CL:NOT (CL:EQ OLDVALUE NULL))
     (CL:EQ (PRIMARY-TYPE OLDVALUE) SGT-CONTEXTS-STELLA-CS-VALUE))
    (CL:SETQ CSVALUE OLDVALUE)
    (CL:IF
     (CL:AND (CL:EQ HOMECONTEXT *CONTEXT*)
      (CL:OR (EMPTY? (%CHILD-CONTEXTS *CONTEXT*))
       (CL:NOT COPYTOCHILDREN?)))
     (CL:RETURN-FROM UPDATE-IN-CONTEXT NEWVALUE)
     (CL:PROGN (CL:SETQ CSVALUE (NEW-CS-VALUE))
      (CL:WHEN (CL:NOT (CL:EQ OLDVALUE NULL))
       (INSERT-AT CSVALUE HOMECONTEXT OLDVALUE)))))
   (INSERT-AT CSVALUE *CONTEXT* NEWVALUE)
   (CL:WHEN COPYTOCHILDREN?
    (COPY-CURRENT-VALUE-TO-CHILDREN CSVALUE HOMECONTEXT NEWVALUE))
   (CL:RETURN-FROM UPDATE-IN-CONTEXT CSVALUE)))

;;; (DEFUN COPY-CURRENT-VALUE-TO-CHILDREN ...)

(CL:DEFUN COPY-CURRENT-VALUE-TO-CHILDREN (CSVALUE HOMECONTEXT PARENTVALUE)
  (CL:LET*
   ((CHILDCXT NULL)
    (ITER-000 (%THE-CONS-LIST (%CHILD-CONTEXTS *CONTEXT*))))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:PROGN (CL:SETQ CHILDCXT (%%VALUE ITER-000))
     (CL:SETQ ITER-000 (%%REST ITER-000)))
    (CL:LET* ((*CONTEXT* CHILDCXT)) (CL:DECLARE (CL:SPECIAL *CONTEXT*))
     (CL:LET*
      ((CURRENTVALUE (ACCESS-IN-CONTEXT CSVALUE HOMECONTEXT FALSE)))
      (CL:WHEN (CL:NOT (EQL? CURRENTVALUE PARENTVALUE))
       (HELP-INSERT-A-CS-VALUE (%THE-KV-LIST CSVALUE) CURRENTVALUE
        CHILDCXT FALSE))))))
  :VOID)

(CL:DEFUN STARTUP-CONTEXTS ()
  (CL:LET* ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2)
    (CL:SETQ SGT-CONTEXTS-STELLA-CS-VALUE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CS-VALUE" NULL 1))
    (CL:SETQ SGT-CONTEXTS-STELLA-MODULE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MODULE" NULL 1))
    (CL:SETQ SYM-CONTEXTS-STELLA-CC
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CC" NULL 0))
    (CL:SETQ KWD-CONTEXTS-COMMON-LISP
     (INTERN-RIGID-SYMBOL-WRT-MODULE "COMMON-LISP" NULL 2))
    (CL:SETQ KWD-CONTEXTS-FUNCTION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FUNCTION" NULL 2))
    (CL:SETQ SYM-CONTEXTS-STELLA-WORLD-NAME
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WORLD-NAME" NULL 0))
    (CL:SETQ SGT-CONTEXTS-STELLA-WORLD
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WORLD" NULL 1))
    (CL:SETQ SYM-CONTEXTS-STELLA-STARTUP-CONTEXTS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-CONTEXTS" NULL 0))
    (CL:SETQ SYM-CONTEXTS-STELLA-METHOD-STARTUP-CLASSNAME
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME" NULL 0)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (DEFINE-FUNCTION-OBJECT "CS-VALUE?"
     "(DEFUN (CS-VALUE? BOOLEAN) ((SELF OBJECT)) :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE (RETURN (AND (DEFINED? SELF) (EQL? (PRIMARY-TYPE SELF) @CS-VALUE))))"
     (CL:FUNCTION CS-VALUE?) NULL)
    (DEFINE-FUNCTION-OBJECT "SUBCONTEXT?"
     "(DEFUN (SUBCONTEXT? BOOLEAN) ((SUBCONTEXT CONTEXT) (SUPERCONTEXT CONTEXT)) :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE (RETURN (OR (EQL? SUBCONTEXT SUPERCONTEXT) (MEMB? (ALL-SUPER-CONTEXTS SUBCONTEXT) SUPERCONTEXT))))"
     (CL:FUNCTION SUBCONTEXT?) NULL)
    (DEFINE-FUNCTION-OBJECT "DISCARDED-CONTEXT?"
     "(DEFUN (DISCARDED-CONTEXT? BOOLEAN) ((CONTEXT CONTEXT)) :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE (RETURN (ODD? (CONTEXT-NUMBER CONTEXT))))"
     (CL:FUNCTION DISCARDED-CONTEXT?) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD (DELETED? BOOLEAN) ((CONTEXT CONTEXT)) :PUBLIC? TRUE)"
     (CL:FUNCTION DELETED?) NULL)
    (DEFINE-FUNCTION-OBJECT "HELP-FIND-CONTEXT-BY-NUMBER"
     "(DEFUN (HELP-FIND-CONTEXT-BY-NUMBER CONTEXT) ((NUMBER INTEGER) (SIBLINGS (LIST OF CONTEXT))))"
     (CL:FUNCTION HELP-FIND-CONTEXT-BY-NUMBER) NULL)
    (DEFINE-FUNCTION-OBJECT "FIND-CONTEXT-BY-NUMBER"
     "(DEFUN (FIND-CONTEXT-BY-NUMBER CONTEXT) ((CONTEXTNUMBER INTEGER)))"
     (CL:FUNCTION FIND-CONTEXT-BY-NUMBER) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD (GET-STELLA-CONTEXT-SLOWLY CONTEXT) ((SELF STRING)))"
     (CL:FUNCTION GET-STELLA-CONTEXT-SLOWLY) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD (GET-STELLA-CONTEXT-SLOWLY CONTEXT) ((SELF INTEGER)))"
     (CL:FUNCTION GET-STELLA-CONTEXT-SLOWLY) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD (GET-STELLA-CONTEXT-SLOWLY CONTEXT) ((SELF SYMBOL)))"
     (CL:FUNCTION GET-STELLA-CONTEXT-SLOWLY) NULL)
    (DEFINE-FUNCTION-OBJECT "CHANGE-CONTEXT-SLOWLY"
     "(DEFUN (CHANGE-CONTEXT-SLOWLY CONTEXT) ((SELF CONTEXT)))"
     (CL:FUNCTION CHANGE-CONTEXT-SLOWLY) NULL)
    (DEFINE-FUNCTION-OBJECT "CC"
     "(DEFUN (CC CONTEXT) (|&REST| (NAME NAME)) :COMMAND? TRUE :PUBLIC? TRUE :EVALUATE-ARGUMENTS? FALSE :DOCUMENTATION \"Change the current context to the one named `name'.  Return the
value of the new current context.  If no `name' is supplied, return
the value of `*context*'.  `cc' is a no-op if the context reference
cannot be successfully evaluated.\")" (CL:FUNCTION %CC)
     (CL:FUNCTION CC-EVALUATOR-WRAPPER))
    (DEFINE-FUNCTION-OBJECT "PRINT-CONTEXT"
     "(DEFUN PRINT-CONTEXT ((SELF CONTEXT) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION PRINT-CONTEXT) NULL)
    (DEFINE-FUNCTION-OBJECT "HELP-PRINT-CONTEXT-TREE"
     "(DEFUN HELP-PRINT-CONTEXT-TREE ((LIST (LIST OF CONTEXT)) (LEVEL INTEGER)))"
     (CL:FUNCTION HELP-PRINT-CONTEXT-TREE) NULL)
    (DEFINE-FUNCTION-OBJECT "PRINT-CONTEXT-TREE"
     "(DEFUN PRINT-CONTEXT-TREE ((ROOT CONTEXT)))"
     (CL:FUNCTION PRINT-CONTEXT-TREE) NULL)
    (DEFINE-FUNCTION-OBJECT "ACCESS-IN-CONTEXT"
     "(DEFUN (ACCESS-IN-CONTEXT OBJECT) ((VALUE OBJECT) (HOMECONTEXT CONTEXT) (DONTINHERIT? BOOLEAN)) :PUBLIC? TRUE)"
     (CL:FUNCTION ACCESS-IN-CONTEXT) NULL)
    (DEFINE-FUNCTION-OBJECT "HELP-INSERT-A-CS-VALUE"
     "(DEFUN HELP-INSERT-A-CS-VALUE ((KVCONS KV-CONS) (NEWVALUE OBJECT) (TARGET CONTEXT) (OVERWRITE? BOOLEAN)))"
     (CL:FUNCTION HELP-INSERT-A-CS-VALUE) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD INSERT-AT ((SELF CS-VALUE) (CONTEXT CONTEXT) (NEWVALUE OBJECT)) :PUBLIC? TRUE)"
     (CL:FUNCTION INSERT-AT) NULL)
    (DEFINE-FUNCTION-OBJECT "UPDATE-IN-CONTEXT"
     "(DEFUN (UPDATE-IN-CONTEXT OBJECT) ((OLDVALUE OBJECT) (NEWVALUE OBJECT) (HOMECONTEXT CONTEXT) (COPYTOCHILDREN? BOOLEAN)) :PUBLIC? TRUE)"
     (CL:FUNCTION UPDATE-IN-CONTEXT) NULL)
    (DEFINE-FUNCTION-OBJECT "COPY-CURRENT-VALUE-TO-CHILDREN"
     "(DEFUN COPY-CURRENT-VALUE-TO-CHILDREN ((CSVALUE CS-VALUE) (HOMECONTEXT CONTEXT) (PARENTVALUE OBJECT)))"
     (CL:FUNCTION COPY-CURRENT-VALUE-TO-CHILDREN) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-CONTEXTS"
     "(DEFUN STARTUP-CONTEXTS () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-CONTEXTS) NULL)
    (CL:LET*
     ((FUNCTION (LOOKUP-FUNCTION SYM-CONTEXTS-STELLA-STARTUP-CONTEXTS)))
     (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FUNCTION)
      SYM-CONTEXTS-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "Startup-Contexts") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *UNLINK-DISCARDED-CONTEXTS-ON-READ?* BOOLEAN TRUE :DOCUMENTATION \"Eliminate pointers to discarded contexts while
accessing a CS-VALUE context table.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *UNLINK-DISCARDED-CONTEXTS-ON-WRITE?* BOOLEAN TRUE :DOCUMENTATION \"Eliminate pointers to discarded contexts while
inserting into a CS-VALUE context table.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *CONTEXT-BACKTRACKING-MODE* BOOLEAN FALSE :DOCUMENTATION \"If true, indicates that contexts are being allocated
and deallocated in depth-first fashion, and that deallocation of
CS-VALUE entries is taken care of during context destruction.\")")
    (REGISTER-NATIVE-NAME SYM-CONTEXTS-STELLA-CC KWD-CONTEXTS-COMMON-LISP
     KWD-CONTEXTS-FUNCTION)))
  :VOID)
