;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

#|--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1996-2000              | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied "AS IS",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SYM-CL-TRANSLATE-FILE-STELLA-GLOBAL-VARIABLE NULL)
(CL:DEFVAR KWD-CL-TRANSLATE-FILE-LISP NULL)
(CL:DEFVAR KWD-CL-TRANSLATE-FILE-USE-COMMON-LISP-STRUCTS NULL)
(CL:DEFVAR KWD-CL-TRANSLATE-FILE-USE-COMMON-LISP-VECTOR-STRUCTS NULL)
(CL:DEFVAR SYM-CL-TRANSLATE-FILE-STELLA-CLASS NULL)
(CL:DEFVAR KWD-CL-TRANSLATE-FILE-COMMON-LISP NULL)
(CL:DEFVAR KWD-CL-TRANSLATE-FILE-STELLA NULL)
(CL:DEFVAR KWD-CL-TRANSLATE-FILE-FINALIZE NULL)
(CL:DEFVAR KWD-CL-TRANSLATE-FILE-TWO-PASS? NULL)
(CL:DEFVAR KWD-CL-TRANSLATE-FILE-FORCE-TRANSLATION? NULL)
(CL:DEFVAR KWD-CL-TRANSLATE-FILE-PRODUCTION-SETTINGS? NULL)
(CL:DEFVAR KWD-CL-TRANSLATE-FILE-LISP-BINARY NULL)
(CL:DEFVAR SYM-CL-TRANSLATE-FILE-STELLA-STARTUP-CL-TRANSLATE-FILE NULL)
(CL:DEFVAR SYM-CL-TRANSLATE-FILE-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STELLA-MODULE* FALSE-WRAPPER TRUE-WRAPPER
  *CURRENTSYSTEMDEFINITION* *CURRENTFILE* *MODULE*
  *TRANSLATIONVERBOSITYLEVEL* STANDARD-OUTPUT *TRANSLATIONUNITS*
  *CURRENT-ENVIRONMENT-FEATURES* EOL))

;;; (DEFUN (AUXILIARY-VARIABLE-UNIT? BOOLEAN) ...)

(CL:DEFUN AUXILIARY-VARIABLE-UNIT? (UNIT)
  (CL:RETURN-FROM AUXILIARY-VARIABLE-UNIT?
   (CL:AND (%AUXILIARY? UNIT)
    (CL:EQ (%CATEGORY UNIT) SYM-CL-TRANSLATE-FILE-STELLA-GLOBAL-VARIABLE))))

;;; (DEFUN CL-OUTPUT-ONE-UNIT ...)

(CL:DEFUN CL-OUTPUT-ONE-UNIT (UNIT STREAM)
  (CL:WHEN (CL:NOT (CL:EQ (%CATEGORY UNIT) NULL))
   (CL:WHEN (CL:NOT (AUXILIARY-VARIABLE-UNIT? UNIT))
    (%%PRINT-STREAM STREAM EOL))
   (CL:WHEN (CL:NOT (CL:EQ (%ANNOTATION UNIT) STELLA::NULL-STRING))
    (%%PRINT-STREAM STREAM ";;; " (%ANNOTATION UNIT) EOL EOL))
   (PRINT-STELLA-DEFINITION (%TRANSLATION UNIT) STREAM)
   (CL:SETF (%CATEGORY UNIT) NULL))
  :VOID)

;;; (DEFUN CL-OUTPUT-ALL-UNITS-TO-FILE ...)

(CL:DEFUN CL-OUTPUT-ALL-UNITS-TO-FILE (SOURCEFILE)
  (CL:LET*
   ((OUTPUTFILE
     (MAKE-FILE-NAME SOURCEFILE KWD-CL-TRANSLATE-FILE-LISP FALSE))
    (OUTPUTSTREAM (NEW-OUTPUT-FILE-STREAM OUTPUTFILE))
    (NATIVEOUTPUTSTREAM (%NATIVE-STREAM OUTPUTSTREAM)))
   (CL:WHEN (CL:>= *TRANSLATIONVERBOSITYLEVEL* 1)
    (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) "Writing `"
     OUTPUTFILE "'..." EOL))
   (OUTPUT-FILE-HEADER OUTPUTSTREAM SOURCEFILE)
   (%%PRINT-STREAM NATIVEOUTPUTSTREAM ";;; Auxiliary variables:" EOL EOL)
   (CL:LET* ((UNIT NULL) (ITER-000 (%THE-CONS-LIST *TRANSLATIONUNITS*)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:PROGN (CL:SETQ UNIT (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (CL:WHEN (AUXILIARY-VARIABLE-UNIT? UNIT)
      (CL-OUTPUT-ONE-UNIT UNIT NATIVEOUTPUTSTREAM))))
   (CL-OUTPUT-FORWARD-DECLARATIONS NATIVEOUTPUTSTREAM)
   (CL:WHEN
    (CL:AND
     (MEMB? *CURRENT-ENVIRONMENT-FEATURES*
      KWD-CL-TRANSLATE-FILE-USE-COMMON-LISP-STRUCTS)
     (CL:NOT
      (MEMB? *CURRENT-ENVIRONMENT-FEATURES*
       KWD-CL-TRANSLATE-FILE-USE-COMMON-LISP-VECTOR-STRUCTS)))
    (CL:LET* ((UNIT NULL) (ITER-001 (%THE-CONS-LIST *TRANSLATIONUNITS*)))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
      (CL:PROGN (CL:SETQ UNIT (%%VALUE ITER-001))
       (CL:SETQ ITER-001 (%%REST ITER-001)))
      (CL:WHEN (CL:EQ (%CATEGORY UNIT) SYM-CL-TRANSLATE-FILE-STELLA-CLASS)
       (CL-OUTPUT-ONE-UNIT UNIT NATIVEOUTPUTSTREAM)))))
   (CL:LET* ((UNIT NULL) (ITER-002 (%THE-CONS-LIST *TRANSLATIONUNITS*)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-002 NIL)) DO
     (CL:PROGN (CL:SETQ UNIT (%%VALUE ITER-002))
      (CL:SETQ ITER-002 (%%REST ITER-002)))
     (CL:WHEN (CL:NOT (AUXILIARY-VARIABLE-UNIT? UNIT))
      (CL-OUTPUT-ONE-UNIT UNIT NATIVEOUTPUTSTREAM))))
   (FREE OUTPUTSTREAM))
  :VOID)

;;; (DEFUN CL-OUTPUT-FILE-HEADER ...)

(CL:DEFUN CL-OUTPUT-FILE-HEADER (STREAM FILE)
  (CL:SETQ FILE FILE)
  (CL:LET* ((PACKAGE (LISP-PACKAGE *MODULE*)) (ENSUREPACKAGE? TRUE))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING PACKAGE))
   (%%PRINT-STREAM (%NATIVE-STREAM STREAM) ";;; -*- Mode: Lisp; Package: "
    PACKAGE "; Syntax: COMMON-LISP; Base: 10 -*-" EOL EOL)
   (CL:LET*
    ((*TRANSLATOROUTPUTLANGUAGE* KWD-CL-TRANSLATE-FILE-COMMON-LISP))
    (CL:DECLARE (CL:SPECIAL *TRANSLATOROUTPUTLANGUAGE*))
    (OUTPUT-COPYRIGHT-HEADER STREAM))
   (CL:WHEN
    (CL:NOT
     (CL:OR (STRING-EQL? PACKAGE "STELLA") (CL:NOT ENSUREPACKAGE?)))
    (CL-OUTPUT-ENSURE-PACKAGE-DEFINITION STREAM PACKAGE)
    (%%PRINT-STREAM (%NATIVE-STREAM STREAM) EOL))
   (CL-OUTPUT-IN-PACKAGE-DECLARATION STREAM PACKAGE)
   (%%PRINT-STREAM (%NATIVE-STREAM STREAM) EOL))
  :VOID)

;;; (DEFUN CL-OUTPUT-ENSURE-PACKAGE-DEFINITION ...)

(CL:DEFUN CL-OUTPUT-ENSURE-PACKAGE-DEFINITION (STREAM PACKAGE)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING PACKAGE))
  (%%PRINT-STREAM (%NATIVE-STREAM STREAM)
   "(CL:EVAL-WHEN (CL:COMPILE CL:LOAD CL:EVAL)" EOL
   "  (CL:UNLESS (CL:FIND-PACKAGE \"" PACKAGE "\")" EOL
   "     (CL:DEFPACKAGE \"" PACKAGE "\" (:USE))))" EOL)
  :VOID)

;;; (DEFUN CL-OUTPUT-IN-PACKAGE-DECLARATION ...)

(CL:DEFUN CL-OUTPUT-IN-PACKAGE-DECLARATION (STREAM PACKAGE)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING PACKAGE))
  (%%PRINT-STREAM (%NATIVE-STREAM STREAM) "(CL:IN-PACKAGE \"" PACKAGE
   "\")" EOL)
  :VOID)

;;; (DEFUN CL-OUTPUT-FORWARD-DECLARATIONS ...)

(CL:DEFUN CL-OUTPUT-FORWARD-DECLARATIONS (STREAM)
  (CL:LET*
   ((DEFINEDVARIABLES (NEW-LIST)) (FORWARDREFERENCEDVARIABLES (NEW-LIST)))
   (CL:LET* ((UNIT NULL) (ITER-000 (%THE-CONS-LIST *TRANSLATIONUNITS*)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:PROGN (CL:SETQ UNIT (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (CL:WHEN (AUXILIARY-VARIABLE-UNIT? UNIT)
      (PUSH DEFINEDVARIABLES (%THE-OBJECT UNIT)))))
   (CL:LET* ((UNIT NULL) (ITER-001 (%THE-CONS-LIST *TRANSLATIONUNITS*)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
     (CL:PROGN (CL:SETQ UNIT (%%VALUE ITER-001))
      (CL:SETQ ITER-001 (%%REST ITER-001)))
     (CL:WHEN (CL:NOT (AUXILIARY-VARIABLE-UNIT? UNIT))
      (CL:WHEN
       (CL:EQ (%CATEGORY UNIT)
        SYM-CL-TRANSLATE-FILE-STELLA-GLOBAL-VARIABLE)
       (PUSH DEFINEDVARIABLES (%THE-OBJECT UNIT)))
      (CL:LET*
       ((VARIABLE NULL)
        (ITER-002 (%THE-CONS-LIST (%REFERENCED-GLOBALS UNIT))))
       (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-002 NIL)) DO
        (CL:PROGN (CL:SETQ VARIABLE (%%VALUE ITER-002))
         (CL:SETQ ITER-002 (%%REST ITER-002)))
        (CL:WHEN
         (CL:AND (CL:NOT (MEMBER? DEFINEDVARIABLES VARIABLE))
          (CL:NOT (MEMBER? FORWARDREFERENCEDVARIABLES VARIABLE)))
         (PUSH FORWARDREFERENCEDVARIABLES VARIABLE)))))))
   (CL:LET* ((IT (ALLOCATE-ITERATOR FORWARDREFERENCEDVARIABLES)))
    (CL:LOOP WHILE (NEXT? IT) DO
     (VALUE-SETTER IT (%VARIABLE-NAME (%VALUE IT)))))
   (CL:WHEN (NON-EMPTY? FORWARDREFERENCEDVARIABLES)
    (%%PRINT-STREAM STREAM EOL ";;; Forward declarations:" EOL EOL)
    (PRINT-STELLA-DEFINITION
     (LIST* (INTERN-COMMON-LISP-SYMBOL "DECLAIM")
      (CONS (INTERN-COMMON-LISP-SYMBOL "SPECIAL")
       (CONCATENATE
        (CL-TRANSLATE-LIST-OF-TREES
         (%THE-CONS-LIST FORWARDREFERENCEDVARIABLES))
        NIL))
      NIL)
     STREAM))
   (FREE DEFINEDVARIABLES) (FREE FORWARDREFERENCEDVARIABLES))
  :VOID)

;;; (DEFUN CL-TRANSLATE-FILE ...)

(CL:DEFUN CL-TRANSLATE-FILE (FILE RELATIVE?)
  "Translate a Stella 'file' to Common-Lisp.  If
'relative?', concatenate root directory to 'file'."
  (CL:WHEN RELATIVE?
   (CL:SETQ FILE (MAKE-FILE-NAME FILE KWD-CL-TRANSLATE-FILE-STELLA TRUE)))
  (TRANSLATE-FILE FILE KWD-CL-TRANSLATE-FILE-COMMON-LISP FALSE)
  :VOID)

;;; (DEFUN CL-TRANSLATE-WALKED-SYSTEM-UNITS ...)

(CL:DEFUN CL-TRANSLATE-WALKED-SYSTEM-UNITS (SYSTEMUNITS)
  (CL:LET* ((*CURRENTFILE* STELLA::NULL-STRING) (*TRANSLATIONUNITS* NULL))
   (CL:DECLARE (CL:SPECIAL *CURRENTFILE* *TRANSLATIONUNITS*))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING *CURRENTFILE*))
   (CL:LET*
    ((SYSTEMFILES
      (FILES-PLUS-SYSTEM-STARTUP
       (SYSTEM-DEFINITION-SOURCE-FILES *CURRENTSYSTEMDEFINITION*)))
     (CLASSUNITS (NEW-LIST))
     (USECLSTRUCTS?
      (MEMB? *CURRENT-ENVIRONMENT-FEATURES*
       KWD-CL-TRANSLATE-FILE-USE-COMMON-LISP-STRUCTS))
     (FILENAME STELLA::NULL-STRING))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING FILENAME))
    (CL:LET*
     ((UNITS NULL) (FILE NULL) (ITER-000 (%THE-KV-LIST SYSTEMUNITS)))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NULL)) DO
      (CL:SETQ FILE (%KEY ITER-000))
      (CL:PROGN (CL:SETQ UNITS (%VALUE ITER-000))
       (CL:SETQ ITER-000 (%REST ITER-000)))
      (CL:SETQ *CURRENTFILE* (FILE-BASE-NAME (%WRAPPER-VALUE FILE)))
      (CL:COND
       (USECLSTRUCTS? (CL:SETQ *TRANSLATIONUNITS* (NEW-LIST))
        (CL:LET* ((UNIT NULL) (ITER-001 (%THE-CONS-LIST UNITS)))
         (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
          (CL:PROGN (CL:SETQ UNIT (%%VALUE ITER-001))
           (CL:SETQ ITER-001 (%%REST ITER-001)))
          (CL:IF
           (CL:EQ (%CATEGORY UNIT) SYM-CL-TRANSLATE-FILE-STELLA-CLASS)
           (PUSH CLASSUNITS UNIT) (PUSH *TRANSLATIONUNITS* UNIT))))
        (REVERSE *TRANSLATIONUNITS*))
       (CL:T (CL:SETQ *TRANSLATIONUNITS* UNITS)))
      (CL:LET*
       ((*MODULE* (COMPUTE-FILE-UNITS-MODULE UNITS)) (*CONTEXT* *MODULE*))
       (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
       (TRANSLATE-AND-OUTPUT-UNITS-TO-FILE (%WRAPPER-VALUE FILE)
        "Common Lisp"))
      (CLEAN-UP-TRANSLATION-UNITS-SPECIAL)))
    (CL:WHEN USECLSTRUCTS?
     (CL:WHEN (CL:>= *TRANSLATIONVERBOSITYLEVEL* 1)
      (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT)
       "Collecting CL structure class definitions..." EOL))
     (CL:LET*
      ((FILE NULL)
       (ITER-002
        (FILES-PLUS-SYSTEM-STARTUP
         (SYSTEM-DEFINITION-SOURCE-FILES *CURRENTSYSTEMDEFINITION*))))
      (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-002 NIL)) DO
       (CL:PROGN (CL:SETQ FILE (%%VALUE ITER-002))
        (CL:SETQ ITER-002 (%%REST ITER-002)))
       (CL:WHEN
        (CL:EQ
         (LOOKUP SYSTEMUNITS
          (WRAP-STRING
           (CL:SETQ FILENAME
            (MAKE-FILE-NAME (%WRAPPER-VALUE FILE)
             KWD-CL-TRANSLATE-FILE-STELLA TRUE))))
         NULL)
        (CL:SETQ *TRANSLATIONUNITS* (NEW-LIST))
        (CL:SETQ *CURRENTFILE* (FILE-BASE-NAME FILENAME))
        (CL:SETQ *TRANSLATIONUNITS* (NEW-LIST))
        (OPERATE-ON-FILE FILENAME KWD-CL-TRANSLATE-FILE-FINALIZE)
        (CL:LET*
         ((UNIT NULL) (ITER-003 (%THE-CONS-LIST *TRANSLATIONUNITS*))
          (COLLECT-000 NULL))
         (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-003 NIL)) DO
          (CL:PROGN (CL:SETQ UNIT (%%VALUE ITER-003))
           (CL:SETQ ITER-003 (%%REST ITER-003)))
          (CL:WHEN
           (CL:AND
            (CL:EQ (%CATEGORY UNIT) SYM-CL-TRANSLATE-FILE-STELLA-CLASS)
            (CREATE-NATIVE-CLASS? (%THE-OBJECT UNIT))
            (CL:NOT (%MIXIN? (%THE-OBJECT UNIT))))
           (CL:IF (CL:EQ COLLECT-000 NULL)
            (CL:PROGN (CL:SETQ COLLECT-000 (CONS UNIT NIL))
             (CL:IF (CL:EQ (%THE-CONS-LIST CLASSUNITS) NIL)
              (CL:SETF (%THE-CONS-LIST CLASSUNITS) COLLECT-000)
              (ADD-CONS-TO-END-OF-CONS-LIST (%THE-CONS-LIST CLASSUNITS)
               COLLECT-000)))
            (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS UNIT NIL))
             (CL:SETQ COLLECT-000 (%%REST COLLECT-000)))))))
        (CLEAN-UP-TRANSLATION-UNITS-SPECIAL))))
     (CL-OUTPUT-SYSTEM-CL-STRUCTS-FILE CLASSUNITS))))
  :VOID)

;;; (DEFUN (SORT-CL-STRUCT-CLASSES (LIST OF CLASS)) ...)

(CL:DEFUN SORT-CL-STRUCT-CLASSES (UNSORTEDCLASSES)
  (CL:RETURN-FROM SORT-CL-STRUCT-CLASSES
   (SORT UNSORTEDCLASSES (CL:FUNCTION CL-STRUCT-CLASS-GREATER-THAN?))))

;;; (DEFUN (CL-STRUCT-CLASS-GREATER-THAN? BOOLEAN) ...)

(CL:DEFUN CL-STRUCT-CLASS-GREATER-THAN? (CLASS1 CLASS2)
  (CL:RETURN-FROM CL-STRUCT-CLASS-GREATER-THAN?
   (> (%LABEL (%CLASS-TAXONOMY-NODE CLASS1))
    (%LABEL (%CLASS-TAXONOMY-NODE CLASS2)))))

;;; (DEFUN (CL-YIELD-STRUCT-CLASS-FILE-NAME FILE-NAME) ...)

(CL:DEFUN CL-YIELD-STRUCT-CLASS-FILE-NAME (SYSTEMNAME)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SYSTEMNAME))
  (CL:RETURN-FROM CL-YIELD-STRUCT-CLASS-FILE-NAME
   (CONCATENATE (STRING-DOWNCASE SYSTEMNAME) "-system-structs")))

;;; (DEFUN CL-OUTPUT-SYSTEM-CL-STRUCTS-FILE ...)

(CL:DEFUN CL-OUTPUT-SYSTEM-CL-STRUCTS-FILE (CLASSUNITS)
  (CL:LET*
   ((OUTPUTFILE
     (MAKE-FILE-NAME
      (CL-YIELD-STRUCT-CLASS-FILE-NAME (%NAME *CURRENTSYSTEMDEFINITION*))
      KWD-CL-TRANSLATE-FILE-LISP TRUE))
    (OUTPUTSTREAM (NEW-OUTPUT-FILE-STREAM OUTPUTFILE))
    (CLASSES (NEW-LIST)) (CURRENTMODULE *MODULE*)
    (PACKAGE STELLA::NULL-STRING) (ENSUREDPACKAGES (LIST)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING PACKAGE))
   (CL:LET*
    ((UNIT NULL) (ITER-000 (%THE-CONS-LIST CLASSUNITS))
     (COLLECT-000 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:PROGN (CL:SETQ UNIT (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN (CL:SETQ COLLECT-000 (CONS (%THE-OBJECT UNIT) NIL))
       (CL:IF (CL:EQ (%THE-CONS-LIST CLASSES) NIL)
        (CL:SETF (%THE-CONS-LIST CLASSES) COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST (%THE-CONS-LIST CLASSES)
         COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000) (CONS (%THE-OBJECT UNIT) NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
   (CL:SETQ CLASSES (SORT-CL-STRUCT-CLASSES CLASSES))
   (CL:WHEN (CL:>= *TRANSLATIONVERBOSITYLEVEL* 1)
    (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) "Writing `"
     OUTPUTFILE "'..." EOL))
   (CL:LET* ((*MODULE* *MODULE*) (*CONTEXT* *MODULE*))
    (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
    (CL:IF (NON-EMPTY? CLASSES)
     (CL:SETQ *MODULE* (HOME-MODULE (FIRST CLASSES)))
     (CL:SETQ *MODULE*
      (GET-STELLA-MODULE (%CARDINAL-MODULE *CURRENTSYSTEMDEFINITION*)
       TRUE)))
    (CL:SETQ CURRENTMODULE *MODULE*)
    (CL-OUTPUT-FILE-HEADER OUTPUTSTREAM STELLA::NULL-STRING)
    (CL:LET*
     ((CLASS NULL) (UNIT NULL) (ITER-001 (%THE-CONS-LIST CLASSUNITS))
      (ITER-002 (%THE-CONS-LIST CLASSES)))
     (CL:LOOP WHILE
      (CL:AND (CL:NOT (CL:EQ ITER-001 NIL)) (CL:NOT (CL:EQ ITER-002 NIL)))
      DO
      (CL:PROGN (CL:SETQ UNIT (%%VALUE ITER-001))
       (CL:SETQ ITER-001 (%%REST ITER-001)))
      (CL:PROGN (CL:SETQ CLASS (%%VALUE ITER-002))
       (CL:SETQ ITER-002 (%%REST ITER-002)))
      (CL:SETF (%THE-OBJECT UNIT) CLASS)
      (CL:SETF (%ANNOTATION UNIT) STELLA::NULL-STRING)
      (CL:SETQ *MODULE* (HOME-MODULE CLASS))
      (CL:WHEN (CL:NOT (CL:EQ *MODULE* CURRENTMODULE))
       (CL:SETQ CURRENTMODULE *MODULE*)
       (CL:SETQ PACKAGE (LISP-PACKAGE *MODULE*))
       (CL:WHEN (CL:NOT (MEMBER? ENSUREDPACKAGES (WRAP-STRING PACKAGE)))
        (PUSH ENSUREDPACKAGES (WRAP-STRING PACKAGE))
        (%%PRINT-STREAM (%NATIVE-STREAM OUTPUTSTREAM) EOL)
        (CL-OUTPUT-ENSURE-PACKAGE-DEFINITION OUTPUTSTREAM PACKAGE))
       (%%PRINT-STREAM (%NATIVE-STREAM OUTPUTSTREAM) EOL)
       (CL-OUTPUT-IN-PACKAGE-DECLARATION OUTPUTSTREAM PACKAGE))
      (CL:SETF (%TRANSLATION UNIT)
       (CL-TRANSLATE-DEFINE-NATIVE-CLASS-UNIT UNIT))
      (CL-OUTPUT-ONE-UNIT UNIT (%NATIVE-STREAM OUTPUTSTREAM)))))
   (FREE OUTPUTSTREAM))
  :VOID)

;;; (DEFUN CL-TRANSLATE-SYSTEM ...)

(CL:DEFUN CL-TRANSLATE-SYSTEM (SYSTEMNAME)
  "Translate a Stella system to Common Lisp."
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SYSTEMNAME))
  (TRANSLATE-SYSTEM SYSTEMNAME KWD-CL-TRANSLATE-FILE-COMMON-LISP
   KWD-CL-TRANSLATE-FILE-TWO-PASS? TRUE-WRAPPER
   KWD-CL-TRANSLATE-FILE-FORCE-TRANSLATION? TRUE-WRAPPER
   KWD-CL-TRANSLATE-FILE-PRODUCTION-SETTINGS? TRUE-WRAPPER)
  :VOID)

;;; (DEFUN CL-COMPILE-AND-LOAD-FILE ...)

(CL:DEFUN CL-COMPILE-AND-LOAD-FILE (FILE RELATIVE? FORCERECOMPILATION?)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING FILE))
  (CL:LET*
   ((TRANSLATEDFILE
     (MAKE-FILE-NAME FILE KWD-CL-TRANSLATE-FILE-LISP RELATIVE?))
    (BINARYFILE
     (MAKE-FILE-NAME FILE KWD-CL-TRANSLATE-FILE-LISP-BINARY RELATIVE?)))
   (CL:progn
        (CL:when (CL:or (CL-USER::stella-need-to-compile?
                          translatedFile binaryFile)
                        forceRecompilation?)
          (CL:proclaim CL-USER::*stella-compiler-optimization*)
          (CL:compile-file translatedFile :output-file binaryFile))
        (CL:load binaryFile)))
  :VOID)

;;; (DEFUN CL-TRANSLATE-STELLA ...)

(CL:DEFUN CL-TRANSLATE-STELLA (PRODUCTIONSETTINGS?)
  (TRANSLATE-SYSTEM "stella" KWD-CL-TRANSLATE-FILE-COMMON-LISP
   KWD-CL-TRANSLATE-FILE-FORCE-TRANSLATION? TRUE-WRAPPER
   KWD-CL-TRANSLATE-FILE-PRODUCTION-SETTINGS?
   (CL:IF PRODUCTIONSETTINGS? TRUE-WRAPPER FALSE-WRAPPER))
  :VOID)

;;; (DEFUN CL-RETRANSLATE-STELLA ...)

(CL:DEFUN CL-RETRANSLATE-STELLA (PRODUCTIONSETTINGS?)
  (TRANSLATE-SYSTEM "stella" KWD-CL-TRANSLATE-FILE-COMMON-LISP
   KWD-CL-TRANSLATE-FILE-TWO-PASS? TRUE-WRAPPER
   KWD-CL-TRANSLATE-FILE-FORCE-TRANSLATION? TRUE-WRAPPER
   KWD-CL-TRANSLATE-FILE-PRODUCTION-SETTINGS?
   (CL:IF PRODUCTIONSETTINGS? TRUE-WRAPPER FALSE-WRAPPER))
  :VOID)

(CL:DEFUN STARTUP-CL-TRANSLATE-FILE ()
  (CL:LET* ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2)
    (CL:SETQ SYM-CL-TRANSLATE-FILE-STELLA-GLOBAL-VARIABLE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "GLOBAL-VARIABLE" NULL 0))
    (CL:SETQ KWD-CL-TRANSLATE-FILE-LISP
     (INTERN-RIGID-SYMBOL-WRT-MODULE "LISP" NULL 2))
    (CL:SETQ KWD-CL-TRANSLATE-FILE-USE-COMMON-LISP-STRUCTS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "USE-COMMON-LISP-STRUCTS" NULL 2))
    (CL:SETQ KWD-CL-TRANSLATE-FILE-USE-COMMON-LISP-VECTOR-STRUCTS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "USE-COMMON-LISP-VECTOR-STRUCTS" NULL
      2))
    (CL:SETQ SYM-CL-TRANSLATE-FILE-STELLA-CLASS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS" NULL 0))
    (CL:SETQ KWD-CL-TRANSLATE-FILE-COMMON-LISP
     (INTERN-RIGID-SYMBOL-WRT-MODULE "COMMON-LISP" NULL 2))
    (CL:SETQ KWD-CL-TRANSLATE-FILE-STELLA
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STELLA" NULL 2))
    (CL:SETQ KWD-CL-TRANSLATE-FILE-FINALIZE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FINALIZE" NULL 2))
    (CL:SETQ KWD-CL-TRANSLATE-FILE-TWO-PASS?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "TWO-PASS?" NULL 2))
    (CL:SETQ KWD-CL-TRANSLATE-FILE-FORCE-TRANSLATION?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FORCE-TRANSLATION?" NULL 2))
    (CL:SETQ KWD-CL-TRANSLATE-FILE-PRODUCTION-SETTINGS?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PRODUCTION-SETTINGS?" NULL 2))
    (CL:SETQ KWD-CL-TRANSLATE-FILE-LISP-BINARY
     (INTERN-RIGID-SYMBOL-WRT-MODULE "LISP-BINARY" NULL 2))
    (CL:SETQ SYM-CL-TRANSLATE-FILE-STELLA-STARTUP-CL-TRANSLATE-FILE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-CL-TRANSLATE-FILE" NULL 0))
    (CL:SETQ SYM-CL-TRANSLATE-FILE-STELLA-METHOD-STARTUP-CLASSNAME
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME" NULL 0)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (DEFINE-FUNCTION-OBJECT "AUXILIARY-VARIABLE-UNIT?"
     "(DEFUN (AUXILIARY-VARIABLE-UNIT? BOOLEAN) ((UNIT TRANSLATION-UNIT)))"
     (CL:FUNCTION AUXILIARY-VARIABLE-UNIT?) NULL)
    (DEFINE-FUNCTION-OBJECT "CL-OUTPUT-ONE-UNIT"
     "(DEFUN CL-OUTPUT-ONE-UNIT ((UNIT TRANSLATION-UNIT) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION CL-OUTPUT-ONE-UNIT) NULL)
    (DEFINE-FUNCTION-OBJECT "CL-OUTPUT-ALL-UNITS-TO-FILE"
     "(DEFUN CL-OUTPUT-ALL-UNITS-TO-FILE ((SOURCEFILE FILE-NAME)))"
     (CL:FUNCTION CL-OUTPUT-ALL-UNITS-TO-FILE) NULL)
    (DEFINE-FUNCTION-OBJECT "CL-OUTPUT-FILE-HEADER"
     "(DEFUN CL-OUTPUT-FILE-HEADER ((STREAM OUTPUT-STREAM) (FILE FILE-NAME)))"
     (CL:FUNCTION CL-OUTPUT-FILE-HEADER) NULL)
    (DEFINE-FUNCTION-OBJECT "CL-OUTPUT-ENSURE-PACKAGE-DEFINITION"
     "(DEFUN CL-OUTPUT-ENSURE-PACKAGE-DEFINITION ((STREAM OUTPUT-STREAM) (PACKAGE STRING)))"
     (CL:FUNCTION CL-OUTPUT-ENSURE-PACKAGE-DEFINITION) NULL)
    (DEFINE-FUNCTION-OBJECT "CL-OUTPUT-IN-PACKAGE-DECLARATION"
     "(DEFUN CL-OUTPUT-IN-PACKAGE-DECLARATION ((STREAM OUTPUT-STREAM) (PACKAGE STRING)))"
     (CL:FUNCTION CL-OUTPUT-IN-PACKAGE-DECLARATION) NULL)
    (DEFINE-FUNCTION-OBJECT "CL-OUTPUT-FORWARD-DECLARATIONS"
     "(DEFUN CL-OUTPUT-FORWARD-DECLARATIONS ((STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION CL-OUTPUT-FORWARD-DECLARATIONS) NULL)
    (DEFINE-FUNCTION-OBJECT "CL-TRANSLATE-FILE"
     "(DEFUN CL-TRANSLATE-FILE ((FILE FILE-NAME) (RELATIVE? BOOLEAN)) :DOCUMENTATION \"Translate a Stella 'file' to Common-Lisp.  If
'relative?', concatenate root directory to 'file'.\" :PUBLIC? TRUE)"
     (CL:FUNCTION CL-TRANSLATE-FILE) NULL)
    (DEFINE-FUNCTION-OBJECT "CL-TRANSLATE-WALKED-SYSTEM-UNITS"
     "(DEFUN CL-TRANSLATE-WALKED-SYSTEM-UNITS ((SYSTEMUNITS SYSTEM-UNITS-ALIST)))"
     (CL:FUNCTION CL-TRANSLATE-WALKED-SYSTEM-UNITS) NULL)
    (DEFINE-FUNCTION-OBJECT "SORT-CL-STRUCT-CLASSES"
     "(DEFUN (SORT-CL-STRUCT-CLASSES (LIST OF CLASS)) ((UNSORTEDCLASSES (LIST OF CLASS))))"
     (CL:FUNCTION SORT-CL-STRUCT-CLASSES) NULL)
    (DEFINE-FUNCTION-OBJECT "CL-STRUCT-CLASS-GREATER-THAN?"
     "(DEFUN (CL-STRUCT-CLASS-GREATER-THAN? BOOLEAN) ((CLASS1 CLASS) (CLASS2 CLASS)))"
     (CL:FUNCTION CL-STRUCT-CLASS-GREATER-THAN?) NULL)
    (DEFINE-FUNCTION-OBJECT "CL-YIELD-STRUCT-CLASS-FILE-NAME"
     "(DEFUN (CL-YIELD-STRUCT-CLASS-FILE-NAME FILE-NAME) ((SYSTEMNAME STRING)))"
     (CL:FUNCTION CL-YIELD-STRUCT-CLASS-FILE-NAME) NULL)
    (DEFINE-FUNCTION-OBJECT "CL-OUTPUT-SYSTEM-CL-STRUCTS-FILE"
     "(DEFUN CL-OUTPUT-SYSTEM-CL-STRUCTS-FILE ((CLASSUNITS (LIST OF TRANSLATION-UNIT))))"
     (CL:FUNCTION CL-OUTPUT-SYSTEM-CL-STRUCTS-FILE) NULL)
    (DEFINE-FUNCTION-OBJECT "CL-TRANSLATE-SYSTEM"
     "(DEFUN CL-TRANSLATE-SYSTEM ((SYSTEMNAME STRING)) :DOCUMENTATION \"Translate a Stella system to Common Lisp.\" :PUBLIC? TRUE)"
     (CL:FUNCTION CL-TRANSLATE-SYSTEM) NULL)
    (DEFINE-FUNCTION-OBJECT "CL-COMPILE-AND-LOAD-FILE"
     "(DEFUN CL-COMPILE-AND-LOAD-FILE ((FILE STRING) (RELATIVE? BOOLEAN) (FORCERECOMPILATION? BOOLEAN)))"
     (CL:FUNCTION CL-COMPILE-AND-LOAD-FILE) NULL)
    (DEFINE-FUNCTION-OBJECT "CL-TRANSLATE-STELLA"
     "(DEFUN CL-TRANSLATE-STELLA ((PRODUCTIONSETTINGS? BOOLEAN)))"
     (CL:FUNCTION CL-TRANSLATE-STELLA) NULL)
    (DEFINE-FUNCTION-OBJECT "CL-RETRANSLATE-STELLA"
     "(DEFUN CL-RETRANSLATE-STELLA ((PRODUCTIONSETTINGS? BOOLEAN)))"
     (CL:FUNCTION CL-RETRANSLATE-STELLA) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-CL-TRANSLATE-FILE"
     "(DEFUN STARTUP-CL-TRANSLATE-FILE () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-CL-TRANSLATE-FILE) NULL)
    (CL:LET*
     ((FUNCTION
       (LOOKUP-FUNCTION
        SYM-CL-TRANSLATE-FILE-STELLA-STARTUP-CL-TRANSLATE-FILE)))
     (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FUNCTION)
      SYM-CL-TRANSLATE-FILE-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "Startup-Cl-Translate-File") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES)))
  :VOID)
