;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; startup.slisp

#|
+---------------------------- BEGIN LICENSE BLOCK ---------------------------+
|                                                                            |
| Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
|                                                                            |
| The contents of this file are subject to the Mozilla Public License        |
| Version 1.1 (the "License"); you may not use this file except in           |
| compliance with the License. You may obtain a copy of the License at       |
| http://www.mozilla.org/MPL/                                                |
|                                                                            |
| Software distributed under the License is distributed on an "AS IS" basis, |
| WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
| for the specific language governing rights and limitations under the       |
| License.                                                                   |
|                                                                            |
| The Original Code is the STELLA Programming Language.                      |
|                                                                            |
| The Initial Developer of the Original Code is                              |
| UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
| 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
|                                                                            |
| Portions created by the Initial Developer are Copyright (C) 1996-2006      |
| the Initial Developer. All Rights Reserved.                                |
|                                                                            |
| Contributor(s):                                                            |
|                                                                            |
| Alternatively, the contents of this file may be used under the terms of    |
| either the GNU General Public License Version 2 or later (the "GPL"), or   |
| the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
| in which case the provisions of the GPL or the LGPL are applicable instead |
| of those above. If you wish to allow use of your version of this file only |
| under the terms of either the GPL or the LGPL, and not to allow others to  |
| use your version of this file under the terms of the MPL, indicate your    |
| decision by deleting the provisions above and replace them with the notice |
| and other provisions required by the GPL or the LGPL. If you do not delete |
| the provisions above, a recipient may use your version of this file under  |
| the terms of any one of the MPL, the GPL or the LGPL.                      |
|                                                                            |
+---------------------------- END LICENSE BLOCK -----------------------------+
|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR KWD-STARTUP-EARLY-INITS NULL)
(CL:DEFVAR KWD-STARTUP-MODULES NULL)
(CL:DEFVAR KWD-STARTUP-SYMBOLS NULL)
(CL:DEFVAR KWD-STARTUP-QUOTED-CONSTANTS NULL)
(CL:DEFVAR KWD-STARTUP-GLOBALS NULL)
(CL:DEFVAR KWD-STARTUP-CLASSES NULL)
(CL:DEFVAR KWD-STARTUP-FINALIZE-CLASSES NULL)
(CL:DEFVAR KWD-STARTUP-METHODS NULL)
(CL:DEFVAR KWD-STARTUP-FINALIZE-METHODS NULL)
(CL:DEFVAR KWD-STARTUP-FINAL NULL)
(CL:DEFVAR KWD-STARTUP-DOCUMENTATION NULL)
(CL:DEFVAR SYM-STARTUP-STELLA-STARTUP-STARTUP NULL)
(CL:DEFVAR SYM-STARTUP-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STELLA-MODULE* *MODULE* STANDARD-ERROR NULL-INTEGER
  STANDARD-OUTPUT EOL *CLASS-HIERARCHY-BOOTED?* NIL))

;;; (DEFGLOBAL *STELLA-MAJOR-VERSION-NUMBER* ...)

(CL:DEFVAR *STELLA-MAJOR-VERSION-NUMBER* 3)
(CL:DECLAIM (CL:TYPE CL:FIXNUM *STELLA-MAJOR-VERSION-NUMBER*))

;;; (DEFGLOBAL *STELLA-MINOR-VERSION-NUMBER* ...)

(CL:DEFVAR *STELLA-MINOR-VERSION-NUMBER* 4)
(CL:DECLAIM (CL:TYPE CL:FIXNUM *STELLA-MINOR-VERSION-NUMBER*))

;;; (DEFGLOBAL *STELLA-RELEASE-STATE* ...)

(CL:DEFVAR *STELLA-RELEASE-STATE* "")
(CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING *STELLA-RELEASE-STATE*))

;;; (DEFGLOBAL *STELLA-PATCH-LEVEL* ...)

(CL:DEFVAR *STELLA-PATCH-LEVEL* 0)
(CL:DECLAIM (CL:TYPE CL:FIXNUM *STELLA-PATCH-LEVEL*))

;;; (DEFGLOBAL *STELLA-VERSION-STRING* ...)

(CL:DEFVAR *STELLA-VERSION-STRING* STELLA::NULL-STRING)
(CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING *STELLA-VERSION-STRING*))

;;; (DEFUN (STELLA-VERSION-STRING STRING) ...)

(CL:DECLAIM (CL:FTYPE (CL:FUNCTION () CL:SIMPLE-STRING) STELLA-VERSION-STRING))
(CL:DEFUN STELLA-VERSION-STRING ()
  "Return a string identifying the current version of STELLA."
  (CL:RETURN-FROM STELLA-VERSION-STRING
   (CONCATENATE "STELLA " (INTEGER-TO-STRING *STELLA-MAJOR-VERSION-NUMBER*)
    "." (INTEGER-TO-STRING *STELLA-MINOR-VERSION-NUMBER*) "."
    (INTEGER-TO-STRING *STELLA-PATCH-LEVEL*) *STELLA-RELEASE-STATE*)))

;;; (DEFUN (STELLA-INFORMATION STRING) ...)

(CL:DECLAIM (CL:FTYPE (CL:FUNCTION () CL:SIMPLE-STRING) STELLA-INFORMATION))
(CL:DEFUN STELLA-INFORMATION ()
  "Returns information about the current Stella implementation.
Useful when reporting problems."
  (CL:RETURN-FROM STELLA-INFORMATION
   (CONCATENATE *STELLA-VERSION-STRING* " ["
    (%KEYWORD.SYMBOL-NAME (RUNNING-IN-LANGUAGE)) "]"
    (RUNNING-SYSTEM-INFORMATION))))

(CL:DEFUN STELLA-INFORMATION-EVALUATOR-WRAPPER (ARGUMENTS)
  (CL:SETQ ARGUMENTS ARGUMENTS)
  (CL:LET* ((RESULT (STELLA-INFORMATION)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING RESULT))
   (CL:IF (CL:NOT (CL:EQ RESULT STELLA::NULL-STRING))
    (CL:RETURN-FROM STELLA-INFORMATION-EVALUATOR-WRAPPER (WRAP-STRING RESULT))
    (CL:RETURN-FROM STELLA-INFORMATION-EVALUATOR-WRAPPER NULL))))

;;; (DEFGLOBAL *STARTUP-TIME-PHASES* ...)

(CL:DEFVAR *STARTUP-TIME-PHASES* NULL
  "List of phases that can be legally used as an optional
phase argument to a `startup-time-progn' form.  The corresponding code
will be executed during the execution of a startup-time-code function only
if the position of the keyword in the list corresponds to the current value of
`*STARTUP-TIME-PHASE*', or if phasing of startup-time code is disabled.")

;;; (DEFGLOBAL *STARTUP-TIME-PHASE* ...)

(CL:DEFVAR *STARTUP-TIME-PHASE* 999
  "The current phase during 'phased startup'.
The value has to correspond to the position of one of the keywords
in `*STARTUP-TIME-PHASES*'.  999 means no phasing at all.")
(CL:DECLAIM (CL:TYPE CL:FIXNUM *STARTUP-TIME-PHASE*))

;;; (DEFUN (CURRENT-STARTUP-TIME-PHASE? BOOLEAN) ...)

(CL:DEFUN CURRENT-STARTUP-TIME-PHASE? (PHASE)
  (CL:DECLARE (CL:TYPE CL:FIXNUM PHASE))
  #+MCL
  (CL:CHECK-TYPE PHASE CL:FIXNUM)
  (CL:RETURN-FROM CURRENT-STARTUP-TIME-PHASE?
   (CL:OR (CL:= *STARTUP-TIME-PHASE* 999) (CL:= PHASE *STARTUP-TIME-PHASE*))))

;;; (DEFUN (ENCODE-STARTUP-TIME-PHASE INTEGER) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T) CL:FIXNUM) ENCODE-STARTUP-TIME-PHASE))
(CL:DEFUN ENCODE-STARTUP-TIME-PHASE (PHASE)
  (CL:LET* ((STARTUPTIMEPHASEASNUMBER 0))
   (CL:DECLARE (CL:TYPE CL:FIXNUM STARTUPTIMEPHASEASNUMBER))
   (CL:WHEN (CL:NOT (MEMBER? *STARTUP-TIME-PHASES* PHASE))
    (CL:SETQ PHASE KWD-STARTUP-FINAL))
   (CL:LET* ((PH NULL) (ITER-000 (%LIST.THE-CONS-LIST *STARTUP-TIME-PHASES*)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ PH (%%VALUE ITER-000))
     (CL:IF (CL:EQ PH PHASE)
      (CL:RETURN-FROM ENCODE-STARTUP-TIME-PHASE STARTUPTIMEPHASEASNUMBER)
      (CL:SETQ STARTUPTIMEPHASEASNUMBER (CL:1+ STARTUPTIMEPHASEASNUMBER)))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:ERROR
    (NEW-STELLA-EXCEPTION
     "`encode-startup-time-phase' should never get this far!"))))

;;; (DEFUN STARTUP-KERNEL ...)

(CL:DEFUN STARTUP-KERNEL (VERBOSE?)
  (CL:LET* ((PHASE NULL-INTEGER) (ITER-000 0) (UPPER-BOUND-000 9))
   (CL:DECLARE (CL:TYPE CL:FIXNUM PHASE ITER-000 UPPER-BOUND-000))
   (CL:LOOP WHILE (CL:<= ITER-000 UPPER-BOUND-000) DO (CL:SETQ PHASE ITER-000)
    (CL:TAGBODY (CL:SETQ *STARTUP-TIME-PHASE* PHASE)
     (CL:WHEN VERBOSE?
      (CL:COND ((CL:= PHASE 0))
       ((CL:= PHASE 2)
        (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
         "Running kernel startup code..." EOL)
        (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
         "Initializing symbol tables..." EOL))
       ((CL:= PHASE 3)
        (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
         "Initializing quoted constants..." EOL))
       ((CL:= PHASE 4)
        (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
         "Initializing global variables..." EOL))
       ((CL:= PHASE 5)
        (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
         "Creating class objects..." EOL))
       ((CL:= PHASE 6)
        (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
         "Finalizing classes..." EOL))
       ((CL:= PHASE 7)
        (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
         "Creating method objects..." EOL))
       ((CL:= PHASE 8)
        (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
         "Finalizing methods..." EOL))
       ((CL:= PHASE 9)
        (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
         "Running non-phased startup code..." EOL))))
     (CL:WHEN (CL:= PHASE 6) (FINALIZE-CLASSES)
      (CL:SETQ *CLASS-HIERARCHY-BOOTED?* CL:T) (CL:GO :CONTINUE))
     (CL:WHEN (CL:= PHASE 8) (FINALIZE-SLOTS) (CLEANUP-UNFINALIZED-CLASSES)
      (CL:GO :CONTINUE))
     (STARTUP-STARTUP) (STARTUP-CL-PRIMAL) (STARTUP-PRIMAL)
     (STARTUP-TYPE-PREDICATES) (STARTUP-CONSES) (STARTUP-HIERARCHY)
     (STARTUP-TAXONOMIES) (STARTUP-LISTS) (STARTUP-COLLECTIONS)
     (STARTUP-ITERATORS) (STARTUP-LITERALS) (STARTUP-SYMBOLS)
     (STARTUP-CLASSES) (STARTUP-METHODS) (STARTUP-DEFCLASS)
     (STARTUP-STELLA-IN) (STARTUP-FOREACH) (STARTUP-WALK)
     (STARTUP-DYNAMIC-SLOTS) (STARTUP-DYNAMIC-LITERAL-SLOTS) (STARTUP-SYSTEMS)
     (STARTUP-CL-TRANSLATE) (STARTUP-MACROS) (STARTUP-MEMOIZE)
     (STARTUP-STREAMS) (STARTUP-DESCRIBE) (STARTUP-DEMONS)
     (STARTUP-MORE-DEMONS) (STARTUP-NAME-UTILITY) (STARTUP-MODULES)
     (STARTUP-CONTEXTS) (STARTUP-READ) (STARTUP-XML) (STARTUP-DATE-TIME)
     (STARTUP-DATE-TIME-PARSER) :CONTINUE)
    (CL:SETQ ITER-000 (CL:1+ ITER-000))))
  :VOID)

;;; (DEFUN STARTUP-CPP-TRANSLATOR ...)

(CL:DEFUN STARTUP-CPP-TRANSLATOR ()
  (STARTUP-CPP-TRANSLATE)
  (STARTUP-CPP-CLASS-OUT)
  (STARTUP-CPP-OUTPUT)
  (STARTUP-CPP-TRANSLATE-FILE)
  :VOID)

;;; (DEFUN STARTUP-JAVA-TRANSLATOR ...)

(CL:DEFUN STARTUP-JAVA-TRANSLATOR ()
  (STARTUP-JAVA-TRANSLATE)
  (STARTUP-JAVA-CLASS-OUT)
  (STARTUP-JAVA-OUTPUT)
  (STARTUP-JAVA-TRANSLATE-FILE)
  :VOID)

;;; (DEFUN STARTUP-IDL-TRANSLATOR ...)

(CL:DEFUN STARTUP-IDL-TRANSLATOR ()
  (STARTUP-IDL-TRANSLATE)
  (STARTUP-IDL-CLASS-OUT)
  (STARTUP-IDL-OUTPUT)
  (STARTUP-IDL-TRANSLATE-FILE)
  :VOID)

;;; (DEFUN STARTUP ...)

(CL:DEFUN STARTUP (VERBOSE?)
  (STARTUP-KERNEL VERBOSE?)
  (CL:WHEN VERBOSE?
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
    "Starting up translators..." EOL))
  (CL:LET* ((PHASE NULL-INTEGER) (ITER-000 0) (UPPER-BOUND-000 9))
   (CL:DECLARE (CL:TYPE CL:FIXNUM PHASE ITER-000 UPPER-BOUND-000))
   (CL:LOOP WHILE (CL:<= ITER-000 UPPER-BOUND-000) DO (CL:SETQ PHASE ITER-000)
    (CL:SETQ *STARTUP-TIME-PHASE* PHASE) (STARTUP-TRANSLATE-FILE)
    (STARTUP-CL-TRANSLATE-FILE) (STARTUP-CPP-TRANSLATOR)
    (STARTUP-JAVA-TRANSLATOR) (STARTUP-IDL-TRANSLATOR) (STARTUP-TOOLS)
    (CL:SETQ ITER-000 (CL:1+ ITER-000))))
  (CL:SETQ *STARTUP-TIME-PHASE* 999)
  (SWEEP-TRANSIENTS)
  :VOID)

;;; (DEFUN INTERPRET-COMMAND-LINE-ARGUMENTS ...)

(CL:DEFUN INTERPRET-COMMAND-LINE-ARGUMENTS (COUNT ARGUMENTS)
  "Interpret any STELLA-relevant command line `arguments'."
  (CL:DECLARE (CL:TYPE CL:FIXNUM COUNT) (CL:TYPE CL:SIMPLE-VECTOR ARGUMENTS))
  #+MCL
  (CL:CHECK-TYPE COUNT CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE ARGUMENTS CL:SIMPLE-VECTOR)
  (CL:LET* ((CURSOR 0)) (CL:DECLARE (CL:TYPE CL:FIXNUM CURSOR))
   (CL:LOOP WHILE (CL:< CURSOR COUNT) DO
    (CL:LET* ((TEST-VALUE-000 (CL:AREF ARGUMENTS CURSOR)))
     (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TEST-VALUE-000))
     (CL:COND
      ((CL:OR (STRING-EQL? TEST-VALUE-000 "-e")
        (STRING-EQL? TEST-VALUE-000 "-eval")
        (STRING-EQL? TEST-VALUE-000 "--eval"))
       (CL:SETQ CURSOR (CL:1+ CURSOR))
       (CL:IF (CL:= CURSOR COUNT)
        (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-ERROR)
         "ERROR: Missing argument to -eval option" EOL)
        (CL:HANDLER-CASE
         (%EVALUATE
          (READ-S-EXPRESSION-FROM-STRING (CL:AREF ARGUMENTS CURSOR)))
         (CL:CONDITION (E)
          (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-ERROR)
           "ERROR during processing of --eval option:" EOL "   "
           (EXCEPTION-MESSAGE E))))))
      (CL:T)))
    (CL:SETQ CURSOR (CL:1+ CURSOR))))
  :VOID)

;;; (DEFUN (CONSIFY-COMMAND-LINE-ARGUMENTS (CONS OF STRING-WRAPPER)) ...)

(CL:DEFUN CONSIFY-COMMAND-LINE-ARGUMENTS (COUNT ARGUMENTS)
  "Convert `count' command line `arguments' into a CONS list."
  (CL:DECLARE (CL:TYPE CL:FIXNUM COUNT) (CL:TYPE CL:SIMPLE-VECTOR ARGUMENTS))
  #+MCL
  (CL:CHECK-TYPE COUNT CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE ARGUMENTS CL:SIMPLE-VECTOR)
  (CL:LET* ((RESULT NIL))
   (CL:LET*
    ((I NULL-INTEGER) (ITER-000 0) (UPPER-BOUND-000 (CL:1- COUNT))
     (COLLECT-000 NULL))
    (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-000 UPPER-BOUND-000))
    (CL:LOOP WHILE (CL:<= ITER-000 UPPER-BOUND-000) DO (CL:SETQ I ITER-000)
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-000 (CONS (WRAP-STRING (CL:AREF ARGUMENTS I)) NIL))
       (CL:IF (CL:EQ RESULT NIL) (CL:SETQ RESULT COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST RESULT COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000)
        (CONS (WRAP-STRING (CL:AREF ARGUMENTS I)) NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))
     (CL:SETQ ITER-000 (CL:1+ ITER-000))))
   (CL:RETURN-FROM CONSIFY-COMMAND-LINE-ARGUMENTS RESULT)))

;;; (DEFUN MAIN ...)

(CL:DEFUN MAIN (CL:&REST %%ARGS)
  (CL:LET*
   ((COUNT (CL:LENGTH %%ARGS))
    (ARGUMENTS (CL:MAKE-ARRAY (CL:LENGTH %%ARGS) :INITIAL-CONTENTS %%ARGS)))
   (CL:DECLARE (CL:TYPE CL:FIXNUM COUNT) (CL:TYPE CL:SIMPLE-VECTOR ARGUMENTS))
   (CL:LET* ((TESTING? (CL:= COUNT 0)))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
     "Welcome to " (STELLA-VERSION-STRING) EOL)
    (STARTUP TESTING?) (STARTUP-STELLA-SYSTEM)
    (INTERPRET-COMMAND-LINE-ARGUMENTS COUNT ARGUMENTS)
    (CL:WHEN TESTING?
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT) "Bye!"
      EOL))))
  :VOID)

(CL:DEFUN STARTUP-STARTUP ()
  (CL:LET* ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2)
    (CL:SETQ KWD-STARTUP-EARLY-INITS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "EARLY-INITS" NULL 2))
    (CL:SETQ KWD-STARTUP-MODULES
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MODULES" NULL 2))
    (CL:SETQ KWD-STARTUP-SYMBOLS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SYMBOLS" NULL 2))
    (CL:SETQ KWD-STARTUP-QUOTED-CONSTANTS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "QUOTED-CONSTANTS" NULL 2))
    (CL:SETQ KWD-STARTUP-GLOBALS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "GLOBALS" NULL 2))
    (CL:SETQ KWD-STARTUP-CLASSES
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASSES" NULL 2))
    (CL:SETQ KWD-STARTUP-FINALIZE-CLASSES
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FINALIZE-CLASSES" NULL 2))
    (CL:SETQ KWD-STARTUP-METHODS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHODS" NULL 2))
    (CL:SETQ KWD-STARTUP-FINALIZE-METHODS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FINALIZE-METHODS" NULL 2))
    (CL:SETQ KWD-STARTUP-FINAL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FINAL" NULL 2))
    (CL:SETQ KWD-STARTUP-DOCUMENTATION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DOCUMENTATION" NULL 2))
    (CL:SETQ SYM-STARTUP-STELLA-STARTUP-STARTUP
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-STARTUP" NULL 0))
    (CL:SETQ SYM-STARTUP-STELLA-METHOD-STARTUP-CLASSNAME
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME" NULL 0)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 4)
    (CL:SETQ *STELLA-VERSION-STRING* (STELLA-VERSION-STRING))
    (CL:SETQ *STARTUP-TIME-PHASES*
     (LIST KWD-STARTUP-EARLY-INITS KWD-STARTUP-MODULES KWD-STARTUP-SYMBOLS
      KWD-STARTUP-QUOTED-CONSTANTS KWD-STARTUP-GLOBALS KWD-STARTUP-CLASSES
      KWD-STARTUP-FINALIZE-CLASSES KWD-STARTUP-METHODS
      KWD-STARTUP-FINALIZE-METHODS KWD-STARTUP-FINAL)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (DEFINE-FUNCTION-OBJECT "STELLA-VERSION-STRING"
     "(DEFUN (STELLA-VERSION-STRING STRING) () :DOCUMENTATION \"Return a string identifying the current version of STELLA.\" :PUBLIC? TRUE)"
     (CL:FUNCTION STELLA-VERSION-STRING) NULL)
    (DEFINE-FUNCTION-OBJECT "STELLA-INFORMATION"
     "(DEFUN (STELLA-INFORMATION STRING) () :DOCUMENTATION \"Returns information about the current Stella implementation.
Useful when reporting problems.\" :PUBLIC? TRUE :COMMAND? TRUE)"
     (CL:FUNCTION STELLA-INFORMATION)
     (CL:FUNCTION STELLA-INFORMATION-EVALUATOR-WRAPPER))
    (DEFINE-FUNCTION-OBJECT "CURRENT-STARTUP-TIME-PHASE?"
     "(DEFUN (CURRENT-STARTUP-TIME-PHASE? BOOLEAN) ((PHASE INTEGER)) :PUBLIC? TRUE)"
     (CL:FUNCTION CURRENT-STARTUP-TIME-PHASE?) NULL)
    (DEFINE-FUNCTION-OBJECT "ENCODE-STARTUP-TIME-PHASE"
     "(DEFUN (ENCODE-STARTUP-TIME-PHASE INTEGER) ((PHASE KEYWORD)))"
     (CL:FUNCTION ENCODE-STARTUP-TIME-PHASE) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-KERNEL"
     "(DEFUN STARTUP-KERNEL ((VERBOSE? BOOLEAN)))"
     (CL:FUNCTION STARTUP-KERNEL) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-CPP-TRANSLATOR"
     "(DEFUN STARTUP-CPP-TRANSLATOR ())" (CL:FUNCTION STARTUP-CPP-TRANSLATOR)
     NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-JAVA-TRANSLATOR"
     "(DEFUN STARTUP-JAVA-TRANSLATOR ())"
     (CL:FUNCTION STARTUP-JAVA-TRANSLATOR) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-IDL-TRANSLATOR"
     "(DEFUN STARTUP-IDL-TRANSLATOR ())" (CL:FUNCTION STARTUP-IDL-TRANSLATOR)
     NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP"
     "(DEFUN STARTUP ((VERBOSE? BOOLEAN)) :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP) NULL)
    (DEFINE-FUNCTION-OBJECT "INTERPRET-COMMAND-LINE-ARGUMENTS"
     "(DEFUN INTERPRET-COMMAND-LINE-ARGUMENTS ((COUNT INTEGER) (ARGUMENTS (ARRAY () OF STRING))) :DOCUMENTATION \"Interpret any STELLA-relevant command line `arguments'.\" :PUBLIC? TRUE)"
     (CL:FUNCTION INTERPRET-COMMAND-LINE-ARGUMENTS) NULL)
    (DEFINE-FUNCTION-OBJECT "CONSIFY-COMMAND-LINE-ARGUMENTS"
     "(DEFUN (CONSIFY-COMMAND-LINE-ARGUMENTS (CONS OF STRING-WRAPPER)) ((COUNT INTEGER) (ARGUMENTS (ARRAY () OF STRING))) :DOCUMENTATION \"Convert `count' command line `arguments' into a CONS list.\" :PUBLIC? TRUE)"
     (CL:FUNCTION CONSIFY-COMMAND-LINE-ARGUMENTS) NULL)
    (DEFINE-FUNCTION-OBJECT "MAIN"
     "(DEFUN MAIN (|&REST| (%%ARGS STRING)) :PUBLIC? TRUE)" NULL NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-STARTUP"
     "(DEFUN STARTUP-STARTUP () :PUBLIC? TRUE)" (CL:FUNCTION STARTUP-STARTUP)
     NULL)
    (CL:LET* ((FUNCTION (LOOKUP-FUNCTION SYM-STARTUP-STELLA-STARTUP-STARTUP)))
     (SET-DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
      SYM-STARTUP-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "_StartupStartup") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *STELLA-MAJOR-VERSION-NUMBER* INTEGER 3 :PUBLIC? TRUE)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *STELLA-MINOR-VERSION-NUMBER* INTEGER 4 :PUBLIC? TRUE)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *STELLA-RELEASE-STATE* STRING \"\" :PUBLIC? TRUE)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *STELLA-PATCH-LEVEL* INTEGER 0 :PUBLIC? TRUE)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *STELLA-VERSION-STRING* STRING (STELLA-VERSION-STRING) :PUBLIC? TRUE)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *STARTUP-TIME-PHASES* (LIST OF KEYWORD) (CAST (LIST :EARLY-INITS :MODULES :SYMBOLS :QUOTED-CONSTANTS :GLOBALS :CLASSES :FINALIZE-CLASSES :METHODS :FINALIZE-METHODS :FINAL) (LIST OF KEYWORD)) :DOCUMENTATION \"List of phases that can be legally used as an optional
phase argument to a `startup-time-progn' form.  The corresponding code
will be executed during the execution of a startup-time-code function only
if the position of the keyword in the list corresponds to the current value of
`*STARTUP-TIME-PHASE*', or if phasing of startup-time code is disabled.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *STARTUP-TIME-PHASE* INTEGER 999 :PUBLIC? TRUE :DOCUMENTATION \"The current phase during 'phased startup'.
The value has to correspond to the position of one of the keywords
in `*STARTUP-TIME-PHASES*'.  999 means no phasing at all.\")")))
  :VOID)
