;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

#|--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1996-2000              | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied "AS IS",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SYM-STREAMS-STELLA-EOL NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-PRINT-STREAM NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-STANDARD-OUTPUT NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-PRINT NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-PRINT-EXPANDER NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-INFORM NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-INFORM-EXPANDER NULL)
(CL:DEFVAR KWD-STREAMS-COMMON-LISP NULL)
(CL:DEFVAR KWD-STREAMS-WARN NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-STANDARD-WARNING NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-WARN NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-WARN-EXPANDER NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-NULL NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-STELLA-EXCEPTION NULL)
(CL:DEFVAR SGT-STREAMS-STELLA-STRING-WRAPPER NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-SIGNAL-EXCEPTION NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-NEW NULL)
(CL:DEFVAR KWD-STREAMS-MESSAGE NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-LET NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-OUTPUT-STRING-STREAM NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-THE-STRING NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-SIGNAL NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-SIGNAL-EXPANDER NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-ERROR NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-ERROR-EXPANDER NULL)
(CL:DEFVAR KWD-STREAMS-JAVA NULL)
(CL:DEFVAR SYM-STREAMS-STELLA--ERROR-MESSAGE NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-FIRST NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-BODY NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-VERBATIM NULL)
(CL:DEFVAR KWD-STREAMS-CONTINUABLE-ERROR NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-CONTINUABLE-ERROR NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-CONTINUABLE-ERROR-EXPANDER NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-READ-EXCEPTION NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-SIGNAL-READ-ERROR NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-SIGNAL-READ-ERROR-EXPANDER NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-DE-UGLIFY-PARSE-TREE NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-SPECIAL NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-*PRINTREADABLY?* NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-TRUE NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-SIGNAL-TRANSLATION-ERROR NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-UNLESS NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-SUPPRESS-WARNINGS? NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-PRINT-ERROR-CONTEXT NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-STANDARD-ERROR NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-WALK-ERROR NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-WALK-ERROR-EXPANDER NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-SIGNAL-TRANSLATION-WARNING NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-WALK-INFORM NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-WALK-INFORM-EXPANDER NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-WALK-WARN NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-WALK-WARN-EXPANDER NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-WHEN NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-NOT NULL)
(CL:DEFVAR KWD-STREAMS-ERROR NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-SAFETY NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-SAFETY-EXPANDER NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-SIGNAL-EVALUATION-ERROR NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-PRINT-EVALUATION-ERROR-CONTEXT NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-EVAL-ERROR NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-EVAL-ERROR-EXPANDER NULL)
(CL:DEFVAR SGT-STREAMS-STELLA-LITERAL-WRAPPER NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-STRINGIFY NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-VRLET NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-STRING NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-SETQ NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-CONCATENATE NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-MESSAGE-TO-STRING NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-MESSAGE-TO-STRING-EXPANDER NULL)
(CL:DEFVAR KWD-STREAMS-OPEN NULL)
(CL:DEFVAR KWD-STREAMS-CLOSED NULL)
(CL:DEFVAR SGT-STREAMS-STELLA-FILE-INPUT-STREAM NULL)
(CL:DEFVAR SGT-STREAMS-STELLA-FILE-OUTPUT-STREAM NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-THE-STREAM NULL)
(CL:DEFVAR SGT-STREAMS-STELLA-S-EXPRESSION-ITERATOR NULL)
(CL:DEFVAR SGT-STREAMS-STELLA-LINE-ITERATOR NULL)
(CL:DEFVAR SGT-STREAMS-STELLA-CHARACTER-ITERATOR NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-STARTUP-STREAMS NULL)
(CL:DEFVAR SYM-STREAMS-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STELLA-MODULE* *MODULE* NULL-CHARACTER *SAFETY*
  *TRANSLATOROUTPUTLANGUAGE*))

;;; (DEFGLOBAL EOL ...)

(CL:DEFVAR EOL NULL
  "Generates a newline character when passed to a stream.")

;;; (DEFGLOBAL EOL-STRING ...)

(CL:PROGN (CL:DEFVAR EOL-STRING "
" "A string constant containing the character sequence
necessary to generate a newline.") (CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING EOL-STRING)))

;;; (DEFGLOBAL STANDARD-INPUT ...)

(CL:DEFVAR STANDARD-INPUT NULL
  "Denotes the standard input stream for the host language.")

;;; (DEFGLOBAL STANDARD-OUTPUT ...)

(CL:DEFVAR STANDARD-OUTPUT NULL
  "Denotes the standard output stream for the host language.")

;;; (DEFGLOBAL STANDARD-WARNING ...)

(CL:DEFVAR STANDARD-WARNING NULL
  "Denotes the standard warning stream for the host language.")

;;; (DEFGLOBAL STANDARD-ERROR ...)

(CL:DEFVAR STANDARD-ERROR NULL
  "Denotes the standard error stream for the host language.")

;;; (DEFGLOBAL SINGLE-QUOTE-STRING ...)

(CL:DEFVAR SINGLE-QUOTE-STRING NULL
  "Holds a string containing the single quote character.")

;;; (DEFGLOBAL SINGLE-BQUOTE-STRING ...)

(CL:DEFVAR SINGLE-BQUOTE-STRING NULL
  "Holds a string containing the single backquote character.")

;;; (DEFUN (FORMAT-MESSAGE-ARGUMENTS CONS) ...)

(CL:DEFUN FORMAT-MESSAGE-ARGUMENTS (MESSAGEARGUMENTSTREE TRAILINGEOL?)
  (CL:LET* ((AUGMENTEDARGUMENTS NIL))
   (CL:LET* ((ITEM NULL) (ITER-000 MESSAGEARGUMENTSTREE))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:PROGN (CL:SETQ ITEM (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (CL:COND
      ((CL:OR (STRING? ITEM) (CL:EQ ITEM EOL))
       (CL:SETQ AUGMENTEDARGUMENTS (CONS ITEM AUGMENTEDARGUMENTS)))
      (CL:T
       (CL:SETQ AUGMENTEDARGUMENTS
        (CONS SINGLE-BQUOTE-STRING AUGMENTEDARGUMENTS))
       (CL:SETQ AUGMENTEDARGUMENTS (CONS ITEM AUGMENTEDARGUMENTS))
       (CL:SETQ AUGMENTEDARGUMENTS
        (CONS SINGLE-QUOTE-STRING AUGMENTEDARGUMENTS))))))
   (CL:WHEN TRAILINGEOL?
    (CL:SETQ AUGMENTEDARGUMENTS (CONS EOL AUGMENTEDARGUMENTS)))
   (CL:RETURN-FROM FORMAT-MESSAGE-ARGUMENTS (REVERSE AUGMENTEDARGUMENTS))))

;;; (DEFMACRO PRINT ...)

(CL:DEFUN PRINT-EXPANDER (BODY)
  "Print arguments to the standard output stream."
  (CL:RETURN-FROM PRINT-EXPANDER
   (LIST* SYM-STREAMS-STELLA-PRINT-STREAM
    SYM-STREAMS-STELLA-STANDARD-OUTPUT (CONCATENATE BODY NIL))))

;;; (DEFMACRO INFORM ...)

(CL:DEFUN INFORM-EXPANDER (BODY)
  "Print informative message, placing non-string arguments in quotes,
and terminating with a newline."
  (CL:SETQ BODY (FORMAT-MESSAGE-ARGUMENTS BODY TRUE))
  (CL:RETURN-FROM INFORM-EXPANDER
   (LIST* SYM-STREAMS-STELLA-PRINT-STREAM
    SYM-STREAMS-STELLA-STANDARD-OUTPUT (CONCATENATE BODY NIL))))

;;; (DEFMACRO WARN ...)

(CL:DEFUN WARN-EXPANDER (BODY)
  "Signal warning message, placing non-string arguments in quotes."
  (CL:SETQ BODY (FORMAT-MESSAGE-ARGUMENTS BODY FALSE))
  (CL:IF (CL:EQ *TRANSLATOROUTPUTLANGUAGE* KWD-STREAMS-COMMON-LISP)
   (CL:RETURN-FROM WARN-EXPANDER
    (LIST* SYM-STREAMS-STELLA-PRINT-STREAM KWD-STREAMS-WARN
     (CONCATENATE BODY NIL)))
   (CL:RETURN-FROM WARN-EXPANDER
    (LIST* SYM-STREAMS-STELLA-PRINT-STREAM
     SYM-STREAMS-STELLA-STANDARD-WARNING (WRAP-STRING "Warning: ")
     (CONCATENATE BODY (CONS SYM-STREAMS-STELLA-EOL NIL))))))

;;; (DEFMACRO SIGNAL ...)

(CL:DEFUN SIGNAL-EXPANDER (TYPE BODY)
  "Signal error message, placing non-string arguments in quotes."
  (CL:WHEN (CL:EQ TYPE SYM-STREAMS-STELLA-NULL)
   (CL:SETQ TYPE SYM-STREAMS-STELLA-STELLA-EXCEPTION))
  (CL:IF
   (CL:AND (CL:= (LENGTH BODY) 1)
    (ISA? (%%VALUE BODY) SGT-STREAMS-STELLA-STRING-WRAPPER))
   (CL:RETURN-FROM SIGNAL-EXPANDER
    (LIST* SYM-STREAMS-STELLA-SIGNAL-EXCEPTION
     (LIST* SYM-STREAMS-STELLA-NEW TYPE
      (LIST* KWD-STREAMS-MESSAGE (%%VALUE BODY) NIL))
     NIL))
   (CL:LET* ((STREAMVAR (LOCAL-GENSYM "STREAM")))
    (CL:RETURN-FROM SIGNAL-EXPANDER
     (LIST* SYM-STREAMS-STELLA-LET
      (CONS
       (CONS STREAMVAR
        (CONS
         (LIST* SYM-STREAMS-STELLA-NEW
          SYM-STREAMS-STELLA-OUTPUT-STRING-STREAM NIL)
         NIL))
       NIL)
      (LIST* SYM-STREAMS-STELLA-PRINT-STREAM STREAMVAR
       (CONCATENATE (FORMAT-MESSAGE-ARGUMENTS BODY FALSE) NIL))
      (LIST* SYM-STREAMS-STELLA-SIGNAL-EXCEPTION
       (LIST* SYM-STREAMS-STELLA-NEW TYPE
        (LIST* KWD-STREAMS-MESSAGE
         (LIST* SYM-STREAMS-STELLA-THE-STRING STREAMVAR NIL) NIL))
       NIL)
      NIL)))))

;;; (DEFMACRO ERROR ...)

(CL:DEFUN ERROR-EXPANDER (BODY)
  "Signal error message, placing non-string arguments in quotes."
  (CL:RETURN-FROM ERROR-EXPANDER
   (LIST* SYM-STREAMS-STELLA-SIGNAL SYM-STREAMS-STELLA-STELLA-EXCEPTION
    (CONCATENATE BODY NIL))))

;;; (DEFMACRO CONTINUABLE-ERROR ...)

(CL:DEFUN CONTINUABLE-ERROR-EXPANDER (BODY)
  "Signal error message, placing non-string arguments in quotes."
  (CL:SETQ BODY (FORMAT-MESSAGE-ARGUMENTS BODY FALSE))
  (CL:IF (CL:EQ *TRANSLATOROUTPUTLANGUAGE* KWD-STREAMS-JAVA)
   (CL:IF
    (CL:AND (CL:= (LENGTH BODY) 1)
     (ISA? (%%VALUE BODY) SGT-STREAMS-STELLA-STRING-WRAPPER))
    (CL:RETURN-FROM CONTINUABLE-ERROR-EXPANDER
     (LIST* SYM-STREAMS-STELLA-LET
      (CONS
       (LIST* SYM-STREAMS-STELLA--ERROR-MESSAGE
        (LIST* SYM-STREAMS-STELLA-FIRST SYM-STREAMS-STELLA-BODY NIL) NIL)
       NIL)
      (LIST* SYM-STREAMS-STELLA-VERBATIM KWD-STREAMS-JAVA
       (WRAP-STRING "Native.continuable_error(_error_message);
")
       NIL)
      NIL))
    (CL:LET* ((STREAMVAR (LOCAL-GENSYM "STREAM")))
     (CL:RETURN-FROM CONTINUABLE-ERROR-EXPANDER
      (LIST* SYM-STREAMS-STELLA-LET
       (CONS
        (CONS STREAMVAR
         (CONS
          (LIST* SYM-STREAMS-STELLA-NEW
           SYM-STREAMS-STELLA-OUTPUT-STRING-STREAM NIL)
          NIL))
        NIL)
       (LIST* SYM-STREAMS-STELLA-PRINT-STREAM STREAMVAR
        (CONCATENATE (FORMAT-MESSAGE-ARGUMENTS BODY FALSE) NIL))
       (LIST* SYM-STREAMS-STELLA-LET
        (CONS
         (LIST* SYM-STREAMS-STELLA--ERROR-MESSAGE
          (LIST* SYM-STREAMS-STELLA-THE-STRING STREAMVAR NIL) NIL)
         NIL)
        (LIST* SYM-STREAMS-STELLA-VERBATIM KWD-STREAMS-JAVA
         (WRAP-STRING "Native.continuable_error(_error_message);
")
         NIL)
        NIL)
       NIL))))
   (CL:RETURN-FROM CONTINUABLE-ERROR-EXPANDER
    (LIST* SYM-STREAMS-STELLA-PRINT-STREAM KWD-STREAMS-CONTINUABLE-ERROR
     (CONCATENATE BODY NIL)))))

;;; (DEFMACRO SIGNAL-READ-ERROR ...)

(CL:DEFUN SIGNAL-READ-ERROR-EXPANDER (BODY)
  "Specialized version of `signal' that throws a READ-EXCEPTION."
  (CL:RETURN-FROM SIGNAL-READ-ERROR-EXPANDER
   (LIST* SYM-STREAMS-STELLA-SIGNAL SYM-STREAMS-STELLA-READ-EXCEPTION
    (CONCATENATE BODY NIL))))

;;; (DEFUN (FORMAT-WALK-MESSAGE-ARGUMENTS CONS) ...)

(CL:DEFUN FORMAT-WALK-MESSAGE-ARGUMENTS (MESSAGEARGUMENTSTREE)
  (CL:LET* ((IT (ALLOCATE-ITERATOR MESSAGEARGUMENTSTREE)))
   (CL:LOOP WHILE (NEXT? IT) DO
    (CL:LET* ((ITEM (%CONS-ITERATOR.VALUE IT)))
     (CL:COND
      ((SUBTYPE-OF-SYMBOL? (SAFE-PRIMARY-TYPE ITEM))
       (CL:PROGN
        (CL:WHEN (CL:NOT (CL:EQ ITEM EOL))
         (VALUE-SETTER IT
          (LIST* SYM-STREAMS-STELLA-DE-UGLIFY-PARSE-TREE ITEM NIL)))))
      (CL:T)))))
  (CL:RETURN-FROM FORMAT-WALK-MESSAGE-ARGUMENTS MESSAGEARGUMENTSTREE))

;;; (DEFMACRO WALK-ERROR ...)

(CL:DEFUN WALK-ERROR-EXPANDER (BODY)
  (CL:LET*
   ((MESSAGEARGUMENTS
     (FORMAT-MESSAGE-ARGUMENTS (FORMAT-WALK-MESSAGE-ARGUMENTS BODY)
      TRUE)))
   (CL:RETURN-FROM WALK-ERROR-EXPANDER
    (LIST* SYM-STREAMS-STELLA-SPECIAL
     (CONS
      (LIST* SYM-STREAMS-STELLA-*PRINTREADABLY?* SYM-STREAMS-STELLA-TRUE
       NIL)
      NIL)
     (CONS SYM-STREAMS-STELLA-SIGNAL-TRANSLATION-ERROR NIL)
     (LIST* SYM-STREAMS-STELLA-UNLESS
      (CONS SYM-STREAMS-STELLA-SUPPRESS-WARNINGS? NIL)
      (LIST* SYM-STREAMS-STELLA-PRINT-ERROR-CONTEXT
       (WRAP-STRING ">> ERROR: ") SYM-STREAMS-STELLA-STANDARD-ERROR NIL)
      (LIST* SYM-STREAMS-STELLA-PRINT-STREAM
       SYM-STREAMS-STELLA-STANDARD-ERROR SYM-STREAMS-STELLA-EOL
       (WRAP-STRING " ")
       (CONCATENATE MESSAGEARGUMENTS (CONS (WRAP-STRING ".") NIL)))
      NIL)
     NIL))))

;;; (DEFMACRO WALK-INFORM ...)

(CL:DEFUN WALK-INFORM-EXPANDER (BODY)
  (CL:LET*
   ((MESSAGEARGUMENTS
     (FORMAT-MESSAGE-ARGUMENTS (FORMAT-WALK-MESSAGE-ARGUMENTS BODY)
      TRUE)))
   (CL:RETURN-FROM WALK-INFORM-EXPANDER
    (LIST* SYM-STREAMS-STELLA-SPECIAL
     (CONS
      (LIST* SYM-STREAMS-STELLA-*PRINTREADABLY?* SYM-STREAMS-STELLA-TRUE
       NIL)
      NIL)
     (CONS SYM-STREAMS-STELLA-SIGNAL-TRANSLATION-WARNING NIL)
     (LIST* SYM-STREAMS-STELLA-UNLESS
      (CONS SYM-STREAMS-STELLA-SUPPRESS-WARNINGS? NIL)
      (LIST* SYM-STREAMS-STELLA-PRINT-ERROR-CONTEXT
       (WRAP-STRING ">> WARNING: ") SYM-STREAMS-STELLA-STANDARD-OUTPUT
       NIL)
      (LIST* SYM-STREAMS-STELLA-PRINT-STREAM
       SYM-STREAMS-STELLA-STANDARD-OUTPUT SYM-STREAMS-STELLA-EOL
       (WRAP-STRING " ")
       (CONCATENATE MESSAGEARGUMENTS (CONS (WRAP-STRING ".") NIL)))
      NIL)
     NIL))))

;;; (DEFMACRO WALK-WARN ...)

(CL:DEFUN WALK-WARN-EXPANDER (BODY)
  (CL:LET*
   ((MESSAGEARGUMENTS
     (FORMAT-MESSAGE-ARGUMENTS (FORMAT-WALK-MESSAGE-ARGUMENTS BODY)
      TRUE)))
   (CL:RETURN-FROM WALK-WARN-EXPANDER
    (LIST* SYM-STREAMS-STELLA-SPECIAL
     (CONS
      (LIST* SYM-STREAMS-STELLA-*PRINTREADABLY?* SYM-STREAMS-STELLA-TRUE
       NIL)
      NIL)
     (CONS SYM-STREAMS-STELLA-SIGNAL-TRANSLATION-WARNING NIL)
     (LIST* SYM-STREAMS-STELLA-UNLESS
      (CONS SYM-STREAMS-STELLA-SUPPRESS-WARNINGS? NIL)
      (LIST* SYM-STREAMS-STELLA-PRINT-ERROR-CONTEXT
       (WRAP-STRING ">> WARNING: ") SYM-STREAMS-STELLA-STANDARD-WARNING
       NIL)
      (LIST* SYM-STREAMS-STELLA-PRINT-STREAM
       SYM-STREAMS-STELLA-STANDARD-WARNING SYM-STREAMS-STELLA-EOL
       (WRAP-STRING " ")
       (CONCATENATE MESSAGEARGUMENTS (CONS (WRAP-STRING ".") NIL)))
      NIL)
     NIL))))

;;; (DEFMACRO SAFETY ...)

(CL:DEFUN SAFETY-EXPANDER (LEVEL TEST BODY)
  "Signal warning message, placing non-string arguments in quotes."
  (CL:WHEN (CL:> (%INTEGER-WRAPPER.WRAPPER-VALUE LEVEL) *SAFETY*)
   (CL:RETURN-FROM SAFETY-EXPANDER NULL))
  (CL:SETQ BODY (FORMAT-MESSAGE-ARGUMENTS BODY FALSE))
  (CL:RETURN-FROM SAFETY-EXPANDER
   (LIST* SYM-STREAMS-STELLA-WHEN (LIST* SYM-STREAMS-STELLA-NOT TEST NIL)
    (LIST* SYM-STREAMS-STELLA-PRINT-STREAM KWD-STREAMS-ERROR
     (WRAP-STRING "Safety violation: ") (CONCATENATE BODY NIL))
    NIL)))

;;; (DEFMACRO EVAL-ERROR ...)

(CL:DEFUN EVAL-ERROR-EXPANDER (BODY)
  (CL:LET* ((MESSAGEARGUMENTS (FORMAT-WALK-MESSAGE-ARGUMENTS BODY)))
   (CL:RETURN-FROM EVAL-ERROR-EXPANDER
    (LIST* SYM-STREAMS-STELLA-SPECIAL
     (CONS
      (LIST* SYM-STREAMS-STELLA-*PRINTREADABLY?* SYM-STREAMS-STELLA-TRUE
       NIL)
      NIL)
     (CONS SYM-STREAMS-STELLA-SIGNAL-EVALUATION-ERROR NIL)
     (LIST* SYM-STREAMS-STELLA-PRINT-EVALUATION-ERROR-CONTEXT
      (WRAP-STRING ">> ERROR: ") SYM-STREAMS-STELLA-STANDARD-ERROR NIL)
     (LIST* SYM-STREAMS-STELLA-INFORM SYM-STREAMS-STELLA-EOL
      (WRAP-STRING "   ")
      (CONCATENATE MESSAGEARGUMENTS (CONS (WRAP-STRING ".") NIL)))
     NIL))))

;;; (DEFUN (FORMAT-STRING-MESSAGE-ARGUMENTS CONS) ...)

(CL:DEFUN FORMAT-STRING-MESSAGE-ARGUMENTS (MESSAGEARGUMENTS TRAILINGEOL?)
  (CL:LET*
   ((FORMATTEDARGUMENTS
     (FORMAT-MESSAGE-ARGUMENTS MESSAGEARGUMENTS TRAILINGEOL?)))
   (CL:LET* ((IT (ALLOCATE-ITERATOR FORMATTEDARGUMENTS)))
    (CL:LOOP WHILE (NEXT? IT) DO
     (CL:LET*
      ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE (%CONS-ITERATOR.VALUE IT))))
      (CL:COND ((SUBTYPE-OF-STRING? TEST-VALUE-000))
       ((SUBTYPE-OF? TEST-VALUE-000 SGT-STREAMS-STELLA-LITERAL-WRAPPER)
        (VALUE-SETTER IT
         (WRAP-STRING (STRINGIFY (%CONS-ITERATOR.VALUE IT)))))
       (CL:T
        (CL:IF (CL:EQ (%CONS-ITERATOR.VALUE IT) SYM-STREAMS-STELLA-EOL)
         (VALUE-SETTER IT (WRAP-STRING EOL-STRING))
         (VALUE-SETTER IT
          (LIST* SYM-STREAMS-STELLA-STRINGIFY (%CONS-ITERATOR.VALUE IT)
           NIL))))))))
   (CL:RETURN-FROM FORMAT-STRING-MESSAGE-ARGUMENTS FORMATTEDARGUMENTS)))

;;; (DEFMACRO MESSAGE-TO-STRING ...)

(CL:DEFUN MESSAGE-TO-STRING-EXPANDER (BODY)
  (CL:LET*
   ((MESSAGEARGUMENTS (FORMAT-STRING-MESSAGE-ARGUMENTS BODY FALSE))
    (MESSAGEVAR (LOCAL-GENSYM "MESSAGE")))
   (CL:RETURN-FROM MESSAGE-TO-STRING-EXPANDER
    (LIST* SYM-STREAMS-STELLA-VRLET
     (CONS
      (CONS MESSAGEVAR
       (LIST* SYM-STREAMS-STELLA-STRING SYM-STREAMS-STELLA-NULL NIL))
      NIL)
     (LIST* SYM-STREAMS-STELLA-SPECIAL
      (CONS
       (LIST* SYM-STREAMS-STELLA-*PRINTREADABLY?* SYM-STREAMS-STELLA-TRUE
        NIL)
       NIL)
      (LIST* SYM-STREAMS-STELLA-SETQ MESSAGEVAR
       (CONS
        (CONS SYM-STREAMS-STELLA-CONCATENATE
         (CONCATENATE MESSAGEARGUMENTS NIL))
        NIL))
      NIL)
     MESSAGEVAR NIL))))

;;; (DEFGLOBAL *OPEN-FILE-STREAMS* ...)

(CL:DEFVAR *OPEN-FILE-STREAMS* NULL
  "List of file streams that are currently open.")

;;; (DEFUN INITIALIZE-FILE-OUTPUT-STREAM ...)

(CL:DEFUN INITIALIZE-FILE-OUTPUT-STREAM (SELF)
  (CL:LET*
   ((FILENAME
     (TRANSLATE-LOGICAL-PATHNAME (%OUTPUT-FILE-STREAM.FILENAME SELF)))
    (IFEXISTSACTION
     (%KEYWORD.SYMBOL-NAME (%OUTPUT-FILE-STREAM.IF-EXISTS-ACTION SELF))))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING FILENAME IFEXISTSACTION))
   (CL:SETF (%OUTPUT-FILE-STREAM.NATIVE-STREAM SELF)
    (CL:OPEN FILENAME :DIRECTION :OUTPUT :IF-EXISTS
     (CL:INTERN IFEXISTSACTION "KEYWORD")))
   (CL:WHEN (CL:EQ (%OUTPUT-FILE-STREAM.NATIVE-STREAM SELF) NULL)
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "initialize-file-output-stream: Could not open `" SELF "'")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))
   (CL:SETF (%OUTPUT-FILE-STREAM.STATE SELF) KWD-STREAMS-OPEN)
   (PUSH *OPEN-FILE-STREAMS* SELF))
  :VOID)

;;; (DEFUN (TERMINATE-FILE-OUTPUT-STREAM? BOOLEAN) ...)

(CL:DEFUN TERMINATE-FILE-OUTPUT-STREAM? (SELF)
  (CL:LET* ((NATIVE-STREAM (%OUTPUT-FILE-STREAM.NATIVE-STREAM SELF)))
   (CL:CLOSE NATIVE-STREAM)
   (CL:SETF (%OUTPUT-FILE-STREAM.NATIVE-STREAM SELF) NULL)
   (CL:SETF (%OUTPUT-FILE-STREAM.STATE SELF) KWD-STREAMS-CLOSED)
   (REMOVE *OPEN-FILE-STREAMS* SELF)
   (CL:RETURN-FROM TERMINATE-FILE-OUTPUT-STREAM? TRUE)))

;;; (DEFUN INITIALIZE-FILE-INPUT-STREAM ...)

(CL:DEFUN INITIALIZE-FILE-INPUT-STREAM (SELF)
  (CL:LET*
   ((FILENAME
     (TRANSLATE-LOGICAL-PATHNAME (%INPUT-FILE-STREAM.FILENAME SELF)))
    (IFNOTEXISTSACTION
     (%KEYWORD.SYMBOL-NAME
      (%INPUT-FILE-STREAM.IF-NOT-EXISTS-ACTION SELF))))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING FILENAME IFNOTEXISTSACTION))
   (CL:SETF (%INPUT-FILE-STREAM.NATIVE-STREAM SELF)
    (CL:OPEN FILENAME :DIRECTION :INPUT :IF-DOES-NOT-EXIST
     (CL:INTERN IFNOTEXISTSACTION "KEYWORD")))
   (CL:WHEN (CL:EQ (%INPUT-FILE-STREAM.NATIVE-STREAM SELF) NULL)
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "initialize-file-input-stream: Could not open `" SELF "'")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))
   (CL:SETF (%INPUT-FILE-STREAM.STATE SELF) KWD-STREAMS-OPEN)
   (PUSH *OPEN-FILE-STREAMS* SELF))
  :VOID)

;;; (DEFUN (TERMINATE-FILE-INPUT-STREAM? BOOLEAN) ...)

(CL:DEFUN TERMINATE-FILE-INPUT-STREAM? (SELF)
  (CL:LET* ((NATIVE-STREAM (%INPUT-FILE-STREAM.NATIVE-STREAM SELF)))
   (CL:CLOSE NATIVE-STREAM)
   (CL:SETF (%INPUT-FILE-STREAM.NATIVE-STREAM SELF) NULL)
   (CL:SETF (%INPUT-FILE-STREAM.STATE SELF) KWD-STREAMS-CLOSED)
   (REMOVE *OPEN-FILE-STREAMS* SELF)
   (CL:RETURN-FROM TERMINATE-FILE-INPUT-STREAM? TRUE)))

;;; (DEFUN INITIALIZE-STRING-OUTPUT-STREAM ...)

(CL:DEFUN INITIALIZE-STRING-OUTPUT-STREAM (SELF)
  (CL:SETF (%OUTPUT-STRING-STREAM.NATIVE-STREAM SELF)
   (CL:MAKE-STRING-OUTPUT-STREAM))
  :VOID)

;;; (DEFMETHOD (THE-STRING-READER STRING) ...)

(CL:DEFMETHOD THE-STRING-READER ((SELF OUTPUT-STRING-STREAM))
  (CL:LET*
   ((NATIVE-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM SELF))
    (STRING STELLA::NULL-STRING))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING STRING))
   (SETQ STRING (CL:GET-OUTPUT-STREAM-STRING NATIVE-STREAM))
   (CL:WHEN (CL:EQ STRING STELLA::NULL-STRING) (CL:SETQ STRING ""))
   (CL:RETURN-FROM THE-STRING-READER STRING)))

;;; (DEFUN INITIALIZE-STRING-INPUT-STREAM ...)

(CL:DEFUN INITIALIZE-STRING-INPUT-STREAM (SELF)
  (CL:LET* ((STRING (%INPUT-STRING-STREAM.THE-STRING SELF)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING STRING))
   (CL:SETF (%INPUT-STRING-STREAM.NATIVE-STREAM SELF)
    (CL:MAKE-STRING-INPUT-STREAM STRING)))
  :VOID)

;;; (DEFUN CLOSE-STREAM ...)

(CL:DEFUN CLOSE-STREAM (SELF)
  (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE SELF)))
   (CL:COND
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-STREAMS-STELLA-FILE-INPUT-STREAM)
     (CL:PROGN (TERMINATE-FILE-INPUT-STREAM? SELF)))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-STREAMS-STELLA-FILE-OUTPUT-STREAM)
     (CL:PROGN (TERMINATE-FILE-OUTPUT-STREAM? SELF)))
    (CL:T)))
  :VOID)

;;; (DEFUN CLOSE-ALL-FILES ...)

(CL:DEFUN CLOSE-ALL-FILES ()
  (CL:LET* ((OPENSTREAMS (COPY *OPEN-FILE-STREAMS*)))
   (CL:LET* ((STREAM NULL) (ITER-000 (%LIST.THE-CONS-LIST OPENSTREAMS)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:PROGN (CL:SETQ STREAM (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (CLOSE-STREAM STREAM)))
   (FREE OPENSTREAMS))
  :VOID)

(CL:DEFUN ACCESS-STREAM-ITERATOR-SLOT-VALUE (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-STREAMS-STELLA-THE-STREAM)
    (CL:IF SETVALUE? (CL:SETF (%STREAM-ITERATOR.THE-STREAM SELF) VALUE)
     (CL:SETQ VALUE (%STREAM-ITERATOR.THE-STREAM SELF))))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
      SLOTNAME "' is not a valid case option")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
  (CL:RETURN-FROM ACCESS-STREAM-ITERATOR-SLOT-VALUE VALUE))

(CL:DEFUN NEW-S-EXPRESSION-ITERATOR ()
  (CL:LET* ((SELF NULL)) (CL:SETQ SELF (%MAKE-S-EXPRESSION-ITERATOR))
   (CL:SETF (%S-EXPRESSION-ITERATOR.FIRST-ITERATION? SELF) TRUE)
   (CL:SETF (%S-EXPRESSION-ITERATOR.VALUE SELF) NULL)
   (CL:SETF (%S-EXPRESSION-ITERATOR.THE-STREAM SELF) NULL)
   (CL:RETURN-FROM NEW-S-EXPRESSION-ITERATOR SELF)))

(CL:DEFMETHOD FREE ((SELF S-EXPRESSION-ITERATOR))
  (CL:WHEN (TERMINATE-STREAM-ITERATOR? SELF) (UNMAKE SELF))
  :VOID)

(CL:DEFMETHOD PRIMARY-TYPE ((SELF S-EXPRESSION-ITERATOR))
  (CL:RETURN-FROM PRIMARY-TYPE SGT-STREAMS-STELLA-S-EXPRESSION-ITERATOR))

(CL:DEFUN NEW-LINE-ITERATOR ()
  (CL:LET* ((SELF NULL)) (CL:SETQ SELF (%MAKE-LINE-ITERATOR))
   (CL:SETF (%LINE-ITERATOR.FIRST-ITERATION? SELF) TRUE)
   (CL:SETF (%LINE-ITERATOR.VALUE SELF) STELLA::NULL-STRING)
   (CL:SETF (%LINE-ITERATOR.THE-STREAM SELF) NULL)
   (CL:RETURN-FROM NEW-LINE-ITERATOR SELF)))

(CL:DEFMETHOD FREE ((SELF LINE-ITERATOR))
  (CL:WHEN (TERMINATE-STREAM-ITERATOR? SELF) (UNMAKE SELF))
  :VOID)

(CL:DEFMETHOD PRIMARY-TYPE ((SELF LINE-ITERATOR))
  (CL:RETURN-FROM PRIMARY-TYPE SGT-STREAMS-STELLA-LINE-ITERATOR))

(CL:DEFUN NEW-CHARACTER-ITERATOR ()
  (CL:LET* ((SELF NULL)) (CL:SETQ SELF (%MAKE-CHARACTER-ITERATOR))
   (CL:SETF (%CHARACTER-ITERATOR.FIRST-ITERATION? SELF) TRUE)
   (CL:SETF (%CHARACTER-ITERATOR.VALUE SELF) NULL-CHARACTER)
   (CL:SETF (%CHARACTER-ITERATOR.THE-STREAM SELF) NULL)
   (CL:RETURN-FROM NEW-CHARACTER-ITERATOR SELF)))

(CL:DEFMETHOD FREE ((SELF CHARACTER-ITERATOR))
  (CL:WHEN (TERMINATE-STREAM-ITERATOR? SELF) (UNMAKE SELF))
  :VOID)

(CL:DEFMETHOD PRIMARY-TYPE ((SELF CHARACTER-ITERATOR))
  (CL:RETURN-FROM PRIMARY-TYPE SGT-STREAMS-STELLA-CHARACTER-ITERATOR))

;;; (DEFUN (TERMINATE-STREAM-ITERATOR? BOOLEAN) ...)

(CL:DEFUN TERMINATE-STREAM-ITERATOR? (SELF)
  (CL:WHEN (CL:NOT (CL:EQ (%STREAM-ITERATOR.THE-STREAM SELF) NULL))
   (FREE (%STREAM-ITERATOR.THE-STREAM SELF)))
  (CL:RETURN-FROM TERMINATE-STREAM-ITERATOR? TRUE))

;;; (DEFUN (S-EXPRESSIONS S-EXPRESSION-ITERATOR) ...)

(CL:DEFUN S-EXPRESSIONS (STREAM)
  (CL:LET* ((SELF-000 (NEW-S-EXPRESSION-ITERATOR)))
   (CL:SETF (%S-EXPRESSION-ITERATOR.THE-STREAM SELF-000) STREAM)
   (CL:LET* ((VALUE-000 SELF-000))
    (CL:RETURN-FROM S-EXPRESSIONS VALUE-000))))

;;; (DEFMETHOD (NEXT? BOOLEAN) ...)

(CL:DEFMETHOD NEXT? ((SELF S-EXPRESSION-ITERATOR))
  (CL:SETF (%S-EXPRESSION-ITERATOR.FIRST-ITERATION? SELF) FALSE)
  (CL:LET* ((OBJECT NULL) (EOF? FALSE))
   (CL:MULTIPLE-VALUE-SETQ (OBJECT EOF?)
    (READ-S-EXPRESSION (%S-EXPRESSION-ITERATOR.THE-STREAM SELF)))
   (CL:COND
    (EOF? (CLOSE-STREAM (%S-EXPRESSION-ITERATOR.THE-STREAM SELF))
     (CL:RETURN-FROM NEXT? FALSE))
    (CL:T (CL:SETF (%S-EXPRESSION-ITERATOR.VALUE SELF) OBJECT)
     (CL:RETURN-FROM NEXT? TRUE)))))

;;; (DEFUN (LINES LINE-ITERATOR) ...)

(CL:DEFUN LINES (STREAM)
  (CL:LET* ((SELF-000 (NEW-LINE-ITERATOR)))
   (CL:SETF (%LINE-ITERATOR.THE-STREAM SELF-000) STREAM)
   (CL:LET* ((VALUE-000 SELF-000)) (CL:RETURN-FROM LINES VALUE-000))))

;;; (DEFMETHOD (NEXT? BOOLEAN) ...)

(CL:DEFMETHOD NEXT? ((SELF LINE-ITERATOR))
  (CL:SETF (%LINE-ITERATOR.FIRST-ITERATION? SELF) FALSE)
  (CL:LET* ((LINE STELLA::NULL-STRING) (EOF? FALSE))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING LINE))
   (CL:MULTIPLE-VALUE-SETQ (LINE EOF?)
    (READ-LINE (%LINE-ITERATOR.THE-STREAM SELF)))
   (CL:COND
    (EOF? (CLOSE-STREAM (%LINE-ITERATOR.THE-STREAM SELF))
     (CL:RETURN-FROM NEXT? FALSE))
    (CL:T (CL:SETF (%LINE-ITERATOR.VALUE SELF) LINE)
     (CL:RETURN-FROM NEXT? TRUE)))))

;;; (DEFUN (CHARACTERS CHARACTER-ITERATOR) ...)

(CL:DEFUN CHARACTERS (STREAM)
  (CL:LET* ((SELF-000 (NEW-CHARACTER-ITERATOR)))
   (CL:SETF (%CHARACTER-ITERATOR.THE-STREAM SELF-000) STREAM)
   (CL:LET* ((VALUE-000 SELF-000)) (CL:RETURN-FROM CHARACTERS VALUE-000))))

;;; (DEFMETHOD (NEXT? BOOLEAN) ...)

(CL:DEFMETHOD NEXT? ((SELF CHARACTER-ITERATOR))
  (CL:SETF (%CHARACTER-ITERATOR.FIRST-ITERATION? SELF) FALSE)
  (CL:LET* ((CHAR NULL-CHARACTER) (EOF? FALSE))
   (CL:MULTIPLE-VALUE-SETQ (CHAR EOF?)
    (READ-CHARACTER (%CHARACTER-ITERATOR.THE-STREAM SELF)))
   (CL:COND
    (EOF? (CLOSE-STREAM (%CHARACTER-ITERATOR.THE-STREAM SELF))
     (CL:RETURN-FROM NEXT? FALSE))
    (CL:T (CL:SETF (%CHARACTER-ITERATOR.VALUE SELF) CHAR)
     (CL:RETURN-FROM NEXT? TRUE)))))

;;; (DEFUN COPY-FILE ...)

(CL:DEFUN COPY-FILE (FROMFILE TOFILE)
  (CL:WHEN (CL:NOT (PROBE-FILE? FROMFILE))
   (CL:WARN "Can't copy non-existent file: `~A'~%" FROMFILE)
   (CL:RETURN-FROM COPY-FILE))
  (CL:LET*
   ((FROM (NEW-INPUT-FILE-STREAM FROMFILE))
    (TO (NEW-OUTPUT-FILE-STREAM TOFILE)))
   (CL:LET* ((LINE STELLA::NULL-STRING) (ITER-000 (LINES FROM)))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING LINE))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ LINE (%LINE-ITERATOR.VALUE ITER-000))
     (%%PRINT-STREAM (%OUTPUT-FILE-STREAM.NATIVE-STREAM TO) LINE EOL)))
   (FREE TO))
  :VOID)

(CL:DEFUN HELP-STARTUP-STREAMS1 ()
  (CL:PROGN
   (CL:SETQ SYM-STREAMS-STELLA-EOL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "EOL" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-PRINT-STREAM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT-STREAM" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-STANDARD-OUTPUT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STANDARD-OUTPUT" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-PRINT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-PRINT-EXPANDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT-EXPANDER" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-INFORM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INFORM" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-INFORM-EXPANDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INFORM-EXPANDER" NULL 0))
   (CL:SETQ KWD-STREAMS-COMMON-LISP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "COMMON-LISP" NULL 2))
   (CL:SETQ KWD-STREAMS-WARN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WARN" NULL 2))
   (CL:SETQ SYM-STREAMS-STELLA-STANDARD-WARNING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STANDARD-WARNING" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-WARN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WARN" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-WARN-EXPANDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WARN-EXPANDER" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-NULL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-STELLA-EXCEPTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STELLA-EXCEPTION" NULL 0))
   (CL:SETQ SGT-STREAMS-STELLA-STRING-WRAPPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STRING-WRAPPER" NULL 1))
   (CL:SETQ SYM-STREAMS-STELLA-SIGNAL-EXCEPTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SIGNAL-EXCEPTION" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-NEW
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NEW" NULL 0))
   (CL:SETQ KWD-STREAMS-MESSAGE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MESSAGE" NULL 2))
   (CL:SETQ SYM-STREAMS-STELLA-LET
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LET" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-OUTPUT-STRING-STREAM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "OUTPUT-STRING-STREAM" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-THE-STRING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "THE-STRING" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-SIGNAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SIGNAL" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-SIGNAL-EXPANDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SIGNAL-EXPANDER" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-ERROR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ERROR" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-ERROR-EXPANDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ERROR-EXPANDER" NULL 0))
   (CL:SETQ KWD-STREAMS-JAVA
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA" NULL 2))
   (CL:SETQ SYM-STREAMS-STELLA--ERROR-MESSAGE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "-ERROR-MESSAGE" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-FIRST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FIRST" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-BODY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BODY" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-VERBATIM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "VERBATIM" NULL 0))
   (CL:SETQ KWD-STREAMS-CONTINUABLE-ERROR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTINUABLE-ERROR" NULL 2))
   (CL:SETQ SYM-STREAMS-STELLA-CONTINUABLE-ERROR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTINUABLE-ERROR" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-CONTINUABLE-ERROR-EXPANDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTINUABLE-ERROR-EXPANDER" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-READ-EXCEPTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "READ-EXCEPTION" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-SIGNAL-READ-ERROR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SIGNAL-READ-ERROR" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-SIGNAL-READ-ERROR-EXPANDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SIGNAL-READ-ERROR-EXPANDER" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-DE-UGLIFY-PARSE-TREE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DE-UGLIFY-PARSE-TREE" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-SPECIAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SPECIAL" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-*PRINTREADABLY?*
    (INTERN-RIGID-SYMBOL-WRT-MODULE "*PRINTREADABLY?*" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-TRUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TRUE" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-SIGNAL-TRANSLATION-ERROR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SIGNAL-TRANSLATION-ERROR" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-UNLESS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UNLESS" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-SUPPRESS-WARNINGS?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SUPPRESS-WARNINGS?" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-PRINT-ERROR-CONTEXT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT-ERROR-CONTEXT" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-STANDARD-ERROR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STANDARD-ERROR" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-WALK-ERROR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WALK-ERROR" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-WALK-ERROR-EXPANDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WALK-ERROR-EXPANDER" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-SIGNAL-TRANSLATION-WARNING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SIGNAL-TRANSLATION-WARNING" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-WALK-INFORM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WALK-INFORM" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-WALK-INFORM-EXPANDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WALK-INFORM-EXPANDER" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-WALK-WARN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WALK-WARN" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-WALK-WARN-EXPANDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WALK-WARN-EXPANDER" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-WHEN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WHEN" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-NOT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NOT" NULL 0))
   (CL:SETQ KWD-STREAMS-ERROR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ERROR" NULL 2))
   (CL:SETQ SYM-STREAMS-STELLA-SAFETY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SAFETY" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-SAFETY-EXPANDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SAFETY-EXPANDER" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-SIGNAL-EVALUATION-ERROR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SIGNAL-EVALUATION-ERROR" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-PRINT-EVALUATION-ERROR-CONTEXT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT-EVALUATION-ERROR-CONTEXT" NULL
     0))
   (CL:SETQ SYM-STREAMS-STELLA-EVAL-ERROR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "EVAL-ERROR" NULL 0)))
  :VOID)

(CL:DEFUN HELP-STARTUP-STREAMS2 ()
  (CL:PROGN
   (CL:SETQ SYM-STREAMS-STELLA-EVAL-ERROR-EXPANDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "EVAL-ERROR-EXPANDER" NULL 0))
   (CL:SETQ SGT-STREAMS-STELLA-LITERAL-WRAPPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LITERAL-WRAPPER" NULL 1))
   (CL:SETQ SYM-STREAMS-STELLA-STRINGIFY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STRINGIFY" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-VRLET
    (INTERN-RIGID-SYMBOL-WRT-MODULE "VRLET" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-STRING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STRING" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-SETQ
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SETQ" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-CONCATENATE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONCATENATE" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-MESSAGE-TO-STRING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MESSAGE-TO-STRING" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-MESSAGE-TO-STRING-EXPANDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MESSAGE-TO-STRING-EXPANDER" NULL 0))
   (CL:SETQ KWD-STREAMS-OPEN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "OPEN" NULL 2))
   (CL:SETQ KWD-STREAMS-CLOSED
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CLOSED" NULL 2))
   (CL:SETQ SGT-STREAMS-STELLA-FILE-INPUT-STREAM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FILE-INPUT-STREAM" NULL 1))
   (CL:SETQ SGT-STREAMS-STELLA-FILE-OUTPUT-STREAM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FILE-OUTPUT-STREAM" NULL 1))
   (CL:SETQ SYM-STREAMS-STELLA-THE-STREAM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "THE-STREAM" NULL 0))
   (CL:SETQ SGT-STREAMS-STELLA-S-EXPRESSION-ITERATOR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "S-EXPRESSION-ITERATOR" NULL 1))
   (CL:SETQ SGT-STREAMS-STELLA-LINE-ITERATOR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LINE-ITERATOR" NULL 1))
   (CL:SETQ SGT-STREAMS-STELLA-CHARACTER-ITERATOR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CHARACTER-ITERATOR" NULL 1))
   (CL:SETQ SYM-STREAMS-STELLA-STARTUP-STREAMS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-STREAMS" NULL 0))
   (CL:SETQ SYM-STREAMS-STELLA-METHOD-STARTUP-CLASSNAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME" NULL 0)))
  :VOID)

(CL:DEFUN HELP-STARTUP-STREAMS3 ()
  (CL:PROGN
   (DEFINE-FUNCTION-OBJECT "FORMAT-MESSAGE-ARGUMENTS"
    "(DEFUN (FORMAT-MESSAGE-ARGUMENTS CONS) ((MESSAGEARGUMENTSTREE CONS) (TRAILINGEOL? BOOLEAN)))"
    (CL:FUNCTION FORMAT-MESSAGE-ARGUMENTS) NULL)
   (DEFINE-FUNCTION-OBJECT "PRINT-EXPANDER"
    "(DEFUN (PRINT-EXPANDER OBJECT) (|&BODY| (BODY CONS)) :PUBLIC? TRUE :DOCUMENTATION \"Print arguments to the standard output stream.\")"
    (CL:FUNCTION PRINT-EXPANDER) NULL)
   (DEFINE-FUNCTION-OBJECT "INFORM-EXPANDER"
    "(DEFUN (INFORM-EXPANDER OBJECT) (|&BODY| (BODY CONS)) :PUBLIC? TRUE :DOCUMENTATION \"Print informative message, placing non-string arguments in quotes,
and terminating with a newline.\")" (CL:FUNCTION INFORM-EXPANDER) NULL)
   (DEFINE-FUNCTION-OBJECT "WARN-EXPANDER"
    "(DEFUN (WARN-EXPANDER OBJECT) (|&BODY| (BODY CONS)) :PUBLIC? TRUE :DOCUMENTATION \"Signal warning message, placing non-string arguments in quotes.\")"
    (CL:FUNCTION WARN-EXPANDER) NULL)
   (DEFINE-FUNCTION-OBJECT "SIGNAL-EXPANDER"
    "(DEFUN (SIGNAL-EXPANDER OBJECT) ((TYPE SYMBOL) |&BODY| (BODY CONS)) :PUBLIC? TRUE :DOCUMENTATION \"Signal error message, placing non-string arguments in quotes.\")"
    (CL:FUNCTION SIGNAL-EXPANDER) NULL)
   (DEFINE-FUNCTION-OBJECT "ERROR-EXPANDER"
    "(DEFUN (ERROR-EXPANDER OBJECT) (|&BODY| (BODY CONS)) :PUBLIC? TRUE :DOCUMENTATION \"Signal error message, placing non-string arguments in quotes.\")"
    (CL:FUNCTION ERROR-EXPANDER) NULL)
   (DEFINE-FUNCTION-OBJECT "CONTINUABLE-ERROR-EXPANDER"
    "(DEFUN (CONTINUABLE-ERROR-EXPANDER OBJECT) (|&BODY| (BODY CONS)) :PUBLIC? TRUE :DOCUMENTATION \"Signal error message, placing non-string arguments in quotes.\")"
    (CL:FUNCTION CONTINUABLE-ERROR-EXPANDER) NULL)
   (DEFINE-FUNCTION-OBJECT "SIGNAL-READ-ERROR-EXPANDER"
    "(DEFUN (SIGNAL-READ-ERROR-EXPANDER OBJECT) (|&BODY| (BODY CONS)) :PUBLIC? TRUE :DOCUMENTATION \"Specialized version of `signal' that throws a READ-EXCEPTION.\")"
    (CL:FUNCTION SIGNAL-READ-ERROR-EXPANDER) NULL)
   (DEFINE-FUNCTION-OBJECT "FORMAT-WALK-MESSAGE-ARGUMENTS"
    "(DEFUN (FORMAT-WALK-MESSAGE-ARGUMENTS CONS) ((MESSAGEARGUMENTSTREE CONS)))"
    (CL:FUNCTION FORMAT-WALK-MESSAGE-ARGUMENTS) NULL)
   (DEFINE-FUNCTION-OBJECT "WALK-ERROR-EXPANDER"
    "(DEFUN (WALK-ERROR-EXPANDER OBJECT) (|&BODY| (BODY CONS)))"
    (CL:FUNCTION WALK-ERROR-EXPANDER) NULL)
   (DEFINE-FUNCTION-OBJECT "WALK-INFORM-EXPANDER"
    "(DEFUN (WALK-INFORM-EXPANDER OBJECT) (|&BODY| (BODY CONS)))"
    (CL:FUNCTION WALK-INFORM-EXPANDER) NULL)
   (DEFINE-FUNCTION-OBJECT "WALK-WARN-EXPANDER"
    "(DEFUN (WALK-WARN-EXPANDER OBJECT) (|&BODY| (BODY CONS)))"
    (CL:FUNCTION WALK-WARN-EXPANDER) NULL)
   (DEFINE-FUNCTION-OBJECT "SAFETY-EXPANDER"
    "(DEFUN (SAFETY-EXPANDER OBJECT) ((LEVEL INTEGER-WRAPPER) (TEST OBJECT) |&BODY| (BODY CONS)) :PUBLIC? TRUE :DOCUMENTATION \"Signal warning message, placing non-string arguments in quotes.\")"
    (CL:FUNCTION SAFETY-EXPANDER) NULL)
   (DEFINE-FUNCTION-OBJECT "EVAL-ERROR-EXPANDER"
    "(DEFUN (EVAL-ERROR-EXPANDER OBJECT) (|&BODY| (BODY CONS)))"
    (CL:FUNCTION EVAL-ERROR-EXPANDER) NULL)
   (DEFINE-FUNCTION-OBJECT "FORMAT-STRING-MESSAGE-ARGUMENTS"
    "(DEFUN (FORMAT-STRING-MESSAGE-ARGUMENTS CONS) ((MESSAGEARGUMENTS CONS) (TRAILINGEOL? BOOLEAN)))"
    (CL:FUNCTION FORMAT-STRING-MESSAGE-ARGUMENTS) NULL)
   (DEFINE-FUNCTION-OBJECT "MESSAGE-TO-STRING-EXPANDER"
    "(DEFUN (MESSAGE-TO-STRING-EXPANDER OBJECT) (|&BODY| (BODY CONS)))"
    (CL:FUNCTION MESSAGE-TO-STRING-EXPANDER) NULL)
   (DEFINE-FUNCTION-OBJECT "INITIALIZE-FILE-OUTPUT-STREAM"
    "(DEFUN INITIALIZE-FILE-OUTPUT-STREAM ((SELF FILE-OUTPUT-STREAM)))"
    (CL:FUNCTION INITIALIZE-FILE-OUTPUT-STREAM) NULL)
   (DEFINE-FUNCTION-OBJECT "TERMINATE-FILE-OUTPUT-STREAM?"
    "(DEFUN (TERMINATE-FILE-OUTPUT-STREAM? BOOLEAN) ((SELF FILE-OUTPUT-STREAM)))"
    (CL:FUNCTION TERMINATE-FILE-OUTPUT-STREAM?) NULL)
   (DEFINE-FUNCTION-OBJECT "INITIALIZE-FILE-INPUT-STREAM"
    "(DEFUN INITIALIZE-FILE-INPUT-STREAM ((SELF FILE-INPUT-STREAM)))"
    (CL:FUNCTION INITIALIZE-FILE-INPUT-STREAM) NULL)
   (DEFINE-FUNCTION-OBJECT "TERMINATE-FILE-INPUT-STREAM?"
    "(DEFUN (TERMINATE-FILE-INPUT-STREAM? BOOLEAN) ((SELF FILE-INPUT-STREAM)))"
    (CL:FUNCTION TERMINATE-FILE-INPUT-STREAM?) NULL)
   (DEFINE-FUNCTION-OBJECT "INITIALIZE-STRING-OUTPUT-STREAM"
    "(DEFUN INITIALIZE-STRING-OUTPUT-STREAM ((SELF STRING-OUTPUT-STREAM)))"
    (CL:FUNCTION INITIALIZE-STRING-OUTPUT-STREAM) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (THE-STRING-READER STRING) ((SELF STRING-OUTPUT-STREAM)))"
    (CL:FUNCTION THE-STRING-READER) NULL)
   (DEFINE-FUNCTION-OBJECT "INITIALIZE-STRING-INPUT-STREAM"
    "(DEFUN INITIALIZE-STRING-INPUT-STREAM ((SELF STRING-INPUT-STREAM)))"
    (CL:FUNCTION INITIALIZE-STRING-INPUT-STREAM) NULL)
   (DEFINE-FUNCTION-OBJECT "CLOSE-STREAM"
    "(DEFUN CLOSE-STREAM ((SELF STREAM)))" (CL:FUNCTION CLOSE-STREAM)
    NULL)
   (DEFINE-FUNCTION-OBJECT "CLOSE-ALL-FILES"
    "(DEFUN CLOSE-ALL-FILES () :PUBLIC? TRUE)"
    (CL:FUNCTION CLOSE-ALL-FILES) NULL)
   (DEFINE-FUNCTION-OBJECT "TERMINATE-STREAM-ITERATOR?"
    "(DEFUN (TERMINATE-STREAM-ITERATOR? BOOLEAN) ((SELF STREAM-ITERATOR)))"
    (CL:FUNCTION TERMINATE-STREAM-ITERATOR?) NULL)
   (DEFINE-FUNCTION-OBJECT "S-EXPRESSIONS"
    "(DEFUN (S-EXPRESSIONS S-EXPRESSION-ITERATOR) ((STREAM INPUT-STREAM)) :PUBLIC? TRUE)"
    (CL:FUNCTION S-EXPRESSIONS) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (NEXT? BOOLEAN) ((SELF S-EXPRESSION-ITERATOR)) :PUBLIC? TRUE)"
    (CL:FUNCTION NEXT?) NULL)
   (DEFINE-FUNCTION-OBJECT "LINES"
    "(DEFUN (LINES LINE-ITERATOR) ((STREAM INPUT-STREAM)) :PUBLIC? TRUE)"
    (CL:FUNCTION LINES) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (NEXT? BOOLEAN) ((SELF LINE-ITERATOR)) :PUBLIC? TRUE)"
    (CL:FUNCTION NEXT?) NULL)
   (DEFINE-FUNCTION-OBJECT "CHARACTERS"
    "(DEFUN (CHARACTERS CHARACTER-ITERATOR) ((STREAM INPUT-STREAM)) :PUBLIC? TRUE)"
    (CL:FUNCTION CHARACTERS) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (NEXT? BOOLEAN) ((SELF CHARACTER-ITERATOR)) :PUBLIC? TRUE)"
    (CL:FUNCTION NEXT?) NULL)
   (DEFINE-FUNCTION-OBJECT "COPY-FILE"
    "(DEFUN COPY-FILE ((FROMFILE FILE-NAME) (TOFILE FILE-NAME)))"
    (CL:FUNCTION COPY-FILE) NULL)
   (DEFINE-FUNCTION-OBJECT "STARTUP-STREAMS"
    "(DEFUN STARTUP-STREAMS () :PUBLIC? TRUE)"
    (CL:FUNCTION STARTUP-STREAMS) NULL)
   (CL:LET*
    ((FUNCTION (LOOKUP-FUNCTION SYM-STREAMS-STELLA-STARTUP-STREAMS)))
    (SET-DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
     SYM-STREAMS-STELLA-METHOD-STARTUP-CLASSNAME
     (WRAP-STRING "Startup-Streams") NULL-STRING-WRAPPER)))
  :VOID)

(CL:DEFUN STARTUP-STREAMS ()
  (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 0)
   (CL:WHEN (CL:EQ STANDARD-INPUT NULL)
    (CL:LET* ((SELF-000 (NEW-INPUT-STREAM)))
     (CL:SETF (%INPUT-STREAM.NATIVE-STREAM SELF-000) CL:*STANDARD-INPUT*)
     (CL:SETQ STANDARD-INPUT SELF-000)))
   (CL:WHEN (CL:EQ STANDARD-OUTPUT NULL)
    (CL:LET* ((SELF-001 (NEW-OUTPUT-STREAM)))
     (CL:SETF (%OUTPUT-STREAM.NATIVE-STREAM SELF-001)
      CL:*STANDARD-OUTPUT*)
     (CL:SETQ STANDARD-OUTPUT SELF-001)))
   (CL:WHEN (CL:EQ STANDARD-WARNING NULL)
    (CL:LET* ((SELF-002 (NEW-OUTPUT-STREAM)))
     (CL:SETF (%OUTPUT-STREAM.NATIVE-STREAM SELF-002) CL:*ERROR-OUTPUT*)
     (CL:SETQ STANDARD-WARNING SELF-002)))
   (CL:WHEN (CL:EQ STANDARD-ERROR NULL)
    (CL:LET* ((SELF-003 (NEW-OUTPUT-STREAM)))
     (CL:SETF (%OUTPUT-STREAM.NATIVE-STREAM SELF-003) CL:*ERROR-OUTPUT*)
     (CL:SETQ STANDARD-ERROR SELF-003))))
  (CL:LET* ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2) (HELP-STARTUP-STREAMS1)
    (HELP-STARTUP-STREAMS2))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 4)
    (CL:SETQ EOL SYM-STREAMS-STELLA-EOL)
    (CL:SETQ SINGLE-QUOTE-STRING (WRAP-STRING "'"))
    (CL:SETQ SINGLE-BQUOTE-STRING (WRAP-STRING "`"))
    (CL:SETQ *OPEN-FILE-STREAMS* (NEW-LIST)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 5)
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "STREAM-ITERATOR"
        "(DEFCLASS STREAM-ITERATOR (ABSTRACT-ITERATOR) :PUBLIC? TRUE :ABSTRACT? TRUE :DOCUMENTATION \"Iterator that yields tokens from an input stream.\" :SLOTS ((THE-STREAM :TYPE INPUT-STREAM)) :TERMINATOR TERMINATE-STREAM-ITERATOR?)")))
     (CL:SETF (%CLASS.CLASS-SLOT-ACCESSOR-CODE CLASS)
      (CL:FUNCTION ACCESS-STREAM-ITERATOR-SLOT-VALUE)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "S-EXPRESSION-ITERATOR"
        "(DEFCLASS S-EXPRESSION-ITERATOR (STREAM-ITERATOR) :PUBLIC? TRUE :DOCUMENTATION \"Iterator that yields s-expressions from an input stream.\" :PARAMETERS ((ANY-VALUE :TYPE OBJECT)))")))
     (CL:SETF (%CLASS.CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-S-EXPRESSION-ITERATOR)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "LINE-ITERATOR"
        "(DEFCLASS LINE-ITERATOR (STREAM-ITERATOR) :PUBLIC? TRUE :DOCUMENTATION \"Iterator that yields lines from an input stream.\" :PARAMETERS ((ANY-VALUE :TYPE STRING)))")))
     (CL:SETF (%CLASS.CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-LINE-ITERATOR)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "CHARACTER-ITERATOR"
        "(DEFCLASS CHARACTER-ITERATOR (STREAM-ITERATOR) :PUBLIC? TRUE :DOCUMENTATION \"Iterator that yields characters from an input stream.\" :PARAMETERS ((ANY-VALUE :TYPE CHARACTER)))")))
     (CL:SETF (%CLASS.CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-CHARACTER-ITERATOR))))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7) (HELP-STARTUP-STREAMS3))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL EOL SYMBOL (QUOTE EOL) :DOCUMENTATION \"Generates a newline character when passed to a stream.\" :PUBLIC? TRUE)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL EOL-STRING STRING \"
\" :DOCUMENTATION \"A string constant containing the character sequence
necessary to generate a newline.\" :PUBLIC? TRUE)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL STANDARD-INPUT INPUT-STREAM NULL :DOCUMENTATION \"Denotes the standard input stream for the host language.\" :PUBLIC? TRUE)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL STANDARD-OUTPUT OUTPUT-STREAM NULL :DOCUMENTATION \"Denotes the standard output stream for the host language.\" :PUBLIC? TRUE)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL STANDARD-WARNING OUTPUT-STREAM NULL :DOCUMENTATION \"Denotes the standard warning stream for the host language.\" :PUBLIC? TRUE)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL STANDARD-ERROR OUTPUT-STREAM NULL :DOCUMENTATION \"Denotes the standard error stream for the host language.\" :PUBLIC? TRUE)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL SINGLE-QUOTE-STRING STRING-WRAPPER (WRAP-LITERAL \"'\") :DOCUMENTATION \"Holds a string containing the single quote character.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL SINGLE-BQUOTE-STRING STRING-WRAPPER (WRAP-LITERAL \"`\") :DOCUMENTATION \"Holds a string containing the single backquote character.\")")
    (STORE-MACRO SYM-STREAMS-STELLA-PRINT
     SYM-STREAMS-STELLA-PRINT-EXPANDER (CL:FUNCTION PRINT-EXPANDER))
    (STORE-MACRO SYM-STREAMS-STELLA-INFORM
     SYM-STREAMS-STELLA-INFORM-EXPANDER (CL:FUNCTION INFORM-EXPANDER))
    (STORE-MACRO SYM-STREAMS-STELLA-WARN SYM-STREAMS-STELLA-WARN-EXPANDER
     (CL:FUNCTION WARN-EXPANDER))
    (STORE-MACRO SYM-STREAMS-STELLA-SIGNAL
     SYM-STREAMS-STELLA-SIGNAL-EXPANDER (CL:FUNCTION SIGNAL-EXPANDER))
    (STORE-MACRO SYM-STREAMS-STELLA-ERROR
     SYM-STREAMS-STELLA-ERROR-EXPANDER (CL:FUNCTION ERROR-EXPANDER))
    (STORE-MACRO SYM-STREAMS-STELLA-CONTINUABLE-ERROR
     SYM-STREAMS-STELLA-CONTINUABLE-ERROR-EXPANDER
     (CL:FUNCTION CONTINUABLE-ERROR-EXPANDER))
    (STORE-MACRO SYM-STREAMS-STELLA-SIGNAL-READ-ERROR
     SYM-STREAMS-STELLA-SIGNAL-READ-ERROR-EXPANDER
     (CL:FUNCTION SIGNAL-READ-ERROR-EXPANDER))
    (STORE-MACRO SYM-STREAMS-STELLA-WALK-ERROR
     SYM-STREAMS-STELLA-WALK-ERROR-EXPANDER
     (CL:FUNCTION WALK-ERROR-EXPANDER))
    (STORE-MACRO SYM-STREAMS-STELLA-WALK-INFORM
     SYM-STREAMS-STELLA-WALK-INFORM-EXPANDER
     (CL:FUNCTION WALK-INFORM-EXPANDER))
    (STORE-MACRO SYM-STREAMS-STELLA-WALK-WARN
     SYM-STREAMS-STELLA-WALK-WARN-EXPANDER
     (CL:FUNCTION WALK-WARN-EXPANDER))
    (STORE-MACRO SYM-STREAMS-STELLA-SAFETY
     SYM-STREAMS-STELLA-SAFETY-EXPANDER (CL:FUNCTION SAFETY-EXPANDER))
    (STORE-MACRO SYM-STREAMS-STELLA-EVAL-ERROR
     SYM-STREAMS-STELLA-EVAL-ERROR-EXPANDER
     (CL:FUNCTION EVAL-ERROR-EXPANDER))
    (STORE-MACRO SYM-STREAMS-STELLA-MESSAGE-TO-STRING
     SYM-STREAMS-STELLA-MESSAGE-TO-STRING-EXPANDER
     (CL:FUNCTION MESSAGE-TO-STRING-EXPANDER))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *OPEN-FILE-STREAMS* (LIST OF STREAM) (NEW (LIST OF STREAM)) :DOCUMENTATION \"List of file streams that are currently open.\")")))
  :VOID)
