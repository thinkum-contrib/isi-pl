;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

#|--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1996-2000              | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied "AS IS",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR KWD-JAVA-TRANSLATE-FILE-COMMON-LISP NULL)
(CL:DEFVAR KWD-JAVA-TRANSLATE-FILE-JAVA NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-FILE-STELLA-JPTRANS NULL)
(CL:DEFVAR KWD-JAVA-TRANSLATE-FILE-FUNCTION NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-FILE-STELLA-JAVA_GLOBAL NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-FILE-STELLA-JAVA_SPECIAL NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-FILE-STELLA-METHOD-CONSTRUCTOR? NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-FILE-STELLA-METHOD-NATIVE? NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-FILE-STELLA-METHOD NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-FILE-STELLA-MACRO NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-FILE-STELLA-PRINT-METHOD NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-FILE-STELLA-TYPE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-FILE-STELLA-VERBATIM NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-FILE-STELLA-CLASS NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-FILE-STELLA-GLOBAL-VARIABLE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-FILE-STELLA-METHOD-STARTUP-CLASSNAME NULL)
(CL:DEFVAR KWD-JAVA-TRANSLATE-FILE-TWO-PASS? NULL)
(CL:DEFVAR KWD-JAVA-TRANSLATE-FILE-FORCE-TRANSLATION? NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-FILE-STELLA-STARTUP-JAVA-TRANSLATE-FILE NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL TRUE-WRAPPER *JAVA-INDENT-CHARS*
  *JAVA-STELLA-PACKAGE-MAPPING* *TRANSLATIONUNITS* NULL-STRING-WRAPPER
  FALSE-WRAPPER *CONTEXT* *STELLA-MODULE* *TRANSLATIONVERBOSITYLEVEL* EOL
  *CURRENT-STREAM* *MODULE* *TRANSLATOROUTPUTLANGUAGE* STANDARD-OUTPUT))

;;; (DEFUN CLT ...)

(CL:DEFUN CLT ()
  (CHANGE-MODULE "STELLA")
  (%SET-TRANSLATOR-OUTPUT-LANGUAGE KWD-JAVA-TRANSLATE-FILE-COMMON-LISP)
  :VOID)

;;; (DEFUN JT ...)

(CL:DEFUN JT ()
  (CHANGE-MODULE "STELLA")
  (%SET-TRANSLATOR-OUTPUT-LANGUAGE KWD-JAVA-TRANSLATE-FILE-JAVA)
  :VOID)

;;; (DEFUN JPTRANS ...)

(CL:DEFUN %JPTRANS (STATEMENT)
  "Translate `statement' to C++ and print the result."
  (CL:LET*
   ((*TRANSLATOROUTPUTLANGUAGE* *TRANSLATOROUTPUTLANGUAGE*)
    (*CURRENT-STREAM* STANDARD-OUTPUT))
   (CL:DECLARE (CL:SPECIAL *TRANSLATOROUTPUTLANGUAGE* *CURRENT-STREAM*))
   (%SET-TRANSLATOR-OUTPUT-LANGUAGE KWD-JAVA-TRANSLATE-FILE-JAVA)
   (INCREMENTALLY-TRANSLATE (CONS-TREE-TO-LISP-CODE STATEMENT) FALSE))
  :VOID)

(CL:DEFMACRO JPTRANS (CL:&WHOLE EXPRESSION CL:&REST IGNORE)
  "Translate `statement' to C++ and print the result."
  (CL:DECLARE (CL:IGNORE IGNORE))
  (CL:LET ((*IGNORETRANSLATIONERRORS?* FALSE))
   (INCREMENTALLY-TRANSLATE EXPRESSION FALSE)))

(CL:SETF (CL:MACRO-FUNCTION (CL:QUOTE /STELLA/JPTRANS)) (CL:MACRO-FUNCTION (CL:QUOTE JPTRANS)))

;;; (DEFMETHOD (JAVA-MAKE-CODE-OUTPUT-FILE-NAME FILE-NAME) ...)

(CL:DEFMETHOD JAVA-MAKE-CODE-OUTPUT-FILE-NAME ((BAREFILE CL:STRING) DONTTRUNCATE?)
  (CL:IF DONTTRUNCATE?
   (CL:LET* ((*DONTTRUNCATEFILENAMES?* TRUE))
    (CL:DECLARE (CL:SPECIAL *DONTTRUNCATEFILENAMES?*))
    (CL:RETURN-FROM JAVA-MAKE-CODE-OUTPUT-FILE-NAME
     (MAKE-FILE-NAME-FROM-RELATIVE-PATH (WRAP-STRING BAREFILE)
      KWD-JAVA-TRANSLATE-FILE-JAVA)))
   (CL:RETURN-FROM JAVA-MAKE-CODE-OUTPUT-FILE-NAME
    (MAKE-FILE-NAME-FROM-RELATIVE-PATH (WRAP-STRING BAREFILE)
     KWD-JAVA-TRANSLATE-FILE-JAVA))))

;;; (DEFMETHOD (JAVA-MAKE-CODE-OUTPUT-FILE-NAME FILE-NAME) ...)

(CL:DEFMETHOD JAVA-MAKE-CODE-OUTPUT-FILE-NAME ((SOURCE CLASS) DONTTRUNCATE?)
  (CL:LET*
   ((BAREFILE
     (JAVA-TRANSLATE-CLASS-NAME (SYMBOLIZE (%CLASS-TYPE SOURCE)))))
   (CL:RETURN-FROM JAVA-MAKE-CODE-OUTPUT-FILE-NAME
    (JAVA-MAKE-CODE-OUTPUT-FILE-NAME (%WRAPPER-VALUE BAREFILE)
     DONTTRUNCATE?))))

;;; (DEFUN (JAVA-MAKE-GLOBAL-OUTPUT-FILE-NAME FILE-NAME) ...)

(CL:DEFUN JAVA-MAKE-GLOBAL-OUTPUT-FILE-NAME (MODULE DONTTRUNCATE?)
  (CL:RETURN-FROM JAVA-MAKE-GLOBAL-OUTPUT-FILE-NAME
   (JAVA-MAKE-CODE-OUTPUT-FILE-NAME (JAVA-YIELD-FLOTSAM-CLASS-NAME MODULE)
    DONTTRUNCATE?)))

;;; (DEFUN JAVA-OUTPUT-FLOTSAM-UNITS-TO-FILE ...)

(CL:DEFUN JAVA-OUTPUT-FLOTSAM-UNITS-TO-FILE (GLOBALSHT FUNCTIONHT CODEMODULELIST)
  (CL:LET* ((FUNCTIONS NIL) (GLOBALS NIL))
   (CL:LET* ((MODULE NULL) (ITER-000 CODEMODULELIST))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:PROGN (CL:SETQ MODULE (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (CL:LET* ((*MODULE* MODULE) (*CONTEXT* *MODULE*))
      (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
      (CL:SETQ GLOBALS (LOOKUP GLOBALSHT MODULE))
      (CL:WHEN (CL:EQ GLOBALS NULL) (CL:SETQ GLOBALS NIL))
      (CL:SETQ FUNCTIONS (LOOKUP FUNCTIONHT MODULE))
      (CL:WHEN (CL:EQ FUNCTIONS NULL) (CL:SETQ FUNCTIONS NIL))
      (JAVA-OUTPUT-FLOTSAM-UNITS-TO-FILE-FOR-MODULE MODULE GLOBALS
       FUNCTIONS)))))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-FLOTSAM-UNITS-TO-FILE-FOR-MODULE ...)

(CL:DEFUN JAVA-OUTPUT-FLOTSAM-UNITS-TO-FILE-FOR-MODULE (MODULE GLOBALS FUNCTIONS)
  (CL:LET*
   ((CLASSOUTPUTFILE STELLA::NULL-STRING) (CLASSOUTPUTSTREAM NULL)
    (TRANSLATION NIL))
   (CL:SETQ CLASSOUTPUTFILE
    (JAVA-MAKE-GLOBAL-OUTPUT-FILE-NAME MODULE FALSE))
   (CL:SETQ CLASSOUTPUTSTREAM (NEW-OUTPUT-FILE-STREAM CLASSOUTPUTFILE))
   (CL:LET* ((*CURRENT-STREAM* CLASSOUTPUTSTREAM))
    (CL:DECLARE (CL:SPECIAL *CURRENT-STREAM*))
    (CL:WHEN (CL:>= *TRANSLATIONVERBOSITYLEVEL* 1)
     (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) "Writing `"
      CLASSOUTPUTFILE "'..." EOL))
    (JAVA-OUTPUT-FILE-HEADER CLASSOUTPUTSTREAM
     (JAVA-MAKE-GLOBAL-OUTPUT-FILE-NAME MODULE TRUE))
    (%%PRINT-STREAM (%NATIVE-STREAM *CURRENT-STREAM*) "public class "
     (JAVA-YIELD-FLOTSAM-CLASS-NAME MODULE) " {" EOL)
    (JAVA-BUMP-INDENT)
    (CL:LET* ((GLOBAL NULL) (ITER-000 GLOBALS))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:PROGN (CL:SETQ GLOBAL (%%VALUE ITER-000))
       (CL:SETQ ITER-000 (%%REST ITER-000)))
      (CL:SETQ TRANSLATION (JAVA-TRANSLATE-UNIT GLOBAL))
      (CL:LET* ((TEST-VALUE-000 (%%VALUE TRANSLATION)))
       (CL:COND
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-FILE-STELLA-JAVA_GLOBAL)
         (JAVA-OUTPUT-GLOBAL-DEFINITION (%%REST TRANSLATION)))
        ((CL:EQ TEST-VALUE-000
          SYM-JAVA-TRANSLATE-FILE-STELLA-JAVA_SPECIAL)
         (JAVA-OUTPUT-SPECIAL-DEFINITION (%%REST TRANSLATION)))
        (CL:T
         (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
          (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" TEST-VALUE-000
           "' is not a valid case option")
          (CL:ERROR
           (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
      (CL:SETF (%TRANSLATION GLOBAL) NULL)
      (CL:SETF (%CODE-REGISTER GLOBAL) NULL)))
    (CL:LET* ((FUNCTION NULL) (ITER-001 FUNCTIONS))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
      (CL:PROGN (CL:SETQ FUNCTION (%%VALUE ITER-001))
       (CL:SETQ ITER-001 (%%REST ITER-001)))
      (JAVA-OUTPUT-METHOD (%%REST (JAVA-TRANSLATE-UNIT FUNCTION)))
      (CL:SETF (%TRANSLATION FUNCTION) NULL)
      (CL:SETF (%CODE-REGISTER FUNCTION) NULL)))
    (JAVA-UNBUMP-INDENT)
    (%%PRINT-STREAM (%NATIVE-STREAM *CURRENT-STREAM*) "}" EOL)
    (FREE CLASSOUTPUTSTREAM)))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-FILE-HEADER ...)

(CL:DEFUN JAVA-OUTPUT-FILE-HEADER (STREAM FILENAME)
  (%%PRINT-STREAM (%NATIVE-STREAM STREAM) "//  -*- Mode: Java -*-" EOL
   "//" EOL)
  (%%PRINT-STREAM (%NATIVE-STREAM STREAM) "// " FILENAME EOL EOL)
  (CL:LET* ((PACKAGENAME (JAVA-PACKAGE-PREFIX *MODULE* ".")))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING PACKAGENAME))
   (OUTPUT-COPYRIGHT-HEADER STREAM)
   (CL:WHEN
    (CL:NOT
     (CL:OR (CL:EQ PACKAGENAME STELLA::NULL-STRING)
      (STRING-EQL? PACKAGENAME "")))
    (CL:SETQ PACKAGENAME
     (SUBSEQUENCE PACKAGENAME 0
      (CL:1- (CL:THE CL:FIXNUM (CL:LENGTH PACKAGENAME)))))
    (%%PRINT-STREAM (%NATIVE-STREAM STREAM) "package " PACKAGENAME ";" EOL
     EOL))
   (CL:WHEN (CL:NOT (CL:EQ *MODULE* *STELLA-MODULE*))
    (%%PRINT-STREAM (%NATIVE-STREAM STREAM) "import "
     (JAVA-STELLA-PACKAGE) ".*;" EOL))
   (%%PRINT-STREAM (%NATIVE-STREAM STREAM) "import " (JAVA-STELLA-PACKAGE)
    ".javalib.*;" EOL EOL))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-CLASS-TO-FILE ...)

(CL:DEFUN JAVA-OUTPUT-CLASS-TO-FILE (CLASS)
  (CL:LET*
   ((*CONTEXT* (HOME-MODULE CLASS)) (*MODULE* (%BASE-MODULE *CONTEXT*)))
   (CL:DECLARE (CL:SPECIAL *CONTEXT* *MODULE*))
   (CL:LET*
    ((CLASSOUTPUTFILE (JAVA-MAKE-CODE-OUTPUT-FILE-NAME CLASS FALSE))
     (CLASSOUTPUTSTREAM (NEW-OUTPUT-FILE-STREAM CLASSOUTPUTFILE))
     (TRANSLATION NIL))
    (CL:LET* ((*CURRENT-STREAM* CLASSOUTPUTSTREAM))
     (CL:DECLARE (CL:SPECIAL *CURRENT-STREAM*))
     (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) "Translating `"
      CLASS "'..." EOL)
     (CL:SETQ TRANSLATION (JAVA-TRANSLATE-DEFINE-NATIVE-CLASS CLASS))
     (CL:WHEN (CL:>= *TRANSLATIONVERBOSITYLEVEL* 1)
      (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) "    Writing `"
       CLASSOUTPUTFILE "'..." EOL))
     (JAVA-OUTPUT-FILE-HEADER CLASSOUTPUTSTREAM
      (JAVA-MAKE-CODE-OUTPUT-FILE-NAME CLASS TRUE))
     (JAVA-OUTPUT-CLASS (%%REST TRANSLATION) (EXCEPTION-CLASS? CLASS))
     (FREE CLASSOUTPUTSTREAM))))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-CLASS-UNIT-TO-FILE ...)

(CL:DEFUN JAVA-OUTPUT-CLASS-UNIT-TO-FILE (CLASSUNIT)
  (JAVA-OUTPUT-CLASS-TO-FILE (%THE-OBJECT CLASSUNIT))
  :VOID)

;;; (DEFUN (JAVA-FLOTSAM-FUNCTION? BOOLEAN) ...)

(CL:DEFUN JAVA-FLOTSAM-FUNCTION? (METHOD)
  (CL:RETURN-FROM JAVA-FLOTSAM-FUNCTION?
   (CL:AND
    (CL:NOT
     (%WRAPPER-VALUE
      (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS METHOD)
       SYM-JAVA-TRANSLATE-FILE-STELLA-METHOD-CONSTRUCTOR? FALSE-WRAPPER)))
    (CL:NOT
     (%WRAPPER-VALUE
      (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS METHOD)
       SYM-JAVA-TRANSLATE-FILE-STELLA-METHOD-NATIVE? FALSE-WRAPPER)))
    (CL:NOT (METHOD-STARTUP-FUNCTION? METHOD))
    (CL:OR (ZERO-ARGUMENT-FUNCTION? METHOD)
     (JAVA-METHOD-OBJECT-DEFINED-ON-NATIVE-TYPE? METHOD)
     (JAVA-FUNCTION-IN-DIFFERENT-MODULE? METHOD)))))

;;; (DEFUN JAVA-OUTPUT-STARTUP-UNITS-TO-FILE ...)

(CL:DEFUN JAVA-OUTPUT-STARTUP-UNITS-TO-FILE (STARTUPHT KEYLIST)
  (CL:LET*
   ((CLASSOUTPUTFILE STELLA::NULL-STRING) (CLASSOUTPUTSTREAM NULL)
    (STARTUPFUNCTIONS NULL))
   (CL:LET* ((*CURRENT-STREAM* NULL))
    (CL:DECLARE (CL:SPECIAL *CURRENT-STREAM*))
    (CL:LET* ((CLASSNAME NULL) (ITER-000 KEYLIST))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:PROGN (CL:SETQ CLASSNAME (%%VALUE ITER-000))
       (CL:SETQ ITER-000 (%%REST ITER-000)))
      (CL:SETQ STARTUPFUNCTIONS
       (LOOKUP STARTUPHT (%WRAPPER-VALUE CLASSNAME)))
      (CL:WHEN
       (CL:AND (CL:NOT (CL:EQ STARTUPFUNCTIONS NULL))
        (CL:NOT (CL:EQ STARTUPFUNCTIONS NULL)))
       (CL:LET*
        ((*MODULE* (HOME-MODULE (%%VALUE STARTUPFUNCTIONS)))
         (*CONTEXT* *MODULE*))
        (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
        (CL:SETQ CLASSOUTPUTFILE
         (JAVA-MAKE-CODE-OUTPUT-FILE-NAME (%WRAPPER-VALUE CLASSNAME)
          FALSE))
        (CL:SETQ CLASSOUTPUTSTREAM
         (NEW-OUTPUT-FILE-STREAM CLASSOUTPUTFILE))
        (CL:SETQ *CURRENT-STREAM* CLASSOUTPUTSTREAM)
        (CL:WHEN (CL:>= *TRANSLATIONVERBOSITYLEVEL* 1)
         (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) "Writing `"
          CLASSOUTPUTFILE "'..." EOL))
        (JAVA-OUTPUT-FILE-HEADER CLASSOUTPUTSTREAM
         (JAVA-MAKE-CODE-OUTPUT-FILE-NAME (%WRAPPER-VALUE CLASSNAME)
          TRUE))
        (%%PRINT-STREAM (%NATIVE-STREAM *CURRENT-STREAM*) "public class "
         (%WRAPPER-VALUE CLASSNAME) " {" EOL)
        (JAVA-BUMP-INDENT)
        (CL:LET* ((FUNCTION NULL) (ITER-001 STARTUPFUNCTIONS))
         (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
          (CL:PROGN (CL:SETQ FUNCTION (%%VALUE ITER-001))
           (CL:SETQ ITER-001 (%%REST ITER-001)))
          (JAVA-OUTPUT-METHOD (%%REST (JAVA-TRANSLATE-UNIT FUNCTION)))
          (CL:SETF (%TRANSLATION FUNCTION) NULL)
          (CL:SETF (%CODE-REGISTER FUNCTION) NULL)))
        (JAVA-UNBUMP-INDENT)
        (%%PRINT-STREAM (%NATIVE-STREAM *CURRENT-STREAM*) "}" EOL)
        (FREE CLASSOUTPUTSTREAM)))))))
  :VOID)

;;; (DEFUN JAVA-PUSH-INTO-HASH-TABLE ...)

(CL:DEFUN JAVA-PUSH-INTO-HASH-TABLE (HT KEY OBJECT)
  (CL:LET* ((VALUE (LOOKUP HT KEY)))
   (CL:IF (CL:NOT (CL:EQ VALUE NULL))
    (INSERT-AT HT KEY (CONS OBJECT VALUE))
    (INSERT-AT HT KEY (CONS OBJECT NIL))))
  :VOID)

;;; (DEFUN JAVA-PUSH-INTO-STRING-HASH-TABLE ...)

(CL:DEFUN JAVA-PUSH-INTO-STRING-HASH-TABLE (HT KEY OBJECT)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING KEY))
  (CL:LET* ((VALUE (LOOKUP HT KEY)))
   (CL:IF (CL:NOT (CL:EQ VALUE NULL))
    (INSERT-AT HT KEY (CONS OBJECT VALUE))
    (INSERT-AT HT KEY (CONS OBJECT NIL))))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-ALL-UNITS-TO-FILE ...)

(CL:DEFUN JAVA-OUTPUT-ALL-UNITS-TO-FILE ()
  (CL:LET*
   ((STARTUPCLASSNAME NULL) (STARTUPHT (NEW-STRING-HASH-TABLE))
    (STARTUPCLASSLIST NIL) (METHODS NIL)
    (FLOTSAMFUNCTIONHT (NEW-HASH-TABLE)) (GLOBALSHT (NEW-HASH-TABLE))
    (CODEMODULESLIST NIL) (VERBATIMSTATEMENTS NIL) (CLASSES NIL))
   (INSERT-AT *JAVA-STELLA-PACKAGE-MAPPING* (WRAP-STRING "STELLAROOT")
    (WRAP-STRING (JAVA-STELLA-PACKAGE)))
   (CL:SETQ *TRANSLATIONUNITS* (REVERSE *TRANSLATIONUNITS*))
   (CL:LET* ((UNIT NULL) (ITER-000 (%THE-CONS-LIST *TRANSLATIONUNITS*)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:PROGN (CL:SETQ UNIT (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (CL:LET* ((TEST-VALUE-000 (%CATEGORY UNIT)))
      (CL:COND
       ((CL:OR
         (CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-FILE-STELLA-METHOD)
         (CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-FILE-STELLA-MACRO))
        (CL:COND
         ((JAVA-FLOTSAM-FUNCTION? (%THE-OBJECT UNIT))
          (JAVA-PUSH-INTO-HASH-TABLE FLOTSAMFUNCTIONHT (HOME-MODULE UNIT)
           UNIT)
          (CL:WHEN (CL:NOT (MEMBER? CODEMODULESLIST (HOME-MODULE UNIT)))
           (CL:SETQ CODEMODULESLIST
            (CONS (HOME-MODULE UNIT) CODEMODULESLIST))))
         ((METHOD-STARTUP-FUNCTION? (%THE-OBJECT UNIT))
          (CL:SETQ STARTUPCLASSNAME
           (JAVA-TRANSLATE-CLASS-NAMESTRING
            (WRAP-STRING
             (%WRAPPER-VALUE
              (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS (%THE-OBJECT UNIT))
               SYM-JAVA-TRANSLATE-FILE-STELLA-METHOD-STARTUP-CLASSNAME
               NULL-STRING-WRAPPER)))))
          (JAVA-PUSH-INTO-STRING-HASH-TABLE STARTUPHT
           (%WRAPPER-VALUE STARTUPCLASSNAME) UNIT)
          (CL:WHEN (CL:NOT (MEMBER? STARTUPCLASSLIST STARTUPCLASSNAME))
           (CL:SETQ STARTUPCLASSLIST
            (CONS STARTUPCLASSNAME STARTUPCLASSLIST))))
         (CL:T (CL:SETQ METHODS (CONS UNIT METHODS)))))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-FILE-STELLA-PRINT-METHOD)
        (CL:SETQ METHODS (CONS UNIT METHODS)))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-FILE-STELLA-TYPE))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-FILE-STELLA-VERBATIM)
        (CL:SETQ VERBATIMSTATEMENTS (CONS UNIT VERBATIMSTATEMENTS)))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-FILE-STELLA-CLASS)
        (CL:SETQ CLASSES (CONS UNIT CLASSES)))
       ((CL:EQ TEST-VALUE-000
         SYM-JAVA-TRANSLATE-FILE-STELLA-GLOBAL-VARIABLE)
        (JAVA-PUSH-INTO-HASH-TABLE GLOBALSHT (HOME-MODULE UNIT) UNIT)
        (CL:WHEN (CL:NOT (MEMBER? CODEMODULESLIST (HOME-MODULE UNIT)))
         (CL:SETQ CODEMODULESLIST
          (CONS (HOME-MODULE UNIT) CODEMODULESLIST))))
       (CL:T
        (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
         (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" TEST-VALUE-000
          "' is not a valid case option")
         (CL:ERROR
          (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))))
   (CL:LET* ((CLASSUNIT NULL) (ITER-001 CLASSES))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
     (CL:PROGN (CL:SETQ CLASSUNIT (%%VALUE ITER-001))
      (CL:SETQ ITER-001 (%%REST ITER-001)))
     (JAVA-OUTPUT-CLASS-UNIT-TO-FILE CLASSUNIT)))
   (JAVA-OUTPUT-FLOTSAM-UNITS-TO-FILE GLOBALSHT FLOTSAMFUNCTIONHT
    CODEMODULESLIST)
   (JAVA-OUTPUT-STARTUP-UNITS-TO-FILE STARTUPHT STARTUPCLASSLIST))
  :VOID)

;;; (DEFUN JAVA-INITIALIZE-FILE-TRANSLATION ...)

(CL:DEFUN JAVA-INITIALIZE-FILE-TRANSLATION ()
  (CL:SETQ *JAVA-INDENT-CHARS* 0)
  :VOID)

;;; (DEFUN JAVA-TRANSLATE-FILE ...)

(CL:DEFUN JAVA-TRANSLATE-FILE (FILENAME)
  (TRANSLATE-FILE FILENAME KWD-JAVA-TRANSLATE-FILE-JAVA FALSE)
  :VOID)

;;; (DEFUN JAVA-TRANSLATE-FILE-AS-PART-OF-SYSTEM ...)

(CL:DEFUN JAVA-TRANSLATE-FILE-AS-PART-OF-SYSTEM (FILENAME)
  (TRANSLATE-FILE FILENAME KWD-JAVA-TRANSLATE-FILE-JAVA TRUE)
  :VOID)

;;; (DEFUN JAVA-TRANSLATE-WALKED-SYSTEM-UNITS ...)

(CL:DEFUN JAVA-TRANSLATE-WALKED-SYSTEM-UNITS (SYSTEMUNITS)
  (CL:LET* ((*TRANSLATIONUNITS* (CONCATENATE-SYSTEM-UNITS SYSTEMUNITS)))
   (CL:DECLARE (CL:SPECIAL *TRANSLATIONUNITS*))
   (CL:WHEN (CL:>= *TRANSLATIONVERBOSITYLEVEL* 1)
    (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT)
     "Generating Java translations..." EOL))
   (JAVA-OUTPUT-ALL-UNITS-TO-FILE) (CLEAN-UP-TRANSLATION-UNITS-SPECIAL))
  :VOID)

;;; (DEFUN JAVA-TRANSLATE-SYSTEM ...)

(CL:DEFUN JAVA-TRANSLATE-SYSTEM (SYSTEMNAME)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SYSTEMNAME))
  (%MAKE-SYSTEM SYSTEMNAME KWD-JAVA-TRANSLATE-FILE-JAVA
   (CONS-LIST KWD-JAVA-TRANSLATE-FILE-TWO-PASS? TRUE-WRAPPER
    KWD-JAVA-TRANSLATE-FILE-FORCE-TRANSLATION? TRUE-WRAPPER))
  :VOID)

(CL:DEFUN STARTUP-JAVA-TRANSLATE-FILE ()
  (CL:LET* ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2)
    (CL:SETQ KWD-JAVA-TRANSLATE-FILE-COMMON-LISP
     (INTERN-RIGID-SYMBOL-WRT-MODULE "COMMON-LISP" NULL 2))
    (CL:SETQ KWD-JAVA-TRANSLATE-FILE-JAVA
     (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA" NULL 2))
    (CL:SETQ SYM-JAVA-TRANSLATE-FILE-STELLA-JPTRANS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "JPTRANS" NULL 0))
    (CL:SETQ KWD-JAVA-TRANSLATE-FILE-FUNCTION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FUNCTION" NULL 2))
    (CL:SETQ SYM-JAVA-TRANSLATE-FILE-STELLA-JAVA_GLOBAL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_GLOBAL" NULL 0))
    (CL:SETQ SYM-JAVA-TRANSLATE-FILE-STELLA-JAVA_SPECIAL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_SPECIAL" NULL 0))
    (CL:SETQ SYM-JAVA-TRANSLATE-FILE-STELLA-METHOD-CONSTRUCTOR?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-CONSTRUCTOR?" NULL 0))
    (CL:SETQ SYM-JAVA-TRANSLATE-FILE-STELLA-METHOD-NATIVE?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-NATIVE?" NULL 0))
    (CL:SETQ SYM-JAVA-TRANSLATE-FILE-STELLA-METHOD
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD" NULL 0))
    (CL:SETQ SYM-JAVA-TRANSLATE-FILE-STELLA-MACRO
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MACRO" NULL 0))
    (CL:SETQ SYM-JAVA-TRANSLATE-FILE-STELLA-PRINT-METHOD
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT-METHOD" NULL 0))
    (CL:SETQ SYM-JAVA-TRANSLATE-FILE-STELLA-TYPE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "TYPE" NULL 0))
    (CL:SETQ SYM-JAVA-TRANSLATE-FILE-STELLA-VERBATIM
     (INTERN-RIGID-SYMBOL-WRT-MODULE "VERBATIM" NULL 0))
    (CL:SETQ SYM-JAVA-TRANSLATE-FILE-STELLA-CLASS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS" NULL 0))
    (CL:SETQ SYM-JAVA-TRANSLATE-FILE-STELLA-GLOBAL-VARIABLE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "GLOBAL-VARIABLE" NULL 0))
    (CL:SETQ SYM-JAVA-TRANSLATE-FILE-STELLA-METHOD-STARTUP-CLASSNAME
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME" NULL 0))
    (CL:SETQ KWD-JAVA-TRANSLATE-FILE-TWO-PASS?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "TWO-PASS?" NULL 2))
    (CL:SETQ KWD-JAVA-TRANSLATE-FILE-FORCE-TRANSLATION?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FORCE-TRANSLATION?" NULL 2))
    (CL:SETQ SYM-JAVA-TRANSLATE-FILE-STELLA-STARTUP-JAVA-TRANSLATE-FILE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-JAVA-TRANSLATE-FILE" NULL
      0)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (DEFINE-FUNCTION-OBJECT "CLT" "(DEFUN CLT ())" (CL:FUNCTION CLT) NULL)
    (DEFINE-FUNCTION-OBJECT "JT" "(DEFUN JT ())" (CL:FUNCTION JT) NULL)
    (DEFINE-FUNCTION-OBJECT "JPTRANS"
     "(DEFUN JPTRANS ((STATEMENT OBJECT)) :COMMAND? TRUE :PUBLIC? TRUE :EVALUATE-ARGUMENTS? FALSE :DOCUMENTATION \"Translate `statement' to C++ and print the result.\")"
     (CL:FUNCTION %JPTRANS) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD (JAVA-MAKE-CODE-OUTPUT-FILE-NAME FILE-NAME) ((BAREFILE FILE-NAME) (DONTTRUNCATE? BOOLEAN)))"
     (CL:FUNCTION JAVA-MAKE-CODE-OUTPUT-FILE-NAME) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD (JAVA-MAKE-CODE-OUTPUT-FILE-NAME FILE-NAME) ((SOURCE CLASS) (DONTTRUNCATE? BOOLEAN)))"
     (CL:FUNCTION JAVA-MAKE-CODE-OUTPUT-FILE-NAME) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-MAKE-GLOBAL-OUTPUT-FILE-NAME"
     "(DEFUN (JAVA-MAKE-GLOBAL-OUTPUT-FILE-NAME FILE-NAME) ((MODULE MODULE) (DONTTRUNCATE? BOOLEAN)))"
     (CL:FUNCTION JAVA-MAKE-GLOBAL-OUTPUT-FILE-NAME) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-FLOTSAM-UNITS-TO-FILE"
     "(DEFUN JAVA-OUTPUT-FLOTSAM-UNITS-TO-FILE ((GLOBALSHT HASH-TABLE) (FUNCTIONHT HASH-TABLE) (CODEMODULELIST (CONS OF MODULE))))"
     (CL:FUNCTION JAVA-OUTPUT-FLOTSAM-UNITS-TO-FILE) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-FLOTSAM-UNITS-TO-FILE-FOR-MODULE"
     "(DEFUN JAVA-OUTPUT-FLOTSAM-UNITS-TO-FILE-FOR-MODULE ((MODULE MODULE) (GLOBALS (CONS OF TRANSLATION-UNIT)) (FUNCTIONS (CONS OF TRANSLATION-UNIT))))"
     (CL:FUNCTION JAVA-OUTPUT-FLOTSAM-UNITS-TO-FILE-FOR-MODULE) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-FILE-HEADER"
     "(DEFUN JAVA-OUTPUT-FILE-HEADER ((STREAM OUTPUT-STREAM) (FILENAME FILE-NAME)))"
     (CL:FUNCTION JAVA-OUTPUT-FILE-HEADER) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-CLASS-TO-FILE"
     "(DEFUN JAVA-OUTPUT-CLASS-TO-FILE ((CLASS CLASS)))"
     (CL:FUNCTION JAVA-OUTPUT-CLASS-TO-FILE) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-CLASS-UNIT-TO-FILE"
     "(DEFUN JAVA-OUTPUT-CLASS-UNIT-TO-FILE ((CLASSUNIT TRANSLATION-UNIT)))"
     (CL:FUNCTION JAVA-OUTPUT-CLASS-UNIT-TO-FILE) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-FLOTSAM-FUNCTION?"
     "(DEFUN (JAVA-FLOTSAM-FUNCTION? BOOLEAN) ((METHOD METHOD-SLOT)))"
     (CL:FUNCTION JAVA-FLOTSAM-FUNCTION?) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-STARTUP-UNITS-TO-FILE"
     "(DEFUN JAVA-OUTPUT-STARTUP-UNITS-TO-FILE ((STARTUPHT STRING-HASH-TABLE) (KEYLIST (CONS OF STRING-WRAPPER))))"
     (CL:FUNCTION JAVA-OUTPUT-STARTUP-UNITS-TO-FILE) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-PUSH-INTO-HASH-TABLE"
     "(DEFUN JAVA-PUSH-INTO-HASH-TABLE ((HT HASH-TABLE) (KEY OBJECT) (OBJECT OBJECT)))"
     (CL:FUNCTION JAVA-PUSH-INTO-HASH-TABLE) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-PUSH-INTO-STRING-HASH-TABLE"
     "(DEFUN JAVA-PUSH-INTO-STRING-HASH-TABLE ((HT STRING-HASH-TABLE) (KEY STRING) (OBJECT OBJECT)))"
     (CL:FUNCTION JAVA-PUSH-INTO-STRING-HASH-TABLE) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-ALL-UNITS-TO-FILE"
     "(DEFUN JAVA-OUTPUT-ALL-UNITS-TO-FILE ())"
     (CL:FUNCTION JAVA-OUTPUT-ALL-UNITS-TO-FILE) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-INITIALIZE-FILE-TRANSLATION"
     "(DEFUN JAVA-INITIALIZE-FILE-TRANSLATION ())"
     (CL:FUNCTION JAVA-INITIALIZE-FILE-TRANSLATION) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-FILE"
     "(DEFUN JAVA-TRANSLATE-FILE ((FILENAME FILE-NAME)) :PUBLIC? TRUE)"
     (CL:FUNCTION JAVA-TRANSLATE-FILE) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-FILE-AS-PART-OF-SYSTEM"
     "(DEFUN JAVA-TRANSLATE-FILE-AS-PART-OF-SYSTEM ((FILENAME FILE-NAME)))"
     (CL:FUNCTION JAVA-TRANSLATE-FILE-AS-PART-OF-SYSTEM) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-WALKED-SYSTEM-UNITS"
     "(DEFUN JAVA-TRANSLATE-WALKED-SYSTEM-UNITS ((SYSTEMUNITS SYSTEM-UNITS-ALIST)))"
     (CL:FUNCTION JAVA-TRANSLATE-WALKED-SYSTEM-UNITS) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-SYSTEM"
     "(DEFUN JAVA-TRANSLATE-SYSTEM ((SYSTEMNAME STRING)))"
     (CL:FUNCTION JAVA-TRANSLATE-SYSTEM) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-JAVA-TRANSLATE-FILE"
     "(DEFUN STARTUP-JAVA-TRANSLATE-FILE () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-JAVA-TRANSLATE-FILE) NULL)
    (CL:LET*
     ((FUNCTION
       (LOOKUP-FUNCTION
        SYM-JAVA-TRANSLATE-FILE-STELLA-STARTUP-JAVA-TRANSLATE-FILE)))
     (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FUNCTION)
      SYM-JAVA-TRANSLATE-FILE-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "Startup-Java-Translate-File") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (REGISTER-NATIVE-NAME SYM-JAVA-TRANSLATE-FILE-STELLA-JPTRANS
     KWD-JAVA-TRANSLATE-FILE-COMMON-LISP
     KWD-JAVA-TRANSLATE-FILE-FUNCTION)))
  :VOID)
