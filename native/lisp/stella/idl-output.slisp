;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

#|--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1996-2000              | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied "AS IS",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SYM-IDL-OUTPUT-STELLA-IDL_COMMENT NULL)
(CL:DEFVAR SYM-IDL-OUTPUT-STELLA-IDL_TYPEDEF NULL)
(CL:DEFVAR SYM-IDL-OUTPUT-STELLA-IDL_ENUM NULL)
(CL:DEFVAR SYM-IDL-OUTPUT-STELLA-IDL_INTERFACE NULL)
(CL:DEFVAR SYM-IDL-OUTPUT-STELLA-IDL_STRUCT NULL)
(CL:DEFVAR SYM-IDL-OUTPUT-STELLA-IDL_DECLARATIONS NULL)
(CL:DEFVAR SYM-IDL-OUTPUT-STELLA-IDL_IDENT NULL)
(CL:DEFVAR SYM-IDL-OUTPUT-STELLA-IDL_TYPE NULL)
(CL:DEFVAR SYM-IDL-OUTPUT-STELLA-IDL_SIGNATURES NULL)
(CL:DEFVAR SGT-IDL-OUTPUT-STELLA-CONS NULL)
(CL:DEFVAR SYM-IDL-OUTPUT-STELLA-IDL_VAR_ARGS NULL)
(CL:DEFVAR SYM-IDL-OUTPUT-STELLA-STARTUP-IDL-OUTPUT NULL)
(CL:DEFVAR SYM-IDL-OUTPUT-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM (CL:SPECIAL *STELLA-MODULE* *MODULE* EOL *CURRENT-STREAM*))

;;; (DEFSPECIAL *IDL-INDENT-CHARS* ...)

(CL:PROGN (CL:DEFVAR *IDL-INDENT-CHARS* 0) (CL:DECLAIM (CL:TYPE CL:FIXNUM *IDL-INDENT-CHARS*)))

;;; (DEFUN IDL-OUTPUT-PARSE-TREE ...)

(CL:DEFUN IDL-OUTPUT-PARSE-TREE (CONSTREE)
  (CL:LET* ((*IDL-INDENT-CHARS* 0))
   (CL:DECLARE (CL:SPECIAL *IDL-INDENT-CHARS*))
   (CL:DECLARE (CL:TYPE CL:FIXNUM *IDL-INDENT-CHARS*))
   (IDL-OUTPUT-STATEMENT CONSTREE))
  :VOID)

;;; (DEFUN IDL-OUTPUT-STATEMENT ...)

(CL:DEFUN IDL-OUTPUT-STATEMENT (STATEMENT)
  (CL:COND
   ((CL:EQ (SAFE-PRIMARY-TYPE STATEMENT) SGT-IDL-OUTPUT-STELLA-CONS)
    (CL:PROGN
     (CL:WHEN (CL:EQ STATEMENT NIL) (CL:RETURN-FROM IDL-OUTPUT-STATEMENT))
     (CL:IF
      (CL:OR (CONS? (%%VALUE STATEMENT)) (CL:EQ (%%VALUE STATEMENT) NULL))
      (CL:PROGN (IDL-OUTPUT-STATEMENT (%%VALUE STATEMENT))
       (IDL-OUTPUT-STATEMENT (%%REST STATEMENT)))
      (CL:LET* ((TEST-VALUE-000 (%%VALUE STATEMENT)))
       (CL:COND
        ((CL:EQ TEST-VALUE-000 SYM-IDL-OUTPUT-STELLA-IDL_COMMENT)
         (IDL-OUTPUT-COMMENT (%%VALUE (%%REST STATEMENT))))
        ((CL:EQ TEST-VALUE-000 SYM-IDL-OUTPUT-STELLA-IDL_TYPEDEF)
         (IDL-OUTPUT-TYPEDEF (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-IDL-OUTPUT-STELLA-IDL_ENUM)
         (IDL-OUTPUT-ENUM (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-IDL-OUTPUT-STELLA-IDL_INTERFACE)
         (IDL-OUTPUT-INTERFACE (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-IDL-OUTPUT-STELLA-IDL_STRUCT)
         (IDL-OUTPUT-STRUCT (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-IDL-OUTPUT-STELLA-IDL_DECLARATIONS)
         (IDL-OUTPUT-DECLARATIONS (%%VALUE (%%REST STATEMENT))))
        ((CL:EQ TEST-VALUE-000 SYM-IDL-OUTPUT-STELLA-IDL_IDENT)
         (IDL-OUTPUT-IDENTIFIER (%%VALUE (%%REST STATEMENT))))
        ((CL:EQ TEST-VALUE-000 SYM-IDL-OUTPUT-STELLA-IDL_TYPE)
         (IDL-OUTPUT-TYPE-EXPRESSION (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-IDL-OUTPUT-STELLA-IDL_SIGNATURES)
         (IDL-OUTPUT-SIGNATURES (%%VALUE (%%REST STATEMENT))))
        (CL:T
         (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
          (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
           "`" TEST-VALUE-000 "' is not a valid case option")
          (CL:ERROR
           (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))))
   (CL:T
    (CL:WHEN (CL:EQ STATEMENT NULL) (CL:RETURN-FROM IDL-OUTPUT-STATEMENT))
    (IDL-OUTPUT-ATOMIC-EXPRESSION STATEMENT)))
  :VOID)

;;; (DEFUN IDL-INDENT ...)

(CL:DEFUN IDL-INDENT ()
  (CL:LET*
   ((D NULL-INTEGER) (ITER-000 1) (UPPER-BOUND-000 *IDL-INDENT-CHARS*)
    (UNBOUNDED?-000 (NULL? UPPER-BOUND-000)))
   (CL:DECLARE (CL:TYPE CL:FIXNUM ITER-000 UPPER-BOUND-000 D))
   (CL:LOOP WHILE (CL:OR UNBOUNDED?-000 (CL:<= ITER-000 UPPER-BOUND-000))
    DO (CL:PROGN (CL:SETQ D ITER-000) (CL:SETQ ITER-000 (CL:1+ ITER-000)))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) " ")))
  :VOID)

;;; (DEFUN IDL-BUMP-INDENT ...)

(CL:DEFUN IDL-BUMP-INDENT ()
  (CL:SETQ *IDL-INDENT-CHARS* (CL:+ *IDL-INDENT-CHARS* 2))
  :VOID)

;;; (DEFUN IDL-UNBUMP-INDENT ...)

(CL:DEFUN IDL-UNBUMP-INDENT ()
  (CL:SETQ *IDL-INDENT-CHARS* (CL:- *IDL-INDENT-CHARS* 2))
  :VOID)

;;; (DEFUN IDL-OUTPUT-TYPEDEF ...)

(CL:DEFUN IDL-OUTPUT-TYPEDEF (TYPEDEF)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "typedef " (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE (%%REST TYPEDEF)))
   " " (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE TYPEDEF)) ";" EOL EOL)
  :VOID)

;;; (DEFUN IDL-OUTPUT-ENUMERANDS ...)

(CL:DEFUN IDL-OUTPUT-ENUMERANDS (ENUMERANDS)
  (CL:LET* ((LASTENUMERAND NULL) (ALLBUTLASTENUMERAND NULL))
   (CL:LET* ((VALUE-000 NULL) (VALUE-001 NULL))
    (CL:MULTIPLE-VALUE-SETQ (VALUE-000 VALUE-001)
     (SEPARATE-LAST-CONS ENUMERANDS))
    (CL:PROGN (CL:SETQ ALLBUTLASTENUMERAND VALUE-000)
     (CL:SETQ LASTENUMERAND VALUE-001)))
   (CL:LET* ((ENUMERAND NULL) (ITER-000 ALLBUTLASTENUMERAND))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:PROGN (CL:SETQ ENUMERAND (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE (%%REST ENUMERAND))) ", ")))
   (CL:WHEN (CL:NOT (CL:EQ LASTENUMERAND NULL))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE (%%REST LASTENUMERAND))))))
  :VOID)

;;; (DEFUN IDL-OUTPUT-ENUM ...)

(CL:DEFUN IDL-OUTPUT-ENUM (ENUM)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "enum {")
  (IDL-OUTPUT-ENUMERANDS (%%VALUE (%%REST (NTH ENUM 4))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "};" EOL
   EOL)
  :VOID)

;;; (DEFUN IDL-OUTPUT-TYPE-EXPRESSION ...)

(CL:DEFUN IDL-OUTPUT-TYPE-EXPRESSION (TYPEEXPRESSION)
  (CL:LET* ((TYPEEXPR NULL) (ITER-000 TYPEEXPRESSION))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:PROGN (CL:SETQ TYPEEXPR (%%VALUE ITER-000))
     (CL:SETQ ITER-000 (%%REST ITER-000)))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     (%STRING-WRAPPER.WRAPPER-VALUE TYPEEXPR) " ")))
  :VOID)

;;; (DEFMETHOD IDL-OUTPUT-LITERAL ...)

(%%DEFCONSMETHOD IDL-OUTPUT-LITERAL ((OBJECT OBJECT))
  :VOID)

;;; (DEFMETHOD IDL-OUTPUT-LITERAL ...)

(CL:DEFMETHOD IDL-OUTPUT-LITERAL ((STRING CL:STRING))
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING STRING))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "\""
   (REPLACE-SUBSTRINGS
    (REPLACE-SUBSTRINGS
     (REPLACE-SUBSTRINGS (REPLACE-SUBSTRINGS STRING "\\\\" "\\") "\\\""
      (MAKE-STRING 1 #\"))
     "\\n" (MAKE-STRING 1 #\Linefeed))
    "\\r" (MAKE-STRING 1 #\Return))
   "\"")
  :VOID)

;;; (DEFMETHOD IDL-OUTPUT-LITERAL ...)

(CL:DEFMETHOD IDL-OUTPUT-LITERAL ((STRING STRING-WRAPPER))
  (IDL-OUTPUT-LITERAL (%STRING-WRAPPER.WRAPPER-VALUE STRING))
  :VOID)

;;; (DEFMETHOD IDL-OUTPUT-LITERAL ...)

(CL:DEFMETHOD IDL-OUTPUT-LITERAL ((STRING MUTABLE-STRING-WRAPPER))
  (IDL-OUTPUT-LITERAL
   (CL:LET ((S (%MUTABLE-STRING-WRAPPER.WRAPPER-VALUE STRING)))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING S)) (CL:THE CL:SIMPLE-STRING S)))
  :VOID)

;;; (DEFMETHOD IDL-OUTPUT-LITERAL ...)

(CL:DEFMETHOD IDL-OUTPUT-LITERAL ((TREE QUOTED-EXPRESSION))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "\""
   TREE "\"")
  :VOID)

;;; (DEFMETHOD IDL-OUTPUT-LITERAL ...)

(CL:DEFMETHOD IDL-OUTPUT-LITERAL ((SYMBOL SYMBOL))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%STRING-WRAPPER.WRAPPER-VALUE (IDL-TRANSLATE-SYMBOL-NAME SYMBOL)))
  :VOID)

;;; (DEFMETHOD IDL-OUTPUT-LITERAL ...)

(CL:DEFMETHOD IDL-OUTPUT-LITERAL ((SURROGATE SURROGATE))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%STRING-WRAPPER.WRAPPER-VALUE
    (IDL-TRANSLATE-SURROGATE-NAME SURROGATE)))
  :VOID)

;;; (DEFMETHOD IDL-OUTPUT-LITERAL ...)

(CL:DEFMETHOD IDL-OUTPUT-LITERAL ((KEYWORD KEYWORD))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%STRING-WRAPPER.WRAPPER-VALUE (IDL-TRANSLATE-KEYWORD-NAME KEYWORD)))
  :VOID)

;;; (DEFUN IDL-OUTPUT-ATOMIC-EXPRESSION ...)

(CL:DEFUN IDL-OUTPUT-ATOMIC-EXPRESSION (ATOM)
  (IDL-OUTPUT-LITERAL ATOM)
  :VOID)

;;; (DEFUN IDL-OUTPUT-COMMENT ...)

(CL:DEFUN IDL-OUTPUT-COMMENT (TREE)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "// "
   (%STRING-WRAPPER.WRAPPER-VALUE TREE) EOL)
  :VOID)

;;; (DEFUN IDL-OUTPUT-IDENTIFIER ...)

(CL:DEFUN IDL-OUTPUT-IDENTIFIER (IDENTIFIER)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%STRING-WRAPPER.WRAPPER-VALUE IDENTIFIER))
  :VOID)

;;; (DEFUN IDL-OUTPUT-DERIVED-CLASSES ...)

(CL:DEFUN IDL-OUTPUT-DERIVED-CLASSES (CLASSLIST)
  (CL:LET* ((LASTCLASS NULL) (ALLBUTLASTCLASS NULL))
   (CL:MULTIPLE-VALUE-SETQ (ALLBUTLASTCLASS LASTCLASS)
    (SEPARATE-LAST-CONS CLASSLIST))
   (CL:LET* ((CLASS NULL) (ITER-000 ALLBUTLASTCLASS))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:PROGN (CL:SETQ CLASS (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      (%STRING-WRAPPER.WRAPPER-VALUE CLASS) ", ")))
   (CL:WHEN (CL:NOT (CL:EQ LASTCLASS NULL))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     (%STRING-WRAPPER.WRAPPER-VALUE LASTCLASS) " ")))
  :VOID)

;;; (DEFUN IDL-OUTPUT-TEMPLATE-PARAMETERS ...)

(CL:DEFUN IDL-OUTPUT-TEMPLATE-PARAMETERS (PARAMETERS)
  (CL:WHEN (CL:NOT (CL:EQ PARAMETERS NIL))
   (CL:LET* ((LASTPARAMETER NULL) (ALLBUTLASTPARAMETER NULL))
    (CL:MULTIPLE-VALUE-SETQ (ALLBUTLASTPARAMETER LASTPARAMETER)
     (SEPARATE-LAST-CONS PARAMETERS))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "template <")
    (CL:LET* ((PARAMETER NULL) (ITER-000 ALLBUTLASTPARAMETER))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:PROGN (CL:SETQ PARAMETER (%%VALUE ITER-000))
       (CL:SETQ ITER-000 (%%REST ITER-000)))
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
       "class " (%STRING-WRAPPER.WRAPPER-VALUE PARAMETER) ", ")))
    (CL:WHEN (CL:NOT (CL:EQ LASTPARAMETER NULL))
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      "class " (%STRING-WRAPPER.WRAPPER-VALUE LASTPARAMETER)))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ">"
     EOL)))
  :VOID)

;;; (DEFUN (IDL-OUTPUT-TEMPLATE-CLASSES? BOOLEAN) ...)

(CL:DEFUN IDL-OUTPUT-TEMPLATE-CLASSES? ()
  (CL:RETURN-FROM IDL-OUTPUT-TEMPLATE-CLASSES? TRUE))

;;; (DEFUN IDL-OUTPUT-INTERFACE ...)

(CL:DEFUN IDL-OUTPUT-INTERFACE (CLASSDEF)
  (CL:WHEN (IDL-OUTPUT-TEMPLATE-CLASSES?)
   (IDL-OUTPUT-TEMPLATE-PARAMETERS (%%VALUE (%%REST CLASSDEF))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "interface " (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE CLASSDEF)) " ")
  (CL:WHEN (CL:NOT (CL:EQ (%%VALUE (%%REST (%%REST CLASSDEF))) NIL))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ": ")
   (IDL-OUTPUT-DERIVED-CLASSES (%%VALUE (%%REST (%%REST CLASSDEF)))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "{" EOL)
  (CL:LET* ((STATEMENT NULL) (ITER-000 (NTH-REST CLASSDEF 4)))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:PROGN (CL:SETQ STATEMENT (%%VALUE ITER-000))
     (CL:SETQ ITER-000 (%%REST ITER-000)))
    (IDL-OUTPUT-STATEMENT STATEMENT)))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "};" EOL
   EOL)
  :VOID)

;;; (DEFUN IDL-OUTPUT-STRUCT ...)

(CL:DEFUN IDL-OUTPUT-STRUCT (CLASSDEF)
  (CL:WHEN (IDL-OUTPUT-TEMPLATE-CLASSES?)
   (IDL-OUTPUT-TEMPLATE-PARAMETERS (%%VALUE (%%REST CLASSDEF))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "struct " (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE CLASSDEF)) " ")
  (CL:WHEN (CL:NOT (CL:EQ (%%VALUE (%%REST (%%REST CLASSDEF))) NIL))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ": ")
   (IDL-OUTPUT-DERIVED-CLASSES (%%VALUE (%%REST (%%REST CLASSDEF)))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "{" EOL)
  (CL:LET* ((STATEMENT NULL) (ITER-000 (NTH-REST CLASSDEF 4)))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:PROGN (CL:SETQ STATEMENT (%%VALUE ITER-000))
     (CL:SETQ ITER-000 (%%REST ITER-000)))
    (IDL-OUTPUT-STATEMENT STATEMENT)))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "};" EOL
   EOL)
  :VOID)

;;; (DEFUN IDL-OUTPUT-FORMAL-PARAMETERS ...)

(CL:DEFUN IDL-OUTPUT-FORMAL-PARAMETERS (PARAMETERS)
  (CL:LET* ((LASTPARAMETER NULL) (ALLBUTLASTPARAMETER NULL))
   (CL:MULTIPLE-VALUE-SETQ (ALLBUTLASTPARAMETER LASTPARAMETER)
    (SEPARATE-LAST-CONS PARAMETERS))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "(")
   (CL:LET* ((PARAMETER NULL) (ITER-000 ALLBUTLASTPARAMETER))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:PROGN (CL:SETQ PARAMETER (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE PARAMETER)) " "
      (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE (%%REST PARAMETER))) " "
      (%STRING-WRAPPER.WRAPPER-VALUE
       (%%VALUE (%%REST (%%REST PARAMETER))))
      ", ")))
   (CL:WHEN (CL:NOT (CL:EQ LASTPARAMETER NULL))
    (CL:LET* ((CASTEDLASTPARAMETER LASTPARAMETER))
     (CL:IF
      (CL:EQ (%%VALUE CASTEDLASTPARAMETER)
       SYM-IDL-OUTPUT-STELLA-IDL_VAR_ARGS)
      (CL:PROGN
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
        "int ")
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
        (%STRING-WRAPPER.WRAPPER-VALUE
         (%%VALUE (%%REST CASTEDLASTPARAMETER))))
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
        ", ..."))
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
       (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE CASTEDLASTPARAMETER)) " "
       (%STRING-WRAPPER.WRAPPER-VALUE
        (%%VALUE (%%REST CASTEDLASTPARAMETER)))
       " "
       (%STRING-WRAPPER.WRAPPER-VALUE
        (%%VALUE (%%REST (%%REST CASTEDLASTPARAMETER))))))))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ")"))
  :VOID)

;;; (DEFUN IDL-OUTPUT-FUNCTION-SIGNATURE ...)

(CL:DEFUN IDL-OUTPUT-FUNCTION-SIGNATURE (FUNCTION)
  (IDL-OUTPUT-TYPE-EXPRESSION (%%VALUE FUNCTION))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE (%%REST FUNCTION))))
  (IDL-OUTPUT-FORMAL-PARAMETERS (%%VALUE (%%REST (%%REST FUNCTION))))
  :VOID)

;;; (DEFUN IDL-OUTPUT-DECLARATIONS ...)

(CL:DEFUN IDL-OUTPUT-DECLARATIONS (DECLARATIONS)
  (IDL-BUMP-INDENT)
  (CL:LET* ((DECLARATION NULL) (ITER-000 DECLARATIONS))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:PROGN (CL:SETQ DECLARATION (%%VALUE ITER-000))
     (CL:SETQ ITER-000 (%%REST ITER-000)))
    (IDL-INDENT) (IDL-OUTPUT-TYPE-EXPRESSION (%%VALUE DECLARATION))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE (%%REST DECLARATION))))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ";"
     EOL)))
  (IDL-UNBUMP-INDENT)
  :VOID)

;;; (DEFUN IDL-OUTPUT-SIGNATURE ...)

(CL:DEFUN IDL-OUTPUT-SIGNATURE (SIGNATURE OUTPUTMETHODCLASS?)
  (IDL-OUTPUT-TYPE-EXPRESSION (%%VALUE (%%REST SIGNATURE)))
  (CL:WHEN
   (CL:AND OUTPUTMETHODCLASS? (CL:NOT (CL:EQ (%%VALUE SIGNATURE) NULL)))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE SIGNATURE)))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "::"))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE (%%REST (%%REST SIGNATURE)))))
  (IDL-OUTPUT-FORMAL-PARAMETERS (FOURTH SIGNATURE))
  :VOID)

;;; (DEFUN IDL-OUTPUT-SIGNATURES ...)

(CL:DEFUN IDL-OUTPUT-SIGNATURES (SIGNATURES)
  (IDL-INDENT)
  (IDL-BUMP-INDENT)
  (CL:LET* ((SIGNATURE NULL) (ITER-000 SIGNATURES))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:PROGN (CL:SETQ SIGNATURE (%%VALUE ITER-000))
     (CL:SETQ ITER-000 (%%REST ITER-000)))
    (IDL-INDENT) (IDL-OUTPUT-SIGNATURE SIGNATURE FALSE)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ";"
     EOL)))
  (IDL-UNBUMP-INDENT)
  :VOID)

(CL:DEFUN STARTUP-IDL-OUTPUT ()
  (CL:LET* ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2)
    (CL:SETQ SYM-IDL-OUTPUT-STELLA-IDL_COMMENT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "IDL_COMMENT" NULL 0))
    (CL:SETQ SYM-IDL-OUTPUT-STELLA-IDL_TYPEDEF
     (INTERN-RIGID-SYMBOL-WRT-MODULE "IDL_TYPEDEF" NULL 0))
    (CL:SETQ SYM-IDL-OUTPUT-STELLA-IDL_ENUM
     (INTERN-RIGID-SYMBOL-WRT-MODULE "IDL_ENUM" NULL 0))
    (CL:SETQ SYM-IDL-OUTPUT-STELLA-IDL_INTERFACE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "IDL_INTERFACE" NULL 0))
    (CL:SETQ SYM-IDL-OUTPUT-STELLA-IDL_STRUCT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "IDL_STRUCT" NULL 0))
    (CL:SETQ SYM-IDL-OUTPUT-STELLA-IDL_DECLARATIONS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "IDL_DECLARATIONS" NULL 0))
    (CL:SETQ SYM-IDL-OUTPUT-STELLA-IDL_IDENT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "IDL_IDENT" NULL 0))
    (CL:SETQ SYM-IDL-OUTPUT-STELLA-IDL_TYPE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "IDL_TYPE" NULL 0))
    (CL:SETQ SYM-IDL-OUTPUT-STELLA-IDL_SIGNATURES
     (INTERN-RIGID-SYMBOL-WRT-MODULE "IDL_SIGNATURES" NULL 0))
    (CL:SETQ SGT-IDL-OUTPUT-STELLA-CONS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CONS" NULL 1))
    (CL:SETQ SYM-IDL-OUTPUT-STELLA-IDL_VAR_ARGS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "IDL_VAR_ARGS" NULL 0))
    (CL:SETQ SYM-IDL-OUTPUT-STELLA-STARTUP-IDL-OUTPUT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-IDL-OUTPUT" NULL 0))
    (CL:SETQ SYM-IDL-OUTPUT-STELLA-METHOD-STARTUP-CLASSNAME
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME" NULL 0)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (DEFINE-FUNCTION-OBJECT "IDL-OUTPUT-PARSE-TREE"
     "(DEFUN IDL-OUTPUT-PARSE-TREE ((CONSTREE CONS)))"
     (CL:FUNCTION IDL-OUTPUT-PARSE-TREE) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-OUTPUT-STATEMENT"
     "(DEFUN IDL-OUTPUT-STATEMENT ((STATEMENT OBJECT)))"
     (CL:FUNCTION IDL-OUTPUT-STATEMENT) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-INDENT" "(DEFUN IDL-INDENT ())"
     (CL:FUNCTION IDL-INDENT) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-BUMP-INDENT" "(DEFUN IDL-BUMP-INDENT ())"
     (CL:FUNCTION IDL-BUMP-INDENT) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-UNBUMP-INDENT"
     "(DEFUN IDL-UNBUMP-INDENT ())" (CL:FUNCTION IDL-UNBUMP-INDENT) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-OUTPUT-TYPEDEF"
     "(DEFUN IDL-OUTPUT-TYPEDEF ((TYPEDEF CONS)))"
     (CL:FUNCTION IDL-OUTPUT-TYPEDEF) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-OUTPUT-ENUMERANDS"
     "(DEFUN IDL-OUTPUT-ENUMERANDS ((ENUMERANDS CONS)))"
     (CL:FUNCTION IDL-OUTPUT-ENUMERANDS) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-OUTPUT-ENUM"
     "(DEFUN IDL-OUTPUT-ENUM ((ENUM CONS)))" (CL:FUNCTION IDL-OUTPUT-ENUM)
     NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-OUTPUT-TYPE-EXPRESSION"
     "(DEFUN IDL-OUTPUT-TYPE-EXPRESSION ((TYPEEXPRESSION (CONS OF STRING-WRAPPER))))"
     (CL:FUNCTION IDL-OUTPUT-TYPE-EXPRESSION) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD IDL-OUTPUT-LITERAL ((OBJECT OBJECT)))"
     (CL:FUNCTION IDL-OUTPUT-LITERAL) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD IDL-OUTPUT-LITERAL ((STRING STRING)))"
     (CL:FUNCTION IDL-OUTPUT-LITERAL) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD IDL-OUTPUT-LITERAL ((STRING STRING-WRAPPER)))"
     (CL:FUNCTION IDL-OUTPUT-LITERAL) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD IDL-OUTPUT-LITERAL ((STRING MUTABLE-STRING-WRAPPER)))"
     (CL:FUNCTION IDL-OUTPUT-LITERAL) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD IDL-OUTPUT-LITERAL ((TREE QUOTED-EXPRESSION)))"
     (CL:FUNCTION IDL-OUTPUT-LITERAL) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD IDL-OUTPUT-LITERAL ((SYMBOL SYMBOL)))"
     (CL:FUNCTION IDL-OUTPUT-LITERAL) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD IDL-OUTPUT-LITERAL ((SURROGATE SURROGATE)))"
     (CL:FUNCTION IDL-OUTPUT-LITERAL) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD IDL-OUTPUT-LITERAL ((KEYWORD KEYWORD)))"
     (CL:FUNCTION IDL-OUTPUT-LITERAL) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-OUTPUT-ATOMIC-EXPRESSION"
     "(DEFUN IDL-OUTPUT-ATOMIC-EXPRESSION ((ATOM OBJECT)))"
     (CL:FUNCTION IDL-OUTPUT-ATOMIC-EXPRESSION) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-OUTPUT-COMMENT"
     "(DEFUN IDL-OUTPUT-COMMENT ((TREE STRING-WRAPPER)))"
     (CL:FUNCTION IDL-OUTPUT-COMMENT) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-OUTPUT-IDENTIFIER"
     "(DEFUN IDL-OUTPUT-IDENTIFIER ((IDENTIFIER STRING-WRAPPER)))"
     (CL:FUNCTION IDL-OUTPUT-IDENTIFIER) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-OUTPUT-DERIVED-CLASSES"
     "(DEFUN IDL-OUTPUT-DERIVED-CLASSES ((CLASSLIST CONS)))"
     (CL:FUNCTION IDL-OUTPUT-DERIVED-CLASSES) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-OUTPUT-TEMPLATE-PARAMETERS"
     "(DEFUN IDL-OUTPUT-TEMPLATE-PARAMETERS ((PARAMETERS CONS)))"
     (CL:FUNCTION IDL-OUTPUT-TEMPLATE-PARAMETERS) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-OUTPUT-TEMPLATE-CLASSES?"
     "(DEFUN (IDL-OUTPUT-TEMPLATE-CLASSES? BOOLEAN) ())"
     (CL:FUNCTION IDL-OUTPUT-TEMPLATE-CLASSES?) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-OUTPUT-INTERFACE"
     "(DEFUN IDL-OUTPUT-INTERFACE ((CLASSDEF CONS)))"
     (CL:FUNCTION IDL-OUTPUT-INTERFACE) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-OUTPUT-STRUCT"
     "(DEFUN IDL-OUTPUT-STRUCT ((CLASSDEF CONS)))"
     (CL:FUNCTION IDL-OUTPUT-STRUCT) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-OUTPUT-FORMAL-PARAMETERS"
     "(DEFUN IDL-OUTPUT-FORMAL-PARAMETERS ((PARAMETERS CONS)))"
     (CL:FUNCTION IDL-OUTPUT-FORMAL-PARAMETERS) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-OUTPUT-FUNCTION-SIGNATURE"
     "(DEFUN IDL-OUTPUT-FUNCTION-SIGNATURE ((FUNCTION CONS)))"
     (CL:FUNCTION IDL-OUTPUT-FUNCTION-SIGNATURE) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-OUTPUT-DECLARATIONS"
     "(DEFUN IDL-OUTPUT-DECLARATIONS ((DECLARATIONS (CONS OF CONS))))"
     (CL:FUNCTION IDL-OUTPUT-DECLARATIONS) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-OUTPUT-SIGNATURE"
     "(DEFUN IDL-OUTPUT-SIGNATURE ((SIGNATURE CONS) (OUTPUTMETHODCLASS? BOOLEAN)))"
     (CL:FUNCTION IDL-OUTPUT-SIGNATURE) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-OUTPUT-SIGNATURES"
     "(DEFUN IDL-OUTPUT-SIGNATURES ((SIGNATURES CONS)))"
     (CL:FUNCTION IDL-OUTPUT-SIGNATURES) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-IDL-OUTPUT"
     "(DEFUN STARTUP-IDL-OUTPUT () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-IDL-OUTPUT) NULL)
    (CL:LET*
     ((FUNCTION
       (LOOKUP-FUNCTION SYM-IDL-OUTPUT-STELLA-STARTUP-IDL-OUTPUT)))
     (SET-DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
      SYM-IDL-OUTPUT-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "Startup-Idl-Output") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *IDL-INDENT-CHARS* INTEGER 0)")))
  :VOID)
