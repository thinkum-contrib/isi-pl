;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

#|--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1996-2000              | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied "AS IS",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR KWD-CPP-TRANSLATE-USE-CPP-GARBAGE-COLLECTOR NULL)
(CL:DEFVAR SGT-CPP-TRANSLATE-STELLA-KEY-VALUE-LIST NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-++ NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA--- NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-+ NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-- NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-* NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-/ NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-EQ? NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-!= NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-> NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA->= NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-=> NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-< NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-=< NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-<= NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-AND NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-OR NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-NOT NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CHOOSE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-ASM NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-AUTO NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-BREAK NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CASE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CATCH NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CHAR NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CLASS NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CONST NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CONTINUE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-DEFAULT NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-DELETE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-DO NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-DOUBLE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-ELSE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-ENUM NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-EXTERN NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-FLOAT NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-FOR NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-FRIEND NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-GOTO NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-IF NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-INLINE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-INT NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-LONG NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-NEW NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-OPERATOR NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-PRIVATE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-PROTECTED NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-PUBLIC NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-REGISTER NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-RETURN NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-SHORT NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-SIGNED NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-SIZEOF NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-STATIC NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-STRUCT NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-SWITCH NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-TEMPLATE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-THROW NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-TRY NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-TYPEDEF NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-UNION NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-UNSIGNED NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-VIRTUAL NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-VOID NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-VOLATILE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-WHILE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-TYPENAME NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-GLOBAL-VARIABLE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-TYPE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-METHOD NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-MACRO NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-PRINT-METHOD NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-STARTUP-TIME-PROGN NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-VERBATIM NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-SPECIAL NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-SYS-SIGNAL NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-SYS-UNWIND-PROTECT NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-VOID-SYS NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-BAD-SYS NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-TYPED-SYS NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-SETQ NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-SYS-SLOT-VALUE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-SYS-REFERENCED-SLOT-VALUE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-SYS-SLOT-VALUE-SETTER NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-SYS-CALL-METHOD NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-SYS-REFERENCED-CALL-METHOD NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-SYS-CALL-FUNCTION NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-PROGN NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-LOOP NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-SYS-FOREACH NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-LET NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CAST NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-SAFE-CAST NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-WHEN NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-UNLESS NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-COND NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-MAKE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-SYS-NEW NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-MV-SETQ NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-SYS-CALL-FUNCTION-CODE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-SYS-CALL-METHOD-CODE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-SYS-INLINE-CALL NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-THE-CODE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-SYS-POINTER-TO-FUNCTION NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-IGNORE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-STELLA-TRY NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-STELLA-THROW NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-PRINT-STREAM NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-PRINT-NATIVE-STREAM NULL)
(CL:DEFVAR SGT-CPP-TRANSLATE-STELLA-CONS NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-CPP NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_VERBATIM NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-UNBIND-WITH-DESTRUCTORS NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_FUNCTION_CALL NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_IDENT NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_ACTUALS NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_BLOCK NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_STATEMENTS NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_COMMENT NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-DIGIT NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_PRINT_NATIVE_STREAM NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_DEFPRINT NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_RETURN NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-STREAM NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-SETJMP NULL)
(CL:DEFVAR SGT-CPP-TRANSLATE-STELLA-INTEGER NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-LONGJMP NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_CATCH NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_THROW NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_SIGNAL NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_UNWIND_PROTECT NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_CAST NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_ASSIGN NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-UNBOUND-SPECIAL-VARIABLE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_SPECIAL NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_TYPE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_GLOBAL NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-SYMBOL-ID NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-OTHERWISE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_CASE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_PROGN NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_COND NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_LOOP NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_WHILE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_BREAK NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_CONTINUE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_IF NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_WHEN NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_UNLESS NULL)
(CL:DEFVAR SGT-CPP-TRANSLATE-STELLA-ARGUMENT-LIST-ITERATOR NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_FOREACH NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-VA_START NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-VA_END NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-ALLOCATE-ITERATOR NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-LENGTH NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-NEXT? NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-ARGUMENT NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_BINARY_OP NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_UNARY_OP NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_LITERAL NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-VA_ARG NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-FUNCTION NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_FUNCTION_POINTER NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-METHOD NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_METHOD_POINTER NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-TRUE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-ANY-VALUE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_ARRAY_REFERENCE NULL)
(CL:DEFVAR SGT-CPP-TRANSLATE-STELLA-VOID NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_REFERENCED_SLOT_VALUE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_SLOT_VALUE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_SLOT_VALUE_SETTER NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CLASS-CPP-NATIVE-TYPE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_MAKE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_STARTUP_TIME_PROGN NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_PRINT_STREAM NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-WARN NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-ERROR NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-CONTINUABLE-ERROR NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_STANDARD_ERROR NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_STANDARD_OUT NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-ENDL NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-EOL NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_REFERENCED_METHOD_CALL NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-NULL NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-SET NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_SYMBOL NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-GET NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-CPP-STANDALONE NULL)
(CL:DEFVAR SGT-CPP-TRANSLATE-STELLA-UNKNOWN NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-UPPERCASE NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-LOWERCASE NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-CAPITALIZED NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-MODULE-CPP-PACKAGE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-METHOD-VARIABLE-ARGUMENTS? NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-_RETURN NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_VAR_ARGS NULL)
(CL:DEFVAR SGT-CPP-TRANSLATE-STELLA-STORAGE-SLOT NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-THIS NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-DOCUMENTATION NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_FUNCTION NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_METHOD NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_METHOD_SETTER_CALL NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-DEFINED? NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-NULL? NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-NTH NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-NTH-SETTER NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-AREF NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-AREF-SETTER NULL)
(CL:DEFVAR SGT-CPP-TRANSLATE-STELLA-ARGUMENT-LIST NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_METHOD_CALL NULL)
(CL:DEFVAR SGT-CPP-TRANSLATE-STELLA-OBJECT NULL)
(CL:DEFVAR SGT-CPP-TRANSLATE-STELLA-BOOLEAN NULL)
(CL:DEFVAR SGT-CPP-TRANSLATE-STELLA-STRING NULL)
(CL:DEFVAR SGT-CPP-TRANSLATE-STELLA-MUTABLE-STRING NULL)
(CL:DEFVAR SGT-CPP-TRANSLATE-STELLA-NATIVE-VECTOR NULL)
(CL:DEFVAR SGT-CPP-TRANSLATE-STELLA-ARRAY NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_FUNCTION_SIGNATURE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_METHOD_SIGNATURE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_FUNCALL NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_METHOD_CODE_CALL NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-GET-SYM NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-GET-KWD NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-GET-SGT NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-DUMMY NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-CPP_TERNARY_OP NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-STARTUP-CPP-TRANSLATE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STELLA-MODULE* FALSE-WRAPPER *MODULE*
  *CHARACTER-DOWNCASE-TABLE* *CHARACTER-UPCASE-TABLE* NULL-STRING-WRAPPER
  *METHODBEINGWALKED* *CURRENT-STREAM* NULL-CHARACTER
  *TRANSLATOROUTPUTLANGUAGE* STANDARD-ERROR EOL *CHARACTER-TYPE-TABLE*
  *CURRENT-ENVIRONMENT-FEATURES*))

;;; (DEFUN (CPP-USE-GARBAGE-COLLECTOR? BOOLEAN) ...)

(CL:DEFUN CPP-USE-GARBAGE-COLLECTOR? ()
  (CL:RETURN-FROM CPP-USE-GARBAGE-COLLECTOR?
   (MEMBER? *CURRENT-ENVIRONMENT-FEATURES*
    KWD-CPP-TRANSLATE-USE-CPP-GARBAGE-COLLECTOR)))

;;; (DEFSPECIAL *DUMMYDECLARATIONS* ...)

(CL:DEFVAR *DUMMYDECLARATIONS* NULL
  "Temporary List of declarations for unused return parameters")

;;; (DEFSPECIAL *CURRENTDUMMYINDEX* ...)

(CL:PROGN (CL:DEFVAR *CURRENTDUMMYINDEX* NULL-INTEGER "Current index of dummy parameter for unused return value") (CL:DECLAIM (CL:TYPE CL:FIXNUM *CURRENTDUMMYINDEX*)))

;;; (DEFGLOBAL *OPERATOR-TABLE* ...)

(CL:DEFVAR *OPERATOR-TABLE* NULL
  "Mapping from STELLA operators to C++ operators")

;;; (DEFUN (CPP-LOOKUP-OPERATOR-TABLE CONS) ...)

(CL:DEFUN CPP-LOOKUP-OPERATOR-TABLE (OPERATOR)
  (CL:LET* ((ENTRY (LOOKUP *OPERATOR-TABLE* OPERATOR)) (COPIEDENTRY NIL))
   (CL:WHEN (CL:NOT (CL:EQ ENTRY NULL))
    (CL:LET* ((WRAPPER NULL) (ITER-000 ENTRY) (COLLECT-000 NULL))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:PROGN (CL:SETQ WRAPPER (%%VALUE ITER-000))
       (CL:SETQ ITER-000 (%%REST ITER-000)))
      (CL:IF (CL:EQ COLLECT-000 NULL)
       (CL:PROGN
        (CL:SETQ COLLECT-000
         (CONS (WRAP-STRING (%STRING-WRAPPER.WRAPPER-VALUE WRAPPER)) NIL))
        (CL:IF (CL:EQ COPIEDENTRY NIL) (CL:SETQ COPIEDENTRY COLLECT-000)
         (ADD-CONS-TO-END-OF-CONS-LIST COPIEDENTRY COLLECT-000)))
       (CL:PROGN
        (CL:SETF (%%REST COLLECT-000)
         (CONS (WRAP-STRING (%STRING-WRAPPER.WRAPPER-VALUE WRAPPER)) NIL))
        (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
    (CL:RETURN-FROM CPP-LOOKUP-OPERATOR-TABLE COPIEDENTRY))
   (CL:RETURN-FROM CPP-LOOKUP-OPERATOR-TABLE NULL)))

;;; (DEFUN (CPP-YIELD-RENAMED-RESERVED-WORD STRING-WRAPPER) ...)

(CL:DEFUN CPP-YIELD-RENAMED-RESERVED-WORD (WORD)
  (CL:RETURN-FROM CPP-YIELD-RENAMED-RESERVED-WORD
   (WRAP-STRING
    (CONCATENATE "renamed_"
     (STRING-CAPITALIZE (%SYMBOL.SYMBOL-NAME WORD))))))

;;; (DEFUN (CPP-CREATE-RESERVED-WORD-TABLE STRING-HASH-TABLE) ...)

(CL:DEFUN CPP-CREATE-RESERVED-WORD-TABLE ()
  (CL:LET* ((TABLE (NEW-STRING-HASH-TABLE)))
   (CL:LET*
    ((WORD NULL)
     (ITER-000
      (LIST* SYM-CPP-TRANSLATE-STELLA-ASM SYM-CPP-TRANSLATE-STELLA-AUTO
       SYM-CPP-TRANSLATE-STELLA-BREAK SYM-CPP-TRANSLATE-STELLA-CASE
       SYM-CPP-TRANSLATE-STELLA-CATCH SYM-CPP-TRANSLATE-STELLA-CHAR
       SYM-CPP-TRANSLATE-STELLA-CLASS SYM-CPP-TRANSLATE-STELLA-CONST
       SYM-CPP-TRANSLATE-STELLA-CONTINUE SYM-CPP-TRANSLATE-STELLA-DEFAULT
       SYM-CPP-TRANSLATE-STELLA-DELETE SYM-CPP-TRANSLATE-STELLA-DO
       SYM-CPP-TRANSLATE-STELLA-DOUBLE SYM-CPP-TRANSLATE-STELLA-ELSE
       SYM-CPP-TRANSLATE-STELLA-ENUM SYM-CPP-TRANSLATE-STELLA-EXTERN
       SYM-CPP-TRANSLATE-STELLA-FLOAT SYM-CPP-TRANSLATE-STELLA-FOR
       SYM-CPP-TRANSLATE-STELLA-FRIEND SYM-CPP-TRANSLATE-STELLA-GOTO
       SYM-CPP-TRANSLATE-STELLA-IF SYM-CPP-TRANSLATE-STELLA-INLINE
       SYM-CPP-TRANSLATE-STELLA-INT SYM-CPP-TRANSLATE-STELLA-LONG
       SYM-CPP-TRANSLATE-STELLA-NEW SYM-CPP-TRANSLATE-STELLA-OPERATOR
       SYM-CPP-TRANSLATE-STELLA-PRIVATE SYM-CPP-TRANSLATE-STELLA-PROTECTED
       SYM-CPP-TRANSLATE-STELLA-PUBLIC SYM-CPP-TRANSLATE-STELLA-REGISTER
       SYM-CPP-TRANSLATE-STELLA-RETURN SYM-CPP-TRANSLATE-STELLA-SHORT
       SYM-CPP-TRANSLATE-STELLA-SIGNED SYM-CPP-TRANSLATE-STELLA-SIZEOF
       SYM-CPP-TRANSLATE-STELLA-STATIC SYM-CPP-TRANSLATE-STELLA-STRUCT
       SYM-CPP-TRANSLATE-STELLA-SWITCH SYM-CPP-TRANSLATE-STELLA-TEMPLATE
       SYM-CPP-TRANSLATE-STELLA-THROW SYM-CPP-TRANSLATE-STELLA-TRY
       SYM-CPP-TRANSLATE-STELLA-TYPEDEF SYM-CPP-TRANSLATE-STELLA-UNION
       SYM-CPP-TRANSLATE-STELLA-UNSIGNED SYM-CPP-TRANSLATE-STELLA-VIRTUAL
       SYM-CPP-TRANSLATE-STELLA-VOID SYM-CPP-TRANSLATE-STELLA-VOLATILE
       SYM-CPP-TRANSLATE-STELLA-WHILE SYM-CPP-TRANSLATE-STELLA-TYPENAME
       NIL)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:PROGN (CL:SETQ WORD (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (INSERT-AT TABLE (%SYMBOL.SYMBOL-NAME WORD)
      (CPP-YIELD-RENAMED-RESERVED-WORD WORD))))
   (INSERT-AT TABLE "++" (WRAP-STRING "stella_Increment"))
   (INSERT-AT TABLE "--" (WRAP-STRING "stella_Decrement"))
   (CL:RETURN-FROM CPP-CREATE-RESERVED-WORD-TABLE TABLE)))

;;; (DEFGLOBAL *CPP-RESERVED-WORD-TABLE* ...)

(CL:DEFVAR *CPP-RESERVED-WORD-TABLE* NULL)

;;; (DEFUN (CPP-LOOKUP-RESERVED-WORD-TABLE STRING-WRAPPER) ...)

(CL:DEFUN CPP-LOOKUP-RESERVED-WORD-TABLE (WORD)
  (CL:LET*
   ((ENTRY (LOOKUP *CPP-RESERVED-WORD-TABLE* (%SYMBOL.SYMBOL-NAME WORD))))
   (CL:IF (CL:NOT (CL:EQ ENTRY NULL))
    (CL:RETURN-FROM CPP-LOOKUP-RESERVED-WORD-TABLE
     (WRAP-STRING (%STRING-WRAPPER.WRAPPER-VALUE ENTRY)))
    (CL:RETURN-FROM CPP-LOOKUP-RESERVED-WORD-TABLE NULL))))

;;; (DEFUN (CPP-TRANSLATE-UNIT CONS) ...)

(CL:DEFUN CPP-TRANSLATE-UNIT (UNIT)
  (CL:LET* ((TEST-VALUE-000 (%TRANSLATION-UNIT.CATEGORY UNIT)))
   (CL:COND
    ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-GLOBAL-VARIABLE)
     (CL:RETURN-FROM CPP-TRANSLATE-UNIT
      (CPP-TRANSLATE-DEFINE-GLOBAL-VARIABLE-UNIT UNIT)))
    ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-CLASS)
     (CL:RETURN-FROM CPP-TRANSLATE-UNIT
      (CPP-TRANSLATE-DEFINE-NATIVE-CLASS-UNIT UNIT)))
    ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-TYPE)
     (CL:RETURN-FROM CPP-TRANSLATE-UNIT NIL))
    ((CL:OR (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-METHOD)
      (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-MACRO))
     (CL:RETURN-FROM CPP-TRANSLATE-UNIT
      (CPP-TRANSLATE-DEFINE-METHOD-UNIT UNIT)))
    ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-PRINT-METHOD)
     (CL:RETURN-FROM CPP-TRANSLATE-UNIT
      (CPP-TRANSLATE-DEFPRINT-UNIT UNIT)))
    ((CL:OR
      (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-STARTUP-TIME-PROGN)
      (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-VERBATIM))
     (CL:RETURN-FROM CPP-TRANSLATE-UNIT
      (CPP-TRANSLATE-A-TREE (%TRANSLATION-UNIT.THE-OBJECT UNIT))))
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
       TEST-VALUE-000 "' is not a valid case option")
      (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))

;;; (DEFUN (CPP-TRANSLATE-LIST-OF-TREES CONS) ...)

(CL:DEFUN CPP-TRANSLATE-LIST-OF-TREES (TREES)
  (CL:LET* ((CURSOR TREES))
   (CL:LOOP WHILE (CL:NOT (CL:EQ CURSOR NIL)) DO
    (CL:SETF (%%VALUE CURSOR) (CPP-TRANSLATE-A-TREE (%%VALUE CURSOR)))
    (CL:SETQ CURSOR (%%REST CURSOR)))
   (CL:RETURN-FROM CPP-TRANSLATE-LIST-OF-TREES TREES)))

;;; (DEFUN (CPP-TRANSLATE-A-TREE OBJECT) ...)

(CL:DEFUN CPP-TRANSLATE-A-TREE (TREE)
  (CL:COND
   ((CL:EQ (SAFE-PRIMARY-TYPE TREE) SGT-CPP-TRANSLATE-STELLA-CONS)
    (CL:PROGN
     (CL:WHEN (CL:EQ TREE NIL)
      (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
       (CPP-TRANSLATE-ATOMIC-TREE TREE)))
     (CL:LET* ((TEST-VALUE-000 (%%VALUE TREE)))
      (CL:COND
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-SPECIAL)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-SPECIAL-TREE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-VERBATIM)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-VERBATIM-TREE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-CATCH)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE (CPP-TRANSLATE-CATCH TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-THROW)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE (CPP-TRANSLATE-THROW TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-SYS-SIGNAL)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE (CPP-TRANSLATE-SIGNAL TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-SYS-UNWIND-PROTECT)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-UNWIND-PROTECT TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-VOID-SYS)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-VOID-SYS TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-BAD-SYS)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-BAD-SYS TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-TYPED-SYS)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-TYPED-SYS TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-SETQ)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-SETQ-TREE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-SYS-SLOT-VALUE)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-SYS-SLOT-VALUE TREE)))
       ((CL:EQ TEST-VALUE-000
         SYM-CPP-TRANSLATE-STELLA-SYS-REFERENCED-SLOT-VALUE)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-SYS-REFERENCED-SLOT-VALUE TREE)))
       ((CL:EQ TEST-VALUE-000
         SYM-CPP-TRANSLATE-STELLA-SYS-SLOT-VALUE-SETTER)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-SYS-SLOT-VALUE-SETTER TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-SYS-CALL-METHOD)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-METHOD-CALL (%%REST TREE) FALSE)))
       ((CL:EQ TEST-VALUE-000
         SYM-CPP-TRANSLATE-STELLA-SYS-REFERENCED-CALL-METHOD)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-METHOD-CALL (%%REST TREE) TRUE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-SYS-CALL-FUNCTION)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-FUNCTION-CALL (%%REST TREE) NULL)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-PROGN)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE (CPP-TRANSLATE-PROGN TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-LOOP)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE (CPP-TRANSLATE-LOOP TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-SYS-FOREACH)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-FOREACH-TREE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-LET)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-LET-TREE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-STARTUP-TIME-PROGN)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-STARTUP-TIME-PROGN TREE)))
       ((CL:OR (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-CAST)
         (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-SAFE-CAST))
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE (CPP-TRANSLATE-CAST TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-RETURN)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-RETURN-TREE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-BREAK)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE (CPP-TRANSLATE-BREAK TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-CONTINUE)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-CONTINUE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-WHILE)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE (CPP-TRANSLATE-WHILE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-IF)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-IF-TREE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-CHOOSE)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-CHOOSE-TREE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-WHEN)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-WHEN-TREE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-UNLESS)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-UNLESS-TREE TREE)))
       ((CL:OR (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-AND)
         (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-OR)
         (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-NOT)
         (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-EQ?)
         (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA->)
         (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA->=)
         (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-<)
         (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-<=)
         (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-++)
         (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA---))
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-OPERATOR-TREE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-COND)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-COND-TREE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-CASE)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-CASE-TREE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-MAKE)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-MAKE-TREE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-SYS-NEW)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-SYS-NEW TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-MV-SETQ)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-MV-SETQ TREE)))
       ((CL:EQ TEST-VALUE-000
         SYM-CPP-TRANSLATE-STELLA-SYS-CALL-FUNCTION-CODE)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-CALL-FUNCTION-CODE TREE)))
       ((CL:EQ TEST-VALUE-000
         SYM-CPP-TRANSLATE-STELLA-SYS-CALL-METHOD-CODE)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-CALL-METHOD-CODE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-SYS-INLINE-CALL)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-INLINE-CALL-TREE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-THE-CODE)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-THE-CODE TREE)))
       ((CL:EQ TEST-VALUE-000
         SYM-CPP-TRANSLATE-STELLA-SYS-POINTER-TO-FUNCTION)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-SYS-POINTER-TO-FUNCTION TREE)))
       ((CL:OR (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-INLINE)
         (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-IGNORE))
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-INLINE-TREE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-STELLA-TRY)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-STELLA-TRY-TREE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-STELLA-THROW)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-STELLA-THROW-TREE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-PRINT-STREAM)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-PRINT-STREAM TREE)))
       ((CL:EQ TEST-VALUE-000
         SYM-CPP-TRANSLATE-STELLA-PRINT-NATIVE-STREAM)
        (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
         (CPP-TRANSLATE-PRINT-NATIVE-STREAM TREE)))
       (CL:T
        (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
         (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
          "`" TEST-VALUE-000 "' is not a valid case option")
         (CL:ERROR
          (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))))
   (CL:T
    (CL:WHEN (CL:EQ TREE NULL)
     (CL:RETURN-FROM CPP-TRANSLATE-A-TREE (CPP-TRANSLATE-NULL)))
    (CL:RETURN-FROM CPP-TRANSLATE-A-TREE
     (CPP-TRANSLATE-ATOMIC-TREE TREE)))))

;;; (DEFUN (CPP-TRANSLATE-VERBATIM-TREE CONS) ...)

(CL:DEFUN CPP-TRANSLATE-VERBATIM-TREE (TREE)
  (CL:LET* ((CURSOR (%%REST TREE)) (VERBATIMCODE NULL))
   (CL:LOOP WHILE (CL:NOT (CL:EQ CURSOR NIL)) DO
    (CL:WHEN (CL:EQ (%%VALUE CURSOR) KWD-CPP-TRANSLATE-CPP)
     (CL:SETQ VERBATIMCODE (%%VALUE (%%REST CURSOR)))
     (CL:RETURN-FROM CPP-TRANSLATE-VERBATIM-TREE
      (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_VERBATIM VERBATIMCODE NIL)))
    (CL:SETQ CURSOR (%%REST (%%REST CURSOR))))
   (CL:ERROR (NEW-STELLA-EXCEPTION "Verbatim has no :cpp option"))))

;;; (DEFUN (CPP-TRANSLATE-SPECIAL-TREE CONS) ...)

(CL:DEFUN CPP-TRANSLATE-SPECIAL-TREE (TREE)
  (CL:WHEN
   (CL:NOT
    (CL:EQ (SPECIAL-IMPLEMENTATION-STYLE)
     KWD-CPP-TRANSLATE-UNBIND-WITH-DESTRUCTORS))
   (CL:ERROR
    "Safety violation: INTERNAL ERROR: Unexpected special implementation style"))
  (CL:LET*
   ((ODECLARATIONS NIL) (VARIABLE NULL) (TYPE NULL)
    (INITIALVALUETREE NULL))
   (CL:LET*
    ((DECLARATION NULL) (ITER-000 (%%VALUE (%%REST TREE)))
     (COLLECT-000 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:PROGN (CL:SETQ DECLARATION (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (CL:SETQ VARIABLE (%%VALUE DECLARATION))
     (CL:SETQ TYPE (%%VALUE (%%REST DECLARATION)))
     (CL:SETQ INITIALVALUETREE (%%VALUE (%%REST (%%REST DECLARATION))))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-000
        (CONS
         (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_FUNCTION_CALL
          (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT
           (WRAP-STRING "BIND_STELLA_SPECIAL") NIL)
          (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_ACTUALS
           (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT
            (CPP-TRANSLATE-GLOBAL-NAME VARIABLE) NIL)
           (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT
            (CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC TYPE) NIL)
           (CPP-TRANSLATE-A-TREE INITIALVALUETREE) NIL)
          NIL)
         NIL))
       (CL:IF (CL:EQ ODECLARATIONS NIL)
        (CL:SETQ ODECLARATIONS COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST ODECLARATIONS COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000)
        (CONS
         (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_FUNCTION_CALL
          (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT
           (WRAP-STRING "BIND_STELLA_SPECIAL") NIL)
          (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_ACTUALS
           (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT
            (CPP-TRANSLATE-GLOBAL-NAME VARIABLE) NIL)
           (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT
            (CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC TYPE) NIL)
           (CPP-TRANSLATE-A-TREE INITIALVALUETREE) NIL)
          NIL)
         NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
   (CL:RETURN-FROM CPP-TRANSLATE-SPECIAL-TREE
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_BLOCK NIL
     (CONS SYM-CPP-TRANSLATE-STELLA-CPP_STATEMENTS
      (CONCATENATE ODECLARATIONS
       (CONCATENATE (CPP-TRANSLATE-LIST-OF-TREES (%%REST (%%REST TREE)))
        NIL)))
     NIL))))

;;; (DEFUN (CPP-TRANSLATE-INLINE-TREE CONS) ...)

(CL:DEFUN CPP-TRANSLATE-INLINE-TREE (TREE)
  (CL:RETURN-FROM CPP-TRANSLATE-INLINE-TREE
   (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_COMMENT
    (WRAP-STRING "inline method") NIL)))

;;; (DEFUN (TOKENIZE-VERBATIM-METHOD-BODY CONS) ...)

(CL:DEFUN TOKENIZE-VERBATIM-METHOD-BODY (TREE)
  (CL:LET*
   ((METHOD (SLOT-FROM-EXPRESSION-TREE TREE))
    (BODY
     (%VERBATIM-STRING-WRAPPER.WRAPPER-VALUE
      (LOOKUP-VERBATIM-TREE
       (WALK-VERBATIM-TREE (INLINABLE-METHOD-BODY METHOD)) NULL)))
    (BODYSTART 0) (BODYLENGTH (CL:THE CL:FIXNUM (CL:LENGTH BODY)))
    (PARAMETERS (NEW-LIST)) (PARAMETERPOSITION 0)
    (IDENTIFIERCHARS
     "_ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789$")
    (RESULT NIL) (CH NULL-CHARACTER) (CURSOR 0) (END 0))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING BODY IDENTIFIERCHARS)
    (CL:TYPE CL:FIXNUM BODYSTART BODYLENGTH PARAMETERPOSITION CURSOR END))
   (CL:LET*
    ((PAR NULL)
     (ITER-000 (%LIST.THE-CONS-LIST (METHOD-PARAMETER-NAMES METHOD)))
     (COLLECT-000 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:PROGN (CL:SETQ PAR (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-000
        (CONS
         (CL:IF (CL:EQ *TRANSLATOROUTPUTLANGUAGE* KWD-CPP-TRANSLATE-CPP)
          (CPP-TRANSLATE-NAME PAR) (JAVA-TRANSLATE-NAME PAR))
         NIL))
       (CL:IF (CL:EQ (%LIST.THE-CONS-LIST PARAMETERS) NIL)
        (CL:SETF (%LIST.THE-CONS-LIST PARAMETERS) COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST (%LIST.THE-CONS-LIST PARAMETERS)
         COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000)
        (CONS
         (CL:IF (CL:EQ *TRANSLATOROUTPUTLANGUAGE* KWD-CPP-TRANSLATE-CPP)
          (CPP-TRANSLATE-NAME PAR) (JAVA-TRANSLATE-NAME PAR))
         NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
   (CL:LOOP (CL:WHEN (CL:>= CURSOR BODYLENGTH) (CL:RETURN))
    (CL:SETQ CH
     (CL:LET ((SELF BODY) (POSITION CURSOR))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:AREF (CL:THE CL:SIMPLE-STRING SELF)
       (CL:THE CL:FIXNUM POSITION))))
    (CL:COND
     ((CL:EQL CH #\/) (CL:SETQ CURSOR (CL:1+ CURSOR))
      (CL:WHEN (CL:< CURSOR BODYLENGTH)
       (CL:CASE
        (CL:LET ((SELF BODY) (POSITION CURSOR))
         (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
          (CL:TYPE CL:FIXNUM POSITION))
         (CL:AREF (CL:THE CL:SIMPLE-STRING SELF)
          (CL:THE CL:FIXNUM POSITION)))
        (#\/
         (CL:LET*
          ((COMMENT
            (NEW-INPUT-STRING-STREAM
             (SUBSEQUENCE BODY CURSOR NULL-INTEGER))))
          (CL:SETQ CURSOR
           (CL:+ CURSOR
            (CL:THE CL:FIXNUM
             (CL:LENGTH
              (CL:THE CL:SIMPLE-STRING (READ-LINE COMMENT))))))))
        (#\* (CL:SETQ CURSOR (STRING-SEARCH BODY "*/" CURSOR))
         (CL:COND
          ((NULL? CURSOR)
           (CL:LET* ((*PRINTREADABLY?* TRUE))
            (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
            (SIGNAL-TRANSLATION-ERROR)
            (CL:WHEN (CL:NOT (SUPPRESS-WARNINGS?))
             (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-ERROR)
             (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-ERROR)
              EOL " Illegal `" *TRANSLATOROUTPUTLANGUAGE*
              "' verbatim code in `" (DE-UGLIFY-PARSE-TREE METHOD) "'" EOL
              ".")))
           (CL:RETURN-FROM TOKENIZE-VERBATIM-METHOD-BODY NULL))
          (CL:T (CL:SETQ CURSOR (CL:+ CURSOR 2)))))
        (CL:OTHERWISE))))
     ((CL:AND (MEMBER? IDENTIFIERCHARS CH)
       (CL:NOT
        (CL:EQ
         (CL:AREF
          (CL:THE CL:SIMPLE-VECTOR
           (%VECTOR.THE-ARRAY *CHARACTER-TYPE-TABLE*))
          (CL:THE CL:FIXNUM (CL:CHAR-CODE CH)))
         KWD-CPP-TRANSLATE-DIGIT)))
      (CL:SETQ END (CL:1+ CURSOR))
      (CL:LET*
       ((I NULL-INTEGER) (ITER-001 END)
        (UPPER-BOUND-000 (CL:1- BODYLENGTH)))
       (CL:DECLARE (CL:TYPE CL:FIXNUM ITER-001 UPPER-BOUND-000 I))
       (CL:LOOP WHILE (CL:<= ITER-001 UPPER-BOUND-000) DO
        (CL:PROGN (CL:SETQ I ITER-001)
         (CL:SETQ ITER-001 (CL:1+ ITER-001)))
        (CL:IF
         (MEMBER? IDENTIFIERCHARS
          (CL:LET ((SELF BODY) (POSITION I))
           (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
            (CL:TYPE CL:FIXNUM POSITION))
           (CL:AREF (CL:THE CL:SIMPLE-STRING SELF)
            (CL:THE CL:FIXNUM POSITION))))
         (CL:SETQ END (CL:1+ END)) (CL:RETURN))))
      (CL:SETQ PARAMETERPOSITION
       (POSITION PARAMETERS (WRAP-STRING (SUBSEQUENCE BODY CURSOR END))
        NULL-INTEGER))
      (CL:WHEN (DEFINED? PARAMETERPOSITION)
       (CL:SETQ RESULT
        (CONS (WRAP-STRING (SUBSEQUENCE BODY BODYSTART CURSOR)) RESULT))
       (CL:SETQ RESULT
        (CONS
         (CONS (NTH PARAMETERS PARAMETERPOSITION)
          (CONS (WRAP-INTEGER PARAMETERPOSITION) NIL))
         RESULT))
       (CL:SETQ BODYSTART END))
      (CL:SETQ CURSOR END))
     (CL:T (CL:SETQ CURSOR (CL:1+ CURSOR)))))
   (CL:WHEN (CL:< BODYSTART BODYLENGTH)
    (CL:SETQ RESULT
     (CONS (WRAP-STRING (SUBSEQUENCE BODY BODYSTART BODYLENGTH)) RESULT)))
   (CL:RETURN-FROM TOKENIZE-VERBATIM-METHOD-BODY (REVERSE RESULT))))

;;; (DEFUN (CPP-TRANSLATE-INLINE-CALL-TREE OBJECT) ...)

(CL:DEFUN CPP-TRANSLATE-INLINE-CALL-TREE (TREE)
  (CL:LET*
   ((CALLTREE (%%VALUE (%%REST TREE)))
    (ARGUMENTS
     (CL:IF
      (CL:EQ (%%VALUE CALLTREE)
       SYM-CPP-TRANSLATE-STELLA-SYS-CALL-FUNCTION)
      (NTH-REST CALLTREE 2) (NTH-REST CALLTREE 3)))
    (TOKENIZEDBODY (TOKENIZE-VERBATIM-METHOD-BODY CALLTREE)))
   (CL:WHEN (CL:NOT (CL:EQ TOKENIZEDBODY NULL))
    (CL:LET*
     ((INLINEDPARAMETERS (NEW-LIST)) (INLINEDBODY STELLA::NULL-STRING)
      (SUCCESS? TRUE))
     (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING INLINEDBODY))
     (CL:LET* ((*CURRENT-STREAM* (NEW-OUTPUT-STRING-STREAM)))
      (CL:DECLARE (CL:SPECIAL *CURRENT-STREAM*))
      (CL:LET* ((TOKEN NULL) (ITER-000 TOKENIZEDBODY))
       (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
        (CL:PROGN (CL:SETQ TOKEN (%%VALUE ITER-000))
         (CL:SETQ ITER-000 (%%REST ITER-000)))
        (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE TOKEN)))
         (CL:COND
          ((SUBTYPE-OF-STRING? TEST-VALUE-000)
           (CL:PROGN
            (%%PRINT-STREAM
             (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
             (%STRING-WRAPPER.WRAPPER-VALUE TOKEN))))
          ((CL:EQ TEST-VALUE-000 SGT-CPP-TRANSLATE-STELLA-CONS)
           (CL:PROGN
            (CL:LET*
             ((PARAMETER (%%VALUE TOKEN))
              (POSITION (%%VALUE (%%REST TOKEN)))
              (ARGUMENT
               (NTH ARGUMENTS (%INTEGER-WRAPPER.WRAPPER-VALUE POSITION))))
             (CL:WHEN (CL:NOT (SIDE-EFFECT-FREE-EXPRESSION? ARGUMENT))
              (CL:IF (MEMBER? INLINEDPARAMETERS PARAMETER)
               (CL:PROGN (CL:SETQ SUCCESS? FALSE) (CL:RETURN))
               (INSERT INLINEDPARAMETERS PARAMETER)))
             (CL:WHEN (CL:NOT (ATOMIC-EXPRESSION? ARGUMENT))
              (%%PRINT-STREAM
               (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "("))
             (CPP-OUTPUT-STATEMENT
              (CPP-TRANSLATE-A-TREE (COPY-CONS-TREE ARGUMENT)))
             (CL:WHEN (CL:NOT (ATOMIC-EXPRESSION? ARGUMENT))
              (%%PRINT-STREAM
               (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ")")))))
          (CL:T
           (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
            (%%PRINT-STREAM
             (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
             TEST-VALUE-000 "' is not a valid case option")
            (CL:ERROR
             (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))))
      (CL:SETQ INLINEDBODY (THE-STRING-READER *CURRENT-STREAM*))
      (CL:WHEN SUCCESS?
       (CL:RETURN-FROM CPP-TRANSLATE-INLINE-CALL-TREE
        (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_VERBATIM
         (NEW-VERBATIM-STRING-WRAPPER INLINEDBODY) NIL))))))
   (CL:RETURN-FROM CPP-TRANSLATE-INLINE-CALL-TREE
    (CPP-TRANSLATE-A-TREE CALLTREE))))

;;; (DEFUN (CPP-TRANSLATE-PRINT-NATIVE-STREAM CONS) ...)

(CL:DEFUN CPP-TRANSLATE-PRINT-NATIVE-STREAM (TREE)
  (CL:LET* ((OTREE (CPP-TRANSLATE-PRINT-STREAM TREE)))
   (FIRST-SETTER OTREE SYM-CPP-TRANSLATE-STELLA-CPP_PRINT_NATIVE_STREAM)
   (CL:RETURN-FROM CPP-TRANSLATE-PRINT-NATIVE-STREAM OTREE)))

;;; (DEFUN (CPP-TRANSLATE-DEFPRINT-UNIT CONS) ...)

(CL:DEFUN CPP-TRANSLATE-DEFPRINT-UNIT (UNIT)
  (CL:LET*
   ((PRINTFORM (%TRANSLATION-UNIT.CODE-REGISTER UNIT))
    (CLASS (%TRANSLATION-UNIT.THE-OBJECT UNIT)) (CLASSNAME NULL))
   (CL:SETQ CLASSNAME
    (CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC (%CLASS.CLASS-TYPE CLASS)))
   (CL:RETURN-FROM CPP-TRANSLATE-DEFPRINT-UNIT
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_DEFPRINT CLASSNAME
     (CONS
      (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_STATEMENTS
       (CPP-TRANSLATE-A-TREE PRINTFORM)
       (CONS
        (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_RETURN
         (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT
          (CPP-TRANSLATE-NAME SYM-CPP-TRANSLATE-STELLA-STREAM) NIL)
         NIL)
        NIL))
      NIL)))))

;;; (DEFUN (CLASS-DEFINITION-EXISTS? BOOLEAN) ...)

(CL:DEFUN CLASS-DEFINITION-EXISTS? (EXCEPTIONNAME)
  (CL:RETURN-FROM CLASS-DEFINITION-EXISTS? FALSE))

;;; (DEFUN CREATE-EXCEPTION-CLASS ...)

(CL:DEFUN CREATE-EXCEPTION-CLASS (EXCEPTIONNAME)
  (CL:LET* ((X 1)) (CL:DECLARE (CL:TYPE CL:FIXNUM X)))
  :VOID)

;;; (DEFUN (CPP-TRANSLATE-STELLA-TRY-TREE CONS) ...)

(CL:DEFUN CPP-TRANSLATE-STELLA-TRY-TREE (TREE)
  (CL:RETURN-FROM CPP-TRANSLATE-STELLA-TRY-TREE
   (CPP-TRANSLATE-A-TREE
    (LIST* SYM-CPP-TRANSLATE-STELLA-PROGN
     (LIST* SYM-CPP-TRANSLATE-STELLA-SETQ (%%VALUE (%%REST TREE))
      (CONS
       (LIST* SYM-CPP-TRANSLATE-STELLA-SYS-CALL-FUNCTION
        SYM-CPP-TRANSLATE-STELLA-SETJMP (%%VALUE (%%REST (%%REST TREE)))
        NIL)
       NIL))
     (LIST* SYM-CPP-TRANSLATE-STELLA-WHEN
      (LIST* SYM-CPP-TRANSLATE-STELLA-EQ?
       (LIST* SYM-CPP-TRANSLATE-STELLA-TYPED-SYS (%%VALUE (%%REST TREE))
        (CONS SGT-CPP-TRANSLATE-STELLA-INTEGER NIL))
       (WRAP-INTEGER 0) NIL)
      (FOURTH TREE) NIL)
     NIL))))

;;; (DEFUN (CPP-TRANSLATE-STELLA-THROW-TREE CONS) ...)

(CL:DEFUN CPP-TRANSLATE-STELLA-THROW-TREE (TREE)
  (CL:RETURN-FROM CPP-TRANSLATE-STELLA-THROW-TREE
   (CPP-TRANSLATE-A-TREE
    (LIST* SYM-CPP-TRANSLATE-STELLA-SYS-CALL-FUNCTION
     SYM-CPP-TRANSLATE-STELLA-LONGJMP (%%VALUE (%%REST TREE))
     (CONS (%%VALUE (%%REST (%%REST TREE))) NIL)))))

;;; (DEFUN (CPP-TRANSLATE-CATCH CONS) ...)

(CL:DEFUN CPP-TRANSLATE-CATCH (TREE)
  (CL:LET* ((EXCEPTIONNAME (%%VALUE (%%REST TREE))))
   (CL:WHEN (CL:NOT (CLASS-DEFINITION-EXISTS? EXCEPTIONNAME))
    (CREATE-EXCEPTION-CLASS EXCEPTIONNAME))
   (SECOND-SETTER TREE (CPP-TRANSLATE-CLASS-NAME (%%VALUE (%%REST TREE))))
   (THIRD-SETTER TREE
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_STATEMENTS
     (CPP-TRANSLATE-A-TREE (%%VALUE (%%REST (%%REST TREE)))) NIL))
   (FOURTH-SETTER TREE
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_STATEMENTS
     (CPP-TRANSLATE-A-TREE (FOURTH TREE)) NIL))
   (FIRST-SETTER TREE SYM-CPP-TRANSLATE-STELLA-CPP_CATCH)
   (CL:RETURN-FROM CPP-TRANSLATE-CATCH TREE)))

;;; (DEFUN (CPP-TRANSLATE-THROW CONS) ...)

(CL:DEFUN CPP-TRANSLATE-THROW (TREE)
  (FIRST-SETTER TREE SYM-CPP-TRANSLATE-STELLA-CPP_THROW)
  (SECOND-SETTER TREE (CPP-TRANSLATE-CLASS-NAME (%%VALUE (%%REST TREE))))
  (CL:RETURN-FROM CPP-TRANSLATE-THROW TREE))

;;; (DEFUN (CPP-TRANSLATE-SIGNAL CONS) ...)

(CL:DEFUN CPP-TRANSLATE-SIGNAL (TREE)
  (FIRST-SETTER TREE SYM-CPP-TRANSLATE-STELLA-CPP_SIGNAL)
  (SECOND-SETTER TREE (CPP-TRANSLATE-A-TREE (%%VALUE (%%REST TREE))))
  (CL:RETURN-FROM CPP-TRANSLATE-SIGNAL TREE))

;;; (DEFUN (CPP-TRANSLATE-UNWIND-PROTECT CONS) ...)

(CL:DEFUN CPP-TRANSLATE-UNWIND-PROTECT (TREE)
  (FIRST-SETTER TREE SYM-CPP-TRANSLATE-STELLA-CPP_UNWIND_PROTECT)
  (CL:SETF (%%REST TREE) (CPP-TRANSLATE-LIST-OF-TREES (%%REST TREE)))
  (CL:RETURN-FROM CPP-TRANSLATE-UNWIND-PROTECT TREE))

;;; (DEFUN (CPP-TRANSLATE-CAST CONS) ...)

(CL:DEFUN CPP-TRANSLATE-CAST (TREE)
  (FIRST-SETTER TREE SYM-CPP-TRANSLATE-STELLA-CPP_CAST)
  (SECOND-SETTER TREE (CPP-TRANSLATE-A-TREE (%%VALUE (%%REST TREE))))
  (THIRD-SETTER TREE
   (CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC
    (%%VALUE (%%REST (%%REST TREE)))))
  (CL:RETURN-FROM CPP-TRANSLATE-CAST TREE))

;;; (DEFUN (CPP-TRANSLATE-MV-SETQ CONS) ...)

(CL:DEFUN CPP-TRANSLATE-MV-SETQ (TREE)
  (CL:LET*
   ((VARIABLES (%%VALUE (%%REST TREE)))
    (FUNCTIONCALL (%%VALUE (%%REST (%%REST TREE))))
    (OTREE
     (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_ASSIGN
      (CPP-TRANSLATE-A-TREE (%%VALUE VARIABLES))
      (CONS
       (CPP-TRANSLATE-MV-FUNCTION-CALL FUNCTIONCALL (%%REST VARIABLES))
       NIL))))
   (CL:RETURN-FROM CPP-TRANSLATE-MV-SETQ OTREE)))

;;; (DEFUN (CPP-TRANSLATE-MV-FUNCTION-CALL CONS) ...)

(CL:DEFUN CPP-TRANSLATE-MV-FUNCTION-CALL (FUNCTIONCALL VARIABLES)
  (CL:RETURN-FROM CPP-TRANSLATE-MV-FUNCTION-CALL
   (CPP-TRANSLATE-A-TREE
    (CONCATENATE FUNCTIONCALL (CONCATENATE VARIABLES NIL)))))

;;; (DEFUN (CPP-TRANSLATE-DEFINE-GLOBAL-VARIABLE-UNIT CONS) ...)

(CL:DEFUN CPP-TRANSLATE-DEFINE-GLOBAL-VARIABLE-UNIT (UNIT)
  (CL:LET*
   ((GLOBAL (%TRANSLATION-UNIT.THE-OBJECT UNIT))
    (TYPE (GLOBAL-VARIABLE-TYPE-SPEC GLOBAL))
    (INITIALVALUETREE
     (CL:IF
      (CL:EQ (%TRANSLATION-UNIT.CODE-REGISTER UNIT)
       KWD-CPP-TRANSLATE-UNBOUND-SPECIAL-VARIABLE)
      NULL (CPP-TRANSLATE-A-TREE (%TRANSLATION-UNIT.CODE-REGISTER UNIT))))
    (VARIABLENAME
     (CPP-TRANSLATE-GLOBAL-NAME (%GLOBAL-VARIABLE.VARIABLE-NAME GLOBAL))))
   (CL:COND
    ((%GLOBAL-VARIABLE.VARIABLE-SPECIAL? GLOBAL)
     (CL:WHEN
      (CL:AND (CL:EQ INITIALVALUETREE NULL)
       (CL:EQ (SPECIAL-IMPLEMENTATION-STYLE)
        KWD-CPP-TRANSLATE-UNBIND-WITH-DESTRUCTORS))
      (CL:SETQ INITIALVALUETREE
       (CPP-TRANSLATE-A-TREE
        (TYPE-TO-WALKED-NULL-VALUE-TREE (TYPE-SPEC-TO-BASE-TYPE TYPE)))))
     (CL:RETURN-FROM CPP-TRANSLATE-DEFINE-GLOBAL-VARIABLE-UNIT
      (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_SPECIAL
       (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_TYPE
        (CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC TYPE) NIL)
       VARIABLENAME
       (CONCATENATE
        (CL:IF (CL:NOT (CL:EQ INITIALVALUETREE NULL))
         (CONS INITIALVALUETREE NIL) NIL)
        NIL))))
    (CL:T
     (CL:RETURN-FROM CPP-TRANSLATE-DEFINE-GLOBAL-VARIABLE-UNIT
      (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_GLOBAL
       (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_TYPE
        (CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC TYPE) NIL)
       VARIABLENAME (CONS INITIALVALUETREE NIL)))))))

;;; (DEFUN (SYMBOL-CASE? BOOLEAN) ...)

(CL:DEFUN SYMBOL-CASE? (KEYFORM)
  (CL:COND
   ((CL:EQ (SAFE-PRIMARY-TYPE KEYFORM) SGT-CPP-TRANSLATE-STELLA-CONS)
    (CL:PROGN
     (CL:RETURN-FROM SYMBOL-CASE?
      (CL:AND
       (CL:EQ (%%VALUE KEYFORM) SYM-CPP-TRANSLATE-STELLA-SYS-SLOT-VALUE)
       (CL:EQ (%%VALUE (%%REST (%%REST KEYFORM)))
        SYM-CPP-TRANSLATE-STELLA-SYMBOL-ID)))))
   (CL:T (CL:RETURN-FROM SYMBOL-CASE? FALSE))))

;;; (DEFUN (CPP-YIELD-SYMBOL-ID-FORM CONS) ...)

(CL:DEFUN CPP-YIELD-SYMBOL-ID-FORM (SYMBOLID)
  (CL:DECLARE (CL:TYPE CL:FIXNUM SYMBOLID))
  (CL:LET* ((SYMBOL (GET-SYM-FROM-OFFSET SYMBOLID)))
   (CL:RETURN-FROM CPP-YIELD-SYMBOL-ID-FORM
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT
     (CPP-TRANSLATE-SYMBOL-ID SYMBOL) NIL))))

;;; (DEFUN (CPP-TRANSLATE-CONDITION CONS) ...)

(CL:DEFUN CPP-TRANSLATE-CONDITION (CONDITION SYMBOLCASEP)
  (CL:LET*
   ((TRANSLATEDACTIONS
     (CONS SYM-CPP-TRANSLATE-STELLA-CPP_STATEMENTS
      (CONCATENATE (CPP-TRANSLATE-LIST-OF-TREES (%%REST CONDITION)) NIL)))
    (KEYS (%%VALUE CONDITION)) (TRANSLATEDKEYS NULL)
    (TRANSLATEDKEYSLIST NIL))
   (CL:IF SYMBOLCASEP
    (CL:IF (CONS? KEYS)
     (CL:PROGN
      (CL:LET* ((KEY NULL) (ITER-000 KEYS) (COLLECT-000 NULL))
       (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
        (CL:PROGN (CL:SETQ KEY (%%VALUE ITER-000))
         (CL:SETQ ITER-000 (%%REST ITER-000)))
        (CL:IF (CL:EQ COLLECT-000 NULL)
         (CL:PROGN
          (CL:SETQ COLLECT-000
           (CONS
            (CPP-YIELD-SYMBOL-ID-FORM
             (%INTEGER-WRAPPER.WRAPPER-VALUE KEY))
            NIL))
          (CL:IF (CL:EQ TRANSLATEDKEYSLIST NIL)
           (CL:SETQ TRANSLATEDKEYSLIST COLLECT-000)
           (ADD-CONS-TO-END-OF-CONS-LIST TRANSLATEDKEYSLIST COLLECT-000)))
         (CL:PROGN
          (CL:SETF (%%REST COLLECT-000)
           (CONS
            (CPP-YIELD-SYMBOL-ID-FORM
             (%INTEGER-WRAPPER.WRAPPER-VALUE KEY))
            NIL))
          (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
      (CL:SETQ TRANSLATEDKEYS TRANSLATEDKEYSLIST))
     (CL:SETQ TRANSLATEDKEYS
      (CPP-YIELD-SYMBOL-ID-FORM (%INTEGER-WRAPPER.WRAPPER-VALUE KEYS))))
    (CL:SETQ TRANSLATEDKEYS
     (CL:IF (CONS? KEYS) (CPP-TRANSLATE-LIST-OF-TREES KEYS)
      (CPP-TRANSLATE-A-TREE KEYS))))
   (CL:RETURN-FROM CPP-TRANSLATE-CONDITION
    (CONS TRANSLATEDKEYS (CONS TRANSLATEDACTIONS NIL)))))

;;; (DEFUN (CPP-TRANSLATE-CASE-TREE CONS) ...)

(CL:DEFUN CPP-TRANSLATE-CASE-TREE (TREE)
  (CL:LET*
   ((OTHERWISECONDITION NULL) (CONDITIONS NIL) (KEYFORM NULL)
    (SYMBOLCASEP FALSE))
   (CL:SETQ SYMBOLCASEP (SYMBOL-CASE? (%%VALUE (%%REST TREE))))
   (CL:SETQ KEYFORM (CPP-TRANSLATE-A-TREE (%%VALUE (%%REST TREE))))
   (CL:LET* ((CONDITION NULL) (ITER-000 (%%REST (%%REST TREE))))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:PROGN (CL:SETQ CONDITION (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (CL:COND
      ((CL:EQ (SAFE-PRIMARY-TYPE CONDITION) SGT-CPP-TRANSLATE-STELLA-CONS)
       (CL:PROGN
        (CL:IF
         (CL:EQ (%%VALUE CONDITION) SYM-CPP-TRANSLATE-STELLA-OTHERWISE)
         (CL:SETQ OTHERWISECONDITION
          (CONS SYM-CPP-TRANSLATE-STELLA-CPP_STATEMENTS
           (CONCATENATE (CPP-TRANSLATE-LIST-OF-TREES (%%REST CONDITION))
            NIL)))
         (CL:SETQ CONDITIONS
          (CONS (CPP-TRANSLATE-CONDITION CONDITION SYMBOLCASEP)
           CONDITIONS)))))
      (CL:T
       (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
        (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
         "`" (SAFE-PRIMARY-TYPE CONDITION) "' is not a valid case option")
        (CL:ERROR
         (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))
   (CL:SETF (%%REST (%%REST TREE)) NIL)
   (CL:RETURN-FROM CPP-TRANSLATE-CASE-TREE
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_CASE KEYFORM
     (CONS OTHERWISECONDITION (CONS (REVERSE CONDITIONS) NIL))))))

;;; (DEFUN (CPP-TRANSLATE-COND-TREE CONS) ...)

(CL:DEFUN CPP-TRANSLATE-COND-TREE (TREE)
  (CL:LET* ((OTHERWISECONDITION NULL) (CONDITIONS NIL))
   (CL:LET* ((CONDITION NULL) (ITER-000 (%%REST TREE)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:PROGN (CL:SETQ CONDITION (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (CL:COND
      ((CL:EQ (SAFE-PRIMARY-TYPE CONDITION) SGT-CPP-TRANSLATE-STELLA-CONS)
       (CL:PROGN
        (CL:IF
         (CL:EQ (%%VALUE CONDITION) SYM-CPP-TRANSLATE-STELLA-OTHERWISE)
         (CL:SETQ OTHERWISECONDITION
          (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_PROGN
           (CONS SYM-CPP-TRANSLATE-STELLA-CPP_STATEMENTS
            (CONCATENATE (CPP-TRANSLATE-LIST-OF-TREES (%%REST CONDITION))
             NIL))
           NIL))
         (CL:SETQ CONDITIONS
          (CONS
           (CONS (CPP-TRANSLATE-A-TREE (%%VALUE CONDITION))
            (CONS
             (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_PROGN
              (CONS SYM-CPP-TRANSLATE-STELLA-CPP_STATEMENTS
               (CONCATENATE
                (CPP-TRANSLATE-LIST-OF-TREES (%%REST CONDITION)) NIL))
              NIL)
             NIL))
           CONDITIONS)))))
      (CL:T
       (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
        (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
         "`" (SAFE-PRIMARY-TYPE CONDITION) "' is not a valid case option")
        (CL:ERROR
         (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))
   (CL:RETURN-FROM CPP-TRANSLATE-COND-TREE
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_COND OTHERWISECONDITION
     (CONS (REVERSE CONDITIONS) NIL)))))

;;; (DEFUN (CPP-TRANSLATE-LOOP CONS) ...)

(CL:DEFUN CPP-TRANSLATE-LOOP (TREE)
  (CL:LET* ((BODY (CPP-TRANSLATE-LIST-OF-TREES (%%REST TREE))))
   (CL:RETURN-FROM CPP-TRANSLATE-LOOP
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_LOOP
     (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_PROGN
      (CONS SYM-CPP-TRANSLATE-STELLA-CPP_STATEMENTS
       (CONCATENATE BODY NIL))
      NIL)
     NIL))))

;;; (DEFUN (CPP-TRANSLATE-WHILE CONS) ...)

(CL:DEFUN CPP-TRANSLATE-WHILE (TREE)
  (CL:LET*
   ((TEST (CPP-TRANSLATE-A-TREE (%%VALUE (%%REST TREE))))
    (BODY (CPP-TRANSLATE-LIST-OF-TREES (%%REST (%%REST TREE)))))
   (CL:SETF (%%REST (%%REST TREE)) NIL)
   (CL:RETURN-FROM CPP-TRANSLATE-WHILE
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_WHILE TEST
     (CONS
      (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_PROGN
       (CONS SYM-CPP-TRANSLATE-STELLA-CPP_STATEMENTS
        (CONCATENATE BODY NIL))
       NIL)
      NIL)))))

;;; (DEFUN (CPP-TRANSLATE-PROGN CONS) ...)

(CL:DEFUN CPP-TRANSLATE-PROGN (TREE)
  (CL:RETURN-FROM CPP-TRANSLATE-PROGN
   (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_PROGN
    (CONS SYM-CPP-TRANSLATE-STELLA-CPP_STATEMENTS
     (CONCATENATE (CPP-TRANSLATE-LIST-OF-TREES (%%REST TREE)) NIL))
    NIL)))

;;; (DEFUN (CPP-TRANSLATE-BREAK CONS) ...)

(CL:DEFUN CPP-TRANSLATE-BREAK (TREE)
  (FIRST-SETTER TREE SYM-CPP-TRANSLATE-STELLA-CPP_BREAK)
  (CL:RETURN-FROM CPP-TRANSLATE-BREAK TREE))

;;; (DEFUN (CPP-TRANSLATE-CONTINUE CONS) ...)

(CL:DEFUN CPP-TRANSLATE-CONTINUE (TREE)
  (FIRST-SETTER TREE SYM-CPP-TRANSLATE-STELLA-CPP_CONTINUE)
  (CL:RETURN-FROM CPP-TRANSLATE-CONTINUE TREE))

;;; (DEFUN (CPP-TRANSLATE-IF-TREE CONS) ...)

(CL:DEFUN CPP-TRANSLATE-IF-TREE (TREE)
  (CL:LET*
   ((TEST (CPP-TRANSLATE-A-TREE (%%VALUE (%%REST TREE))))
    (TRUEBODY (CPP-TRANSLATE-A-TREE (%%VALUE (%%REST (%%REST TREE)))))
    (FALSEBODY (CPP-TRANSLATE-A-TREE (FOURTH TREE))))
   (CL:IF
    (CL:AND (CONS? (%%VALUE TRUEBODY))
     (CL:NOT (CL:EQ (%%REST TRUEBODY) NIL)))
    (CL:SETQ TRUEBODY
     (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_PROGN
      (CONS SYM-CPP-TRANSLATE-STELLA-CPP_STATEMENTS
       (CONCATENATE TRUEBODY NIL))
      NIL))
    (CL:SETQ TRUEBODY
     (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_PROGN
      (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_STATEMENTS TRUEBODY NIL) NIL)))
   (CL:IF
    (CL:AND (CONS? (%%VALUE FALSEBODY))
     (CL:NOT (CL:EQ (%%REST FALSEBODY) NIL)))
    (CL:SETQ FALSEBODY
     (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_PROGN
      (CONS SYM-CPP-TRANSLATE-STELLA-CPP_STATEMENTS
       (CONCATENATE FALSEBODY NIL))
      NIL))
    (CL:SETQ FALSEBODY
     (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_PROGN
      (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_STATEMENTS FALSEBODY NIL) NIL)))
   (CL:RETURN-FROM CPP-TRANSLATE-IF-TREE
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IF TEST
     (CONS TRUEBODY (CONS FALSEBODY NIL))))))

;;; (DEFUN (CPP-TRANSLATE-CHOOSE-TREE CONS) ...)

(CL:DEFUN CPP-TRANSLATE-CHOOSE-TREE (TREE)
  (CL:RETURN-FROM CPP-TRANSLATE-CHOOSE-TREE
   (CPP-TRANSLATE-OPERATOR-CALL
    (CONS (WRAP-STRING "?") (CONS (WRAP-STRING ":") NIL)) (%%REST TREE) 3)))

;;; (DEFUN (CPP-TRANSLATE-WHEN-TREE CONS) ...)

(CL:DEFUN CPP-TRANSLATE-WHEN-TREE (TREE)
  (CL:LET*
   ((TEST (CPP-TRANSLATE-A-TREE (%%VALUE (%%REST TREE))))
    (BODY (CPP-TRANSLATE-LIST-OF-TREES (%%REST (%%REST TREE)))))
   (CL:SETF (%%REST (%%REST TREE)) NIL)
   (CL:RETURN-FROM CPP-TRANSLATE-WHEN-TREE
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_WHEN TEST
     (CONS
      (CONS SYM-CPP-TRANSLATE-STELLA-CPP_STATEMENTS
       (CONCATENATE BODY NIL))
      NIL)))))

;;; (DEFUN (CPP-TRANSLATE-UNLESS-TREE CONS) ...)

(CL:DEFUN CPP-TRANSLATE-UNLESS-TREE (TREE)
  (CL:LET*
   ((TEST (CPP-TRANSLATE-A-TREE (%%VALUE (%%REST TREE))))
    (BODY (CPP-TRANSLATE-LIST-OF-TREES (%%REST (%%REST TREE)))))
   (CL:SETF (%%REST (%%REST TREE)) NIL)
   (CL:RETURN-FROM CPP-TRANSLATE-UNLESS-TREE
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_UNLESS TEST
     (CONS
      (CONS SYM-CPP-TRANSLATE-STELLA-CPP_STATEMENTS
       (CONCATENATE BODY NIL))
      NIL)))))

;;; (DEFUN (CPP-TRANSLATE-FOREACH-TREE CONS) ...)

(CL:DEFUN CPP-TRANSLATE-FOREACH-TREE (TREE)
  (CL:LET*
   ((ITERATORBINDINGS (%%VALUE (%%REST TREE)))
    (CURSORBINDINGS (%%VALUE (%%REST (%%REST TREE))))
    (CONTINUATIONTEST (CPP-TRANSLATE-A-TREE (FOURTH TREE)))
    (BODY (CPP-TRANSLATE-LIST-OF-TREES (NTH-REST TREE 4)))
    (DECLARATION NIL) (DECLARATIONS NIL) (NEXTASSIGNMENTS NIL)
    (VARARGSITERATOR NULL))
   (CL:LET* ((BINDING NULL) (ITER-000 CURSORBINDINGS) (COLLECT-000 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:PROGN (CL:SETQ BINDING (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (CL:SETQ NEXTASSIGNMENTS
      (CONS (CPP-TRANSLATE-A-TREE (%%VALUE (%%REST (%%REST BINDING))))
       NEXTASSIGNMENTS))
     (CL:SETQ DECLARATION
      (CONS
       (CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC (%%VALUE (%%REST BINDING)))
       (CONS (CPP-TRANSLATE-A-TREE (%%VALUE BINDING))
        (CONS
         (CPP-TRANSLATE-A-TREE
          (TYPE-TO-WALKED-NULL-VALUE-TREE
           (TYPE-SPEC-TO-BASE-TYPE (%%VALUE (%%REST BINDING)))))
         NIL))))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN (CL:SETQ COLLECT-000 (CONS DECLARATION NIL))
       (CL:IF (CL:EQ DECLARATIONS NIL) (CL:SETQ DECLARATIONS COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST DECLARATIONS COLLECT-000)))
      (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS DECLARATION NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
   (CL:LET*
    ((BINDING NULL) (ITER-001 ITERATORBINDINGS) (COLLECT-001 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
     (CL:PROGN (CL:SETQ BINDING (%%VALUE ITER-001))
      (CL:SETQ ITER-001 (%%REST ITER-001)))
     (CL:TAGBODY
      (CL:COND
       ((SUB-TYPE-SPEC-OF? (%%VALUE (%%REST BINDING))
         SGT-CPP-TRANSLATE-STELLA-ARGUMENT-LIST-ITERATOR)
        (CL:SETQ VARARGSITERATOR (%%VALUE BINDING))
        (CL:SETQ DECLARATIONS
         (CONCATENATE DECLARATIONS
          (CPP-YIELD-VA-ITERATOR-DECLARATIONS VARARGSITERATOR)))
        (CL:GO :CONTINUE))
       (CL:T
        (CL:SETQ DECLARATION
         (CONS
          (CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC
           (%%VALUE (%%REST BINDING)))
          (CONS (CPP-TRANSLATE-A-TREE (%%VALUE BINDING))
           (CONS
            (CPP-TRANSLATE-A-TREE (%%VALUE (%%REST (%%REST BINDING))))
            NIL))))))
      (CL:IF (CL:EQ COLLECT-001 NULL)
       (CL:PROGN (CL:SETQ COLLECT-001 (CONS DECLARATION NIL))
        (CL:IF (CL:EQ DECLARATIONS NIL) (CL:SETQ DECLARATIONS COLLECT-001)
         (ADD-CONS-TO-END-OF-CONS-LIST DECLARATIONS COLLECT-001)))
       (CL:PROGN (CL:SETF (%%REST COLLECT-001) (CONS DECLARATION NIL))
        (CL:SETQ COLLECT-001 (%%REST COLLECT-001))))
      :CONTINUE)))
   (CL:RETURN-FROM CPP-TRANSLATE-FOREACH-TREE
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_BLOCK DECLARATIONS
     (CONS
      (CONS SYM-CPP-TRANSLATE-STELLA-CPP_STATEMENTS
       (CONCATENATE
        (CL:IF (CL:NOT (CL:EQ VARARGSITERATOR NULL))
         (CPP-YIELD-VA-START-TREE VARARGSITERATOR) NIL)
        (CONS
         (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_FOREACH CONTINUATIONTEST
          (CONS (REVERSE NEXTASSIGNMENTS) (CONS BODY NIL)))
         (CONCATENATE
          (CL:IF (CL:NOT (CL:EQ VARARGSITERATOR NULL))
           (CPP-YIELD-VA-END-TREE VARARGSITERATOR) NIL)
          NIL))))
      NIL)))))

;;; (DEFUN (CPP-YIELD-VA-START-TREE CONS) ...)

(CL:DEFUN CPP-YIELD-VA-START-TREE (ITERATORVAR)
  (CL:RETURN-FROM CPP-YIELD-VA-START-TREE
   (CONS
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_FUNCTION_CALL
     (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT
      (CPP-TRANSLATE-NAME SYM-CPP-TRANSLATE-STELLA-VA_START) NIL)
     (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_ACTUALS
      (CPP-TRANSLATE-A-TREE ITERATORVAR)
      (CONS
       (CPP-TRANSLATE-A-TREE
        (VARIABLE-ARGUMENTS-NAME *METHODBEINGWALKED*))
       NIL))
     NIL)
    NIL)))

;;; (DEFUN (CPP-YIELD-VA-END-TREE CONS) ...)

(CL:DEFUN CPP-YIELD-VA-END-TREE (ITERATORVAR)
  (CL:RETURN-FROM CPP-YIELD-VA-END-TREE
   (CONS
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_FUNCTION_CALL
     (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT
      (CPP-TRANSLATE-NAME SYM-CPP-TRANSLATE-STELLA-VA_END) NIL)
     (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_ACTUALS
      (CPP-TRANSLATE-A-TREE ITERATORVAR) NIL)
     NIL)
    NIL)))

;;; (DEFUN (CPP-YIELD-VA-ITERATOR-HELPER-VARIABLE SYMBOL) ...)

(CL:DEFUN CPP-YIELD-VA-ITERATOR-HELPER-VARIABLE (ITERATORVAR)
  (CL:RETURN-FROM CPP-YIELD-VA-ITERATOR-HELPER-VARIABLE
   (INTERN-SYMBOL
    (CONCATENATE (%SYMBOL.SYMBOL-NAME ITERATORVAR) "-COUNT"))))

;;; (DEFUN (CPP-YIELD-VA-ITERATOR-DECLARATIONS CONS) ...)

(CL:DEFUN CPP-YIELD-VA-ITERATOR-DECLARATIONS (ITERATORVAR)
  (CL:RETURN-FROM CPP-YIELD-VA-ITERATOR-DECLARATIONS
   (LIST*
    (CONS
     (CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC
      SGT-CPP-TRANSLATE-STELLA-ARGUMENT-LIST-ITERATOR)
     (CONS (CPP-TRANSLATE-A-TREE ITERATORVAR) NIL))
    (CONS
     (CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC
      SGT-CPP-TRANSLATE-STELLA-INTEGER)
     (CONS
      (CPP-TRANSLATE-A-TREE
       (CPP-YIELD-VA-ITERATOR-HELPER-VARIABLE ITERATORVAR))
      (CONS
       (CPP-TRANSLATE-A-TREE
        (VARIABLE-ARGUMENTS-NAME *METHODBEINGWALKED*))
       NIL)))
    NIL)))

;;; (DEFUN (CPP-TRANSLATE-ARGUMENT-LIST-TREE CONS) ...)

(CL:DEFUN CPP-TRANSLATE-ARGUMENT-LIST-TREE (OPERATOR OWNER ARGUMENT)
  (CL:SETQ OWNER OWNER)
  (CL:COND
   ((CL:EQ OPERATOR SYM-CPP-TRANSLATE-STELLA-ALLOCATE-ITERATOR)
    (CL:LET* ((*PRINTREADABLY?* TRUE))
     (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*)) (SIGNAL-TRANSLATION-ERROR)
     (CL:WHEN (CL:NOT (SUPPRESS-WARNINGS?))
      (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-ERROR)
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-ERROR) EOL
       " Cannot handle explicit calls to `ARGUMENT-LIST.ALLOCATE-ITERATOR' in C++"
       EOL ".")))
    (CL:RETURN-FROM CPP-TRANSLATE-ARGUMENT-LIST-TREE
     (CPP-TRANSLATE-A-TREE ARGUMENT)))
   ((CL:EQ OPERATOR SYM-CPP-TRANSLATE-STELLA-LENGTH)
    (CL:RETURN-FROM CPP-TRANSLATE-ARGUMENT-LIST-TREE
     (CPP-TRANSLATE-A-TREE
      (VARIABLE-ARGUMENTS-NAME *METHODBEINGWALKED*))))
   ((CL:EQ OPERATOR SYM-CPP-TRANSLATE-STELLA-NEXT?)
    (CL:RETURN-FROM CPP-TRANSLATE-ARGUMENT-LIST-TREE
     (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_BINARY_OP
      (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_UNARY_OP
       (CPP-TRANSLATE-A-TREE
        (CPP-YIELD-VA-ITERATOR-HELPER-VARIABLE ARGUMENT))
       (CONCATENATE
        (CPP-LOOKUP-OPERATOR-TABLE SYM-CPP-TRANSLATE-STELLA---) NIL))
      (CONCATENATE (CPP-LOOKUP-OPERATOR-TABLE SYM-CPP-TRANSLATE-STELLA->)
       (CONS
        (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_LITERAL (WRAP-INTEGER 0) NIL)
        NIL)))))
   ((CL:EQ OPERATOR SYM-CPP-TRANSLATE-STELLA-ARGUMENT)
    (CL:RETURN-FROM CPP-TRANSLATE-ARGUMENT-LIST-TREE
     (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_FUNCTION_CALL
      (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT
       (CPP-TRANSLATE-NAME SYM-CPP-TRANSLATE-STELLA-VA_ARG) NIL)
      (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_ACTUALS
       (CPP-TRANSLATE-A-TREE ARGUMENT)
       (CONS
        (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT
         (CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC
          (VARIABLE-ARGUMENTS-TYPE *METHODBEINGWALKED*))
         NIL)
        NIL))
      NIL)))
   (CL:T
    (CL:LET* ((*PRINTREADABLY?* TRUE))
     (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*)) (SIGNAL-TRANSLATION-ERROR)
     (CL:WHEN (CL:NOT (SUPPRESS-WARNINGS?))
      (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-ERROR)
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-ERROR) EOL
       " Cannot translate call to `" (DE-UGLIFY-PARSE-TREE OPERATOR)
       "' on an `ARGUMENT-LIST'" EOL ".")))
    (CL:RETURN-FROM CPP-TRANSLATE-ARGUMENT-LIST-TREE
     (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_FUNCTION_CALL
      (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT
       (CPP-TRANSLATE-NAME OPERATOR) NIL)
      (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_ACTUALS
       (CPP-TRANSLATE-A-TREE ARGUMENT) NIL)
      NIL)))))

;;; (DEFUN (CPP-TRANSLATE-THE-CODE CONS) ...)

(CL:DEFUN CPP-TRANSLATE-THE-CODE (TREE)
  (CL:LET* ((OTREE NULL))
   (CL:LET* ((TEST-VALUE-000 (%%VALUE (%%REST TREE))))
    (CL:COND
     ((CL:EQ TEST-VALUE-000 KWD-CPP-TRANSLATE-FUNCTION)
      (CL:SETQ OTREE
       (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_CAST
        (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_FUNCTION_POINTER
         (CPP-TRANSLATE-FUNCTION-NAME-FROM-NAME
          (%%VALUE (%%REST (%%REST TREE))))
         NIL)
        (WRAP-STRING "cpp_function_code") NIL)))
     ((CL:EQ TEST-VALUE-000 KWD-CPP-TRANSLATE-METHOD)
      (CL:SETQ OTREE
       (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_CAST
        (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_METHOD_POINTER
         (CPP-TRANSLATE-METHOD-NAME-FROM-NAME (FOURTH TREE)
          (%%VALUE (%%REST (%%REST TREE))))
         NIL)
        (WRAP-STRING "cpp_method_code") NIL)))
     (CL:T
      (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
        "`" TEST-VALUE-000 "' is not a valid case option")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
   (CL:RETURN-FROM CPP-TRANSLATE-THE-CODE OTREE)))

;;; (DEFUN (CPP-TRANSLATE-SYS-POINTER-TO-FUNCTION CONS) ...)

(CL:DEFUN CPP-TRANSLATE-SYS-POINTER-TO-FUNCTION (TREE)
  (CL:LET*
   ((FUNCTIONNAME
     (%STRING-WRAPPER.WRAPPER-VALUE
      (CPP-TRANSLATE-NAME (%%VALUE (%%REST TREE)))))
    (OTREE NULL))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING FUNCTIONNAME))
   (CL:WHEN
    (CL:EQ (%%VALUE (%%REST (%%REST TREE))) SYM-CPP-TRANSLATE-STELLA-TRUE)
    (CL:SETQ FUNCTIONNAME (CONCATENATE FUNCTIONNAME "_setter")))
   (CL:SETQ OTREE
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_FUNCTION_POINTER
     (WRAP-STRING FUNCTIONNAME) NIL))
   (CL:RETURN-FROM CPP-TRANSLATE-SYS-POINTER-TO-FUNCTION OTREE)))

;;; (DEFUN (CPP-TRANSLATE-SYS-NEW CONS) ...)

(CL:DEFUN CPP-TRANSLATE-SYS-NEW (TREE)
  (CL:LET* ((TYPESPEC (%%VALUE (%%REST TREE))))
   (CL:IF (ARRAY-TYPE-SPECIFIER? TYPESPEC)
    (CL:RETURN-FROM CPP-TRANSLATE-SYS-NEW (CPP-TRANSLATE-NEW-ARRAY TREE))
    (CL:RETURN-FROM CPP-TRANSLATE-SYS-NEW
     (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_FUNCTION_CALL
      (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT
       (CPP-TRANSLATE-NAME
        (YIELD-CONSTRUCTOR-NAME (TYPE-SPEC-TO-CLASS TYPESPEC)))
       NIL)
      (CPP-TRANSLATE-ACTUAL-PARAMETERS (%%REST (%%REST TREE))) NIL)))))

;;; (DEFUN (CPP-TRANSLATE-NEW-ARRAY CONS) ...)

(CL:DEFUN CPP-TRANSLATE-NEW-ARRAY (TREE)
  (CL:LET*
   ((ARRAYTYPE (%%VALUE (%%REST TREE)))
    (INITIALELEMENT (%%VALUE (%%REST (%%REST TREE))))
    (DIMENSIONS
     (CPP-TRANSLATE-LIST-OF-TREES (%%REST (%%REST (%%REST TREE)))))
    (ELEMENTTYPE
     (EXTRACT-PARAMETER-TYPE ARRAYTYPE
      SYM-CPP-TRANSLATE-STELLA-ANY-VALUE)))
   (CL:RETURN-FROM CPP-TRANSLATE-NEW-ARRAY
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_FUNCTION_CALL
     (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT
      (CL:IF (CPP-USE-GARBAGE-COLLECTOR?) (WRAP-STRING "new (GC)")
       (WRAP-STRING "new"))
      NIL)
     (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_ACTUALS
      (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_ARRAY_REFERENCE
       (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT
        (CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC ELEMENTTYPE) NIL)
       (CONCATENATE DIMENSIONS NIL))
      NIL)
     NIL))))

;;; (DEFUN (CPP-TRANSLATE-VOID-SYS CONS) ...)

(CL:DEFUN CPP-TRANSLATE-VOID-SYS (TREE)
  (CL:RETURN-FROM CPP-TRANSLATE-VOID-SYS
   (CPP-TRANSLATE-A-TREE (%%VALUE (%%REST TREE)))))

;;; (DEFUN (CPP-TRANSLATE-TYPED-SYS CONS) ...)

(CL:DEFUN CPP-TRANSLATE-TYPED-SYS (TREE)
  (CL:RETURN-FROM CPP-TRANSLATE-TYPED-SYS
   (CPP-TRANSLATE-A-TREE (%%VALUE (%%REST TREE)))))

;;; (DEFUN (CPP-TRANSLATE-BAD-SYS OBJECT) ...)

(CL:DEFUN CPP-TRANSLATE-BAD-SYS (TREE)
  (CL:LET* ((RETURNTYPE (%%VALUE (%%REST (%%REST TREE)))))
   (CL:IF (CL:EQ RETURNTYPE SGT-CPP-TRANSLATE-STELLA-VOID)
    (CL:RETURN-FROM CPP-TRANSLATE-BAD-SYS
     (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_FUNCTION_CALL
      (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT
       (WRAP-STRING "illegal_stella_statement_flagged_by_the_translator")
       NIL)
      NIL))
    (CL:RETURN-FROM CPP-TRANSLATE-BAD-SYS
     (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT
      (WRAP-STRING "illegal_stella_expression_flagged_by_the_translator")
      NIL)))))

;;; (DEFUN (CPP-TRANSLATE-SYS-REFERENCED-SLOT-VALUE CONS) ...)

(CL:DEFUN CPP-TRANSLATE-SYS-REFERENCED-SLOT-VALUE (TREE)
  (CL:LET*
   ((OBJECTREF (FOURTH TREE)) (SLOTNAME (%%VALUE (%%REST (%%REST TREE)))))
   (CL:RETURN-FROM CPP-TRANSLATE-SYS-REFERENCED-SLOT-VALUE
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_REFERENCED_SLOT_VALUE
     (CPP-TRANSLATE-A-TREE OBJECTREF)
     (CONS (CPP-TRANSLATE-NAME SLOTNAME) NIL)))))

;;; (DEFUN (CPP-TRANSLATE-SYS-SLOT-VALUE CONS) ...)

(CL:DEFUN CPP-TRANSLATE-SYS-SLOT-VALUE (TREE)
  (CL:LET*
   ((OBJECTTYPE (%%VALUE (%%REST TREE))) (OBJECTREF (FOURTH TREE))
    (SLOTNAME
     (TRUE-SLOT-NAME (%%VALUE (%%REST (%%REST TREE))) OBJECTTYPE)))
   (CL:RETURN-FROM CPP-TRANSLATE-SYS-SLOT-VALUE
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_SLOT_VALUE
     (CPP-TRANSLATE-A-TREE OBJECTREF)
     (CONS (CPP-TRANSLATE-NAME SLOTNAME) NIL)))))

;;; (DEFUN (CPP-TRANSLATE-SYS-SLOT-VALUE-SETTER CONS) ...)

(CL:DEFUN CPP-TRANSLATE-SYS-SLOT-VALUE-SETTER (TREE)
  (CL:LET*
   ((OBJECTREF (FOURTH TREE)) (OBJECTTYPE (%%VALUE (%%REST TREE)))
    (SLOTNAME
     (TRUE-SLOT-NAME (%%VALUE (%%REST (%%REST TREE))) OBJECTTYPE))
    (VALUEREF (CPP-TRANSLATE-A-TREE (FIFTH TREE)))
    (OTREE
     (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_SLOT_VALUE_SETTER
      (CPP-TRANSLATE-A-TREE OBJECTREF)
      (CONS (CPP-TRANSLATE-NAME SLOTNAME) (CONS VALUEREF NIL)))))
   (THIRD-SETTER TREE NULL) (FOURTH-SETTER TREE NULL)
   (FIFTH-SETTER TREE NULL)
   (CL:RETURN-FROM CPP-TRANSLATE-SYS-SLOT-VALUE-SETTER OTREE)))

;;; (DEFUN (CPP-TRANSLATE-MAKE-TREE CONS) ...)

(CL:DEFUN CPP-TRANSLATE-MAKE-TREE (TREE)
  (CL:LET*
   ((CLASS (LOOKUP-CLASS (%%VALUE (%%REST TREE))))
    (CLASSNAME
     (CL:IF
      (CL:NOT
       (CL:EQ
        (%STRING-WRAPPER.WRAPPER-VALUE
         (DYNAMIC-SLOT-VALUE (%CLASS.DYNAMIC-SLOTS CLASS)
          SYM-CPP-TRANSLATE-STELLA-CLASS-CPP-NATIVE-TYPE
          NULL-STRING-WRAPPER))
        STELLA::NULL-STRING))
      (WRAP-STRING
       (%STRING-WRAPPER.WRAPPER-VALUE
        (DYNAMIC-SLOT-VALUE (%CLASS.DYNAMIC-SLOTS CLASS)
         SYM-CPP-TRANSLATE-STELLA-CLASS-CPP-NATIVE-TYPE
         NULL-STRING-WRAPPER)))
      (CPP-TRANSLATE-CLASS-NAME (%%VALUE (%%REST TREE)))))
    (OTREE
     (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_MAKE
      (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT CLASSNAME NIL) NIL)))
   (CL:RETURN-FROM CPP-TRANSLATE-MAKE-TREE OTREE)))

;;; (DEFUN (CPP-TRANSLATE-STARTUP-TIME-PROGN CONS) ...)

(CL:DEFUN CPP-TRANSLATE-STARTUP-TIME-PROGN (TREE)
  (CL:LET* ((OTREE (CPP-TRANSLATE-A-TREE (%%VALUE (%%REST TREE)))))
   (CL:SETF (%%REST TREE) NIL)
   (CL:RETURN-FROM CPP-TRANSLATE-STARTUP-TIME-PROGN
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_STARTUP_TIME_PROGN OTREE NIL))))

;;; (DEFUN (CPP-STREAM-IS-STANDARD-OUTPUT? BOOLEAN) ...)

(CL:DEFUN CPP-STREAM-IS-STANDARD-OUTPUT? (TREE)
  (CL:COND
   ((CL:EQ (SAFE-PRIMARY-TYPE TREE) SGT-CPP-TRANSLATE-STELLA-CONS)
    (CL:PROGN
     (CL:RETURN-FROM CPP-STREAM-IS-STANDARD-OUTPUT?
      (EQUAL-CONS-TREES? TREE
       (GET-QUOTED-TREE
        "((SYS-SLOT-VALUE @OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT) \"/STELLA\")"
        "/STELLA")))))
   (CL:T (CL:RETURN-FROM CPP-STREAM-IS-STANDARD-OUTPUT? FALSE))))

;;; (DEFUN (CPP-TRANSLATE-PRINT-STREAM CONS) ...)

(CL:DEFUN CPP-TRANSLATE-PRINT-STREAM (TREE)
  (FIRST-SETTER TREE SYM-CPP-TRANSLATE-STELLA-CPP_PRINT_STREAM)
  (CL:COND
   ((SUBTYPE-OF-KEYWORD? (SAFE-PRIMARY-TYPE (%%VALUE (%%REST TREE))))
    (CL:LET* ((TEST-VALUE-000 (%%VALUE (%%REST TREE))))
     (CL:COND
      ((CL:OR (CL:EQ TEST-VALUE-000 KWD-CPP-TRANSLATE-WARN)
        (CL:EQ TEST-VALUE-000 KWD-CPP-TRANSLATE-ERROR)
        (CL:EQ TEST-VALUE-000 KWD-CPP-TRANSLATE-CONTINUABLE-ERROR))
       (SECOND-SETTER TREE SYM-CPP-TRANSLATE-STELLA-CPP_STANDARD_ERROR))
      (CL:T
       (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
        (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
         "`" TEST-VALUE-000 "' is not a valid case option")
        (CL:ERROR
         (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))
   (CL:T
    (CL:IF (CPP-STREAM-IS-STANDARD-OUTPUT? (%%VALUE (%%REST TREE)))
     (SECOND-SETTER TREE SYM-CPP-TRANSLATE-STELLA-CPP_STANDARD_OUT)
     (SECOND-SETTER TREE (CPP-TRANSLATE-A-TREE (%%VALUE (%%REST TREE)))))))
  (SUBSTITUTE-CONS-TREE (%%REST (%%REST TREE))
   SYM-CPP-TRANSLATE-STELLA-ENDL SYM-CPP-TRANSLATE-STELLA-EOL)
  (CPP-TRANSLATE-LIST-OF-TREES (%%REST (%%REST TREE)))
  (CL:RETURN-FROM CPP-TRANSLATE-PRINT-STREAM TREE))

;;; (DEFUN (CPP-TRANSLATE-SETQ-TREE CONS) ...)

(CL:DEFUN CPP-TRANSLATE-SETQ-TREE (TREE)
  (CL:LET* ((GLOBAL (LOOKUP-GLOBAL-VARIABLE (%%VALUE (%%REST TREE)))))
   (CL:IF
    (CL:AND (CL:NOT (CL:EQ GLOBAL NULL))
     (%GLOBAL-VARIABLE.VARIABLE-SPECIAL? GLOBAL)
     (CL:EQ (SPECIAL-IMPLEMENTATION-STYLE)
      KWD-CPP-TRANSLATE-UNBIND-WITH-DESTRUCTORS))
    (CL:RETURN-FROM CPP-TRANSLATE-SETQ-TREE
     (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_REFERENCED_METHOD_CALL
      SYM-CPP-TRANSLATE-STELLA-NULL
      (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT
       (CPP-TRANSLATE-NAME SYM-CPP-TRANSLATE-STELLA-SET) NIL)
      (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT
       (CPP-TRANSLATE-GLOBAL-NAME (%%VALUE (%%REST TREE))) NIL)
      (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_ACTUALS
       (CPP-TRANSLATE-A-TREE (%%VALUE (%%REST (%%REST TREE)))) NIL)
      NIL))
    (CL:RETURN-FROM CPP-TRANSLATE-SETQ-TREE
     (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_ASSIGN
      (CPP-TRANSLATE-A-TREE (%%VALUE (%%REST TREE)))
      (CONS (CPP-TRANSLATE-A-TREE (%%VALUE (%%REST (%%REST TREE))))
       NIL))))))

;;; (DEFUN (CPP-TRANSLATE-NULL CONS) ...)

(CL:DEFUN CPP-TRANSLATE-NULL ()
  (CL:RETURN-FROM CPP-TRANSLATE-NULL
   (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT (WRAP-STRING "NULL") NIL)))

;;; (DEFMETHOD (CPP-TRANSLATE-ATOMIC-TREE CONS) ...)

(%%DEFCONSMETHOD CPP-TRANSLATE-ATOMIC-TREE ((TREE OBJECT))
  (CL:RETURN-FROM CPP-TRANSLATE-ATOMIC-TREE
   (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_LITERAL TREE NIL)))

;;; (DEFMETHOD (CPP-TRANSLATE-ATOMIC-TREE CONS) ...)

(CL:DEFMETHOD CPP-TRANSLATE-ATOMIC-TREE ((TREE KEYWORD))
  (CL:IF (USE-HARDCODED-SYMBOLS?)
   (CL:RETURN-FROM CPP-TRANSLATE-ATOMIC-TREE
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_SYMBOL TREE NIL))
   (CL:RETURN-FROM CPP-TRANSLATE-ATOMIC-TREE
    (CPP-TRANSLATE-ATOMIC-TREE (YIELD-SYMBOL-CONSTANT-NAME TREE)))))

;;; (DEFMETHOD (CPP-TRANSLATE-ATOMIC-TREE CONS) ...)

(CL:DEFMETHOD CPP-TRANSLATE-ATOMIC-TREE ((TREE SURROGATE))
  (CL:IF (USE-HARDCODED-SYMBOLS?)
   (CL:RETURN-FROM CPP-TRANSLATE-ATOMIC-TREE
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_SYMBOL TREE NIL))
   (CL:RETURN-FROM CPP-TRANSLATE-ATOMIC-TREE
    (CPP-TRANSLATE-ATOMIC-TREE (YIELD-SYMBOL-CONSTANT-NAME TREE)))))

;;; (DEFMETHOD (CPP-TRANSLATE-ATOMIC-TREE CONS) ...)

(CL:DEFMETHOD CPP-TRANSLATE-ATOMIC-TREE ((TREE SYMBOL))
  (CL:LET* ((GLOBALVAR (LOOKUP-GLOBAL-VARIABLE (SOFT-PERMANENTIFY TREE))))
   (CL:COND
    ((CL:NOT (CL:EQ GLOBALVAR NULL))
     (CL:LET*
      ((OTREE
        (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT
         (CPP-TRANSLATE-GLOBAL-NAME TREE) NIL)))
      (CL:WHEN
       (CL:AND (%GLOBAL-VARIABLE.VARIABLE-SPECIAL? GLOBALVAR)
        (CL:EQ (SPECIAL-IMPLEMENTATION-STYLE)
         KWD-CPP-TRANSLATE-UNBIND-WITH-DESTRUCTORS))
       (CL:SETQ OTREE
        (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_REFERENCED_METHOD_CALL
         SYM-CPP-TRANSLATE-STELLA-NULL
         (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT
          (CPP-TRANSLATE-NAME SYM-CPP-TRANSLATE-STELLA-GET) NIL)
         OTREE
         (CONS (CONS SYM-CPP-TRANSLATE-STELLA-CPP_ACTUALS NIL) NIL))))
      (CL:RETURN-FROM CPP-TRANSLATE-ATOMIC-TREE OTREE)))
    (CL:T
     (CL:RETURN-FROM CPP-TRANSLATE-ATOMIC-TREE
      (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT (CPP-TRANSLATE-NAME TREE)
       NIL))))))

;;; (DEFMETHOD (CPP-TRANSLATE-ATOMIC-TREE CONS) ...)

(CL:DEFMETHOD CPP-TRANSLATE-ATOMIC-TREE ((TREE QUOTED-EXPRESSION))
  (CL:RETURN-FROM CPP-TRANSLATE-ATOMIC-TREE
   (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_LITERAL TREE NIL)))

;;; (DEFUN (CPP-TRANSLATE-LET-TREE CONS) ...)

(CL:DEFUN CPP-TRANSLATE-LET-TREE (TREE)
  (CL:LET* ((ODECLARATIONS NIL))
   (CL:LET* ((DECLARATION NULL) (ITER-000 (%%VALUE (%%REST TREE))))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:PROGN (CL:SETQ DECLARATION (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (CL:LET* ((D DECLARATION))
      (CL:SETQ ODECLARATIONS
       (CONS
        (CONS
         (CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC (%%VALUE (%%REST D)))
         (CONS (CPP-TRANSLATE-A-TREE (%%VALUE D))
          (CONS (CPP-TRANSLATE-A-TREE (%%VALUE (%%REST (%%REST D))))
           NIL)))
        ODECLARATIONS)))))
   (CL:RETURN-FROM CPP-TRANSLATE-LET-TREE
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_BLOCK (REVERSE ODECLARATIONS)
     (CONS
      (CONS SYM-CPP-TRANSLATE-STELLA-CPP_STATEMENTS
       (CONCATENATE (CPP-TRANSLATE-LIST-OF-TREES (%%REST (%%REST TREE)))
        NIL))
      NIL)))))

;;; (DEFUN (SYMBOLIZE SYMBOL) ...)

(CL:DEFUN SYMBOLIZE (SURROGATE)
  (CL:RETURN-FROM SYMBOLIZE (TYPE-TO-SYMBOL SURROGATE)))

;;; (DEFUN (CPP-TRANSLATE-TYPE-SPEC STRING-WRAPPER) ...)

(CL:DEFUN CPP-TRANSLATE-TYPE-SPEC (TYPESPEC)
  (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE TYPESPEC)))
   (CL:COND
    ((SUBTYPE-OF-PARAMETRIC-TYPE-SPECIFIER? TEST-VALUE-000)
     (CL:PROGN
      (CL:WHEN (ARRAY-TYPE-SPECIFIER? TYPESPEC)
       (CL:RETURN-FROM CPP-TRANSLATE-TYPE-SPEC
        (CPP-TRANSLATE-ARRAY-TYPE TYPESPEC)))
      (CL:COND
       ((CL:EQ *TRANSLATOROUTPUTLANGUAGE*
         KWD-CPP-TRANSLATE-CPP-STANDALONE)
        (CL:RETURN-FROM CPP-TRANSLATE-TYPE-SPEC
         (WRAP-STRING
          (CONCATENATE
           (%STRING-WRAPPER.WRAPPER-VALUE
            (CPP-TRANSLATE-TYPE-SPEC
             (%PARAMETRIC-TYPE-SPECIFIER.SPECIFIER-BASE-TYPE TYPESPEC)))
           "<"
           (%STRING-WRAPPER.WRAPPER-VALUE
            (CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC
             (FIRST
              (%PARAMETRIC-TYPE-SPECIFIER.SPECIFIER-PARAMETER-TYPES
               TYPESPEC))))
           ">"))))
       ((CL:EQ *TRANSLATOROUTPUTLANGUAGE* KWD-CPP-TRANSLATE-CPP)
        (CL:RETURN-FROM CPP-TRANSLATE-TYPE-SPEC
         (CPP-TRANSLATE-TYPE-SPEC
          (%PARAMETRIC-TYPE-SPECIFIER.SPECIFIER-BASE-TYPE TYPESPEC))))
       (CL:T
        (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
         (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
          "`" *TRANSLATOROUTPUTLANGUAGE* "' is not a valid case option")
         (CL:ERROR
          (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))
    ((SUBTYPE-OF-SURROGATE? TEST-VALUE-000)
     (CL:PROGN
      (CL:COND
       ((CL:NOT
         (CL:EQ
          (%STRING-WRAPPER.WRAPPER-VALUE
           (DYNAMIC-SLOT-VALUE
            (%CLASS.DYNAMIC-SLOTS (%SURROGATE.SURROGATE-VALUE TYPESPEC))
            SYM-CPP-TRANSLATE-STELLA-CLASS-CPP-NATIVE-TYPE
            NULL-STRING-WRAPPER))
          STELLA::NULL-STRING))
        (CL:RETURN-FROM CPP-TRANSLATE-TYPE-SPEC
         (WRAP-STRING
          (%STRING-WRAPPER.WRAPPER-VALUE
           (DYNAMIC-SLOT-VALUE
            (%CLASS.DYNAMIC-SLOTS (%SURROGATE.SURROGATE-VALUE TYPESPEC))
            SYM-CPP-TRANSLATE-STELLA-CLASS-CPP-NATIVE-TYPE
            NULL-STRING-WRAPPER)))))
       (CL:T
        (CL:RETURN-FROM CPP-TRANSLATE-TYPE-SPEC
         (CPP-TRANSLATE-CLASS-TYPENAME
          (SYMBOLIZE
           (%CLASS.CLASS-TYPE
            (%SURROGATE.SURROGATE-VALUE TYPESPEC)))))))))
    (CL:T
     (CL:LET* ((STREAM-001 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-001) "`"
       TEST-VALUE-000 "' is not a valid case option")
      (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-001))))))))

;;; (DEFUN (CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC STRING-WRAPPER) ...)

(CL:DEFUN CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC (TYPESPEC)
  (CL:LET*
   ((BASETYPE (TYPE-SPEC-TO-BASE-TYPE TYPESPEC))
    (TRANSLATEDTYPE (CPP-TRANSLATE-TYPE-SPEC TYPESPEC)))
   (CL:WHEN (CREATE-NATIVE-CLASS? (%SURROGATE.SURROGATE-VALUE BASETYPE))
    (CL:SETF (%STRING-WRAPPER.WRAPPER-VALUE TRANSLATEDTYPE)
     (CONCATENATE (%STRING-WRAPPER.WRAPPER-VALUE TRANSLATEDTYPE) "*")))
   (CL:RETURN-FROM CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC TRANSLATEDTYPE)))

;;; (DEFUN (CPP-TRANSLATE-AND-REFERENCIZE-TYPE-SPEC STRING-WRAPPER) ...)

(CL:DEFUN CPP-TRANSLATE-AND-REFERENCIZE-TYPE-SPEC (TYPESPEC)
  (CL:LET*
   ((BASETYPE (TYPE-SPEC-TO-BASE-TYPE TYPESPEC))
    (TRANSLATEDTYPE (CPP-TRANSLATE-TYPE-SPEC TYPESPEC)))
   (CL:SETF (%STRING-WRAPPER.WRAPPER-VALUE TRANSLATEDTYPE)
    (CL:IF (CPP-TRANSLATED-ARRAY-TYPE? TRANSLATEDTYPE)
     (CPP-GENERATE-ARRAY-TYPED-ENTITY "&"
      (%STRING-WRAPPER.WRAPPER-VALUE TRANSLATEDTYPE))
     (CONCATENATE (%STRING-WRAPPER.WRAPPER-VALUE TRANSLATEDTYPE)
      (CL:IF (CREATE-NATIVE-CLASS? (%SURROGATE.SURROGATE-VALUE BASETYPE))
       "*&" "&"))))
   (CL:RETURN-FROM CPP-TRANSLATE-AND-REFERENCIZE-TYPE-SPEC TRANSLATEDTYPE)))

;;; (DEFUN (CPP-TRANSLATE-ARRAY-TYPE STRING-WRAPPER) ...)

(CL:DEFUN CPP-TRANSLATE-ARRAY-TYPE (ARRAYTYPE)
  (CL:LET*
   ((DIMENSIONS (ARRAY-TYPE-DIMENSIONS ARRAYTYPE))
    (ELEMENTTYPE
     (EXTRACT-PARAMETER-TYPE ARRAYTYPE
      SYM-CPP-TRANSLATE-STELLA-ANY-VALUE))
    (TRANSLATEDTYPE "") (TEMP STELLA::NULL-STRING))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TRANSLATEDTYPE TEMP))
   (CL:WHEN (CL:= (LENGTH DIMENSIONS) 1)
    (CL:RETURN-FROM CPP-TRANSLATE-ARRAY-TYPE
     (WRAP-STRING
      (CONCATENATE
       (%STRING-WRAPPER.WRAPPER-VALUE
        (CPP-TRANSLATE-TYPE-SPEC ELEMENTTYPE))
       "*"))))
   (CL:LET*
    ((I NULL-INTEGER) (DIM NULL)
     (ITER-000 (%LIST.THE-CONS-LIST DIMENSIONS)) (ITER-001 0))
    (CL:DECLARE (CL:TYPE CL:FIXNUM ITER-001 I))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:PROGN (CL:SETQ DIM (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (CL:PROGN (CL:SETQ I ITER-001) (CL:SETQ ITER-001 (CL:1+ ITER-001)))
     (CL:COND ((CL:= I 0) (CL:SETQ TEMP "(*)"))
      ((CL:EQ DIM NULL) (CL:SETQ TEMP "[]"))
      (CL:T (CL:SETQ TEMP (CONCATENATE "[" (STRINGIFY DIM) "]"))))
     (CL:SETQ TRANSLATEDTYPE (CONCATENATE TRANSLATEDTYPE TEMP))))
   (CL:WHEN (ARRAY-TYPE-SPECIFIER? ELEMENTTYPE)
    (CL:LET* ((*PRINTREADABLY?* TRUE))
     (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*)) (SIGNAL-TRANSLATION-ERROR)
     (CL:WHEN (CL:NOT (SUPPRESS-WARNINGS?))
      (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-ERROR)
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-ERROR) EOL
       " Can't yet handle nested arrays in C++: `"
       (DE-UGLIFY-PARSE-TREE ARRAYTYPE) "'" EOL ".")))
    (CL:SETQ ELEMENTTYPE SGT-CPP-TRANSLATE-STELLA-UNKNOWN))
   (CL:SETQ TEMP
    (%STRING-WRAPPER.WRAPPER-VALUE
     (CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC ELEMENTTYPE)))
   (CL:SETQ TRANSLATEDTYPE (CONCATENATE TEMP " " TRANSLATEDTYPE))
   (CL:RETURN-FROM CPP-TRANSLATE-ARRAY-TYPE (WRAP-STRING TRANSLATEDTYPE))))

;;; (DEFUN (CPP-TRANSLATED-ARRAY-TYPE? BOOLEAN) ...)

(CL:DEFUN CPP-TRANSLATED-ARRAY-TYPE? (TRANSLATEDTYPE)
  (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE TRANSLATEDTYPE)))
   (CL:COND
    ((CL:EQ TEST-VALUE-000 SGT-CPP-TRANSLATE-STELLA-CONS)
     (CL:PROGN
      (CL:RETURN-FROM CPP-TRANSLATED-ARRAY-TYPE?
       (CPP-TRANSLATED-ARRAY-TYPE? (LAST TRANSLATEDTYPE)))))
    ((SUBTYPE-OF-STRING? TEST-VALUE-000)
     (CL:PROGN
      (CL:LET*
       ((TRANSTYPE (%STRING-WRAPPER.WRAPPER-VALUE TRANSLATEDTYPE)))
       (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TRANSTYPE))
       (CL:RETURN-FROM CPP-TRANSLATED-ARRAY-TYPE?
        (CL:AND
         (CL:EQL
          (CL:LET
           ((SELF TRANSTYPE)
            (POSITION (CL:1- (CL:THE CL:FIXNUM (CL:LENGTH TRANSTYPE)))))
           (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
            (CL:TYPE CL:FIXNUM POSITION))
           (CL:AREF (CL:THE CL:SIMPLE-STRING SELF)
            (CL:THE CL:FIXNUM POSITION)))
          #\])
         (CL:OR (DEFINED? (STRING-SEARCH TRANSTYPE "(*)" 0))
          (DEFINED? (STRING-SEARCH TRANSTYPE "(*&)" 0))))))))
    (CL:T)))
  (CL:RETURN-FROM CPP-TRANSLATED-ARRAY-TYPE? FALSE))

;;; (DEFUN (CPP-GENERATE-ARRAY-TYPED-ENTITY STRING) ...)

(CL:DEFUN CPP-GENERATE-ARRAY-TYPED-ENTITY (ENTITY TRANSLATEDARRAYTYPE)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING ENTITY TRANSLATEDARRAYTYPE))
  (CL:LET*
   ((REFERENCETYPE?
     (DEFINED? (STRING-SEARCH TRANSLATEDARRAYTYPE "(*&)" 0))))
   (CL:IF REFERENCETYPE?
    (CL:RETURN-FROM CPP-GENERATE-ARRAY-TYPED-ENTITY
     (REPLACE-SUBSTRINGS TRANSLATEDARRAYTYPE
      (CONCATENATE "(*&" ENTITY ")") "(*&)"))
    (CL:RETURN-FROM CPP-GENERATE-ARRAY-TYPED-ENTITY
     (REPLACE-SUBSTRINGS TRANSLATEDARRAYTYPE (CONCATENATE "(*" ENTITY ")")
      "(*)")))))

;;; (DEFUN (CPP-CREATE-CHARACTER-SUBSTITUTION-TABLE STRING) ...)

(CL:DEFUN CPP-CREATE-CHARACTER-SUBSTITUTION-TABLE ()
  (CL:LET*
   ((TABLE
     (CL:THE CL:SIMPLE-STRING (CL:MAKE-STRING 256 :INITIAL-ELEMENT #\_))))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TABLE))
   (CL:LET*
    ((CODE NULL-INTEGER) (ITER-000 (CL:THE CL:FIXNUM (CL:CHAR-CODE #\0)))
     (UPPER-BOUND-000 (CL:THE CL:FIXNUM (CL:CHAR-CODE #\9)))
     (UNBOUNDED?-000 (NULL? UPPER-BOUND-000)))
    (CL:DECLARE (CL:TYPE CL:FIXNUM ITER-000 UPPER-BOUND-000 CODE))
    (CL:LOOP WHILE (CL:OR UNBOUNDED?-000 (CL:<= ITER-000 UPPER-BOUND-000))
     DO
     (CL:PROGN (CL:SETQ CODE ITER-000)
      (CL:SETQ ITER-000 (CL:1+ ITER-000)))
     (CL:LET ((SELF TABLE) (CH #\=) (POSITION CODE))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (SETF
       (CL:AREF (CL:THE CL:SIMPLE-STRING SELF)
        (CL:THE CL:FIXNUM POSITION))
       (CL:THE CL:CHARACTER CH)))))
   (CL:LET*
    ((CODE NULL-INTEGER) (ITER-001 (CL:THE CL:FIXNUM (CL:CHAR-CODE #\A)))
     (UPPER-BOUND-001 (CL:THE CL:FIXNUM (CL:CHAR-CODE #\Z)))
     (UNBOUNDED?-001 (NULL? UPPER-BOUND-001)))
    (CL:DECLARE (CL:TYPE CL:FIXNUM ITER-001 UPPER-BOUND-001 CODE))
    (CL:LOOP WHILE (CL:OR UNBOUNDED?-001 (CL:<= ITER-001 UPPER-BOUND-001))
     DO
     (CL:PROGN (CL:SETQ CODE ITER-001)
      (CL:SETQ ITER-001 (CL:1+ ITER-001)))
     (CL:LET ((SELF TABLE) (CH #\=) (POSITION CODE))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (SETF
       (CL:AREF (CL:THE CL:SIMPLE-STRING SELF)
        (CL:THE CL:FIXNUM POSITION))
       (CL:THE CL:CHARACTER CH)))))
   (CL:LET*
    ((CODE NULL-INTEGER) (ITER-002 (CL:THE CL:FIXNUM (CL:CHAR-CODE #\a)))
     (UPPER-BOUND-002 (CL:THE CL:FIXNUM (CL:CHAR-CODE #\z)))
     (UNBOUNDED?-002 (NULL? UPPER-BOUND-002)))
    (CL:DECLARE (CL:TYPE CL:FIXNUM ITER-002 UPPER-BOUND-002 CODE))
    (CL:LOOP WHILE (CL:OR UNBOUNDED?-002 (CL:<= ITER-002 UPPER-BOUND-002))
     DO
     (CL:PROGN (CL:SETQ CODE ITER-002)
      (CL:SETQ ITER-002 (CL:1+ ITER-002)))
     (CL:LET ((SELF TABLE) (CH #\=) (POSITION CODE))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (SETF
       (CL:AREF (CL:THE CL:SIMPLE-STRING SELF)
        (CL:THE CL:FIXNUM POSITION))
       (CL:THE CL:CHARACTER CH)))))
   (CL:LET
    ((SELF TABLE) (CH #\=)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\_))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\ ))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\X)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\!))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\"))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\H)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\#))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\B)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\$))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\R)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\%))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\A)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\&))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\Q)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\'))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\())))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\)))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\O)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\*))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\I)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\+))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\,))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\-))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\D)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\.))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\S)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\/))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\C)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\:))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\;))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\L)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\<))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\E)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\=))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\G)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\>))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\P)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\?))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\M)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\@))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\J)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\[))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\\))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\K)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\]))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\U)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\^))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\`))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\Y)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\{))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\V)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\|))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\Z)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\}))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\T)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\~))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:RETURN-FROM CPP-CREATE-CHARACTER-SUBSTITUTION-TABLE
    (CL:LET ((S TABLE)) (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING S))
     (CL:THE CL:SIMPLE-STRING S)))))

;;; (DEFGLOBAL *CPP-CHARACTER-SUBSTITUTION-TABLE* ...)

(CL:PROGN (CL:DEFVAR *CPP-CHARACTER-SUBSTITUTION-TABLE* STELLA::NULL-STRING) (CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING *CPP-CHARACTER-SUBSTITUTION-TABLE*)))

;;; (DEFUN (REPLACE-FIRST-CHARACTER-WITH-STRING STRING) ...)

(CL:DEFUN REPLACE-FIRST-CHARACTER-WITH-STRING (STRING NEWPREFIX)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING STRING NEWPREFIX))
  (CL:RETURN-FROM REPLACE-FIRST-CHARACTER-WITH-STRING
   (STRING-CONCATENATE NEWPREFIX (SUBSEQUENCE STRING 1 NULL-INTEGER))))

;;; (DEFUN (CPP-SUBSTITUTE-FORBIDDEN-CHARACTERS STRING) ...)

(CL:DEFUN CPP-SUBSTITUTE-FORBIDDEN-CHARACTERS (NAME CASECONVENTION)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING NAME))
  (CL:LET* ((RESULT STELLA::NULL-STRING) (SUBSTITUTION NULL-CHARACTER))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING RESULT))
   (CL:CASE
    (CL:LET ((SELF NAME) (POSITION 0))
     (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
      (CL:TYPE CL:FIXNUM POSITION))
     (CL:AREF (CL:THE CL:SIMPLE-STRING SELF) (CL:THE CL:FIXNUM POSITION)))
    (#\0
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "zero"))))))
    (#\1
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "one"))))))
    (#\2
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "two"))))))
    (#\3
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "three"))))))
    (#\4
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "four"))))))
    (#\5
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "five"))))))
    (#\6
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "six"))))))
    (#\7
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "seven"))))))
    (#\8
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "eight"))))))
    (#\9
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "nine"))))))
    (CL:OTHERWISE
     (CL:SETQ RESULT (CL:THE CL:SIMPLE-STRING (CL:COPY-SEQ NAME)))))
   (CL:LET*
    ((I NULL-INTEGER) (ITER-000 0)
     (UPPER-BOUND-000 (CL:1- (CL:THE CL:FIXNUM (CL:LENGTH RESULT)))))
    (CL:DECLARE (CL:TYPE CL:FIXNUM ITER-000 UPPER-BOUND-000 I))
    (CL:LOOP WHILE (CL:<= ITER-000 UPPER-BOUND-000) DO
     (CL:PROGN (CL:SETQ I ITER-000) (CL:SETQ ITER-000 (CL:1+ ITER-000)))
     (CL:SETQ SUBSTITUTION
      (CL:LET
       ((SELF *CPP-CHARACTER-SUBSTITUTION-TABLE*)
        (POSITION
         (CL:THE CL:FIXNUM
          (CL:CHAR-CODE
           (CL:LET ((SELF RESULT) (POSITION I))
            (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
             (CL:TYPE CL:FIXNUM POSITION))
            (CL:AREF (CL:THE CL:SIMPLE-STRING SELF)
             (CL:THE CL:FIXNUM POSITION)))))))
       (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
        (CL:TYPE CL:FIXNUM POSITION))
       (CL:AREF (CL:THE CL:SIMPLE-STRING SELF)
        (CL:THE CL:FIXNUM POSITION))))
     (CL:WHEN (CL:NOT (CL:EQL SUBSTITUTION #\=))
      (CL:COND
       ((CL:EQ CASECONVENTION KWD-CPP-TRANSLATE-UPPERCASE)
        (CL:LET
         ((SELF RESULT)
          (CH
           (CL:LET
            ((SELF *CHARACTER-DOWNCASE-TABLE*)
             (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE SUBSTITUTION))))
            (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
             (CL:TYPE CL:FIXNUM POSITION))
            (CL:AREF (CL:THE CL:SIMPLE-STRING SELF)
             (CL:THE CL:FIXNUM POSITION))))
          (POSITION I))
         (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
          (CL:TYPE CL:FIXNUM POSITION))
         (SETF
          (CL:AREF (CL:THE CL:SIMPLE-STRING SELF)
           (CL:THE CL:FIXNUM POSITION))
          (CL:THE CL:CHARACTER CH))))
       ((CL:EQ CASECONVENTION KWD-CPP-TRANSLATE-LOWERCASE)
        (CL:LET
         ((SELF RESULT)
          (CH
           (CL:LET
            ((SELF *CHARACTER-UPCASE-TABLE*)
             (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE SUBSTITUTION))))
            (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
             (CL:TYPE CL:FIXNUM POSITION))
            (CL:AREF (CL:THE CL:SIMPLE-STRING SELF)
             (CL:THE CL:FIXNUM POSITION))))
          (POSITION I))
         (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
          (CL:TYPE CL:FIXNUM POSITION))
         (SETF
          (CL:AREF (CL:THE CL:SIMPLE-STRING SELF)
           (CL:THE CL:FIXNUM POSITION))
          (CL:THE CL:CHARACTER CH))))
       ((CL:EQ CASECONVENTION KWD-CPP-TRANSLATE-CAPITALIZED)
        (CL:LET
         ((SELF RESULT)
          (CH
           (CL:LET
            ((SELF *CHARACTER-UPCASE-TABLE*)
             (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE SUBSTITUTION))))
            (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
             (CL:TYPE CL:FIXNUM POSITION))
            (CL:AREF (CL:THE CL:SIMPLE-STRING SELF)
             (CL:THE CL:FIXNUM POSITION))))
          (POSITION I))
         (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
          (CL:TYPE CL:FIXNUM POSITION))
         (SETF
          (CL:AREF (CL:THE CL:SIMPLE-STRING SELF)
           (CL:THE CL:FIXNUM POSITION))
          (CL:THE CL:CHARACTER CH))))
       (CL:T
        (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
         (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
          "`" CASECONVENTION "' is not a valid case option")
         (CL:ERROR
          (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))))
   (CL:RETURN-FROM CPP-SUBSTITUTE-FORBIDDEN-CHARACTERS
    (CL:LET ((S RESULT)) (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING S))
     (CL:THE CL:SIMPLE-STRING S)))))

;;; (DEFUN (CPP-CHANGE-CASE STRING) ...)

(CL:DEFUN CPP-CHANGE-CASE (SYMBOL CASECONVENTION)
  (CL:LET*
   ((MODULE (%GENERALIZED-SYMBOL.HOME-CONTEXT SYMBOL))
    (NAME (%GENERALIZED-SYMBOL.SYMBOL-NAME SYMBOL)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING NAME))
   (CL:WHEN (CL:EQ MODULE NULL) (CL:SETQ MODULE *MODULE*))
   (CL:WHEN (%MODULE.CASE-SENSITIVE? MODULE)
    (CL:RETURN-FROM CPP-CHANGE-CASE (COPY NAME)))
   (CL:COND
    ((CL:EQ CASECONVENTION KWD-CPP-TRANSLATE-UPPERCASE)
     (CL:RETURN-FROM CPP-CHANGE-CASE (STRING-UPCASE NAME)))
    ((CL:EQ CASECONVENTION KWD-CPP-TRANSLATE-LOWERCASE)
     (CL:RETURN-FROM CPP-CHANGE-CASE (STRING-DOWNCASE NAME)))
    ((CL:EQ CASECONVENTION KWD-CPP-TRANSLATE-CAPITALIZED)
     (CL:RETURN-FROM CPP-CHANGE-CASE (STRING-CAPITALIZE NAME)))
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
       CASECONVENTION "' is not a valid case option")
      (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))

;;; (DEFUN (CPP-YIELD-NAMESPACE-PREFIX STRING) ...)

(CL:DEFUN CPP-YIELD-NAMESPACE-PREFIX (SYMBOL)
  (CL:LET* ((SYMBOLMODULE (%SYMBOL.HOME-CONTEXT SYMBOL)))
   (CL:WHEN (CL:EQ SYMBOLMODULE NULL) (CL:SETQ SYMBOLMODULE *MODULE*))
   (CL:LET*
    ((PACKAGEPREFIX (CPP-PACKAGE SYMBOLMODULE))
     (PACKAGEPREFIXINHERITED?
      (CL:EQ
       (%STRING-WRAPPER.WRAPPER-VALUE
        (DYNAMIC-SLOT-VALUE (%MODULE.DYNAMIC-SLOTS SYMBOLMODULE)
         SYM-CPP-TRANSLATE-STELLA-MODULE-CPP-PACKAGE NULL-STRING-WRAPPER))
       STELLA::NULL-STRING))
     (RELATIVEMODULEPATH
      (CL:IF PACKAGEPREFIXINHERITED?
       (%MODULE.MODULE-FULL-NAME SYMBOLMODULE) "")))
    (CL:DECLARE
     (CL:TYPE CL:SIMPLE-STRING PACKAGEPREFIX RELATIVEMODULEPATH))
    (CL:COND
     ((STRING-EQL? PACKAGEPREFIX "stella")
      (CL:IF PACKAGEPREFIXINHERITED?
       (CL:RETURN-FROM CPP-YIELD-NAMESPACE-PREFIX RELATIVEMODULEPATH)
       (CL:RETURN-FROM CPP-YIELD-NAMESPACE-PREFIX "")))
     (CL:T
      (CL:IF PACKAGEPREFIXINHERITED?
       (CL:RETURN-FROM CPP-YIELD-NAMESPACE-PREFIX
        (CONCATENATE PACKAGEPREFIX "_" RELATIVEMODULEPATH))
       (CL:RETURN-FROM CPP-YIELD-NAMESPACE-PREFIX PACKAGEPREFIX)))))))

;;; (DEFUN (CPP-TRANSLATE-NAME STRING-WRAPPER) ...)

(CL:DEFUN CPP-TRANSLATE-NAME (NAMESYMBOL)
  (CL:LET* ((RESERVEDNAME (CPP-LOOKUP-RESERVED-WORD-TABLE NAMESYMBOL)))
   (CL:WHEN (CL:EQ NAMESYMBOL NULL)
    (CL:RETURN-FROM CPP-TRANSLATE-NAME (WRAP-STRING "NULL")))
   (CL:WHEN (CL:NOT (CL:EQ RESERVEDNAME NULL))
    (CL:RETURN-FROM CPP-TRANSLATE-NAME RESERVEDNAME))
   (CL:RETURN-FROM CPP-TRANSLATE-NAME
    (WRAP-STRING
     (CPP-SUBSTITUTE-FORBIDDEN-CHARACTERS
      (CPP-CHANGE-CASE NAMESYMBOL KWD-CPP-TRANSLATE-LOWERCASE)
      KWD-CPP-TRANSLATE-LOWERCASE)))))

;;; (DEFUN (CPP-TRANSLATE-GLOBAL-NAME STRING-WRAPPER) ...)

(CL:DEFUN CPP-TRANSLATE-GLOBAL-NAME (NAMESYMBOL)
  (CL:WHEN (CL:EQ NAMESYMBOL NULL)
   (CL:RETURN-FROM CPP-TRANSLATE-GLOBAL-NAME (WRAP-STRING "NULL")))
  (CL:LET*
   ((PREFIX (CPP-YIELD-NAMESPACE-PREFIX NAMESYMBOL))
    (NAME (CPP-CHANGE-CASE NAMESYMBOL KWD-CPP-TRANSLATE-UPPERCASE)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING PREFIX NAME))
   (CL:WHEN (CL:NOT (STRING-EQL? PREFIX ""))
    (CL:SETQ NAME (CONCATENATE PREFIX "_" NAME)))
   (CL:RETURN-FROM CPP-TRANSLATE-GLOBAL-NAME
    (WRAP-STRING
     (CPP-SUBSTITUTE-FORBIDDEN-CHARACTERS NAME
      KWD-CPP-TRANSLATE-UPPERCASE)))))

;;; (DEFUN (CPP-TRANSLATE-CLASS-PARAMETER-NAME STRING-WRAPPER) ...)

(CL:DEFUN CPP-TRANSLATE-CLASS-PARAMETER-NAME (NAMESYMBOL)
  (CL:RETURN-FROM CPP-TRANSLATE-CLASS-PARAMETER-NAME
   (WRAP-STRING
    (CPP-SUBSTITUTE-FORBIDDEN-CHARACTERS
     (CPP-CHANGE-CASE NAMESYMBOL KWD-CPP-TRANSLATE-UPPERCASE)
     KWD-CPP-TRANSLATE-UPPERCASE))))

;;; (DEFUN (CPP-TRANSLATE-RETURN-PARAMETER-NAME STRING-WRAPPER) ...)

(CL:DEFUN CPP-TRANSLATE-RETURN-PARAMETER-NAME (NAMESYMBOL PARAMETERNUMBER)
  (CL:DECLARE (CL:TYPE CL:FIXNUM PARAMETERNUMBER))
  (CL:LET*
   ((RETURNSYMBOL
     (INTERN-SYMBOL
      (CONCATENATE (%SYMBOL.SYMBOL-NAME NAMESYMBOL)
       (INTEGER-TO-STRING PARAMETERNUMBER))))
    (TRANSLATEDNAME (CPP-TRANSLATE-NAME RETURNSYMBOL)))
   (CL:RETURN-FROM CPP-TRANSLATE-RETURN-PARAMETER-NAME TRANSLATEDNAME)))

;;; (DEFUN (CPP-TRANSLATE-SYMBOL-CONSTANT-NAME STRING-WRAPPER) ...)

(CL:DEFUN CPP-TRANSLATE-SYMBOL-CONSTANT-NAME (SYMBOL)
  (CL:LET* ((PREFIX STELLA::NULL-STRING))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING PREFIX))
   (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE SYMBOL)))
    (CL:COND
     ((SUBTYPE-OF-SYMBOL? TEST-VALUE-000)
      (CL:PROGN
       (CL:SETQ PREFIX
        (CONCATENATE "SYM_"
         (CONTEXT-NAME (%SYMBOL.HOME-CONTEXT SYMBOL))))))
     ((SUBTYPE-OF-SURROGATE? TEST-VALUE-000)
      (CL:PROGN
       (CL:SETQ PREFIX
        (CONCATENATE "SGT_"
         (CONTEXT-NAME (%SURROGATE.HOME-CONTEXT SYMBOL))))))
     ((SUBTYPE-OF-KEYWORD? TEST-VALUE-000)
      (CL:PROGN (CL:SETQ PREFIX "KWD")))
     (CL:T
      (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
        "`" TEST-VALUE-000 "' is not a valid case option")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
   (CL:RETURN-FROM CPP-TRANSLATE-SYMBOL-CONSTANT-NAME
    (WRAP-STRING
     (CPP-SUBSTITUTE-FORBIDDEN-CHARACTERS
      (CONCATENATE PREFIX
       (CONCATENATE "_" (%GENERALIZED-SYMBOL.SYMBOL-NAME SYMBOL)))
      KWD-CPP-TRANSLATE-UPPERCASE)))))

;;; (DEFUN (CPP-TRANSLATE-SYMBOL-CONSTANT-ID STRING-WRAPPER) ...)

(CL:DEFUN CPP-TRANSLATE-SYMBOL-CONSTANT-ID (SYMBOL)
  (CL:LET*
   ((TRANSLATEDSYMBOL (CPP-TRANSLATE-SYMBOL-CONSTANT-NAME SYMBOL)))
   (CL:SETF (%STRING-WRAPPER.WRAPPER-VALUE TRANSLATEDSYMBOL)
    (CONCATENATE (%STRING-WRAPPER.WRAPPER-VALUE TRANSLATEDSYMBOL) "_id"))
   (CL:RETURN-FROM CPP-TRANSLATE-SYMBOL-CONSTANT-ID TRANSLATEDSYMBOL)))

;;; (DEFUN (CPP-TRANSLATE-SYMBOL-NAME STRING-WRAPPER) ...)

(CL:DEFUN CPP-TRANSLATE-SYMBOL-NAME (SYMBOL)
  (CL:RETURN-FROM CPP-TRANSLATE-SYMBOL-NAME
   (CPP-TRANSLATE-SYMBOL-CONSTANT-NAME SYMBOL)))

;;; (DEFUN (CPP-TRANSLATE-SYMBOL-ID STRING-WRAPPER) ...)

(CL:DEFUN CPP-TRANSLATE-SYMBOL-ID (SYMBOL)
  (CL:RETURN-FROM CPP-TRANSLATE-SYMBOL-ID
   (CPP-TRANSLATE-SYMBOL-CONSTANT-ID SYMBOL)))

;;; (DEFUN (CPP-TRANSLATE-SURROGATE-NAME STRING-WRAPPER) ...)

(CL:DEFUN CPP-TRANSLATE-SURROGATE-NAME (SURROGATE)
  (CL:RETURN-FROM CPP-TRANSLATE-SURROGATE-NAME
   (CPP-TRANSLATE-SYMBOL-CONSTANT-NAME SURROGATE)))

;;; (DEFUN (CPP-TRANSLATE-SURROGATE-ID STRING-WRAPPER) ...)

(CL:DEFUN CPP-TRANSLATE-SURROGATE-ID (SURROGATE)
  (CL:RETURN-FROM CPP-TRANSLATE-SURROGATE-ID
   (CPP-TRANSLATE-SYMBOL-CONSTANT-ID SURROGATE)))

;;; (DEFUN (CPP-TRANSLATE-KEYWORD-NAME STRING-WRAPPER) ...)

(CL:DEFUN CPP-TRANSLATE-KEYWORD-NAME (KEYWORD)
  (CL:RETURN-FROM CPP-TRANSLATE-KEYWORD-NAME
   (CPP-TRANSLATE-SYMBOL-CONSTANT-NAME KEYWORD)))

;;; (DEFUN (CPP-TRANSLATE-KEYWORD-ID STRING-WRAPPER) ...)

(CL:DEFUN CPP-TRANSLATE-KEYWORD-ID (KEYWORD)
  (CL:RETURN-FROM CPP-TRANSLATE-KEYWORD-ID
   (CPP-TRANSLATE-SYMBOL-CONSTANT-ID KEYWORD)))

;;; (DEFUN (CPP-TRANSLATE-CLASS-TYPENAME STRING-WRAPPER) ...)

(CL:DEFUN CPP-TRANSLATE-CLASS-TYPENAME (NAMESYMBOL)
  (CL:RETURN-FROM CPP-TRANSLATE-CLASS-TYPENAME
   (WRAP-STRING
    (CPP-SUBSTITUTE-FORBIDDEN-CHARACTERS
     (CPP-CHANGE-CASE
      (%CLASS.CLASS-TYPE
       (%SURROGATE.SURROGATE-VALUE (SURROGATIFY NAMESYMBOL)))
      KWD-CPP-TRANSLATE-CAPITALIZED)
     KWD-CPP-TRANSLATE-CAPITALIZED))))

;;; (DEFUN (CPP-TRANSLATE-CLASS-NAME STRING-WRAPPER) ...)

(CL:DEFUN CPP-TRANSLATE-CLASS-NAME (NAMESYMBOL)
  (CL:RETURN-FROM CPP-TRANSLATE-CLASS-NAME
   (CPP-TRANSLATE-TYPE-SPEC (SURROGATIFY NAMESYMBOL))))

;;; (DEFUN (CPP-REFERENCE-TYPE? BOOLEAN) ...)

(CL:DEFUN CPP-REFERENCE-TYPE? (TYPESPEC)
  (CL:RETURN-FROM CPP-REFERENCE-TYPE? FALSE))

;;; (DEFUN (CPP-REFERENCIZE-TYPE STRING-WRAPPER) ...)

(CL:DEFUN CPP-REFERENCIZE-TYPE (TYPESPEC)
  (CL:RETURN-FROM CPP-REFERENCIZE-TYPE
   (WRAP-STRING
    (SUBSTITUTE
     (%STRING-WRAPPER.WRAPPER-VALUE (CPP-TRANSLATE-TYPE-SPEC TYPESPEC))
     #\& #\*))))

;;; (DEFUN (CPP-TRANSLATE-FUNCTION-PARAMETER OBJECT) ...)

(CL:DEFUN CPP-TRANSLATE-FUNCTION-PARAMETER (NAME TYPE METHOD)
  (CL:SETQ TYPE
   (COMPUTE-RELATIVE-TYPE-SPEC TYPE (%METHOD-SLOT.SLOT-OWNER METHOD)))
  (CL:WHEN
   (CL:AND
    (%BOOLEAN-WRAPPER.WRAPPER-VALUE
     (DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS METHOD)
      SYM-CPP-TRANSLATE-STELLA-METHOD-VARIABLE-ARGUMENTS? FALSE-WRAPPER))
    (CL:EQ (VARIABLE-ARGUMENTS-NAME METHOD) NAME)
    (PASS-VARIABLE-ARGUMENTS-AS-LIST? METHOD))
   (CL:SETQ TYPE (YIELD-LISTIFIED-VARIABLE-ARGUMENTS-TYPE METHOD)))
  (CL:RETURN-FROM CPP-TRANSLATE-FUNCTION-PARAMETER
   (CONS
    (CL:IF (CPP-REFERENCE-TYPE? TYPE) (CPP-REFERENCIZE-TYPE TYPE)
     (CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC TYPE))
    (CONS (CPP-TRANSLATE-NAME NAME) NIL))))

;;; (DEFUN (CPP-TRANSLATE-RETURN-PARAMETER CONS) ...)

(CL:DEFUN CPP-TRANSLATE-RETURN-PARAMETER (PARAMETERNUMBER PARAMETERTYPE)
  (CL:DECLARE (CL:TYPE CL:FIXNUM PARAMETERNUMBER))
  (CL:RETURN-FROM CPP-TRANSLATE-RETURN-PARAMETER
   (CONS (CPP-TRANSLATE-AND-REFERENCIZE-TYPE-SPEC PARAMETERTYPE)
    (CONS
     (CPP-TRANSLATE-RETURN-PARAMETER-NAME SYM-CPP-TRANSLATE-STELLA-_RETURN
      PARAMETERNUMBER)
     NIL))))

;;; (DEFUN (CPP-TRANSLATE-FUNCTION-PARAMETERS CONS) ...)

(CL:DEFUN CPP-TRANSLATE-FUNCTION-PARAMETERS (METHOD)
  (CL:LET*
   ((SKIPFIRSTPARAMETER? (CL:NOT (CPP-METHOD-OBJECT-IS-FUNCTION? METHOD)))
    (VARIABLEARGUMENTS?
     (CL:AND
      (%BOOLEAN-WRAPPER.WRAPPER-VALUE
       (DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS METHOD)
        SYM-CPP-TRANSLATE-STELLA-METHOD-VARIABLE-ARGUMENTS?
        FALSE-WRAPPER))
      (CL:NOT (PASS-VARIABLE-ARGUMENTS-AS-LIST? METHOD))))
    (TRANSLATEDPARAMETERS NIL))
   (CL:LET*
    ((I NULL-INTEGER) (PTYPE NULL) (PNAME NULL)
     (ITER-000 (%LIST.THE-CONS-LIST (METHOD-PARAMETER-NAMES METHOD)))
     (ITER-001
      (%LIST.THE-CONS-LIST (METHOD-PARAMETER-TYPE-SPECIFIERS METHOD)))
     (ITER-002 1) (COLLECT-000 NULL))
    (CL:DECLARE (CL:TYPE CL:FIXNUM ITER-002 I))
    (CL:LOOP WHILE
     (CL:AND (CL:NOT (CL:EQ ITER-000 NIL)) (CL:NOT (CL:EQ ITER-001 NIL)))
     DO
     (CL:PROGN (CL:SETQ PNAME (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (CL:PROGN (CL:SETQ PTYPE (%%VALUE ITER-001))
      (CL:SETQ ITER-001 (%%REST ITER-001)))
     (CL:PROGN (CL:SETQ I ITER-002) (CL:SETQ ITER-002 (CL:1+ ITER-002)))
     (CL:WHEN
      (CL:AND (CL:OR (CL:NOT SKIPFIRSTPARAMETER?) (CL:> I 1))
       (CL:OR (CL:NOT VARIABLEARGUMENTS?)
        (CL:NOT (CL:EQ PNAME (VARIABLE-ARGUMENTS-NAME METHOD)))))
      (CL:IF (CL:EQ COLLECT-000 NULL)
       (CL:PROGN
        (CL:SETQ COLLECT-000
         (CONS (CPP-TRANSLATE-FUNCTION-PARAMETER PNAME PTYPE METHOD) NIL))
        (CL:IF (CL:EQ TRANSLATEDPARAMETERS NIL)
         (CL:SETQ TRANSLATEDPARAMETERS COLLECT-000)
         (ADD-CONS-TO-END-OF-CONS-LIST TRANSLATEDPARAMETERS COLLECT-000)))
       (CL:PROGN
        (CL:SETF (%%REST COLLECT-000)
         (CONS (CPP-TRANSLATE-FUNCTION-PARAMETER PNAME PTYPE METHOD) NIL))
        (CL:SETQ COLLECT-000 (%%REST COLLECT-000)))))))
   (CL:LET*
    ((RTYPEINDEX NULL-INTEGER) (RTYPE NULL)
     (ITER-003 (REST (METHOD-RETURN-TYPE-SPECIFIERS METHOD))) (ITER-004 1)
     (COLLECT-001 NULL))
    (CL:DECLARE (CL:TYPE CL:FIXNUM ITER-004 RTYPEINDEX))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-003 NIL)) DO
     (CL:PROGN (CL:SETQ RTYPE (%%VALUE ITER-003))
      (CL:SETQ ITER-003 (%%REST ITER-003)))
     (CL:PROGN (CL:SETQ RTYPEINDEX ITER-004)
      (CL:SETQ ITER-004 (CL:1+ ITER-004)))
     (CL:IF (CL:EQ COLLECT-001 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-001
        (CONS (CPP-TRANSLATE-RETURN-PARAMETER RTYPEINDEX RTYPE) NIL))
       (CL:IF (CL:EQ TRANSLATEDPARAMETERS NIL)
        (CL:SETQ TRANSLATEDPARAMETERS COLLECT-001)
        (ADD-CONS-TO-END-OF-CONS-LIST TRANSLATEDPARAMETERS COLLECT-001)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-001)
        (CONS (CPP-TRANSLATE-RETURN-PARAMETER RTYPEINDEX RTYPE) NIL))
       (CL:SETQ COLLECT-001 (%%REST COLLECT-001))))))
   (CL:RETURN-FROM CPP-TRANSLATE-FUNCTION-PARAMETERS
    (CONCATENATE TRANSLATEDPARAMETERS
     (CONCATENATE
      (CL:IF VARIABLEARGUMENTS?
       (CONS
        (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_VAR_ARGS
         (CPP-TRANSLATE-NAME (VARIABLE-ARGUMENTS-NAME METHOD)) NIL)
        NIL)
       NIL)
      NIL)))))

;;; (DEFUN (SLOT-READER-FROM-NAME? BOOLEAN) ...)

(CL:DEFUN SLOT-READER-FROM-NAME? (METHODNAME METHODOWNER)
  (CL:LET*
   ((OWNERCLASS (%SURROGATE.SURROGATE-VALUE METHODOWNER))
    (SLOT (SAFE-LOOKUP-SLOT OWNERCLASS METHODNAME)))
   (CL:RETURN-FROM SLOT-READER-FROM-NAME?
    (CL:AND (CL:NOT (CL:EQ SLOT NULL))
     (ISA? SLOT SGT-CPP-TRANSLATE-STELLA-STORAGE-SLOT)))))

;;; (DEFUN (SLOT-READER? BOOLEAN) ...)

(CL:DEFUN SLOT-READER? (METHOD)
  (CL:LET* ((LOOKEDUPSLOT NULL))
   (CL:WHEN (CL:NOT (%METHOD-SLOT.METHOD-FUNCTION? METHOD))
    (CL:SETQ LOOKEDUPSLOT
     (SAFE-LOOKUP-SLOT
      (%SURROGATE.SURROGATE-VALUE (%METHOD-SLOT.SLOT-OWNER METHOD))
      (%METHOD-SLOT.SLOT-NAME METHOD))))
   (CL:RETURN-FROM SLOT-READER?
    (CL:AND (CL:NOT (CL:EQ LOOKEDUPSLOT NULL))
     (ISA? LOOKEDUPSLOT SGT-CPP-TRANSLATE-STELLA-STORAGE-SLOT)))))

;;; (DEFUN (CPP-TRANSLATE-CONSTRUCTOR-NAME STRING-WRAPPER) ...)

(CL:DEFUN CPP-TRANSLATE-CONSTRUCTOR-NAME (CONSTRUCTOR)
  (CL:RETURN-FROM CPP-TRANSLATE-CONSTRUCTOR-NAME
   (CPP-TRANSLATE-CLASS-NAME (%METHOD-SLOT.SLOT-NAME CONSTRUCTOR))))

;;; (DEFUN (CPP-TRANSLATE-FUNCTION-NAME-FROM-NAME STRING-WRAPPER) ...)

(CL:DEFUN CPP-TRANSLATE-FUNCTION-NAME-FROM-NAME (FUNCTIONNAME)
  (CL:LET* ((FUNCTION (LOOKUP-FUNCTION FUNCTIONNAME)))
   (CL:IF (CL:NOT (CL:EQ FUNCTION NULL))
    (CL:RETURN-FROM CPP-TRANSLATE-FUNCTION-NAME-FROM-NAME
     (CPP-TRANSLATE-FUNCTION-NAME FUNCTION))
    (CL:RETURN-FROM CPP-TRANSLATE-FUNCTION-NAME-FROM-NAME
     (CPP-TRANSLATE-NAME FUNCTIONNAME)))))

;;; (DEFUN (CPP-TRANSLATE-FUNCTION-NAME STRING-WRAPPER) ...)

(CL:DEFUN CPP-TRANSLATE-FUNCTION-NAME (FUNCTION)
  (CL:LET*
   ((FUNCTIONNAME
     (YIELD-RENAMED-NAME-IF-NATIVE (%METHOD-SLOT.SLOT-NAME FUNCTION)
      KWD-CPP-TRANSLATE-CPP KWD-CPP-TRANSLATE-FUNCTION))
    (TRANSLATEDNAME STELLA::NULL-STRING))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TRANSLATEDNAME))
   (CL:WHEN (CPP-METHOD-OBJECT-IS-OVERLOADED-FUNCTION? FUNCTION)
    (CL:SETQ FUNCTIONNAME
     (CPP-CREATE-OVERLOADED-FUNCTION-NAME FUNCTIONNAME
      (%METHOD-SLOT.SLOT-OWNER FUNCTION))))
   (CL:SETQ TRANSLATEDNAME
    (%STRING-WRAPPER.WRAPPER-VALUE (CPP-TRANSLATE-NAME FUNCTIONNAME)))
   (CL:WHEN (%METHOD-SLOT.METHOD-SETTER? FUNCTION)
    (CL:SETQ TRANSLATEDNAME (CONCATENATE TRANSLATEDNAME "_setter")))
   (CL:WHEN (SLOT-READER? FUNCTION)
    (CL:SETQ TRANSLATEDNAME (CONCATENATE TRANSLATEDNAME "_reader")))
   (CL:RETURN-FROM CPP-TRANSLATE-FUNCTION-NAME
    (WRAP-STRING TRANSLATEDNAME))))

;;; (DEFUN (CPP-TRANSLATE-METHOD-NAME-FROM-NAME STRING-WRAPPER) ...)

(CL:DEFUN CPP-TRANSLATE-METHOD-NAME-FROM-NAME (METHODNAME METHODOWNER)
  (CL:LET*
   ((TRANSLATEDNAME
     (%STRING-WRAPPER.WRAPPER-VALUE
      (CPP-TRANSLATE-NAME
       (YIELD-RENAMED-NAME-IF-NATIVE METHODNAME KWD-CPP-TRANSLATE-CPP
        KWD-CPP-TRANSLATE-FUNCTION)))))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TRANSLATEDNAME))
   (CL:WHEN (SLOT-READER-FROM-NAME? METHODNAME METHODOWNER)
    (CL:SETQ TRANSLATEDNAME (CONCATENATE TRANSLATEDNAME "_reader")))
   (CL:SETQ TRANSLATEDNAME
    (CONCATENATE
     (CONCATENATE
      (%STRING-WRAPPER.WRAPPER-VALUE
       (CPP-TRANSLATE-CLASS-NAME METHODOWNER))
      "::")
     TRANSLATEDNAME))
   (CL:RETURN-FROM CPP-TRANSLATE-METHOD-NAME-FROM-NAME
    (WRAP-STRING TRANSLATEDNAME))))

;;; (DEFUN (CPP-TRANSLATE-METHOD-NAME STRING-WRAPPER) ...)

(CL:DEFUN CPP-TRANSLATE-METHOD-NAME (METHOD)
  (CL:LET*
   ((METHODTYPE (%METHOD-SLOT.SLOT-OWNER METHOD))
    (TRANSLATEDNAME STELLA::NULL-STRING))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TRANSLATEDNAME))
   (CL:SETQ TRANSLATEDNAME
    (%STRING-WRAPPER.WRAPPER-VALUE (CPP-TRANSLATE-FUNCTION-NAME METHOD)))
   (CL:WHEN (CL:NOT (CPP-METHOD-OBJECT-IS-FUNCTION? METHOD))
    (CL:SETQ TRANSLATEDNAME
     (CONCATENATE
      (CONCATENATE
       (%STRING-WRAPPER.WRAPPER-VALUE
        (CPP-TRANSLATE-CLASS-NAME (SYMBOLIZE METHODTYPE)))
       "::")
      TRANSLATEDNAME)))
   (CL:RETURN-FROM CPP-TRANSLATE-METHOD-NAME (WRAP-STRING TRANSLATEDNAME))))

;;; (DEFUN (DELETE-QUOTED-NULL-STATEMENTS CONS) ...)

(CL:DEFUN DELETE-QUOTED-NULL-STATEMENTS (TREES)
  (CL:RETURN-FROM DELETE-QUOTED-NULL-STATEMENTS
   (REMOVE TREES SYM-CPP-TRANSLATE-STELLA-NULL)))

;;; (DEFUN (CPP-METHOD-OBJECT-IS-FUNCTION? BOOLEAN) ...)

(CL:DEFUN CPP-METHOD-OBJECT-IS-FUNCTION? (METHOD)
  (CL:RETURN-FROM CPP-METHOD-OBJECT-IS-FUNCTION?
   (CL:OR (%METHOD-SLOT.METHOD-FUNCTION? METHOD)
    (CPP-METHOD-OBJECT-IS-OVERLOADED-FUNCTION? METHOD))))

;;; (DEFUN (CPP-METHOD-OBJECT-IS-OVERLOADED-FUNCTION? BOOLEAN) ...)

(CL:DEFUN CPP-METHOD-OBJECT-IS-OVERLOADED-FUNCTION? (METHOD)
  (CL:RETURN-FROM CPP-METHOD-OBJECT-IS-OVERLOADED-FUNCTION?
   (CL:AND (CL:NOT (%METHOD-SLOT.METHOD-FUNCTION? METHOD))
    (CL:NOT
     (CL:EQ
      (%STRING-WRAPPER.WRAPPER-VALUE
       (DYNAMIC-SLOT-VALUE
        (%CLASS.DYNAMIC-SLOTS
         (%SURROGATE.SURROGATE-VALUE (%METHOD-SLOT.SLOT-OWNER METHOD)))
        SYM-CPP-TRANSLATE-STELLA-CLASS-CPP-NATIVE-TYPE
        NULL-STRING-WRAPPER))
      STELLA::NULL-STRING)))))

;;; (DEFUN (WRAP-METHOD-BODY-WITH-CPP-AUXILIARY-DECLARATIONS CONS) ...)

(CL:DEFUN WRAP-METHOD-BODY-WITH-CPP-AUXILIARY-DECLARATIONS (METHODBODY DECLARATIONS)
  (CL:LET* ((ODECLARATIONS NIL) (OTREE NULL))
   (CL:SETQ DECLARATIONS (REVERSE DECLARATIONS))
   (CL:LET* ((DECLARATION NULL) (ITER-000 DECLARATIONS))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:PROGN (CL:SETQ DECLARATION (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (CL:LET* ((D DECLARATION))
      (CL:SETQ ODECLARATIONS
       (CONS
        (CONS
         (CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC (%%VALUE (%%REST D)))
         (CONS (CPP-TRANSLATE-A-TREE (%%VALUE D))
          (CONCATENATE
           (CL:IF (CL:NOT (CL:EQ (%%VALUE (%%REST (%%REST D))) NULL))
            (CONS-LIST
             (CPP-TRANSLATE-A-TREE (%%VALUE (%%REST (%%REST D)))))
            NIL)
           NIL)))
        ODECLARATIONS)))))
   (CL:SETQ OTREE
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_STATEMENTS
     (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_BLOCK (REVERSE ODECLARATIONS)
      (CONS METHODBODY NIL))
     NIL))
   (CL:RETURN-FROM WRAP-METHOD-BODY-WITH-CPP-AUXILIARY-DECLARATIONS OTREE)))

;;; (DEFUN (CPP-TRANSLATE-DEFINE-METHOD-UNIT CONS) ...)

(CL:DEFUN CPP-TRANSLATE-DEFINE-METHOD-UNIT (UNIT)
  (CL:LET*
   ((*METHODBEINGWALKED* NULL) (*CURRENTDUMMYINDEX* 0)
    (*DUMMYDECLARATIONS* NIL))
   (CL:DECLARE
    (CL:SPECIAL *METHODBEINGWALKED* *CURRENTDUMMYINDEX*
     *DUMMYDECLARATIONS*))
   (CL:DECLARE (CL:TYPE CL:FIXNUM *CURRENTDUMMYINDEX*))
   (CL:LET*
    ((METHOD (%TRANSLATION-UNIT.THE-OBJECT UNIT))
     (UNITISFUNCTION (CPP-METHOD-OBJECT-IS-FUNCTION? METHOD))
     (BODYTREE (%TRANSLATION-UNIT.CODE-REGISTER UNIT)) (RETURNTYPE NULL)
     (OTREE NIL) (TRANSLATEDMETHODBODY NULL))
    (CL:SETQ *METHODBEINGWALKED* METHOD)
    (CL:SETQ BODYTREE (DELETE-QUOTED-NULL-STATEMENTS BODYTREE))
    (CL:WHEN (CL:NOT UNITISFUNCTION)
     (CL:SETQ *DUMMYDECLARATIONS*
      (CONS
       (CONS (FIRST (METHOD-PARAMETER-NAMES METHOD))
        (CONS (%METHOD-SLOT.SLOT-OWNER METHOD)
         (CONS SYM-CPP-TRANSLATE-STELLA-THIS NIL)))
       *DUMMYDECLARATIONS*)))
    (CL:SETQ TRANSLATEDMETHODBODY
     (CONS SYM-CPP-TRANSLATE-STELLA-CPP_STATEMENTS
      (CONCATENATE (CPP-TRANSLATE-LIST-OF-TREES BODYTREE) NIL)))
    (CL:WHEN (CL:NOT (CL:EQ *DUMMYDECLARATIONS* NIL))
     (CL:SETQ TRANSLATEDMETHODBODY
      (WRAP-METHOD-BODY-WITH-CPP-AUXILIARY-DECLARATIONS
       TRANSLATEDMETHODBODY *DUMMYDECLARATIONS*)))
    (CL:WHEN
     (CL:NOT
      (CL:EQ
       (%STRING-WRAPPER.WRAPPER-VALUE
        (DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS METHOD)
         SYM-CPP-TRANSLATE-STELLA-DOCUMENTATION NULL-STRING-WRAPPER))
       STELLA::NULL-STRING))
     (CL:SETF (%%REST TRANSLATEDMETHODBODY)
      (CONS
       (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_COMMENT
        (WRAP-STRING
         (%STRING-WRAPPER.WRAPPER-VALUE
          (DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS METHOD)
           SYM-CPP-TRANSLATE-STELLA-DOCUMENTATION NULL-STRING-WRAPPER)))
        NIL)
       (CONCATENATE (%%REST TRANSLATEDMETHODBODY) NIL))))
    (CL:SETQ RETURNTYPE
     (CL:IF (CPP-CONSTRUCTOR? METHOD) NIL
      (CONS
       (CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC
        (COMPUTE-MOST-GENERAL-RETURN-TYPE METHOD
         (COMPUTE-RETURN-TYPE-SPEC METHOD
          (%METHOD-SLOT.SLOT-OWNER METHOD))))
       NIL)))
    (CL:SETQ OTREE
     (CONS
      (CL:IF UNITISFUNCTION SYM-CPP-TRANSLATE-STELLA-CPP_FUNCTION
       SYM-CPP-TRANSLATE-STELLA-CPP_METHOD)
      (CONS RETURNTYPE
       (CONS (CPP-TRANSLATE-METHOD-NAME METHOD)
        (CONS (CPP-TRANSLATE-FUNCTION-PARAMETERS METHOD)
         (CONS TRANSLATEDMETHODBODY NIL))))))
    (CL:RETURN-FROM CPP-TRANSLATE-DEFINE-METHOD-UNIT OTREE))))

;;; (DEFUN (CPP-TRANSLATE-RETURN-TREE CONS) ...)

(CL:DEFUN CPP-TRANSLATE-RETURN-TREE (TREE)
  (CL:LET*
   ((OTREE NULL) (RETURNASSIGNMENTS NIL) (RETURNVARIABLES NIL)
    (METHODOTHERRETURNTYPES
     (REST (METHOD-RETURN-TYPE-SPECIFIERS *METHODBEINGWALKED*)))
    (RETURNEXPRESSION NULL) (TRANSLATEDRETURNEXPRESSION NIL)
    (NEEDTEMPORARYRETURNVARIABLE? FALSE))
   (CL:LET*
    ((PARAMETERNUM NULL-INTEGER) (EXP NULL)
     (ITER-000 (%%REST (%%REST TREE))) (ITER-001 1))
    (CL:DECLARE (CL:TYPE CL:FIXNUM ITER-001 PARAMETERNUM))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:PROGN (CL:SETQ EXP (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (CL:PROGN (CL:SETQ PARAMETERNUM ITER-001)
      (CL:SETQ ITER-001 (CL:1+ ITER-001)))
     (CL:WHEN (CL:NOT (SIDE-EFFECT-FREE-EXPRESSION? EXP))
      (CL:SETQ NEEDTEMPORARYRETURNVARIABLE? TRUE))
     (CL:SETQ RETURNASSIGNMENTS
      (CONS
       (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_ASSIGN
        (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT
         (CPP-TRANSLATE-RETURN-PARAMETER-NAME
          SYM-CPP-TRANSLATE-STELLA-_RETURN PARAMETERNUM)
         NIL)
        (CPP-TRANSLATE-A-TREE EXP) NIL)
       RETURNASSIGNMENTS))))
   (CL:SETQ RETURNASSIGNMENTS (REVERSE RETURNASSIGNMENTS))
   (CL:SETQ RETURNEXPRESSION (%%VALUE (%%REST TREE)))
   (CL:IF
    (CL:AND (CL:> (LENGTH METHODOTHERRETURNTYPES) 0)
     (CL:EQ (%%REST (%%REST TREE)) NIL) (CONS? RETURNEXPRESSION)
     (CL:NOT (CL:EQ (%%VALUE RETURNEXPRESSION) NULL))
     (CL:OR
      (CL:EQ (%%VALUE RETURNEXPRESSION)
       SYM-CPP-TRANSLATE-STELLA-SYS-CALL-FUNCTION)
      (CL:EQ (%%VALUE RETURNEXPRESSION)
       SYM-CPP-TRANSLATE-STELLA-SYS-CALL-METHOD)))
    (CL:PROGN
     (CL:LET*
      ((PARAMETERNUM NULL-INTEGER) (TYPE NULL)
       (ITER-002 METHODOTHERRETURNTYPES) (ITER-003 1) (COLLECT-000 NULL))
      (CL:DECLARE (CL:TYPE CL:FIXNUM ITER-003 PARAMETERNUM))
      (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-002 NIL)) DO
       (CL:PROGN (CL:SETQ TYPE (%%VALUE ITER-002))
        (CL:SETQ ITER-002 (%%REST ITER-002)))
       (CL:PROGN (CL:SETQ PARAMETERNUM ITER-003)
        (CL:SETQ ITER-003 (CL:1+ ITER-003)))
       (CL:IF (CL:EQ COLLECT-000 NULL)
        (CL:PROGN
         (CL:SETQ COLLECT-000
          (CONS
           (INTERN-SYMBOL
            (%STRING-WRAPPER.WRAPPER-VALUE
             (CPP-TRANSLATE-RETURN-PARAMETER-NAME
              SYM-CPP-TRANSLATE-STELLA-_RETURN PARAMETERNUM)))
           NIL))
         (CL:IF (CL:EQ RETURNVARIABLES NIL)
          (CL:SETQ RETURNVARIABLES COLLECT-000)
          (ADD-CONS-TO-END-OF-CONS-LIST RETURNVARIABLES COLLECT-000)))
        (CL:PROGN
         (CL:SETF (%%REST COLLECT-000)
          (CONS
           (INTERN-SYMBOL
            (%STRING-WRAPPER.WRAPPER-VALUE
             (CPP-TRANSLATE-RETURN-PARAMETER-NAME
              SYM-CPP-TRANSLATE-STELLA-_RETURN PARAMETERNUM)))
           NIL))
         (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
     (CL:SETQ TRANSLATEDRETURNEXPRESSION
      (CPP-TRANSLATE-MV-FUNCTION-CALL RETURNEXPRESSION RETURNVARIABLES)))
    (CL:SETQ TRANSLATEDRETURNEXPRESSION
     (CPP-TRANSLATE-A-TREE RETURNEXPRESSION)))
   (CL:IF (CL:EQ RETURNASSIGNMENTS NIL)
    (CL:IF (CL:EQ (%%REST TREE) NIL)
     (CL:SETQ OTREE (CONS SYM-CPP-TRANSLATE-STELLA-CPP_RETURN NIL))
     (CL:SETQ OTREE
      (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_RETURN
       TRANSLATEDRETURNEXPRESSION NIL)))
    (CL:IF NEEDTEMPORARYRETURNVARIABLE?
     (CL:LET* ((TEMPVAR "_return_temp"))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TEMPVAR))
      (CL:SETQ OTREE
       (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_BLOCK
        (CONS
         (CONS
          (CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC
           (COMPUTE-RETURN-TYPE-SPEC *METHODBEINGWALKED*
            (%METHOD-SLOT.SLOT-OWNER *METHODBEINGWALKED*)))
          (LIST*
           (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT (WRAP-STRING TEMPVAR)
            NIL)
           TRANSLATEDRETURNEXPRESSION NIL))
         NIL)
        (CONS SYM-CPP-TRANSLATE-STELLA-CPP_STATEMENTS
         (CONCATENATE RETURNASSIGNMENTS
          (CONS
           (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_RETURN
            (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT
             (WRAP-STRING TEMPVAR) NIL)
            NIL)
           NIL)))
        NIL)))
     (CL:SETQ OTREE
      (CONS SYM-CPP-TRANSLATE-STELLA-CPP_STATEMENTS
       (CONCATENATE RETURNASSIGNMENTS
        (CONS
         (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_RETURN
          TRANSLATEDRETURNEXPRESSION NIL)
         NIL))))))
   (CL:RETURN-FROM CPP-TRANSLATE-RETURN-TREE OTREE)))

;;; (DEFUN (CPP-TRANSLATE-ACTUAL-PARAMETERS CONS) ...)

(CL:DEFUN CPP-TRANSLATE-ACTUAL-PARAMETERS (TREE)
  (CL:RETURN-FROM CPP-TRANSLATE-ACTUAL-PARAMETERS
   (CONS SYM-CPP-TRANSLATE-STELLA-CPP_ACTUALS
    (CONCATENATE (CPP-TRANSLATE-LIST-OF-TREES TREE) NIL))))

;;; (DEFUN (CPP-TRANSLATE-VARIABLE-LENGTH-ACTUALS CONS) ...)

(CL:DEFUN CPP-TRANSLATE-VARIABLE-LENGTH-ACTUALS (ACTUALS METHOD)
  (CL:LET*
   ((NOFPARAMETERS (LENGTH (METHOD-PARAMETER-NAMES METHOD)))
    (RESTARGUMENTSTART
     (CL:IF (CPP-METHOD-OBJECT-IS-FUNCTION? METHOD) (CL:1- NOFPARAMETERS)
      (CL:- NOFPARAMETERS 2)))
    (OTREE NIL) (PUSHEDDUMMY FALSE))
   (CL:DECLARE (CL:TYPE CL:FIXNUM NOFPARAMETERS RESTARGUMENTSTART))
   (CL:LET*
    ((I NULL-INTEGER) (ACTUAL NULL) (ITER-000 ACTUALS) (ITER-001 0))
    (CL:DECLARE (CL:TYPE CL:FIXNUM ITER-001 I))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:PROGN (CL:SETQ ACTUAL (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (CL:PROGN (CL:SETQ I ITER-001) (CL:SETQ ITER-001 (CL:1+ ITER-001)))
     (CL:WHEN (CL:= I RESTARGUMENTSTART) (CL:SETQ PUSHEDDUMMY TRUE)
      (CL:LET* ((RESULT (CL:- (LENGTH ACTUALS) RESTARGUMENTSTART)))
       (CL:DECLARE (CL:TYPE CL:FIXNUM RESULT))
       (CL:SETQ OTREE
        (CONS
         (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_LITERAL (WRAP-INTEGER RESULT)
          NIL)
         OTREE))))
     (CL:SETQ OTREE (CONS (CPP-TRANSLATE-A-TREE ACTUAL) OTREE))))
   (CL:WHEN (CL:NOT PUSHEDDUMMY)
    (CL:SETQ OTREE
     (CONS
      (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_LITERAL (WRAP-INTEGER 0) NIL)
      OTREE)))
   (CL:RETURN-FROM CPP-TRANSLATE-VARIABLE-LENGTH-ACTUALS
    (CONS SYM-CPP-TRANSLATE-STELLA-CPP_ACTUALS
     (CONCATENATE (REVERSE OTREE) NIL)))))

;;; (DEFUN (CPP-TRANSLATE-CALL-METHOD-SETTER CONS) ...)

(CL:DEFUN CPP-TRANSLATE-CALL-METHOD-SETTER (TREE)
  (CL:LET*
   ((METHODNAME (%%VALUE (%%REST (%%REST TREE))))
    (OBJECTREF (CPP-TRANSLATE-A-TREE (FOURTH TREE)))
    (VALUEREF (CPP-TRANSLATE-A-TREE (FIFTH TREE))))
   (CL:RETURN-FROM CPP-TRANSLATE-CALL-METHOD-SETTER
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_METHOD_SETTER_CALL
     (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT
      (CPP-TRANSLATE-NAME METHODNAME) NIL)
     OBJECTREF (CONS VALUEREF NIL)))))

;;; (DEFUN (CPP-CREATE-OVERLOADED-FUNCTION-NAME SYMBOL) ...)

(CL:DEFUN CPP-CREATE-OVERLOADED-FUNCTION-NAME (FUNCTIONNAME CLASSTYPE)
  (CL:RETURN-FROM CPP-CREATE-OVERLOADED-FUNCTION-NAME
   (INTERN-SYMBOL
    (CONCATENATE (%SURROGATE.SYMBOL-NAME CLASSTYPE)
     (CONCATENATE "-" (%SYMBOL.SYMBOL-NAME FUNCTIONNAME))))))

;;; (DEFUN (CPP-TRANSLATE-METHOD-CALL CONS) ...)

(CL:DEFUN CPP-TRANSLATE-METHOD-CALL (TREE REFERENCED?)
  (CL:LET*
   ((METHODNAME (%%VALUE (%%REST TREE))) (OWNER (%%VALUE TREE))
    (ARGUMENTS (%%REST (%%REST TREE))))
   (CL:COND
    ((CL:OR (CL:EQ METHODNAME SYM-CPP-TRANSLATE-STELLA-DEFINED?)
      (CL:EQ METHODNAME SYM-CPP-TRANSLATE-STELLA-NULL?))
     (CL:RETURN-FROM CPP-TRANSLATE-METHOD-CALL
      (CPP-TRANSLATE-DEFINED?-METHOD-CALL OWNER (%%VALUE ARGUMENTS)
       (CL:EQ METHODNAME SYM-CPP-TRANSLATE-STELLA-NULL?))))
    ((CL:OR (CL:EQ METHODNAME SYM-CPP-TRANSLATE-STELLA-NTH)
      (CL:EQ METHODNAME SYM-CPP-TRANSLATE-STELLA-NTH-SETTER))
     (CL:RETURN-FROM CPP-TRANSLATE-METHOD-CALL
      (CPP-TRANSLATE-NTH-METHOD-CALL METHODNAME OWNER ARGUMENTS)))
    ((CL:OR (CL:EQ METHODNAME SYM-CPP-TRANSLATE-STELLA-AREF)
      (CL:EQ METHODNAME SYM-CPP-TRANSLATE-STELLA-AREF-SETTER))
     (CL:RETURN-FROM CPP-TRANSLATE-METHOD-CALL
      (CPP-TRANSLATE-AREF-METHOD-CALL METHODNAME OWNER ARGUMENTS)))
    (CL:T
     (CL:WHEN
      (CL:OR (CL:EQ OWNER SGT-CPP-TRANSLATE-STELLA-ARGUMENT-LIST)
       (CL:EQ OWNER SGT-CPP-TRANSLATE-STELLA-ARGUMENT-LIST-ITERATOR))
      (CL:RETURN-FROM CPP-TRANSLATE-METHOD-CALL
       (CPP-TRANSLATE-ARGUMENT-LIST-TREE METHODNAME OWNER
        (%%VALUE ARGUMENTS))))))
   (CL:RETURN-FROM CPP-TRANSLATE-METHOD-CALL
    (CPP-TRANSLATE-NORMAL-METHOD-CALL METHODNAME OWNER ARGUMENTS
     REFERENCED?))))

;;; (DEFUN (CPP-TRANSLATE-NORMAL-METHOD-CALL CONS) ...)

(CL:DEFUN CPP-TRANSLATE-NORMAL-METHOD-CALL (METHODNAME OWNER ARGUMENTS REFERENCED?)
  (CL:LET*
   ((SLOT
     (SAFE-LOOKUP-SLOT (%SURROGATE.SURROGATE-VALUE OWNER) METHODNAME))
    (METHOD (CL:IF (METHOD-SLOT? SLOT) SLOT NULL))
    (FIRSTARG (%%VALUE ARGUMENTS)) (OTHERARGS (%%REST ARGUMENTS)))
   (CL:LET*
    ((OPERATOR
      (CPP-LOOKUP-OPERATOR-TABLE (SOFT-PERMANENTIFY METHODNAME))))
    (CL:WHEN (CL:NOT (CL:EQ OPERATOR NULL))
     (CL:RETURN-FROM CPP-TRANSLATE-NORMAL-METHOD-CALL
      (CPP-TRANSLATE-OPERATOR-CALL OPERATOR ARGUMENTS
       (LENGTH ARGUMENTS)))))
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ METHOD NULL))
     (CPP-METHOD-OBJECT-IS-OVERLOADED-FUNCTION? METHOD))
    (CL:RETURN-FROM CPP-TRANSLATE-NORMAL-METHOD-CALL
     (CPP-TRANSLATE-FUNCTION-CALL
      (CONS (CPP-CREATE-OVERLOADED-FUNCTION-NAME METHODNAME OWNER)
       (CONCATENATE ARGUMENTS NIL))
      METHOD)))
   (CL:LET*
    ((TRANSLATEDNAME
      (CPP-TRANSLATE-NAME
       (YIELD-RENAMED-NAME-IF-NATIVE METHODNAME KWD-CPP-TRANSLATE-CPP
        KWD-CPP-TRANSLATE-FUNCTION))))
    (CL:WHEN
     (CL:AND (CL:EQ METHOD NULL)
      (SLOT-READER-FROM-NAME? METHODNAME OWNER))
     (CL:SETF (%STRING-WRAPPER.WRAPPER-VALUE TRANSLATEDNAME)
      (CONCATENATE (%STRING-WRAPPER.WRAPPER-VALUE TRANSLATEDNAME)
       "_reader")))
    (CL:RETURN-FROM CPP-TRANSLATE-NORMAL-METHOD-CALL
     (CONS
      (CL:IF REFERENCED?
       SYM-CPP-TRANSLATE-STELLA-CPP_REFERENCED_METHOD_CALL
       SYM-CPP-TRANSLATE-STELLA-CPP_METHOD_CALL)
      (LIST*
       (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT
        (CPP-TRANSLATE-CLASS-NAME (SYMBOLIZE OWNER)) NIL)
       (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT TRANSLATEDNAME NIL)
       (CPP-TRANSLATE-A-TREE FIRSTARG)
       (CONS
        (CL:IF
         (CL:AND (CL:NOT (CL:EQ METHOD NULL))
          (%BOOLEAN-WRAPPER.WRAPPER-VALUE
           (DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS METHOD)
            SYM-CPP-TRANSLATE-STELLA-METHOD-VARIABLE-ARGUMENTS?
            FALSE-WRAPPER))
          (CL:NOT (PASS-VARIABLE-ARGUMENTS-AS-LIST? METHOD)))
         (CPP-TRANSLATE-VARIABLE-LENGTH-ACTUALS OTHERARGS METHOD)
         (CPP-TRANSLATE-ACTUAL-PARAMETERS OTHERARGS))
        NIL)))))))

;;; (DEFUN (CPP-TRANSLATE-DEFINED?-METHOD-CALL CONS) ...)

(CL:DEFUN CPP-TRANSLATE-DEFINED?-METHOD-CALL (ARGUMENTTYPE ARGUMENT NULL?)
  (CL:LET* ((NULLVALUE (TYPE-TO-WALKED-NULL-VALUE-TREE ARGUMENTTYPE)))
   (CL:COND
    ((CL:AND (OPTIMIZE-BOOLEAN-TESTS?)
      (SUBTYPE-OF? ARGUMENTTYPE SGT-CPP-TRANSLATE-STELLA-OBJECT))
     (CL:SETQ ARGUMENT
      (LIST* SYM-CPP-TRANSLATE-STELLA-CAST ARGUMENT
       (CONS SGT-CPP-TRANSLATE-STELLA-BOOLEAN NIL)))
     (CL:IF NULL?
      (CL:RETURN-FROM CPP-TRANSLATE-DEFINED?-METHOD-CALL
       (CPP-TRANSLATE-OPERATOR-CALL
        (CPP-LOOKUP-OPERATOR-TABLE SYM-CPP-TRANSLATE-STELLA-NOT)
        (CONS ARGUMENT NIL) 1))
      (CL:RETURN-FROM CPP-TRANSLATE-DEFINED?-METHOD-CALL
       (CPP-TRANSLATE-A-TREE ARGUMENT))))
    (CL:T
     (CL:RETURN-FROM CPP-TRANSLATE-DEFINED?-METHOD-CALL
      (CPP-TRANSLATE-OPERATOR-CALL
       (CPP-LOOKUP-OPERATOR-TABLE
        (CL:IF NULL? SYM-CPP-TRANSLATE-STELLA-EQ?
         SYM-CPP-TRANSLATE-STELLA-!=))
       (CONS ARGUMENT (CONS NULLVALUE NIL)) 2))))))

;;; (DEFUN (CPP-TRANSLATE-NTH-METHOD-CALL CONS) ...)

(CL:DEFUN CPP-TRANSLATE-NTH-METHOD-CALL (OPERATOR OWNER ARGUMENTS)
  (CL:LET*
   ((SETTER? (CL:EQ OPERATOR SYM-CPP-TRANSLATE-STELLA-NTH-SETTER))
    (COLLECTION (%%VALUE ARGUMENTS)) (POSITION (LAST ARGUMENTS))
    (VALUE (CL:IF SETTER? (%%VALUE (%%REST ARGUMENTS)) NULL)) (TREE NULL))
   (CL:COND
    ((CL:OR (CL:EQ OWNER SGT-CPP-TRANSLATE-STELLA-STRING)
      (CL:EQ OWNER SGT-CPP-TRANSLATE-STELLA-MUTABLE-STRING)
      (CL:EQ OWNER SGT-CPP-TRANSLATE-STELLA-NATIVE-VECTOR))
     (CL:WHEN
      (CL:OR (CL:EQ OWNER SGT-CPP-TRANSLATE-STELLA-NATIVE-VECTOR)
       (METHOD-CALL-INLINING-ENABLED?))
      (CL:SETQ COLLECTION (CPP-TRANSLATE-A-TREE COLLECTION))
      (CL:SETQ TREE
       (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_ARRAY_REFERENCE COLLECTION
        (CONS (CPP-TRANSLATE-A-TREE POSITION) NIL)))
      (CL:WHEN SETTER?
       (CL:SETQ TREE
        (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_ASSIGN TREE
         (CONS (CPP-TRANSLATE-A-TREE VALUE) NIL))))
      (CL:RETURN-FROM CPP-TRANSLATE-NTH-METHOD-CALL TREE)))
    (CL:T))
   (CL:RETURN-FROM CPP-TRANSLATE-NTH-METHOD-CALL
    (CPP-TRANSLATE-NORMAL-METHOD-CALL OPERATOR OWNER ARGUMENTS FALSE))))

;;; (DEFUN (CPP-TRANSLATE-AREF-METHOD-CALL CONS) ...)

(CL:DEFUN CPP-TRANSLATE-AREF-METHOD-CALL (OPERATOR OWNER ARGUMENTS)
  (CL:COND
   ((CL:EQ OWNER SGT-CPP-TRANSLATE-STELLA-ARRAY)
    (CL:LET*
     ((SETTER? (CL:EQ OPERATOR SYM-CPP-TRANSLATE-STELLA-AREF-SETTER))
      (OTREE
       (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_ARRAY_REFERENCE
        (CPP-TRANSLATE-A-TREE (%%VALUE ARGUMENTS))
        (CONCATENATE
         (CPP-TRANSLATE-LIST-OF-TREES
          (CL:IF SETTER? (%%REST (%%REST ARGUMENTS)) (%%REST ARGUMENTS)))
         NIL))))
     (CL:WHEN SETTER?
      (CL:SETQ OTREE
       (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_ASSIGN OTREE
        (CONS (CPP-TRANSLATE-A-TREE (%%VALUE (%%REST ARGUMENTS))) NIL))))
     (CL:RETURN-FROM CPP-TRANSLATE-AREF-METHOD-CALL OTREE)))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
      OWNER "' is not a valid case option")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))

;;; (DEFUN (CPP-TRANSLATE-CODE-SIGNATURE CONS) ...)

(CL:DEFUN CPP-TRANSLATE-CODE-SIGNATURE (SIGNATURE)
  (CL:LET* ((TRANSLATEDRETURNTYPES NIL) (TRANSLATEDPARAMETERTYPES NIL))
   (CL:LET*
    ((RETURNTYPE NULL) (ITER-000 (%%VALUE SIGNATURE)) (COLLECT-000 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:PROGN (CL:SETQ RETURNTYPE (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-000
        (CONS (CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC RETURNTYPE) NIL))
       (CL:IF (CL:EQ TRANSLATEDRETURNTYPES NIL)
        (CL:SETQ TRANSLATEDRETURNTYPES COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST TRANSLATEDRETURNTYPES COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000)
        (CONS (CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC RETURNTYPE) NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
   (CL:LET*
    ((PARAMETERTYPE NULL) (ITER-001 (%%REST SIGNATURE))
     (COLLECT-001 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
     (CL:PROGN (CL:SETQ PARAMETERTYPE (%%VALUE ITER-001))
      (CL:SETQ ITER-001 (%%REST ITER-001)))
     (CL:IF (CL:EQ COLLECT-001 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-001
        (CONS (CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC PARAMETERTYPE) NIL))
       (CL:IF (CL:EQ TRANSLATEDPARAMETERTYPES NIL)
        (CL:SETQ TRANSLATEDPARAMETERTYPES COLLECT-001)
        (ADD-CONS-TO-END-OF-CONS-LIST TRANSLATEDPARAMETERTYPES
         COLLECT-001)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-001)
        (CONS (CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC PARAMETERTYPE) NIL))
       (CL:SETQ COLLECT-001 (%%REST COLLECT-001))))))
   (CL:RETURN-FROM CPP-TRANSLATE-CODE-SIGNATURE
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_FUNCTION_SIGNATURE
     TRANSLATEDRETURNTYPES (CONS TRANSLATEDPARAMETERTYPES NIL)))))

;;; (DEFUN (CPP-TRANSLATE-METHOD-CODE-SIGNATURE CONS) ...)

(CL:DEFUN CPP-TRANSLATE-METHOD-CODE-SIGNATURE (SIGNATURE)
  (CL:LET*
   ((TRANSLATEDRETURNTYPES NIL) (TRANSLATEDPARAMETERTYPES NIL)
    (TRANSLATEDOBJECTTYPE
     (CPP-TRANSLATE-TYPE-SPEC (%%VALUE (%%REST SIGNATURE)))))
   (CL:LET*
    ((RETURNTYPE NULL) (ITER-000 (%%VALUE SIGNATURE)) (COLLECT-000 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:PROGN (CL:SETQ RETURNTYPE (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-000
        (CONS (CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC RETURNTYPE) NIL))
       (CL:IF (CL:EQ TRANSLATEDRETURNTYPES NIL)
        (CL:SETQ TRANSLATEDRETURNTYPES COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST TRANSLATEDRETURNTYPES COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000)
        (CONS (CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC RETURNTYPE) NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
   (CL:LET*
    ((PARAMETERTYPE NULL) (ITER-001 (%%REST (%%REST SIGNATURE)))
     (COLLECT-001 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
     (CL:PROGN (CL:SETQ PARAMETERTYPE (%%VALUE ITER-001))
      (CL:SETQ ITER-001 (%%REST ITER-001)))
     (CL:IF (CL:EQ COLLECT-001 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-001
        (CONS (CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC PARAMETERTYPE) NIL))
       (CL:IF (CL:EQ TRANSLATEDPARAMETERTYPES NIL)
        (CL:SETQ TRANSLATEDPARAMETERTYPES COLLECT-001)
        (ADD-CONS-TO-END-OF-CONS-LIST TRANSLATEDPARAMETERTYPES
         COLLECT-001)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-001)
        (CONS (CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC PARAMETERTYPE) NIL))
       (CL:SETQ COLLECT-001 (%%REST COLLECT-001))))))
   (CL:RETURN-FROM CPP-TRANSLATE-METHOD-CODE-SIGNATURE
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_METHOD_SIGNATURE
     TRANSLATEDRETURNTYPES
     (CONS TRANSLATEDOBJECTTYPE (CONS TRANSLATEDPARAMETERTYPES NIL))))))

;;; (DEFUN (CPP-TRANSLATE-CALL-FUNCTION-CODE CONS) ...)

(CL:DEFUN CPP-TRANSLATE-CALL-FUNCTION-CODE (TREE)
  (CL:LET*
   ((SIGNATURE (CPP-TRANSLATE-CODE-SIGNATURE (%%VALUE (%%REST TREE))))
    (FUNCTIONNAMEEXPR
     (CPP-TRANSLATE-A-TREE (%%VALUE (%%REST (%%REST TREE)))))
    (FUNCTIONARGS (%%REST (%%REST (%%REST TREE)))))
   (CL:RETURN-FROM CPP-TRANSLATE-CALL-FUNCTION-CODE
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_FUNCALL SIGNATURE
     (CONS FUNCTIONNAMEEXPR
      (CONS (CPP-TRANSLATE-ACTUAL-PARAMETERS FUNCTIONARGS) NIL))))))

;;; (DEFUN (CPP-TRANSLATE-CALL-METHOD-CODE CONS) ...)

(CL:DEFUN CPP-TRANSLATE-CALL-METHOD-CODE (TREE)
  (CL:LET*
   ((SIGNATURE
     (CPP-TRANSLATE-METHOD-CODE-SIGNATURE (%%VALUE (%%REST TREE))))
    (METHODNAMEEXPR
     (CPP-TRANSLATE-A-TREE (%%VALUE (%%REST (%%REST TREE)))))
    (THEOBJECT (%%VALUE (%%REST (%%REST (%%REST TREE)))))
    (METHODARGS (%%REST (%%REST (%%REST (%%REST TREE))))))
   (CL:RETURN-FROM CPP-TRANSLATE-CALL-METHOD-CODE
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_METHOD_CODE_CALL SIGNATURE
     (CONS METHODNAMEEXPR
      (CONS (CPP-TRANSLATE-A-TREE THEOBJECT)
       (CONS (CPP-TRANSLATE-ACTUAL-PARAMETERS METHODARGS) NIL)))))))

;;; (DEFUN (GET-LAST-N-ELEMENTS CONS) ...)

(CL:DEFUN GET-LAST-N-ELEMENTS (LIST N)
  (CL:DECLARE (CL:TYPE CL:FIXNUM N))
  (CL:SETQ N (CL:- (LENGTH LIST) N))
  (CL:WHEN (CL:< N 0) (CL:SETQ N 0))
  (CL:RETURN-FROM GET-LAST-N-ELEMENTS (NTH-REST LIST N)))

;;; (DEFUN (CPP-TRANSLATE-FUNCTION-CALL CONS) ...)

(CL:DEFUN CPP-TRANSLATE-FUNCTION-CALL (TREE METHOD)
  (CL:LET*
   ((FUNCTIONNAME (%%VALUE TREE))
    (FUNCTIONARGS (COPY-CONS-LIST (%%REST TREE)))
    (FIRSTARG (%%VALUE FUNCTIONARGS))
    (FUNCTION
     (CL:IF (CL:NOT (CL:EQ METHOD NULL)) METHOD
      (LOOKUP-FUNCTION FUNCTIONNAME)))
    (OPERATOR
     (CPP-LOOKUP-OPERATOR-TABLE (SOFT-PERMANENTIFY FUNCTIONNAME)))
    (OTREE NULL) (DUMMYARGS NIL) (NUMBEROFUNUSEDRETURNPARAMETERS 0)
    (UNUSEDRETURNTYPES NIL) (DUMMYNAME NULL))
   (CL:DECLARE (CL:TYPE CL:FIXNUM NUMBEROFUNUSEDRETURNPARAMETERS))
   (CL:COND
    ((CL:OR (CL:EQ FUNCTIONNAME SYM-CPP-TRANSLATE-STELLA-GET-SYM)
      (CL:EQ FUNCTIONNAME SYM-CPP-TRANSLATE-STELLA-GET-KWD)
      (CL:EQ FUNCTIONNAME SYM-CPP-TRANSLATE-STELLA-GET-SGT))
     (CL:COND
      ((SUBTYPE-OF-INTEGER? (SAFE-PRIMARY-TYPE FIRSTARG))
       (CL:PROGN
        (CL:RETURN-FROM CPP-TRANSLATE-FUNCTION-CALL
         (CPP-TRANSLATE-HARDCODED-SYMBOL-REFERENCE FUNCTIONNAME
          (%INTEGER-WRAPPER.WRAPPER-VALUE FIRSTARG)))))
      (CL:T)))
    (CL:T))
   (CL:SETQ NUMBEROFUNUSEDRETURNPARAMETERS
    (CL:-
     (CL:+ (LENGTH (METHOD-PARAMETER-NAMES FUNCTION))
      (CL:1- (LENGTH (METHOD-RETURN-TYPE-SPECIFIERS FUNCTION))))
     (LENGTH FUNCTIONARGS)))
   (CL:WHEN (CL:> NUMBEROFUNUSEDRETURNPARAMETERS 0)
    (CL:SETQ UNUSEDRETURNTYPES
     (GET-LAST-N-ELEMENTS (REST (METHOD-RETURN-TYPE-SPECIFIERS FUNCTION))
      NUMBEROFUNUSEDRETURNPARAMETERS))
    (CL:LET* ((UNUSEDPARAMETERTYPE NULL) (ITER-000 UNUSEDRETURNTYPES))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:PROGN (CL:SETQ UNUSEDPARAMETERTYPE (%%VALUE ITER-000))
       (CL:SETQ ITER-000 (%%REST ITER-000)))
      (CL:SETQ *CURRENTDUMMYINDEX* (CL:1+ *CURRENTDUMMYINDEX*))
      (CL:SETQ DUMMYNAME
       (INTERN-SYMBOL
        (%STRING-WRAPPER.WRAPPER-VALUE
         (CPP-TRANSLATE-RETURN-PARAMETER-NAME
          SYM-CPP-TRANSLATE-STELLA-DUMMY *CURRENTDUMMYINDEX*))))
      (CL:SETQ *DUMMYDECLARATIONS*
       (CONS (CONS DUMMYNAME (CONS UNUSEDPARAMETERTYPE NIL))
        *DUMMYDECLARATIONS*))
      (CL:SETQ DUMMYARGS (CONS DUMMYNAME DUMMYARGS))))
    (CONCATENATE FUNCTIONARGS (REVERSE DUMMYARGS)))
   (CL:IF (CL:NOT (CL:EQ OPERATOR NULL))
    (CL:SETQ OTREE
     (CPP-TRANSLATE-OPERATOR-CALL OPERATOR FUNCTIONARGS
      (LENGTH FUNCTIONARGS)))
    (CL:SETQ OTREE
     (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_FUNCTION_CALL
      (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_IDENT
       (CPP-TRANSLATE-FUNCTION-NAME FUNCTION) NIL)
      (CL:IF
       (CL:AND
        (%BOOLEAN-WRAPPER.WRAPPER-VALUE
         (DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
          SYM-CPP-TRANSLATE-STELLA-METHOD-VARIABLE-ARGUMENTS?
          FALSE-WRAPPER))
        (CL:NOT (PASS-VARIABLE-ARGUMENTS-AS-LIST? FUNCTION)))
       (CPP-TRANSLATE-VARIABLE-LENGTH-ACTUALS FUNCTIONARGS FUNCTION)
       (CPP-TRANSLATE-ACTUAL-PARAMETERS FUNCTIONARGS))
      NIL)))
   (CL:RETURN-FROM CPP-TRANSLATE-FUNCTION-CALL OTREE)))

;;; (DEFUN (CPP-TRANSLATE-OPERATOR-TREE CONS) ...)

(CL:DEFUN CPP-TRANSLATE-OPERATOR-TREE (TREE)
  (CL:LET*
   ((OPERATOR (CPP-LOOKUP-OPERATOR-TABLE (%%VALUE TREE)))
    (ARGS (%%REST TREE)) (ARITY NULL-INTEGER))
   (CL:DECLARE (CL:TYPE CL:FIXNUM ARITY))
   (CL:LET* ((TEST-VALUE-000 (%%VALUE TREE)))
    (CL:COND
     ((CL:OR (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-AND)
       (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-OR)
       (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-EQ?)
       (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA->)
       (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA->=)
       (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-<)
       (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-<=))
      (CL:SETQ ARITY 2))
     ((CL:OR (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-NOT)
       (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA-++)
       (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-STELLA---))
      (CL:SETQ ARITY 1))
     (CL:T
      (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
        "`" TEST-VALUE-000 "' is not a valid case option")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
   (CL:RETURN-FROM CPP-TRANSLATE-OPERATOR-TREE
    (CPP-TRANSLATE-OPERATOR-CALL OPERATOR ARGS ARITY))))

;;; (DEFUN (CPP-TRANSLATE-OPERATOR-CALL CONS) ...)

(CL:DEFUN CPP-TRANSLATE-OPERATOR-CALL (OPERATORNAMES ARGUMENTS ARITY)
  (CL:DECLARE (CL:TYPE CL:FIXNUM ARITY))
  (CL:LET* ((OTREE NULL))
   (CL:ECASE ARITY
    (1
     (CL:SETQ OTREE
      (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_UNARY_OP (%%VALUE OPERATORNAMES)
       (CONS (CPP-TRANSLATE-A-TREE (%%VALUE ARGUMENTS)) NIL))))
    (2
     (CL:IF (CL:> (LENGTH ARGUMENTS) 2)
      (CL:SETQ OTREE
       (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_BINARY_OP
        (CPP-TRANSLATE-A-TREE (%%VALUE ARGUMENTS))
        (CONS (%%VALUE OPERATORNAMES)
         (CONS
          (CPP-TRANSLATE-OPERATOR-CALL (COPY-CONS-TREE OPERATORNAMES)
           (%%REST ARGUMENTS) 2)
          NIL))))
      (CL:SETQ OTREE
       (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_BINARY_OP
        (CPP-TRANSLATE-A-TREE (%%VALUE ARGUMENTS))
        (CONS (%%VALUE OPERATORNAMES)
         (CONS (CPP-TRANSLATE-A-TREE (%%VALUE (%%REST ARGUMENTS)))
          NIL))))))
    (3
     (CL:SETQ OTREE
      (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_TERNARY_OP
       (CPP-TRANSLATE-A-TREE (%%VALUE ARGUMENTS))
       (CONS (%%VALUE OPERATORNAMES)
        (CONS (CPP-TRANSLATE-A-TREE (%%VALUE (%%REST ARGUMENTS)))
         (CONS (%%VALUE (%%REST OPERATORNAMES))
          (CONS
           (CPP-TRANSLATE-A-TREE (%%VALUE (%%REST (%%REST ARGUMENTS))))
           NIL))))))))
   (CL:RETURN-FROM CPP-TRANSLATE-OPERATOR-CALL OTREE)))

;;; (DEFUN (CPP-TRANSLATE-HARDCODED-SYMBOL-REFERENCE CONS) ...)

(CL:DEFUN CPP-TRANSLATE-HARDCODED-SYMBOL-REFERENCE (OPERATOR OFFSET)
  (CL:DECLARE (CL:TYPE CL:FIXNUM OFFSET))
  (CL:LET* ((SYMBOL NULL))
   (CL:COND
    ((CL:EQ OPERATOR SYM-CPP-TRANSLATE-STELLA-GET-SYM)
     (CL:SETQ SYMBOL (GET-SYM-FROM-OFFSET OFFSET)))
    ((CL:EQ OPERATOR SYM-CPP-TRANSLATE-STELLA-GET-KWD)
     (CL:SETQ SYMBOL (GET-KWD-FROM-OFFSET OFFSET)))
    ((CL:EQ OPERATOR SYM-CPP-TRANSLATE-STELLA-GET-SGT)
     (CL:SETQ SYMBOL (GET-SGT-FROM-OFFSET OFFSET)))
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
       OPERATOR "' is not a valid case option")
      (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
   (CL:RETURN-FROM CPP-TRANSLATE-HARDCODED-SYMBOL-REFERENCE
    (LIST* SYM-CPP-TRANSLATE-STELLA-CPP_SYMBOL SYMBOL NIL))))

(CL:DEFUN HELP-STARTUP-CPP-TRANSLATE1 ()
  (CL:PROGN
   (CL:SETQ KWD-CPP-TRANSLATE-USE-CPP-GARBAGE-COLLECTOR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "USE-CPP-GARBAGE-COLLECTOR" NULL 2))
   (CL:SETQ SGT-CPP-TRANSLATE-STELLA-KEY-VALUE-LIST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "KEY-VALUE-LIST" NULL 1))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-++
    (INTERN-RIGID-SYMBOL-WRT-MODULE "++" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA---
    (INTERN-RIGID-SYMBOL-WRT-MODULE "--" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-+
    (INTERN-RIGID-SYMBOL-WRT-MODULE "+" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA--
    (INTERN-RIGID-SYMBOL-WRT-MODULE "-" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-*
    (INTERN-RIGID-SYMBOL-WRT-MODULE "*" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-/
    (INTERN-RIGID-SYMBOL-WRT-MODULE "/" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-EQ?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "EQ?" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-!=
    (INTERN-RIGID-SYMBOL-WRT-MODULE "!=" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA->
    (INTERN-RIGID-SYMBOL-WRT-MODULE ">" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA->=
    (INTERN-RIGID-SYMBOL-WRT-MODULE ">=" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-=>
    (INTERN-RIGID-SYMBOL-WRT-MODULE "=>" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-<
    (INTERN-RIGID-SYMBOL-WRT-MODULE "<" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-=<
    (INTERN-RIGID-SYMBOL-WRT-MODULE "=<" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-<=
    (INTERN-RIGID-SYMBOL-WRT-MODULE "<=" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-AND
    (INTERN-RIGID-SYMBOL-WRT-MODULE "AND" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-OR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "OR" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-NOT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NOT" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CHOOSE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CHOOSE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-ASM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ASM" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-AUTO
    (INTERN-RIGID-SYMBOL-WRT-MODULE "AUTO" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-BREAK
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BREAK" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CASE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CASE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CATCH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CATCH" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CHAR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CHAR" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CLASS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CONST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONST" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CONTINUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTINUE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-DEFAULT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFAULT" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-DELETE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DELETE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-DO
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DO" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-DOUBLE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DOUBLE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-ELSE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ELSE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-ENUM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ENUM" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-EXTERN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "EXTERN" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-FLOAT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FLOAT" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-FOR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FOR" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-FRIEND
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FRIEND" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-GOTO
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GOTO" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-IF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "IF" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-INLINE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INLINE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-INT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INT" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-LONG
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LONG" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-NEW
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NEW" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-OPERATOR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "OPERATOR" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-PRIVATE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PRIVATE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-PROTECTED
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PROTECTED" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-PUBLIC
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PUBLIC" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-REGISTER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "REGISTER" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-RETURN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "RETURN" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-SHORT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SHORT" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-SIGNED
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SIGNED" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-SIZEOF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SIZEOF" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-STATIC
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STATIC" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-STRUCT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STRUCT" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-SWITCH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SWITCH" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-TEMPLATE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TEMPLATE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-THROW
    (INTERN-RIGID-SYMBOL-WRT-MODULE "THROW" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-TRY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TRY" NULL 0)))
  :VOID)

(CL:DEFUN HELP-STARTUP-CPP-TRANSLATE2 ()
  (CL:PROGN
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-TYPEDEF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TYPEDEF" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-UNION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UNION" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-UNSIGNED
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UNSIGNED" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-VIRTUAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "VIRTUAL" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-VOID
    (INTERN-RIGID-SYMBOL-WRT-MODULE "VOID" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-VOLATILE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "VOLATILE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-WHILE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WHILE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-TYPENAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TYPENAME" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-GLOBAL-VARIABLE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GLOBAL-VARIABLE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-TYPE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TYPE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-METHOD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-MACRO
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MACRO" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-PRINT-METHOD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT-METHOD" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-STARTUP-TIME-PROGN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-TIME-PROGN" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-VERBATIM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "VERBATIM" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-SPECIAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SPECIAL" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-SYS-SIGNAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYS-SIGNAL" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-SYS-UNWIND-PROTECT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYS-UNWIND-PROTECT" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-VOID-SYS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "VOID-SYS" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-BAD-SYS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BAD-SYS" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-TYPED-SYS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TYPED-SYS" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-SETQ
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SETQ" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-SYS-SLOT-VALUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYS-SLOT-VALUE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-SYS-REFERENCED-SLOT-VALUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYS-REFERENCED-SLOT-VALUE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-SYS-SLOT-VALUE-SETTER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYS-SLOT-VALUE-SETTER" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-SYS-CALL-METHOD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYS-CALL-METHOD" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-SYS-REFERENCED-CALL-METHOD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYS-REFERENCED-CALL-METHOD" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-SYS-CALL-FUNCTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYS-CALL-FUNCTION" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-PROGN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PROGN" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-LOOP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LOOP" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-SYS-FOREACH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYS-FOREACH" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-LET
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LET" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CAST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CAST" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-SAFE-CAST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SAFE-CAST" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-WHEN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WHEN" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-UNLESS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UNLESS" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-COND
    (INTERN-RIGID-SYMBOL-WRT-MODULE "COND" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-MAKE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MAKE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-SYS-NEW
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYS-NEW" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-MV-SETQ
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MV-SETQ" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-SYS-CALL-FUNCTION-CODE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYS-CALL-FUNCTION-CODE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-SYS-CALL-METHOD-CODE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYS-CALL-METHOD-CODE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-SYS-INLINE-CALL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYS-INLINE-CALL" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-THE-CODE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "THE-CODE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-SYS-POINTER-TO-FUNCTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYS-POINTER-TO-FUNCTION" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-IGNORE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "IGNORE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-STELLA-TRY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STELLA-TRY" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-STELLA-THROW
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STELLA-THROW" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-PRINT-STREAM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT-STREAM" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-PRINT-NATIVE-STREAM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT-NATIVE-STREAM" NULL 0))
   (CL:SETQ SGT-CPP-TRANSLATE-STELLA-CONS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONS" NULL 1))
   (CL:SETQ KWD-CPP-TRANSLATE-CPP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP" NULL 2))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_VERBATIM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_VERBATIM" NULL 0))
   (CL:SETQ KWD-CPP-TRANSLATE-UNBIND-WITH-DESTRUCTORS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UNBIND-WITH-DESTRUCTORS" NULL 2))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_FUNCTION_CALL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_FUNCTION_CALL" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_IDENT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_IDENT" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_ACTUALS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_ACTUALS" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_BLOCK
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_BLOCK" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_STATEMENTS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_STATEMENTS" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_COMMENT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_COMMENT" NULL 0)))
  :VOID)

(CL:DEFUN HELP-STARTUP-CPP-TRANSLATE3 ()
  (CL:PROGN
   (CL:SETQ KWD-CPP-TRANSLATE-DIGIT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DIGIT" NULL 2))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_PRINT_NATIVE_STREAM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_PRINT_NATIVE_STREAM" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_DEFPRINT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_DEFPRINT" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_RETURN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_RETURN" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-STREAM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STREAM" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-SETJMP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SETJMP" NULL 0))
   (CL:SETQ SGT-CPP-TRANSLATE-STELLA-INTEGER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INTEGER" NULL 1))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-LONGJMP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LONGJMP" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_CATCH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_CATCH" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_THROW
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_THROW" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_SIGNAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_SIGNAL" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_UNWIND_PROTECT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_UNWIND_PROTECT" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_CAST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_CAST" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_ASSIGN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_ASSIGN" NULL 0))
   (CL:SETQ KWD-CPP-TRANSLATE-UNBOUND-SPECIAL-VARIABLE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UNBOUND-SPECIAL-VARIABLE" NULL 2))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_SPECIAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_SPECIAL" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_TYPE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_TYPE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_GLOBAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_GLOBAL" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-SYMBOL-ID
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYMBOL-ID" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-OTHERWISE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "OTHERWISE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_CASE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_CASE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_PROGN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_PROGN" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_COND
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_COND" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_LOOP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_LOOP" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_WHILE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_WHILE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_BREAK
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_BREAK" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_CONTINUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_CONTINUE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_IF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_IF" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_WHEN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_WHEN" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_UNLESS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_UNLESS" NULL 0))
   (CL:SETQ SGT-CPP-TRANSLATE-STELLA-ARGUMENT-LIST-ITERATOR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ARGUMENT-LIST-ITERATOR" NULL 1))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_FOREACH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_FOREACH" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-VA_START
    (INTERN-RIGID-SYMBOL-WRT-MODULE "VA_START" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-VA_END
    (INTERN-RIGID-SYMBOL-WRT-MODULE "VA_END" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-ALLOCATE-ITERATOR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ALLOCATE-ITERATOR" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-LENGTH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LENGTH" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-NEXT?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NEXT?" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-ARGUMENT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ARGUMENT" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_BINARY_OP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_BINARY_OP" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_UNARY_OP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_UNARY_OP" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_LITERAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_LITERAL" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-VA_ARG
    (INTERN-RIGID-SYMBOL-WRT-MODULE "VA_ARG" NULL 0))
   (CL:SETQ KWD-CPP-TRANSLATE-FUNCTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FUNCTION" NULL 2))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_FUNCTION_POINTER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_FUNCTION_POINTER" NULL 0))
   (CL:SETQ KWD-CPP-TRANSLATE-METHOD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD" NULL 2))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_METHOD_POINTER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_METHOD_POINTER" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-TRUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TRUE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-ANY-VALUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ANY-VALUE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_ARRAY_REFERENCE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_ARRAY_REFERENCE" NULL 0))
   (CL:SETQ SGT-CPP-TRANSLATE-STELLA-VOID
    (INTERN-RIGID-SYMBOL-WRT-MODULE "VOID" NULL 1))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_REFERENCED_SLOT_VALUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_REFERENCED_SLOT_VALUE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_SLOT_VALUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_SLOT_VALUE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_SLOT_VALUE_SETTER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_SLOT_VALUE_SETTER" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CLASS-CPP-NATIVE-TYPE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS-CPP-NATIVE-TYPE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_MAKE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_MAKE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_STARTUP_TIME_PROGN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_STARTUP_TIME_PROGN" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_PRINT_STREAM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_PRINT_STREAM" NULL 0))
   (CL:SETQ KWD-CPP-TRANSLATE-WARN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WARN" NULL 2))
   (CL:SETQ KWD-CPP-TRANSLATE-ERROR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ERROR" NULL 2))
   (CL:SETQ KWD-CPP-TRANSLATE-CONTINUABLE-ERROR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTINUABLE-ERROR" NULL 2)))
  :VOID)

(CL:DEFUN HELP-STARTUP-CPP-TRANSLATE4 ()
  (CL:PROGN
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_STANDARD_ERROR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_STANDARD_ERROR" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_STANDARD_OUT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_STANDARD_OUT" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-ENDL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ENDL" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-EOL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "EOL" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_REFERENCED_METHOD_CALL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_REFERENCED_METHOD_CALL" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-NULL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-SET
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SET" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_SYMBOL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_SYMBOL" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-GET
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GET" NULL 0))
   (CL:SETQ KWD-CPP-TRANSLATE-CPP-STANDALONE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP-STANDALONE" NULL 2))
   (CL:SETQ SGT-CPP-TRANSLATE-STELLA-UNKNOWN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UNKNOWN" NULL 1))
   (CL:SETQ KWD-CPP-TRANSLATE-UPPERCASE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UPPERCASE" NULL 2))
   (CL:SETQ KWD-CPP-TRANSLATE-LOWERCASE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LOWERCASE" NULL 2))
   (CL:SETQ KWD-CPP-TRANSLATE-CAPITALIZED
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CAPITALIZED" NULL 2))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-MODULE-CPP-PACKAGE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MODULE-CPP-PACKAGE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-METHOD-VARIABLE-ARGUMENTS?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-VARIABLE-ARGUMENTS?" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-_RETURN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "_RETURN" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_VAR_ARGS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_VAR_ARGS" NULL 0))
   (CL:SETQ SGT-CPP-TRANSLATE-STELLA-STORAGE-SLOT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STORAGE-SLOT" NULL 1))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-THIS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "THIS" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-DOCUMENTATION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DOCUMENTATION" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_FUNCTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_FUNCTION" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_METHOD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_METHOD" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_METHOD_SETTER_CALL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_METHOD_SETTER_CALL" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-DEFINED?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFINED?" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-NULL?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL?" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-NTH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NTH" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-NTH-SETTER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NTH-SETTER" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-AREF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "AREF" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-AREF-SETTER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "AREF-SETTER" NULL 0))
   (CL:SETQ SGT-CPP-TRANSLATE-STELLA-ARGUMENT-LIST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ARGUMENT-LIST" NULL 1))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_METHOD_CALL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_METHOD_CALL" NULL 0))
   (CL:SETQ SGT-CPP-TRANSLATE-STELLA-OBJECT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "OBJECT" NULL 1))
   (CL:SETQ SGT-CPP-TRANSLATE-STELLA-BOOLEAN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BOOLEAN" NULL 1))
   (CL:SETQ SGT-CPP-TRANSLATE-STELLA-STRING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STRING" NULL 1))
   (CL:SETQ SGT-CPP-TRANSLATE-STELLA-MUTABLE-STRING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MUTABLE-STRING" NULL 1))
   (CL:SETQ SGT-CPP-TRANSLATE-STELLA-NATIVE-VECTOR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NATIVE-VECTOR" NULL 1))
   (CL:SETQ SGT-CPP-TRANSLATE-STELLA-ARRAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ARRAY" NULL 1))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_FUNCTION_SIGNATURE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_FUNCTION_SIGNATURE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_METHOD_SIGNATURE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_METHOD_SIGNATURE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_FUNCALL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_FUNCALL" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_METHOD_CODE_CALL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_METHOD_CODE_CALL" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-GET-SYM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GET-SYM" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-GET-KWD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GET-KWD" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-GET-SGT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GET-SGT" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-DUMMY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DUMMY" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-CPP_TERNARY_OP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_TERNARY_OP" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-STARTUP-CPP-TRANSLATE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-CPP-TRANSLATE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-STELLA-METHOD-STARTUP-CLASSNAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME" NULL 0)))
  :VOID)

(CL:DEFUN HELP-STARTUP-CPP-TRANSLATE5 ()
  (CL:PROGN
   (DEFINE-FUNCTION-OBJECT "CPP-USE-GARBAGE-COLLECTOR?"
    "(DEFUN (CPP-USE-GARBAGE-COLLECTOR? BOOLEAN) ())"
    (CL:FUNCTION CPP-USE-GARBAGE-COLLECTOR?) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-LOOKUP-OPERATOR-TABLE"
    "(DEFUN (CPP-LOOKUP-OPERATOR-TABLE CONS) ((OPERATOR SYMBOL)))"
    (CL:FUNCTION CPP-LOOKUP-OPERATOR-TABLE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-YIELD-RENAMED-RESERVED-WORD"
    "(DEFUN (CPP-YIELD-RENAMED-RESERVED-WORD STRING-WRAPPER) ((WORD SYMBOL)))"
    (CL:FUNCTION CPP-YIELD-RENAMED-RESERVED-WORD) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-CREATE-RESERVED-WORD-TABLE"
    "(DEFUN (CPP-CREATE-RESERVED-WORD-TABLE STRING-HASH-TABLE) ())"
    (CL:FUNCTION CPP-CREATE-RESERVED-WORD-TABLE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-LOOKUP-RESERVED-WORD-TABLE"
    "(DEFUN (CPP-LOOKUP-RESERVED-WORD-TABLE STRING-WRAPPER) ((WORD SYMBOL)))"
    (CL:FUNCTION CPP-LOOKUP-RESERVED-WORD-TABLE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-UNIT"
    "(DEFUN (CPP-TRANSLATE-UNIT CONS) ((UNIT TRANSLATION-UNIT)))"
    (CL:FUNCTION CPP-TRANSLATE-UNIT) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-LIST-OF-TREES"
    "(DEFUN (CPP-TRANSLATE-LIST-OF-TREES CONS) ((TREES CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-LIST-OF-TREES) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-A-TREE"
    "(DEFUN (CPP-TRANSLATE-A-TREE OBJECT) ((TREE OBJECT)))"
    (CL:FUNCTION CPP-TRANSLATE-A-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-VERBATIM-TREE"
    "(DEFUN (CPP-TRANSLATE-VERBATIM-TREE CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-VERBATIM-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-SPECIAL-TREE"
    "(DEFUN (CPP-TRANSLATE-SPECIAL-TREE CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-SPECIAL-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-INLINE-TREE"
    "(DEFUN (CPP-TRANSLATE-INLINE-TREE CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-INLINE-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "TOKENIZE-VERBATIM-METHOD-BODY"
    "(DEFUN (TOKENIZE-VERBATIM-METHOD-BODY CONS) ((TREE CONS)))"
    (CL:FUNCTION TOKENIZE-VERBATIM-METHOD-BODY) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-INLINE-CALL-TREE"
    "(DEFUN (CPP-TRANSLATE-INLINE-CALL-TREE OBJECT) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-INLINE-CALL-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-PRINT-NATIVE-STREAM"
    "(DEFUN (CPP-TRANSLATE-PRINT-NATIVE-STREAM CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-PRINT-NATIVE-STREAM) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-DEFPRINT-UNIT"
    "(DEFUN (CPP-TRANSLATE-DEFPRINT-UNIT CONS) ((UNIT TRANSLATION-UNIT)))"
    (CL:FUNCTION CPP-TRANSLATE-DEFPRINT-UNIT) NULL)
   (DEFINE-FUNCTION-OBJECT "CLASS-DEFINITION-EXISTS?"
    "(DEFUN (CLASS-DEFINITION-EXISTS? BOOLEAN) ((EXCEPTIONNAME SYMBOL)))"
    (CL:FUNCTION CLASS-DEFINITION-EXISTS?) NULL)
   (DEFINE-FUNCTION-OBJECT "CREATE-EXCEPTION-CLASS"
    "(DEFUN CREATE-EXCEPTION-CLASS ((EXCEPTIONNAME SYMBOL)))"
    (CL:FUNCTION CREATE-EXCEPTION-CLASS) NULL)
   (DEFINE-FUNCTION-OBJECT "SETJMP"
    "(DEFUN (SETJMP INTEGER) ((ENVIRONMENT OBJECT)) :NATIVE? TRUE)" NULL
    NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-STELLA-TRY-TREE"
    "(DEFUN (CPP-TRANSLATE-STELLA-TRY-TREE CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-STELLA-TRY-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "LONGJMP"
    "(DEFUN (LONGJMP INTEGER) ((ENVIRONMENT OBJECT) (RESULT INTEGER)) :NATIVE? TRUE)"
    NULL NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-STELLA-THROW-TREE"
    "(DEFUN (CPP-TRANSLATE-STELLA-THROW-TREE CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-STELLA-THROW-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-CATCH"
    "(DEFUN (CPP-TRANSLATE-CATCH CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-CATCH) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-THROW"
    "(DEFUN (CPP-TRANSLATE-THROW CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-THROW) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-SIGNAL"
    "(DEFUN (CPP-TRANSLATE-SIGNAL CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-SIGNAL) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-UNWIND-PROTECT"
    "(DEFUN (CPP-TRANSLATE-UNWIND-PROTECT CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-UNWIND-PROTECT) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-CAST"
    "(DEFUN (CPP-TRANSLATE-CAST CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-CAST) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-MV-SETQ"
    "(DEFUN (CPP-TRANSLATE-MV-SETQ CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-MV-SETQ) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-MV-FUNCTION-CALL"
    "(DEFUN (CPP-TRANSLATE-MV-FUNCTION-CALL CONS) ((FUNCTIONCALL CONS) (VARIABLES CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-MV-FUNCTION-CALL) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-DEFINE-GLOBAL-VARIABLE-UNIT"
    "(DEFUN (CPP-TRANSLATE-DEFINE-GLOBAL-VARIABLE-UNIT CONS) ((UNIT TRANSLATION-UNIT)))"
    (CL:FUNCTION CPP-TRANSLATE-DEFINE-GLOBAL-VARIABLE-UNIT) NULL)
   (DEFINE-FUNCTION-OBJECT "SYMBOL-CASE?"
    "(DEFUN (SYMBOL-CASE? BOOLEAN) ((KEYFORM OBJECT)))"
    (CL:FUNCTION SYMBOL-CASE?) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-YIELD-SYMBOL-ID-FORM"
    "(DEFUN (CPP-YIELD-SYMBOL-ID-FORM CONS) ((SYMBOLID INTEGER)))"
    (CL:FUNCTION CPP-YIELD-SYMBOL-ID-FORM) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-CONDITION"
    "(DEFUN (CPP-TRANSLATE-CONDITION CONS) ((CONDITION CONS) (SYMBOLCASEP BOOLEAN)))"
    (CL:FUNCTION CPP-TRANSLATE-CONDITION) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-CASE-TREE"
    "(DEFUN (CPP-TRANSLATE-CASE-TREE CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-CASE-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-COND-TREE"
    "(DEFUN (CPP-TRANSLATE-COND-TREE CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-COND-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-LOOP"
    "(DEFUN (CPP-TRANSLATE-LOOP CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-LOOP) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-WHILE"
    "(DEFUN (CPP-TRANSLATE-WHILE CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-WHILE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-PROGN"
    "(DEFUN (CPP-TRANSLATE-PROGN CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-PROGN) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-BREAK"
    "(DEFUN (CPP-TRANSLATE-BREAK CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-BREAK) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-CONTINUE"
    "(DEFUN (CPP-TRANSLATE-CONTINUE CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-CONTINUE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-IF-TREE"
    "(DEFUN (CPP-TRANSLATE-IF-TREE CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-IF-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-CHOOSE-TREE"
    "(DEFUN (CPP-TRANSLATE-CHOOSE-TREE CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-CHOOSE-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-WHEN-TREE"
    "(DEFUN (CPP-TRANSLATE-WHEN-TREE CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-WHEN-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-UNLESS-TREE"
    "(DEFUN (CPP-TRANSLATE-UNLESS-TREE CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-UNLESS-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-FOREACH-TREE"
    "(DEFUN (CPP-TRANSLATE-FOREACH-TREE CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-FOREACH-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-YIELD-VA-START-TREE"
    "(DEFUN (CPP-YIELD-VA-START-TREE CONS) ((ITERATORVAR SYMBOL)))"
    (CL:FUNCTION CPP-YIELD-VA-START-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-YIELD-VA-END-TREE"
    "(DEFUN (CPP-YIELD-VA-END-TREE CONS) ((ITERATORVAR SYMBOL)))"
    (CL:FUNCTION CPP-YIELD-VA-END-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-YIELD-VA-ITERATOR-HELPER-VARIABLE"
    "(DEFUN (CPP-YIELD-VA-ITERATOR-HELPER-VARIABLE SYMBOL) ((ITERATORVAR SYMBOL)))"
    (CL:FUNCTION CPP-YIELD-VA-ITERATOR-HELPER-VARIABLE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-YIELD-VA-ITERATOR-DECLARATIONS"
    "(DEFUN (CPP-YIELD-VA-ITERATOR-DECLARATIONS CONS) ((ITERATORVAR SYMBOL)))"
    (CL:FUNCTION CPP-YIELD-VA-ITERATOR-DECLARATIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-ARGUMENT-LIST-TREE"
    "(DEFUN (CPP-TRANSLATE-ARGUMENT-LIST-TREE CONS) ((OPERATOR SYMBOL) (OWNER TYPE) (ARGUMENT OBJECT)))"
    (CL:FUNCTION CPP-TRANSLATE-ARGUMENT-LIST-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-THE-CODE"
    "(DEFUN (CPP-TRANSLATE-THE-CODE CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-THE-CODE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-SYS-POINTER-TO-FUNCTION"
    "(DEFUN (CPP-TRANSLATE-SYS-POINTER-TO-FUNCTION CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-SYS-POINTER-TO-FUNCTION) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-SYS-NEW"
    "(DEFUN (CPP-TRANSLATE-SYS-NEW CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-SYS-NEW) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-NEW-ARRAY"
    "(DEFUN (CPP-TRANSLATE-NEW-ARRAY CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-NEW-ARRAY) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-VOID-SYS"
    "(DEFUN (CPP-TRANSLATE-VOID-SYS CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-VOID-SYS) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-TYPED-SYS"
    "(DEFUN (CPP-TRANSLATE-TYPED-SYS CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-TYPED-SYS) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-BAD-SYS"
    "(DEFUN (CPP-TRANSLATE-BAD-SYS OBJECT) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-BAD-SYS) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-SYS-REFERENCED-SLOT-VALUE"
    "(DEFUN (CPP-TRANSLATE-SYS-REFERENCED-SLOT-VALUE CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-SYS-REFERENCED-SLOT-VALUE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-SYS-SLOT-VALUE"
    "(DEFUN (CPP-TRANSLATE-SYS-SLOT-VALUE CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-SYS-SLOT-VALUE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-SYS-SLOT-VALUE-SETTER"
    "(DEFUN (CPP-TRANSLATE-SYS-SLOT-VALUE-SETTER CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-SYS-SLOT-VALUE-SETTER) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-MAKE-TREE"
    "(DEFUN (CPP-TRANSLATE-MAKE-TREE CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-MAKE-TREE) NULL))
  :VOID)

(CL:DEFUN HELP-STARTUP-CPP-TRANSLATE6 ()
  (CL:PROGN
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-STARTUP-TIME-PROGN"
    "(DEFUN (CPP-TRANSLATE-STARTUP-TIME-PROGN CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-STARTUP-TIME-PROGN) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-STREAM-IS-STANDARD-OUTPUT?"
    "(DEFUN (CPP-STREAM-IS-STANDARD-OUTPUT? BOOLEAN) ((TREE OBJECT)))"
    (CL:FUNCTION CPP-STREAM-IS-STANDARD-OUTPUT?) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-PRINT-STREAM"
    "(DEFUN (CPP-TRANSLATE-PRINT-STREAM CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-PRINT-STREAM) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-SETQ-TREE"
    "(DEFUN (CPP-TRANSLATE-SETQ-TREE CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-SETQ-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-NULL"
    "(DEFUN (CPP-TRANSLATE-NULL CONS) ())"
    (CL:FUNCTION CPP-TRANSLATE-NULL) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (CPP-TRANSLATE-ATOMIC-TREE CONS) ((TREE OBJECT)))"
    (CL:FUNCTION CPP-TRANSLATE-ATOMIC-TREE) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (CPP-TRANSLATE-ATOMIC-TREE CONS) ((TREE KEYWORD)))"
    (CL:FUNCTION CPP-TRANSLATE-ATOMIC-TREE) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (CPP-TRANSLATE-ATOMIC-TREE CONS) ((TREE SURROGATE)))"
    (CL:FUNCTION CPP-TRANSLATE-ATOMIC-TREE) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (CPP-TRANSLATE-ATOMIC-TREE CONS) ((TREE SYMBOL)))"
    (CL:FUNCTION CPP-TRANSLATE-ATOMIC-TREE) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (CPP-TRANSLATE-ATOMIC-TREE CONS) ((TREE QUOTED-EXPRESSION)))"
    (CL:FUNCTION CPP-TRANSLATE-ATOMIC-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-LET-TREE"
    "(DEFUN (CPP-TRANSLATE-LET-TREE CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-LET-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "SYMBOLIZE"
    "(DEFUN (SYMBOLIZE SYMBOL) ((SURROGATE SURROGATE)))"
    (CL:FUNCTION SYMBOLIZE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-TYPE-SPEC"
    "(DEFUN (CPP-TRANSLATE-TYPE-SPEC STRING-WRAPPER) ((TYPESPEC TYPE-SPEC)))"
    (CL:FUNCTION CPP-TRANSLATE-TYPE-SPEC) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC"
    "(DEFUN (CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC STRING-WRAPPER) ((TYPESPEC TYPE-SPEC)))"
    (CL:FUNCTION CPP-TRANSLATE-AND-POINTERIZE-TYPE-SPEC) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-AND-REFERENCIZE-TYPE-SPEC"
    "(DEFUN (CPP-TRANSLATE-AND-REFERENCIZE-TYPE-SPEC STRING-WRAPPER) ((TYPESPEC TYPE-SPEC)))"
    (CL:FUNCTION CPP-TRANSLATE-AND-REFERENCIZE-TYPE-SPEC) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-ARRAY-TYPE"
    "(DEFUN (CPP-TRANSLATE-ARRAY-TYPE STRING-WRAPPER) ((ARRAYTYPE PARAMETRIC-TYPE-SPECIFIER)))"
    (CL:FUNCTION CPP-TRANSLATE-ARRAY-TYPE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATED-ARRAY-TYPE?"
    "(DEFUN (CPP-TRANSLATED-ARRAY-TYPE? BOOLEAN) ((TRANSLATEDTYPE OBJECT)))"
    (CL:FUNCTION CPP-TRANSLATED-ARRAY-TYPE?) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-GENERATE-ARRAY-TYPED-ENTITY"
    "(DEFUN (CPP-GENERATE-ARRAY-TYPED-ENTITY STRING) ((ENTITY STRING) (TRANSLATEDARRAYTYPE STRING)))"
    (CL:FUNCTION CPP-GENERATE-ARRAY-TYPED-ENTITY) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-CREATE-CHARACTER-SUBSTITUTION-TABLE"
    "(DEFUN (CPP-CREATE-CHARACTER-SUBSTITUTION-TABLE STRING) ())"
    (CL:FUNCTION CPP-CREATE-CHARACTER-SUBSTITUTION-TABLE) NULL)
   (DEFINE-FUNCTION-OBJECT "REPLACE-FIRST-CHARACTER-WITH-STRING"
    "(DEFUN (REPLACE-FIRST-CHARACTER-WITH-STRING STRING) ((STRING STRING) (NEWPREFIX STRING)))"
    (CL:FUNCTION REPLACE-FIRST-CHARACTER-WITH-STRING) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-SUBSTITUTE-FORBIDDEN-CHARACTERS"
    "(DEFUN (CPP-SUBSTITUTE-FORBIDDEN-CHARACTERS STRING) ((NAME STRING) (CASECONVENTION KEYWORD)))"
    (CL:FUNCTION CPP-SUBSTITUTE-FORBIDDEN-CHARACTERS) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-CHANGE-CASE"
    "(DEFUN (CPP-CHANGE-CASE STRING) ((SYMBOL GENERALIZED-SYMBOL) (CASECONVENTION KEYWORD)))"
    (CL:FUNCTION CPP-CHANGE-CASE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-YIELD-NAMESPACE-PREFIX"
    "(DEFUN (CPP-YIELD-NAMESPACE-PREFIX STRING) ((SYMBOL SYMBOL)))"
    (CL:FUNCTION CPP-YIELD-NAMESPACE-PREFIX) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-NAME"
    "(DEFUN (CPP-TRANSLATE-NAME STRING-WRAPPER) ((NAMESYMBOL SYMBOL)))"
    (CL:FUNCTION CPP-TRANSLATE-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-GLOBAL-NAME"
    "(DEFUN (CPP-TRANSLATE-GLOBAL-NAME STRING-WRAPPER) ((NAMESYMBOL SYMBOL)))"
    (CL:FUNCTION CPP-TRANSLATE-GLOBAL-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-CLASS-PARAMETER-NAME"
    "(DEFUN (CPP-TRANSLATE-CLASS-PARAMETER-NAME STRING-WRAPPER) ((NAMESYMBOL SYMBOL)))"
    (CL:FUNCTION CPP-TRANSLATE-CLASS-PARAMETER-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-RETURN-PARAMETER-NAME"
    "(DEFUN (CPP-TRANSLATE-RETURN-PARAMETER-NAME STRING-WRAPPER) ((NAMESYMBOL SYMBOL) (PARAMETERNUMBER INTEGER)))"
    (CL:FUNCTION CPP-TRANSLATE-RETURN-PARAMETER-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-SYMBOL-CONSTANT-NAME"
    "(DEFUN (CPP-TRANSLATE-SYMBOL-CONSTANT-NAME STRING-WRAPPER) ((SYMBOL GENERALIZED-SYMBOL)))"
    (CL:FUNCTION CPP-TRANSLATE-SYMBOL-CONSTANT-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-SYMBOL-CONSTANT-ID"
    "(DEFUN (CPP-TRANSLATE-SYMBOL-CONSTANT-ID STRING-WRAPPER) ((SYMBOL GENERALIZED-SYMBOL)))"
    (CL:FUNCTION CPP-TRANSLATE-SYMBOL-CONSTANT-ID) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-SYMBOL-NAME"
    "(DEFUN (CPP-TRANSLATE-SYMBOL-NAME STRING-WRAPPER) ((SYMBOL SYMBOL)))"
    (CL:FUNCTION CPP-TRANSLATE-SYMBOL-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-SYMBOL-ID"
    "(DEFUN (CPP-TRANSLATE-SYMBOL-ID STRING-WRAPPER) ((SYMBOL SYMBOL)))"
    (CL:FUNCTION CPP-TRANSLATE-SYMBOL-ID) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-SURROGATE-NAME"
    "(DEFUN (CPP-TRANSLATE-SURROGATE-NAME STRING-WRAPPER) ((SURROGATE SURROGATE)))"
    (CL:FUNCTION CPP-TRANSLATE-SURROGATE-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-SURROGATE-ID"
    "(DEFUN (CPP-TRANSLATE-SURROGATE-ID STRING-WRAPPER) ((SURROGATE SURROGATE)))"
    (CL:FUNCTION CPP-TRANSLATE-SURROGATE-ID) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-KEYWORD-NAME"
    "(DEFUN (CPP-TRANSLATE-KEYWORD-NAME STRING-WRAPPER) ((KEYWORD KEYWORD)))"
    (CL:FUNCTION CPP-TRANSLATE-KEYWORD-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-KEYWORD-ID"
    "(DEFUN (CPP-TRANSLATE-KEYWORD-ID STRING-WRAPPER) ((KEYWORD KEYWORD)))"
    (CL:FUNCTION CPP-TRANSLATE-KEYWORD-ID) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-CLASS-TYPENAME"
    "(DEFUN (CPP-TRANSLATE-CLASS-TYPENAME STRING-WRAPPER) ((NAMESYMBOL GENERALIZED-SYMBOL)))"
    (CL:FUNCTION CPP-TRANSLATE-CLASS-TYPENAME) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-CLASS-NAME"
    "(DEFUN (CPP-TRANSLATE-CLASS-NAME STRING-WRAPPER) ((NAMESYMBOL GENERALIZED-SYMBOL)))"
    (CL:FUNCTION CPP-TRANSLATE-CLASS-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-REFERENCE-TYPE?"
    "(DEFUN (CPP-REFERENCE-TYPE? BOOLEAN) ((TYPESPEC TYPE-SPEC)))"
    (CL:FUNCTION CPP-REFERENCE-TYPE?) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-REFERENCIZE-TYPE"
    "(DEFUN (CPP-REFERENCIZE-TYPE STRING-WRAPPER) ((TYPESPEC TYPE-SPEC)))"
    (CL:FUNCTION CPP-REFERENCIZE-TYPE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-FUNCTION-PARAMETER"
    "(DEFUN (CPP-TRANSLATE-FUNCTION-PARAMETER OBJECT) ((NAME SYMBOL) (TYPE TYPE-SPEC) (METHOD METHOD-SLOT)))"
    (CL:FUNCTION CPP-TRANSLATE-FUNCTION-PARAMETER) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-RETURN-PARAMETER"
    "(DEFUN (CPP-TRANSLATE-RETURN-PARAMETER CONS) ((PARAMETERNUMBER INTEGER) (PARAMETERTYPE TYPE-SPEC)))"
    (CL:FUNCTION CPP-TRANSLATE-RETURN-PARAMETER) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-FUNCTION-PARAMETERS"
    "(DEFUN (CPP-TRANSLATE-FUNCTION-PARAMETERS CONS) ((METHOD METHOD-SLOT)))"
    (CL:FUNCTION CPP-TRANSLATE-FUNCTION-PARAMETERS) NULL)
   (DEFINE-FUNCTION-OBJECT "SLOT-READER-FROM-NAME?"
    "(DEFUN (SLOT-READER-FROM-NAME? BOOLEAN) ((METHODNAME SYMBOL) (METHODOWNER TYPE-SPEC)))"
    (CL:FUNCTION SLOT-READER-FROM-NAME?) NULL)
   (DEFINE-FUNCTION-OBJECT "SLOT-READER?"
    "(DEFUN (SLOT-READER? BOOLEAN) ((METHOD METHOD-SLOT)))"
    (CL:FUNCTION SLOT-READER?) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-CONSTRUCTOR-NAME"
    "(DEFUN (CPP-TRANSLATE-CONSTRUCTOR-NAME STRING-WRAPPER) ((CONSTRUCTOR METHOD-SLOT)))"
    (CL:FUNCTION CPP-TRANSLATE-CONSTRUCTOR-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-FUNCTION-NAME-FROM-NAME"
    "(DEFUN (CPP-TRANSLATE-FUNCTION-NAME-FROM-NAME STRING-WRAPPER) ((FUNCTIONNAME SYMBOL)))"
    (CL:FUNCTION CPP-TRANSLATE-FUNCTION-NAME-FROM-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-FUNCTION-NAME"
    "(DEFUN (CPP-TRANSLATE-FUNCTION-NAME STRING-WRAPPER) ((FUNCTION METHOD-SLOT)))"
    (CL:FUNCTION CPP-TRANSLATE-FUNCTION-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-METHOD-NAME-FROM-NAME"
    "(DEFUN (CPP-TRANSLATE-METHOD-NAME-FROM-NAME STRING-WRAPPER) ((METHODNAME SYMBOL) (METHODOWNER TYPE-SPEC)))"
    (CL:FUNCTION CPP-TRANSLATE-METHOD-NAME-FROM-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-METHOD-NAME"
    "(DEFUN (CPP-TRANSLATE-METHOD-NAME STRING-WRAPPER) ((METHOD METHOD-SLOT)))"
    (CL:FUNCTION CPP-TRANSLATE-METHOD-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "DELETE-QUOTED-NULL-STATEMENTS"
    "(DEFUN (DELETE-QUOTED-NULL-STATEMENTS CONS) ((TREES CONS)))"
    (CL:FUNCTION DELETE-QUOTED-NULL-STATEMENTS) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-METHOD-OBJECT-IS-FUNCTION?"
    "(DEFUN (CPP-METHOD-OBJECT-IS-FUNCTION? BOOLEAN) ((METHOD METHOD-SLOT)))"
    (CL:FUNCTION CPP-METHOD-OBJECT-IS-FUNCTION?) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-METHOD-OBJECT-IS-OVERLOADED-FUNCTION?"
    "(DEFUN (CPP-METHOD-OBJECT-IS-OVERLOADED-FUNCTION? BOOLEAN) ((METHOD METHOD-SLOT)))"
    (CL:FUNCTION CPP-METHOD-OBJECT-IS-OVERLOADED-FUNCTION?) NULL)
   (DEFINE-FUNCTION-OBJECT
    "WRAP-METHOD-BODY-WITH-CPP-AUXILIARY-DECLARATIONS"
    "(DEFUN (WRAP-METHOD-BODY-WITH-CPP-AUXILIARY-DECLARATIONS CONS) ((METHODBODY CONS) (DECLARATIONS CONS)))"
    (CL:FUNCTION WRAP-METHOD-BODY-WITH-CPP-AUXILIARY-DECLARATIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-DEFINE-METHOD-UNIT"
    "(DEFUN (CPP-TRANSLATE-DEFINE-METHOD-UNIT CONS) ((UNIT TRANSLATION-UNIT)))"
    (CL:FUNCTION CPP-TRANSLATE-DEFINE-METHOD-UNIT) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-RETURN-TREE"
    "(DEFUN (CPP-TRANSLATE-RETURN-TREE CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-RETURN-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-ACTUAL-PARAMETERS"
    "(DEFUN (CPP-TRANSLATE-ACTUAL-PARAMETERS CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-ACTUAL-PARAMETERS) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-VARIABLE-LENGTH-ACTUALS"
    "(DEFUN (CPP-TRANSLATE-VARIABLE-LENGTH-ACTUALS CONS) ((ACTUALS CONS) (METHOD METHOD-SLOT)))"
    (CL:FUNCTION CPP-TRANSLATE-VARIABLE-LENGTH-ACTUALS) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-CALL-METHOD-SETTER"
    "(DEFUN (CPP-TRANSLATE-CALL-METHOD-SETTER CONS) ((TREE CONS)))"
    (CL:FUNCTION CPP-TRANSLATE-CALL-METHOD-SETTER) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-CREATE-OVERLOADED-FUNCTION-NAME"
    "(DEFUN (CPP-CREATE-OVERLOADED-FUNCTION-NAME SYMBOL) ((FUNCTIONNAME SYMBOL) (CLASSTYPE TYPE)))"
    (CL:FUNCTION CPP-CREATE-OVERLOADED-FUNCTION-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-METHOD-CALL"
    "(DEFUN (CPP-TRANSLATE-METHOD-CALL CONS) ((TREE CONS) (REFERENCED? BOOLEAN)))"
    (CL:FUNCTION CPP-TRANSLATE-METHOD-CALL) NULL))
  :VOID)

(CL:DEFUN STARTUP-CPP-TRANSLATE ()
  (CL:LET* ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2) (HELP-STARTUP-CPP-TRANSLATE1)
    (HELP-STARTUP-CPP-TRANSLATE2) (HELP-STARTUP-CPP-TRANSLATE3)
    (HELP-STARTUP-CPP-TRANSLATE4))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 4)
    (CL:SETQ *OPERATOR-TABLE*
     (DICTIONARY SGT-CPP-TRANSLATE-STELLA-KEY-VALUE-LIST
      SYM-CPP-TRANSLATE-STELLA-++ (CONS (WRAP-STRING "++") NIL)
      SYM-CPP-TRANSLATE-STELLA--- (CONS (WRAP-STRING "--") NIL)
      SYM-CPP-TRANSLATE-STELLA-+ (CONS (WRAP-STRING "+") NIL)
      SYM-CPP-TRANSLATE-STELLA-- (CONS (WRAP-STRING "-") NIL)
      SYM-CPP-TRANSLATE-STELLA-* (CONS (WRAP-STRING "*") NIL)
      SYM-CPP-TRANSLATE-STELLA-/ (CONS (WRAP-STRING "/") NIL)
      SYM-CPP-TRANSLATE-STELLA-EQ? (CONS (WRAP-STRING "==") NIL)
      SYM-CPP-TRANSLATE-STELLA-!= (CONS (WRAP-STRING "!=") NIL)
      SYM-CPP-TRANSLATE-STELLA-> (CONS (WRAP-STRING ">") NIL)
      SYM-CPP-TRANSLATE-STELLA->= (CONS (WRAP-STRING ">=") NIL)
      SYM-CPP-TRANSLATE-STELLA-=> (CONS (WRAP-STRING ">=") NIL)
      SYM-CPP-TRANSLATE-STELLA-< (CONS (WRAP-STRING "<") NIL)
      SYM-CPP-TRANSLATE-STELLA-=< (CONS (WRAP-STRING "<=") NIL)
      SYM-CPP-TRANSLATE-STELLA-<= (CONS (WRAP-STRING "<=") NIL)
      SYM-CPP-TRANSLATE-STELLA-AND (CONS (WRAP-STRING "&&") NIL)
      SYM-CPP-TRANSLATE-STELLA-OR (CONS (WRAP-STRING "||") NIL)
      SYM-CPP-TRANSLATE-STELLA-NOT (CONS (WRAP-STRING "!") NIL)
      SYM-CPP-TRANSLATE-STELLA-CHOOSE
      (CONS (WRAP-STRING "?") (CONS (WRAP-STRING ":") NIL))))
    (CL:SETQ *CPP-RESERVED-WORD-TABLE* (CPP-CREATE-RESERVED-WORD-TABLE))
    (CL:SETQ *CPP-CHARACTER-SUBSTITUTION-TABLE*
     (CPP-CREATE-CHARACTER-SUBSTITUTION-TABLE)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7) (HELP-STARTUP-CPP-TRANSLATE5)
    (HELP-STARTUP-CPP-TRANSLATE6)
    (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-NORMAL-METHOD-CALL"
     "(DEFUN (CPP-TRANSLATE-NORMAL-METHOD-CALL CONS) ((METHODNAME SYMBOL) (OWNER TYPE) (ARGUMENTS CONS) (REFERENCED? BOOLEAN)))"
     (CL:FUNCTION CPP-TRANSLATE-NORMAL-METHOD-CALL) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-DEFINED?-METHOD-CALL"
     "(DEFUN (CPP-TRANSLATE-DEFINED?-METHOD-CALL CONS) ((ARGUMENTTYPE TYPE) (ARGUMENT OBJECT) (NULL? BOOLEAN)))"
     (CL:FUNCTION CPP-TRANSLATE-DEFINED?-METHOD-CALL) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-NTH-METHOD-CALL"
     "(DEFUN (CPP-TRANSLATE-NTH-METHOD-CALL CONS) ((OPERATOR SYMBOL) (OWNER TYPE) (ARGUMENTS CONS)))"
     (CL:FUNCTION CPP-TRANSLATE-NTH-METHOD-CALL) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-AREF-METHOD-CALL"
     "(DEFUN (CPP-TRANSLATE-AREF-METHOD-CALL CONS) ((OPERATOR SYMBOL) (OWNER TYPE) (ARGUMENTS CONS)))"
     (CL:FUNCTION CPP-TRANSLATE-AREF-METHOD-CALL) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-CODE-SIGNATURE"
     "(DEFUN (CPP-TRANSLATE-CODE-SIGNATURE CONS) ((SIGNATURE CONS)))"
     (CL:FUNCTION CPP-TRANSLATE-CODE-SIGNATURE) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-METHOD-CODE-SIGNATURE"
     "(DEFUN (CPP-TRANSLATE-METHOD-CODE-SIGNATURE CONS) ((SIGNATURE CONS)))"
     (CL:FUNCTION CPP-TRANSLATE-METHOD-CODE-SIGNATURE) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-CALL-FUNCTION-CODE"
     "(DEFUN (CPP-TRANSLATE-CALL-FUNCTION-CODE CONS) ((TREE CONS)))"
     (CL:FUNCTION CPP-TRANSLATE-CALL-FUNCTION-CODE) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-CALL-METHOD-CODE"
     "(DEFUN (CPP-TRANSLATE-CALL-METHOD-CODE CONS) ((TREE CONS)))"
     (CL:FUNCTION CPP-TRANSLATE-CALL-METHOD-CODE) NULL)
    (DEFINE-FUNCTION-OBJECT "GET-LAST-N-ELEMENTS"
     "(DEFUN (GET-LAST-N-ELEMENTS CONS) ((LIST CONS) (N INTEGER)))"
     (CL:FUNCTION GET-LAST-N-ELEMENTS) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-FUNCTION-CALL"
     "(DEFUN (CPP-TRANSLATE-FUNCTION-CALL CONS) ((TREE CONS) (METHOD METHOD-SLOT)))"
     (CL:FUNCTION CPP-TRANSLATE-FUNCTION-CALL) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-OPERATOR-TREE"
     "(DEFUN (CPP-TRANSLATE-OPERATOR-TREE CONS) ((TREE CONS)))"
     (CL:FUNCTION CPP-TRANSLATE-OPERATOR-TREE) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-OPERATOR-CALL"
     "(DEFUN (CPP-TRANSLATE-OPERATOR-CALL CONS) ((OPERATORNAMES CONS) (ARGUMENTS CONS) (ARITY INTEGER)))"
     (CL:FUNCTION CPP-TRANSLATE-OPERATOR-CALL) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-HARDCODED-SYMBOL-REFERENCE"
     "(DEFUN (CPP-TRANSLATE-HARDCODED-SYMBOL-REFERENCE CONS) ((OPERATOR SYMBOL) (OFFSET INTEGER)))"
     (CL:FUNCTION CPP-TRANSLATE-HARDCODED-SYMBOL-REFERENCE) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-CPP-TRANSLATE"
     "(DEFUN STARTUP-CPP-TRANSLATE () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-CPP-TRANSLATE) NULL)
    (CL:LET*
     ((FUNCTION
       (LOOKUP-FUNCTION SYM-CPP-TRANSLATE-STELLA-STARTUP-CPP-TRANSLATE)))
     (SET-DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
      SYM-CPP-TRANSLATE-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "Startup-Cpp-Translate") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *DUMMYDECLARATIONS* CONS NULL :DOCUMENTATION \"Temporary List of declarations for unused return parameters\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *CURRENTDUMMYINDEX* INTEGER NULL-INTEGER :DOCUMENTATION \"Current index of dummy parameter for unused return value\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *OPERATOR-TABLE* KEY-VALUE-LIST (DICTIONARY @KEY-VALUE-LIST (QUOTE ++) (CONS (WRAP-LITERAL \"++\") NIL) (QUOTE --) (CONS (WRAP-LITERAL \"--\") NIL) (QUOTE +) (CONS (WRAP-LITERAL \"+\") NIL) (QUOTE -) (CONS (WRAP-LITERAL \"-\") NIL) (QUOTE *) (CONS (WRAP-LITERAL \"*\") NIL) (QUOTE /) (CONS (WRAP-LITERAL \"/\") NIL) (QUOTE EQ?) (CONS (WRAP-LITERAL \"==\") NIL) (QUOTE !=) (CONS (WRAP-LITERAL \"!=\") NIL) (QUOTE >) (CONS (WRAP-LITERAL \">\") NIL) (QUOTE >=) (CONS (WRAP-LITERAL \">=\") NIL) (QUOTE =>) (CONS (WRAP-LITERAL \">=\") NIL) (QUOTE <) (CONS (WRAP-LITERAL \"<\") NIL) (QUOTE =<) (CONS (WRAP-LITERAL \"<=\") NIL) (QUOTE <=) (CONS (WRAP-LITERAL \"<=\") NIL) (QUOTE AND) (CONS (WRAP-LITERAL \"&&\") NIL) (QUOTE OR) (CONS (WRAP-LITERAL \"||\") NIL) (QUOTE NOT) (CONS (WRAP-LITERAL \"!\") NIL) (QUOTE CHOOSE) (CONS (WRAP-LITERAL \"?\") (CONS (WRAP-LITERAL \":\") NIL))) :DOCUMENTATION \"Mapping from STELLA operators to C++ operators\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *CPP-RESERVED-WORD-TABLE* (STRING-HASH-TABLE OF STRING STRING-WRAPPER) (CPP-CREATE-RESERVED-WORD-TABLE))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *CPP-CHARACTER-SUBSTITUTION-TABLE* STRING (CPP-CREATE-CHARACTER-SUBSTITUTION-TABLE))")))
  :VOID)
