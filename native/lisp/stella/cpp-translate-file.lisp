;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

#|--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1996-2000              | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied "AS IS",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR KWD-CPP-TRANSLATE-FILE-CPP NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-FILE-STELLA-CPPTRANS NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-FILE-COMMON-LISP NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-FILE-FUNCTION NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-FILE-CPP-CODE NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-FILE-CPP-HEADER NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-FILE-STELLA-CPP_FUNCTION NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-FILE-STELLA-CPP_DEFPRINT NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-FILE-STELLA-METHOD NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-FILE-STELLA-PRINT-METHOD NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-FILE-STELLA-MACRO NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-FILE-STELLA-VERBATIM NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-FILE-STELLA-CLASS NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-FILE-STELLA-GLOBAL-VARIABLE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-FILE-STELLA-TYPE NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-FILE-CPP-STANDALONE NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-FILE-TWO-PASS? NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-FILE-FORCE-TRANSLATION? NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-FILE-PRODUCTION-SETTINGS? NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-FILE-STELLA NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-FILE-STELLA-STARTUP-CPP-TRANSLATE-FILE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-FILE-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STELLA-MODULE* *CURRENTFILE* *MODULE* TRUE-WRAPPER
  *TRANSLATIONUNITS* *CURRENTSYSTEMDEFINITION* EOL
  *TRANSLATOROUTPUTLANGUAGE* STANDARD-OUTPUT))

;;; (DEFSPECIAL *CURRENT-STREAM* ...)

(CL:DEFVAR *CURRENT-STREAM* NULL)

;;; (DEFGLOBAL *CPP-TRANSLATED-FILE-SUFFIX* ...)

(CL:PROGN (CL:DEFVAR *CPP-TRANSLATED-FILE-SUFFIX* "") (CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING *CPP-TRANSLATED-FILE-SUFFIX*)))

;;; (DEFUN CPPTRANS ...)

(CL:DEFUN %CPPTRANS (STATEMENT)
  "Translate `statement' to C++ and print the result."
  (CL:LET*
   ((*TRANSLATOROUTPUTLANGUAGE* *TRANSLATOROUTPUTLANGUAGE*)
    (*CURRENT-STREAM* STANDARD-OUTPUT))
   (CL:DECLARE (CL:SPECIAL *TRANSLATOROUTPUTLANGUAGE* *CURRENT-STREAM*))
   (%SET-TRANSLATOR-OUTPUT-LANGUAGE KWD-CPP-TRANSLATE-FILE-CPP)
   (INCREMENTALLY-TRANSLATE (CONS-TREE-TO-LISP-CODE STATEMENT) FALSE))
  :VOID)

(CL:DEFMACRO CPPTRANS (CL:&WHOLE EXPRESSION CL:&REST IGNORE)
  "Translate `statement' to C++ and print the result."
  (CL:DECLARE (CL:IGNORE IGNORE))
  (CL:LET ((*IGNORETRANSLATIONERRORS?* FALSE))
   (INCREMENTALLY-TRANSLATE EXPRESSION FALSE)))

(CL:SETF (CL:MACRO-FUNCTION (CL:QUOTE /STELLA/CPPTRANS)) (CL:MACRO-FUNCTION (CL:QUOTE CPPTRANS)))

;;; (DEFUN (CPP-MAKE-CODE-OUTPUT-FILE-NAME FILE-NAME) ...)

(CL:DEFUN CPP-MAKE-CODE-OUTPUT-FILE-NAME (FILENAME)
  (CL:RETURN-FROM CPP-MAKE-CODE-OUTPUT-FILE-NAME
   (MAKE-FILE-NAME FILENAME KWD-CPP-TRANSLATE-FILE-CPP-CODE FALSE)))

;;; (DEFUN (CPP-MAKE-HEADER-OUTPUT-FILE-NAME FILE-NAME) ...)

(CL:DEFUN CPP-MAKE-HEADER-OUTPUT-FILE-NAME (FILENAME)
  (CL:RETURN-FROM CPP-MAKE-HEADER-OUTPUT-FILE-NAME
   (MAKE-FILE-NAME FILENAME KWD-CPP-TRANSLATE-FILE-CPP-HEADER FALSE)))

;;; (DEFUN CPP-OUTPUT-INCLUDE-DIRECTIVE ...)

(CL:DEFUN CPP-OUTPUT-INCLUDE-DIRECTIVE (FILENAME STRIPDIRECTORY?)
  (CL:WHEN STRIPDIRECTORY?
   (CL:SETQ FILENAME (FILE-NAME-WITHOUT-DIRECTORY FILENAME)))
  (%%PRINT-STREAM (%NATIVE-STREAM *CURRENT-STREAM*) "#include \"" FILENAME
   "\"" EOL)
  :VOID)

;;; (DEFUN CPP-STANDALONE-OUTPUT-IMPORT-DECLARATIONS ...)

(CL:DEFUN CPP-STANDALONE-OUTPUT-IMPORT-DECLARATIONS (HEADERFILENAME)
  (CPP-OUTPUT-INCLUDE-DIRECTIVE
   (MAKE-FILE-NAME "cpp-standalone" KWD-CPP-TRANSLATE-FILE-CPP-HEADER
    TRUE)
   TRUE)
  (CPP-OUTPUT-INCLUDE-DIRECTIVE HEADERFILENAME TRUE)
  (%%PRINT-STREAM (%NATIVE-STREAM *CURRENT-STREAM*) EOL)
  :VOID)

;;; (DEFUN (CPP-RELATIVIZE-HEADER-FILE FILE-NAME) ...)

(CL:DEFUN CPP-RELATIVIZE-HEADER-FILE (HEADERFILE SYSTEMNAME)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SYSTEMNAME))
  (CL:WHEN (CL:EQ SYSTEMNAME STELLA::NULL-STRING)
   (CL:SETQ SYSTEMNAME (%NAME *CURRENTSYSTEMDEFINITION*)))
  (CL:LET*
   ((*CURRENTSYSTEMDEFINITION* (GET-SYSTEM-DEFINITION SYSTEMNAME))
    (*CURRENTSYSTEMDEFINITIONSUBDIRECTORY*
     (CL:IF (CL:NOT (CL:EQ *CURRENTSYSTEMDEFINITION* NULL))
      (%DIRECTORY *CURRENTSYSTEMDEFINITION*) STELLA::NULL-STRING)))
   (CL:DECLARE
    (CL:SPECIAL *CURRENTSYSTEMDEFINITION*
     *CURRENTSYSTEMDEFINITIONSUBDIRECTORY*))
   (CL:DECLARE
    (CL:TYPE CL:SIMPLE-STRING *CURRENTSYSTEMDEFINITIONSUBDIRECTORY*))
   (CL:IF (CL:NOT (CL:EQ *CURRENTSYSTEMDEFINITION* NULL))
    (CL:PROGN
     (CL:LET*
      ((DIRECTORYFILE
        (MAKE-FILE-NAME "dummy" KWD-CPP-TRANSLATE-FILE-CPP-HEADER TRUE)))
      (CL:SETQ HEADERFILE
       (RELATIVIZE-FILE-NAME HEADERFILE
        (DIRECTORY-PARENT-DIRECTORY DIRECTORYFILE 2)))))
    (CL:WARN "Can't find a system named `~A'~%" SYSTEMNAME)))
  (CL:RETURN-FROM CPP-RELATIVIZE-HEADER-FILE HEADERFILE))

;;; (DEFUN CPP-OUTPUT-IMPORT-DECLARATIONS ...)

(CL:DEFUN CPP-OUTPUT-IMPORT-DECLARATIONS (SYSTEMNAME)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SYSTEMNAME))
  (CL:WHEN (CL:EQ SYSTEMNAME STELLA::NULL-STRING)
   (CL:SETQ SYSTEMNAME (%NAME *CURRENTSYSTEMDEFINITION*)))
  (CL:LET*
   ((*CURRENTSYSTEMDEFINITION* (GET-SYSTEM-DEFINITION SYSTEMNAME))
    (*CURRENTSYSTEMDEFINITIONSUBDIRECTORY*
     (CL:IF (CL:NOT (CL:EQ *CURRENTSYSTEMDEFINITION* NULL))
      (%DIRECTORY *CURRENTSYSTEMDEFINITION*) STELLA::NULL-STRING)))
   (CL:DECLARE
    (CL:SPECIAL *CURRENTSYSTEMDEFINITION*
     *CURRENTSYSTEMDEFINITIONSUBDIRECTORY*))
   (CL:DECLARE
    (CL:TYPE CL:SIMPLE-STRING *CURRENTSYSTEMDEFINITIONSUBDIRECTORY*))
   (CL:IF (CL:NOT (CL:EQ *CURRENTSYSTEMDEFINITION* NULL))
    (CL:PROGN
     (CPP-OUTPUT-INCLUDE-DIRECTIVE
      (CPP-RELATIVIZE-HEADER-FILE
       (MAKE-FILE-NAME (CPP-YIELD-SYSTEM-HEADER-FILE-NAME SYSTEMNAME)
        KWD-CPP-TRANSLATE-FILE-CPP-HEADER TRUE)
       SYSTEMNAME)
      FALSE)
     (%%PRINT-STREAM (%NATIVE-STREAM *CURRENT-STREAM*) EOL))
    (CL:WARN "Can't find a system named `~A'~%" SYSTEMNAME)))
  :VOID)

;;; (DEFUN CPP-OUTPUT-CLASS-HEAD-DECLARATIONS ...)

(CL:DEFUN CPP-OUTPUT-CLASS-HEAD-DECLARATIONS (CLASSES)
  (CL:WHEN (CL:NOT (CL:EQ CLASSES NIL))
   (%%PRINT-STREAM (%NATIVE-STREAM *CURRENT-STREAM*) "// Class headers:"
    EOL))
  (CL:LET* ((CLASS NULL) (ITER-000 CLASSES))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:PROGN (CL:SETQ CLASS (%%VALUE ITER-000))
     (CL:SETQ ITER-000 (%%REST ITER-000)))
    (%%PRINT-STREAM (%NATIVE-STREAM *CURRENT-STREAM*) "class "
     (%WRAPPER-VALUE (%%VALUE (%%REST CLASS))) ";" EOL)))
  (%%PRINT-STREAM (%NATIVE-STREAM *CURRENT-STREAM*) EOL)
  :VOID)

;;; (DEFUN CPP-OUTPUT-FUNCTION-SIGNATURES ...)

(CL:DEFUN CPP-OUTPUT-FUNCTION-SIGNATURES (METHODSANDFUNCTIONS)
  (CL:WHEN (CL:NOT (CL:EQ METHODSANDFUNCTIONS NIL))
   (%%PRINT-STREAM (%NATIVE-STREAM *CURRENT-STREAM*)
    "// Function signatures:" EOL))
  (CL:LET* ((METHODORFUNCTION NULL) (ITER-000 METHODSANDFUNCTIONS))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:PROGN (CL:SETQ METHODORFUNCTION (%%VALUE ITER-000))
     (CL:SETQ ITER-000 (%%REST ITER-000)))
    (CL:LET* ((TEST-VALUE-000 (%%VALUE METHODORFUNCTION)))
     (CL:COND
      ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-FILE-STELLA-CPP_FUNCTION)
       (CPP-OUTPUT-FUNCTION-SIGNATURE (%%REST METHODORFUNCTION))
       (%%PRINT-STREAM (%NATIVE-STREAM *CURRENT-STREAM*) ";" EOL))
      ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-FILE-STELLA-CPP_DEFPRINT)
       (CPP-OUTPUT-DEFPRINT-SIGNATURE (%%REST METHODORFUNCTION))
       (%%PRINT-STREAM (%NATIVE-STREAM *CURRENT-STREAM*) ";" EOL))
      (CL:T)))))
  (%%PRINT-STREAM (%NATIVE-STREAM *CURRENT-STREAM*) EOL)
  :VOID)

;;; (DEFUN CPP-OUTPUT-GLOBAL-DECLARATIONS ...)

(CL:DEFUN CPP-OUTPUT-GLOBAL-DECLARATIONS (GLOBALS)
  (CL:WHEN (CL:NOT (CL:EQ GLOBALS NIL))
   (%%PRINT-STREAM (%NATIVE-STREAM *CURRENT-STREAM*)
    "// Global declarations:" EOL))
  (CL:LET* ((GLOBAL NULL) (ITER-000 GLOBALS))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:PROGN (CL:SETQ GLOBAL (%%VALUE ITER-000))
     (CL:SETQ ITER-000 (%%REST ITER-000)))
    (CPP-OUTPUT-GLOBAL-DECLARATION GLOBAL)))
  (%%PRINT-STREAM (%NATIVE-STREAM *CURRENT-STREAM*) EOL)
  :VOID)

;;; (DEFUN CPP-OUTPUT-ALL-UNITS-TO-FILE ...)

(CL:DEFUN CPP-OUTPUT-ALL-UNITS-TO-FILE (FILENAME)
  (CL:LET*
   ((CODEOUTPUTFILE
     (MAKE-FILE-NAME FILENAME KWD-CPP-TRANSLATE-FILE-CPP-CODE FALSE))
    (HEADEROUTPUTFILE
     (MAKE-FILE-NAME FILENAME KWD-CPP-TRANSLATE-FILE-CPP-HEADER FALSE))
    (CODEOUTPUTSTREAM (NEW-OUTPUT-FILE-STREAM CODEOUTPUTFILE))
    (HEADEROUTPUTSTREAM (NEW-OUTPUT-FILE-STREAM HEADEROUTPUTFILE))
    (GLOBALS NIL) (AUXILIARYGLOBALS NIL) (METHODS NIL)
    (VERBATIMSTATEMENTS NIL) (CLASSES NIL))
   (CL:LET* ((*CURRENT-STREAM* HEADEROUTPUTSTREAM))
    (CL:DECLARE (CL:SPECIAL *CURRENT-STREAM*))
    (CL:SETQ *TRANSLATIONUNITS* (REVERSE *TRANSLATIONUNITS*))
    (CL:LET* ((UNIT NULL) (ITER-000 (%THE-CONS-LIST *TRANSLATIONUNITS*)))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:PROGN (CL:SETQ UNIT (%%VALUE ITER-000))
       (CL:SETQ ITER-000 (%%REST ITER-000)))
      (CL:LET* ((TEST-VALUE-000 (%CATEGORY UNIT)))
       (CL:COND
        ((CL:OR
          (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-FILE-STELLA-METHOD)
          (CL:EQ TEST-VALUE-000
           SYM-CPP-TRANSLATE-FILE-STELLA-PRINT-METHOD)
          (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-FILE-STELLA-MACRO))
         (CL:SETQ METHODS (CONS (%TRANSLATION UNIT) METHODS)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-FILE-STELLA-VERBATIM)
         (CL:SETQ VERBATIMSTATEMENTS
          (CONS (%TRANSLATION UNIT) VERBATIMSTATEMENTS)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-FILE-STELLA-CLASS)
         (CL:SETQ CLASSES (CONS (%TRANSLATION UNIT) CLASSES)))
        ((CL:EQ TEST-VALUE-000
          SYM-CPP-TRANSLATE-FILE-STELLA-GLOBAL-VARIABLE)
         (CL:IF (AUXILIARY-VARIABLE-UNIT? UNIT)
          (CL:SETQ AUXILIARYGLOBALS
           (CONS (%TRANSLATION UNIT) AUXILIARYGLOBALS))
          (CL:SETQ GLOBALS (CONS (%TRANSLATION UNIT) GLOBALS))))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-FILE-STELLA-TYPE))
        (CL:T
         (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
          (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" TEST-VALUE-000
           "' is not a valid case option")
          (CL:ERROR
           (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))))
    (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) "Writing `"
     HEADEROUTPUTFILE "'..." EOL)
    (OUTPUT-FILE-HEADER HEADEROUTPUTSTREAM HEADEROUTPUTFILE)
    (CPP-OUTPUT-CLASS-HEAD-DECLARATIONS CLASSES)
    (CL:WHEN (CL:NOT (CL:EQ CLASSES NIL))
     (%%PRINT-STREAM (%NATIVE-STREAM *CURRENT-STREAM*)
      "// Class definitions:" EOL))
    (CL:LET* ((CLASS NULL) (ITER-001 CLASSES))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
      (CL:PROGN (CL:SETQ CLASS (%%VALUE ITER-001))
       (CL:SETQ ITER-001 (%%REST ITER-001)))
      (CPP-OUTPUT-CLASS (%%REST CLASS))))
    (CPP-OUTPUT-GLOBAL-DECLARATIONS GLOBALS)
    (CPP-OUTPUT-FUNCTION-SIGNATURES METHODS)
    (CPP-OUTPUT-GLOBAL-DECLARATIONS AUXILIARYGLOBALS)
    (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) "Writing `"
     CODEOUTPUTFILE "'..." EOL)
    (CL:SETQ *CURRENT-STREAM* CODEOUTPUTSTREAM)
    (%%PRINT-STREAM (%NATIVE-STREAM *CURRENT-STREAM*) "// "
     (FILE-NAME-WITHOUT-DIRECTORY CODEOUTPUTFILE) EOL EOL)
    (CL:WHEN (TRANSLATE-WITH-COPYRIGHT-HEADER?)
     (OUTPUT-COPYRIGHT-HEADER *CURRENT-STREAM*))
    (CL:COND
     ((CL:EQ *TRANSLATOROUTPUTLANGUAGE* KWD-CPP-TRANSLATE-FILE-CPP)
      (CPP-OUTPUT-IMPORT-DECLARATIONS STELLA::NULL-STRING))
     ((CL:EQ *TRANSLATOROUTPUTLANGUAGE*
       KWD-CPP-TRANSLATE-FILE-CPP-STANDALONE)
      (CPP-STANDALONE-OUTPUT-IMPORT-DECLARATIONS HEADEROUTPUTFILE))
     (CL:T
      (CL:LET* ((STREAM-001 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%NATIVE-STREAM STREAM-001) "`"
        *TRANSLATOROUTPUTLANGUAGE* "' is not a valid case option")
       (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-001))))))
    (CL:LET*
     ((UNIT NULL)
      (ITER-002 (%THE-CONS-LIST (REVERSE *TRANSLATIONUNITS*))))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-002 NIL)) DO
      (CL:PROGN (CL:SETQ UNIT (%%VALUE ITER-002))
       (CL:SETQ ITER-002 (%%REST ITER-002)))
      (CL:LET* ((TEST-VALUE-001 (%CATEGORY UNIT)))
       (CL:COND
        ((CL:OR
          (CL:EQ TEST-VALUE-001 SYM-CPP-TRANSLATE-FILE-STELLA-METHOD)
          (CL:EQ TEST-VALUE-001
           SYM-CPP-TRANSLATE-FILE-STELLA-PRINT-METHOD)
          (CL:EQ TEST-VALUE-001 SYM-CPP-TRANSLATE-FILE-STELLA-MACRO))
         (CPP-OUTPUT-STATEMENT (%TRANSLATION UNIT)))
        ((CL:EQ TEST-VALUE-001 SYM-CPP-TRANSLATE-FILE-STELLA-VERBATIM)
         (CPP-OUTPUT-VERBATIM (%%VALUE (%%REST (%TRANSLATION UNIT)))))
        ((CL:EQ TEST-VALUE-001
          SYM-CPP-TRANSLATE-FILE-STELLA-GLOBAL-VARIABLE)
         (CL:WHEN (CL:NOT (AUXILIARY-VARIABLE-UNIT? UNIT))
          (CPP-OUTPUT-GLOBAL-DEFINITION (%TRANSLATION UNIT))))
        (CL:T)))))
    (CL:LET* ((GLOBAL NULL) (ITER-003 AUXILIARYGLOBALS))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-003 NIL)) DO
      (CL:PROGN (CL:SETQ GLOBAL (%%VALUE ITER-003))
       (CL:SETQ ITER-003 (%%REST ITER-003)))
      (CPP-OUTPUT-GLOBAL-DEFINITION GLOBAL)))
    (FREE CODEOUTPUTSTREAM) (FREE HEADEROUTPUTSTREAM)))
  :VOID)

;;; (DEFUN CPP-TRANSLATE-FILE ...)

(CL:DEFUN CPP-TRANSLATE-FILE (FILENAME)
  (TRANSLATE-FILE FILENAME KWD-CPP-TRANSLATE-FILE-CPP FALSE)
  :VOID)

;;; (DEFUN CPP-STANDALONE-TRANSLATE-FILE ...)

(CL:DEFUN CPP-STANDALONE-TRANSLATE-FILE (FILENAME)
  (TRANSLATE-FILE FILENAME KWD-CPP-TRANSLATE-FILE-CPP-STANDALONE FALSE)
  :VOID)

;;; (DEFUN CPP-TRANSLATE-SYSTEM ...)

(CL:DEFUN CPP-TRANSLATE-SYSTEM (SYSTEMNAME)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SYSTEMNAME))
  (TRANSLATE-SYSTEM SYSTEMNAME KWD-CPP-TRANSLATE-FILE-CPP
   KWD-CPP-TRANSLATE-FILE-TWO-PASS? TRUE-WRAPPER
   KWD-CPP-TRANSLATE-FILE-FORCE-TRANSLATION? TRUE-WRAPPER
   KWD-CPP-TRANSLATE-FILE-PRODUCTION-SETTINGS? TRUE-WRAPPER)
  :VOID)

;;; (DEFUN CPP-TRANSLATE-WALKED-SYSTEM-UNITS ...)

(CL:DEFUN CPP-TRANSLATE-WALKED-SYSTEM-UNITS (SYSTEMUNITS)
  (CL:LET* ((*CURRENTFILE* STELLA::NULL-STRING) (*TRANSLATIONUNITS* NULL))
   (CL:DECLARE (CL:SPECIAL *CURRENTFILE* *TRANSLATIONUNITS*))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING *CURRENTFILE*))
   (CL:LET*
    ((UNITS NULL) (FILE NULL) (ITER-000 (%THE-KV-LIST SYSTEMUNITS)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NULL)) DO
     (CL:SETQ FILE (%KEY ITER-000))
     (CL:PROGN (CL:SETQ UNITS (%VALUE ITER-000))
      (CL:SETQ ITER-000 (%REST ITER-000)))
     (CL:SETQ *CURRENTFILE* (FILE-BASE-NAME (%WRAPPER-VALUE FILE)))
     (CL:SETQ *TRANSLATIONUNITS* UNITS)
     (CL:LET*
      ((*MODULE* (COMPUTE-FILE-UNITS-MODULE UNITS)) (*CONTEXT* *MODULE*))
      (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
      (TRANSLATE-AND-OUTPUT-UNITS-TO-FILE (%WRAPPER-VALUE FILE) "C++"))
     (CLEAN-UP-TRANSLATION-UNITS-SPECIAL)))
   (CPP-OUTPUT-SYSTEM-SPECIFIC-FILES))
  :VOID)

;;; (DEFUN CPP-OUTPUT-SYSTEM-SPECIFIC-FILES ...)

(CL:DEFUN CPP-OUTPUT-SYSTEM-SPECIFIC-FILES ()
  (CPP-OUTPUT-SYSTEM-HEADER-FILE)
  (CPP-OUTPUT-SYSTEM-MAKEFILE)
  :VOID)

;;; (DEFUN (CPP-YIELD-SYSTEM-HEADER-FILE-NAME STRING) ...)

(CL:DEFUN CPP-YIELD-SYSTEM-HEADER-FILE-NAME (SYSTEMNAME)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SYSTEMNAME))
  (CL:RETURN-FROM CPP-YIELD-SYSTEM-HEADER-FILE-NAME
   (CONCATENATE (STRING-DOWNCASE SYSTEMNAME) "-system")))

;;; (DEFUN CPP-OUTPUT-SYSTEM-HEADER-FILE ...)

(CL:DEFUN CPP-OUTPUT-SYSTEM-HEADER-FILE ()
  (CL:LET*
   ((SYSTEM *CURRENTSYSTEMDEFINITION*) (SYSTEMNAME (%NAME SYSTEM))
    (HEADEROUTPUTFILE
     (MAKE-FILE-NAME (CPP-YIELD-SYSTEM-HEADER-FILE-NAME SYSTEMNAME)
      KWD-CPP-TRANSLATE-FILE-CPP-HEADER TRUE))
    (HEADEROUTPUTSTREAM (NEW-OUTPUT-FILE-STREAM HEADEROUTPUTFILE)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SYSTEMNAME))
   (CL:LET* ((*CURRENT-STREAM* HEADEROUTPUTSTREAM))
    (CL:DECLARE (CL:SPECIAL *CURRENT-STREAM*))
    (%%PRINT-STREAM (%NATIVE-STREAM *CURRENT-STREAM*) "// "
     (FILE-NAME-WITHOUT-DIRECTORY HEADEROUTPUTFILE) EOL EOL)
    (CL:WHEN (CL:NOT (CL:EQ (%REQUIRED-SYSTEMS SYSTEM) NULL))
     (%%PRINT-STREAM (%NATIVE-STREAM *CURRENT-STREAM*)
      "// Required systems:" EOL)
     (CL:LET* ((REQSYS NULL) (ITER-000 (%REQUIRED-SYSTEMS SYSTEM)))
      (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
       (CL:PROGN (CL:SETQ REQSYS (%%VALUE ITER-000))
        (CL:SETQ ITER-000 (%%REST ITER-000)))
       (CPP-OUTPUT-IMPORT-DECLARATIONS (%WRAPPER-VALUE REQSYS)))))
    (%%PRINT-STREAM (%NATIVE-STREAM *CURRENT-STREAM*)
     "// System-wide forward declarations:" EOL)
    (CL:LET*
     ((CLASS NULL)
      (ITER-001
       (ALL-CLASSES (GET-CARDINAL-MODULE *CURRENTSYSTEMDEFINITION*)
        TRUE)))
     (CL:LOOP WHILE (NEXT? ITER-001) DO (CL:SETQ CLASS (%VALUE ITER-001))
      (CL:WHEN (CREATE-NATIVE-CLASS? CLASS)
       (%%PRINT-STREAM (%NATIVE-STREAM *CURRENT-STREAM*) "class "
        (%WRAPPER-VALUE (CPP-TRANSLATE-CLASS-NAME (%CLASS-TYPE CLASS)))
        ";" EOL))))
    (%%PRINT-STREAM (%NATIVE-STREAM *CURRENT-STREAM*) EOL)
    (%%PRINT-STREAM (%NATIVE-STREAM *CURRENT-STREAM*)
     "// System components:" EOL)
    (CL:WHEN (STRING-EQL? SYSTEMNAME "stella")
     (CPP-OUTPUT-INCLUDE-DIRECTIVE
      (CPP-RELATIVIZE-HEADER-FILE
       (MAKE-FILE-NAME-FROM-RELATIVE-PATH
        (LIST* (WRAP-STRING "cpp-lib") (WRAP-STRING "cpp-primal") NIL)
        KWD-CPP-TRANSLATE-FILE-CPP-HEADER)
       SYSTEMNAME)
      FALSE))
    (CL:LET*
     ((FILE NULL)
      (ITER-002
       (FILES-PLUS-SYSTEM-STARTUP
        (SYSTEM-DEFINITION-SOURCE-FILES SYSTEM))))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-002 NIL)) DO
      (CL:PROGN (CL:SETQ FILE (%%VALUE ITER-002))
       (CL:SETQ ITER-002 (%%REST ITER-002)))
      (CPP-OUTPUT-INCLUDE-DIRECTIVE
       (CPP-RELATIVIZE-HEADER-FILE
        (MAKE-FILE-NAME (%WRAPPER-VALUE FILE)
         KWD-CPP-TRANSLATE-FILE-CPP-HEADER TRUE)
        SYSTEMNAME)
       FALSE)))
    (FREE HEADEROUTPUTSTREAM)))
  :VOID)

;;; (DEFUN CPP-OUTPUT-SYSTEM-MAKEFILE ...)

(CL:DEFUN CPP-OUTPUT-SYSTEM-MAKEFILE ()
  (CL:LET*
   ((MAKEFILE
     (MAKE-FILE-NAME "Makefile" KWD-CPP-TRANSLATE-FILE-STELLA TRUE))
    (TEMPLATEFILE
     (CONCATENATE (FILE-NAME-WITHOUT-EXTENSION MAKEFILE) ".in"))
    (SYSTEM *CURRENTSYSTEMDEFINITION*))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TEMPLATEFILE))
   (CL:WHEN (CL:NOT (PROBE-FILE? TEMPLATEFILE))
    (CL:LET*
     ((*CURRENTSYSTEMDEFINITION* (GET-SYSTEM-DEFINITION "STELLA"))
      (*CURRENTSYSTEMDEFINITIONSUBDIRECTORY*
       (CL:IF (CL:NOT (CL:EQ *CURRENTSYSTEMDEFINITION* NULL))
        (%DIRECTORY *CURRENTSYSTEMDEFINITION*) STELLA::NULL-STRING)))
     (CL:DECLARE
      (CL:SPECIAL *CURRENTSYSTEMDEFINITION*
       *CURRENTSYSTEMDEFINITIONSUBDIRECTORY*))
     (CL:DECLARE
      (CL:TYPE CL:SIMPLE-STRING *CURRENTSYSTEMDEFINITIONSUBDIRECTORY*))
     (CL:IF (CL:NOT (CL:EQ *CURRENTSYSTEMDEFINITION* NULL))
      (CL:PROGN
       (CL:SETQ MAKEFILE
        (MAKE-FILE-NAME "Makefile-default" KWD-CPP-TRANSLATE-FILE-STELLA
         TRUE))
       (CL:SETQ TEMPLATEFILE
        (CONCATENATE (FILE-NAME-WITHOUT-EXTENSION MAKEFILE) ".in")))
      (CL:WARN "Can't find a system named STELLA~%"))))
   (CL:LET*
    ((VARIABLES (NEW-KEY-VALUE-LIST))
     (SYSTEMFILES (NEW-OUTPUT-STRING-STREAM))
     (REQUIREDSYSTEMS (NEW-OUTPUT-STRING-STREAM)))
    (INSERT-AT VARIABLES (WRAP-STRING "SYSTEM-NAME")
     (WRAP-STRING (%NAME SYSTEM)))
    (INSERT-AT VARIABLES (WRAP-STRING "PROGRAM-NAME")
     (WRAP-STRING (%NAME SYSTEM)))
    (INSERT-AT VARIABLES (WRAP-STRING "SYSTEMS-ROOT")
     (WRAP-STRING
      (DIRECTORY-FILE-NAME
       (DIRECTORY-PARENT-DIRECTORY
        (MAKE-FILE-NAME "dummy" KWD-CPP-TRANSLATE-FILE-CPP-CODE TRUE)
        2))))
    (CL:LET*
     ((*CURRENTSYSTEMDEFINITION* (GET-SYSTEM-DEFINITION "STELLA"))
      (*CURRENTSYSTEMDEFINITIONSUBDIRECTORY*
       (CL:IF (CL:NOT (CL:EQ *CURRENTSYSTEMDEFINITION* NULL))
        (%DIRECTORY *CURRENTSYSTEMDEFINITION*) STELLA::NULL-STRING)))
     (CL:DECLARE
      (CL:SPECIAL *CURRENTSYSTEMDEFINITION*
       *CURRENTSYSTEMDEFINITIONSUBDIRECTORY*))
     (CL:DECLARE
      (CL:TYPE CL:SIMPLE-STRING *CURRENTSYSTEMDEFINITIONSUBDIRECTORY*))
     (CL:IF (CL:NOT (CL:EQ *CURRENTSYSTEMDEFINITION* NULL))
      (CL:PROGN
       (INSERT-AT VARIABLES (WRAP-STRING "STELLA-ROOT")
        (WRAP-STRING
         (DIRECTORY-FILE-NAME
          (DIRECTORY-PARENT-DIRECTORY
           (MAKE-FILE-NAME "dummy" KWD-CPP-TRANSLATE-FILE-CPP-CODE TRUE)
           1)))))
      (CL:WARN "Can't find a system named STELLA~%")))
    (CL:LET*
     ((FILE NULL)
      (ITER-000
       (FILES-PLUS-SYSTEM-STARTUP
        (SYSTEM-DEFINITION-SOURCE-FILES SYSTEM))))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:PROGN (CL:SETQ FILE (%%VALUE ITER-000))
       (CL:SETQ ITER-000 (%%REST ITER-000)))
      (%%PRINT-STREAM (%NATIVE-STREAM SYSTEMFILES)
       (FILE-NAME-WITHOUT-DIRECTORY
        (MAKE-FILE-NAME (%WRAPPER-VALUE FILE)
         KWD-CPP-TRANSLATE-FILE-CPP-CODE TRUE))
       " ")))
    (INSERT-AT VARIABLES (WRAP-STRING "SYSTEM-FILES")
     (WRAP-STRING (THE-STRING-READER SYSTEMFILES)))
    (CL:WHEN (CL:NOT (CL:EQ (%REQUIRED-SYSTEMS SYSTEM) NULL))
     (CL:LET* ((REQSYS NULL) (ITER-001 (%REQUIRED-SYSTEMS SYSTEM)))
      (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
       (CL:PROGN (CL:SETQ REQSYS (%%VALUE ITER-001))
        (CL:SETQ ITER-001 (%%REST ITER-001)))
       (%%PRINT-STREAM (%NATIVE-STREAM REQUIREDSYSTEMS)
        (%WRAPPER-VALUE REQSYS) " "))))
    (INSERT-AT VARIABLES (WRAP-STRING "REQUIRED-SYSTEMS")
     (WRAP-STRING (THE-STRING-READER REQUIREDSYSTEMS)))
    (CL:SETQ MAKEFILE
     (FILE-NAME-WITHOUT-EXTENSION
      (MAKE-FILE-NAME "Makefile" KWD-CPP-TRANSLATE-FILE-CPP-CODE TRUE)))
    (SUBSTITUTE-TEMPLATE-VARIABLES-IN-FILE TEMPLATEFILE MAKEFILE
     VARIABLES)))
  :VOID)

;;; (DEFGLOBAL *MAKEFILE-TEMPLATE-VARIABLE-PREFIX* ...)

(CL:PROGN (CL:DEFVAR *MAKEFILE-TEMPLATE-VARIABLE-PREFIX* "#$") (CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING *MAKEFILE-TEMPLATE-VARIABLE-PREFIX*)))

;;; (DEFUN (SUBSTITUTE-TEMPLATE-VARIABLES-IN-STRING STRING) ...)

(CL:DEFUN SUBSTITUTE-TEMPLATE-VARIABLES-IN-STRING (STRING VARIABLES)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING STRING))
  (CL:LET*
   ((INDEX 0) (LENGTH (CL:THE CL:FIXNUM (CL:LENGTH STRING)))
    (RESULT STRING) (VARIABLEEND 0) (VARIABLENAME STELLA::NULL-STRING)
    (VARIABLEVALUE NULL))
   (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX LENGTH VARIABLEEND)
    (CL:TYPE CL:SIMPLE-STRING RESULT VARIABLENAME))
   (CL:LOOP
    (CL:TAGBODY
     (CL:SETQ INDEX
      (STRING-SEARCH RESULT *MAKEFILE-TEMPLATE-VARIABLE-PREFIX* INDEX))
     (CL:WHEN (NULL? INDEX) (CL:RETURN)) (CL:SETQ INDEX (CL:+ INDEX 2))
     (CL:WHEN (CL:>= INDEX LENGTH)
      (CL:WARN "Illegal template variable syntax in~%    `~A'" STRING)
      (CL:RETURN))
     (CL:WHEN
      (CL:NOT
       (CL:EQL
        (CL:LET ((SELF RESULT) (POSITION INDEX))
         (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
          (CL:TYPE CL:FIXNUM POSITION))
         (CL:AREF (CL:THE CL:SIMPLE-STRING SELF)
          (CL:THE CL:FIXNUM POSITION)))
        #\())
      (CL:WARN "Illegal template variable syntax in~%    `~A'" STRING)
      (CL:GO :CONTINUE))
     (CL:SETQ VARIABLEEND (POSITION RESULT #\) INDEX))
     (CL:WHEN (NULL? VARIABLEEND)
      (CL:WARN "Illegal template variable syntax in~%    `~A'" STRING)
      (CL:GO :CONTINUE))
     (CL:SETQ INDEX (CL:1+ INDEX))
     (CL:SETQ VARIABLENAME (SUBSEQUENCE RESULT INDEX VARIABLEEND))
     (CL:SETQ VARIABLEVALUE (LOOKUP VARIABLES (WRAP-STRING VARIABLENAME)))
     (CL:WHEN (CL:EQ VARIABLEVALUE NULL)
      (CL:WARN "Undefined template variable: `~A'" VARIABLENAME)
      (CL:GO :CONTINUE))
     (CL:SETQ RESULT
      (CONCATENATE (SUBSEQUENCE RESULT 0 (CL:- INDEX 3))
       (%WRAPPER-VALUE VARIABLEVALUE)
       (SUBSEQUENCE RESULT (CL:1+ VARIABLEEND) NULL-INTEGER)))
     (CL:SETQ INDEX
      (CL:+ VARIABLEEND 1
       (CL:- (CL:THE CL:FIXNUM (CL:LENGTH RESULT)) LENGTH)))
     (CL:SETQ LENGTH (CL:THE CL:FIXNUM (CL:LENGTH RESULT))) :CONTINUE))
   (CL:RETURN-FROM SUBSTITUTE-TEMPLATE-VARIABLES-IN-STRING RESULT)))

;;; (DEFUN SUBSTITUTE-TEMPLATE-VARIABLES-IN-FILE ...)

(CL:DEFUN SUBSTITUTE-TEMPLATE-VARIABLES-IN-FILE (TEMPLATEFILE OUTPUTFILE VARIABLES)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TEMPLATEFILE OUTPUTFILE))
  (CL:LET* ((OUT (NEW-OUTPUT-FILE-STREAM OUTPUTFILE)))
   (%%PRINT-STREAM (%NATIVE-STREAM OUT)
    "# This file has been generated automatically.  Modify at your own risk!"
    EOL EOL)
   (CL:LET*
    ((LINE STELLA::NULL-STRING)
     (ITER-000 (LINES (NEW-INPUT-FILE-STREAM TEMPLATEFILE))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING LINE))
    (CL:LOOP WHILE (NEXT? ITER-000) DO (CL:SETQ LINE (%VALUE ITER-000))
     (%%PRINT-STREAM (%NATIVE-STREAM OUT)
      (SUBSTITUTE-TEMPLATE-VARIABLES-IN-STRING LINE VARIABLES) EOL)))
   (FREE OUT))
  :VOID)

(CL:DEFUN STARTUP-CPP-TRANSLATE-FILE ()
  (CL:LET* ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2)
    (CL:SETQ KWD-CPP-TRANSLATE-FILE-CPP
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP" NULL 2))
    (CL:SETQ SYM-CPP-TRANSLATE-FILE-STELLA-CPPTRANS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CPPTRANS" NULL 0))
    (CL:SETQ KWD-CPP-TRANSLATE-FILE-COMMON-LISP
     (INTERN-RIGID-SYMBOL-WRT-MODULE "COMMON-LISP" NULL 2))
    (CL:SETQ KWD-CPP-TRANSLATE-FILE-FUNCTION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FUNCTION" NULL 2))
    (CL:SETQ KWD-CPP-TRANSLATE-FILE-CPP-CODE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP-CODE" NULL 2))
    (CL:SETQ KWD-CPP-TRANSLATE-FILE-CPP-HEADER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP-HEADER" NULL 2))
    (CL:SETQ SYM-CPP-TRANSLATE-FILE-STELLA-CPP_FUNCTION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_FUNCTION" NULL 0))
    (CL:SETQ SYM-CPP-TRANSLATE-FILE-STELLA-CPP_DEFPRINT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_DEFPRINT" NULL 0))
    (CL:SETQ SYM-CPP-TRANSLATE-FILE-STELLA-METHOD
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD" NULL 0))
    (CL:SETQ SYM-CPP-TRANSLATE-FILE-STELLA-PRINT-METHOD
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT-METHOD" NULL 0))
    (CL:SETQ SYM-CPP-TRANSLATE-FILE-STELLA-MACRO
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MACRO" NULL 0))
    (CL:SETQ SYM-CPP-TRANSLATE-FILE-STELLA-VERBATIM
     (INTERN-RIGID-SYMBOL-WRT-MODULE "VERBATIM" NULL 0))
    (CL:SETQ SYM-CPP-TRANSLATE-FILE-STELLA-CLASS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS" NULL 0))
    (CL:SETQ SYM-CPP-TRANSLATE-FILE-STELLA-GLOBAL-VARIABLE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "GLOBAL-VARIABLE" NULL 0))
    (CL:SETQ SYM-CPP-TRANSLATE-FILE-STELLA-TYPE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "TYPE" NULL 0))
    (CL:SETQ KWD-CPP-TRANSLATE-FILE-CPP-STANDALONE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP-STANDALONE" NULL 2))
    (CL:SETQ KWD-CPP-TRANSLATE-FILE-TWO-PASS?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "TWO-PASS?" NULL 2))
    (CL:SETQ KWD-CPP-TRANSLATE-FILE-FORCE-TRANSLATION?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FORCE-TRANSLATION?" NULL 2))
    (CL:SETQ KWD-CPP-TRANSLATE-FILE-PRODUCTION-SETTINGS?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PRODUCTION-SETTINGS?" NULL 2))
    (CL:SETQ KWD-CPP-TRANSLATE-FILE-STELLA
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STELLA" NULL 2))
    (CL:SETQ SYM-CPP-TRANSLATE-FILE-STELLA-STARTUP-CPP-TRANSLATE-FILE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-CPP-TRANSLATE-FILE" NULL 0))
    (CL:SETQ SYM-CPP-TRANSLATE-FILE-STELLA-METHOD-STARTUP-CLASSNAME
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME" NULL 0)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 4)
    (CL:SETQ *CURRENT-STREAM* STANDARD-OUTPUT))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (DEFINE-FUNCTION-OBJECT "CPPTRANS"
     "(DEFUN CPPTRANS ((STATEMENT OBJECT)) :COMMAND? TRUE :PUBLIC? TRUE :EVALUATE-ARGUMENTS? FALSE :DOCUMENTATION \"Translate `statement' to C++ and print the result.\")"
     (CL:FUNCTION %CPPTRANS) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-MAKE-CODE-OUTPUT-FILE-NAME"
     "(DEFUN (CPP-MAKE-CODE-OUTPUT-FILE-NAME FILE-NAME) ((FILENAME FILE-NAME)))"
     (CL:FUNCTION CPP-MAKE-CODE-OUTPUT-FILE-NAME) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-MAKE-HEADER-OUTPUT-FILE-NAME"
     "(DEFUN (CPP-MAKE-HEADER-OUTPUT-FILE-NAME FILE-NAME) ((FILENAME FILE-NAME)))"
     (CL:FUNCTION CPP-MAKE-HEADER-OUTPUT-FILE-NAME) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-INCLUDE-DIRECTIVE"
     "(DEFUN CPP-OUTPUT-INCLUDE-DIRECTIVE ((FILENAME FILE-NAME) (STRIPDIRECTORY? BOOLEAN)))"
     (CL:FUNCTION CPP-OUTPUT-INCLUDE-DIRECTIVE) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-STANDALONE-OUTPUT-IMPORT-DECLARATIONS"
     "(DEFUN CPP-STANDALONE-OUTPUT-IMPORT-DECLARATIONS ((HEADERFILENAME FILE-NAME)))"
     (CL:FUNCTION CPP-STANDALONE-OUTPUT-IMPORT-DECLARATIONS) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-RELATIVIZE-HEADER-FILE"
     "(DEFUN (CPP-RELATIVIZE-HEADER-FILE FILE-NAME) ((HEADERFILE FILE-NAME) (SYSTEMNAME STRING)))"
     (CL:FUNCTION CPP-RELATIVIZE-HEADER-FILE) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-IMPORT-DECLARATIONS"
     "(DEFUN CPP-OUTPUT-IMPORT-DECLARATIONS ((SYSTEMNAME STRING)))"
     (CL:FUNCTION CPP-OUTPUT-IMPORT-DECLARATIONS) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-CLASS-HEAD-DECLARATIONS"
     "(DEFUN CPP-OUTPUT-CLASS-HEAD-DECLARATIONS ((CLASSES CONS)))"
     (CL:FUNCTION CPP-OUTPUT-CLASS-HEAD-DECLARATIONS) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-FUNCTION-SIGNATURES"
     "(DEFUN CPP-OUTPUT-FUNCTION-SIGNATURES ((METHODSANDFUNCTIONS CONS)))"
     (CL:FUNCTION CPP-OUTPUT-FUNCTION-SIGNATURES) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-GLOBAL-DECLARATIONS"
     "(DEFUN CPP-OUTPUT-GLOBAL-DECLARATIONS ((GLOBALS CONS)))"
     (CL:FUNCTION CPP-OUTPUT-GLOBAL-DECLARATIONS) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-ALL-UNITS-TO-FILE"
     "(DEFUN CPP-OUTPUT-ALL-UNITS-TO-FILE ((FILENAME FILE-NAME)))"
     (CL:FUNCTION CPP-OUTPUT-ALL-UNITS-TO-FILE) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-FILE"
     "(DEFUN CPP-TRANSLATE-FILE ((FILENAME FILE-NAME)) :PUBLIC? TRUE)"
     (CL:FUNCTION CPP-TRANSLATE-FILE) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-STANDALONE-TRANSLATE-FILE"
     "(DEFUN CPP-STANDALONE-TRANSLATE-FILE ((FILENAME FILE-NAME)))"
     (CL:FUNCTION CPP-STANDALONE-TRANSLATE-FILE) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-SYSTEM"
     "(DEFUN CPP-TRANSLATE-SYSTEM ((SYSTEMNAME STRING)))"
     (CL:FUNCTION CPP-TRANSLATE-SYSTEM) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-WALKED-SYSTEM-UNITS"
     "(DEFUN CPP-TRANSLATE-WALKED-SYSTEM-UNITS ((SYSTEMUNITS SYSTEM-UNITS-ALIST)))"
     (CL:FUNCTION CPP-TRANSLATE-WALKED-SYSTEM-UNITS) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-SYSTEM-SPECIFIC-FILES"
     "(DEFUN CPP-OUTPUT-SYSTEM-SPECIFIC-FILES ())"
     (CL:FUNCTION CPP-OUTPUT-SYSTEM-SPECIFIC-FILES) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-YIELD-SYSTEM-HEADER-FILE-NAME"
     "(DEFUN (CPP-YIELD-SYSTEM-HEADER-FILE-NAME STRING) ((SYSTEMNAME STRING)))"
     (CL:FUNCTION CPP-YIELD-SYSTEM-HEADER-FILE-NAME) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-SYSTEM-HEADER-FILE"
     "(DEFUN CPP-OUTPUT-SYSTEM-HEADER-FILE ())"
     (CL:FUNCTION CPP-OUTPUT-SYSTEM-HEADER-FILE) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-SYSTEM-MAKEFILE"
     "(DEFUN CPP-OUTPUT-SYSTEM-MAKEFILE ())"
     (CL:FUNCTION CPP-OUTPUT-SYSTEM-MAKEFILE) NULL)
    (DEFINE-FUNCTION-OBJECT "SUBSTITUTE-TEMPLATE-VARIABLES-IN-STRING"
     "(DEFUN (SUBSTITUTE-TEMPLATE-VARIABLES-IN-STRING STRING) ((STRING STRING) (VARIABLES (KEY-VALUE-LIST OF STRING-WRAPPER STRING-WRAPPER))))"
     (CL:FUNCTION SUBSTITUTE-TEMPLATE-VARIABLES-IN-STRING) NULL)
    (DEFINE-FUNCTION-OBJECT "SUBSTITUTE-TEMPLATE-VARIABLES-IN-FILE"
     "(DEFUN SUBSTITUTE-TEMPLATE-VARIABLES-IN-FILE ((TEMPLATEFILE STRING) (OUTPUTFILE STRING) (VARIABLES (KEY-VALUE-LIST OF STRING-WRAPPER STRING-WRAPPER))))"
     (CL:FUNCTION SUBSTITUTE-TEMPLATE-VARIABLES-IN-FILE) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-CPP-TRANSLATE-FILE"
     "(DEFUN STARTUP-CPP-TRANSLATE-FILE () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-CPP-TRANSLATE-FILE) NULL)
    (CL:LET*
     ((FUNCTION
       (LOOKUP-FUNCTION
        SYM-CPP-TRANSLATE-FILE-STELLA-STARTUP-CPP-TRANSLATE-FILE)))
     (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FUNCTION)
      SYM-CPP-TRANSLATE-FILE-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "Startup-Cpp-Translate-File") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *CURRENT-STREAM* OUTPUT-STREAM STANDARD-OUTPUT)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *CPP-TRANSLATED-FILE-SUFFIX* STRING \"\")")
    (REGISTER-NATIVE-NAME SYM-CPP-TRANSLATE-FILE-STELLA-CPPTRANS
     KWD-CPP-TRANSLATE-FILE-COMMON-LISP KWD-CPP-TRANSLATE-FILE-FUNCTION)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *MAKEFILE-TEMPLATE-VARIABLE-PREFIX* STRING \"#$\")")))
  :VOID)
