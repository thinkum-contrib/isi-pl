;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SYM-CLDEBUG-STELLA-STELLA-*CLDEBUGSTELLA?* NULL)
(CL:DEFVAR SGT-CLDEBUG-STELLA-STELLA-OBJECT NULL)

;;; Forward declarations:

(CL:DECLAIM (CL:SPECIAL *STELLA-MODULE* CL-NIL *MODULE*))

;;; (DEFSPECIAL *CLDEBUGSTELLA?* ...)

(CL:DEFVAR *CLDEBUGSTELLA?* FALSE)

(CL:DEFUN READ-*CLDEBUGSTELLA?* ()
  (CL:RETURN-FROM READ-*CLDEBUGSTELLA?* *CLDEBUGSTELLA?*))

(CL:DEFUN WRITE-*CLDEBUGSTELLA?* (VALUE)
  (CL:SETQ *CLDEBUGSTELLA?* VALUE)
  (CL:RETURN-FROM WRITE-*CLDEBUGSTELLA?* VALUE))

;;; (DEFUN (SUBSTITUTE-CLDEBUG-FORM-INFO-SOURCE UNKNOWN) ...)

(CL:DEFUN SUBSTITUTE-CLDEBUG-FORM-INFO-SOURCE (SOURCEFORM RESULTFORM)
  (CL:RETURN-FROM SUBSTITUTE-CLDEBUG-FORM-INFO-SOURCE
   (cldebug::substitute-form-info-source sourceForm resultForm)))

;;; (DEFUN (STELLA-CODE-TO-CONS-TREE OBJECT) ...)

(CL:DEFUN STELLA-CODE-TO-CONS-TREE (STELLACODE)
  (CL:COND
   ((CL:NULL STELLACODE) (CL:RETURN-FROM STELLA-CODE-TO-CONS-TREE NIL))
   ((CL:CONSP STELLACODE)
    (CL:IF *CLDEBUGSTELLA?*
     (CL:LET* ((CONSTREE NIL)) (CL:loop for element in stellaCode
                do (setq consTree
                     (cons (stella-code-to-cons-tree element) consTree)))
      (CL:SETQ CONSTREE (REVERSE CONSTREE))
      (SUBSTITUTE-CLDEBUG-FORM-INFO-SOURCE STELLACODE CONSTREE)
      (CL:RETURN-FROM STELLA-CODE-TO-CONS-TREE CONSTREE))
     (CL:RETURN-FROM STELLA-CODE-TO-CONS-TREE
      (CONS (STELLA-CODE-TO-CONS-TREE (CL:CAR STELLACODE))
       (STELLA-CODE-TO-CONS-TREE (CL:CDR STELLACODE))))))
   ((CL:SYMBOLP STELLACODE)
    (CL:LET* ((NAME (CL:SYMBOL-NAME STELLACODE)))
     (CL:WHEN (CL:KEYWORDP STELLACODE)
      (CL:RETURN-FROM STELLA-CODE-TO-CONS-TREE (INTERN-KEYWORD NAME)))
     (CL:IF
      (CL:AND
       (CL:EQL (CL:SYMBOL-PACKAGE STELLACODE) (CL:symbol-package 'CL:EVAL))
       (CL:NOT (EQ? (CL:FIND-SYMBOL NAME "STELLA") STELLACODE)))
      (CL:RETURN-FROM STELLA-CODE-TO-CONS-TREE
       (INTERN-COMMON-LISP-SYMBOL NAME))
      (CL:RETURN-FROM STELLA-CODE-TO-CONS-TREE
       (INTERN-GENERALIZED-SYMBOL NAME)))))
   ((CL:INTEGERP STELLACODE)
    (CL:RETURN-FROM STELLA-CODE-TO-CONS-TREE
     (WRAP-LITERAL (CL:FLOOR STELLACODE))))
   ((CL:FLOATP STELLACODE)
    (CL:RETURN-FROM STELLA-CODE-TO-CONS-TREE
     (WRAP-LITERAL (CL:COERCE STELLACODE (CL:QUOTE CL:FLOAT)))))
   ((CL:STRINGP STELLACODE)
    (CL:RETURN-FROM STELLA-CODE-TO-CONS-TREE (WRAP-LITERAL STELLACODE)))
   ((CL:CHARACTERP STELLACODE)
    (CL:RETURN-FROM STELLA-CODE-TO-CONS-TREE (WRAP-LITERAL STELLACODE)))
   (CL:T
    (CL:RETURN-FROM STELLA-CODE-TO-CONS-TREE
     (CAST STELLACODE SGT-CLDEBUG-STELLA-STELLA-OBJECT))))
  (CL:ERROR "Returned from `|F|STELLA-CODE-TO-CONS-TREE' without a `return'."))

;;; (DEFUN (WALK-A-TREE OBJECT TYPE-SPEC) ...)

(CL:DEFUN WALK-A-TREE (TREE)
  (CL:WHEN *CLDEBUGSTELLA?*
   (CL:LET* ((OTREE NULL) (TYPESPEC NULL))
    (CL:MULTIPLE-VALUE-SETQ (OTREE TYPESPEC) (HELP-WALK-A-TREE TREE))
    (SUBSTITUTE-CLDEBUG-FORM-INFO-SOURCE TREE OTREE)
    (CL:RETURN-FROM WALK-A-TREE (CL:VALUES OTREE TYPESPEC))))
  (CL:RETURN-FROM WALK-A-TREE (HELP-WALK-A-TREE TREE)))

;;; (DEFUN (CL-TRANSLATE-A-TREE OBJECT) ...)

(CL:DEFUN CL-TRANSLATE-A-TREE (TREE)
  (CL:WHEN *CLDEBUGSTELLA?*
   (CL:LET* ((OTREE (HELP-CL-TRANSLATE-A-TREE TREE)))
    (SUBSTITUTE-CLDEBUG-FORM-INFO-SOURCE TREE OTREE)
    (CL:RETURN-FROM CL-TRANSLATE-A-TREE OTREE)))
  (CL:RETURN-FROM CL-TRANSLATE-A-TREE (HELP-CL-TRANSLATE-A-TREE TREE)))

;;; (DEFUN (CONS-TREE-TO-LISP-CODE LISP-CODE) ...)

(CL:DEFUN CONS-TREE-TO-LISP-CODE (STELLATREE)
  (CL:WHEN (NULL? STELLATREE)
   (CL:RETURN-FROM CONS-TREE-TO-LISP-CODE (CL:QUOTE NULL)))
  (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE STELLATREE)))
   (CL:COND
    ((SUBTYPE-OF-CONS? TEST-VALUE-000)
     (CL:PROGN
      (CL:IF (NIL? STELLATREE) (CL:RETURN-FROM CONS-TREE-TO-LISP-CODE CL-NIL)
       (CL:IF *CLDEBUGSTELLA?*
        (CL:LET* ((LISPCODE CL-NIL))
         (CL:LET* ((ITEM NULL) (ITER-000 STELLATREE))
          (CL:LOOP WHILE (CL:NOT (NIL? ITER-000)) DO
           (CL:PROGN (CL:SETQ ITEM (%%VALUE ITER-000))
            (CL:SETQ ITER-000 (%%REST ITER-000)))
           (CL:PUSH (CONS-TREE-TO-LISP-CODE ITEM) LISPCODE)))
         (CL:SETQ LISPCODE (CL:NREVERSE LISPCODE))
         (SUBSTITUTE-CLDEBUG-FORM-INFO-SOURCE STELLATREE LISPCODE)
         (CL:RETURN-FROM CONS-TREE-TO-LISP-CODE LISPCODE))
        (CL:RETURN-FROM CONS-TREE-TO-LISP-CODE
         (CL:CONS (CONS-TREE-TO-LISP-CODE (%%VALUE STELLATREE))
          (CONS-TREE-TO-LISP-CODE (%%REST STELLATREE))))))))
    ((SUBTYPE-OF-KEYWORD? TEST-VALUE-000)
     (CL:PROGN
      (CL:RETURN-FROM CONS-TREE-TO-LISP-CODE
       (CL:INTERN (%KEYWORD.SYMBOL-NAME STELLATREE) "KEYWORD"))))
    ((SUBTYPE-OF-SYMBOL? TEST-VALUE-000)
     (CL:PROGN
      (CL:LET* ((NAME (%SYMBOL.SYMBOL-NAME STELLATREE)))
       (CL:WHEN (EQ? (CL:CHAR NAME 0) #\:)
        (CL:RETURN-FROM CONS-TREE-TO-LISP-CODE
         (CL:INTERN (CL:SUBSEQ NAME 1) "KEYWORD")))
       (CL:RETURN-FROM CONS-TREE-TO-LISP-CODE
        (CL:INTERN NAME
         (CL:IF (SYMBOL-COMMON-LISP? STELLATREE) "COMMON-LISP" "STELLA"))))))
    ((SUBTYPE-OF-SURROGATE? TEST-VALUE-000)
     (CL:PROGN
      (CL:RETURN-FROM CONS-TREE-TO-LISP-CODE
       (CL:INTERN (CONCATENATE "@" (%SURROGATE.SYMBOL-NAME STELLATREE))
        "STELLA"))))
    ((SUBTYPE-OF-VERBATIM-STRING? TEST-VALUE-000)
     (CL:PROGN
      (CL:LET*
       ((VERBATIMSTRING (%VERBATIM-STRING-WRAPPER.WRAPPER-VALUE STELLATREE))
        (PACKAGENAME (NATIVE-PACKAGE *MODULE*)))
       (CL:RETURN-FROM CONS-TREE-TO-LISP-CODE
        (CL:let ((CL:*package* (CL:find-package packageName)))
            (CL:read-from-string verbatimString))))))
    ((SUBTYPE-OF-INTEGER? TEST-VALUE-000)
     (CL:PROGN
      (CL:RETURN-FROM CONS-TREE-TO-LISP-CODE
       (%INTEGER-WRAPPER.WRAPPER-VALUE STELLATREE))))
    ((SUBTYPE-OF-FLOAT? TEST-VALUE-000)
     (CL:PROGN
      (CL:RETURN-FROM CONS-TREE-TO-LISP-CODE
       (%FLOAT-WRAPPER.WRAPPER-VALUE STELLATREE))))
    ((SUBTYPE-OF-STRING? TEST-VALUE-000)
     (CL:PROGN
      (CL:RETURN-FROM CONS-TREE-TO-LISP-CODE
       (%STRING-WRAPPER.WRAPPER-VALUE STELLATREE))))
    ((SUBTYPE-OF-CHARACTER? TEST-VALUE-000)
     (CL:PROGN
      (CL:RETURN-FROM CONS-TREE-TO-LISP-CODE
       (%CHARACTER-WRAPPER.WRAPPER-VALUE STELLATREE))))
    ((SUBTYPE-OF-BOOLEAN? TEST-VALUE-000)
     (CL:PROGN
      (CL:RETURN-FROM CONS-TREE-TO-LISP-CODE
       (%BOOLEAN-WRAPPER.WRAPPER-VALUE STELLATREE))))
    (CL:T
     (CL:WARN
      "cons-tree-to-lisp-code: Don't know how to convert `~A' into LISP-CODE"
      STELLATREE)
     (CL:RETURN-FROM CONS-TREE-TO-LISP-CODE
      (CL:FORMAT CL-NIL "~s" STELLATREE)))))
  (CL:ERROR "Returned from `|F|CONS-TREE-TO-LISP-CODE' without a `return'."))

;;; (DEFUN (BI-MODAL-TRANSLATE LISP-CODE) ...)

(CL:DEFUN BI-MODAL-TRANSLATE (STATEMENT)
  (CL:LET* ((*CLDEBUGSTELLA?* cldebug::*eval-last-parsed-form*))
   (CL:DECLARE (CL:SPECIAL *CLDEBUGSTELLA?*))
   (CL:LET* ((TRANSLATION (HELP-BI-MODAL-TRANSLATE STATEMENT)))
    (cldebug::cleanup-form-info-table)
    (CL:RETURN-FROM BI-MODAL-TRANSLATE TRANSLATION)))
  (CL:ERROR "Returned from `|F|BI-MODAL-TRANSLATE' without a `return'."))

(CL:DEFUN STARTUP-CLDEBUG-STELLA ()
  (CL:LET* ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2)
    (CL:SETQ SYM-CLDEBUG-STELLA-STELLA-*CLDEBUGSTELLA?*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "*CLDEBUGSTELLA?*" NULL 0))
    (CL:SETQ SGT-CLDEBUG-STELLA-STELLA-OBJECT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "OBJECT" NULL 1)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (DEFINE-FUNCTION-OBJECT "SUBSTITUTE-CLDEBUG-FORM-INFO-SOURCE"
     "(DEFUN (SUBSTITUTE-CLDEBUG-FORM-INFO-SOURCE UNKNOWN) ((SOURCEFORM UNKNOWN) (RESULTFORM UNKNOWN)))"
     (CL:FUNCTION SUBSTITUTE-CLDEBUG-FORM-INFO-SOURCE) NULL)
    (DEFINE-FUNCTION-OBJECT "STELLA-CODE-TO-CONS-TREE"
     "(DEFUN (STELLA-CODE-TO-CONS-TREE OBJECT) ((STELLACODE LISP-CODE)))"
     (CL:FUNCTION STELLA-CODE-TO-CONS-TREE) NULL)
    (DEFINE-FUNCTION-OBJECT "WALK-A-TREE"
     "(DEFUN (WALK-A-TREE OBJECT TYPE-SPEC) ((TREE OBJECT)))"
     (CL:FUNCTION WALK-A-TREE) NULL)
    (DEFINE-FUNCTION-OBJECT "CL-TRANSLATE-A-TREE"
     "(DEFUN (CL-TRANSLATE-A-TREE OBJECT) ((TREE OBJECT)))"
     (CL:FUNCTION CL-TRANSLATE-A-TREE) NULL)
    (DEFINE-FUNCTION-OBJECT "CONS-TREE-TO-LISP-CODE"
     "(DEFUN (CONS-TREE-TO-LISP-CODE LISP-CODE) ((STELLATREE OBJECT)))"
     (CL:FUNCTION CONS-TREE-TO-LISP-CODE) NULL)
    (DEFINE-FUNCTION-OBJECT "BI-MODAL-TRANSLATE"
     "(DEFUN (BI-MODAL-TRANSLATE LISP-CODE) ((STATEMENT LISP-CODE)))"
     (CL:FUNCTION BI-MODAL-TRANSLATE) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-CLDEBUG-STELLA"
     "(DEFUN STARTUP-CLDEBUG-STELLA () :PUBLIC? TRUE)" NULL NULL))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *CLDEBUGSTELLA?* BOOLEAN FALSE)")
    (CL:LET*
     ((GLOBAL
       (LOOKUP-GLOBAL-VARIABLE SYM-CLDEBUG-STELLA-STELLA-*CLDEBUGSTELLA?*)))
     (CL:SETF (%GLOBAL-VARIABLE.VARIABLE-GET-VALUE-CODE GLOBAL)
      (CL:FUNCTION READ-*CLDEBUGSTELLA?*))
     (CL:SETF (%GLOBAL-VARIABLE.VARIABLE-SET-VALUE-CODE GLOBAL)
      (CL:FUNCTION WRITE-*CLDEBUGSTELLA?*)))))
  :VOID)
