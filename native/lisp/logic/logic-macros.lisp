;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-LET NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-NEW NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-OUTPUT-STRING-STREAM NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-SPECIAL NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-*PRINTREADABLY?* NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-TRUE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-PRINT-STREAM NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-EOL NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-HELP-SIGNAL-PROPOSITION-ERROR NULL)
(CL:DEFVAR KWD-LOGIC-MACROS-ERROR NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-SIGNAL-EXCEPTION NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-PARSING-ERROR NULL)
(CL:DEFVAR KWD-LOGIC-MACROS-MESSAGE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-THE-STRING NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-SIGNAL-PARSING-ERROR NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-SIGNAL-PARSING-ERROR-EXPANDER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-PROPOSITION-ERROR NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-SIGNAL-PROPOSITION-ERROR NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-SIGNAL-PROPOSITION-ERROR-EXPANDER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-STANDARD-WARNING NULL)
(CL:DEFVAR KWD-LOGIC-MACROS-WARNING NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-SIGNAL-PROPOSITION-WARNING NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-SIGNAL-PROPOSITION-WARNING-EXPANDER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-DEFUN NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-STRING NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-PRINT NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-RETURN NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-DEF-DISPLAY-GLOBALS NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-DEF-DISPLAY-GLOBALS-EXPANDER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-PROGN NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-SETF NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-STARTING-CLOCK-TICKS NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-FRAME NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-CLOCKTICKS NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-SETQ NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-LASTMOVE NULL)
(CL:DEFVAR KWD-LOGIC-MACROS-DOWN NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-MOVE-IN-PLACE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-MOVE-IN-PLACE-EXPANDER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-BACKFRAME NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-UPFRAME NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-UP NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-CREATE-DOWN-FRAME NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-PROPOSITION NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-BACK NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-STATE NULL)
(CL:DEFVAR KWD-LOGIC-MACROS-AND NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-ARGUMENT-CURSOR NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-1+ NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-WHEN NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-HOLDS-BY-DEFAULT? NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-MOVE-FORWARD NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-MOVE-FORWARD-EXPANDER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-FORWARDFRAME NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-NULL NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-DOWN NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-POP-CONTROL-FRAME NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-MOVE-BACKWARD NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-MOVE-BACKWARD-EXPANDER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-DEPTH NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-COND NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-> NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-CURRENT-DEPTH-CUTOFF NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-QUERYITERATOR NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-DEFINED? NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-POP-FRAMES-UP-TO NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-1- NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-MV-SETQ NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-HANDLE-DEPTH-VIOLATION NULL)
(CL:DEFVAR KWD-LOGIC-MACROS-UP-FAIL NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-FALSE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-OTHERWISE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-NTH NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-ARGUMENTS NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-DEBUG-DEPTH NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-MOVE-DOWN NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-MOVE-DOWN-EXPANDER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-FAIL NULL)
(CL:DEFVAR KWD-LOGIC-MACROS-UP-TRUE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-RECORD-JUSTIFICATIONS? NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-RECORD-JUSTIFICATION NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-USING-DEFAULT-KNOWLEDGE? NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-RECORD-HOLDS-BY-DEFAULT NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-IF NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-CACHE-QUERY-RESULTS? NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-CACHE-GOAL NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-UPDATE-GOAL-CACHE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-NULL? NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-KEEP-FRAME NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-JUSTIFICATION NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-POP-DOWN-FRAME NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-MOVE-UP NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-MOVE-UP-EXPANDER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-APPLY-CACHED-RETRIEVE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-BQUOTE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-CONS-LIST NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-QUOTE NULL)
(CL:DEFVAR SGT-LOGIC-MACROS-STELLA-CONS NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-APPLY-RETRIEVE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-APPLY-RETRIEVE-EXPANDER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-APPLY-CACHED-ASK NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-APPLY-ASK NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-APPLY-ASK-EXPANDER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-*CONTEXT* NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-GET-INFERENCE-CACHE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-*MODULE* NULL)
(CL:DEFVAR KWD-LOGIC-MACROS-META NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-WITHIN-META-CACHE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-WITHIN-META-CACHE-EXPANDER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-*CLASSIFICATIONSESSION* NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-GET-CLASSIFICATION-SESSION NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-CLASSIFICATION-WORLD NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-WITHIN-CLASSIFICATION-SESSION NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-WITHIN-CLASSIFICATION-SESSION-EXPANDER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-OBJECT NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-MISSING-ARGUMENT NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-INTEGER-WRAPPER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-CASE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-DEFINE-COMPUTED-CONSTRAINT NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-DEFINE-COMPUTED-CONSTRAINT-EXPANDER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-BOOLEAN NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-X NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-NUMBER-WRAPPER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-Y NULL)
(CL:DEFVAR KWD-LOGIC-MACROS-PUBLIC? NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-TYPECASE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-FLOAT-WRAPPER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-CAST NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-FLOAT NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-DEFINE-ARITHMETIC-TEST-ON-WRAPPERS NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-DEFINE-ARITHMETIC-TEST-ON-WRAPPERS-EXPANDER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-FLOATRESULT NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-WRAP-LITERAL NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-SAFE-CAST NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-INTEGER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-DEFINE-ARITHMETIC-OPERATION-ON-WRAPPERS NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-DEFINE-ARITHMETIC-OPERATION-ON-WRAPPERS-EXPANDER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-STARTUP-LOGIC-MACROS NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM (CL:SPECIAL *STARTUP-TIME-PHASE* *MODULE*))

;;; (DEFCLASS LOGIC-EXCEPTION ...)

(CL:DEFINE-CONDITION LOGIC-EXCEPTION (STELLA-EXCEPTION)
  ())

(CL:DEFUN NEW-LOGIC-EXCEPTION (MESSAGE)
  (CL:LET* ((SELF NULL))
   (CL:SETQ SELF
    (CL:MAKE-CONDITION (CL:QUOTE LOGIC-EXCEPTION)
     *CONDITION-MESSAGE-KEYWORD* MESSAGE))
   (CL:RETURN-FROM NEW-LOGIC-EXCEPTION SELF)))

;;; (DEFCLASS PROPOSITION-ERROR ...)

(CL:DEFINE-CONDITION PROPOSITION-ERROR (LOGIC-EXCEPTION)
  ())

(CL:DEFUN NEW-PROPOSITION-ERROR (MESSAGE)
  (CL:LET* ((SELF NULL))
   (CL:SETQ SELF
    (CL:MAKE-CONDITION (CL:QUOTE PROPOSITION-ERROR)
     *CONDITION-MESSAGE-KEYWORD* MESSAGE))
   (CL:RETURN-FROM NEW-PROPOSITION-ERROR SELF)))

;;; (DEFCLASS PARSING-ERROR ...)

(CL:DEFINE-CONDITION PARSING-ERROR (LOGIC-EXCEPTION)
  ())

(CL:DEFUN NEW-PARSING-ERROR (MESSAGE)
  (CL:LET* ((SELF NULL))
   (CL:SETQ SELF
    (CL:MAKE-CONDITION (CL:QUOTE PARSING-ERROR)
     *CONDITION-MESSAGE-KEYWORD* MESSAGE))
   (CL:RETURN-FROM NEW-PARSING-ERROR SELF)))

;;; (DEFCLASS CLASH ...)

(CL:DEFINE-CONDITION CLASH (LOGIC-EXCEPTION)
  ())

(CL:DEFUN NEW-CLASH (MESSAGE)
  (CL:LET* ((SELF NULL))
   (CL:SETQ SELF
    (CL:MAKE-CONDITION (CL:QUOTE CLASH) *CONDITION-MESSAGE-KEYWORD*
     MESSAGE))
   (CL:RETURN-FROM NEW-CLASH SELF)))

;;; (DEFCLASS FAIL-EXCEPTION ...)

(CL:DEFINE-CONDITION FAIL-EXCEPTION (LOGIC-EXCEPTION)
  ())

(CL:DEFUN NEW-FAIL-EXCEPTION (MESSAGE)
  (CL:LET* ((SELF NULL))
   (CL:SETQ SELF
    (CL:MAKE-CONDITION (CL:QUOTE FAIL-EXCEPTION)
     *CONDITION-MESSAGE-KEYWORD* MESSAGE))
   (CL:RETURN-FROM NEW-FAIL-EXCEPTION SELF)))

;;; (DEFCLASS QUERY-THREAD-LIMIT-VIOLATION ...)

(CL:DEFINE-CONDITION QUERY-THREAD-LIMIT-VIOLATION (LOGIC-EXCEPTION)
  ())

(CL:DEFUN NEW-QUERY-THREAD-LIMIT-VIOLATION (MESSAGE)
  (CL:LET* ((SELF NULL))
   (CL:SETQ SELF
    (CL:MAKE-CONDITION (CL:QUOTE QUERY-THREAD-LIMIT-VIOLATION)
     *CONDITION-MESSAGE-KEYWORD* MESSAGE))
   (CL:RETURN-FROM NEW-QUERY-THREAD-LIMIT-VIOLATION SELF)))

;;; (DEFSPECIAL *SUPPRESSNONLOGICOBJECTWARNING?* ...)

(CL:DEFVAR *SUPPRESSNONLOGICOBJECTWARNING?* TRUE)

;;; (DEFMACRO SIGNAL-PARSING-ERROR ...)

(CL:DEFUN SIGNAL-PARSING-ERROR-EXPANDER (MESSAGE)
  (CL:LET* ((STREAMVAR (LOCAL-GENSYM "STREAM")))
   (CL:SETQ MESSAGE (FORMAT-MESSAGE-ARGUMENTS MESSAGE FALSE))
   (CL:RETURN-FROM SIGNAL-PARSING-ERROR-EXPANDER
    (LIST* SYM-LOGIC-MACROS-STELLA-LET
     (CONS
      (CONS STREAMVAR
       (CONS
        (LIST* SYM-LOGIC-MACROS-STELLA-NEW
         SYM-LOGIC-MACROS-STELLA-OUTPUT-STRING-STREAM NIL)
        NIL))
      NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-SPECIAL
      (CONS
       (LIST* SYM-LOGIC-MACROS-STELLA-*PRINTREADABLY?*
        SYM-LOGIC-MACROS-STELLA-TRUE NIL)
       NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-PRINT-STREAM STREAMVAR
       (CONS (WRAP-LITERAL "PARSING ERROR: ")
        (CONCATENATE MESSAGE
         (LIST* (WRAP-LITERAL ".") SYM-LOGIC-MACROS-STELLA-EOL NIL))))
      (LIST* SYM-LOGIC-MACROS-LOGIC-HELP-SIGNAL-PROPOSITION-ERROR
       STREAMVAR (CONS KWD-LOGIC-MACROS-ERROR NIL))
      NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-SIGNAL-EXCEPTION
      (LIST* SYM-LOGIC-MACROS-STELLA-NEW
       SYM-LOGIC-MACROS-LOGIC-PARSING-ERROR KWD-LOGIC-MACROS-MESSAGE
       (LIST* SYM-LOGIC-MACROS-STELLA-THE-STRING STREAMVAR NIL) NIL)
      NIL)
     NIL)))
  (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
   (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000)
    "Returned from `|F|SIGNAL-PARSING-ERROR-EXPANDER' without a `return'.")
   (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))

;;; (DEFMACRO SIGNAL-PROPOSITION-ERROR ...)

(CL:DEFUN SIGNAL-PROPOSITION-ERROR-EXPANDER (MESSAGE)
  (CL:LET* ((STREAMVAR (LOCAL-GENSYM "STREAM")))
   (CL:SETQ MESSAGE (FORMAT-MESSAGE-ARGUMENTS MESSAGE FALSE))
   (CL:RETURN-FROM SIGNAL-PROPOSITION-ERROR-EXPANDER
    (LIST* SYM-LOGIC-MACROS-STELLA-LET
     (CONS
      (CONS STREAMVAR
       (CONS
        (LIST* SYM-LOGIC-MACROS-STELLA-NEW
         SYM-LOGIC-MACROS-STELLA-OUTPUT-STRING-STREAM NIL)
        NIL))
      NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-SPECIAL
      (CONS
       (LIST* SYM-LOGIC-MACROS-STELLA-*PRINTREADABLY?*
        SYM-LOGIC-MACROS-STELLA-TRUE NIL)
       NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-PRINT-STREAM STREAMVAR
       (CONS (WRAP-LITERAL "ERROR: ")
        (CONCATENATE MESSAGE
         (LIST* (WRAP-LITERAL ".") SYM-LOGIC-MACROS-STELLA-EOL NIL))))
      (LIST* SYM-LOGIC-MACROS-LOGIC-HELP-SIGNAL-PROPOSITION-ERROR
       STREAMVAR (CONS KWD-LOGIC-MACROS-ERROR NIL))
      NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-SIGNAL-EXCEPTION
      (LIST* SYM-LOGIC-MACROS-STELLA-NEW
       SYM-LOGIC-MACROS-LOGIC-PROPOSITION-ERROR KWD-LOGIC-MACROS-MESSAGE
       (LIST* SYM-LOGIC-MACROS-STELLA-THE-STRING STREAMVAR NIL) NIL)
      NIL)
     NIL)))
  (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
   (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000)
    "Returned from `|F|SIGNAL-PROPOSITION-ERROR-EXPANDER' without a `return'.")
   (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))

;;; (DEFMACRO SIGNAL-PROPOSITION-WARNING ...)

(CL:DEFUN SIGNAL-PROPOSITION-WARNING-EXPANDER (MESSAGE)
  (CL:RETURN-FROM SIGNAL-PROPOSITION-WARNING-EXPANDER
   (LIST* SYM-LOGIC-MACROS-STELLA-SPECIAL
    (CONS
     (LIST* SYM-LOGIC-MACROS-STELLA-*PRINTREADABLY?*
      SYM-LOGIC-MACROS-STELLA-TRUE NIL)
     NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-PRINT-STREAM
     SYM-LOGIC-MACROS-STELLA-STANDARD-WARNING (WRAP-LITERAL "WARNING: ")
     (CONCATENATE MESSAGE (CONS SYM-LOGIC-MACROS-STELLA-EOL NIL)))
    (LIST* SYM-LOGIC-MACROS-LOGIC-HELP-SIGNAL-PROPOSITION-ERROR
     SYM-LOGIC-MACROS-STELLA-STANDARD-WARNING KWD-LOGIC-MACROS-WARNING
     NIL)
    NIL)))

(CL:DEFMACRO DEF-DISPLAY-GLOBALS (CL:&WHOLE EXPRESSION CL:&REST IGNORE)
  (CL:DECLARE (CL:IGNORE IGNORE))
  (CL:LET ((*IGNORETRANSLATIONERRORS?* TRUE))
   (INCREMENTALLY-TRANSLATE EXPRESSION FALSE)))

(CL:SETF (CL:MACRO-FUNCTION (CL:QUOTE /LOGIC/DEF-DISPLAY-GLOBALS)) (CL:MACRO-FUNCTION (CL:QUOTE DEF-DISPLAY-GLOBALS)))

;;; (DEFMACRO DEF-DISPLAY-GLOBALS ...)

(CL:DEFUN %DEF-DISPLAY-GLOBALS-EXPANDER (DISPLAYFUNCTIONNAME GLOBALVARIABLENAMES)
  (CL:LET* ((PRINTCLAUSES NIL))
   (CL:LET* ((G NULL) (ITER-000 (REVERSE GLOBALVARIABLENAMES)))
    (CL:LOOP WHILE (CL:NOT (NIL? ITER-000)) DO
     (CL:PROGN (CL:SETQ G (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (CL:SETQ PRINTCLAUSES
      (APPEND
       (CONS (WRAP-LITERAL (%SYMBOL-NAME G))
        (LIST* (WRAP-LITERAL " =  ") G
         (CONS SYM-LOGIC-MACROS-STELLA-EOL NIL)))
       PRINTCLAUSES))))
   (CL:RETURN-FROM %DEF-DISPLAY-GLOBALS-EXPANDER
    (LIST* SYM-LOGIC-MACROS-STELLA-DEFUN
     (CONS DISPLAYFUNCTIONNAME (CONS SYM-LOGIC-MACROS-STELLA-STRING NIL))
     NIL
     (LIST* SYM-LOGIC-MACROS-STELLA-PRINT SYM-LOGIC-MACROS-STELLA-EOL
      (CONCATENATE PRINTCLAUSES (CONS SYM-LOGIC-MACROS-STELLA-EOL NIL)))
     (LIST* SYM-LOGIC-MACROS-STELLA-RETURN (WRAP-LITERAL "") NIL) NIL)))
  (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
   (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000)
    "Returned from `|F|DEF-DISPLAY-GLOBALS-EXPANDER' without a `return'.")
   (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))

;;; (DEFMACRO MOVE-IN-PLACE ...)

(CL:DEFUN MOVE-IN-PLACE-EXPANDER ()
  (CL:RETURN-FROM MOVE-IN-PLACE-EXPANDER
   (LIST* SYM-LOGIC-MACROS-STELLA-PROGN
    (LIST* SYM-LOGIC-MACROS-STELLA-SETF
     (LIST* SYM-LOGIC-MACROS-LOGIC-STARTING-CLOCK-TICKS
      SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
     SYM-LOGIC-MACROS-LOGIC-CLOCKTICKS NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-SETQ SYM-LOGIC-MACROS-LOGIC-LASTMOVE
     KWD-LOGIC-MACROS-DOWN NIL)
    NIL)))

;;; (DEFMACRO MOVE-FORWARD ...)

(CL:DEFUN MOVE-FORWARD-EXPANDER ()
  (CL:RETURN-FROM MOVE-FORWARD-EXPANDER
   (LIST* SYM-LOGIC-MACROS-STELLA-LET
    (LIST*
     (LIST* SYM-LOGIC-MACROS-LOGIC-BACKFRAME SYM-LOGIC-MACROS-LOGIC-FRAME
      NIL)
     (LIST* SYM-LOGIC-MACROS-LOGIC-UPFRAME
      (LIST* SYM-LOGIC-MACROS-LOGIC-UP SYM-LOGIC-MACROS-LOGIC-BACKFRAME
       NIL)
      NIL)
     NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-SETQ SYM-LOGIC-MACROS-LOGIC-FRAME
     (LIST* SYM-LOGIC-MACROS-LOGIC-CREATE-DOWN-FRAME
      SYM-LOGIC-MACROS-LOGIC-UPFRAME
      (LIST* SYM-LOGIC-MACROS-LOGIC-PROPOSITION
       SYM-LOGIC-MACROS-LOGIC-BACKFRAME NIL)
      NIL)
     NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-SETF
     (LIST* SYM-LOGIC-MACROS-LOGIC-BACK SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
     SYM-LOGIC-MACROS-LOGIC-BACKFRAME NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-SETF
     (LIST* SYM-LOGIC-MACROS-STELLA-STATE SYM-LOGIC-MACROS-LOGIC-FRAME
      NIL)
     KWD-LOGIC-MACROS-AND NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-SETF
     (LIST* SYM-LOGIC-MACROS-LOGIC-ARGUMENT-CURSOR
      SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-1+
      (LIST* SYM-LOGIC-MACROS-LOGIC-ARGUMENT-CURSOR
       SYM-LOGIC-MACROS-LOGIC-BACKFRAME NIL)
      NIL)
     NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-WHEN
     (LIST* SYM-LOGIC-MACROS-LOGIC-HOLDS-BY-DEFAULT?
      SYM-LOGIC-MACROS-LOGIC-BACKFRAME NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-SETF
      (LIST* SYM-LOGIC-MACROS-LOGIC-HOLDS-BY-DEFAULT?
       SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
      SYM-LOGIC-MACROS-STELLA-TRUE NIL)
     NIL)
    NIL)))

;;; (DEFMACRO MOVE-BACKWARD ...)

(CL:DEFUN MOVE-BACKWARD-EXPANDER ()
  (CL:RETURN-FROM MOVE-BACKWARD-EXPANDER
   (LIST* SYM-LOGIC-MACROS-STELLA-LET
    (CONS
     (LIST* SYM-LOGIC-MACROS-LOGIC-FORWARDFRAME
      SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
     NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-SETQ SYM-LOGIC-MACROS-LOGIC-FRAME
     (LIST* SYM-LOGIC-MACROS-LOGIC-BACK SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
     NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-SETF
     (LIST* SYM-LOGIC-MACROS-LOGIC-BACK
      SYM-LOGIC-MACROS-LOGIC-FORWARDFRAME NIL)
     SYM-LOGIC-MACROS-STELLA-NULL NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-SETF
     (LIST* SYM-LOGIC-MACROS-LOGIC-DOWN
      (LIST* SYM-LOGIC-MACROS-LOGIC-UP SYM-LOGIC-MACROS-LOGIC-FORWARDFRAME
       NIL)
      NIL)
     SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
    (LIST* SYM-LOGIC-MACROS-LOGIC-POP-CONTROL-FRAME
     SYM-LOGIC-MACROS-LOGIC-FORWARDFRAME NIL)
    NIL)))

;;; (DEFMACRO MOVE-DOWN ...)

(CL:DEFUN MOVE-DOWN-EXPANDER ()
  (CL:RETURN-FROM MOVE-DOWN-EXPANDER
   (LIST* SYM-LOGIC-MACROS-STELLA-PROGN
    (LIST* SYM-LOGIC-MACROS-STELLA-SETQ SYM-LOGIC-MACROS-LOGIC-DEPTH
     (LIST* SYM-LOGIC-MACROS-STELLA-1+ SYM-LOGIC-MACROS-LOGIC-DEPTH NIL)
     NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-SETF
     (LIST* SYM-LOGIC-MACROS-LOGIC-STARTING-CLOCK-TICKS
      SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
     SYM-LOGIC-MACROS-LOGIC-CLOCKTICKS NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-COND
     (LIST*
      (LIST* SYM-LOGIC-MACROS-STELLA-> SYM-LOGIC-MACROS-LOGIC-DEPTH
       (LIST* SYM-LOGIC-MACROS-LOGIC-CURRENT-DEPTH-CUTOFF
        SYM-LOGIC-MACROS-LOGIC-QUERYITERATOR NIL)
       NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-WHEN
       (LIST* SYM-LOGIC-MACROS-STELLA-DEFINED?
        (LIST* SYM-LOGIC-MACROS-LOGIC-DOWN SYM-LOGIC-MACROS-LOGIC-FRAME
         NIL)
        NIL)
       (LIST* SYM-LOGIC-MACROS-LOGIC-POP-FRAMES-UP-TO
        (LIST* SYM-LOGIC-MACROS-LOGIC-DOWN SYM-LOGIC-MACROS-LOGIC-FRAME
         NIL)
        NIL)
       NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-SETQ SYM-LOGIC-MACROS-LOGIC-DEPTH
       (LIST* SYM-LOGIC-MACROS-STELLA-1- SYM-LOGIC-MACROS-LOGIC-DEPTH NIL)
       NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-MV-SETQ
       (LIST* SYM-LOGIC-MACROS-LOGIC-FRAME SYM-LOGIC-MACROS-LOGIC-DEPTH
        NIL)
       (LIST* SYM-LOGIC-MACROS-LOGIC-HANDLE-DEPTH-VIOLATION
        SYM-LOGIC-MACROS-LOGIC-FRAME SYM-LOGIC-MACROS-LOGIC-DEPTH NIL)
       NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-SETQ SYM-LOGIC-MACROS-LOGIC-LASTMOVE
       KWD-LOGIC-MACROS-UP-FAIL NIL)
      NIL)
     (LIST*
      (LIST* SYM-LOGIC-MACROS-STELLA-DEFINED?
       (LIST* SYM-LOGIC-MACROS-LOGIC-DOWN SYM-LOGIC-MACROS-LOGIC-FRAME
        NIL)
       NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-SETQ SYM-LOGIC-MACROS-LOGIC-FRAME
       (LIST* SYM-LOGIC-MACROS-LOGIC-DOWN SYM-LOGIC-MACROS-LOGIC-FRAME
        NIL)
       NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-SETF
       (LIST* SYM-LOGIC-MACROS-LOGIC-STARTING-CLOCK-TICKS
        SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
       SYM-LOGIC-MACROS-LOGIC-CLOCKTICKS NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-SETF
       (LIST* SYM-LOGIC-MACROS-LOGIC-HOLDS-BY-DEFAULT?
        SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
       SYM-LOGIC-MACROS-STELLA-FALSE NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-SETQ SYM-LOGIC-MACROS-LOGIC-LASTMOVE
       KWD-LOGIC-MACROS-DOWN NIL)
      NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-OTHERWISE
      (LIST* SYM-LOGIC-MACROS-STELLA-LET
       (LIST*
        (LIST* SYM-LOGIC-MACROS-LOGIC-UPFRAME SYM-LOGIC-MACROS-LOGIC-FRAME
         NIL)
        (LIST* SYM-LOGIC-MACROS-LOGIC-PROPOSITION
         (LIST* SYM-LOGIC-MACROS-STELLA-NTH
          (LIST* SYM-LOGIC-MACROS-STELLA-ARGUMENTS
           (LIST* SYM-LOGIC-MACROS-LOGIC-PROPOSITION
            SYM-LOGIC-MACROS-LOGIC-UPFRAME NIL)
           NIL)
          (LIST* SYM-LOGIC-MACROS-LOGIC-ARGUMENT-CURSOR
           SYM-LOGIC-MACROS-LOGIC-UPFRAME NIL)
          NIL)
         NIL)
        NIL)
       (LIST* SYM-LOGIC-MACROS-STELLA-SETQ SYM-LOGIC-MACROS-LOGIC-FRAME
        (LIST* SYM-LOGIC-MACROS-LOGIC-CREATE-DOWN-FRAME
         SYM-LOGIC-MACROS-LOGIC-UPFRAME SYM-LOGIC-MACROS-LOGIC-PROPOSITION
         NIL)
        NIL)
       (LIST* SYM-LOGIC-MACROS-STELLA-SETF
        (LIST* SYM-LOGIC-MACROS-LOGIC-DEBUG-DEPTH
         SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
        SYM-LOGIC-MACROS-LOGIC-DEPTH NIL)
       (LIST* SYM-LOGIC-MACROS-STELLA-SETF
        (LIST* SYM-LOGIC-MACROS-LOGIC-STARTING-CLOCK-TICKS
         SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
        SYM-LOGIC-MACROS-LOGIC-CLOCKTICKS NIL)
       (LIST* SYM-LOGIC-MACROS-STELLA-SETQ SYM-LOGIC-MACROS-LOGIC-LASTMOVE
        KWD-LOGIC-MACROS-DOWN NIL)
       NIL)
      NIL)
     NIL)
    NIL)))

;;; (DEFMACRO MOVE-UP ...)

(CL:DEFUN MOVE-UP-EXPANDER (SUCCESS? KEEPFRAME?)
  (CL:LET* ((LASTMOVE NULL))
   (CL:COND
    ((EQ? SUCCESS? SYM-LOGIC-MACROS-STELLA-TRUE)
     (CL:SETQ LASTMOVE KWD-LOGIC-MACROS-UP-TRUE))
    ((EQ? SUCCESS? SYM-LOGIC-MACROS-LOGIC-FAIL)
     (CL:SETQ LASTMOVE KWD-LOGIC-MACROS-UP-FAIL)
     (CL:SETQ SUCCESS? SYM-LOGIC-MACROS-STELLA-FALSE))
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" SUCCESS?
       "' is not a valid case option")
      (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
   (CL:RETURN-FROM MOVE-UP-EXPANDER
    (LIST* SYM-LOGIC-MACROS-STELLA-PROGN
     (LIST* SYM-LOGIC-MACROS-STELLA-WHEN
      (LIST* SYM-LOGIC-MACROS-STELLA-DEFINED?
       (LIST* SYM-LOGIC-MACROS-LOGIC-UP SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
       NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-WHEN
       (CONS SYM-LOGIC-MACROS-LOGIC-RECORD-JUSTIFICATIONS? NIL)
       (LIST* SYM-LOGIC-MACROS-LOGIC-RECORD-JUSTIFICATION
        SYM-LOGIC-MACROS-LOGIC-FRAME LASTMOVE NIL)
       NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-WHEN
       (CONS SYM-LOGIC-MACROS-LOGIC-USING-DEFAULT-KNOWLEDGE? NIL)
       (LIST* SYM-LOGIC-MACROS-LOGIC-RECORD-HOLDS-BY-DEFAULT
        SYM-LOGIC-MACROS-LOGIC-FRAME LASTMOVE NIL)
       NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-IF
       (CONS SYM-LOGIC-MACROS-LOGIC-CACHE-QUERY-RESULTS? NIL)
       (LIST* SYM-LOGIC-MACROS-LOGIC-CACHE-GOAL
        SYM-LOGIC-MACROS-LOGIC-FRAME SUCCESS?
        (CONS
         (CL:IF (EQ? KEEPFRAME? SYM-LOGIC-MACROS-LOGIC-KEEP-FRAME)
          SYM-LOGIC-MACROS-STELLA-TRUE SYM-LOGIC-MACROS-STELLA-FALSE)
         (CONS SYM-LOGIC-MACROS-LOGIC-CLOCKTICKS NIL)))
       (LIST* SYM-LOGIC-MACROS-LOGIC-UPDATE-GOAL-CACHE
        SYM-LOGIC-MACROS-LOGIC-FRAME SUCCESS? NIL)
       NIL)
      (CONCATENATE
       (CL:IF (EQ? KEEPFRAME? SYM-LOGIC-MACROS-LOGIC-KEEP-FRAME)
        (CONS
         (LIST* SYM-LOGIC-MACROS-STELLA-SETF
          (LIST* SYM-LOGIC-MACROS-LOGIC-JUSTIFICATION
           SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
          SYM-LOGIC-MACROS-STELLA-NULL NIL)
         NIL)
        NIL)
       NIL))
     (LIST* SYM-LOGIC-MACROS-STELLA-SETQ SYM-LOGIC-MACROS-LOGIC-DEPTH
      (LIST* SYM-LOGIC-MACROS-STELLA-1- SYM-LOGIC-MACROS-LOGIC-DEPTH NIL)
      NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-SETQ SYM-LOGIC-MACROS-LOGIC-FRAME
      (LIST* SYM-LOGIC-MACROS-LOGIC-UP SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
      NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-WHEN
      (LIST* SYM-LOGIC-MACROS-STELLA-NULL? SYM-LOGIC-MACROS-LOGIC-FRAME
       NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-RETURN SUCCESS? NIL) NIL)
     (CONCATENATE
      (CL:IF (EQ? KEEPFRAME? SYM-LOGIC-MACROS-LOGIC-KEEP-FRAME) NIL
       (CONS
        (LIST* SYM-LOGIC-MACROS-LOGIC-POP-DOWN-FRAME
         SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
        NIL))
      (LIST*
       (LIST* SYM-LOGIC-MACROS-STELLA-SETQ SYM-LOGIC-MACROS-LOGIC-LASTMOVE
        LASTMOVE NIL)
       SYM-LOGIC-MACROS-LOGIC-LASTMOVE NIL)))))
  (CL:LET* ((STREAM-001 (NEW-OUTPUT-STRING-STREAM)))
   (%%PRINT-STREAM (%NATIVE-STREAM STREAM-001)
    "Returned from `|F|MOVE-UP-EXPANDER' without a `return'.")
   (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-001)))))

;;; (DEFMACRO APPLY-RETRIEVE ...)

(CL:DEFUN APPLY-RETRIEVE-EXPANDER (BODY)
  "Execute a query composed of io-variables 'variables'
and body 'queryBody'.  Before executing, bind variables to 'inputBindings'
(in sequence). If one variable is left unbound, returns a cons list of
bindings of that variable.  If two or more are unbound, returns
a cons list of cons lists of bindings."
  (CL:LET* ((GENSYMNAME (GENSYM "QUERY")))
   (CL:RETURN-FROM APPLY-RETRIEVE-EXPANDER
    (LIST* SYM-LOGIC-MACROS-LOGIC-APPLY-CACHED-RETRIEVE
     (LIST* SYM-LOGIC-MACROS-STELLA-BQUOTE (FIRST BODY) NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-BQUOTE (SECOND BODY) NIL)
     (CONS SYM-LOGIC-MACROS-STELLA-CONS-LIST
      (CONCATENATE (CAST (THIRD BODY) SGT-LOGIC-MACROS-STELLA-CONS) NIL))
     (CONS SYM-LOGIC-MACROS-STELLA-CONS-LIST
      (CONCATENATE (NTH-REST BODY 3) NIL))
     (LIST* SYM-LOGIC-MACROS-STELLA-QUOTE GENSYMNAME NIL) NIL)))
  (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
   (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000)
    "Returned from `|F|APPLY-RETRIEVE-EXPANDER' without a `return'.")
   (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))

;;; (DEFMACRO APPLY-ASK ...)

(CL:DEFUN APPLY-ASK-EXPANDER (BODY)
  "Execute a yes/no query composed of input-variables
'inputVariables' and body 'queryBody'.  Before executing, bind variables
to 'inputBindings' (in sequence)."
  (CL:LET* ((GENSYMNAME (GENSYM "QUERY")))
   (CL:RETURN-FROM APPLY-ASK-EXPANDER
    (LIST* SYM-LOGIC-MACROS-LOGIC-APPLY-CACHED-ASK
     (LIST* SYM-LOGIC-MACROS-STELLA-BQUOTE (FIRST BODY) NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-BQUOTE (SECOND BODY) NIL)
     (CONS SYM-LOGIC-MACROS-STELLA-CONS-LIST
      (CONCATENATE (CAST (THIRD BODY) SGT-LOGIC-MACROS-STELLA-CONS) NIL))
     (CONS SYM-LOGIC-MACROS-STELLA-CONS-LIST
      (CONCATENATE (NTH-REST BODY 3) NIL))
     (LIST* SYM-LOGIC-MACROS-STELLA-QUOTE GENSYMNAME NIL) NIL)))
  (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
   (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000)
    "Returned from `|F|APPLY-ASK-EXPANDER' without a `return'.")
   (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))

;;; (DEFMACRO WITHIN-META-CACHE ...)

(CL:DEFUN WITHIN-META-CACHE-EXPANDER (BODY)
  "Execute `body' within the meta cache of the current module.
Set appropriate special variables."
  (CL:RETURN-FROM WITHIN-META-CACHE-EXPANDER
   (LIST* SYM-LOGIC-MACROS-STELLA-SPECIAL
    (CONS
     (LIST* SYM-LOGIC-MACROS-STELLA-*CONTEXT*
      (LIST* SYM-LOGIC-MACROS-LOGIC-GET-INFERENCE-CACHE
       SYM-LOGIC-MACROS-STELLA-*MODULE* KWD-LOGIC-MACROS-META NIL)
      NIL)
     NIL)
    (CONCATENATE BODY NIL))))

;;; (DEFMACRO WITHIN-CLASSIFICATION-SESSION ...)

(CL:DEFUN WITHIN-CLASSIFICATION-SESSION-EXPANDER (DESCRIPTIONORINSTANCE BODY)
  "Used during classification.  Execute `body' within the indicated
classification session and inference world."
  (CL:RETURN-FROM WITHIN-CLASSIFICATION-SESSION-EXPANDER
   (LIST* SYM-LOGIC-MACROS-STELLA-SPECIAL
    (LIST*
     (LIST* SYM-LOGIC-MACROS-LOGIC-*CLASSIFICATIONSESSION*
      (LIST* SYM-LOGIC-MACROS-LOGIC-GET-CLASSIFICATION-SESSION
       DESCRIPTIONORINSTANCE NIL)
      NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-*CONTEXT*
      (LIST* SYM-LOGIC-MACROS-LOGIC-CLASSIFICATION-WORLD
       SYM-LOGIC-MACROS-LOGIC-*CLASSIFICATIONSESSION* NIL)
      NIL)
     NIL)
    (CONCATENATE BODY NIL))))

;;; (VERBATIM :COMMON-LISP ...)

(CL:UNLESS (CL:FIND-PACKAGE "POWERLOOM-USER") (CL:DEFPACKAGE "POWERLOOM-USER" (:NICKNAMES "PL-USER")))

;;; (VERBATIM :COMMON-LISP ...)

(CL:defpackage "LOOM-API" (:use))

;;; (DEFMACRO DEFINE-COMPUTED-CONSTRAINT ...)

(CL:DEFUN DEFINE-COMPUTED-CONSTRAINT-EXPANDER (NAME VARLIST CONSTRAINT-TEST POSITION-COMPUTATIONS)
  "Defines NAME to be a constraint computation which uses CONSTRAINT-TEST
to determine if a fully bound set of variables satisfies the constraint.  The forms in
POSITION-COMPUTATIONS are used to compute the value for each of the positions. All such
computations must set the variable VALUE to be the result computed for the missing position.
Settin VALUE to NULL for any such computation means that that particular argument cannot be
computed from the others.  The input variables in VARLIST will be bound to the N arguments
to the constraint.
  The generated function will return a Stella Object and take as inputs the values of
the N arguments to the constraint.  A value of NULL means that the value is not available.
If all arguments are not NULL, then the return value will be a BOOLEAN-WRAPPER indicating 
whether the constraint is satisified or not.
  If more than one input value is NULL, then this constraint code will not be called."
  (CL:LET*
   ((VALUECOMPUTATIONCODE NIL) (VALUESYMBOL (INTERN-SYMBOL "VALUE")))
   (CL:LET*
    ((I NULL-INTEGER) (COMPUTATION NULL) (ITER-000 POSITION-COMPUTATIONS)
     (ITER-001 0) (COLLECT-000 NULL))
    (CL:LOOP WHILE (CL:NOT (NIL? ITER-000)) DO
     (CL:PROGN (CL:SETQ COMPUTATION (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (CL:PROGN (CL:SETQ I ITER-001) (CL:SETQ ITER-001 (CL:1+ ITER-001)))
     (CL:IF (NULL? COLLECT-000)
      (CL:PROGN
       (CL:SETQ COLLECT-000
        (CONS (CONS (WRAP-LITERAL I) (CONS COMPUTATION NIL)) NIL))
       (CL:IF (NIL? VALUECOMPUTATIONCODE)
        (CL:SETQ VALUECOMPUTATIONCODE COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST VALUECOMPUTATIONCODE COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000)
        (CONS (CONS (WRAP-LITERAL I) (CONS COMPUTATION NIL)) NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
   (CL:RETURN-FROM DEFINE-COMPUTED-CONSTRAINT-EXPANDER
    (LIST* SYM-LOGIC-MACROS-STELLA-DEFUN
     (CONS NAME (CONS SYM-LOGIC-MACROS-STELLA-OBJECT NIL))
     (CONS
      (LIST* SYM-LOGIC-MACROS-LOGIC-MISSING-ARGUMENT
       SYM-LOGIC-MACROS-STELLA-INTEGER-WRAPPER NIL)
      (CONCATENATE VARLIST NIL))
     (LIST* SYM-LOGIC-MACROS-STELLA-LET
      (CONS
       (CONS VALUESYMBOL
        (LIST* SYM-LOGIC-MACROS-STELLA-OBJECT SYM-LOGIC-MACROS-STELLA-NULL
         NIL))
       NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-CASE
       (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
        SYM-LOGIC-MACROS-LOGIC-MISSING-ARGUMENT NIL)
       (LIST* (WRAP-LITERAL -1) CONSTRAINT-TEST NIL)
       (CONCATENATE VALUECOMPUTATIONCODE
        (CONS
         (LIST* SYM-LOGIC-MACROS-STELLA-OTHERWISE
          SYM-LOGIC-MACROS-STELLA-NULL NIL)
         NIL)))
      (LIST* SYM-LOGIC-MACROS-STELLA-RETURN VALUESYMBOL NIL) NIL)
     NIL)))
  (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
   (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000)
    "Returned from `|F|DEFINE-COMPUTED-CONSTRAINT-EXPANDER' without a `return'.")
   (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))

;;; (DEFMACRO DEFINE-ARITHMETIC-TEST-ON-WRAPPERS ...)

(CL:DEFUN DEFINE-ARITHMETIC-TEST-ON-WRAPPERS-EXPANDER (NAME TEST-NAME)
  "Defines NAME as an arithmetic comparision operation using the
test TEST-NAME.  It will take two NUMBER-WRAPPER parameters and return a BOOLEAN.
The code will use the appropriate test for the specific subtype of NUMBER-WRAPPER
actually passed in."
  (CL:RETURN-FROM DEFINE-ARITHMETIC-TEST-ON-WRAPPERS-EXPANDER
   (LIST* SYM-LOGIC-MACROS-STELLA-DEFUN
    (CONS NAME (CONS SYM-LOGIC-MACROS-STELLA-BOOLEAN NIL))
    (LIST*
     (LIST* SYM-LOGIC-MACROS-STELLA-X
      SYM-LOGIC-MACROS-STELLA-NUMBER-WRAPPER NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-Y
      SYM-LOGIC-MACROS-STELLA-NUMBER-WRAPPER NIL)
     NIL)
    KWD-LOGIC-MACROS-PUBLIC? SYM-LOGIC-MACROS-STELLA-TRUE
    (LIST* SYM-LOGIC-MACROS-STELLA-TYPECASE SYM-LOGIC-MACROS-STELLA-X
     (LIST* SYM-LOGIC-MACROS-STELLA-INTEGER-WRAPPER
      (LIST* SYM-LOGIC-MACROS-STELLA-TYPECASE SYM-LOGIC-MACROS-STELLA-Y
       (LIST* SYM-LOGIC-MACROS-STELLA-INTEGER-WRAPPER
        (LIST* SYM-LOGIC-MACROS-STELLA-RETURN
         (CONS TEST-NAME
          (LIST*
           (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
            SYM-LOGIC-MACROS-STELLA-X NIL)
           (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
            SYM-LOGIC-MACROS-STELLA-Y NIL)
           NIL))
         NIL)
        NIL)
       (LIST* SYM-LOGIC-MACROS-STELLA-FLOAT-WRAPPER
        (LIST* SYM-LOGIC-MACROS-STELLA-RETURN
         (CONS TEST-NAME
          (LIST*
           (LIST* SYM-LOGIC-MACROS-STELLA-CAST
            (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
             SYM-LOGIC-MACROS-STELLA-X NIL)
            SYM-LOGIC-MACROS-STELLA-FLOAT NIL)
           (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
            SYM-LOGIC-MACROS-STELLA-Y NIL)
           NIL))
         NIL)
        NIL)
       NIL)
      NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-FLOAT-WRAPPER
      (LIST* SYM-LOGIC-MACROS-STELLA-TYPECASE SYM-LOGIC-MACROS-STELLA-Y
       (LIST* SYM-LOGIC-MACROS-STELLA-INTEGER-WRAPPER
        (LIST* SYM-LOGIC-MACROS-STELLA-RETURN
         (CONS TEST-NAME
          (LIST*
           (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
            SYM-LOGIC-MACROS-STELLA-X NIL)
           (LIST* SYM-LOGIC-MACROS-STELLA-CAST
            (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
             SYM-LOGIC-MACROS-STELLA-Y NIL)
            SYM-LOGIC-MACROS-STELLA-FLOAT NIL)
           NIL))
         NIL)
        NIL)
       (LIST* SYM-LOGIC-MACROS-STELLA-FLOAT-WRAPPER
        (LIST* SYM-LOGIC-MACROS-STELLA-RETURN
         (CONS TEST-NAME
          (LIST*
           (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
            SYM-LOGIC-MACROS-STELLA-X NIL)
           (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
            SYM-LOGIC-MACROS-STELLA-Y NIL)
           NIL))
         NIL)
        NIL)
       NIL)
      NIL)
     NIL)
    NIL)))

;;; (DEFMACRO DEFINE-ARITHMETIC-OPERATION-ON-WRAPPERS ...)

(CL:DEFUN DEFINE-ARITHMETIC-OPERATION-ON-WRAPPERS-EXPANDER (NAME OPERATION-NAME)
  "Defines NAME as an arithmetic comparision operation using the
test TEST-NAME.  It will take two NUMBER-WRAPPER parameters and return a NUMBER-WRAPPER.
The code will use the appropriate test for the specific subtype of NUMBER-WRAPPERS
actually passed in, and return the appropriate subtype of NUMBER-WRAPPER based on
the normal arithmetic contagion rules.
  
For example, if both input parameters are INTEGER-WRAPPERs then the output will be
an INTEGER-WRAPPER. If the inputs are an INTEGER-WRAPPER and a FLOAT-WRAPPER then
the output will be a FLOAT-WRAPPER, etc."
  (CL:RETURN-FROM DEFINE-ARITHMETIC-OPERATION-ON-WRAPPERS-EXPANDER
   (LIST* SYM-LOGIC-MACROS-STELLA-DEFUN
    (CONS NAME (CONS SYM-LOGIC-MACROS-STELLA-NUMBER-WRAPPER NIL))
    (LIST*
     (LIST* SYM-LOGIC-MACROS-STELLA-X
      SYM-LOGIC-MACROS-STELLA-NUMBER-WRAPPER NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-Y
      SYM-LOGIC-MACROS-STELLA-NUMBER-WRAPPER NIL)
     NIL)
    KWD-LOGIC-MACROS-PUBLIC? SYM-LOGIC-MACROS-STELLA-TRUE
    (LIST* SYM-LOGIC-MACROS-STELLA-LET
     (CONS
      (LIST* SYM-LOGIC-MACROS-LOGIC-FLOATRESULT
       SYM-LOGIC-MACROS-STELLA-FLOAT SYM-LOGIC-MACROS-STELLA-NULL NIL)
      NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-TYPECASE SYM-LOGIC-MACROS-STELLA-X
      (LIST* SYM-LOGIC-MACROS-STELLA-INTEGER-WRAPPER
       (LIST* SYM-LOGIC-MACROS-STELLA-TYPECASE SYM-LOGIC-MACROS-STELLA-Y
        (LIST* SYM-LOGIC-MACROS-STELLA-INTEGER-WRAPPER
         (LIST* SYM-LOGIC-MACROS-STELLA-RETURN
          (LIST* SYM-LOGIC-MACROS-STELLA-WRAP-LITERAL
           (LIST* SYM-LOGIC-MACROS-STELLA-SAFE-CAST
            (CONS OPERATION-NAME
             (LIST*
              (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
               SYM-LOGIC-MACROS-STELLA-X NIL)
              (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
               SYM-LOGIC-MACROS-STELLA-Y NIL)
              NIL))
            SYM-LOGIC-MACROS-STELLA-INTEGER NIL)
           NIL)
          NIL)
         NIL)
        (LIST* SYM-LOGIC-MACROS-STELLA-FLOAT-WRAPPER
         (LIST* SYM-LOGIC-MACROS-STELLA-SETQ
          SYM-LOGIC-MACROS-LOGIC-FLOATRESULT
          (CONS OPERATION-NAME
           (LIST*
            (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
             SYM-LOGIC-MACROS-STELLA-X NIL)
            (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
             SYM-LOGIC-MACROS-STELLA-Y NIL)
            NIL))
          NIL)
         NIL)
        NIL)
       NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-FLOAT-WRAPPER
       (LIST* SYM-LOGIC-MACROS-STELLA-TYPECASE SYM-LOGIC-MACROS-STELLA-Y
        (LIST*
         (LIST* SYM-LOGIC-MACROS-STELLA-INTEGER-WRAPPER
          SYM-LOGIC-MACROS-STELLA-FLOAT-WRAPPER NIL)
         (LIST* SYM-LOGIC-MACROS-STELLA-SETQ
          SYM-LOGIC-MACROS-LOGIC-FLOATRESULT
          (CONS OPERATION-NAME
           (LIST*
            (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
             SYM-LOGIC-MACROS-STELLA-X NIL)
            (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
             SYM-LOGIC-MACROS-STELLA-Y NIL)
            NIL))
          NIL)
         NIL)
        NIL)
       NIL)
      NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-RETURN
      (LIST* SYM-LOGIC-MACROS-STELLA-WRAP-LITERAL
       SYM-LOGIC-MACROS-LOGIC-FLOATRESULT NIL)
      NIL)
     NIL)
    NIL)))

(CL:DEFUN HELP-STARTUP-LOGIC-MACROS1 ()
  (CL:PROGN
   (INTERN-SURROGATE-IN-MODULE "PROPOSITION.IF" *STELLA-MODULE* TRUE)
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-LET
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LET"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-NEW
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NEW"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-OUTPUT-STRING-STREAM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "OUTPUT-STRING-STREAM"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-SPECIAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SPECIAL"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-*PRINTREADABLY?*
    (INTERN-RIGID-SYMBOL-WRT-MODULE "*PRINTREADABLY?*"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-TRUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TRUE"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-PRINT-STREAM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT-STREAM"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-EOL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "EOL"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-HELP-SIGNAL-PROPOSITION-ERROR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "HELP-SIGNAL-PROPOSITION-ERROR" NULL
     0))
   (CL:SETQ KWD-LOGIC-MACROS-ERROR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ERROR" NULL 2))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-SIGNAL-EXCEPTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SIGNAL-EXCEPTION"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-PARSING-ERROR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PARSING-ERROR" NULL 0))
   (CL:SETQ KWD-LOGIC-MACROS-MESSAGE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MESSAGE" NULL 2))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-THE-STRING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "THE-STRING"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-SIGNAL-PARSING-ERROR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SIGNAL-PARSING-ERROR" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-SIGNAL-PARSING-ERROR-EXPANDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SIGNAL-PARSING-ERROR-EXPANDER" NULL
     0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-PROPOSITION-ERROR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PROPOSITION-ERROR" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-SIGNAL-PROPOSITION-ERROR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SIGNAL-PROPOSITION-ERROR" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-SIGNAL-PROPOSITION-ERROR-EXPANDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SIGNAL-PROPOSITION-ERROR-EXPANDER"
     NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-STANDARD-WARNING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STANDARD-WARNING"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ KWD-LOGIC-MACROS-WARNING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WARNING" NULL 2))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-SIGNAL-PROPOSITION-WARNING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SIGNAL-PROPOSITION-WARNING" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-SIGNAL-PROPOSITION-WARNING-EXPANDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SIGNAL-PROPOSITION-WARNING-EXPANDER"
     NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-DEFUN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFUN"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-STRING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STRING"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-PRINT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-RETURN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "RETURN"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-DEF-DISPLAY-GLOBALS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DEF-DISPLAY-GLOBALS" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-DEF-DISPLAY-GLOBALS-EXPANDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DEF-DISPLAY-GLOBALS-EXPANDER" NULL
     0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-PROGN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PROGN"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-SETF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SETF"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-STARTING-CLOCK-TICKS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTING-CLOCK-TICKS" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-FRAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FRAME" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-CLOCKTICKS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CLOCKTICKS" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-SETQ
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SETQ"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-LASTMOVE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LASTMOVE" NULL 0))
   (CL:SETQ KWD-LOGIC-MACROS-DOWN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DOWN" NULL 2))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-MOVE-IN-PLACE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MOVE-IN-PLACE" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-MOVE-IN-PLACE-EXPANDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MOVE-IN-PLACE-EXPANDER" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-BACKFRAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BACKFRAME" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-UPFRAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UPFRAME" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-UP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UP" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-CREATE-DOWN-FRAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CREATE-DOWN-FRAME" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-PROPOSITION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PROPOSITION" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-BACK
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BACK" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-STATE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STATE"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ KWD-LOGIC-MACROS-AND
    (INTERN-RIGID-SYMBOL-WRT-MODULE "AND" NULL 2))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-ARGUMENT-CURSOR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ARGUMENT-CURSOR" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-1+
    (INTERN-RIGID-SYMBOL-WRT-MODULE "1+"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-WHEN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WHEN"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-HOLDS-BY-DEFAULT?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "HOLDS-BY-DEFAULT?" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-MOVE-FORWARD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MOVE-FORWARD" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-MOVE-FORWARD-EXPANDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MOVE-FORWARD-EXPANDER" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-FORWARDFRAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FORWARDFRAME" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-NULL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-DOWN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DOWN" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-POP-CONTROL-FRAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "POP-CONTROL-FRAME" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-MOVE-BACKWARD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MOVE-BACKWARD" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-MOVE-BACKWARD-EXPANDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MOVE-BACKWARD-EXPANDER" NULL 0)))
  :VOID)

(CL:DEFUN HELP-STARTUP-LOGIC-MACROS2 ()
  (CL:PROGN
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-DEPTH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DEPTH" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-COND
    (INTERN-RIGID-SYMBOL-WRT-MODULE "COND"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA->
    (INTERN-RIGID-SYMBOL-WRT-MODULE ">" (GET-STELLA-MODULE "/STELLA" TRUE)
     0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-CURRENT-DEPTH-CUTOFF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CURRENT-DEPTH-CUTOFF" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-QUERYITERATOR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "QUERYITERATOR" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-DEFINED?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFINED?"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-POP-FRAMES-UP-TO
    (INTERN-RIGID-SYMBOL-WRT-MODULE "POP-FRAMES-UP-TO" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-1-
    (INTERN-RIGID-SYMBOL-WRT-MODULE "1-"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-MV-SETQ
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MV-SETQ"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-HANDLE-DEPTH-VIOLATION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "HANDLE-DEPTH-VIOLATION" NULL 0))
   (CL:SETQ KWD-LOGIC-MACROS-UP-FAIL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UP-FAIL" NULL 2))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-FALSE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FALSE"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-OTHERWISE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "OTHERWISE"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-NTH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NTH"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-ARGUMENTS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ARGUMENTS"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-DEBUG-DEPTH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DEBUG-DEPTH" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-MOVE-DOWN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MOVE-DOWN" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-MOVE-DOWN-EXPANDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MOVE-DOWN-EXPANDER" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-FAIL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FAIL" NULL 0))
   (CL:SETQ KWD-LOGIC-MACROS-UP-TRUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UP-TRUE" NULL 2))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-RECORD-JUSTIFICATIONS?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "RECORD-JUSTIFICATIONS?" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-RECORD-JUSTIFICATION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "RECORD-JUSTIFICATION" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-USING-DEFAULT-KNOWLEDGE?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "USING-DEFAULT-KNOWLEDGE?" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-RECORD-HOLDS-BY-DEFAULT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "RECORD-HOLDS-BY-DEFAULT" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-IF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "IF"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-CACHE-QUERY-RESULTS?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CACHE-QUERY-RESULTS?" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-CACHE-GOAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CACHE-GOAL" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-UPDATE-GOAL-CACHE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UPDATE-GOAL-CACHE" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-NULL?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL?"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-KEEP-FRAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "KEEP-FRAME" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-JUSTIFICATION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JUSTIFICATION" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-POP-DOWN-FRAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "POP-DOWN-FRAME" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-MOVE-UP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MOVE-UP" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-MOVE-UP-EXPANDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MOVE-UP-EXPANDER" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-APPLY-CACHED-RETRIEVE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "APPLY-CACHED-RETRIEVE" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-BQUOTE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BQUOTE"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-CONS-LIST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONS-LIST"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-QUOTE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "QUOTE"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SGT-LOGIC-MACROS-STELLA-CONS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONS"
     (GET-STELLA-MODULE "/STELLA" TRUE) 1))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-APPLY-RETRIEVE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "APPLY-RETRIEVE" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-APPLY-RETRIEVE-EXPANDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "APPLY-RETRIEVE-EXPANDER" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-APPLY-CACHED-ASK
    (INTERN-RIGID-SYMBOL-WRT-MODULE "APPLY-CACHED-ASK" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-APPLY-ASK
    (INTERN-RIGID-SYMBOL-WRT-MODULE "APPLY-ASK" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-APPLY-ASK-EXPANDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "APPLY-ASK-EXPANDER" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-*CONTEXT*
    (INTERN-RIGID-SYMBOL-WRT-MODULE "*CONTEXT*"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-GET-INFERENCE-CACHE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GET-INFERENCE-CACHE" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-*MODULE*
    (INTERN-RIGID-SYMBOL-WRT-MODULE "*MODULE*"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ KWD-LOGIC-MACROS-META
    (INTERN-RIGID-SYMBOL-WRT-MODULE "META" NULL 2))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-WITHIN-META-CACHE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WITHIN-META-CACHE" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-WITHIN-META-CACHE-EXPANDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WITHIN-META-CACHE-EXPANDER" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-*CLASSIFICATIONSESSION*
    (INTERN-RIGID-SYMBOL-WRT-MODULE "*CLASSIFICATIONSESSION*" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-GET-CLASSIFICATION-SESSION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GET-CLASSIFICATION-SESSION" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-CLASSIFICATION-WORLD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASSIFICATION-WORLD" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-WITHIN-CLASSIFICATION-SESSION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WITHIN-CLASSIFICATION-SESSION" NULL
     0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-WITHIN-CLASSIFICATION-SESSION-EXPANDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE
     "WITHIN-CLASSIFICATION-SESSION-EXPANDER" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-OBJECT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "OBJECT"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-MISSING-ARGUMENT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MISSING-ARGUMENT" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-INTEGER-WRAPPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INTEGER-WRAPPER"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-CASE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CASE"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WRAPPER-VALUE"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0)))
  :VOID)

(CL:DEFUN HELP-STARTUP-LOGIC-MACROS3 ()
  (CL:PROGN
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-DEFINE-COMPUTED-CONSTRAINT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFINE-COMPUTED-CONSTRAINT" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-DEFINE-COMPUTED-CONSTRAINT-EXPANDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFINE-COMPUTED-CONSTRAINT-EXPANDER"
     NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-BOOLEAN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BOOLEAN"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-X
    (INTERN-RIGID-SYMBOL-WRT-MODULE "X" (GET-STELLA-MODULE "/STELLA" TRUE)
     0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-NUMBER-WRAPPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NUMBER-WRAPPER"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-Y
    (INTERN-RIGID-SYMBOL-WRT-MODULE "Y" (GET-STELLA-MODULE "/STELLA" TRUE)
     0))
   (CL:SETQ KWD-LOGIC-MACROS-PUBLIC?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PUBLIC?" NULL 2))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-TYPECASE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TYPECASE"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-FLOAT-WRAPPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FLOAT-WRAPPER"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-CAST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CAST"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-FLOAT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FLOAT"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-DEFINE-ARITHMETIC-TEST-ON-WRAPPERS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFINE-ARITHMETIC-TEST-ON-WRAPPERS"
     NULL 0))
   (CL:SETQ
    SYM-LOGIC-MACROS-LOGIC-DEFINE-ARITHMETIC-TEST-ON-WRAPPERS-EXPANDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE
     "DEFINE-ARITHMETIC-TEST-ON-WRAPPERS-EXPANDER" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-FLOATRESULT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FLOATRESULT" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-WRAP-LITERAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WRAP-LITERAL"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-SAFE-CAST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SAFE-CAST"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-INTEGER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INTEGER"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-DEFINE-ARITHMETIC-OPERATION-ON-WRAPPERS
    (INTERN-RIGID-SYMBOL-WRT-MODULE
     "DEFINE-ARITHMETIC-OPERATION-ON-WRAPPERS" NULL 0))
   (CL:SETQ
    SYM-LOGIC-MACROS-LOGIC-DEFINE-ARITHMETIC-OPERATION-ON-WRAPPERS-EXPANDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE
     "DEFINE-ARITHMETIC-OPERATION-ON-WRAPPERS-EXPANDER" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-STARTUP-LOGIC-MACROS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-LOGIC-MACROS" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-METHOD-STARTUP-CLASSNAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0)))
  :VOID)

(CL:DEFUN STARTUP-LOGIC-MACROS ()
  (CL:LET*
   ((*MODULE* (GET-STELLA-MODULE "/LOGIC" (> *STARTUP-TIME-PHASE* 1)))
    (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2) (HELP-STARTUP-LOGIC-MACROS1)
    (HELP-STARTUP-LOGIC-MACROS2) (HELP-STARTUP-LOGIC-MACROS3))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 5)
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "LOGIC-EXCEPTION"
        "(DEFCLASS LOGIC-EXCEPTION (STELLA-EXCEPTION))")))
     (CL:SETF (%CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-LOGIC-EXCEPTION)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "PROPOSITION-ERROR"
        "(DEFCLASS PROPOSITION-ERROR (LOGIC-EXCEPTION))")))
     (CL:SETF (%CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-PROPOSITION-ERROR)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "PARSING-ERROR"
        "(DEFCLASS PARSING-ERROR (LOGIC-EXCEPTION))")))
     (CL:SETF (%CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-PARSING-ERROR)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "CLASH"
        "(DEFCLASS CLASH (LOGIC-EXCEPTION))")))
     (CL:SETF (%CLASS-CONSTRUCTOR-CODE CLASS) (CL:FUNCTION NEW-CLASH)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "FAIL-EXCEPTION"
        "(DEFCLASS FAIL-EXCEPTION (LOGIC-EXCEPTION))")))
     (CL:SETF (%CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-FAIL-EXCEPTION)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE
        "QUERY-THREAD-LIMIT-VIOLATION"
        "(DEFCLASS QUERY-THREAD-LIMIT-VIOLATION (LOGIC-EXCEPTION))")))
     (CL:SETF (%CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-QUERY-THREAD-LIMIT-VIOLATION))))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (DEFINE-FUNCTION-OBJECT "SIGNAL-PARSING-ERROR-EXPANDER"
     "(DEFUN (SIGNAL-PARSING-ERROR-EXPANDER OBJECT) (|&BODY| (MESSAGE CONS)))"
     (CL:FUNCTION SIGNAL-PARSING-ERROR-EXPANDER) NULL)
    (DEFINE-FUNCTION-OBJECT "SIGNAL-PROPOSITION-ERROR-EXPANDER"
     "(DEFUN (SIGNAL-PROPOSITION-ERROR-EXPANDER OBJECT) (|&BODY| (MESSAGE CONS)))"
     (CL:FUNCTION SIGNAL-PROPOSITION-ERROR-EXPANDER) NULL)
    (DEFINE-FUNCTION-OBJECT "SIGNAL-PROPOSITION-WARNING-EXPANDER"
     "(DEFUN (SIGNAL-PROPOSITION-WARNING-EXPANDER OBJECT) (|&BODY| (MESSAGE CONS)))"
     (CL:FUNCTION SIGNAL-PROPOSITION-WARNING-EXPANDER) NULL)
    (DEFINE-FUNCTION-OBJECT "DEF-DISPLAY-GLOBALS-EXPANDER"
     "(DEFUN (DEF-DISPLAY-GLOBALS-EXPANDER OBJECT) ((DISPLAYFUNCTIONNAME SYMBOL) (GLOBALVARIABLENAMES (CONS OF SYMBOL))) :LISP-MACRO? TRUE)"
     (CL:FUNCTION %DEF-DISPLAY-GLOBALS-EXPANDER) NULL)
    (DEFINE-FUNCTION-OBJECT "MOVE-IN-PLACE-EXPANDER"
     "(DEFUN (MOVE-IN-PLACE-EXPANDER OBJECT) ())"
     (CL:FUNCTION MOVE-IN-PLACE-EXPANDER) NULL)
    (DEFINE-FUNCTION-OBJECT "MOVE-FORWARD-EXPANDER"
     "(DEFUN (MOVE-FORWARD-EXPANDER OBJECT) ())"
     (CL:FUNCTION MOVE-FORWARD-EXPANDER) NULL)
    (DEFINE-FUNCTION-OBJECT "MOVE-BACKWARD-EXPANDER"
     "(DEFUN (MOVE-BACKWARD-EXPANDER OBJECT) ())"
     (CL:FUNCTION MOVE-BACKWARD-EXPANDER) NULL)
    (DEFINE-FUNCTION-OBJECT "MOVE-DOWN-EXPANDER"
     "(DEFUN (MOVE-DOWN-EXPANDER OBJECT) ())"
     (CL:FUNCTION MOVE-DOWN-EXPANDER) NULL)
    (DEFINE-FUNCTION-OBJECT "MOVE-UP-EXPANDER"
     "(DEFUN (MOVE-UP-EXPANDER OBJECT) ((SUCCESS? SYMBOL) (KEEPFRAME? SYMBOL)))"
     (CL:FUNCTION MOVE-UP-EXPANDER) NULL)
    (DEFINE-FUNCTION-OBJECT "APPLY-RETRIEVE-EXPANDER"
     "(DEFUN (APPLY-RETRIEVE-EXPANDER OBJECT) (|&BODY| (BODY CONS)) :DOCUMENTATION \"Execute a query composed of io-variables 'variables'
and body 'queryBody'.  Before executing, bind variables to 'inputBindings'
(in sequence). If one variable is left unbound, returns a cons list of
bindings of that variable.  If two or more are unbound, returns
a cons list of cons lists of bindings.\")"
     (CL:FUNCTION APPLY-RETRIEVE-EXPANDER) NULL)
    (DEFINE-FUNCTION-OBJECT "APPLY-ASK-EXPANDER"
     "(DEFUN (APPLY-ASK-EXPANDER OBJECT) (|&BODY| (BODY CONS)) :DOCUMENTATION \"Execute a yes/no query composed of input-variables
'inputVariables' and body 'queryBody'.  Before executing, bind variables
to 'inputBindings' (in sequence).\")" (CL:FUNCTION APPLY-ASK-EXPANDER)
     NULL)
    (DEFINE-FUNCTION-OBJECT "WITHIN-META-CACHE-EXPANDER"
     "(DEFUN (WITHIN-META-CACHE-EXPANDER OBJECT) (|&BODY| (BODY CONS)) :DOCUMENTATION \"Execute `body' within the meta cache of the current module.
Set appropriate special variables.\")"
     (CL:FUNCTION WITHIN-META-CACHE-EXPANDER) NULL)
    (DEFINE-FUNCTION-OBJECT "WITHIN-CLASSIFICATION-SESSION-EXPANDER"
     "(DEFUN (WITHIN-CLASSIFICATION-SESSION-EXPANDER OBJECT) ((DESCRIPTIONORINSTANCE KEYWORD) |&BODY| (BODY CONS)) :DOCUMENTATION \"Used during classification.  Execute `body' within the indicated
classification session and inference world.\")"
     (CL:FUNCTION WITHIN-CLASSIFICATION-SESSION-EXPANDER) NULL)
    (DEFINE-EXTERNAL-SLOT-FROM-STRINGIFIED-SOURCE
     "(DEFSLOT MODULE REGENERABLE-FROM-SECONDARY-STORAGE? :TYPE BOOLEAN :DOCUMENTATION \"If TRUE, instances, relations, and propositions 
belonging to this module can be regenerated from secondary storage.
Hence, its OK to page them out (with the garbage collector).\" :ALLOCATION :DYNAMIC)")
    (DEFINE-EXTERNAL-SLOT-FROM-STRINGIFIED-SOURCE
     "(DEFSLOT MODULE USE-NON-PAGING-INDICES? :TYPE BOOLEAN :DOCUMENTATION \"If TRUE, instances, relations, and propositions 
belonging to this module are stored in non-paging indices.  This
is safe as long as they don't mingle with regenerable objects.\" :ALLOCATION :DYNAMIC)")
    (DEFINE-FUNCTION-OBJECT "DEFINE-COMPUTED-CONSTRAINT-EXPANDER"
     "(DEFUN (DEFINE-COMPUTED-CONSTRAINT-EXPANDER OBJECT) ((NAME SYMBOL) (VARLIST CONS) (CONSTRAINT-TEST CONS) |&BODY| (POSITION-COMPUTATIONS CONS)) :PUBLIC? TRUE :DOCUMENTATION \"Defines NAME to be a constraint computation which uses CONSTRAINT-TEST
to determine if a fully bound set of variables satisfies the constraint.  The forms in
POSITION-COMPUTATIONS are used to compute the value for each of the positions. All such
computations must set the variable VALUE to be the result computed for the missing position.
Settin VALUE to NULL for any such computation means that that particular argument cannot be
computed from the others.  The input variables in VARLIST will be bound to the N arguments
to the constraint.
  The generated function will return a Stella Object and take as inputs the values of
the N arguments to the constraint.  A value of NULL means that the value is not available.
If all arguments are not NULL, then the return value will be a BOOLEAN-WRAPPER indicating 
whether the constraint is satisified or not.
  If more than one input value is NULL, then this constraint code will not be called.\")"
     (CL:FUNCTION DEFINE-COMPUTED-CONSTRAINT-EXPANDER) NULL)
    (DEFINE-FUNCTION-OBJECT "DEFINE-ARITHMETIC-TEST-ON-WRAPPERS-EXPANDER"
     "(DEFUN (DEFINE-ARITHMETIC-TEST-ON-WRAPPERS-EXPANDER OBJECT) ((NAME SYMBOL) (TEST-NAME SYMBOL)) :DOCUMENTATION \"Defines NAME as an arithmetic comparision operation using the
test TEST-NAME.  It will take two NUMBER-WRAPPER parameters and return a BOOLEAN.
The code will use the appropriate test for the specific subtype of NUMBER-WRAPPER
actually passed in.\")"
     (CL:FUNCTION DEFINE-ARITHMETIC-TEST-ON-WRAPPERS-EXPANDER) NULL)
    (DEFINE-FUNCTION-OBJECT
     "DEFINE-ARITHMETIC-OPERATION-ON-WRAPPERS-EXPANDER"
     "(DEFUN (DEFINE-ARITHMETIC-OPERATION-ON-WRAPPERS-EXPANDER OBJECT) ((NAME SYMBOL) (OPERATION-NAME SYMBOL)) :DOCUMENTATION \"Defines NAME as an arithmetic comparision operation using the
test TEST-NAME.  It will take two NUMBER-WRAPPER parameters and return a NUMBER-WRAPPER.
The code will use the appropriate test for the specific subtype of NUMBER-WRAPPERS
actually passed in, and return the appropriate subtype of NUMBER-WRAPPER based on
the normal arithmetic contagion rules.
  
For example, if both input parameters are INTEGER-WRAPPERs then the output will be
an INTEGER-WRAPPER. If the inputs are an INTEGER-WRAPPER and a FLOAT-WRAPPER then
the output will be a FLOAT-WRAPPER, etc.\")"
     (CL:FUNCTION DEFINE-ARITHMETIC-OPERATION-ON-WRAPPERS-EXPANDER) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-LOGIC-MACROS"
     "(DEFUN STARTUP-LOGIC-MACROS () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-LOGIC-MACROS) NULL)
    (CL:LET*
     ((FUNCTION
       (LOOKUP-FUNCTION SYM-LOGIC-MACROS-LOGIC-STARTUP-LOGIC-MACROS)))
     (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FUNCTION)
      SYM-LOGIC-MACROS-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "Startup-Logic-Macros") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *SUPPRESSNONLOGICOBJECTWARNING?* BOOLEAN TRUE)")
    (STORE-MACRO SYM-LOGIC-MACROS-LOGIC-SIGNAL-PARSING-ERROR
     SYM-LOGIC-MACROS-LOGIC-SIGNAL-PARSING-ERROR-EXPANDER
     (CL:FUNCTION SIGNAL-PARSING-ERROR-EXPANDER))
    (STORE-MACRO SYM-LOGIC-MACROS-LOGIC-SIGNAL-PROPOSITION-ERROR
     SYM-LOGIC-MACROS-LOGIC-SIGNAL-PROPOSITION-ERROR-EXPANDER
     (CL:FUNCTION SIGNAL-PROPOSITION-ERROR-EXPANDER))
    (STORE-MACRO SYM-LOGIC-MACROS-LOGIC-SIGNAL-PROPOSITION-WARNING
     SYM-LOGIC-MACROS-LOGIC-SIGNAL-PROPOSITION-WARNING-EXPANDER
     (CL:FUNCTION SIGNAL-PROPOSITION-WARNING-EXPANDER))
    (STORE-MACRO SYM-LOGIC-MACROS-LOGIC-DEF-DISPLAY-GLOBALS
     SYM-LOGIC-MACROS-LOGIC-DEF-DISPLAY-GLOBALS-EXPANDER
     (CL:FUNCTION %DEF-DISPLAY-GLOBALS-EXPANDER))
    (STORE-MACRO SYM-LOGIC-MACROS-LOGIC-MOVE-IN-PLACE
     SYM-LOGIC-MACROS-LOGIC-MOVE-IN-PLACE-EXPANDER
     (CL:FUNCTION MOVE-IN-PLACE-EXPANDER))
    (STORE-MACRO SYM-LOGIC-MACROS-LOGIC-MOVE-FORWARD
     SYM-LOGIC-MACROS-LOGIC-MOVE-FORWARD-EXPANDER
     (CL:FUNCTION MOVE-FORWARD-EXPANDER))
    (STORE-MACRO SYM-LOGIC-MACROS-LOGIC-MOVE-BACKWARD
     SYM-LOGIC-MACROS-LOGIC-MOVE-BACKWARD-EXPANDER
     (CL:FUNCTION MOVE-BACKWARD-EXPANDER))
    (STORE-MACRO SYM-LOGIC-MACROS-LOGIC-MOVE-DOWN
     SYM-LOGIC-MACROS-LOGIC-MOVE-DOWN-EXPANDER
     (CL:FUNCTION MOVE-DOWN-EXPANDER))
    (STORE-MACRO SYM-LOGIC-MACROS-LOGIC-MOVE-UP
     SYM-LOGIC-MACROS-LOGIC-MOVE-UP-EXPANDER
     (CL:FUNCTION MOVE-UP-EXPANDER))
    (STORE-MACRO SYM-LOGIC-MACROS-LOGIC-APPLY-RETRIEVE
     SYM-LOGIC-MACROS-LOGIC-APPLY-RETRIEVE-EXPANDER
     (CL:FUNCTION APPLY-RETRIEVE-EXPANDER))
    (STORE-MACRO SYM-LOGIC-MACROS-LOGIC-APPLY-ASK
     SYM-LOGIC-MACROS-LOGIC-APPLY-ASK-EXPANDER
     (CL:FUNCTION APPLY-ASK-EXPANDER))
    (STORE-MACRO SYM-LOGIC-MACROS-LOGIC-WITHIN-META-CACHE
     SYM-LOGIC-MACROS-LOGIC-WITHIN-META-CACHE-EXPANDER
     (CL:FUNCTION WITHIN-META-CACHE-EXPANDER))
    (STORE-MACRO SYM-LOGIC-MACROS-LOGIC-WITHIN-CLASSIFICATION-SESSION
     SYM-LOGIC-MACROS-LOGIC-WITHIN-CLASSIFICATION-SESSION-EXPANDER
     (CL:FUNCTION WITHIN-CLASSIFICATION-SESSION-EXPANDER))
    (STORE-MACRO SYM-LOGIC-MACROS-LOGIC-DEFINE-COMPUTED-CONSTRAINT
     SYM-LOGIC-MACROS-LOGIC-DEFINE-COMPUTED-CONSTRAINT-EXPANDER
     (CL:FUNCTION DEFINE-COMPUTED-CONSTRAINT-EXPANDER))
    (STORE-MACRO SYM-LOGIC-MACROS-LOGIC-DEFINE-ARITHMETIC-TEST-ON-WRAPPERS
     SYM-LOGIC-MACROS-LOGIC-DEFINE-ARITHMETIC-TEST-ON-WRAPPERS-EXPANDER
     (CL:FUNCTION DEFINE-ARITHMETIC-TEST-ON-WRAPPERS-EXPANDER))
    (STORE-MACRO
     SYM-LOGIC-MACROS-LOGIC-DEFINE-ARITHMETIC-OPERATION-ON-WRAPPERS
     SYM-LOGIC-MACROS-LOGIC-DEFINE-ARITHMETIC-OPERATION-ON-WRAPPERS-EXPANDER
     (CL:FUNCTION DEFINE-ARITHMETIC-OPERATION-ON-WRAPPERS-EXPANDER))))
  :VOID)
