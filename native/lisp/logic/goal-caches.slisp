;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; goal-caches.slisp

#|
 +---------------------------- BEGIN LICENSE BLOCK ---------------------------+
 |                                                                            |
 | Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
 |                                                                            |
 | The contents of this file are subject to the Mozilla Public License        |
 | Version 1.1 (the "License"); you may not use this file except in           |
 | compliance with the License. You may obtain a copy of the License at       |
 | http://www.mozilla.org/MPL/                                                |
 |                                                                            |
 | Software distributed under the License is distributed on an "AS IS" basis, |
 | WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
 | for the specific language governing rights and limitations under the       |
 | License.                                                                   |
 |                                                                            |
 | The Original Code is the PowerLoom KR&R System.                            |
 |                                                                            |
 | The Initial Developer of the Original Code is                              |
 | UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
 | 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
 |                                                                            |
 | Portions created by the Initial Developer are Copyright (C) 1997-2006      |
 | the Initial Developer. All Rights Reserved.                                |
 |                                                                            |
 | Contributor(s):                                                            |
 |                                                                            |
 | Alternatively, the contents of this file may be used under the terms of    |
 | either the GNU General Public License Version 2 or later (the "GPL"), or   |
 | the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
 | in which case the provisions of the GPL or the LGPL are applicable instead |
 | of those above. If you wish to allow use of your version of this file only |
 | under the terms of either the GPL or the LGPL, and not to allow others to  |
 | use your version of this file under the terms of the MPL, indicate your    |
 | decision by deleting the provisions above and replace them with the notice |
 | and other provisions required by the GPL or the LGPL. If you do not delete |
 | the provisions above, a recipient may use your version of this file under  |
 | the terms of any one of the MPL, the GPL or the LGPL.                      |
 |                                                                            |
 +----------------------------- END LICENSE BLOCK ----------------------------+
|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SGT-GOAL-CACHES-LOGIC-GOAL-CACHE NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-CACHED-BINDINGS NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-TIMESTAMP NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-PROPOSITION NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-REVERSE-POLARITY? NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-CACHE-CONTEXT NULL)
(CL:DEFVAR KWD-GOAL-CACHES-GOAL-CACHES NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-GOAL-CACHE-TABLE NULL)
(CL:DEFVAR KWD-GOAL-CACHES-ISA NULL)
(CL:DEFVAR KWD-GOAL-CACHES-PREDICATE NULL)
(CL:DEFVAR KWD-GOAL-CACHES-FUNCTION NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-NEGATED-GOAL-CACHE-TABLE NULL)
(CL:DEFVAR SGT-GOAL-CACHES-STELLA-SURROGATE NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-GOAL-CACHE NULL)
(CL:DEFVAR KWD-GOAL-CACHES-DUPLICATE-GOALS-WITH-CACHING NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-CACHED-BINDINGS-ITERATOR NULL)
(CL:DEFVAR KWD-GOAL-CACHES-FAILURE NULL)
(CL:DEFVAR KWD-GOAL-CACHES-FINAL-SUCCESS NULL)
(CL:DEFVAR KWD-GOAL-CACHES-CONTINUING-SUCCESS NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-INFERENCE-CACHE-OF NULL)
(CL:DEFVAR KWD-GOAL-CACHES-DUPLICATE-GOALS NULL)
(CL:DEFVAR SGT-GOAL-CACHES-LOGIC-ATOMIC-GOAL-CACHE NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-GOAL-CONTEXT NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-TRUTH-VALUE NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-BINDINGS NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-JUSTIFICATION NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-POSITIVE-SCORE NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-NEGATIVE-SCORE NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-PREVIOUS NULL)
(CL:DEFVAR SYM-GOAL-CACHES-STELLA-NEXT NULL)
(CL:DEFVAR KWD-GOAL-CACHES-REALISTIC NULL)
(CL:DEFVAR SGT-GOAL-CACHES-LOGIC-PATTERN-VARIABLE NULL)
(CL:DEFVAR SGT-GOAL-CACHES-LOGIC-SKOLEM NULL)
(CL:DEFVAR SGT-GOAL-CACHES-LOGIC-LOGIC-OBJECT NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-GOAL-CACHE-LIST NULL)
(CL:DEFVAR KWD-GOAL-CACHES-GOAL-INSTANTIATES-CACHE NULL)
(CL:DEFVAR KWD-GOAL-CACHES-CACHE-INSTANTIATES-GOAL NULL)
(CL:DEFVAR KWD-GOAL-CACHES-ATOMIC-GOAL NULL)
(CL:DEFVAR SGT-GOAL-CACHES-PL-KERNEL-KB-FRAME-PREDICATE NULL)
(CL:DEFVAR KWD-GOAL-CACHES-EXECUTE-QUERY NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-CHECK-FOR-CACHED-GOALS? NULL)
(CL:DEFVAR KWD-GOAL-CACHES-SUCCESS NULL)
(CL:DEFVAR SGT-GOAL-CACHES-LOGIC-ATOMIC-GOAL-CACHE-ITERATOR NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-GOAL NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-CACHE-LIST NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-STARTUP-GOAL-CACHES NULL)
(CL:DEFVAR SYM-GOAL-CACHES-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STARTUP-TIME-PHASE* *MODULE* *DONTUSEDEFAULTKNOWLEDGE?*
  DEFAULT-TRUE-TRUTH-VALUE DEFAULT-FALSE-TRUTH-VALUE
  *RECORD-JUSTIFICATIONS?* *INTEGER-MSB-MASK* *FAILED-GOAL-CUTOFFS*
  *SUCCEEDED-GOAL-CUTOFFS* NULL-FLOAT *CACHE-SUCCEEDED-GOALS?*
  *CACHE-FAILED-GOALS?* *DUPLICATE-SUBGOAL-STRATEGY* *TRACED-KEYWORDS*
  *CONTEXT* *QUERYITERATOR* NIL STANDARD-OUTPUT *REVERSEPOLARITY?* EOL
  TRUE-WRAPPER FALSE-WRAPPER NULL-INTEGER))

(CL:DEFUN NEW-GOAL-CACHE ()
  (CL:LET* ((SELF NULL)) (CL:SETQ SELF (%MAKE-GOAL-CACHE))
   (CL:SETF (%GOAL-CACHE.CACHE-CONTEXT SELF) NULL)
   (CL:SETF (%GOAL-CACHE.REVERSE-POLARITY? SELF) CL:NIL)
   (CL:SETF (%GOAL-CACHE.PROPOSITION SELF) NULL)
   (CL:SETF (%GOAL-CACHE.TIMESTAMP SELF) NULL-INTEGER)
   (CL:SETF (%GOAL-CACHE.CACHED-BINDINGS SELF) (NEW-LIST)) SELF))

(CL:DEFMETHOD PRIMARY-TYPE ((SELF GOAL-CACHE))
  SGT-GOAL-CACHES-LOGIC-GOAL-CACHE)

(CL:DEFUN ACCESS-GOAL-CACHE-SLOT-VALUE (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-CACHED-BINDINGS)
    (CL:IF SETVALUE? (CL:SETF (%GOAL-CACHE.CACHED-BINDINGS SELF) VALUE)
     (CL:SETQ VALUE (%GOAL-CACHE.CACHED-BINDINGS SELF))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-TIMESTAMP)
    (CL:IF SETVALUE?
     (CL:SETF (%GOAL-CACHE.TIMESTAMP SELF)
      (%INTEGER-WRAPPER.WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE (WRAP-INTEGER (%GOAL-CACHE.TIMESTAMP SELF)))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-PROPOSITION)
    (CL:IF SETVALUE? (CL:SETF (%GOAL-CACHE.PROPOSITION SELF) VALUE)
     (CL:SETQ VALUE (%GOAL-CACHE.PROPOSITION SELF))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-REVERSE-POLARITY?)
    (CL:IF SETVALUE?
     (CL:SETF (%GOAL-CACHE.REVERSE-POLARITY? SELF)
      (COERCE-WRAPPED-BOOLEAN-TO-BOOLEAN VALUE))
     (CL:SETQ VALUE
      (CL:IF (%GOAL-CACHE.REVERSE-POLARITY? SELF) TRUE-WRAPPER
       FALSE-WRAPPER))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-CACHE-CONTEXT)
    (CL:IF SETVALUE? (CL:SETF (%GOAL-CACHE.CACHE-CONTEXT SELF) VALUE)
     (CL:SETQ VALUE (%GOAL-CACHE.CACHE-CONTEXT SELF))))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "`" SLOTNAME "' is not a valid case option")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
  VALUE)

;;; (DEFUN TRACE-GOAL-CACHE ...)

(CL:DEFUN TRACE-GOAL-CACHE (STRING FRAME)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING STRING))
  #+MCL
  (CL:CHECK-TYPE STRING CL:SIMPLE-STRING)
  (CL:LET* ((GOAL (%CONTROL-FRAME.PROPOSITION FRAME)))
   (CL:WHEN (TRACE-KEYWORD? KWD-GOAL-CACHES-GOAL-CACHES)
    (CL:LET* ((*PRINTINFRAME* FRAME))
     (CL:DECLARE (CL:SPECIAL *PRINTINFRAME*))
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
      STRING)
     (CL:WHEN *REVERSEPOLARITY?*
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
       "not~"))
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
      GOAL EOL)))))

;;; (DEFUN REMOVE-OBSOLETE-GOAL-CACHES ...)

(CL:DEFUN REMOVE-OBSOLETE-GOAL-CACHES (TABLE)
  (CL:LET*
   ((K NULL) (V NULL) (ITER-000 (%KEY-VALUE-LIST.THE-KV-LIST TABLE)))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NULL)) DO
    (CL:SETQ K (%KV-CONS.KEY ITER-000))
    (CL:SETQ V (%KV-CONS.VALUE ITER-000))
    (CL:WHEN (DELETED? K) (CL:SETQ V V) (REMOVE-AT TABLE K)
     (REMOVE-OBSOLETE-GOAL-CACHES TABLE) (CL:RETURN))
    (CL:SETQ ITER-000 (%KV-CONS.REST ITER-000)))))

;;; (DEFUN (YIELD-GOAL-BINDINGS GOAL-BINDINGS) ...)

(CL:DEFUN YIELD-GOAL-BINDINGS (GOAL)
  (CL:LET* ((RESULT NIL))
   (CL:LET*
    ((ARG NULL) (VECTOR-000 (%PROPOSITION.ARGUMENTS GOAL))
     (INDEX-000 0) (LENGTH-000 (LENGTH VECTOR-000)) (COLLECT-000 NULL))
    (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
    (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
     (CL:SETQ ARG
      (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-000))
       INDEX-000))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-000 (CONS (ARGUMENT-BOUND-TO ARG) NIL))
       (CL:IF (CL:EQ RESULT NIL) (CL:SETQ RESULT COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST RESULT COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000)
        (CONS (ARGUMENT-BOUND-TO ARG) NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))
     (CL:SETQ INDEX-000 (CL:1+ INDEX-000))))
   RESULT))

;;; (DEFUN (FIND-GOAL-CACHE-TABLE GOAL-CACHE-TABLE) ...)

(CL:DEFUN FIND-GOAL-CACHE-TABLE (GOAL)
  (CL:LET* ((TEST-VALUE-000 (%PROPOSITION.KIND GOAL)))
   (CL:COND
    ((CL:OR (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-ISA)
      (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-PREDICATE)
      (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-FUNCTION))
     (CL:LET*
      ((DESCRIPTION (GET-DESCRIPTION (%PROPOSITION.OPERATOR GOAL))))
      (CL:IF *REVERSEPOLARITY?*
       (DYNAMIC-SLOT-VALUE
        (%NAMED-DESCRIPTION.DYNAMIC-SLOTS DESCRIPTION)
        SYM-GOAL-CACHES-LOGIC-NEGATED-GOAL-CACHE-TABLE NULL)
       (DYNAMIC-SLOT-VALUE
        (%NAMED-DESCRIPTION.DYNAMIC-SLOTS DESCRIPTION)
        SYM-GOAL-CACHES-LOGIC-GOAL-CACHE-TABLE NULL))))
    (CL:T NULL))))

;;; (DEFUN (CREATE-GOAL-CACHE? BOOLEAN) ...)

(CL:DEFUN CREATE-GOAL-CACHE? (FRAME)
  (CL:LET*
   ((GOAL (%CONTROL-FRAME.PROPOSITION FRAME))
    (TABLE (FIND-GOAL-CACHE-TABLE GOAL)))
   (CL:WHEN (CL:EQ TABLE NULL) (CL:SETQ TABLE (NEW-KEY-VALUE-LIST))
    (CL:LET* ((TEST-VALUE-000 (%PROPOSITION.KIND GOAL)))
     (CL:COND
      ((CL:OR (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-ISA)
        (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-PREDICATE)
        (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-FUNCTION))
       (CL:IF
        (CL:EQ (PRIMARY-TYPE (%PROPOSITION.OPERATOR GOAL))
         SGT-GOAL-CACHES-STELLA-SURROGATE)
        (CL:LET*
         ((GOALDESCRIPTION
           (GET-DESCRIPTION (%PROPOSITION.OPERATOR GOAL))))
         (CL:IF *REVERSEPOLARITY?*
          (SET-DYNAMIC-SLOT-VALUE
           (%NAMED-DESCRIPTION.DYNAMIC-SLOTS GOALDESCRIPTION)
           SYM-GOAL-CACHES-LOGIC-NEGATED-GOAL-CACHE-TABLE TABLE NULL)
          (SET-DYNAMIC-SLOT-VALUE
           (%NAMED-DESCRIPTION.DYNAMIC-SLOTS GOALDESCRIPTION)
           SYM-GOAL-CACHES-LOGIC-GOAL-CACHE-TABLE TABLE NULL)))
        (CL:RETURN-FROM CREATE-GOAL-CACHE? CL:NIL)))
      (CL:T (CL:RETURN-FROM CREATE-GOAL-CACHE? CL:NIL)))))
   (CL:LET* ((GOALCACHE (LOOKUP-GOAL-CACHE TABLE)))
    (CL:WHEN (CL:EQ GOALCACHE NULL)
     (TRACE-GOAL-CACHE "CREATING GOAL CACHE: " FRAME)
     (CL:SETQ GOALCACHE (NEW-GOAL-CACHE))
     (REMOVE-OBSOLETE-GOAL-CACHES TABLE)
     (INSERT-AT TABLE *CONTEXT* GOALCACHE)
     (SET-DYNAMIC-SLOT-VALUE (%CONTROL-FRAME.DYNAMIC-SLOTS FRAME)
      SYM-GOAL-CACHES-LOGIC-GOAL-CACHE GOALCACHE NULL)
     (CL:SETF (%GOAL-CACHE.TIMESTAMP GOALCACHE) (GET-NOW-TIMESTAMP))
     (CL:SETF (%GOAL-CACHE.PROPOSITION GOALCACHE) GOAL)
     (CL:SETF (%GOAL-CACHE.REVERSE-POLARITY? GOALCACHE)
      *REVERSEPOLARITY?*)
     (CL:SETF (%GOAL-CACHE.CACHE-CONTEXT GOALCACHE) *CONTEXT*)
     (INSERT (%QUERY-ITERATOR.ACTIVE-GOAL-CACHES *QUERYITERATOR*)
      GOALCACHE)
     (CL:WHEN (TOP-LEVEL-QUERY-CONTEXT? *CONTEXT*)
      (CL:SETF (%QUERY-ITERATOR.AUGMENTED-GOAL-CACHE? *QUERYITERATOR*)
       CL:T)))
    CL:T)))

;;; (DEFUN (LOOKUP-GOAL-CACHE GOAL-CACHE) ...)

(CL:DEFUN LOOKUP-GOAL-CACHE (TABLE)
  (LOOKUP TABLE *CONTEXT*))

;;; (DEFUN (FIND-GOAL-CACHE GOAL-CACHE) ...)

(CL:DEFUN FIND-GOAL-CACHE (FRAME)
  (CL:LET*
   ((GOAL (%CONTROL-FRAME.PROPOSITION FRAME))
    (TABLE (FIND-GOAL-CACHE-TABLE GOAL)) (GOALCACHE NULL))
   (CL:WHEN (CL:EQ TABLE NULL) (CL:RETURN-FROM FIND-GOAL-CACHE NULL))
   (CL:SETQ GOALCACHE (LOOKUP-GOAL-CACHE TABLE))
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ GOALCACHE NULL))
     (CL:< (%GOAL-CACHE.TIMESTAMP GOALCACHE) (GET-NOW-TIMESTAMP)))
    (CLEAR (%GOAL-CACHE.CACHED-BINDINGS GOALCACHE))
    (CL:SETF (%GOAL-CACHE.TIMESTAMP GOALCACHE) (GET-NOW-TIMESTAMP)))
   GOALCACHE))

;;; (DEFUN UPDATE-GOAL-CACHE ...)

(CL:DEFUN UPDATE-GOAL-CACHE (FRAME SUCCESS?)
  (CL:WHEN
   (CL:OR
    (CL:NOT
     (CL:EQ *DUPLICATE-SUBGOAL-STRATEGY*
      KWD-GOAL-CACHES-DUPLICATE-GOALS-WITH-CACHING))
    (CL:NOT SUCCESS?))
   (CL:RETURN-FROM UPDATE-GOAL-CACHE))
  (CL:LET* ((GOALCACHE (FIND-GOAL-CACHE FRAME)))
   (CL:WHEN (CL:NOT (CL:EQ GOALCACHE NULL))
    (CL:LET*
     ((CACHEDBINDINGS (%GOAL-CACHE.CACHED-BINDINGS GOALCACHE))
      (BINDINGS (YIELD-RELATIVE-GOAL-BINDINGS FRAME)))
     (CL:LET* ((FOUND?-000 CL:NIL))
      (CL:LET*
       ((OLDBINDINGS NULL)
        (ITER-000 (%LIST.THE-CONS-LIST CACHEDBINDINGS)))
       (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
        (CL:SETQ OLDBINDINGS (%%VALUE ITER-000))
        (CL:LET* ((ALWAYS?-000 CL:T))
         (CL:LET*
          ((V1 NULL) (ITER-001 BINDINGS) (V2 NULL)
           (ITER-002 OLDBINDINGS))
          (CL:LOOP WHILE
           (CL:AND (CL:NOT (CL:EQ ITER-001 NIL))
            (CL:NOT (CL:EQ ITER-002 NIL)))
           DO (CL:SETQ V1 (%%VALUE ITER-001))
           (CL:SETQ V2 (%%VALUE ITER-002))
           (CL:WHEN (CL:NOT (EQL? V1 V2)) (CL:SETQ ALWAYS?-000 CL:NIL)
            (CL:RETURN))
           (CL:SETQ ITER-001 (%%REST ITER-001))
           (CL:SETQ ITER-002 (%%REST ITER-002))))
         (CL:WHEN ALWAYS?-000 (CL:SETQ FOUND?-000 CL:T) (CL:RETURN)))
        (CL:SETQ ITER-000 (%%REST ITER-000))))
      (CL:WHEN FOUND?-000 (CL:RETURN-FROM UPDATE-GOAL-CACHE)))
     (CL:WHEN
      (CL:AND (CL:NOT (CL:EQ *TRACED-KEYWORDS* NULL))
       (MEMB? *TRACED-KEYWORDS* KWD-GOAL-CACHES-GOAL-CACHES))
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
       "AUGMENT CACHE: " BINDINGS "  " FRAME EOL))
     (PUSH CACHEDBINDINGS BINDINGS)
     (CL:SETF (%QUERY-ITERATOR.AUGMENTED-GOAL-CACHE? *QUERYITERATOR*)
      CL:T)))))

;;; (DEFUN (YIELD-RELATIVE-GOAL-BINDINGS GOAL-BINDINGS) ...)

(CL:DEFUN YIELD-RELATIVE-GOAL-BINDINGS (FRAME)
  (CL:LET*
   ((GOAL (%CONTROL-FRAME.PROPOSITION FRAME)) (RESULT NIL)
    (SAVECURRENTPR
     (%QUERY-ITERATOR.CURRENT-PATTERN-RECORD *QUERYITERATOR*)))
   (CL:SETF (%QUERY-ITERATOR.CURRENT-PATTERN-RECORD *QUERYITERATOR*)
    (OPERATIVE-PATTERN-RECORD FRAME))
   (CL:LET*
    ((ARG NULL) (VECTOR-000 (%PROPOSITION.ARGUMENTS GOAL))
     (INDEX-000 0) (LENGTH-000 (LENGTH VECTOR-000)) (COLLECT-000 NULL))
    (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
    (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
     (CL:SETQ ARG
      (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-000))
       INDEX-000))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-000 (CONS (ARGUMENT-BOUND-TO ARG) NIL))
       (CL:IF (CL:EQ RESULT NIL) (CL:SETQ RESULT COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST RESULT COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000)
        (CONS (ARGUMENT-BOUND-TO ARG) NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))
     (CL:SETQ INDEX-000 (CL:1+ INDEX-000))))
   (CL:SETF (%QUERY-ITERATOR.CURRENT-PATTERN-RECORD *QUERYITERATOR*)
    SAVECURRENTPR)
   RESULT))

;;; (DEFUN (CONTINUE-CACHED-BINDINGS-PROOF KEYWORD) ...)

(CL:DEFUN CONTINUE-CACHED-BINDINGS-PROOF (FRAME LASTMOVE)
  (CL:SETQ LASTMOVE LASTMOVE)
  (CL:LET*
   ((GOAL (%CONTROL-FRAME.PROPOSITION FRAME))
    (ITERATOR
     (DYNAMIC-SLOT-VALUE (%CONTROL-FRAME.DYNAMIC-SLOTS FRAME)
      SYM-GOAL-CACHES-LOGIC-CACHED-BINDINGS-ITERATOR NULL)))
   (CL:WHEN (CL:EQ ITERATOR NULL)
    (CL:LET*
     ((GOALCACHE (FIND-GOAL-CACHE FRAME)) (CACHEDBINDINGS NULL))
     (CL:WHEN (CL:EQ GOALCACHE NULL) (CREATE-GOAL-CACHE? FRAME)
      (CL:RETURN-FROM CONTINUE-CACHED-BINDINGS-PROOF
       KWD-GOAL-CACHES-FAILURE))
     (CL:SETQ CACHEDBINDINGS (%GOAL-CACHE.CACHED-BINDINGS GOALCACHE))
     (CL:CASE (LENGTH CACHEDBINDINGS)
      (0 (TRACE-GOAL-CACHE "EMPTY CACHE: " FRAME)
       (CL:RETURN-FROM CONTINUE-CACHED-BINDINGS-PROOF
        KWD-GOAL-CACHES-FAILURE))
      (1 (TRACE-GOAL-CACHE "USED CACHED BINDING: " FRAME)
       (CL:IF
        (BIND-VECTOR-OF-ARGUMENTS-TO-VALUES?
         (%PROPOSITION.ARGUMENTS GOAL) (FIRST CACHEDBINDINGS))
        (CL:RETURN-FROM CONTINUE-CACHED-BINDINGS-PROOF
         KWD-GOAL-CACHES-FINAL-SUCCESS)
        (CL:RETURN-FROM CONTINUE-CACHED-BINDINGS-PROOF
         KWD-GOAL-CACHES-FAILURE)))
      (CL:OTHERWISE
       (TRACE-GOAL-CACHE "USED MANY CACHED BINDINGS: " FRAME)
       (CL:SETQ ITERATOR
        (ALLOCATE-ITERATOR (%GOAL-CACHE.CACHED-BINDINGS GOALCACHE)))
       (SET-DYNAMIC-SLOT-VALUE (%CONTROL-FRAME.DYNAMIC-SLOTS FRAME)
        SYM-GOAL-CACHES-LOGIC-CACHED-BINDINGS-ITERATOR ITERATOR
        NULL)))))
   (CREATE-CHOICE-POINT FRAME)
   (CL:LOOP WHILE (NEXT? ITERATOR) DO
    (CL:WHEN
     (BIND-VECTOR-OF-ARGUMENTS-TO-VALUES?
      (%PROPOSITION.ARGUMENTS (%CONTROL-FRAME.PROPOSITION FRAME))
      (%ITERATOR.VALUE ITERATOR))
     (CL:IF (EMPTY? ITERATOR)
      (CL:RETURN-FROM CONTINUE-CACHED-BINDINGS-PROOF
       KWD-GOAL-CACHES-FINAL-SUCCESS)
      (CL:RETURN-FROM CONTINUE-CACHED-BINDINGS-PROOF
       KWD-GOAL-CACHES-CONTINUING-SUCCESS))))
   KWD-GOAL-CACHES-FAILURE))

;;; (DEFUN (TOP-LEVEL-QUERY-CONTEXT? BOOLEAN) ...)

(CL:DEFUN TOP-LEVEL-QUERY-CONTEXT? (SELF)
  (CL:LET*
   ((QUERYCONTEXT (%QUERY-ITERATOR.QUERY-CONTEXT *QUERYITERATOR*)))
   (CL:OR (CL:EQ SELF QUERYCONTEXT) (WORLD-STATE? SELF)
    (CL:EQ
     (DYNAMIC-SLOT-VALUE (%WORLD.DYNAMIC-SLOTS SELF)
      SYM-GOAL-CACHES-LOGIC-INFERENCE-CACHE-OF NULL)
     QUERYCONTEXT))))

;;; (DEFUN (CACHE-QUERY-RESULTS? BOOLEAN) ...)

(CL:DEFUN CACHE-QUERY-RESULTS? ()
  (CL:AND (CL:OR *CACHE-SUCCEEDED-GOALS?* *CACHE-FAILED-GOALS?*)
   (CL:EQ *DUPLICATE-SUBGOAL-STRATEGY* KWD-GOAL-CACHES-DUPLICATE-GOALS)
   (CL:NOT
    (CL:AND (CL:NOT (CL:EQ *QUERYITERATOR* NULL))
     (CL:NOT
      (CL:EQ (%QUERY-ITERATOR.PARTIAL-MATCH-STRATEGY *QUERYITERATOR*)
       NULL))))))

;;; (DEFGLOBAL *CACHE-SUCCEEDED-GOALS?* ...)

(CL:DEFVAR *CACHE-SUCCEEDED-GOALS?* CL:T)

;;; (DEFGLOBAL *CACHE-FAILED-GOALS?* ...)

(CL:DEFVAR *CACHE-FAILED-GOALS?* CL:T)

;;; (DEFGLOBAL *CACHE-GOAL-QUANTUM* ...)

(CL:DEFVAR *CACHE-GOAL-QUANTUM* 5
  "Only goals whose success or failure took at least this
number of query clock ticks will be cached.")
(CL:DECLAIM (CL:TYPE CL:FIXNUM *CACHE-GOAL-QUANTUM*))

;;; (DEFUN (TOGGLE-GOAL-CACHING STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION () CL:SIMPLE-STRING) TOGGLE-GOAL-CACHING))
(CL:DEFUN TOGGLE-GOAL-CACHING ()
  (CL:IF *CACHE-SUCCEEDED-GOALS?*
   (CL:PROGN (CL:SETQ *CACHE-SUCCEEDED-GOALS?* CL:NIL)
    (CL:SETQ *CACHE-FAILED-GOALS?* CL:NIL) (INCREMENT-NOW-TIMESTAMP)
    "Disabled goal caching.")
   (CL:PROGN (CL:SETQ *CACHE-SUCCEEDED-GOALS?* CL:T)
    (CL:SETQ *CACHE-FAILED-GOALS?* CL:T) "Enabled goal caching.")))

(CL:DEFUN NEW-ATOMIC-GOAL-CACHE ()
  (CL:LET* ((SELF NULL)) (CL:SETQ SELF (%MAKE-ATOMIC-GOAL-CACHE))
   (CL:SETF (%ATOMIC-GOAL-CACHE.NEXT SELF) NULL)
   (CL:SETF (%ATOMIC-GOAL-CACHE.PREVIOUS SELF) NULL)
   (CL:SETF (%ATOMIC-GOAL-CACHE.NEGATIVE-SCORE SELF) NULL-FLOAT)
   (CL:SETF (%ATOMIC-GOAL-CACHE.POSITIVE-SCORE SELF) NULL-FLOAT)
   (CL:SETF (%ATOMIC-GOAL-CACHE.JUSTIFICATION SELF) NULL)
   (CL:SETF (%ATOMIC-GOAL-CACHE.BINDINGS SELF) NULL)
   (CL:SETF (%ATOMIC-GOAL-CACHE.PROPOSITION SELF) NULL)
   (CL:SETF (%ATOMIC-GOAL-CACHE.REVERSE-POLARITY? SELF) CL:NIL)
   (CL:SETF (%ATOMIC-GOAL-CACHE.TRUTH-VALUE SELF) NULL)
   (CL:SETF (%ATOMIC-GOAL-CACHE.TIMESTAMP SELF) NULL-INTEGER)
   (CL:SETF (%ATOMIC-GOAL-CACHE.GOAL-CONTEXT SELF) NULL) SELF))

(CL:DEFMETHOD PRIMARY-TYPE ((SELF ATOMIC-GOAL-CACHE))
  SGT-GOAL-CACHES-LOGIC-ATOMIC-GOAL-CACHE)

(CL:DEFUN ACCESS-ATOMIC-GOAL-CACHE-SLOT-VALUE (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-GOAL-CONTEXT)
    (CL:IF SETVALUE?
     (CL:SETF (%ATOMIC-GOAL-CACHE.GOAL-CONTEXT SELF) VALUE)
     (CL:SETQ VALUE (%ATOMIC-GOAL-CACHE.GOAL-CONTEXT SELF))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-TIMESTAMP)
    (CL:IF SETVALUE?
     (CL:SETF (%ATOMIC-GOAL-CACHE.TIMESTAMP SELF)
      (%INTEGER-WRAPPER.WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE
      (WRAP-INTEGER (%ATOMIC-GOAL-CACHE.TIMESTAMP SELF)))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-TRUTH-VALUE)
    (CL:IF SETVALUE?
     (CL:SETF (%ATOMIC-GOAL-CACHE.TRUTH-VALUE SELF) VALUE)
     (CL:SETQ VALUE (%ATOMIC-GOAL-CACHE.TRUTH-VALUE SELF))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-REVERSE-POLARITY?)
    (CL:IF SETVALUE?
     (CL:SETF (%ATOMIC-GOAL-CACHE.REVERSE-POLARITY? SELF)
      (COERCE-WRAPPED-BOOLEAN-TO-BOOLEAN VALUE))
     (CL:SETQ VALUE
      (CL:IF (%ATOMIC-GOAL-CACHE.REVERSE-POLARITY? SELF) TRUE-WRAPPER
       FALSE-WRAPPER))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-PROPOSITION)
    (CL:IF SETVALUE?
     (CL:SETF (%ATOMIC-GOAL-CACHE.PROPOSITION SELF) VALUE)
     (CL:SETQ VALUE (%ATOMIC-GOAL-CACHE.PROPOSITION SELF))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-BINDINGS)
    (CL:IF SETVALUE? (CL:SETF (%ATOMIC-GOAL-CACHE.BINDINGS SELF) VALUE)
     (CL:SETQ VALUE (%ATOMIC-GOAL-CACHE.BINDINGS SELF))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-JUSTIFICATION)
    (CL:IF SETVALUE?
     (CL:SETF (%ATOMIC-GOAL-CACHE.JUSTIFICATION SELF) VALUE)
     (CL:SETQ VALUE (%ATOMIC-GOAL-CACHE.JUSTIFICATION SELF))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-POSITIVE-SCORE)
    (CL:IF SETVALUE?
     (CL:SETF (%ATOMIC-GOAL-CACHE.POSITIVE-SCORE SELF)
      (%FLOAT-WRAPPER.WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE
      (WRAP-FLOAT (%ATOMIC-GOAL-CACHE.POSITIVE-SCORE SELF)))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-NEGATIVE-SCORE)
    (CL:IF SETVALUE?
     (CL:SETF (%ATOMIC-GOAL-CACHE.NEGATIVE-SCORE SELF)
      (%FLOAT-WRAPPER.WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE
      (WRAP-FLOAT (%ATOMIC-GOAL-CACHE.NEGATIVE-SCORE SELF)))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-PREVIOUS)
    (CL:IF SETVALUE? (CL:SETF (%ATOMIC-GOAL-CACHE.PREVIOUS SELF) VALUE)
     (CL:SETQ VALUE (%ATOMIC-GOAL-CACHE.PREVIOUS SELF))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-STELLA-NEXT)
    (CL:IF SETVALUE? (CL:SETF (%ATOMIC-GOAL-CACHE.NEXT SELF) VALUE)
     (CL:SETQ VALUE (%ATOMIC-GOAL-CACHE.NEXT SELF))))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "`" SLOTNAME "' is not a valid case option")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
  VALUE)

(CL:DEFMETHOD PRINT-OBJECT ((SELF ATOMIC-GOAL-CACHE) STREAM)
  (PRINT-ATOMIC-GOAL-CACHE SELF STREAM))

;;; (DEFUN PRINT-ATOMIC-GOAL-CACHE ...)

(CL:DEFUN PRINT-ATOMIC-GOAL-CACHE (SELF STREAM)
  (%%PRINT-STREAM STREAM "|GC|["
   (CL:IF (%ATOMIC-GOAL-CACHE.REVERSE-POLARITY? SELF) "~" "") "("
   (STRINGIFIED-KIF-OPERATOR (%ATOMIC-GOAL-CACHE.PROPOSITION SELF)))
  (CL:LET*
   ((*PRINTMODE* KWD-GOAL-CACHES-REALISTIC)
    (*PRINTLOGICALFORMSTREAM* (WRAP-NATIVE-OUTPUT-STREAM STREAM)))
   (CL:DECLARE (CL:SPECIAL *PRINTMODE* *PRINTLOGICALFORMSTREAM*))
   (CL:LET*
    ((ARG NULL)
     (VECTOR-000
      (%PROPOSITION.ARGUMENTS (%ATOMIC-GOAL-CACHE.PROPOSITION SELF)))
     (INDEX-000 0) (LENGTH-000 (LENGTH VECTOR-000)) (ARGVALUE NULL)
     (ITER-000 (%ATOMIC-GOAL-CACHE.BINDINGS SELF)))
    (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
    (CL:LOOP WHILE
     (CL:AND (CL:< INDEX-000 LENGTH-000) (CL:NOT (CL:EQ ITER-000 NIL)))
     DO
     (CL:SETQ ARG
      (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-000))
       INDEX-000))
     (CL:SETQ ARGVALUE (%%VALUE ITER-000)) (%%PRINT-STREAM STREAM " ")
     (PRINT-AS-KIF-INTERNAL (CL:IF (CL:EQ ARGVALUE NULL) ARG ARGVALUE))
     (CL:SETQ INDEX-000 (CL:1+ INDEX-000))
     (CL:SETQ ITER-000 (%%REST ITER-000)))))
  (%%PRINT-STREAM STREAM ") time: " (%ATOMIC-GOAL-CACHE.TIMESTAMP SELF)
   " ctxt: "
   (%CONTEXT.CONTEXT-NUMBER (%ATOMIC-GOAL-CACHE.GOAL-CONTEXT SELF)) "]"))

;;; (DEFGLOBAL *SUCCEEDED-GOALS-CACHE* ...)

(CL:DEFVAR *SUCCEEDED-GOALS-CACHE* NULL)

;;; (DEFGLOBAL *FAILED-GOALS-CACHE* ...)

(CL:DEFVAR *FAILED-GOALS-CACHE* NULL)

;;; (DEFUN CLEAR-QUERY-RESULTS-CACHE ...)

(CL:DEFUN CLEAR-QUERY-RESULTS-CACHE ()
  (CL:LET*
   ((CACHE NULL) (VECTOR-000 *SUCCEEDED-GOALS-CACHE*) (INDEX-000 0)
    (LENGTH-000 (LENGTH VECTOR-000)))
   (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
   (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
    (CL:SETQ CACHE
     (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-000))
      INDEX-000))
    (CL:WHEN (CL:NOT (CL:EQ CACHE NULL))
     (SET-GOAL-CACHE-LIST (%ATOMIC-GOAL-CACHE.PROPOSITION CACHE) NULL))
    (CL:SETQ INDEX-000 (CL:1+ INDEX-000))))
  (CLEAR *SUCCEEDED-GOALS-CACHE*)
  (CLEAR *FAILED-GOALS-CACHE*)
  (CL:SETQ *FAILED-GOAL-CUTOFFS* 0)
  (CL:SETQ *SUCCEEDED-GOAL-CUTOFFS* 0))

;;; (DEFUN PRINT-QUERY-RESULTS-CACHE ...)

(CL:DEFUN PRINT-QUERY-RESULTS-CACHE (LIMIT)
  (CL:DECLARE (CL:TYPE CL:FIXNUM LIMIT))
  #+MCL
  (CL:CHECK-TYPE LIMIT CL:FIXNUM)
  (CL:WHEN (NULL? LIMIT) (CL:SETQ LIMIT 100))
  (CL:LET* ((COUNT LIMIT)) (CL:DECLARE (CL:TYPE CL:FIXNUM COUNT))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
    "Failed goal cutoffs:    " *FAILED-GOAL-CUTOFFS* EOL)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
    "Succeeded goal cutoffs: " *SUCCEEDED-GOAL-CUTOFFS* EOL EOL)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
    "Cached failed goals:" EOL)
   (CL:LET*
    ((CACHE NULL) (VECTOR-000 *FAILED-GOALS-CACHE*) (INDEX-000 0)
     (LENGTH-000 (LENGTH VECTOR-000)) (I NULL-INTEGER) (ITER-000 0))
    (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000 I ITER-000))
    (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
     (CL:SETQ CACHE
      (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-000))
       INDEX-000))
     (CL:SETQ I ITER-000)
     (CL:LET* ((TEST-VALUE-000 CL:NIL))
      (CL:SETQ TEST-VALUE-000 (CL:NOT (CL:EQ CACHE NULL)))
      (CL:WHEN TEST-VALUE-000
       (CL:SETQ TEST-VALUE-000
        (CL:NOT (DELETED? (%ATOMIC-GOAL-CACHE.PROPOSITION CACHE))))
       (CL:WHEN TEST-VALUE-000
        (CL:SETQ TEST-VALUE-000
         (CL:NOT
          (CL:=
           (%GENERALIZED-SYMBOL.SYMBOL-ID
            (%PROPOSITION.OPERATOR
             (%ATOMIC-GOAL-CACHE.PROPOSITION CACHE)))
           -1)))
        (CL:WHEN TEST-VALUE-000
         (CL:LET* ((FOUND?-000 CL:NIL))
          (CL:LET*
           ((ARG NULL)
            (VECTOR-001
             (%PROPOSITION.ARGUMENTS
              (%ATOMIC-GOAL-CACHE.PROPOSITION CACHE)))
            (INDEX-001 0) (LENGTH-001 (LENGTH VECTOR-001))
            (BINDING NULL)
            (ITER-001 (%ATOMIC-GOAL-CACHE.BINDINGS CACHE)))
           (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-001 LENGTH-001))
           (CL:LOOP WHILE
            (CL:AND (CL:< INDEX-001 LENGTH-001)
             (CL:NOT (CL:EQ ITER-001 NIL)))
            DO
            (CL:SETQ ARG
             (CL:AREF
              (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-001))
              INDEX-001))
            (CL:SETQ BINDING (%%VALUE ITER-001))
            (CL:WHEN
             (CL:OR (DELETED? ARG)
              (CL:AND (CL:NOT (CL:EQ BINDING NULL))
               (DELETED? BINDING)))
             (CL:SETQ FOUND?-000 CL:T) (CL:RETURN))
            (CL:SETQ INDEX-001 (CL:1+ INDEX-001))
            (CL:SETQ ITER-001 (%%REST ITER-001))))
          (CL:SETQ TEST-VALUE-000 FOUND?-000))
         (CL:SETQ TEST-VALUE-000 (CL:NOT TEST-VALUE-000)))))
      (CL:WHEN TEST-VALUE-000 (CL:WHEN (CL:<= COUNT 0) (CL:RETURN))
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT) I
        ": " CACHE EOL)
       (CL:SETQ COUNT (CL:1- COUNT))))
     (CL:SETQ INDEX-000 (CL:1+ INDEX-000))
     (CL:SETQ ITER-000 (CL:1+ ITER-000))))
   (CL:SETQ COUNT LIMIT)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT) EOL
    "Cached succeeded goals:" EOL)
   (CL:LET*
    ((CACHE NULL) (VECTOR-002 *SUCCEEDED-GOALS-CACHE*) (INDEX-002 0)
     (LENGTH-002 (LENGTH VECTOR-002)) (I NULL-INTEGER) (ITER-002 0))
    (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-002 LENGTH-002 I ITER-002))
    (CL:LOOP WHILE (CL:< INDEX-002 LENGTH-002) DO
     (CL:SETQ CACHE
      (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-002))
       INDEX-002))
     (CL:SETQ I ITER-002)
     (CL:LET* ((TEST-VALUE-001 CL:NIL))
      (CL:SETQ TEST-VALUE-001 (CL:NOT (CL:EQ CACHE NULL)))
      (CL:WHEN TEST-VALUE-001
       (CL:SETQ TEST-VALUE-001
        (CL:NOT (DELETED? (%ATOMIC-GOAL-CACHE.PROPOSITION CACHE))))
       (CL:WHEN TEST-VALUE-001
        (CL:SETQ TEST-VALUE-001
         (CL:NOT
          (CL:=
           (%GENERALIZED-SYMBOL.SYMBOL-ID
            (%PROPOSITION.OPERATOR
             (%ATOMIC-GOAL-CACHE.PROPOSITION CACHE)))
           -1)))
        (CL:WHEN TEST-VALUE-001
         (CL:LET* ((FOUND?-001 CL:NIL))
          (CL:LET*
           ((ARG NULL)
            (VECTOR-003
             (%PROPOSITION.ARGUMENTS
              (%ATOMIC-GOAL-CACHE.PROPOSITION CACHE)))
            (INDEX-003 0) (LENGTH-003 (LENGTH VECTOR-003))
            (BINDING NULL)
            (ITER-003 (%ATOMIC-GOAL-CACHE.BINDINGS CACHE)))
           (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-003 LENGTH-003))
           (CL:LOOP WHILE
            (CL:AND (CL:< INDEX-003 LENGTH-003)
             (CL:NOT (CL:EQ ITER-003 NIL)))
            DO
            (CL:SETQ ARG
             (CL:AREF
              (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-003))
              INDEX-003))
            (CL:SETQ BINDING (%%VALUE ITER-003))
            (CL:WHEN
             (CL:OR (DELETED? ARG)
              (CL:AND (CL:NOT (CL:EQ BINDING NULL))
               (DELETED? BINDING)))
             (CL:SETQ FOUND?-001 CL:T) (CL:RETURN))
            (CL:SETQ INDEX-003 (CL:1+ INDEX-003))
            (CL:SETQ ITER-003 (%%REST ITER-003))))
          (CL:SETQ TEST-VALUE-001 FOUND?-001))
         (CL:SETQ TEST-VALUE-001 (CL:NOT TEST-VALUE-001)))))
      (CL:WHEN TEST-VALUE-001 (CL:WHEN (CL:<= COUNT 0) (CL:RETURN))
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT) I
        ": " CACHE EOL)
       (CL:SETQ COUNT (CL:1- COUNT))))
     (CL:SETQ INDEX-002 (CL:1+ INDEX-002))
     (CL:SETQ ITER-002 (CL:1+ ITER-002))))))

;;; (DEFUN (SUCCEEDED-GOAL-INDEX INTEGER) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T) CL:FIXNUM) SUCCEEDED-GOAL-INDEX))
(CL:DEFUN SUCCEEDED-GOAL-INDEX (FRAME)
  (CL:LET ((CODE (GOAL-HASH-CODE FRAME)) (SIZE 1541))
   (CL:DECLARE (CL:TYPE CL:FIXNUM CODE SIZE))
   (CL:THE CL:FIXNUM
    (CL:REM
     (CL:THE CL:FIXNUM (CL:LOGAND CODE *INTEGER-UNSIGNED-BITS-MASK*))
     SIZE))))

;;; (DEFUN (FAILED-GOAL-INDEX INTEGER) ...)

(CL:DECLAIM (CL:FTYPE (CL:FUNCTION (CL:T) CL:FIXNUM) FAILED-GOAL-INDEX))
(CL:DEFUN FAILED-GOAL-INDEX (FRAME)
  (CL:LET ((CODE (GOAL-HASH-CODE FRAME)) (SIZE 1541))
   (CL:DECLARE (CL:TYPE CL:FIXNUM CODE SIZE))
   (CL:THE CL:FIXNUM
    (CL:REM
     (CL:THE CL:FIXNUM (CL:LOGAND CODE *INTEGER-UNSIGNED-BITS-MASK*))
     SIZE))))

;;; (DEFUN (GOAL-HASH-CODE INTEGER) ...)

(CL:DECLAIM (CL:FTYPE (CL:FUNCTION (CL:T) CL:FIXNUM) GOAL-HASH-CODE))
(CL:DEFUN GOAL-HASH-CODE (FRAME)
  (CL:LET*
   ((PROPOSITION (%CONTROL-FRAME.PROPOSITION FRAME))
    (OPERATOR (CACHED-GOAL-OPERATOR PROPOSITION))
    (ARGUMENTS (%PROPOSITION.ARGUMENTS PROPOSITION)) (CODE 0))
   (CL:DECLARE (CL:TYPE CL:FIXNUM CODE))
   (CL:SETQ CODE (HASH-CODE *CONTEXT*))
   (CL:WHEN (%CONTROL-FRAME.REVERSE-POLARITY? FRAME)
    (CL:SETQ CODE
     (CL:THE CL:FIXNUM
      (CL:LOGXOR
       (CL:THE CL:FIXNUM
        (CL:IF (CL:= (CL:THE CL:FIXNUM (CL:LOGAND CODE 1)) 0)
         (CL:LET ((ARG CODE)) (CL:DECLARE (CL:TYPE CL:FIXNUM ARG))
          (CL:THE CL:FIXNUM
           (CL:LOGAND (CL:THE CL:FIXNUM (CL:ASH ARG -1))
            *INTEGER-UNSIGNED-BITS-MASK*)))
         (CL:THE CL:FIXNUM
          (CL:LOGIOR
           (CL:THE CL:FIXNUM
            (CL:LET ((ARG CODE) (COUNT 1))
             (CL:DECLARE (CL:TYPE CL:FIXNUM ARG COUNT))
             (CL:THE CL:FIXNUM
              (CL:ASH ARG (CL:THE CL:FIXNUM (CL:- COUNT))))))
           *INTEGER-MSB-MASK*))))
       48312004))))
   (CL:SETQ CODE
    (CL:THE CL:FIXNUM
     (CL:LOGXOR
      (CL:THE CL:FIXNUM
       (CL:IF (CL:= (CL:THE CL:FIXNUM (CL:LOGAND CODE 1)) 0)
        (CL:LET ((ARG CODE)) (CL:DECLARE (CL:TYPE CL:FIXNUM ARG))
         (CL:THE CL:FIXNUM
          (CL:LOGAND (CL:THE CL:FIXNUM (CL:ASH ARG -1))
           *INTEGER-UNSIGNED-BITS-MASK*)))
        (CL:THE CL:FIXNUM
         (CL:LOGIOR
          (CL:THE CL:FIXNUM
           (CL:LET ((ARG CODE) (COUNT 1))
            (CL:DECLARE (CL:TYPE CL:FIXNUM ARG COUNT))
            (CL:THE CL:FIXNUM
             (CL:ASH ARG (CL:THE CL:FIXNUM (CL:- COUNT))))))
          *INTEGER-MSB-MASK*))))
      (CL:THE CL:FIXNUM (SAFE-HASH-CODE OPERATOR)))))
   (CL:LET*
    ((ARG NULL) (VECTOR-000 ARGUMENTS) (INDEX-000 0)
     (LENGTH-000 (LENGTH VECTOR-000)) (ARGVALUE NULL)
     (ITER-000 (%CONTROL-FRAME.GOAL-BINDINGS FRAME)))
    (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
    (CL:LOOP WHILE
     (CL:AND (CL:< INDEX-000 LENGTH-000) (CL:NOT (CL:EQ ITER-000 NIL)))
     DO
     (CL:SETQ ARG
      (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-000))
       INDEX-000))
     (CL:SETQ ARGVALUE (%%VALUE ITER-000))
     (CL:TAGBODY
      (CL:WHEN (CL:EQ ARGVALUE NULL)
       (CL:SETQ ARGVALUE
        (CL:AREF
         (CL:THE CL:SIMPLE-VECTOR
          (%VECTOR.THE-ARRAY
           (%PATTERN-RECORD.VARIABLE-BINDINGS
            (%QUERY-ITERATOR.CURRENT-PATTERN-RECORD *QUERYITERATOR*))))
         (CL:THE CL:FIXNUM (%PATTERN-VARIABLE.BOUND-TO-OFFSET ARG))))
       (CL:WHEN (CL:EQ ARGVALUE NULL)
        (CL:SETQ CODE (HASH-UNBOUND-GOAL-VARIABLE ARG ARGUMENTS CODE))
        (CL:GO :CONTINUE)))
      (CL:SETQ CODE (HASH-GOAL-ARGUMENT ARGVALUE CODE)) :CONTINUE)
     (CL:SETQ INDEX-000 (CL:1+ INDEX-000))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   CODE))

;;; (DEFUN (HASH-UNBOUND-GOAL-VARIABLE INTEGER) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T CL:T CL:FIXNUM) CL:FIXNUM)
  HASH-UNBOUND-GOAL-VARIABLE))
(CL:DEFUN HASH-UNBOUND-GOAL-VARIABLE (VAR ARGUMENTS CODE)
  (CL:DECLARE (CL:TYPE CL:FIXNUM CODE))
  #+MCL
  (CL:CHECK-TYPE CODE CL:FIXNUM)
  (CL:LET* ((VARINDEX 1)) (CL:DECLARE (CL:TYPE CL:FIXNUM VARINDEX))
   (CL:LET*
    ((ARG NULL) (VECTOR-000 ARGUMENTS) (INDEX-000 0)
     (LENGTH-000 (LENGTH VECTOR-000)) (I NULL-INTEGER) (ITER-000 0))
    (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000 I ITER-000))
    (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
     (CL:SETQ ARG
      (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-000))
       INDEX-000))
     (CL:SETQ I ITER-000)
     (CL:COND
      ((CL:EQ VAR ARG)
       (CL:RETURN-FROM HASH-UNBOUND-GOAL-VARIABLE
        (HASH-STRING "#v" (CL:+ CODE VARINDEX))))
      ((CL:AND (ISA? ARG SGT-GOAL-CACHES-LOGIC-PATTERN-VARIABLE)
        (CL:= (POSITION ARGUMENTS ARG 0) I))
       (CL:SETQ VARINDEX (CL:1+ VARINDEX))))
     (CL:SETQ INDEX-000 (CL:1+ INDEX-000))
     (CL:SETQ ITER-000 (CL:1+ ITER-000))))
   (CL:ERROR (NEW-STELLA-EXCEPTION "Shouldn't get here!"))))

;;; (DEFUN (HASH-GOAL-ARGUMENT INTEGER) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T CL:FIXNUM) CL:FIXNUM) HASH-GOAL-ARGUMENT))
(CL:DEFUN HASH-GOAL-ARGUMENT (ARG CODE)
  (CL:DECLARE (CL:TYPE CL:FIXNUM CODE))
  #+MCL
  (CL:CHECK-TYPE CODE CL:FIXNUM)
  (CL:LET* ((HASHEDARG ARG))
   (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE ARG)))
    (CL:COND
     ((SUBTYPE-OF? TEST-VALUE-000 SGT-GOAL-CACHES-LOGIC-SKOLEM)
      (CL:PROGN))
     ((SUBTYPE-OF? TEST-VALUE-000 SGT-GOAL-CACHES-LOGIC-LOGIC-OBJECT)
      (CL:PROGN
       (CL:WHEN
        (CL:EQ (%LOGIC-OBJECT.SURROGATE-VALUE-INVERSE ARG) NULL)
        (CL:SETQ HASHEDARG (WRAP-STRING (STRINGIFY ARG))))))
     (CL:T)))
   (CL:THE CL:FIXNUM
    (CL:LOGXOR
     (CL:THE CL:FIXNUM
      (CL:IF (CL:= (CL:THE CL:FIXNUM (CL:LOGAND CODE 1)) 0)
       (CL:LET ((ARG CODE)) (CL:DECLARE (CL:TYPE CL:FIXNUM ARG))
        (CL:THE CL:FIXNUM
         (CL:LOGAND (CL:THE CL:FIXNUM (CL:ASH ARG -1))
          *INTEGER-UNSIGNED-BITS-MASK*)))
       (CL:THE CL:FIXNUM
        (CL:LOGIOR
         (CL:THE CL:FIXNUM
          (CL:LET ((ARG CODE) (COUNT 1))
           (CL:DECLARE (CL:TYPE CL:FIXNUM ARG COUNT))
           (CL:THE CL:FIXNUM
            (CL:ASH ARG (CL:THE CL:FIXNUM (CL:- COUNT))))))
         *INTEGER-MSB-MASK*))))
     (CL:THE CL:FIXNUM (SAFE-EQUAL-HASH-CODE HASHEDARG))))))

;;; (DEFUN (CACHED-GOAL-OPERATOR SURROGATE) ...)

(CL:DEFUN CACHED-GOAL-OPERATOR (GOAL)
  (CL:LET* ((TEST-VALUE-000 (%PROPOSITION.KIND GOAL)))
   (CL:COND
    ((CL:OR (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-ISA)
      (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-PREDICATE)
      (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-FUNCTION))
     (CL:LET* ((OPERATOR (%PROPOSITION.OPERATOR GOAL)))
      (CL:WHEN
       (CL:AND (CL:NOT (CL:EQ OPERATOR NULL))
        (ISA? OPERATOR SGT-GOAL-CACHES-STELLA-SURROGATE)
        (CL:NOT (CL:= (%GENERALIZED-SYMBOL.SYMBOL-ID OPERATOR) -1)))
       (CL:RETURN-FROM CACHED-GOAL-OPERATOR OPERATOR))))
    (CL:T)))
  NULL)

;;; (DEFUN (GET-GOAL-CACHE-LIST ATOMIC-GOAL-CACHE) ...)

(CL:DEFUN GET-GOAL-CACHE-LIST (GOAL)
  (CL:LET*
   ((OPERATOR (CACHED-GOAL-OPERATOR GOAL))
    (DESCRIPTION
     (CL:IF (CL:NOT (CL:EQ OPERATOR NULL)) (GET-DESCRIPTION OPERATOR)
      NULL)))
   (CL:IF
    (CL:AND (CL:NOT (CL:EQ DESCRIPTION NULL))
     (CL:NOT (DELETED? DESCRIPTION)))
    (DYNAMIC-SLOT-VALUE (%NAMED-DESCRIPTION.DYNAMIC-SLOTS DESCRIPTION)
     SYM-GOAL-CACHES-LOGIC-GOAL-CACHE-LIST NULL)
    NULL)))

;;; (DEFUN (SET-GOAL-CACHE-LIST ATOMIC-GOAL-CACHE) ...)

(CL:DEFUN SET-GOAL-CACHE-LIST (GOAL FIRSTCACHE)
  (CL:LET*
   ((OPERATOR (CACHED-GOAL-OPERATOR GOAL))
    (DESCRIPTION
     (CL:IF (CL:NOT (CL:EQ OPERATOR NULL)) (GET-DESCRIPTION OPERATOR)
      NULL)))
   (CL:IF
    (CL:AND (CL:NOT (CL:EQ DESCRIPTION NULL))
     (CL:NOT (DELETED? DESCRIPTION)))
    (SET-DYNAMIC-SLOT-VALUE
     (%NAMED-DESCRIPTION.DYNAMIC-SLOTS DESCRIPTION)
     SYM-GOAL-CACHES-LOGIC-GOAL-CACHE-LIST FIRSTCACHE NULL)
    NULL)))

;;; (DEFUN (CREATE-ATOMIC-GOAL-CACHE ATOMIC-GOAL-CACHE) ...)

(CL:DEFUN CREATE-ATOMIC-GOAL-CACHE (FRAME CACHE SUCCESS?)
  (CL:WHEN (CL:EQ CACHE NULL) (CL:SETQ CACHE (NEW-ATOMIC-GOAL-CACHE)))
  (CL:LET* ((PROPOSITION (%CONTROL-FRAME.PROPOSITION FRAME)))
   (CL:WHEN SUCCESS?
    (CL:WHEN (CL:NOT (CL:EQ (%ATOMIC-GOAL-CACHE.NEXT CACHE) NULL))
     (CL:SETF
      (%ATOMIC-GOAL-CACHE.PREVIOUS (%ATOMIC-GOAL-CACHE.NEXT CACHE))
      (%ATOMIC-GOAL-CACHE.PREVIOUS CACHE))
     (CL:WHEN (CL:EQ (%ATOMIC-GOAL-CACHE.PREVIOUS CACHE) NULL)
      (SET-GOAL-CACHE-LIST
       (%ATOMIC-GOAL-CACHE.PROPOSITION (%ATOMIC-GOAL-CACHE.NEXT CACHE))
       (%ATOMIC-GOAL-CACHE.NEXT CACHE))))
    (CL:WHEN (CL:NOT (CL:EQ (%ATOMIC-GOAL-CACHE.PREVIOUS CACHE) NULL))
     (CL:SETF
      (%ATOMIC-GOAL-CACHE.NEXT (%ATOMIC-GOAL-CACHE.PREVIOUS CACHE))
      (%ATOMIC-GOAL-CACHE.NEXT CACHE)))
    (CL:SETF (%ATOMIC-GOAL-CACHE.PREVIOUS CACHE) NULL)
    (CL:SETF (%ATOMIC-GOAL-CACHE.NEXT CACHE) NULL)
    (CL:LET* ((PREVIOUSSTART (GET-GOAL-CACHE-LIST PROPOSITION)))
     (CL:WHEN (CL:NOT (CL:EQ CACHE PREVIOUSSTART))
      (CL:WHEN (CL:NOT (CL:EQ PREVIOUSSTART NULL))
       (CL:SETF (%ATOMIC-GOAL-CACHE.PREVIOUS PREVIOUSSTART) CACHE)
       (CL:SETF (%ATOMIC-GOAL-CACHE.NEXT CACHE) PREVIOUSSTART))))
    (SET-GOAL-CACHE-LIST PROPOSITION CACHE))
   (CL:SETF (%ATOMIC-GOAL-CACHE.GOAL-CONTEXT CACHE) *CONTEXT*)
   (CL:SETF (%ATOMIC-GOAL-CACHE.TIMESTAMP CACHE) (GET-NOW-TIMESTAMP))
   (CL:SETF (%ATOMIC-GOAL-CACHE.REVERSE-POLARITY? CACHE)
    (%CONTROL-FRAME.REVERSE-POLARITY? FRAME))
   (CL:SETF (%ATOMIC-GOAL-CACHE.PROPOSITION CACHE) PROPOSITION)
   (CL:SETF (%ATOMIC-GOAL-CACHE.BINDINGS CACHE)
    (YIELD-GOAL-BINDINGS PROPOSITION))
   (CL:SETF (%ATOMIC-GOAL-CACHE.JUSTIFICATION CACHE)
    (CL:IF SUCCESS?
     (DYNAMIC-SLOT-VALUE (%CONTROL-FRAME.DYNAMIC-SLOTS FRAME)
      SYM-GOAL-CACHES-LOGIC-JUSTIFICATION NULL)
     NULL))
   (CL:SETF (%ATOMIC-GOAL-CACHE.TRUTH-VALUE CACHE)
    (%CONTROL-FRAME.TRUTH-VALUE FRAME))
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ *QUERYITERATOR* NULL))
     (CL:NOT
      (CL:EQ (%QUERY-ITERATOR.PARTIAL-MATCH-STRATEGY *QUERYITERATOR*)
       NULL)))
    (SET-CACHE-PARTIAL-TRUTH FRAME CACHE))
   (CL:SETF (%CONTROL-FRAME.CACHED-GOAL-RESULT? FRAME) CL:T) CACHE))

;;; (DEFSPECIAL *UNIFICATION-VECTOR-1* ...)

(CL:DEFVAR *UNIFICATION-VECTOR-1* NULL)

;;; (DEFSPECIAL *UNIFICATION-VECTOR-2* ...)

(CL:DEFVAR *UNIFICATION-VECTOR-2* NULL)

;;; (DEFUN (CACHE-MATCHES-GOAL? BOOLEAN) ...)

(CL:DEFUN CACHE-MATCHES-GOAL? (CACHE GOAL SUCCESS? MODE)
  (CL:SETQ SUCCESS? SUCCESS?)
  (CL:WHEN
   (CL:AND
    (CL:= (GET-NOW-TIMESTAMP) (%ATOMIC-GOAL-CACHE.TIMESTAMP CACHE))
    (CL:EQ *CONTEXT* (%ATOMIC-GOAL-CACHE.GOAL-CONTEXT CACHE))
    (CL:EQ (%CONTROL-FRAME.REVERSE-POLARITY? GOAL)
     (%ATOMIC-GOAL-CACHE.REVERSE-POLARITY? CACHE)))
   (CL:LET*
    ((GOALPROPOSITION (%CONTROL-FRAME.PROPOSITION GOAL))
     (GOALARGUMENTS (%PROPOSITION.ARGUMENTS GOALPROPOSITION))
     (CACHEPROPOSITION (%ATOMIC-GOAL-CACHE.PROPOSITION CACHE))
     (CACHEARGUMENTS (%PROPOSITION.ARGUMENTS CACHEPROPOSITION))
     (NOFGOALARGUMENTS (LENGTH GOALARGUMENTS))
     (UVECTOR1 (%VECTOR.THE-ARRAY *UNIFICATION-VECTOR-1*))
     (UVECTOR2 (%VECTOR.THE-ARRAY *UNIFICATION-VECTOR-2*)))
    (CL:DECLARE (CL:TYPE CL:FIXNUM NOFGOALARGUMENTS)
     (CL:TYPE CL:SIMPLE-VECTOR UVECTOR1 UVECTOR2))
    (CL:WHEN
     (CL:AND
      (CL:EQ (%PROPOSITION.OPERATOR GOALPROPOSITION)
       (%PROPOSITION.OPERATOR CACHEPROPOSITION))
      (CL:= NOFGOALARGUMENTS (LENGTH CACHEARGUMENTS)))
     (CL:WHEN
      (CL:> NOFGOALARGUMENTS
       (%VECTOR.ARRAY-SIZE *UNIFICATION-VECTOR-1*))
      (RESIZE-VECTOR *UNIFICATION-VECTOR-1* (CL:* 2 NOFGOALARGUMENTS))
      (RESIZE-VECTOR *UNIFICATION-VECTOR-2* (CL:* 2 NOFGOALARGUMENTS))
      (CL:SETQ UVECTOR1 (%VECTOR.THE-ARRAY *UNIFICATION-VECTOR-1*))
      (CL:SETQ UVECTOR2 (%VECTOR.THE-ARRAY *UNIFICATION-VECTOR-2*)))
     (CL:LET*
      ((GOALARG NULL) (VECTOR-000 GOALARGUMENTS) (INDEX-000 0)
       (LENGTH-000 (LENGTH VECTOR-000)) (GOALBINDING NULL)
       (ITER-000 (%CONTROL-FRAME.GOAL-BINDINGS GOAL))
       (CACHEBINDING NULL)
       (ITER-001 (%ATOMIC-GOAL-CACHE.BINDINGS CACHE)) (I NULL-INTEGER)
       (ITER-002 0))
      (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000 I ITER-002))
      (CL:LOOP WHILE
       (CL:AND (CL:< INDEX-000 LENGTH-000)
        (CL:NOT (CL:EQ ITER-000 NIL)) (CL:NOT (CL:EQ ITER-001 NIL)))
       DO
       (CL:SETQ GOALARG
        (CL:AREF
         (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-000))
         INDEX-000))
       (CL:SETQ GOALBINDING (%%VALUE ITER-000))
       (CL:SETQ CACHEBINDING (%%VALUE ITER-001)) (CL:SETQ I ITER-002)
       (CL:WHEN (CL:EQ GOALBINDING NULL)
        (CL:SETQ GOALBINDING
         (CL:AREF
          (CL:THE CL:SIMPLE-VECTOR
           (%VECTOR.THE-ARRAY
            (%PATTERN-RECORD.VARIABLE-BINDINGS
             (%QUERY-ITERATOR.CURRENT-PATTERN-RECORD
              *QUERYITERATOR*))))
          (CL:THE CL:FIXNUM
           (%PATTERN-VARIABLE.BOUND-TO-OFFSET GOALARG)))))
       (CL:LET ((SELF UVECTOR1) (VALUE GOALBINDING) (POSITION I))
        (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
         (CL:TYPE CL:FIXNUM POSITION))
        (CL:SETF (CL:AREF SELF POSITION) VALUE))
       (CL:LET ((SELF UVECTOR2) (VALUE CACHEBINDING) (POSITION I))
        (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
         (CL:TYPE CL:FIXNUM POSITION))
        (CL:SETF (CL:AREF SELF POSITION) VALUE))
       (CL:SETQ INDEX-000 (CL:1+ INDEX-000))
       (CL:SETQ ITER-000 (%%REST ITER-000))
       (CL:SETQ ITER-001 (%%REST ITER-001))
       (CL:SETQ ITER-002 (CL:1+ ITER-002))))
     (CL:LET*
      ((SUBARGUMENTS GOALARGUMENTS) (SUBBINDINGS UVECTOR1)
       (SUBARGBINDING NULL) (SUPERARGUMENTS CACHEARGUMENTS)
       (SUPERBINDINGS UVECTOR2) (UNIFIEDARG NULL))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SUBBINDINGS SUPERBINDINGS))
      (CL:COND ((CL:EQ MODE KWD-GOAL-CACHES-GOAL-INSTANTIATES-CACHE))
       ((CL:EQ MODE KWD-GOAL-CACHES-CACHE-INSTANTIATES-GOAL)
        (CL:SETQ SUBARGUMENTS CACHEARGUMENTS)
        (CL:SETQ SUBBINDINGS UVECTOR2)
        (CL:SETQ SUPERARGUMENTS GOALARGUMENTS)
        (CL:SETQ SUPERBINDINGS UVECTOR1))
       (CL:T
        (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
         (%%PRINT-STREAM
          (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`" MODE
          "' is not a valid case option")
         (CL:ERROR
          (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
      (CL:LET*
       ((SUBARG NULL) (VECTOR-001 SUBARGUMENTS) (INDEX-001 0)
        (LENGTH-001 (LENGTH VECTOR-001)) (SUPERARG NULL)
        (VECTOR-002 SUPERARGUMENTS) (INDEX-002 0)
        (LENGTH-002 (LENGTH VECTOR-002)) (I NULL-INTEGER) (ITER-003 0))
       (CL:DECLARE
        (CL:TYPE CL:FIXNUM INDEX-001 LENGTH-001 INDEX-002 LENGTH-002 I
         ITER-003))
       (CL:LOOP WHILE
        (CL:AND (CL:< INDEX-001 LENGTH-001)
         (CL:< INDEX-002 LENGTH-002))
        DO
        (CL:SETQ SUBARG
         (CL:AREF
          (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-001))
          INDEX-001))
        (CL:SETQ SUPERARG
         (CL:AREF
          (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-002))
          INDEX-002))
        (CL:SETQ I ITER-003)
        (CL:TAGBODY (CL:SETQ SUBARGBINDING (CL:AREF SUBBINDINGS I))
         (CL:SETQ UNIFIEDARG (CL:AREF SUPERBINDINGS I))
         (CL:WHEN (CL:NOT (CL:EQ UNIFIEDARG NULL))
          (CL:IF (CL:NOT (EQL? SUBARGBINDING UNIFIEDARG))
           (CL:RETURN-FROM CACHE-MATCHES-GOAL? CL:NIL)
           (CL:GO :CONTINUE)))
         (CL:WHEN (CL:EQ SUBARGBINDING NULL)
          (CL:SETQ SUBARGBINDING SUBARG))
         (CL:LET*
          ((SUPARG NULL) (VECTOR-003 SUPERARGUMENTS) (INDEX-003 0)
           (LENGTH-003 (LENGTH VECTOR-003)) (I NULL-INTEGER)
           (ITER-004 0))
          (CL:DECLARE
           (CL:TYPE CL:FIXNUM INDEX-003 LENGTH-003 I ITER-004))
          (CL:LOOP WHILE (CL:< INDEX-003 LENGTH-003) DO
           (CL:SETQ SUPARG
            (CL:AREF
             (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-003))
             INDEX-003))
           (CL:SETQ I ITER-004)
           (CL:WHEN (EQL? SUPARG SUPERARG)
            (CL:LET
             ((SELF SUPERBINDINGS) (VALUE SUBARGBINDING) (POSITION I))
             (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
              (CL:TYPE CL:FIXNUM POSITION))
             (CL:SETF (CL:AREF SELF POSITION) VALUE)))
           (CL:SETQ INDEX-003 (CL:1+ INDEX-003))
           (CL:SETQ ITER-004 (CL:1+ ITER-004))))
         :CONTINUE)
        (CL:SETQ INDEX-001 (CL:1+ INDEX-001))
        (CL:SETQ INDEX-002 (CL:1+ INDEX-002))
        (CL:SETQ ITER-003 (CL:1+ ITER-003))))
      (CL:RETURN-FROM CACHE-MATCHES-GOAL? CL:T)))))
  CL:NIL)

;;; (DEFUN (GOAL-INSTANTIATES-CACHE? BOOLEAN) ...)

(CL:DEFUN GOAL-INSTANTIATES-CACHE? (GOAL CACHE SUCCESS?)
  (CACHE-MATCHES-GOAL? CACHE GOAL SUCCESS?
   KWD-GOAL-CACHES-GOAL-INSTANTIATES-CACHE))

;;; (DEFUN (CACHE-INSTANTIATES-GOAL? BOOLEAN) ...)

(CL:DEFUN CACHE-INSTANTIATES-GOAL? (CACHE GOAL SUCCESS?)
  (CACHE-MATCHES-GOAL? CACHE GOAL SUCCESS?
   KWD-GOAL-CACHES-CACHE-INSTANTIATES-GOAL))

;;; (DEFUN DONT-CACHE-GOAL-FAILURE-BETWEEN-FRAMES ...)

(CL:DEFUN DONT-CACHE-GOAL-FAILURE-BETWEEN-FRAMES (TOPFRAME BOTTOMFRAME)
  (CL:LOOP
   (CL:SETF (%CONTROL-FRAME.DONT-CACHE-GOAL-FAILURE? TOPFRAME) CL:T)
   (CL:WHEN (CL:EQ TOPFRAME BOTTOMFRAME)
    (CL:RETURN-FROM DONT-CACHE-GOAL-FAILURE-BETWEEN-FRAMES))
   (CL:SETQ TOPFRAME (%CONTROL-FRAME.UP TOPFRAME))))

;;; (DEFUN CACHE-GOAL ...)

(CL:DEFUN CACHE-GOAL (FRAME SUCCESS? KEEPFRAME? CLOCKTICKS)
  (CL:DECLARE (CL:TYPE CL:FIXNUM CLOCKTICKS))
  #+MCL
  (CL:CHECK-TYPE CLOCKTICKS CL:FIXNUM)
  (CL:SETQ KEEPFRAME? KEEPFRAME?)
  (CL:WHEN
   (CL:EQ (%CONTROL-FRAME.STATE FRAME) KWD-GOAL-CACHES-ATOMIC-GOAL)
   (CL:WHEN (CL:EQ (%CONTROL-FRAME.GOAL-BINDINGS FRAME) NULL)
    (CL:RETURN-FROM CACHE-GOAL))
   (CL:WHEN SUCCESS?
    (CL:SETF (%CONTROL-FRAME.DONT-CACHE-GOAL-FAILURE? FRAME) CL:T))
   (CL:WHEN (%CONTROL-FRAME.CACHED-GOAL-RESULT? FRAME)
    (CL:RETURN-FROM CACHE-GOAL))
   (CL:WHEN
    (CL:OR
     (CL:>=
      (CL:- CLOCKTICKS (%CONTROL-FRAME.STARTING-CLOCK-TICKS FRAME))
      *CACHE-GOAL-QUANTUM*)
     (CL:AND CL:NIL
      (TEST-PROPERTY?
       (SURROGATE-TO-DESCRIPTION
        (%PROPOSITION.OPERATOR (%CONTROL-FRAME.PROPOSITION FRAME)))
       SGT-GOAL-CACHES-PL-KERNEL-KB-FRAME-PREDICATE)))
    (CL:LET*
     ((TEST-VALUE-000
       (%PROPOSITION.KIND (%CONTROL-FRAME.PROPOSITION FRAME))))
     (CL:COND
      ((CL:OR (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-ISA)
        (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-PREDICATE)
        (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-FUNCTION))
       (CL:WHEN
        (MEMBER?
         (GET-QUOTED-TREE
          "((/PL-KERNEL-KB/@FORK /PL-KERNEL-KB/@COLLECT-INTO-SET) \"/LOGIC\")"
          "/LOGIC")
         (%PROPOSITION.OPERATOR (%CONTROL-FRAME.PROPOSITION FRAME)))
        (CL:RETURN-FROM CACHE-GOAL))
       (CL:WHEN (TRACE-KEYWORD? KWD-GOAL-CACHES-GOAL-CACHES)
        (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
         "=========> CACHED " (CL:IF SUCCESS? "SUCCESS" "FAILURE")
         " AT "
         (CL:LET ((CODE (GOAL-HASH-CODE FRAME)) (SIZE 1541))
          (CL:DECLARE (CL:TYPE CL:FIXNUM CODE SIZE))
          (CL:THE CL:FIXNUM
           (CL:REM
            (CL:THE CL:FIXNUM
             (CL:LOGAND CODE *INTEGER-UNSIGNED-BITS-MASK*))
            SIZE)))
         ": " (%CONTROL-FRAME.PROPOSITION FRAME) EOL))
       (UPDATE-NOW-TIMESTAMP KWD-GOAL-CACHES-EXECUTE-QUERY)
       (SET-DYNAMIC-SLOT-VALUE
        (%NAMED-DESCRIPTION.DYNAMIC-SLOTS
         (SURROGATE-TO-DESCRIPTION
          (%PROPOSITION.OPERATOR (%CONTROL-FRAME.PROPOSITION FRAME))))
        SYM-GOAL-CACHES-LOGIC-CHECK-FOR-CACHED-GOALS?
        (CL:IF CL:T TRUE-WRAPPER FALSE-WRAPPER) FALSE-WRAPPER)
       (CL:LET* ((INDEX NULL-INTEGER) (CACHEDGOAL NULL))
        (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX))
        (CL:COND
         (SUCCESS?
          (CL:WHEN (CL:NOT *CACHE-SUCCEEDED-GOALS?*)
           (CL:RETURN-FROM CACHE-GOAL))
          (CL:SETQ INDEX
           (CL:LET ((CODE (GOAL-HASH-CODE FRAME)) (SIZE 1541))
            (CL:DECLARE (CL:TYPE CL:FIXNUM CODE SIZE))
            (CL:THE CL:FIXNUM
             (CL:REM
              (CL:THE CL:FIXNUM
               (CL:LOGAND CODE *INTEGER-UNSIGNED-BITS-MASK*))
              SIZE))))
          (CL:SETQ CACHEDGOAL
           (CL:AREF
            (CL:THE CL:SIMPLE-VECTOR
             (%VECTOR.THE-ARRAY *SUCCEEDED-GOALS-CACHE*))
            INDEX))
          (CL:COND
           ((CL:OR (CL:EQ CACHEDGOAL NULL)
             (CL:NOT
              (CACHE-MATCHES-GOAL? CACHEDGOAL FRAME CL:T
               KWD-GOAL-CACHES-GOAL-INSTANTIATES-CACHE))
             (CL:AND *RECORD-JUSTIFICATIONS?*
              (CL:EQ (%ATOMIC-GOAL-CACHE.JUSTIFICATION CACHEDGOAL)
               NULL)))
            (CL:LET
             ((SELF (%VECTOR.THE-ARRAY *SUCCEEDED-GOALS-CACHE*))
              (VALUE (CREATE-ATOMIC-GOAL-CACHE FRAME CACHEDGOAL CL:T))
              (POSITION INDEX))
             (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
              (CL:TYPE CL:FIXNUM POSITION))
             (CL:SETF (CL:AREF SELF POSITION) VALUE)))
           ((CL:NOT (CL:EQ CACHEDGOAL NULL))
            (CL:SETF (%ATOMIC-GOAL-CACHE.TRUTH-VALUE CACHEDGOAL)
             (STRENGTHEN-TRUTH-VALUE
              (%ATOMIC-GOAL-CACHE.TRUTH-VALUE CACHEDGOAL)
              (%CONTROL-FRAME.TRUTH-VALUE FRAME))))))
         (CL:T
          (CL:WHEN
           (CL:OR (CL:NOT *CACHE-FAILED-GOALS?*)
            (%CONTROL-FRAME.DONT-CACHE-GOAL-FAILURE? FRAME))
           (CL:RETURN-FROM CACHE-GOAL))
          (CL:SETQ INDEX
           (CL:LET ((CODE (GOAL-HASH-CODE FRAME)) (SIZE 1541))
            (CL:DECLARE (CL:TYPE CL:FIXNUM CODE SIZE))
            (CL:THE CL:FIXNUM
             (CL:REM
              (CL:THE CL:FIXNUM
               (CL:LOGAND CODE *INTEGER-UNSIGNED-BITS-MASK*))
              SIZE))))
          (CL:SETQ CACHEDGOAL
           (CL:AREF
            (CL:THE CL:SIMPLE-VECTOR
             (%VECTOR.THE-ARRAY *FAILED-GOALS-CACHE*))
            INDEX))
          (CL:WHEN
           (CL:OR (CL:EQ CACHEDGOAL NULL)
            (CL:NOT
             (CACHE-MATCHES-GOAL? CACHEDGOAL FRAME CL:NIL
              KWD-GOAL-CACHES-GOAL-INSTANTIATES-CACHE)))
           (CL:LET
            ((SELF (%VECTOR.THE-ARRAY *FAILED-GOALS-CACHE*))
             (VALUE (CREATE-ATOMIC-GOAL-CACHE FRAME CACHEDGOAL CL:NIL))
             (POSITION INDEX))
            (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
             (CL:TYPE CL:FIXNUM POSITION))
            (CL:SETF (CL:AREF SELF POSITION) VALUE)))))))
      (CL:T))))))

;;; (DEFUN (FIND-CACHED-GOAL ATOMIC-GOAL-CACHE) ...)

(CL:DEFUN FIND-CACHED-GOAL (FRAME SUCCESSORFAILURE)
  (CL:WHEN
   (CL:EQ (%CONTROL-FRAME.STATE FRAME) KWD-GOAL-CACHES-ATOMIC-GOAL)
   (CL:LET*
    ((TEST-VALUE-000
      (%PROPOSITION.KIND (%CONTROL-FRAME.PROPOSITION FRAME))))
    (CL:COND
     ((CL:OR (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-ISA)
       (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-PREDICATE)
       (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-FUNCTION))
      (CL:LET* ((CACHEDGOAL NULL))
       (CL:COND
        ((CL:EQ SUCCESSORFAILURE KWD-GOAL-CACHES-SUCCESS)
         (CL:WHEN (CL:NOT *CACHE-SUCCEEDED-GOALS?*)
          (CL:RETURN-FROM FIND-CACHED-GOAL NULL))
         (CL:SETQ CACHEDGOAL
          (CL:AREF
           (CL:THE CL:SIMPLE-VECTOR
            (%VECTOR.THE-ARRAY *SUCCEEDED-GOALS-CACHE*))
           (CL:THE CL:FIXNUM
            (CL:LET ((CODE (GOAL-HASH-CODE FRAME)) (SIZE 1541))
             (CL:DECLARE (CL:TYPE CL:FIXNUM CODE SIZE))
             (CL:THE CL:FIXNUM
              (CL:REM
               (CL:THE CL:FIXNUM
                (CL:LOGAND CODE *INTEGER-UNSIGNED-BITS-MASK*))
               SIZE))))))
         (CL:WHEN
          (CL:AND (CL:NOT (CL:EQ CACHEDGOAL NULL))
           (CACHE-MATCHES-GOAL? CACHEDGOAL FRAME CL:T
            KWD-GOAL-CACHES-GOAL-INSTANTIATES-CACHE)
           (CL:OR (CL:NOT *RECORD-JUSTIFICATIONS?*)
            (CL:NOT
             (CL:EQ (%ATOMIC-GOAL-CACHE.JUSTIFICATION CACHEDGOAL)
              NULL))))
          (CL:RETURN-FROM FIND-CACHED-GOAL CACHEDGOAL)))
        ((CL:EQ SUCCESSORFAILURE KWD-GOAL-CACHES-FAILURE)
         (CL:WHEN
          (CL:OR (CL:NOT *CACHE-FAILED-GOALS?*)
           (%CONTROL-FRAME.DONT-CACHE-GOAL-FAILURE? FRAME))
          (CL:RETURN-FROM FIND-CACHED-GOAL NULL))
         (CL:SETQ CACHEDGOAL
          (CL:AREF
           (CL:THE CL:SIMPLE-VECTOR
            (%VECTOR.THE-ARRAY *FAILED-GOALS-CACHE*))
           (CL:THE CL:FIXNUM
            (CL:LET ((CODE (GOAL-HASH-CODE FRAME)) (SIZE 1541))
             (CL:DECLARE (CL:TYPE CL:FIXNUM CODE SIZE))
             (CL:THE CL:FIXNUM
              (CL:REM
               (CL:THE CL:FIXNUM
                (CL:LOGAND CODE *INTEGER-UNSIGNED-BITS-MASK*))
               SIZE))))))
         (CL:WHEN
          (CL:AND (CL:NOT (CL:EQ CACHEDGOAL NULL))
           (CACHE-MATCHES-GOAL? CACHEDGOAL FRAME CL:NIL
            KWD-GOAL-CACHES-GOAL-INSTANTIATES-CACHE))
          (CL:RETURN-FROM FIND-CACHED-GOAL CACHEDGOAL)))
        (CL:T
         (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
          (%%PRINT-STREAM
           (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
           SUCCESSORFAILURE "' is not a valid case option")
          (CL:ERROR
           (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))
     (CL:T))))
  NULL)

(CL:DEFUN NEW-ATOMIC-GOAL-CACHE-ITERATOR ()
  (CL:LET* ((SELF NULL))
   (CL:SETQ SELF (%MAKE-ATOMIC-GOAL-CACHE-ITERATOR))
   (CL:SETF (%ATOMIC-GOAL-CACHE-ITERATOR.FIRST-ITERATION? SELF) CL:T)
   (CL:SETF (%ATOMIC-GOAL-CACHE-ITERATOR.VALUE SELF) NULL)
   (CL:SETF (%ATOMIC-GOAL-CACHE-ITERATOR.CACHE-LIST SELF) NULL)
   (CL:SETF (%ATOMIC-GOAL-CACHE-ITERATOR.GOAL SELF) NULL) SELF))

(CL:DEFMETHOD PRIMARY-TYPE ((SELF ATOMIC-GOAL-CACHE-ITERATOR))
  SGT-GOAL-CACHES-LOGIC-ATOMIC-GOAL-CACHE-ITERATOR)

(CL:DEFUN ACCESS-ATOMIC-GOAL-CACHE-ITERATOR-SLOT-VALUE (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-GOAL)
    (CL:IF SETVALUE?
     (CL:SETF (%ATOMIC-GOAL-CACHE-ITERATOR.GOAL SELF) VALUE)
     (CL:SETQ VALUE (%ATOMIC-GOAL-CACHE-ITERATOR.GOAL SELF))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-CACHE-LIST)
    (CL:IF SETVALUE?
     (CL:SETF (%ATOMIC-GOAL-CACHE-ITERATOR.CACHE-LIST SELF) VALUE)
     (CL:SETQ VALUE (%ATOMIC-GOAL-CACHE-ITERATOR.CACHE-LIST SELF))))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "`" SLOTNAME "' is not a valid case option")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
  VALUE)

;;; (DEFUN (ALL-CACHED-PROPOSITIONS ATOMIC-GOAL-CACHE-ITERATOR) ...)

(CL:DEFUN ALL-CACHED-PROPOSITIONS (GOAL)
  (CL:LET*
   ((PROPOSITION (%CONTROL-FRAME.PROPOSITION GOAL))
    (OPERATOR (%PROPOSITION.OPERATOR PROPOSITION))
    (CACHELIST (GET-GOAL-CACHE-LIST PROPOSITION)))
   (CL:LOOP WHILE
    (CL:AND (CL:NOT (CL:EQ CACHELIST NULL))
     (CL:NOT
      (CL:EQ
       (%PROPOSITION.OPERATOR
        (%ATOMIC-GOAL-CACHE.PROPOSITION CACHELIST))
       OPERATOR)))
    DO (CL:SETQ CACHELIST (%ATOMIC-GOAL-CACHE.NEXT CACHELIST)))
   (SET-GOAL-CACHE-LIST PROPOSITION CACHELIST)
   (CL:LET* ((SELF-000 (NEW-ATOMIC-GOAL-CACHE-ITERATOR)))
    (CL:SETF (%ATOMIC-GOAL-CACHE-ITERATOR.GOAL SELF-000) GOAL)
    (CL:SETF (%ATOMIC-GOAL-CACHE-ITERATOR.CACHE-LIST SELF-000)
     CACHELIST)
    (CL:LET* ((VALUE-000 SELF-000)) VALUE-000))))

;;; (DEFMETHOD (NEXT? BOOLEAN) ...)

(CL:DEFMETHOD NEXT? ((SELF ATOMIC-GOAL-CACHE-ITERATOR))
  (CL:LET*
   ((GOAL (%ATOMIC-GOAL-CACHE-ITERATOR.GOAL SELF))
    (CACHELIST (%ATOMIC-GOAL-CACHE-ITERATOR.CACHE-LIST SELF)))
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ CACHELIST NULL))
     (CL:NOT
      (CL:EQ (%PROPOSITION.OPERATOR (%CONTROL-FRAME.PROPOSITION GOAL))
       (%PROPOSITION.OPERATOR
        (%ATOMIC-GOAL-CACHE.PROPOSITION CACHELIST)))))
    (CL:SETF (%ATOMIC-GOAL-CACHE-ITERATOR.CACHE-LIST SELF) NULL)
    (CL:RETURN-FROM NEXT? CL:NIL))
   (CL:LOOP WHILE
    (CL:AND (CL:NOT (CL:EQ CACHELIST NULL))
     (CL:OR
      (CL:NOT
       (CACHE-MATCHES-GOAL? CACHELIST GOAL CL:T
        KWD-GOAL-CACHES-CACHE-INSTANTIATES-GOAL))
      (CL:AND *DONTUSEDEFAULTKNOWLEDGE?*
       (CL:OR
        (CL:EQ (%CONTROL-FRAME.TRUTH-VALUE GOAL)
         DEFAULT-TRUE-TRUTH-VALUE)
        (CL:EQ (%CONTROL-FRAME.TRUTH-VALUE GOAL)
         DEFAULT-FALSE-TRUTH-VALUE)))
      (CL:AND *RECORD-JUSTIFICATIONS?*
       (CL:EQ (%ATOMIC-GOAL-CACHE.JUSTIFICATION CACHELIST) NULL))))
    DO (CL:SETQ CACHELIST (%ATOMIC-GOAL-CACHE.NEXT CACHELIST)))
   (CL:COND
    ((CL:NOT (CL:EQ CACHELIST NULL))
     (CL:SETF (%ATOMIC-GOAL-CACHE-ITERATOR.VALUE SELF) CACHELIST)
     (CL:SETF (%ATOMIC-GOAL-CACHE-ITERATOR.CACHE-LIST SELF)
      (%ATOMIC-GOAL-CACHE.NEXT CACHELIST))
     CL:T)
    (CL:T CL:NIL))))

(CL:DEFUN HELP-STARTUP-GOAL-CACHES1 ()
  (CL:PROGN
   (CL:SETQ SGT-GOAL-CACHES-LOGIC-GOAL-CACHE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GOAL-CACHE" NULL 1))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-CACHED-BINDINGS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CACHED-BINDINGS" NULL 0))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-TIMESTAMP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TIMESTAMP" NULL 0))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-PROPOSITION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PROPOSITION" NULL 0))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-REVERSE-POLARITY?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "REVERSE-POLARITY?" NULL 0))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-CACHE-CONTEXT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CACHE-CONTEXT" NULL 0))
   (CL:SETQ KWD-GOAL-CACHES-GOAL-CACHES
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GOAL-CACHES" NULL 2))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-GOAL-CACHE-TABLE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GOAL-CACHE-TABLE" NULL 0))
   (CL:SETQ KWD-GOAL-CACHES-ISA
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ISA" NULL 2))
   (CL:SETQ KWD-GOAL-CACHES-PREDICATE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PREDICATE" NULL 2))
   (CL:SETQ KWD-GOAL-CACHES-FUNCTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FUNCTION" NULL 2))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-NEGATED-GOAL-CACHE-TABLE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NEGATED-GOAL-CACHE-TABLE" NULL 0))
   (CL:SETQ SGT-GOAL-CACHES-STELLA-SURROGATE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SURROGATE"
     (GET-STELLA-MODULE "/STELLA" CL:T) 1))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-GOAL-CACHE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GOAL-CACHE" NULL 0))
   (CL:SETQ KWD-GOAL-CACHES-DUPLICATE-GOALS-WITH-CACHING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DUPLICATE-GOALS-WITH-CACHING" NULL
     2))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-CACHED-BINDINGS-ITERATOR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CACHED-BINDINGS-ITERATOR" NULL 0))
   (CL:SETQ KWD-GOAL-CACHES-FAILURE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FAILURE" NULL 2))
   (CL:SETQ KWD-GOAL-CACHES-FINAL-SUCCESS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FINAL-SUCCESS" NULL 2))
   (CL:SETQ KWD-GOAL-CACHES-CONTINUING-SUCCESS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTINUING-SUCCESS" NULL 2))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-INFERENCE-CACHE-OF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INFERENCE-CACHE-OF" NULL 0))
   (CL:SETQ KWD-GOAL-CACHES-DUPLICATE-GOALS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DUPLICATE-GOALS" NULL 2))
   (CL:SETQ SGT-GOAL-CACHES-LOGIC-ATOMIC-GOAL-CACHE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ATOMIC-GOAL-CACHE" NULL 1))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-GOAL-CONTEXT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GOAL-CONTEXT" NULL 0))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-TRUTH-VALUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TRUTH-VALUE" NULL 0))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-BINDINGS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BINDINGS" NULL 0))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-JUSTIFICATION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JUSTIFICATION" NULL 0))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-POSITIVE-SCORE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "POSITIVE-SCORE" NULL 0))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-NEGATIVE-SCORE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NEGATIVE-SCORE" NULL 0))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-PREVIOUS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PREVIOUS" NULL 0))
   (CL:SETQ SYM-GOAL-CACHES-STELLA-NEXT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NEXT"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ KWD-GOAL-CACHES-REALISTIC
    (INTERN-RIGID-SYMBOL-WRT-MODULE "REALISTIC" NULL 2))
   (CL:SETQ SGT-GOAL-CACHES-LOGIC-PATTERN-VARIABLE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PATTERN-VARIABLE" NULL 1))
   (CL:SETQ SGT-GOAL-CACHES-LOGIC-SKOLEM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SKOLEM" NULL 1))
   (CL:SETQ SGT-GOAL-CACHES-LOGIC-LOGIC-OBJECT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LOGIC-OBJECT" NULL 1))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-GOAL-CACHE-LIST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GOAL-CACHE-LIST" NULL 0))
   (CL:SETQ KWD-GOAL-CACHES-GOAL-INSTANTIATES-CACHE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GOAL-INSTANTIATES-CACHE" NULL 2))
   (CL:SETQ KWD-GOAL-CACHES-CACHE-INSTANTIATES-GOAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CACHE-INSTANTIATES-GOAL" NULL 2))
   (CL:SETQ KWD-GOAL-CACHES-ATOMIC-GOAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ATOMIC-GOAL" NULL 2))
   (CL:SETQ SGT-GOAL-CACHES-PL-KERNEL-KB-FRAME-PREDICATE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FRAME-PREDICATE"
     (GET-STELLA-MODULE "/PL-KERNEL-KB" CL:T) 1))
   (CL:SETQ KWD-GOAL-CACHES-EXECUTE-QUERY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "EXECUTE-QUERY" NULL 2))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-CHECK-FOR-CACHED-GOALS?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CHECK-FOR-CACHED-GOALS?" NULL 0))
   (CL:SETQ KWD-GOAL-CACHES-SUCCESS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SUCCESS" NULL 2))
   (CL:SETQ SGT-GOAL-CACHES-LOGIC-ATOMIC-GOAL-CACHE-ITERATOR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ATOMIC-GOAL-CACHE-ITERATOR" NULL
     1))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-GOAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GOAL" NULL 0))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-CACHE-LIST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CACHE-LIST" NULL 0))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-STARTUP-GOAL-CACHES
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-GOAL-CACHES" NULL 0))
   (CL:SETQ SYM-GOAL-CACHES-STELLA-METHOD-STARTUP-CLASSNAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))))

(CL:DEFUN STARTUP-GOAL-CACHES ()
  (CL:LET*
   ((*MODULE* (GET-STELLA-MODULE "/LOGIC" (> *STARTUP-TIME-PHASE* 1)))
    (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2)
    (HELP-STARTUP-GOAL-CACHES1))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 4)
    (CL:SETQ *SUCCEEDED-GOALS-CACHE* (NEW-VECTOR 1541))
    (CL:SETQ *FAILED-GOALS-CACHE* (NEW-VECTOR 1541))
    (CL:SETQ *UNIFICATION-VECTOR-1* (NEW-VECTOR 10))
    (CL:SETQ *UNIFICATION-VECTOR-2* (NEW-VECTOR 10)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 5)
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "GOAL-CACHE"
        "(DEFCLASS GOAL-CACHE (STANDARD-OBJECT) :DOCUMENTATION \"Cache of output bindings derived for a particular goal
and set of input bindings.\" :SLOTS ((CACHED-BINDINGS :TYPE (LIST OF GOAL-BINDINGS) :ALLOCATION :EMBEDDED) (TIMESTAMP :TYPE TIMESTAMP) (PROPOSITION :TYPE PROPOSITION) (REVERSE-POLARITY? :TYPE BOOLEAN) (CACHE-CONTEXT :TYPE CONTEXT)))")))
     (CL:SETF (%CLASS.CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-GOAL-CACHE))
     (CL:SETF (%CLASS.CLASS-SLOT-ACCESSOR-CODE CLASS)
      (CL:FUNCTION ACCESS-GOAL-CACHE-SLOT-VALUE)))
    (DEFINE-STELLA-TYPE-FROM-STRINGIFIED-SOURCE
     "(DEFTYPE GOAL-CACHE-TABLE (KEY-VALUE-LIST OF CONTEXT GOAL-CACHE))")
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "ATOMIC-GOAL-CACHE"
        "(DEFCLASS ATOMIC-GOAL-CACHE (STANDARD-OBJECT) :DOCUMENTATION \"Cache data structure to store the result of proving an atomic
and possibly open `proposition' relative to a set of variable `bindings'.\" :SLOTS ((GOAL-CONTEXT :TYPE CONTEXT) (TIMESTAMP :TYPE TIMESTAMP) (TRUTH-VALUE :TYPE TRUTH-VALUE) (REVERSE-POLARITY? :TYPE BOOLEAN) (PROPOSITION :TYPE PROPOSITION) (BINDINGS :TYPE GOAL-BINDINGS) (JUSTIFICATION :TYPE JUSTIFICATION) (POSITIVE-SCORE :TYPE PARTIAL-MATCH-SCORE) (NEGATIVE-SCORE :TYPE PARTIAL-MATCH-SCORE) (PREVIOUS :TYPE ATOMIC-GOAL-CACHE) (NEXT :TYPE ATOMIC-GOAL-CACHE)) :PRINT-FORM (PRINT-ATOMIC-GOAL-CACHE SELF STREAM))")))
     (CL:SETF (%CLASS.CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-ATOMIC-GOAL-CACHE))
     (CL:SETF (%CLASS.CLASS-SLOT-ACCESSOR-CODE CLASS)
      (CL:FUNCTION ACCESS-ATOMIC-GOAL-CACHE-SLOT-VALUE)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE
        "ATOMIC-GOAL-CACHE-ITERATOR"
        "(DEFCLASS ATOMIC-GOAL-CACHE-ITERATOR (ITERATOR) :PARAMETERS ((ANY-VALUE :TYPE ATOMIC-GOAL-CACHE)) :SLOTS ((GOAL :TYPE CONTROL-FRAME) (CACHE-LIST :TYPE ATOMIC-GOAL-CACHE)))")))
     (CL:SETF (%CLASS.CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-ATOMIC-GOAL-CACHE-ITERATOR))
     (CL:SETF (%CLASS.CLASS-SLOT-ACCESSOR-CODE CLASS)
      (CL:FUNCTION ACCESS-ATOMIC-GOAL-CACHE-ITERATOR-SLOT-VALUE))))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (DEFINE-FUNCTION-OBJECT "TRACE-GOAL-CACHE"
     "(DEFUN TRACE-GOAL-CACHE ((STRING STRING) (FRAME CONTROL-FRAME)))"
     (CL:FUNCTION TRACE-GOAL-CACHE) NULL)
    (DEFINE-FUNCTION-OBJECT "REMOVE-OBSOLETE-GOAL-CACHES"
     "(DEFUN REMOVE-OBSOLETE-GOAL-CACHES ((TABLE (KEY-VALUE-LIST OF CONTEXT GOAL-CACHE))))"
     (CL:FUNCTION REMOVE-OBSOLETE-GOAL-CACHES) NULL)
    (DEFINE-EXTERNAL-SLOT-FROM-STRINGIFIED-SOURCE
     "(DEFSLOT NAMED-DESCRIPTION GOAL-CACHE-TABLE :TYPE GOAL-CACHE-TABLE :DOCUMENTATION \"Allows attachment of goal caches to classes or slots.\" :ALLOCATION :DYNAMIC)")
    (DEFINE-EXTERNAL-SLOT-FROM-STRINGIFIED-SOURCE
     "(DEFSLOT NAMED-DESCRIPTION NEGATED-GOAL-CACHE-TABLE :TYPE GOAL-CACHE-TABLE :DOCUMENTATION \"Allows attachment of goal caches to classes or slots.\" :ALLOCATION :DYNAMIC)")
    (DEFINE-FUNCTION-OBJECT "YIELD-GOAL-BINDINGS"
     "(DEFUN (YIELD-GOAL-BINDINGS GOAL-BINDINGS) ((GOAL PROPOSITION)))"
     (CL:FUNCTION YIELD-GOAL-BINDINGS) NULL)
    (DEFINE-FUNCTION-OBJECT "FIND-GOAL-CACHE-TABLE"
     "(DEFUN (FIND-GOAL-CACHE-TABLE GOAL-CACHE-TABLE) ((GOAL PROPOSITION)))"
     (CL:FUNCTION FIND-GOAL-CACHE-TABLE) NULL)
    (DEFINE-FUNCTION-OBJECT "CREATE-GOAL-CACHE?"
     "(DEFUN (CREATE-GOAL-CACHE? BOOLEAN) ((FRAME CONTROL-FRAME)))"
     (CL:FUNCTION CREATE-GOAL-CACHE?) NULL)
    (DEFINE-FUNCTION-OBJECT "LOOKUP-GOAL-CACHE"
     "(DEFUN (LOOKUP-GOAL-CACHE GOAL-CACHE) ((TABLE GOAL-CACHE-TABLE)))"
     (CL:FUNCTION LOOKUP-GOAL-CACHE) NULL)
    (DEFINE-FUNCTION-OBJECT "FIND-GOAL-CACHE"
     "(DEFUN (FIND-GOAL-CACHE GOAL-CACHE) ((FRAME CONTROL-FRAME)))"
     (CL:FUNCTION FIND-GOAL-CACHE) NULL)
    (DEFINE-FUNCTION-OBJECT "UPDATE-GOAL-CACHE"
     "(DEFUN UPDATE-GOAL-CACHE ((FRAME CONTROL-FRAME) (SUCCESS? BOOLEAN)))"
     (CL:FUNCTION UPDATE-GOAL-CACHE) NULL)
    (DEFINE-FUNCTION-OBJECT "YIELD-RELATIVE-GOAL-BINDINGS"
     "(DEFUN (YIELD-RELATIVE-GOAL-BINDINGS GOAL-BINDINGS) ((FRAME CONTROL-FRAME)))"
     (CL:FUNCTION YIELD-RELATIVE-GOAL-BINDINGS) NULL)
    (DEFINE-FUNCTION-OBJECT "CONTINUE-CACHED-BINDINGS-PROOF"
     "(DEFUN (CONTINUE-CACHED-BINDINGS-PROOF KEYWORD) ((FRAME CONTROL-FRAME) (LASTMOVE KEYWORD)))"
     (CL:FUNCTION CONTINUE-CACHED-BINDINGS-PROOF) NULL)
    (DEFINE-FUNCTION-OBJECT "TOP-LEVEL-QUERY-CONTEXT?"
     "(DEFUN (TOP-LEVEL-QUERY-CONTEXT? BOOLEAN) ((SELF CONTEXT)))"
     (CL:FUNCTION TOP-LEVEL-QUERY-CONTEXT?) NULL)
    (DEFINE-FUNCTION-OBJECT "CACHE-QUERY-RESULTS?"
     "(DEFUN (CACHE-QUERY-RESULTS? BOOLEAN) () :GLOBALLY-INLINE? TRUE (RETURN (AND (OR *CACHE-SUCCEEDED-GOALS?* *CACHE-FAILED-GOALS?*) (EQL? *DUPLICATE-SUBGOAL-STRATEGY* :DUPLICATE-GOALS) (NOT (PARTIAL-MATCH-MODE?)))))"
     (CL:FUNCTION CACHE-QUERY-RESULTS?) NULL)
    (DEFINE-FUNCTION-OBJECT "TOGGLE-GOAL-CACHING"
     "(DEFUN (TOGGLE-GOAL-CACHING STRING) ())"
     (CL:FUNCTION TOGGLE-GOAL-CACHING) NULL)
    (DEFINE-FUNCTION-OBJECT "PRINT-ATOMIC-GOAL-CACHE"
     "(DEFUN PRINT-ATOMIC-GOAL-CACHE ((SELF ATOMIC-GOAL-CACHE) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION PRINT-ATOMIC-GOAL-CACHE) NULL)
    (DEFINE-FUNCTION-OBJECT "CLEAR-QUERY-RESULTS-CACHE"
     "(DEFUN CLEAR-QUERY-RESULTS-CACHE ())"
     (CL:FUNCTION CLEAR-QUERY-RESULTS-CACHE) NULL)
    (DEFINE-FUNCTION-OBJECT "PRINT-QUERY-RESULTS-CACHE"
     "(DEFUN PRINT-QUERY-RESULTS-CACHE ((LIMIT INTEGER)))"
     (CL:FUNCTION PRINT-QUERY-RESULTS-CACHE) NULL)
    (DEFINE-FUNCTION-OBJECT "SUCCEEDED-GOAL-INDEX"
     "(DEFUN (SUCCEEDED-GOAL-INDEX INTEGER) ((FRAME CONTROL-FRAME)) :GLOBALLY-INLINE? TRUE (RETURN (HASHMOD (GOAL-HASH-CODE FRAME) 1541)))"
     (CL:FUNCTION SUCCEEDED-GOAL-INDEX) NULL)
    (DEFINE-FUNCTION-OBJECT "FAILED-GOAL-INDEX"
     "(DEFUN (FAILED-GOAL-INDEX INTEGER) ((FRAME CONTROL-FRAME)) :GLOBALLY-INLINE? TRUE (RETURN (HASHMOD (GOAL-HASH-CODE FRAME) 1541)))"
     (CL:FUNCTION FAILED-GOAL-INDEX) NULL)
    (DEFINE-FUNCTION-OBJECT "GOAL-HASH-CODE"
     "(DEFUN (GOAL-HASH-CODE INTEGER) ((FRAME CONTROL-FRAME)))"
     (CL:FUNCTION GOAL-HASH-CODE) NULL)
    (DEFINE-FUNCTION-OBJECT "HASH-UNBOUND-GOAL-VARIABLE"
     "(DEFUN (HASH-UNBOUND-GOAL-VARIABLE INTEGER) ((VAR PATTERN-VARIABLE) (ARGUMENTS VECTOR) (CODE INTEGER)))"
     (CL:FUNCTION HASH-UNBOUND-GOAL-VARIABLE) NULL)
    (DEFINE-FUNCTION-OBJECT "HASH-GOAL-ARGUMENT"
     "(DEFUN (HASH-GOAL-ARGUMENT INTEGER) ((ARG OBJECT) (CODE INTEGER)))"
     (CL:FUNCTION HASH-GOAL-ARGUMENT) NULL)
    (DEFINE-EXTERNAL-SLOT-FROM-STRINGIFIED-SOURCE
     "(DEFSLOT NAMED-DESCRIPTION GOAL-CACHE-LIST :TYPE ATOMIC-GOAL-CACHE :DOCUMENTATION \"Points at the beginning of a chain of cached values
for some named description\" :ALLOCATION :DYNAMIC)")
    (DEFINE-FUNCTION-OBJECT "CACHED-GOAL-OPERATOR"
     "(DEFUN (CACHED-GOAL-OPERATOR SURROGATE) ((GOAL PROPOSITION)))"
     (CL:FUNCTION CACHED-GOAL-OPERATOR) NULL)
    (DEFINE-FUNCTION-OBJECT "GET-GOAL-CACHE-LIST"
     "(DEFUN (GET-GOAL-CACHE-LIST ATOMIC-GOAL-CACHE) ((GOAL PROPOSITION)))"
     (CL:FUNCTION GET-GOAL-CACHE-LIST) NULL)
    (DEFINE-FUNCTION-OBJECT "SET-GOAL-CACHE-LIST"
     "(DEFUN (SET-GOAL-CACHE-LIST ATOMIC-GOAL-CACHE) ((GOAL PROPOSITION) (FIRSTCACHE ATOMIC-GOAL-CACHE)))"
     (CL:FUNCTION SET-GOAL-CACHE-LIST) NULL)
    (DEFINE-FUNCTION-OBJECT "CREATE-ATOMIC-GOAL-CACHE"
     "(DEFUN (CREATE-ATOMIC-GOAL-CACHE ATOMIC-GOAL-CACHE) ((FRAME CONTROL-FRAME) (CACHE ATOMIC-GOAL-CACHE) (SUCCESS? BOOLEAN)))"
     (CL:FUNCTION CREATE-ATOMIC-GOAL-CACHE) NULL)
    (DEFINE-FUNCTION-OBJECT "CACHE-MATCHES-GOAL?"
     "(DEFUN (CACHE-MATCHES-GOAL? BOOLEAN) ((CACHE ATOMIC-GOAL-CACHE) (GOAL CONTROL-FRAME) (SUCCESS? BOOLEAN) (MODE KEYWORD)))"
     (CL:FUNCTION CACHE-MATCHES-GOAL?) NULL)
    (DEFINE-FUNCTION-OBJECT "GOAL-INSTANTIATES-CACHE?"
     "(DEFUN (GOAL-INSTANTIATES-CACHE? BOOLEAN) ((GOAL CONTROL-FRAME) (CACHE ATOMIC-GOAL-CACHE) (SUCCESS? BOOLEAN)) :GLOBALLY-INLINE? TRUE (RETURN (CACHE-MATCHES-GOAL? CACHE GOAL SUCCESS? :GOAL-INSTANTIATES-CACHE)))"
     (CL:FUNCTION GOAL-INSTANTIATES-CACHE?) NULL)
    (DEFINE-FUNCTION-OBJECT "CACHE-INSTANTIATES-GOAL?"
     "(DEFUN (CACHE-INSTANTIATES-GOAL? BOOLEAN) ((CACHE ATOMIC-GOAL-CACHE) (GOAL CONTROL-FRAME) (SUCCESS? BOOLEAN)) :GLOBALLY-INLINE? TRUE (RETURN (CACHE-MATCHES-GOAL? CACHE GOAL SUCCESS? :CACHE-INSTANTIATES-GOAL)))"
     (CL:FUNCTION CACHE-INSTANTIATES-GOAL?) NULL)
    (DEFINE-FUNCTION-OBJECT "DONT-CACHE-GOAL-FAILURE-BETWEEN-FRAMES"
     "(DEFUN DONT-CACHE-GOAL-FAILURE-BETWEEN-FRAMES ((TOPFRAME CONTROL-FRAME) (BOTTOMFRAME CONTROL-FRAME)))"
     (CL:FUNCTION DONT-CACHE-GOAL-FAILURE-BETWEEN-FRAMES) NULL)
    (DEFINE-FUNCTION-OBJECT "CACHE-GOAL"
     "(DEFUN CACHE-GOAL ((FRAME CONTROL-FRAME) (SUCCESS? BOOLEAN) (KEEPFRAME? BOOLEAN) (CLOCKTICKS INTEGER)))"
     (CL:FUNCTION CACHE-GOAL) NULL)
    (DEFINE-FUNCTION-OBJECT "FIND-CACHED-GOAL"
     "(DEFUN (FIND-CACHED-GOAL ATOMIC-GOAL-CACHE) ((FRAME CONTROL-FRAME) (SUCCESSORFAILURE KEYWORD)))"
     (CL:FUNCTION FIND-CACHED-GOAL) NULL)
    (DEFINE-FUNCTION-OBJECT "ALL-CACHED-PROPOSITIONS"
     "(DEFUN (ALL-CACHED-PROPOSITIONS ATOMIC-GOAL-CACHE-ITERATOR) ((GOAL CONTROL-FRAME)))"
     (CL:FUNCTION ALL-CACHED-PROPOSITIONS) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD (NEXT? BOOLEAN) ((SELF ATOMIC-GOAL-CACHE-ITERATOR)))"
     (CL:FUNCTION NEXT?) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-GOAL-CACHES"
     "(DEFUN STARTUP-GOAL-CACHES () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-GOAL-CACHES) NULL)
    (CL:LET*
     ((FUNCTION
       (LOOKUP-FUNCTION SYM-GOAL-CACHES-LOGIC-STARTUP-GOAL-CACHES)))
     (SET-DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
      SYM-GOAL-CACHES-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "_StartupGoalCaches") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *CACHE-SUCCEEDED-GOALS?* BOOLEAN TRUE)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *CACHE-FAILED-GOALS?* BOOLEAN TRUE)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *CACHE-GOAL-QUANTUM* INTEGER 5 :DOCUMENTATION \"Only goals whose success or failure took at least this
number of query clock ticks will be cached.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *SUCCEEDED-GOALS-CACHE* (VECTOR OF ATOMIC-GOAL-CACHE) (NEW VECTOR :ARRAY-SIZE 1541))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *FAILED-GOALS-CACHE* (VECTOR OF ATOMIC-GOAL-CACHE) (NEW VECTOR :ARRAY-SIZE 1541))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *UNIFICATION-VECTOR-1* VECTOR (NEW VECTOR :ARRAY-SIZE 10))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *UNIFICATION-VECTOR-2* VECTOR (NEW VECTOR :ARRAY-SIZE 10))"))))
