;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

#|--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1997-2000              | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied "AS IS",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SGT-BACKLINKS-LOGIC-PATTERN-VARIABLE NULL)
(CL:DEFVAR KWD-BACKLINKS-NON-PAGING NULL)
(CL:DEFVAR KWD-BACKLINKS-DEPENDENTS NULL)
(CL:DEFVAR SGT-BACKLINKS-LOGIC-INTEGER-LOGIC-WRAPPER NULL)
(CL:DEFVAR SGT-BACKLINKS-LOGIC-FLOAT-LOGIC-WRAPPER NULL)
(CL:DEFVAR SGT-BACKLINKS-LOGIC-STRING-LOGIC-WRAPPER NULL)
(CL:DEFVAR SYM-BACKLINKS-LOGIC-DEPENDENT-PROPOSITIONS-INDEX NULL)
(CL:DEFVAR SGT-BACKLINKS-LOGIC-LOGIC-OBJECT NULL)
(CL:DEFVAR SGT-BACKLINKS-STELLA-THING NULL)
(CL:DEFVAR KWD-BACKLINKS-ISA NULL)
(CL:DEFVAR KWD-BACKLINKS-BUCKET NULL)
(CL:DEFVAR KWD-BACKLINKS-CONSTANT NULL)
(CL:DEFVAR SGT-BACKLINKS-LOGIC-DESCRIPTION NULL)
(CL:DEFVAR SYM-BACKLINKS-LOGIC-COMPLEMENT-DESCRIPTION NULL)
(CL:DEFVAR SGT-BACKLINKS-LOGIC-SKOLEM NULL)
(CL:DEFVAR SGT-BACKLINKS-LOGIC-PROPOSITION NULL)
(CL:DEFVAR SGT-BACKLINKS-STELLA-INTEGER NULL)
(CL:DEFVAR SGT-BACKLINKS-STELLA-FLOAT NULL)
(CL:DEFVAR SGT-BACKLINKS-STELLA-STRING NULL)
(CL:DEFVAR SGT-BACKLINKS-STELLA-LITERAL-WRAPPER NULL)
(CL:DEFVAR SGT-BACKLINKS-STELLA-LITERAL NULL)
(CL:DEFVAR SGT-BACKLINKS-PL-KERNEL-KB-SUBSET-OF NULL)
(CL:DEFVAR SYM-BACKLINKS-LOGIC-MASTER-PROPOSITION NULL)
(CL:DEFVAR KWD-BACKLINKS-IMPLIES NULL)
(CL:DEFVAR KWD-BACKLINKS-FORWARD NULL)
(CL:DEFVAR SYM-BACKLINKS-LOGIC-SUBSUMPTION-LINK? NULL)
(CL:DEFVAR SGT-BACKLINKS-LOGIC-NAMED-DESCRIPTION NULL)
(CL:DEFVAR KWD-BACKLINKS-PREDICATE NULL)
(CL:DEFVAR KWD-BACKLINKS-FUNCTION NULL)
(CL:DEFVAR KWD-BACKLINKS-EQUIVALENT NULL)
(CL:DEFVAR KWD-BACKLINKS-PAGING NULL)
(CL:DEFVAR KWD-BACKLINKS-RELATION-EXTENSION NULL)
(CL:DEFVAR SYM-BACKLINKS-LOGIC-HYPOTHESIZED-INSTANCE? NULL)
(CL:DEFVAR SGT-BACKLINKS-LOGIC-RELATION-IMPLIES-RELATION?-MEMO-TABLE-000 NULL)
(CL:DEFVAR SGT-BACKLINKS-LOGIC-DESCRIPTION-IMPLIES-DESCRIPTION?-MEMO-TABLE-000 NULL)
(CL:DEFVAR SYM-BACKLINKS-LOGIC-SECONDARY-STORAGE-PROPOSITIONS NULL)
(CL:DEFVAR SYM-BACKLINKS-LOGIC-SECONDARY-STORAGE-INSTANCES NULL)
(CL:DEFVAR KWD-BACKLINKS-CONTEXT-PROPOSITIONS NULL)
(CL:DEFVAR KWD-BACKLINKS-CONTEXT-INSTANCES NULL)
(CL:DEFVAR SYM-BACKLINKS-LOGIC-STARTUP-BACKLINKS NULL)
(CL:DEFVAR SYM-BACKLINKS-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STARTUP-TIME-PHASE* *CONTEXT* *MEMOIZATION-ENABLED?*
  MEMOIZED-NULL-VALUE *REVERSEPOLARITY?* *LOADINGREGENERABLEOBJECTS?*
  NIL-PAGING-INDEX NIL-LIST FALSE-WRAPPER TRUE-WRAPPER
  NIL-NON-PAGING-INDEX STANDARD-OUTPUT EOL *MODULE*))

;;; (DEFUN (TYPE-HAS-BACKLINKS? BOOLEAN) ...)

(CL:DEFUN TYPE-HAS-BACKLINKS? (TYPE)
  (CL:NOT (LITERAL-TYPE? TYPE)))

;;; (DEFUN (CREATE-BACKLINKS-INDEX BACKLINKS-INDEX) ...)

(CL:DEFUN CREATE-BACKLINKS-INDEX (SELF)
  (CL:LET* ((INDEX (NEW-BACKLINKS-INDEX)))
   (CL:SETF (%BACKLINKS-INDEX.DEPENDENT-PROPOSITIONS-LIST INDEX)
    (CL:IF (ISA? SELF SGT-BACKLINKS-LOGIC-PATTERN-VARIABLE)
     (CREATE-SEQUENCE-INDEX KWD-BACKLINKS-NON-PAGING NIL)
     (CREATE-SEQUENCE-INDEX *MODULE*
      (LIST* KWD-BACKLINKS-DEPENDENTS SELF NIL))))
   INDEX))

;;; (DEFUN (GET-BACKLINKS-INDEX BACKLINKS-INDEX) ...)

(CL:DEFUN GET-BACKLINKS-INDEX (SELF)
  (CL:WHEN (CL:EQ SELF NULL) (CL:RETURN-FROM GET-BACKLINKS-INDEX NULL))
  (CL:LET* ((TEST-VALUE-001 (SAFE-PRIMARY-TYPE SELF)))
   (CL:COND
    ((SUBTYPE-OF? TEST-VALUE-001 SGT-BACKLINKS-LOGIC-LOGIC-OBJECT)
     (CL:PROGN
      (CL:LET* ((INDEX (%LOGIC-OBJECT.DEPENDENT-PROPOSITIONS-INDEX SELF)))
       (CL:WHEN (CL:NOT (CL:EQ INDEX NULL))
        (CL:RETURN-FROM GET-BACKLINKS-INDEX INDEX))
       (CL:SETQ INDEX (CREATE-BACKLINKS-INDEX SELF))
       (CL:SETF (%LOGIC-OBJECT.DEPENDENT-PROPOSITIONS-INDEX SELF) INDEX)
       INDEX)))
    ((SUBTYPE-OF-WRAPPER? TEST-VALUE-001)
     (CL:PROGN
      (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE SELF)))
       (CL:COND
        ((SUBTYPE-OF? TEST-VALUE-000
          SGT-BACKLINKS-LOGIC-INTEGER-LOGIC-WRAPPER)
         (CL:PROGN
          (%INTEGER-LOGIC-WRAPPER.DEPENDENT-PROPOSITIONS-INDEX SELF)))
        ((SUBTYPE-OF? TEST-VALUE-000
          SGT-BACKLINKS-LOGIC-FLOAT-LOGIC-WRAPPER)
         (CL:PROGN
          (%FLOAT-LOGIC-WRAPPER.DEPENDENT-PROPOSITIONS-INDEX SELF)))
        ((SUBTYPE-OF? TEST-VALUE-000
          SGT-BACKLINKS-LOGIC-STRING-LOGIC-WRAPPER)
         (CL:PROGN
          (%STRING-LOGIC-WRAPPER.DEPENDENT-PROPOSITIONS-INDEX SELF)))
        (CL:T NULL)))))
    ((SUBTYPE-OF? TEST-VALUE-001 SGT-BACKLINKS-STELLA-THING)
     (CL:PROGN
      (CL:LET*
       ((INDEX
         (DYNAMIC-SLOT-VALUE (%THING.DYNAMIC-SLOTS SELF)
          SYM-BACKLINKS-LOGIC-DEPENDENT-PROPOSITIONS-INDEX NULL)))
       (CL:WHEN (CL:NOT (CL:EQ INDEX NULL))
        (CL:RETURN-FROM GET-BACKLINKS-INDEX INDEX))
       (CL:SETQ INDEX (CREATE-BACKLINKS-INDEX SELF))
       (SET-DYNAMIC-SLOT-VALUE (%THING.DYNAMIC-SLOTS SELF)
        SYM-BACKLINKS-LOGIC-DEPENDENT-PROPOSITIONS-INDEX INDEX NULL)
       INDEX)))
    (CL:T NULL))))

;;; (DEFGLOBAL *SPECIALIZED-BACKLINKS-CROSSOVER-POINT* ...)

(CL:PROGN (CL:DEFVAR *SPECIALIZED-BACKLINKS-CROSSOVER-POINT* 10 "When 'dependent-propositions-list' gets this long in a
backlinks index, then we create a hash table index and other
specialized indices.") (CL:DECLAIM (CL:TYPE CL:FIXNUM *SPECIALIZED-BACKLINKS-CROSSOVER-POINT*)))

;;; (DEFUN ADD-DEPENDENT-PROPOSITION-TO-SPECIALIZED-INDEX ...)

(CL:DEFUN ADD-DEPENDENT-PROPOSITION-TO-SPECIALIZED-INDEX (INDEX PROPOSITION ARGUMENT)
  (CL:LET* ((TABLE (%BACKLINKS-INDEX.PREDICATE-PROPOSITIONS-TABLE INDEX)))
   (CL:WHEN (CL:EQ TABLE NULL) (CL:SETQ TABLE (NEW-HASH-TABLE))
    (CL:SETF (%BACKLINKS-INDEX.PREDICATE-PROPOSITIONS-TABLE INDEX) TABLE)
    (CL:LET*
     ((PROP NULL)
      (ITER-000
       (ALLOCATE-ITERATOR
        (%BACKLINKS-INDEX.DEPENDENT-PROPOSITIONS-LIST INDEX))))
     (CL:LOOP WHILE (NEXT? ITER-000) DO
      (CL:SETQ PROP (%ITERATOR.VALUE ITER-000))
      (ADD-DEPENDENT-PROPOSITION-TO-SPECIALIZED-INDEX INDEX PROP
       ARGUMENT))))
   (CL:COND
    ((CL:EQ (%PROPOSITION.KIND PROPOSITION) KWD-BACKLINKS-ISA)
     (CL:WHEN
      (CL:EQ (%BACKLINKS-INDEX.DEPENDENT-ISA-PROPOSITIONS-LIST INDEX)
       NULL)
      (CL:SETF (%BACKLINKS-INDEX.DEPENDENT-ISA-PROPOSITIONS-LIST INDEX)
       (CREATE-SEQUENCE-INDEX *MODULE*
        (LIST* KWD-BACKLINKS-ISA ARGUMENT NIL))))
     (INSERT (%BACKLINKS-INDEX.DEPENDENT-ISA-PROPOSITIONS-LIST INDEX)
      PROPOSITION))
    (CL:T
     (CL:LET*
      ((SURROGATE (%PROPOSITION.OPERATOR PROPOSITION)) (BUCKET NULL))
      (CL:SETQ BUCKET (LOOKUP TABLE SURROGATE))
      (CL:WHEN (CL:EQ BUCKET NULL)
       (CL:SETQ BUCKET
        (CREATE-SEQUENCE-INDEX *MODULE*
         (LIST* KWD-BACKLINKS-BUCKET ARGUMENT (CONS SURROGATE NIL))))
       (INSERT-AT TABLE SURROGATE BUCKET))
      (INSERT BUCKET PROPOSITION))))))

;;; (DEFUN HELP-ADD-DEPENDENT-PROPOSITION ...)

(CL:DEFUN HELP-ADD-DEPENDENT-PROPOSITION (INDEX PROPOSITION ARGUMENT)
  (CL:LET*
   ((ALLDEPENDENTPROPOSITIONS
     (%BACKLINKS-INDEX.DEPENDENT-PROPOSITIONS-LIST INDEX))
    (TABLE (%BACKLINKS-INDEX.PREDICATE-PROPOSITIONS-TABLE INDEX)))
   (CL:WHEN (CL:EQ TABLE NULL)
    (CL:WHEN
     (CL:< (ESTIMATED-LENGTH ALLDEPENDENTPROPOSITIONS)
      *SPECIALIZED-BACKLINKS-CROSSOVER-POINT*)
     (INSERT ALLDEPENDENTPROPOSITIONS PROPOSITION)
     (CL:RETURN-FROM HELP-ADD-DEPENDENT-PROPOSITION)))
   (ADD-DEPENDENT-PROPOSITION-TO-SPECIALIZED-INDEX INDEX PROPOSITION
    ARGUMENT)
   (INSERT ALLDEPENDENTPROPOSITIONS PROPOSITION)))

;;; (DEFUN ADD-DEPENDENT-PROPOSITION-LINK ...)

(CL:DEFUN ADD-DEPENDENT-PROPOSITION-LINK (SELF PROPOSITION)
  (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE SELF)))
   (CL:COND
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-BACKLINKS-LOGIC-PROPOSITION)
     (CL:PROGN
      (CL:COND ((CL:EQ (%PROPOSITION.KIND SELF) KWD-BACKLINKS-CONSTANT))
       (CL:T
        (CL:LET* ((INDEX (%PROPOSITION.DEPENDENT-PROPOSITIONS SELF)))
         (CL:WHEN (CL:EQ INDEX NIL-NON-PAGING-INDEX)
          (CL:SETQ INDEX
           (CREATE-SEQUENCE-INDEX KWD-BACKLINKS-NON-PAGING NIL))
          (CL:SETF (%PROPOSITION.DEPENDENT-PROPOSITIONS SELF) INDEX))
         (INSERT (%PROPOSITION.DEPENDENT-PROPOSITIONS SELF)
          PROPOSITION))))))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-BACKLINKS-LOGIC-LOGIC-OBJECT)
     (CL:PROGN
      (CL:WHEN
       (CL:AND (DESCRIPTION-MODE?)
        (ISA? SELF SGT-BACKLINKS-LOGIC-DESCRIPTION)
        (CL:OR (NAMED-DESCRIPTION? SELF)
         (CL:NOT
          (CL:EQ
           (DYNAMIC-SLOT-VALUE (%DESCRIPTION.DYNAMIC-SLOTS SELF)
            SYM-BACKLINKS-LOGIC-COMPLEMENT-DESCRIPTION NULL)
           NULL))))
       (CL:RETURN-FROM ADD-DEPENDENT-PROPOSITION-LINK))
      (CL:LET* ((INDEX (GET-BACKLINKS-INDEX SELF)))
       (CL:WHEN
        (CL:AND (ISA? SELF SGT-BACKLINKS-LOGIC-SKOLEM)
         (CL:NOT (ISA? SELF SGT-BACKLINKS-LOGIC-PATTERN-VARIABLE))
         (DESCRIPTION-MODE?))
        (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
         "Can we eliminate the skolem `" SELF "' from the description???"
         EOL EOL))
       (HELP-ADD-DEPENDENT-PROPOSITION INDEX PROPOSITION SELF))))
    ((SUBTYPE-OF-WRAPPER? TEST-VALUE-000)
     (CL:PROGN
      (CL:WHEN (CL:NOT (DESCRIPTION-MODE?))
       (CL:LET* ((INDEX (GET-BACKLINKS-INDEX SELF)))
        (CL:WHEN (CL:NOT (CL:EQ INDEX NULL))
         (HELP-ADD-DEPENDENT-PROPOSITION INDEX PROPOSITION SELF))))))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-BACKLINKS-STELLA-THING)
     (CL:PROGN
      (HELP-ADD-DEPENDENT-PROPOSITION (GET-BACKLINKS-INDEX SELF)
       PROPOSITION SELF)))
    (CL:T))))

;;; (DEFUN REMOVE-DEPENDENT-PROPOSITION-LINK ...)

(CL:DEFUN REMOVE-DEPENDENT-PROPOSITION-LINK (SELF PROPOSITION)
  (CL:COND
   ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE SELF) SGT-BACKLINKS-LOGIC-PROPOSITION)
    (CL:PROGN
     (REMOVE (%PROPOSITION.DEPENDENT-PROPOSITIONS SELF) PROPOSITION)))
   (CL:T)))

;;; (DEFUN REMOVE-ALL-DEPENDENT-PROPOSITION-LINKS ...)

(CL:DEFUN REMOVE-ALL-DEPENDENT-PROPOSITION-LINKS (SELF)
  (CL:SETF (%LOGIC-OBJECT.DEPENDENT-PROPOSITIONS-INDEX SELF) NULL))

;;; (DEFGLOBAL *INTEGER-LOGIC-WRAPPER-TABLE* ...)

(CL:DEFVAR *INTEGER-LOGIC-WRAPPER-TABLE* NULL)

;;; (DEFGLOBAL *FLOAT-LOGIC-WRAPPER-TABLE* ...)

(CL:DEFVAR *FLOAT-LOGIC-WRAPPER-TABLE* NULL)

;;; (DEFGLOBAL *STRING-LOGIC-WRAPPER-TABLE* ...)

(CL:DEFVAR *STRING-LOGIC-WRAPPER-TABLE* NULL)

;;; (DEFUN (REWRAP-ARGUMENT OBJECT) ...)

(CL:DEFUN REWRAP-ARGUMENT (ARGUMENT)
  (CL:LET* ((WRAPPER NULL))
   (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE ARGUMENT)))
    (CL:COND
     ((SUBTYPE-OF-INTEGER? TEST-VALUE-000)
      (CL:PROGN
       (CL:LET* ((VALUE (%INTEGER-WRAPPER.WRAPPER-VALUE ARGUMENT)))
        (CL:DECLARE (CL:TYPE CL:FIXNUM VALUE))
        (CL:SETQ WRAPPER (LOOKUP *INTEGER-LOGIC-WRAPPER-TABLE* VALUE))
        (CL:WHEN (CL:EQ WRAPPER NULL)
         (CL:SETQ WRAPPER (NEW-INTEGER-LOGIC-WRAPPER VALUE))
         (INSERT-AT *INTEGER-LOGIC-WRAPPER-TABLE* VALUE WRAPPER)))))
     ((SUBTYPE-OF-FLOAT? TEST-VALUE-000)
      (CL:PROGN
       (CL:LET* ((VALUE (%FLOAT-WRAPPER.WRAPPER-VALUE ARGUMENT)))
        (CL:DECLARE (CL:TYPE CL:DOUBLE-FLOAT VALUE))
        (CL:SETQ WRAPPER (LOOKUP *FLOAT-LOGIC-WRAPPER-TABLE* VALUE))
        (CL:WHEN (CL:EQ WRAPPER NULL)
         (CL:SETQ WRAPPER (NEW-FLOAT-LOGIC-WRAPPER VALUE))
         (INSERT-AT *FLOAT-LOGIC-WRAPPER-TABLE* VALUE WRAPPER)))))
     ((SUBTYPE-OF-STRING? TEST-VALUE-000)
      (CL:PROGN
       (CL:LET* ((VALUE (%STRING-WRAPPER.WRAPPER-VALUE ARGUMENT)))
        (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING VALUE))
        (CL:SETQ WRAPPER (LOOKUP *STRING-LOGIC-WRAPPER-TABLE* VALUE))
        (CL:WHEN (CL:EQ WRAPPER NULL)
         (CL:SETQ WRAPPER (NEW-STRING-LOGIC-WRAPPER VALUE))
         (INSERT-AT *STRING-LOGIC-WRAPPER-TABLE* VALUE WRAPPER)))))
     ((SUBTYPE-OF? TEST-VALUE-000 SGT-BACKLINKS-STELLA-LITERAL-WRAPPER)
      (CL:PROGN
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
        "Backlinking not implemented on literal of type: `"
        (PRIMARY-TYPE ARGUMENT) "'" EOL EOL)
       (CL:RETURN-FROM REWRAP-ARGUMENT ARGUMENT)))
     (CL:T
      (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
        "`" TEST-VALUE-000 "' is not a valid case option")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
   WRAPPER))

;;; (DEFGLOBAL *BACKLINK-ALL-PROPOSITION-ARGUMENTS?* ...)

(CL:DEFVAR *BACKLINK-ALL-PROPOSITION-ARGUMENTS?* FALSE
  "If TRUE, wrap all literal proposition arguments
so that they can all support backlink indices.")

;;; (DEFUN (INDEX-ITH-DOMAIN? BOOLEAN) ...)

(CL:DEFUN INDEX-ITH-DOMAIN? (DESCRIPTION I)
  (CL:DECLARE (CL:TYPE CL:FIXNUM I))
  (CL:LET* ((TEST-VALUE-000 FALSE))
   (CL:SETQ TEST-VALUE-000 (FUNCTION-DESCRIPTION? DESCRIPTION))
   (CL:WHEN TEST-VALUE-000
    (CL:SETQ TEST-VALUE-000 (CL:NOT (COMPUTED-RELATION? DESCRIPTION)))
    (CL:WHEN TEST-VALUE-000 (CL:SETQ TEST-VALUE-000 (CL:= I 0))
     (CL:WHEN TEST-VALUE-000
      (CL:LET* ((ALWAYS?-000 TRUE))
       (CL:LET*
        ((T NULL)
         (ITER-000
          (BUT-LAST (%NAMED-DESCRIPTION.IO-VARIABLE-TYPES DESCRIPTION))))
        (CL:LOOP WHILE (NEXT? ITER-000) DO
         (CL:SETQ T (%ITERATOR.VALUE ITER-000))
         (CL:WHEN
          (CL:NOT (LOGICAL-SUBTYPE-OF? T SGT-BACKLINKS-STELLA-LITERAL))
          (CL:SETQ ALWAYS?-000 FALSE) (CL:RETURN))))
       (CL:SETQ TEST-VALUE-000 ALWAYS?-000)))))
   (CL:LET* ((VALUE-000 TEST-VALUE-000)) VALUE-000)))

;;; (DEFUN (REWRAP-ITH-ARGUMENT? BOOLEAN) ...)

(CL:DEFUN REWRAP-ITH-ARGUMENT? (ARGUMENT PROPOSITION I)
  (CL:DECLARE (CL:TYPE CL:FIXNUM I))
  (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE ARGUMENT)))
   (CL:COND
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-BACKLINKS-LOGIC-LOGIC-OBJECT)
     (CL:PROGN FALSE))
    ((SUBTYPE-OF-SURROGATE? TEST-VALUE-000) (CL:PROGN FALSE))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-BACKLINKS-STELLA-THING)
     (CL:PROGN FALSE))
    (CL:T
     (CL:OR *BACKLINK-ALL-PROPOSITION-ARGUMENTS?*
      (CL:AND
       (MEMBER?
        (GET-QUOTED-TREE "((:PREDICATE :FUNCTION) \"/LOGIC\")" "/LOGIC")
        (%PROPOSITION.KIND PROPOSITION))
       (INDEX-ITH-DOMAIN?
        (GET-DESCRIPTION (%PROPOSITION.OPERATOR PROPOSITION)) I)))))))

;;; (DEFUN REWRAP-PROPOSITION-ARGUMENTS ...)

(CL:DEFUN REWRAP-PROPOSITION-ARGUMENTS (SELF)
  (CL:LET*
   ((I NULL-INTEGER) (ARG NULL) (VECTOR-000 (%PROPOSITION.ARGUMENTS SELF))
    (INDEX-000 0) (LENGTH-000 (LENGTH VECTOR-000)) (ITER-000 0))
   (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000 ITER-000 I))
   (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
    (CL:PROGN
     (CL:SETQ ARG
      (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-000))
       INDEX-000))
     (CL:SETQ INDEX-000 (CL:1+ INDEX-000)))
    (CL:PROGN (CL:SETQ I ITER-000) (CL:SETQ ITER-000 (CL:1+ ITER-000)))
    (CL:WHEN
     (CL:AND (CL:NOT (CL:EQ ARG NULL)) (REWRAP-ITH-ARGUMENT? ARG SELF I))
     (CL:LET
      ((SELF (%VECTOR.THE-ARRAY (%PROPOSITION.ARGUMENTS SELF)))
       (VALUE (REWRAP-ARGUMENT ARG)) (POSITION I))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:SETF (CL:AREF SELF POSITION) VALUE))))))

;;; (DEFUN (UNFILTERED-DEPENDENT-PROPOSITIONS PROPOSITIONS-INDEX) ...)

(CL:DEFUN UNFILTERED-DEPENDENT-PROPOSITIONS (SELF RELATION)
  (CL:LET*
   ((INDEX (GET-BACKLINKS-INDEX SELF)) (ALLPROPOSITIONSINDEX NULL))
   (CL:WHEN (CL:EQ INDEX NULL)
    (CL:COND
     ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE SELF)
       SGT-BACKLINKS-LOGIC-PROPOSITION)
      (CL:PROGN
       (CL:COND
        ((CL:EQ RELATION NULL)
         (CL:RETURN-FROM UNFILTERED-DEPENDENT-PROPOSITIONS
          (%PROPOSITION.DEPENDENT-PROPOSITIONS SELF)))
        (CL:T
         (CL:LET*
          ((DEPENDENTS
            (CREATE-SEQUENCE-INDEX KWD-BACKLINKS-NON-PAGING NULL)))
          (CL:LET*
           ((PROP NULL)
            (ITER-000
             (ALLOCATE-ITERATOR
              (%PROPOSITION.DEPENDENT-PROPOSITIONS SELF))))
           (CL:LOOP WHILE (NEXT? ITER-000) DO
            (CL:SETQ PROP (%ITERATOR.VALUE ITER-000))
            (CL:WHEN (CL:EQ (%PROPOSITION.OPERATOR PROP) RELATION)
             (PUSH DEPENDENTS PROP))))
          (CL:RETURN-FROM UNFILTERED-DEPENDENT-PROPOSITIONS
           DEPENDENTS))))))
     (CL:T
      (CL:RETURN-FROM UNFILTERED-DEPENDENT-PROPOSITIONS
       NIL-NON-PAGING-INDEX))))
   (CL:SETQ ALLPROPOSITIONSINDEX
    (%BACKLINKS-INDEX.DEPENDENT-PROPOSITIONS-LIST INDEX))
   (CL:WHEN (CL:EQ RELATION NULL)
    (CL:RETURN-FROM UNFILTERED-DEPENDENT-PROPOSITIONS
     ALLPROPOSITIONSINDEX))
   (CL:LET*
    ((TABLE (%BACKLINKS-INDEX.PREDICATE-PROPOSITIONS-TABLE INDEX))
     (LIST
      (CL:IF (CL:EQ TABLE NULL) ALLPROPOSITIONSINDEX
       (LOOKUP TABLE RELATION))))
    (CL:WHEN (CL:EQ LIST NULL)
     (CL:SETQ LIST
      (%BACKLINKS-INDEX.DEPENDENT-ISA-PROPOSITIONS-LIST INDEX)))
    (CL:IF (CL:EQ LIST NULL) NIL-NON-PAGING-INDEX LIST))))

;;; (DEFUN (ALL-SPECIALIZING-DEPENDENT-PROPOSITIONS-NEXT? BOOLEAN) ...)

(CL:DEFUN ALL-SPECIALIZING-DEPENDENT-PROPOSITIONS-NEXT? (SELF)
  (CL:LET*
   ((ITERATOR (%ALL-PURPOSE-ITERATOR.ITERATOR-NESTED-ITERATOR SELF))
    (RELATION (%%VALUE (%ALL-PURPOSE-ITERATOR.ITERATOR-CONS-LIST SELF))))
   (CL:LOOP
    (CL:LOOP WHILE (NEXT? ITERATOR) DO
     (CL:LET* ((PROPOSITION (%ITERATOR.VALUE ITERATOR)))
      (CL:WHEN
       (CL:EQ (%PROPOSITION.OPERATOR PROPOSITION)
        (%NAMED-DESCRIPTION.SURROGATE-VALUE-INVERSE RELATION))
       (CL:SETF (%ALL-PURPOSE-ITERATOR.VALUE SELF) PROPOSITION)
       (CL:RETURN-FROM ALL-SPECIALIZING-DEPENDENT-PROPOSITIONS-NEXT?
        TRUE))))
    (CL:SETF (%ALL-PURPOSE-ITERATOR.ITERATOR-CONS-LIST SELF)
     (%%REST (%ALL-PURPOSE-ITERATOR.ITERATOR-CONS-LIST SELF)))
    (CL:SETQ RELATION
     (%%VALUE (%ALL-PURPOSE-ITERATOR.ITERATOR-CONS-LIST SELF)))
    (CL:WHEN (CL:EQ RELATION NULL)
     (CL:SETF (%ALL-PURPOSE-ITERATOR.VALUE SELF) NULL)
     (CL:RETURN-FROM ALL-SPECIALIZING-DEPENDENT-PROPOSITIONS-NEXT? FALSE))
    (CL:SETQ ITERATOR
     (ALLOCATE-ITERATOR
      (UNFILTERED-DEPENDENT-PROPOSITIONS
       (%ALL-PURPOSE-ITERATOR.ITERATOR-OBJECT SELF)
       (%NAMED-DESCRIPTION.SURROGATE-VALUE-INVERSE RELATION))))
    (CL:SETF (%ALL-PURPOSE-ITERATOR.ITERATOR-NESTED-ITERATOR SELF)
     ITERATOR))))

;;; (DEFUN (ALL-SPECIALIZING-DEPENDENT-PROPOSITIONS (ITERATOR OF PROPOSITION)) ...)

(CL:DEFUN ALL-SPECIALIZING-DEPENDENT-PROPOSITIONS (SELF RELATIONREF)
  (CL:LET* ((RELATION (GET-DESCRIPTION RELATIONREF)))
   (CL:LET* ((SELF-000 (NEW-ALL-PURPOSE-ITERATOR)))
    (CL:SETF (%ALL-PURPOSE-ITERATOR.ITERATOR-OBJECT SELF-000) SELF)
    (CL:SETF (%ALL-PURPOSE-ITERATOR.ITERATOR-CONS-LIST SELF-000)
     (CONS RELATION (ALL-SUBRELATIONS RELATION FALSE)))
    (CL:SETF (%ALL-PURPOSE-ITERATOR.ITERATOR-NESTED-ITERATOR SELF-000)
     (ALLOCATE-ITERATOR
      (UNFILTERED-DEPENDENT-PROPOSITIONS SELF RELATIONREF)))
    (CL:SETF (%ALL-PURPOSE-ITERATOR.ITERATOR-NEXT-CODE SELF-000)
     (CL:FUNCTION ALL-SPECIALIZING-DEPENDENT-PROPOSITIONS-NEXT?))
    (CL:LET* ((VALUE-000 SELF-000)) VALUE-000))))

;;; (DEFUN (UNFILTERED-DEPENDENT-ISA-PROPOSITIONS PROPOSITIONS-INDEX) ...)

(CL:DEFUN UNFILTERED-DEPENDENT-ISA-PROPOSITIONS (SELF)
  (CL:LET* ((INDEX (GET-BACKLINKS-INDEX SELF)))
   (CL:IF (CL:EQ INDEX NULL) NIL-NON-PAGING-INDEX
    (CL:LET*
     ((V-033 (%BACKLINKS-INDEX.DEPENDENT-ISA-PROPOSITIONS-LIST INDEX)))
     (CL:WHEN (CL:EQ V-033 NULL)
      (CL:SETQ V-033
       (%BACKLINKS-INDEX.DEPENDENT-PROPOSITIONS-LIST INDEX)))
     (CL:LET* ((VALUE-000 V-033)) VALUE-000)))))

;;; (DEFUN (UNFILTERED-DEPENDENT-IMPLIES-PROPOSITIONS PROPOSITIONS-INDEX) ...)

(CL:DEFUN UNFILTERED-DEPENDENT-IMPLIES-PROPOSITIONS (SELF)
  (CL:LET* ((INDEX (GET-BACKLINKS-INDEX SELF)))
   (CL:IF (CL:EQ INDEX NULL) NIL-NON-PAGING-INDEX
    (CL:LET*
     ((TABLE (%BACKLINKS-INDEX.PREDICATE-PROPOSITIONS-TABLE INDEX)))
     (CL:IF (CL:NOT (CL:EQ TABLE NULL))
      (CL:LET*
       ((V-034 (LOOKUP TABLE SGT-BACKLINKS-PL-KERNEL-KB-SUBSET-OF)))
       (CL:WHEN (CL:EQ V-034 NULL) (CL:SETQ V-034 NIL-NON-PAGING-INDEX))
       (CL:LET* ((VALUE-000 V-034)) VALUE-000))
      (%BACKLINKS-INDEX.DEPENDENT-PROPOSITIONS-LIST INDEX))))))

;;; (DEFUN (INHERITS-TRUTH-FROM-MASTER? BOOLEAN) ...)

(CL:DEFUN INHERITS-TRUTH-FROM-MASTER? (SELF)
  (CL:LET*
   ((MASTER
     (DYNAMIC-SLOT-VALUE (%PROPOSITION.DYNAMIC-SLOTS SELF)
      SYM-BACKLINKS-LOGIC-MASTER-PROPOSITION NULL)))
   (CL:WHEN (CL:AND (CL:NOT (CL:EQ MASTER NULL)) (TRUE? MASTER))
    (ASSIGN-TRUTH-VALUE SELF TRUE-WRAPPER)
    (CL:RETURN-FROM INHERITS-TRUTH-FROM-MASTER? TRUE)))
  FALSE)

;;; (DEFUN (APPLICABLE-RULES-OF-DESCRIPTION (CONS OF PROPOSITION)) ...)

(CL:DEFUN APPLICABLE-RULES-OF-DESCRIPTION (SELF DIRECTION TRUERULESONLY?)
  (CL:WHEN (ISA? SELF SGT-BACKLINKS-LOGIC-DESCRIPTION)
   (DERIVE-DEFERRED-SATELLITE-RULES SELF))
  (CL:LET* ((INDEX (GET-BACKLINKS-INDEX SELF)) (RULES NIL))
   (CL:LET*
    ((P NULL)
     (ITER-000
      (ALLOCATE-ITERATOR
       (UNFILTERED-DEPENDENT-IMPLIES-PROPOSITIONS SELF)))
     (COLLECT-000 NULL))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ P (%ITERATOR.VALUE ITER-000))
     (CL:WHEN
      (CL:AND (CL:EQ (%PROPOSITION.KIND P) KWD-BACKLINKS-IMPLIES)
       (CL:IF (CL:EQ DIRECTION KWD-BACKLINKS-FORWARD)
        (CL:EQ
         (CL:AREF
          (CL:THE CL:SIMPLE-VECTOR
           (%VECTOR.THE-ARRAY (%PROPOSITION.ARGUMENTS P)))
          0)
         SELF)
        (CL:EQ
         (CL:AREF
          (CL:THE CL:SIMPLE-VECTOR
           (%VECTOR.THE-ARRAY (%PROPOSITION.ARGUMENTS P)))
          1)
         SELF))
       (CL:OR
        (CL:AND (TRUE? P)
         (CL:NOT
          (%BOOLEAN-WRAPPER.WRAPPER-VALUE
           (DYNAMIC-SLOT-VALUE (%PROPOSITION.DYNAMIC-SLOTS P)
            SYM-BACKLINKS-LOGIC-SUBSUMPTION-LINK? FALSE-WRAPPER))))
        (INHERITS-TRUTH-FROM-MASTER? P) (CL:NOT TRUERULESONLY?)))
      (CL:IF (CL:EQ COLLECT-000 NULL)
       (CL:PROGN (CL:SETQ COLLECT-000 (CONS P NIL))
        (CL:IF (CL:EQ RULES NIL) (CL:SETQ RULES COLLECT-000)
         (ADD-CONS-TO-END-OF-CONS-LIST RULES COLLECT-000)))
       (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS P NIL))
        (CL:SETQ COLLECT-000 (%%REST COLLECT-000)))))))
   RULES))

;;; (DEFUN (ARGUMENT-DISCOURAGES-BACKLINKS? BOOLEAN) ...)

(CL:DEFUN ARGUMENT-DISCOURAGES-BACKLINKS? (SELF)
  (ISA? SELF SGT-BACKLINKS-LOGIC-NAMED-DESCRIPTION))

;;; (DEFUN SURROGATIFY-DISCOURAGED-ARGUMENTS ...)

(CL:DEFUN SURROGATIFY-DISCOURAGED-ARGUMENTS (SELF))

;;; (DEFUN (COUNT-BACKLINKS-ON-RELATION INTEGER) ...)

(CL:DEFUN COUNT-BACKLINKS-ON-RELATION (SELF KIND RELATION)
  (CL:LET*
   ((INDEX (GET-BACKLINKS-INDEX SELF))
    (EQUIVALENTS
     (CL:IF (ISA? SELF SGT-BACKLINKS-LOGIC-LOGIC-OBJECT)
      (VARIABLE-VALUE-INVERSE SELF) NIL)))
   (CL:WHEN (CL:EQ INDEX NULL)
    (CL:RETURN-FROM COUNT-BACKLINKS-ON-RELATION NULL-INTEGER))
   (CL:LET*
    ((TABLE (%BACKLINKS-INDEX.PREDICATE-PROPOSITIONS-TABLE INDEX)))
    (CL:WHEN (CL:NOT (CL:EQ TABLE NULL))
     (CL:COND
      ((CL:OR (CL:EQ KIND KWD-BACKLINKS-PREDICATE)
        (CL:EQ KIND KWD-BACKLINKS-FUNCTION))
       (CL:LET* ((BUCKET (LOOKUP TABLE RELATION)))
        (CL:WHEN (CL:EQ EQUIVALENTS NIL)
         (CL:COND
          ((CL:EQ BUCKET NULL)
           (CL:LET* ((FOUND?-000 FALSE))
            (CL:LET*
             ((SUB NULL)
              (ITER-000
               (ALL-DIRECT-SUBRELATIONS
                (SURROGATE-TO-DESCRIPTION RELATION) FALSE)))
             (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
              (CL:PROGN (CL:SETQ SUB (%%VALUE ITER-000))
               (CL:SETQ ITER-000 (%%REST ITER-000)))
              (CL:SETQ FOUND?-000 TRUE) (CL:RETURN)))
            (CL:IF FOUND?-000
             (CL:RETURN-FROM COUNT-BACKLINKS-ON-RELATION 1)
             (CL:RETURN-FROM COUNT-BACKLINKS-ON-RELATION 0))))
          (CL:T
           (CL:RETURN-FROM COUNT-BACKLINKS-ON-RELATION
            (ESTIMATED-LENGTH BUCKET)))))))
      ((CL:EQ KIND KWD-BACKLINKS-ISA)
       (CL:LET*
        ((P NULL)
         (ITER-001
          (ALLOCATE-ITERATOR
           (%BACKLINKS-INDEX.DEPENDENT-ISA-PROPOSITIONS-LIST INDEX))))
        (CL:LOOP WHILE (NEXT? ITER-001) DO
         (CL:SETQ P (%ITERATOR.VALUE ITER-001))
         (CL:WHEN (CL:EQ (%PROPOSITION.OPERATOR P) RELATION)
          (CL:RETURN-FROM COUNT-BACKLINKS-ON-RELATION 1))))
       (CL:RETURN-FROM COUNT-BACKLINKS-ON-RELATION 0))
      (CL:T))))
   (CL:LET* ((COUNT 0)) (CL:DECLARE (CL:TYPE CL:FIXNUM COUNT))
    (CL:LET*
     ((P NULL)
      (ITER-002
       (ALLOCATE-ITERATOR
        (%BACKLINKS-INDEX.DEPENDENT-PROPOSITIONS-LIST INDEX))))
     (CL:LOOP WHILE (NEXT? ITER-002) DO
      (CL:SETQ P (%ITERATOR.VALUE ITER-002))
      (CL:WHEN (CL:EQ (%PROPOSITION.OPERATOR P) RELATION)
       (CL:SETQ COUNT (CL:1+ COUNT)))))
    (CL:WHEN (CL:= COUNT 0)
     (CL:LET* ((FOUND?-001 FALSE))
      (CL:LET*
       ((SUB NULL)
        (ITER-003
         (ALL-DIRECT-SUBRELATIONS (SURROGATE-TO-DESCRIPTION RELATION)
          FALSE)))
       (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-003 NIL)) DO
        (CL:PROGN (CL:SETQ SUB (%%VALUE ITER-003))
         (CL:SETQ ITER-003 (%%REST ITER-003)))
        (CL:SETQ FOUND?-001 TRUE) (CL:RETURN)))
      (CL:WHEN FOUND?-001 (CL:SETQ COUNT 1))))
    (CL:WHEN (CL:EQ EQUIVALENTS NIL)
     (CL:RETURN-FROM COUNT-BACKLINKS-ON-RELATION COUNT))
    (CL:LET* ((EQUIV NULL) (ITER-004 EQUIVALENTS))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-004 NIL)) DO
      (CL:PROGN (CL:SETQ EQUIV (%%VALUE ITER-004))
       (CL:SETQ ITER-004 (%%REST ITER-004)))
      (CL:SETQ COUNT
       (CL:+ COUNT (COUNT-BACKLINKS-ON-RELATION EQUIV KIND RELATION)))))
    COUNT)))

;;; (DEFUN (SELECT-ARGUMENT-WITH-BACKLINKS OBJECT BOOLEAN) ...)

(CL:DEFUN SELECT-ARGUMENT-WITH-BACKLINKS (PROPOSITION)
  (CL:LET*
   ((RELATION (%PROPOSITION.OPERATOR PROPOSITION))
    (KIND (%PROPOSITION.KIND PROPOSITION)) (VALUE NULL)
    (COUNT NULL-INTEGER) (LOWESTBACKLINKCOUNT NULL-INTEGER)
    (BESTARGUMENT NULL) (FOUNDDISCOURAGEDARGUMENT? FALSE))
   (CL:DECLARE (CL:TYPE CL:FIXNUM COUNT LOWESTBACKLINKCOUNT))
   (CL:LET*
    ((ARG NULL) (VECTOR-000 (%PROPOSITION.ARGUMENTS PROPOSITION))
     (INDEX-000 0) (LENGTH-000 (LENGTH VECTOR-000)))
    (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
    (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
     (CL:PROGN
      (CL:SETQ ARG
       (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-000))
        INDEX-000))
      (CL:SETQ INDEX-000 (CL:1+ INDEX-000)))
     (CL:TAGBODY (CL:SETQ VALUE (ARGUMENT-BOUND-TO ARG))
      (CL:WHEN (CL:NOT (CL:EQ VALUE NULL))
       (CL:WHEN (ISA? VALUE SGT-BACKLINKS-LOGIC-NAMED-DESCRIPTION)
        (CL:SETQ FOUNDDISCOURAGEDARGUMENT? TRUE) (CL:GO :CONTINUE))
       (CL:SETQ COUNT (COUNT-BACKLINKS-ON-RELATION VALUE KIND RELATION))
       (CL:WHEN
        (CL:AND (DEFINED? COUNT)
         (CL:OR (NULL? LOWESTBACKLINKCOUNT)
          (CL:< COUNT LOWESTBACKLINKCOUNT)))
        (CL:SETQ LOWESTBACKLINKCOUNT COUNT) (CL:SETQ BESTARGUMENT VALUE)))
      :CONTINUE)))
   (CL:WHEN (CL:AND (NULL? LOWESTBACKLINKCOUNT) FOUNDDISCOURAGEDARGUMENT?)
    (CL:LET*
     ((ARG NULL) (VECTOR-001 (%PROPOSITION.ARGUMENTS PROPOSITION))
      (INDEX-001 0) (LENGTH-001 (LENGTH VECTOR-001)))
     (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-001 LENGTH-001))
     (CL:LOOP WHILE (CL:< INDEX-001 LENGTH-001) DO
      (CL:PROGN
       (CL:SETQ ARG
        (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-001))
         INDEX-001))
       (CL:SETQ INDEX-001 (CL:1+ INDEX-001)))
      (CL:TAGBODY (CL:SETQ VALUE (ARGUMENT-BOUND-TO ARG))
       (CL:WHEN (CL:NOT (CL:EQ VALUE NULL))
        (CL:WHEN
         (CL:NOT (ISA? VALUE SGT-BACKLINKS-LOGIC-NAMED-DESCRIPTION))
         (CL:GO :CONTINUE))
        (CL:SETQ COUNT (COUNT-BACKLINKS-ON-RELATION VALUE KIND RELATION))
        (CL:WHEN
         (CL:AND (DEFINED? COUNT)
          (CL:OR (NULL? LOWESTBACKLINKCOUNT)
           (CL:< COUNT LOWESTBACKLINKCOUNT)))
         (CL:SETQ LOWESTBACKLINKCOUNT COUNT)
         (CL:SETQ BESTARGUMENT VALUE)))
       :CONTINUE))))
   (CL:COND ((NULL? LOWESTBACKLINKCOUNT) (CL:VALUES NULL FALSE))
    ((CL:= LOWESTBACKLINKCOUNT 0)
     (CL:VALUES NULL
      (CL:NOT (ISA? BESTARGUMENT SGT-BACKLINKS-LOGIC-NAMED-DESCRIPTION))))
    (CL:T (CL:VALUES BESTARGUMENT FALSE)))))

;;; (DEFUN (INSTANCE-HAS-BACKLINKS? BOOLEAN) ...)

(CL:DEFUN INSTANCE-HAS-BACKLINKS? (SELF)
  (CL:OR (CL:NOT (CL:EQ (GET-BACKLINKS-INDEX SELF) NULL))
   (ISA? SELF SGT-BACKLINKS-LOGIC-PROPOSITION)))

;;; (DEFUN (SELECT-INSTANCE-WITH-BACKLINKS OBJECT) ...)

(CL:DEFUN SELECT-INSTANCE-WITH-BACKLINKS (INSTANCES RELATION)
  (CL:LET* ((I NULL) (ITER-000 INSTANCES))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:PROGN (CL:SETQ I (%%VALUE ITER-000))
     (CL:SETQ ITER-000 (%%REST ITER-000)))
    (CL:WHEN (CL:NOT (ISA? I SGT-BACKLINKS-LOGIC-NAMED-DESCRIPTION))
     (CL:LET* ((VALUE (VALUE-OF I)))
      (CL:WHEN (INSTANCE-HAS-BACKLINKS? VALUE)
       (CL:RETURN-FROM SELECT-INSTANCE-WITH-BACKLINKS VALUE))))))
  (CL:LET* ((I NULL) (ITER-001 INSTANCES))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
    (CL:PROGN (CL:SETQ I (%%VALUE ITER-001))
     (CL:SETQ ITER-001 (%%REST ITER-001)))
    (CL:WHEN (ISA? I SGT-BACKLINKS-LOGIC-NAMED-DESCRIPTION)
     (CL:LET* ((VALUE (VALUE-OF I)))
      (CL:WHEN (INSTANCE-HAS-BACKLINKS? VALUE)
       (CL:RETURN-FROM SELECT-INSTANCE-WITH-BACKLINKS VALUE))))))
  NULL)

;;; (DEFUN (FIND-SIMILAR-PROPOSITIONS PROPOSITIONS-INDEX) ...)

(CL:DEFUN FIND-SIMILAR-PROPOSITIONS (SELF)
  (CL:COND
   ((CL:EQ (%PROPOSITION.KIND SELF) KWD-BACKLINKS-FUNCTION)
    (CL:LET*
     ((ARG NULL) (ITER-000 (BUT-LAST (%PROPOSITION.ARGUMENTS SELF))))
     (CL:LOOP WHILE (NEXT? ITER-000) DO
      (CL:SETQ ARG (%ITERATOR.VALUE ITER-000))
      (CL:WHEN (INSTANCE-HAS-BACKLINKS? (VALUE-OF ARG))
       (CL:RETURN-FROM FIND-SIMILAR-PROPOSITIONS
        (UNFILTERED-DEPENDENT-PROPOSITIONS (VALUE-OF ARG)
         (%PROPOSITION.OPERATOR SELF)))))))
   (CL:T
    (CL:LET*
     ((ARG NULL) (VECTOR-000 (%PROPOSITION.ARGUMENTS SELF)) (INDEX-000 0)
      (LENGTH-000 (LENGTH VECTOR-000)))
     (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
     (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
      (CL:PROGN
       (CL:SETQ ARG
        (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-000))
         INDEX-000))
       (CL:SETQ INDEX-000 (CL:1+ INDEX-000)))
      (CL:WHEN (INSTANCE-HAS-BACKLINKS? ARG)
       (CL:RETURN-FROM FIND-SIMILAR-PROPOSITIONS
        (UNFILTERED-DEPENDENT-PROPOSITIONS ARG
         (%PROPOSITION.OPERATOR SELF))))))))
  (REWRAP-PROPOSITION-ARGUMENTS SELF)
  (CL:LET*
   ((ARG NULL) (VECTOR-001 (%PROPOSITION.ARGUMENTS SELF)) (INDEX-001 0)
    (LENGTH-001 (LENGTH VECTOR-001)))
   (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-001 LENGTH-001))
   (CL:LOOP WHILE (CL:< INDEX-001 LENGTH-001) DO
    (CL:PROGN
     (CL:SETQ ARG
      (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-001))
       INDEX-001))
     (CL:SETQ INDEX-001 (CL:1+ INDEX-001)))
    (CL:WHEN
     (CL:AND (CL:NOT (CL:EQ ARG NULL)) (INSTANCE-HAS-BACKLINKS? ARG))
     (CL:RETURN-FROM FIND-SIMILAR-PROPOSITIONS
      (UNFILTERED-DEPENDENT-PROPOSITIONS ARG
       (%PROPOSITION.OPERATOR SELF))))))
  NIL-NON-PAGING-INDEX)

;;; (DEFUN (FIND-MATCHING-CONCEIVED-PROPOSITION PROPOSITION) ...)

(CL:DEFUN FIND-MATCHING-CONCEIVED-PROPOSITION (GOAL)
  (CL:LET* ((TEST-VALUE-000 (%PROPOSITION.KIND GOAL)))
   (CL:COND
    ((CL:OR (CL:EQ TEST-VALUE-000 KWD-BACKLINKS-PREDICATE)
      (CL:EQ TEST-VALUE-000 KWD-BACKLINKS-FUNCTION)
      (CL:EQ TEST-VALUE-000 KWD-BACKLINKS-ISA)
      (CL:EQ TEST-VALUE-000 KWD-BACKLINKS-EQUIVALENT))
     (CL:LET* ((BACKLINKEDARGUMENT (SELECT-ARGUMENT-WITH-BACKLINKS GOAL)))
      (CL:WHEN (CL:EQ BACKLINKEDARGUMENT NULL)
       (CL:RETURN-FROM FIND-MATCHING-CONCEIVED-PROPOSITION NULL))
      (CL:LET* ((VALUE-000 NULL))
       (CL:LET*
        ((P NULL)
         (ITER-000
          (ALLOCATE-ITERATOR
           (UNFILTERED-DEPENDENT-PROPOSITIONS BACKLINKEDARGUMENT
            (%PROPOSITION.OPERATOR GOAL)))))
        (CL:LOOP WHILE (NEXT? ITER-000) DO
         (CL:SETQ P (%ITERATOR.VALUE ITER-000))
         (CL:WHEN
          (CL:AND
           (CL:EQ (%PROPOSITION.OPERATOR P) (%PROPOSITION.OPERATOR GOAL))
           (ARGUMENTS-MATCH-ARGUMENTS? P GOAL))
          (CL:SETQ VALUE-000 P) (CL:RETURN))))
       (CL:LET* ((VALUE-001 VALUE-000)) VALUE-001))))
    (CL:T GOAL))))

;;; (DEFUN TRANSFER-PROPOSITIONS-AND-BACKLINKS ...)

(CL:DEFUN TRANSFER-PROPOSITIONS-AND-BACKLINKS (FROM TO)
  (TRANSFER-PROPOSITIONS-EXCEPT-FOR FROM TO NIL-LIST))

;;; (DEFUN TRANSFER-PROPOSITIONS-EXCEPT-FOR ...)

(CL:DEFUN TRANSFER-PROPOSITIONS-EXCEPT-FOR (FROM TO EXCEPTPROPOSITIONS)
  (CL:LET* ((V-035 NIL))
   (CL:LET*
    ((P NULL)
     (ITER-000
      (ALLOCATE-ITERATOR (UNFILTERED-DEPENDENT-PROPOSITIONS TO NULL)))
     (COLLECT-000 NULL))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ P (%ITERATOR.VALUE ITER-000))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN (CL:SETQ COLLECT-000 (CONS P NIL))
       (CL:IF (CL:EQ V-035 NIL) (CL:SETQ V-035 COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST V-035 COLLECT-000)))
      (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS P NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
   (CL:LET* ((TOPROPOSITIONS V-035))
    (CL:WHEN (CL:EQ EXCEPTPROPOSITIONS NULL)
     (CL:SETQ EXCEPTPROPOSITIONS NIL-LIST))
    (CL:LET*
     ((P NULL)
      (ITER-001
       (ALLOCATE-ITERATOR (UNFILTERED-DEPENDENT-PROPOSITIONS FROM NULL))))
     (CL:LOOP WHILE (NEXT? ITER-001) DO
      (CL:SETQ P (%ITERATOR.VALUE ITER-001))
      (CL:WHEN (CL:NOT (MEMBER? EXCEPTPROPOSITIONS P))
       (CL:LET*
        ((I NULL-INTEGER) (ARG NULL)
         (VECTOR-000 (%PROPOSITION.ARGUMENTS P)) (INDEX-000 0)
         (LENGTH-000 (LENGTH VECTOR-000)) (ITER-002 0))
        (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000 ITER-002 I))
        (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
         (CL:PROGN
          (CL:SETQ ARG
           (CL:AREF
            (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-000))
            INDEX-000))
          (CL:SETQ INDEX-000 (CL:1+ INDEX-000)))
         (CL:PROGN (CL:SETQ I ITER-002)
          (CL:SETQ ITER-002 (CL:1+ ITER-002)))
         (CL:WHEN (CL:EQ ARG FROM)
          (CL:LET
           ((SELF (%VECTOR.THE-ARRAY (%PROPOSITION.ARGUMENTS P)))
            (VALUE TO) (POSITION I))
           (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
            (CL:TYPE CL:FIXNUM POSITION))
           (CL:SETF (CL:AREF SELF POSITION) VALUE)))))
       (CL:LET* ((TEST-VALUE-000 FALSE))
        (CL:LET* ((FOUND?-000 FALSE))
         (CL:LET* ((TOP NULL) (ITER-003 TOPROPOSITIONS))
          (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-003 NIL)) DO
           (CL:PROGN (CL:SETQ TOP (%%VALUE ITER-003))
            (CL:SETQ ITER-003 (%%REST ITER-003)))
           (CL:WHEN (EQUIVALENT-PROPOSITIONS? P TOP NULL)
            (CL:SETQ FOUND?-000 TRUE) (CL:RETURN))))
         (CL:SETQ TEST-VALUE-000 FOUND?-000))
        (CL:SETQ TEST-VALUE-000 (CL:NOT TEST-VALUE-000))
        (CL:WHEN TEST-VALUE-000
         (ADD-DEPENDENT-PROPOSITION-LINK TO P)))))))))

;;; (DEFUN TRANSFER-DESCRIPTION-EXTENSION ...)

(CL:DEFUN TRANSFER-DESCRIPTION-EXTENSION (FROM TO)
  (CL:SETF (%NAMED-DESCRIPTION.EXTENSION TO)
   (%NAMED-DESCRIPTION.EXTENSION FROM))
  (CL:SETF (%NAMED-DESCRIPTION.EXTENSION FROM) NULL))

;;; (DEFUN (GET-DESCRIPTION-EXTENSION PROPOSITIONS-INDEX) ...)

(CL:DEFUN GET-DESCRIPTION-EXTENSION (DESCRIPTION UPDATE?)
  (CL:LET* ((EXTENSION (%NAMED-DESCRIPTION.EXTENSION DESCRIPTION)))
   (CL:COND
    ((CL:AND (CL:NOT (CL:EQ EXTENSION NULL))
      (CL:NOT (CL:EQ EXTENSION NIL-PAGING-INDEX)))
     EXTENSION)
    (UPDATE?
     (CL:SETQ EXTENSION
      (CREATE-SEQUENCE-INDEX KWD-BACKLINKS-PAGING
       (LIST* KWD-BACKLINKS-RELATION-EXTENSION
        (%NAMED-DESCRIPTION.SURROGATE-VALUE-INVERSE DESCRIPTION) NIL)))
     (CL:SETF (%NAMED-DESCRIPTION.EXTENSION DESCRIPTION) EXTENSION)
     EXTENSION)
    (CL:T NIL-PAGING-INDEX))))

;;; (DEFUN CLEANUP-DESCRIPTION-EXTENSION ...)

(CL:DEFUN CLEANUP-DESCRIPTION-EXTENSION (DESCRIPTION)
  (REMOVE-DELETED-MEMBERS (%NAMED-DESCRIPTION.EXTENSION DESCRIPTION)))

;;; (DEFUN CLEANUP-ALL-DESCRIPTION-EXTENSIONS ...)

(CL:DEFUN CLEANUP-ALL-DESCRIPTION-EXTENSIONS ()
  (CL:LET*
   ((DESCRIPTION NULL) (ITER-000 (ALL-NAMED-DESCRIPTIONS NULL FALSE)))
   (CL:LOOP WHILE (NEXT? ITER-000) DO
    (CL:SETQ DESCRIPTION (%ITERATOR.VALUE ITER-000))
    (CL:WHEN
     (CL:AND
      (CL:NOT (CL:EQ (%NAMED-DESCRIPTION.EXTENSION DESCRIPTION) NULL))
      (CL:NOT
       (CL:EQ (%NAMED-DESCRIPTION.EXTENSION DESCRIPTION)
        NIL-PAGING-INDEX)))
     (REMOVE-DELETED-MEMBERS (%NAMED-DESCRIPTION.EXTENSION DESCRIPTION))))))

;;; (DEFSPECIAL *SUPPRESSINSERTIONINTOCLASSEXTENSION?* ...)

(CL:DEFVAR *SUPPRESSINSERTIONINTOCLASSEXTENSION?* FALSE
  "Used when creating a skolem (e.g., a prototype) that
isn't visible in the corresponding class extension.")

;;; (DEFUN UPDATE-DESCRIPTION-EXTENSION ...)

(CL:DEFUN UPDATE-DESCRIPTION-EXTENSION (SELF)
  (CL:WHEN (DESCRIPTION-MODE?)
   (CL:RETURN-FROM UPDATE-DESCRIPTION-EXTENSION))
  (CL:LET* ((TEST-VALUE-000 (%PROPOSITION.KIND SELF)))
   (CL:COND
    ((CL:OR (CL:EQ TEST-VALUE-000 KWD-BACKLINKS-ISA)
      (CL:EQ TEST-VALUE-000 KWD-BACKLINKS-PREDICATE)
      (CL:EQ TEST-VALUE-000 KWD-BACKLINKS-FUNCTION))
     (CL:LET*
      ((DESCRIPTION (GET-DESCRIPTION (%PROPOSITION.OPERATOR SELF))))
      (CL:LET*
       ((ARG NULL) (VECTOR-000 (%PROPOSITION.ARGUMENTS SELF))
        (INDEX-000 0) (LENGTH-000 (LENGTH VECTOR-000)))
       (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
       (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
        (CL:PROGN
         (CL:SETQ ARG
          (CL:AREF
           (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-000))
           INDEX-000))
         (CL:SETQ INDEX-000 (CL:1+ INDEX-000)))
        (CL:LET* ((TEST-VALUE-001 (SAFE-PRIMARY-TYPE ARG)))
         (CL:COND
          ((SUBTYPE-OF? TEST-VALUE-001
            SGT-BACKLINKS-LOGIC-PATTERN-VARIABLE)
           (CL:PROGN (CL:RETURN-FROM UPDATE-DESCRIPTION-EXTENSION)))
          ((SUBTYPE-OF? TEST-VALUE-001 SGT-BACKLINKS-LOGIC-SKOLEM)
           (CL:PROGN
            (CL:WHEN
             (CL:OR
              (CL:AND (CLASS-DESCRIPTION? DESCRIPTION)
               (LITERAL-TYPE?
                (%NAMED-DESCRIPTION.SURROGATE-VALUE-INVERSE DESCRIPTION)))
              *SUPPRESSINSERTIONINTOCLASSEXTENSION?*
              (%BOOLEAN-WRAPPER.WRAPPER-VALUE
               (DYNAMIC-SLOT-VALUE (%SKOLEM.DYNAMIC-SLOTS ARG)
                SYM-BACKLINKS-LOGIC-HYPOTHESIZED-INSTANCE?
                FALSE-WRAPPER)))
             (CL:RETURN-FROM UPDATE-DESCRIPTION-EXTENSION))))
          ((SUBTYPE-OF? TEST-VALUE-001 SGT-BACKLINKS-LOGIC-LOGIC-OBJECT)
           (CL:PROGN
            (CL:WHEN
             (%BOOLEAN-WRAPPER.WRAPPER-VALUE
              (DYNAMIC-SLOT-VALUE (%LOGIC-OBJECT.DYNAMIC-SLOTS ARG)
               SYM-BACKLINKS-LOGIC-HYPOTHESIZED-INSTANCE? FALSE-WRAPPER))
             (CL:RETURN-FROM UPDATE-DESCRIPTION-EXTENSION))))
          (CL:T)))))
      (CL:LET* ((EXTENSION (GET-DESCRIPTION-EXTENSION DESCRIPTION TRUE)))
       (CL:WHEN (CL:NOT *LOADINGREGENERABLEOBJECTS?*)
        (INSERT EXTENSION SELF)))))
    (CL:T))))

;;; (DEFUN (ALL-EXTENSION-MEMBERS ITERATOR) ...)

(CL:DEFUN ALL-EXTENSION-MEMBERS (DESCRIPTION)
  (CL:LET* ((EXTENSION (GET-DESCRIPTION-EXTENSION DESCRIPTION FALSE)))
   (REMOVE-DELETED-MEMBERS EXTENSION) (ALLOCATE-ITERATOR EXTENSION)))

;;; (DEFUN (COLLECTION-IMPLIES-COLLECTION? BOOLEAN) ...)

(CL:DEFUN COLLECTION-IMPLIES-COLLECTION? (SUBCOLLECTION SUPERCOLLECTION)
  (CL:WHEN (CL:EQ SUBCOLLECTION SUPERCOLLECTION)
   (CL:RETURN-FROM COLLECTION-IMPLIES-COLLECTION? TRUE))
  (CL:IF *REVERSEPOLARITY?*
   (HELP-COLLECTION-IMPLIES-COLLECTION? (VALUE-OF SUPERCOLLECTION)
    (VALUE-OF SUBCOLLECTION) NIL SGT-BACKLINKS-LOGIC-LOGIC-OBJECT)
   (HELP-COLLECTION-IMPLIES-COLLECTION? (VALUE-OF SUBCOLLECTION)
    (VALUE-OF SUPERCOLLECTION) NIL SGT-BACKLINKS-LOGIC-LOGIC-OBJECT)))

;;; (DEFUN (HELP-COLLECTION-IMPLIES-COLLECTION? BOOLEAN) ...)

(CL:DEFUN HELP-COLLECTION-IMPLIES-COLLECTION? (SUBDESC SUPERDESC ALREADYVISITED FILTERTYPE)
  (CL:LET*
   ((RULE NULL)
    (ITER-000
     (ALLOCATE-ITERATOR
      (%BACKLINKS-INDEX.DEPENDENT-PROPOSITIONS-LIST
       (GET-BACKLINKS-INDEX SUBDESC)))))
   (CL:LOOP WHILE (NEXT? ITER-000) DO
    (CL:SETQ RULE (%ITERATOR.VALUE ITER-000))
    (CL:WHEN
     (CL:AND (CL:EQ (%PROPOSITION.KIND RULE) KWD-BACKLINKS-IMPLIES)
      (CL:EQ
       (CL:AREF
        (CL:THE CL:SIMPLE-VECTOR
         (%VECTOR.THE-ARRAY (%PROPOSITION.ARGUMENTS RULE)))
        0)
       SUBDESC)
      (TRUE? RULE))
     (CL:LET*
      ((PARENT
        (VALUE-OF
         (CL:AREF
          (CL:THE CL:SIMPLE-VECTOR
           (%VECTOR.THE-ARRAY (%PROPOSITION.ARGUMENTS RULE)))
          1))))
      (CL:WHEN
       (CL:OR (CL:EQ PARENT SUPERDESC)
        (CL:AND (CL:NOT (MEMBER? ALREADYVISITED PARENT))
         (HELP-COLLECTION-IMPLIES-COLLECTION? (VALUE-OF PARENT) SUPERDESC
          (CONS SUBDESC ALREADYVISITED) FILTERTYPE)))
       (CL:RETURN-FROM HELP-COLLECTION-IMPLIES-COLLECTION? TRUE))))))
  (CL:LET* ((TEST-VALUE-000 FALSE))
   (CL:SETQ TEST-VALUE-000
    (CL:NOT (CL:EQ (VARIABLE-VALUE-INVERSE SUBDESC) NIL)))
   (CL:WHEN TEST-VALUE-000
    (CL:LET* ((FOUND?-000 FALSE))
     (CL:LET* ((SKOLEM NULL) (ITER-001 (VARIABLE-VALUE-INVERSE SUBDESC)))
      (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
       (CL:PROGN (CL:SETQ SKOLEM (%%VALUE ITER-001))
        (CL:SETQ ITER-001 (%%REST ITER-001)))
       (CL:WHEN
        (HELP-COLLECTION-IMPLIES-COLLECTION? SKOLEM SUPERDESC
         (CONS SUBDESC ALREADYVISITED) FILTERTYPE)
        (CL:SETQ FOUND?-000 TRUE) (CL:RETURN))))
     (CL:SETQ TEST-VALUE-000 FOUND?-000)))
   (CL:WHEN TEST-VALUE-000
    (CL:RETURN-FROM HELP-COLLECTION-IMPLIES-COLLECTION? TRUE)))
  FALSE)

;;; (DEFUN (RELATION-IMPLIES-RELATION? BOOLEAN) ...)

(CL:DEFUN RELATION-IMPLIES-RELATION? (SUBREL SUPERREL)
  (CL:LET*
   ((MEMO-TABLE-000
     (%SURROGATE.SURROGATE-VALUE
      SGT-BACKLINKS-LOGIC-RELATION-IMPLIES-RELATION?-MEMO-TABLE-000))
    (MEMOIZED-ENTRY-000 NULL) (MEMOIZED-VALUE-000 NULL))
   (CL:WHEN (CL:EQ MEMO-TABLE-000 NULL)
    (INITIALIZE-MEMOIZATION-TABLE
     SGT-BACKLINKS-LOGIC-RELATION-IMPLIES-RELATION?-MEMO-TABLE-000
     "(:MAX-VALUES 500 :TIMESTAMPS (:META-KB-UPDATE))")
    (CL:SETQ MEMO-TABLE-000
     (%SURROGATE.SURROGATE-VALUE
      SGT-BACKLINKS-LOGIC-RELATION-IMPLIES-RELATION?-MEMO-TABLE-000)))
   (CL:WHEN *MEMOIZATION-ENABLED?*
    (CL:SETQ MEMOIZED-ENTRY-000
     (LOOKUP-MRU-MEMOIZED-VALUE MEMO-TABLE-000 SUBREL SUPERREL *CONTEXT*
      MEMOIZED-NULL-VALUE -1))
    (CL:SETQ MEMOIZED-VALUE-000 (%%VALUE MEMOIZED-ENTRY-000)))
   (CL:COND
    ((CL:NOT (CL:EQ MEMOIZED-VALUE-000 NULL))
     (CL:WHEN (CL:EQ MEMOIZED-VALUE-000 MEMOIZED-NULL-VALUE)
      (CL:SETQ MEMOIZED-VALUE-000 NULL)))
    (CL:T
     (CL:SETQ MEMOIZED-VALUE-000
      (CL:IF
       (DESCRIPTION-IMPLIES-DESCRIPTION-INTERNAL? SUBREL SUPERREL TRUE)
       TRUE-WRAPPER FALSE-WRAPPER))
     (CL:WHEN *MEMOIZATION-ENABLED?*
      (CL:SETF (%%VALUE MEMOIZED-ENTRY-000)
       (CL:IF (CL:EQ MEMOIZED-VALUE-000 NULL) MEMOIZED-NULL-VALUE
        MEMOIZED-VALUE-000)))))
   (CL:LET* ((VALUE-000 MEMOIZED-VALUE-000))
    (COERCE-WRAPPED-BOOLEAN-TO-BOOLEAN VALUE-000))))

;;; (DEFUN (DESCRIPTION-IMPLIES-DESCRIPTION? BOOLEAN) ...)

(CL:DEFUN DESCRIPTION-IMPLIES-DESCRIPTION? (SUBDESC SUPERDESC)
  (CL:LET*
   ((MEMO-TABLE-000
     (%SURROGATE.SURROGATE-VALUE
      SGT-BACKLINKS-LOGIC-DESCRIPTION-IMPLIES-DESCRIPTION?-MEMO-TABLE-000))
    (MEMOIZED-ENTRY-000 NULL) (MEMOIZED-VALUE-000 NULL))
   (CL:WHEN (CL:EQ MEMO-TABLE-000 NULL)
    (INITIALIZE-MEMOIZATION-TABLE
     SGT-BACKLINKS-LOGIC-DESCRIPTION-IMPLIES-DESCRIPTION?-MEMO-TABLE-000
     "(:MAX-VALUES 500 :TIMESTAMPS (:META-KB-UPDATE))")
    (CL:SETQ MEMO-TABLE-000
     (%SURROGATE.SURROGATE-VALUE
      SGT-BACKLINKS-LOGIC-DESCRIPTION-IMPLIES-DESCRIPTION?-MEMO-TABLE-000)))
   (CL:WHEN *MEMOIZATION-ENABLED?*
    (CL:SETQ MEMOIZED-ENTRY-000
     (LOOKUP-MRU-MEMOIZED-VALUE MEMO-TABLE-000 SUBDESC SUPERDESC *CONTEXT*
      MEMOIZED-NULL-VALUE -1))
    (CL:SETQ MEMOIZED-VALUE-000 (%%VALUE MEMOIZED-ENTRY-000)))
   (CL:COND
    ((CL:NOT (CL:EQ MEMOIZED-VALUE-000 NULL))
     (CL:WHEN (CL:EQ MEMOIZED-VALUE-000 MEMOIZED-NULL-VALUE)
      (CL:SETQ MEMOIZED-VALUE-000 NULL)))
    (CL:T
     (CL:SETQ MEMOIZED-VALUE-000
      (CL:IF
       (DESCRIPTION-IMPLIES-DESCRIPTION-INTERNAL? SUBDESC SUPERDESC FALSE)
       TRUE-WRAPPER FALSE-WRAPPER))
     (CL:WHEN *MEMOIZATION-ENABLED?*
      (CL:SETF (%%VALUE MEMOIZED-ENTRY-000)
       (CL:IF (CL:EQ MEMOIZED-VALUE-000 NULL) MEMOIZED-NULL-VALUE
        MEMOIZED-VALUE-000)))))
   (CL:LET* ((VALUE-000 MEMOIZED-VALUE-000))
    (COERCE-WRAPPED-BOOLEAN-TO-BOOLEAN VALUE-000))))

;;; (DEFUN (DESCRIPTION-IMPLIES-DESCRIPTION-INTERNAL? BOOLEAN) ...)

(CL:DEFUN DESCRIPTION-IMPLIES-DESCRIPTION-INTERNAL? (SUBDESC SUPERDESC NAMEDONLY?)
  (CL:WHEN (CL:EQ SUBDESC SUPERDESC)
   (CL:RETURN-FROM DESCRIPTION-IMPLIES-DESCRIPTION-INTERNAL? TRUE))
  (CL:LET* ((TEST-VALUE-000 FALSE))
   (CL:LET* ((FOUND?-000 FALSE))
    (CL:LET*
     ((RULE NULL)
      (ITER-000
       (ALLOCATE-ITERATOR
        (%BACKLINKS-INDEX.DEPENDENT-PROPOSITIONS-LIST
         (GET-BACKLINKS-INDEX SUPERDESC)))))
     (CL:LOOP WHILE (NEXT? ITER-000) DO
      (CL:SETQ RULE (%ITERATOR.VALUE ITER-000))
      (CL:WHEN
       (CL:AND (CL:EQ (%PROPOSITION.KIND RULE) KWD-BACKLINKS-IMPLIES)
        (CL:AND
         (CL:EQ
          (CL:AREF
           (CL:THE CL:SIMPLE-VECTOR
            (%VECTOR.THE-ARRAY (%PROPOSITION.ARGUMENTS RULE)))
           1)
          SUPERDESC)
         (ISA?
          (CL:AREF
           (CL:THE CL:SIMPLE-VECTOR
            (%VECTOR.THE-ARRAY (%PROPOSITION.ARGUMENTS RULE)))
           0)
          (CL:IF NAMEDONLY? SGT-BACKLINKS-LOGIC-NAMED-DESCRIPTION
           SGT-BACKLINKS-LOGIC-DESCRIPTION)))
        (TRUE? RULE))
       (CL:SETQ FOUND?-000 TRUE) (CL:RETURN))))
    (CL:SETQ TEST-VALUE-000 FOUND?-000))
   (CL:WHEN TEST-VALUE-000
    (CL:SETQ TEST-VALUE-000
     (HELP-DESCRIPTION-IMPLIES-DESCRIPTION-INTERNAL? SUBDESC SUPERDESC NIL
      NAMEDONLY?)))
   (CL:LET* ((VALUE-000 TEST-VALUE-000)) VALUE-000)))

;;; (DEFUN (HELP-DESCRIPTION-IMPLIES-DESCRIPTION-INTERNAL? BOOLEAN) ...)

(CL:DEFUN HELP-DESCRIPTION-IMPLIES-DESCRIPTION-INTERNAL? (SUBDESC SUPERDESC ALREADYVISITED NAMEDONLY?)
  (CL:LET*
   ((RULE NULL)
    (ITER-000
     (ALLOCATE-ITERATOR
      (%BACKLINKS-INDEX.DEPENDENT-PROPOSITIONS-LIST
       (GET-BACKLINKS-INDEX SUBDESC)))))
   (CL:LOOP WHILE (NEXT? ITER-000) DO
    (CL:SETQ RULE (%ITERATOR.VALUE ITER-000))
    (CL:WHEN
     (CL:AND (CL:EQ (%PROPOSITION.KIND RULE) KWD-BACKLINKS-IMPLIES)
      (CL:EQ
       (CL:AREF
        (CL:THE CL:SIMPLE-VECTOR
         (%VECTOR.THE-ARRAY (%PROPOSITION.ARGUMENTS RULE)))
        0)
       SUBDESC)
      (TRUE? RULE))
     (CL:LET*
      ((PARENT
        (CL:AREF
         (CL:THE CL:SIMPLE-VECTOR
          (%VECTOR.THE-ARRAY (%PROPOSITION.ARGUMENTS RULE)))
         1)))
      (CL:WHEN
       (CL:OR (CL:EQ PARENT SUPERDESC)
        (CL:AND (CL:NOT (MEMBER? ALREADYVISITED PARENT))
         (ISA? PARENT
          (CL:IF NAMEDONLY? SGT-BACKLINKS-LOGIC-NAMED-DESCRIPTION
           SGT-BACKLINKS-LOGIC-DESCRIPTION))
         (HELP-DESCRIPTION-IMPLIES-DESCRIPTION-INTERNAL? PARENT SUPERDESC
          (CONS SUBDESC ALREADYVISITED) NAMEDONLY?)))
       (CL:RETURN-FROM HELP-DESCRIPTION-IMPLIES-DESCRIPTION-INTERNAL?
        TRUE))))))
  FALSE)

;;; (DEFUN (RELATIONREF-SPECIALIZES-RELATIONREF? BOOLEAN) ...)

(CL:DEFUN RELATIONREF-SPECIALIZES-RELATIONREF? (RELATIONREF1 RELATIONREF2)
  (CL:WHEN (CL:EQ RELATIONREF1 RELATIONREF2)
   (CL:RETURN-FROM RELATIONREF-SPECIALIZES-RELATIONREF? TRUE))
  (CL:LET*
   ((DESC1 (SURROGATE-TO-DESCRIPTION RELATIONREF1))
    (DESC2 (SURROGATE-TO-DESCRIPTION RELATIONREF2)))
   (CL:AND (CL:NOT (CL:EQ DESC1 NULL)) (CL:NOT (CL:EQ DESC2 NULL))
    (CL:IF *REVERSEPOLARITY?* (RELATION-IMPLIES-RELATION? DESC2 DESC1)
     (RELATION-IMPLIES-RELATION? DESC1 DESC2)))))

;;; (DEFUN LOG-TO-SECONDARY-STORAGE-MANAGER ...)

(CL:DEFUN LOG-TO-SECONDARY-STORAGE-MANAGER (SELF)
  (CL:COND
   ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE SELF) SGT-BACKLINKS-LOGIC-PROPOSITION)
    (CL:PROGN
     (CL:WHEN
      (NULL-LIST?
       (DYNAMIC-SLOT-VALUE (%MODULE.DYNAMIC-SLOTS *MODULE*)
        SYM-BACKLINKS-LOGIC-SECONDARY-STORAGE-PROPOSITIONS NULL))
      (SET-DYNAMIC-SLOT-VALUE (%MODULE.DYNAMIC-SLOTS *MODULE*)
       SYM-BACKLINKS-LOGIC-SECONDARY-STORAGE-PROPOSITIONS (LIST) NULL))
     (PUSH
      (DYNAMIC-SLOT-VALUE (%MODULE.DYNAMIC-SLOTS *MODULE*)
       SYM-BACKLINKS-LOGIC-SECONDARY-STORAGE-PROPOSITIONS NULL)
      SELF)))
   (CL:T
    (CL:WHEN
     (NULL-LIST?
      (DYNAMIC-SLOT-VALUE (%MODULE.DYNAMIC-SLOTS *MODULE*)
       SYM-BACKLINKS-LOGIC-SECONDARY-STORAGE-INSTANCES NULL))
     (SET-DYNAMIC-SLOT-VALUE (%MODULE.DYNAMIC-SLOTS *MODULE*)
      SYM-BACKLINKS-LOGIC-SECONDARY-STORAGE-INSTANCES (LIST) NULL))
    (PUSH
     (DYNAMIC-SLOT-VALUE (%MODULE.DYNAMIC-SLOTS *MODULE*)
      SYM-BACKLINKS-LOGIC-SECONDARY-STORAGE-INSTANCES NULL)
     SELF))))

;;; (DEFUN CLEAN-UP-PAGING-STORAGE ...)

(CL:DEFUN CLEAN-UP-PAGING-STORAGE (CLEAREDMODULE)
  (CL:LET* ((M NULL) (ITER-000 (ALL-REGENERABLE-MODULES)))
   (CL:LOOP WHILE (NEXT? ITER-000) DO
    (CL:SETQ M (%ITERATOR.VALUE ITER-000))
    (CL:WHEN
     (CL:NOT
      (CL:EQ
       (DYNAMIC-SLOT-VALUE (%MODULE.DYNAMIC-SLOTS M)
        SYM-BACKLINKS-LOGIC-SECONDARY-STORAGE-PROPOSITIONS NULL)
       NULL))
     (REMOVE-DELETED-MEMBERS
      (DYNAMIC-SLOT-VALUE (%MODULE.DYNAMIC-SLOTS M)
       SYM-BACKLINKS-LOGIC-SECONDARY-STORAGE-PROPOSITIONS NULL)))
    (CL:WHEN
     (CL:NOT
      (CL:EQ
       (DYNAMIC-SLOT-VALUE (%MODULE.DYNAMIC-SLOTS M)
        SYM-BACKLINKS-LOGIC-SECONDARY-STORAGE-INSTANCES NULL)
       NULL))
     (REMOVE-DELETED-MEMBERS
      (DYNAMIC-SLOT-VALUE (%MODULE.DYNAMIC-SLOTS M)
       SYM-BACKLINKS-LOGIC-SECONDARY-STORAGE-INSTANCES NULL)))))
  (REMOVE-OBSOLETE-PAGING-INDICES CLEAREDMODULE))

;;; (DEFUN (REGENERABLE-PROPOSITIONS-NEXT? BOOLEAN) ...)

(CL:DEFUN REGENERABLE-PROPOSITIONS-NEXT? (SELF)
  (CL:LET* ((PROPOSITION NULL))
   (CL:LOOP
    (CL:LOOP
     (CL:LET* ()
      (CL:SETQ PROPOSITION
       (%%VALUE (%ALL-PURPOSE-ITERATOR.ITERATOR-CONS-LIST SELF)))
      (CL:WHEN (CL:EQ PROPOSITION NULL) (CL:RETURN)))
     (CL:SETF (%ALL-PURPOSE-ITERATOR.ITERATOR-CONS-LIST SELF)
      (%%REST (%ALL-PURPOSE-ITERATOR.ITERATOR-CONS-LIST SELF)))
     (CL:SETF (%ALL-PURPOSE-ITERATOR.VALUE SELF) PROPOSITION)
     (CL:RETURN-FROM REGENERABLE-PROPOSITIONS-NEXT? TRUE))
    (CL:WHEN
     (CL:NOT
      (NEXT? (%ALL-PURPOSE-ITERATOR.ITERATOR-NESTED-ITERATOR SELF)))
     (CL:RETURN-FROM REGENERABLE-PROPOSITIONS-NEXT? FALSE))
    (CL:SETF (%ALL-PURPOSE-ITERATOR.ITERATOR-CONS-LIST SELF)
     (%LIST.THE-CONS-LIST
      (DYNAMIC-SLOT-VALUE
       (%MODULE.DYNAMIC-SLOTS
        (%ITERATOR.VALUE
         (%ALL-PURPOSE-ITERATOR.ITERATOR-NESTED-ITERATOR SELF)))
       SYM-BACKLINKS-LOGIC-SECONDARY-STORAGE-PROPOSITIONS NULL))))))

;;; (DEFUN (ALL-SECONDARY-STORAGE-PROPOSITIONS (ITERATOR OF PROPOSITION)) ...)

(CL:DEFUN ALL-SECONDARY-STORAGE-PROPOSITIONS ()
  (CL:LET* ((ITERATOR (NEW-ALL-PURPOSE-ITERATOR)))
   (CL:SETF (%ALL-PURPOSE-ITERATOR.ITERATOR-NEXT-CODE ITERATOR)
    (CL:FUNCTION REGENERABLE-PROPOSITIONS-NEXT?))
   (CL:SETF (%ALL-PURPOSE-ITERATOR.ITERATOR-NESTED-ITERATOR ITERATOR)
    (ALL-REGENERABLE-MODULES))
   (CL:SETF (%ALL-PURPOSE-ITERATOR.ITERATOR-CONS-LIST ITERATOR) NIL)
   ITERATOR))

;;; (DEFUN (REGENERABLE-INSTANCES-NEXT? BOOLEAN) ...)

(CL:DEFUN REGENERABLE-INSTANCES-NEXT? (SELF)
  (CL:LET* ((INSTANCE NULL))
   (CL:LOOP
    (CL:LOOP
     (CL:LET* ()
      (CL:SETQ INSTANCE
       (%%VALUE (%ALL-PURPOSE-ITERATOR.ITERATOR-CONS-LIST SELF)))
      (CL:WHEN (CL:EQ INSTANCE NULL) (CL:RETURN)))
     (CL:SETF (%ALL-PURPOSE-ITERATOR.ITERATOR-CONS-LIST SELF)
      (%%REST (%ALL-PURPOSE-ITERATOR.ITERATOR-CONS-LIST SELF)))
     (CL:SETF (%ALL-PURPOSE-ITERATOR.VALUE SELF) INSTANCE)
     (CL:RETURN-FROM REGENERABLE-INSTANCES-NEXT? TRUE))
    (CL:WHEN
     (CL:NOT
      (NEXT? (%ALL-PURPOSE-ITERATOR.ITERATOR-NESTED-ITERATOR SELF)))
     (CL:RETURN-FROM REGENERABLE-INSTANCES-NEXT? FALSE))
    (CL:SETF (%ALL-PURPOSE-ITERATOR.ITERATOR-CONS-LIST SELF)
     (%LIST.THE-CONS-LIST
      (DYNAMIC-SLOT-VALUE
       (%MODULE.DYNAMIC-SLOTS
        (%ITERATOR.VALUE
         (%ALL-PURPOSE-ITERATOR.ITERATOR-NESTED-ITERATOR SELF)))
       SYM-BACKLINKS-LOGIC-SECONDARY-STORAGE-INSTANCES NULL))))))

;;; (DEFUN (ALL-SECONDARY-STORAGE-INSTANCES (ITERATOR OF OBJECT)) ...)

(CL:DEFUN ALL-SECONDARY-STORAGE-INSTANCES ()
  (CL:LET* ((ITERATOR (NEW-ALL-PURPOSE-ITERATOR)))
   (CL:SETF (%ALL-PURPOSE-ITERATOR.ITERATOR-NEXT-CODE ITERATOR)
    (CL:FUNCTION REGENERABLE-INSTANCES-NEXT?))
   (CL:SETF (%ALL-PURPOSE-ITERATOR.ITERATOR-NESTED-ITERATOR ITERATOR)
    (ALL-REGENERABLE-MODULES))
   (CL:SETF (%ALL-PURPOSE-ITERATOR.ITERATOR-CONS-LIST ITERATOR) NIL)
   ITERATOR))

;;; (DEFMETHOD (REGENERATE-PAGING-INDEX CONS) ...)

(CL:DEFMETHOD REGENERATE-PAGING-INDEX ((SELF PAGING-INDEX))
  (CL:LET*
   ((REGENERATIONSCHEME (%PAGING-INDEX.REGENERATION-SCHEME SELF))
    (SCHEME (%%VALUE REGENERATIONSCHEME))
    (FIRSTARG (%%VALUE (%%REST REGENERATIONSCHEME)))
    (SECONDARG (%%VALUE (%%REST (%%REST REGENERATIONSCHEME))))
    (MEMBERS NIL))
   (CL:COND
    ((CL:EQ SCHEME KWD-BACKLINKS-DEPENDENTS)
     (CL:LET* ((P NULL) (ITER-000 (ALL-SECONDARY-STORAGE-PROPOSITIONS)))
      (CL:LOOP WHILE (NEXT? ITER-000) DO
       (CL:SETQ P (%ITERATOR.VALUE ITER-000))
       (CL:WHEN (MEMBER? (%PROPOSITION.ARGUMENTS P) FIRSTARG)
        (CL:SETQ MEMBERS (CONS P MEMBERS))))))
    ((CL:EQ SCHEME KWD-BACKLINKS-BUCKET)
     (CL:LET* ((P NULL) (ITER-001 (ALL-SECONDARY-STORAGE-PROPOSITIONS)))
      (CL:LOOP WHILE (NEXT? ITER-001) DO
       (CL:SETQ P (%ITERATOR.VALUE ITER-001))
       (CL:WHEN
        (CL:AND (MEMBER? (%PROPOSITION.ARGUMENTS P) FIRSTARG)
         (CL:EQ (%PROPOSITION.OPERATOR P) SECONDARG))
        (CL:SETQ MEMBERS (CONS P MEMBERS))))))
    ((CL:EQ SCHEME KWD-BACKLINKS-RELATION-EXTENSION)
     (CL:LET* ((P NULL) (ITER-002 (ALL-SECONDARY-STORAGE-PROPOSITIONS)))
      (CL:LOOP WHILE (NEXT? ITER-002) DO
       (CL:SETQ P (%ITERATOR.VALUE ITER-002))
       (CL:WHEN (CL:EQ (%PROPOSITION.OPERATOR P) FIRSTARG)
        (CL:SETQ MEMBERS (CONS P MEMBERS))))))
    ((CL:EQ SCHEME KWD-BACKLINKS-ISA)
     (CL:LET* ((P NULL) (ITER-003 (ALL-SECONDARY-STORAGE-PROPOSITIONS)))
      (CL:LOOP WHILE (NEXT? ITER-003) DO
       (CL:SETQ P (%ITERATOR.VALUE ITER-003))
       (CL:WHEN
        (CL:AND (CL:EQ (%PROPOSITION.KIND P) KWD-BACKLINKS-ISA)
         (MEMBER? (%PROPOSITION.ARGUMENTS P) FIRSTARG))
        (CL:SETQ MEMBERS (CONS P MEMBERS))))))
    ((CL:EQ SCHEME KWD-BACKLINKS-CONTEXT-PROPOSITIONS)
     (CL:LET* ((P NULL) (ITER-004 (ALL-SECONDARY-STORAGE-PROPOSITIONS)))
      (CL:LOOP WHILE (NEXT? ITER-004) DO
       (CL:SETQ P (%ITERATOR.VALUE ITER-004))
       (CL:WHEN (CL:EQ (%PROPOSITION.HOME-CONTEXT P) FIRSTARG)
        (CL:SETQ MEMBERS (CONS P MEMBERS))))))
    ((CL:EQ SCHEME KWD-BACKLINKS-CONTEXT-INSTANCES)
     (CL:LET* ((I NULL) (ITER-005 (ALL-SECONDARY-STORAGE-INSTANCES)))
      (CL:LOOP WHILE (NEXT? ITER-005) DO
       (CL:SETQ I (%ITERATOR.VALUE ITER-005))
       (CL:WHEN
        (CL:AND (ISA? I SGT-BACKLINKS-LOGIC-LOGIC-OBJECT)
         (CL:EQ (%LOGIC-OBJECT.HOME-CONTEXT I) FIRSTARG))
        (CL:SETQ MEMBERS (CONS I MEMBERS))))))
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
       SCHEME "' is not a valid case option")
      (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
   (CL:SETQ MEMBERS (REMOVE-DELETED-MEMBERS MEMBERS))
   (CL:SETF (%PAGING-INDEX.THE-REGENERABLE-SEQUENCE SELF) MEMBERS)
   (CL:SETF (%PAGING-INDEX.SEQUENCE-LENGTH SELF)
    (CL:+ (LENGTH MEMBERS) (LENGTH (%PAGING-INDEX.THE-SEQUENCE SELF))))
   MEMBERS))

(CL:DEFUN HELP-STARTUP-BACKLINKS1 ()
  (CL:PROGN
   (CL:SETQ SGT-BACKLINKS-LOGIC-PATTERN-VARIABLE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PATTERN-VARIABLE" NULL 1))
   (CL:SETQ KWD-BACKLINKS-NON-PAGING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NON-PAGING" NULL 2))
   (CL:SETQ KWD-BACKLINKS-DEPENDENTS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DEPENDENTS" NULL 2))
   (CL:SETQ SGT-BACKLINKS-LOGIC-INTEGER-LOGIC-WRAPPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INTEGER-LOGIC-WRAPPER" NULL 1))
   (CL:SETQ SGT-BACKLINKS-LOGIC-FLOAT-LOGIC-WRAPPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FLOAT-LOGIC-WRAPPER" NULL 1))
   (CL:SETQ SGT-BACKLINKS-LOGIC-STRING-LOGIC-WRAPPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STRING-LOGIC-WRAPPER" NULL 1))
   (CL:SETQ SYM-BACKLINKS-LOGIC-DEPENDENT-PROPOSITIONS-INDEX
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DEPENDENT-PROPOSITIONS-INDEX" NULL
     0))
   (CL:SETQ SGT-BACKLINKS-LOGIC-LOGIC-OBJECT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LOGIC-OBJECT" NULL 1))
   (CL:SETQ SGT-BACKLINKS-STELLA-THING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "THING"
     (GET-STELLA-MODULE "/STELLA" TRUE) 1))
   (CL:SETQ KWD-BACKLINKS-ISA
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ISA" NULL 2))
   (CL:SETQ KWD-BACKLINKS-BUCKET
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BUCKET" NULL 2))
   (CL:SETQ KWD-BACKLINKS-CONSTANT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONSTANT" NULL 2))
   (CL:SETQ SGT-BACKLINKS-LOGIC-DESCRIPTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DESCRIPTION" NULL 1))
   (CL:SETQ SYM-BACKLINKS-LOGIC-COMPLEMENT-DESCRIPTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "COMPLEMENT-DESCRIPTION" NULL 0))
   (CL:SETQ SGT-BACKLINKS-LOGIC-SKOLEM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SKOLEM" NULL 1))
   (CL:SETQ SGT-BACKLINKS-LOGIC-PROPOSITION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PROPOSITION" NULL 1))
   (CL:SETQ SGT-BACKLINKS-STELLA-INTEGER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INTEGER"
     (GET-STELLA-MODULE "/STELLA" TRUE) 1))
   (CL:SETQ SGT-BACKLINKS-STELLA-FLOAT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FLOAT"
     (GET-STELLA-MODULE "/STELLA" TRUE) 1))
   (CL:SETQ SGT-BACKLINKS-STELLA-STRING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STRING"
     (GET-STELLA-MODULE "/STELLA" TRUE) 1))
   (CL:SETQ SGT-BACKLINKS-STELLA-LITERAL-WRAPPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LITERAL-WRAPPER"
     (GET-STELLA-MODULE "/STELLA" TRUE) 1))
   (CL:SETQ SGT-BACKLINKS-STELLA-LITERAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LITERAL"
     (GET-STELLA-MODULE "/STELLA" TRUE) 1))
   (CL:SETQ SGT-BACKLINKS-PL-KERNEL-KB-SUBSET-OF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SUBSET-OF"
     (GET-STELLA-MODULE "/PL-KERNEL-KB" TRUE) 1))
   (CL:SETQ SYM-BACKLINKS-LOGIC-MASTER-PROPOSITION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MASTER-PROPOSITION" NULL 0))
   (CL:SETQ KWD-BACKLINKS-IMPLIES
    (INTERN-RIGID-SYMBOL-WRT-MODULE "IMPLIES" NULL 2))
   (CL:SETQ KWD-BACKLINKS-FORWARD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FORWARD" NULL 2))
   (CL:SETQ SYM-BACKLINKS-LOGIC-SUBSUMPTION-LINK?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SUBSUMPTION-LINK?" NULL 0))
   (CL:SETQ SGT-BACKLINKS-LOGIC-NAMED-DESCRIPTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NAMED-DESCRIPTION" NULL 1))
   (CL:SETQ KWD-BACKLINKS-PREDICATE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PREDICATE" NULL 2))
   (CL:SETQ KWD-BACKLINKS-FUNCTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FUNCTION" NULL 2))
   (CL:SETQ KWD-BACKLINKS-EQUIVALENT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "EQUIVALENT" NULL 2))
   (CL:SETQ KWD-BACKLINKS-PAGING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PAGING" NULL 2))
   (CL:SETQ KWD-BACKLINKS-RELATION-EXTENSION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "RELATION-EXTENSION" NULL 2))
   (CL:SETQ SYM-BACKLINKS-LOGIC-HYPOTHESIZED-INSTANCE?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "HYPOTHESIZED-INSTANCE?" NULL 0))
   (CL:SETQ SGT-BACKLINKS-LOGIC-RELATION-IMPLIES-RELATION?-MEMO-TABLE-000
    (INTERN-RIGID-SYMBOL-WRT-MODULE
     "RELATION-IMPLIES-RELATION?-MEMO-TABLE-000" NULL 1))
   (CL:SETQ
    SGT-BACKLINKS-LOGIC-DESCRIPTION-IMPLIES-DESCRIPTION?-MEMO-TABLE-000
    (INTERN-RIGID-SYMBOL-WRT-MODULE
     "DESCRIPTION-IMPLIES-DESCRIPTION?-MEMO-TABLE-000" NULL 1))
   (CL:SETQ SYM-BACKLINKS-LOGIC-SECONDARY-STORAGE-PROPOSITIONS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SECONDARY-STORAGE-PROPOSITIONS" NULL
     0))
   (CL:SETQ SYM-BACKLINKS-LOGIC-SECONDARY-STORAGE-INSTANCES
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SECONDARY-STORAGE-INSTANCES" NULL 0))
   (CL:SETQ KWD-BACKLINKS-CONTEXT-PROPOSITIONS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTEXT-PROPOSITIONS" NULL 2))
   (CL:SETQ KWD-BACKLINKS-CONTEXT-INSTANCES
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTEXT-INSTANCES" NULL 2))
   (CL:SETQ SYM-BACKLINKS-LOGIC-STARTUP-BACKLINKS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-BACKLINKS" NULL 0))
   (CL:SETQ SYM-BACKLINKS-STELLA-METHOD-STARTUP-CLASSNAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))))

(CL:DEFUN HELP-STARTUP-BACKLINKS2 ()
  (CL:PROGN
   (DEFINE-FUNCTION-OBJECT "TYPE-HAS-BACKLINKS?"
    "(DEFUN (TYPE-HAS-BACKLINKS? BOOLEAN) ((TYPE TYPE)))"
    (CL:FUNCTION TYPE-HAS-BACKLINKS?) NULL)
   (DEFINE-EXTERNAL-SLOT-FROM-STRINGIFIED-SOURCE
    "(DEFSLOT THING DEPENDENT-PROPOSITIONS-INDEX :TYPE BACKLINKS-INDEX :DOCUMENTATION \"Enables instances of 'THING' to have backindexes to 
propositions, making them first class logic objects.\" :PUBLIC? TRUE :ALLOCATION :DYNAMIC)")
   (DEFINE-EXTERNAL-SLOT-FROM-STRINGIFIED-SOURCE
    "(DEFSLOT PROPOSITION DEPENDENT-PROPOSITIONS-INDEX :TYPE BACKLINKS-INDEX :DOCUMENTATION \"Enables instances of 'PROPOSITION' to have (standard)
backindexes to propositions (as well as their own special ones), making them
first class logic objects.\" :PUBLIC? TRUE :ALLOCATION :DYNAMIC)")
   (DEFINE-FUNCTION-OBJECT "CREATE-BACKLINKS-INDEX"
    "(DEFUN (CREATE-BACKLINKS-INDEX BACKLINKS-INDEX) ((SELF OBJECT)))"
    (CL:FUNCTION CREATE-BACKLINKS-INDEX) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-BACKLINKS-INDEX"
    "(DEFUN (GET-BACKLINKS-INDEX BACKLINKS-INDEX) ((SELF OBJECT)))"
    (CL:FUNCTION GET-BACKLINKS-INDEX) NULL)
   (DEFINE-FUNCTION-OBJECT
    "ADD-DEPENDENT-PROPOSITION-TO-SPECIALIZED-INDEX"
    "(DEFUN ADD-DEPENDENT-PROPOSITION-TO-SPECIALIZED-INDEX ((INDEX BACKLINKS-INDEX) (PROPOSITION PROPOSITION) (ARGUMENT OBJECT)))"
    (CL:FUNCTION ADD-DEPENDENT-PROPOSITION-TO-SPECIALIZED-INDEX) NULL)
   (DEFINE-FUNCTION-OBJECT "HELP-ADD-DEPENDENT-PROPOSITION"
    "(DEFUN HELP-ADD-DEPENDENT-PROPOSITION ((INDEX BACKLINKS-INDEX) (PROPOSITION PROPOSITION) (ARGUMENT OBJECT)))"
    (CL:FUNCTION HELP-ADD-DEPENDENT-PROPOSITION) NULL)
   (DEFINE-FUNCTION-OBJECT "ADD-DEPENDENT-PROPOSITION-LINK"
    "(DEFUN ADD-DEPENDENT-PROPOSITION-LINK ((SELF OBJECT) (PROPOSITION PROPOSITION)))"
    (CL:FUNCTION ADD-DEPENDENT-PROPOSITION-LINK) NULL)
   (DEFINE-FUNCTION-OBJECT "REMOVE-DEPENDENT-PROPOSITION-LINK"
    "(DEFUN REMOVE-DEPENDENT-PROPOSITION-LINK ((SELF OBJECT) (PROPOSITION PROPOSITION)))"
    (CL:FUNCTION REMOVE-DEPENDENT-PROPOSITION-LINK) NULL)
   (DEFINE-FUNCTION-OBJECT "REMOVE-ALL-DEPENDENT-PROPOSITION-LINKS"
    "(DEFUN REMOVE-ALL-DEPENDENT-PROPOSITION-LINKS ((SELF LOGIC-OBJECT)))"
    (CL:FUNCTION REMOVE-ALL-DEPENDENT-PROPOSITION-LINKS) NULL)
   (DEFINE-FUNCTION-OBJECT "REWRAP-ARGUMENT"
    "(DEFUN (REWRAP-ARGUMENT OBJECT) ((ARGUMENT OBJECT)))"
    (CL:FUNCTION REWRAP-ARGUMENT) NULL)
   (DEFINE-FUNCTION-OBJECT "INDEX-ITH-DOMAIN?"
    "(DEFUN (INDEX-ITH-DOMAIN? BOOLEAN) ((DESCRIPTION NAMED-DESCRIPTION) (I INTEGER)))"
    (CL:FUNCTION INDEX-ITH-DOMAIN?) NULL)
   (DEFINE-FUNCTION-OBJECT "REWRAP-ITH-ARGUMENT?"
    "(DEFUN (REWRAP-ITH-ARGUMENT? BOOLEAN) ((ARGUMENT OBJECT) (PROPOSITION PROPOSITION) (I INTEGER)))"
    (CL:FUNCTION REWRAP-ITH-ARGUMENT?) NULL)
   (DEFINE-FUNCTION-OBJECT "REWRAP-PROPOSITION-ARGUMENTS"
    "(DEFUN REWRAP-PROPOSITION-ARGUMENTS ((SELF PROPOSITION)))"
    (CL:FUNCTION REWRAP-PROPOSITION-ARGUMENTS) NULL)
   (DEFINE-FUNCTION-OBJECT "UNFILTERED-DEPENDENT-PROPOSITIONS"
    "(DEFUN (UNFILTERED-DEPENDENT-PROPOSITIONS PROPOSITIONS-INDEX) ((SELF OBJECT) (RELATION SURROGATE)) :INLINE GET-BACKLINKS-INDEX)"
    (CL:FUNCTION UNFILTERED-DEPENDENT-PROPOSITIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "ALL-SPECIALIZING-DEPENDENT-PROPOSITIONS-NEXT?"
    "(DEFUN (ALL-SPECIALIZING-DEPENDENT-PROPOSITIONS-NEXT? BOOLEAN) ((SELF ALL-PURPOSE-ITERATOR)) :PUBLIC? TRUE)"
    (CL:FUNCTION ALL-SPECIALIZING-DEPENDENT-PROPOSITIONS-NEXT?) NULL)
   (DEFINE-FUNCTION-OBJECT "ALL-SPECIALIZING-DEPENDENT-PROPOSITIONS"
    "(DEFUN (ALL-SPECIALIZING-DEPENDENT-PROPOSITIONS (ITERATOR OF PROPOSITION)) ((SELF OBJECT) (RELATIONREF SURROGATE)) :PUBLIC? TRUE)"
    (CL:FUNCTION ALL-SPECIALIZING-DEPENDENT-PROPOSITIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "UNFILTERED-DEPENDENT-ISA-PROPOSITIONS"
    "(DEFUN (UNFILTERED-DEPENDENT-ISA-PROPOSITIONS PROPOSITIONS-INDEX) ((SELF OBJECT)))"
    (CL:FUNCTION UNFILTERED-DEPENDENT-ISA-PROPOSITIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "UNFILTERED-DEPENDENT-IMPLIES-PROPOSITIONS"
    "(DEFUN (UNFILTERED-DEPENDENT-IMPLIES-PROPOSITIONS PROPOSITIONS-INDEX) ((SELF OBJECT)))"
    (CL:FUNCTION UNFILTERED-DEPENDENT-IMPLIES-PROPOSITIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "INHERITS-TRUTH-FROM-MASTER?"
    "(DEFUN (INHERITS-TRUTH-FROM-MASTER? BOOLEAN) ((SELF PROPOSITION)))"
    (CL:FUNCTION INHERITS-TRUTH-FROM-MASTER?) NULL)
   (DEFINE-FUNCTION-OBJECT "APPLICABLE-RULES-OF-DESCRIPTION"
    "(DEFUN (APPLICABLE-RULES-OF-DESCRIPTION (CONS OF PROPOSITION)) ((SELF LOGIC-OBJECT) (DIRECTION KEYWORD) (TRUERULESONLY? BOOLEAN)))"
    (CL:FUNCTION APPLICABLE-RULES-OF-DESCRIPTION) NULL)
   (DEFINE-FUNCTION-OBJECT "ARGUMENT-DISCOURAGES-BACKLINKS?"
    "(DEFUN (ARGUMENT-DISCOURAGES-BACKLINKS? BOOLEAN) ((SELF OBJECT)) :GLOBALLY-INLINE? TRUE (RETURN (ISA? SELF @NAMED-DESCRIPTION)))"
    (CL:FUNCTION ARGUMENT-DISCOURAGES-BACKLINKS?) NULL)
   (DEFINE-FUNCTION-OBJECT "SURROGATIFY-DISCOURAGED-ARGUMENTS"
    "(DEFUN SURROGATIFY-DISCOURAGED-ARGUMENTS ((SELF PROPOSITION)))"
    (CL:FUNCTION SURROGATIFY-DISCOURAGED-ARGUMENTS) NULL)
   (DEFINE-FUNCTION-OBJECT "COUNT-BACKLINKS-ON-RELATION"
    "(DEFUN (COUNT-BACKLINKS-ON-RELATION INTEGER) ((SELF OBJECT) (KIND KEYWORD) (RELATION SURROGATE)))"
    (CL:FUNCTION COUNT-BACKLINKS-ON-RELATION) NULL)
   (DEFINE-FUNCTION-OBJECT "SELECT-ARGUMENT-WITH-BACKLINKS"
    "(DEFUN (SELECT-ARGUMENT-WITH-BACKLINKS OBJECT BOOLEAN) ((PROPOSITION PROPOSITION)))"
    (CL:FUNCTION SELECT-ARGUMENT-WITH-BACKLINKS) NULL)
   (DEFINE-FUNCTION-OBJECT "INSTANCE-HAS-BACKLINKS?"
    "(DEFUN (INSTANCE-HAS-BACKLINKS? BOOLEAN) ((SELF OBJECT)))"
    (CL:FUNCTION INSTANCE-HAS-BACKLINKS?) NULL)
   (DEFINE-FUNCTION-OBJECT "SELECT-INSTANCE-WITH-BACKLINKS"
    "(DEFUN (SELECT-INSTANCE-WITH-BACKLINKS OBJECT) ((INSTANCES CONS) (RELATION SURROGATE)) :INLINE INSTANCE-HAS-BACKLINKS?)"
    (CL:FUNCTION SELECT-INSTANCE-WITH-BACKLINKS) NULL)
   (DEFINE-FUNCTION-OBJECT "FIND-SIMILAR-PROPOSITIONS"
    "(DEFUN (FIND-SIMILAR-PROPOSITIONS PROPOSITIONS-INDEX) ((SELF PROPOSITION)))"
    (CL:FUNCTION FIND-SIMILAR-PROPOSITIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "FIND-MATCHING-CONCEIVED-PROPOSITION"
    "(DEFUN (FIND-MATCHING-CONCEIVED-PROPOSITION PROPOSITION) ((GOAL PROPOSITION)))"
    (CL:FUNCTION FIND-MATCHING-CONCEIVED-PROPOSITION) NULL)
   (DEFINE-FUNCTION-OBJECT "TRANSFER-PROPOSITIONS-AND-BACKLINKS"
    "(DEFUN TRANSFER-PROPOSITIONS-AND-BACKLINKS ((FROM LOGIC-OBJECT) (TO LOGIC-OBJECT)))"
    (CL:FUNCTION TRANSFER-PROPOSITIONS-AND-BACKLINKS) NULL)
   (DEFINE-FUNCTION-OBJECT "TRANSFER-PROPOSITIONS-EXCEPT-FOR"
    "(DEFUN TRANSFER-PROPOSITIONS-EXCEPT-FOR ((FROM LOGIC-OBJECT) (TO LOGIC-OBJECT) (EXCEPTPROPOSITIONS (LIST OF PROPOSITION))))"
    (CL:FUNCTION TRANSFER-PROPOSITIONS-EXCEPT-FOR) NULL)
   (DEFINE-FUNCTION-OBJECT "TRANSFER-DESCRIPTION-EXTENSION"
    "(DEFUN TRANSFER-DESCRIPTION-EXTENSION ((FROM NAMED-DESCRIPTION) (TO NAMED-DESCRIPTION)))"
    (CL:FUNCTION TRANSFER-DESCRIPTION-EXTENSION) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-DESCRIPTION-EXTENSION"
    "(DEFUN (GET-DESCRIPTION-EXTENSION PROPOSITIONS-INDEX) ((DESCRIPTION NAMED-DESCRIPTION) (UPDATE? BOOLEAN)))"
    (CL:FUNCTION GET-DESCRIPTION-EXTENSION) NULL)
   (DEFINE-FUNCTION-OBJECT "CLEANUP-DESCRIPTION-EXTENSION"
    "(DEFUN CLEANUP-DESCRIPTION-EXTENSION ((DESCRIPTION NAMED-DESCRIPTION)))"
    (CL:FUNCTION CLEANUP-DESCRIPTION-EXTENSION) NULL)
   (DEFINE-FUNCTION-OBJECT "CLEANUP-ALL-DESCRIPTION-EXTENSIONS"
    "(DEFUN CLEANUP-ALL-DESCRIPTION-EXTENSIONS ())"
    (CL:FUNCTION CLEANUP-ALL-DESCRIPTION-EXTENSIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "UPDATE-DESCRIPTION-EXTENSION"
    "(DEFUN UPDATE-DESCRIPTION-EXTENSION ((SELF PROPOSITION)))"
    (CL:FUNCTION UPDATE-DESCRIPTION-EXTENSION) NULL)
   (DEFINE-FUNCTION-OBJECT "ALL-EXTENSION-MEMBERS"
    "(DEFUN (ALL-EXTENSION-MEMBERS ITERATOR) ((DESCRIPTION NAMED-DESCRIPTION)))"
    (CL:FUNCTION ALL-EXTENSION-MEMBERS) NULL)
   (DEFINE-FUNCTION-OBJECT "COLLECTION-IMPLIES-COLLECTION?"
    "(DEFUN (COLLECTION-IMPLIES-COLLECTION? BOOLEAN) ((SUBCOLLECTION LOGIC-OBJECT) (SUPERCOLLECTION LOGIC-OBJECT)))"
    (CL:FUNCTION COLLECTION-IMPLIES-COLLECTION?) NULL)
   (DEFINE-FUNCTION-OBJECT "HELP-COLLECTION-IMPLIES-COLLECTION?"
    "(DEFUN (HELP-COLLECTION-IMPLIES-COLLECTION? BOOLEAN) ((SUBDESC LOGIC-OBJECT) (SUPERDESC LOGIC-OBJECT) (ALREADYVISITED CONS) (FILTERTYPE SURROGATE)))"
    (CL:FUNCTION HELP-COLLECTION-IMPLIES-COLLECTION?) NULL)
   (DEFINE-FUNCTION-OBJECT "RELATION-IMPLIES-RELATION?"
    "(DEFUN (RELATION-IMPLIES-RELATION? BOOLEAN) ((SUBREL NAMED-DESCRIPTION) (SUPERREL NAMED-DESCRIPTION)) :INLINE DESCRIPTION-IMPLIES-DESCRIPTION-INTERNAL?)"
    (CL:FUNCTION RELATION-IMPLIES-RELATION?) NULL)
   (DEFINE-FUNCTION-OBJECT "DESCRIPTION-IMPLIES-DESCRIPTION?"
    "(DEFUN (DESCRIPTION-IMPLIES-DESCRIPTION? BOOLEAN) ((SUBDESC DESCRIPTION) (SUPERDESC DESCRIPTION)))"
    (CL:FUNCTION DESCRIPTION-IMPLIES-DESCRIPTION?) NULL)
   (DEFINE-FUNCTION-OBJECT "DESCRIPTION-IMPLIES-DESCRIPTION-INTERNAL?"
    "(DEFUN (DESCRIPTION-IMPLIES-DESCRIPTION-INTERNAL? BOOLEAN) ((SUBDESC DESCRIPTION) (SUPERDESC DESCRIPTION) (NAMEDONLY? BOOLEAN)))"
    (CL:FUNCTION DESCRIPTION-IMPLIES-DESCRIPTION-INTERNAL?) NULL)
   (DEFINE-FUNCTION-OBJECT
    "HELP-DESCRIPTION-IMPLIES-DESCRIPTION-INTERNAL?"
    "(DEFUN (HELP-DESCRIPTION-IMPLIES-DESCRIPTION-INTERNAL? BOOLEAN) ((SUBDESC DESCRIPTION) (SUPERDESC DESCRIPTION) (ALREADYVISITED CONS) (NAMEDONLY? BOOLEAN)))"
    (CL:FUNCTION HELP-DESCRIPTION-IMPLIES-DESCRIPTION-INTERNAL?) NULL)
   (DEFINE-FUNCTION-OBJECT "RELATIONREF-SPECIALIZES-RELATIONREF?"
    "(DEFUN (RELATIONREF-SPECIALIZES-RELATIONREF? BOOLEAN) ((RELATIONREF1 SURROGATE) (RELATIONREF2 SURROGATE)) :INLINE SURROGATE-TO-DESCRIPTION :INLINE RELATION-IMPLIES-RELATION?)"
    (CL:FUNCTION RELATIONREF-SPECIALIZES-RELATIONREF?) NULL)
   (DEFINE-EXTERNAL-SLOT-FROM-STRINGIFIED-SOURCE
    "(DEFSLOT CONTEXT SECONDARY-STORAGE-INSTANCES :TYPE (LIST OF OBJECT) :DOCUMENTATION \"For testing out the paging routines.  Maintains a list
of all instances conceived within this module.  Pretends to be secondary 
storage.\" :PUBLIC? TRUE :DEFAULT NULL :ALLOCATION :DYNAMIC)")
   (DEFINE-EXTERNAL-SLOT-FROM-STRINGIFIED-SOURCE
    "(DEFSLOT CONTEXT SECONDARY-STORAGE-PROPOSITIONS :TYPE (LIST OF PROPOSITION) :DOCUMENTATION \"For testing out the paging routines.  Maintains a list
of all instances conceived within this module.  Pretends to be secondary 
storage.\" :PUBLIC? TRUE :DEFAULT NULL :ALLOCATION :DYNAMIC)")
   (DEFINE-FUNCTION-OBJECT "LOG-TO-SECONDARY-STORAGE-MANAGER"
    "(DEFUN LOG-TO-SECONDARY-STORAGE-MANAGER ((SELF OBJECT)))"
    (CL:FUNCTION LOG-TO-SECONDARY-STORAGE-MANAGER) NULL)
   (DEFINE-FUNCTION-OBJECT "CLEAN-UP-PAGING-STORAGE"
    "(DEFUN CLEAN-UP-PAGING-STORAGE ((CLEAREDMODULE MODULE)))"
    (CL:FUNCTION CLEAN-UP-PAGING-STORAGE) NULL)
   (DEFINE-FUNCTION-OBJECT "REGENERABLE-PROPOSITIONS-NEXT?"
    "(DEFUN (REGENERABLE-PROPOSITIONS-NEXT? BOOLEAN) ((SELF ALL-PURPOSE-ITERATOR)))"
    (CL:FUNCTION REGENERABLE-PROPOSITIONS-NEXT?) NULL)
   (DEFINE-FUNCTION-OBJECT "ALL-SECONDARY-STORAGE-PROPOSITIONS"
    "(DEFUN (ALL-SECONDARY-STORAGE-PROPOSITIONS (ITERATOR OF PROPOSITION)) ())"
    (CL:FUNCTION ALL-SECONDARY-STORAGE-PROPOSITIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "REGENERABLE-INSTANCES-NEXT?"
    "(DEFUN (REGENERABLE-INSTANCES-NEXT? BOOLEAN) ((SELF ALL-PURPOSE-ITERATOR)))"
    (CL:FUNCTION REGENERABLE-INSTANCES-NEXT?) NULL)
   (DEFINE-FUNCTION-OBJECT "ALL-SECONDARY-STORAGE-INSTANCES"
    "(DEFUN (ALL-SECONDARY-STORAGE-INSTANCES (ITERATOR OF OBJECT)) ())"
    (CL:FUNCTION ALL-SECONDARY-STORAGE-INSTANCES) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (REGENERATE-PAGING-INDEX CONS) ((SELF PAGING-INDEX)))"
    (CL:FUNCTION REGENERATE-PAGING-INDEX) NULL)
   (DEFINE-FUNCTION-OBJECT "STARTUP-BACKLINKS"
    "(DEFUN STARTUP-BACKLINKS () :PUBLIC? TRUE)"
    (CL:FUNCTION STARTUP-BACKLINKS) NULL)
   (CL:LET*
    ((FUNCTION (LOOKUP-FUNCTION SYM-BACKLINKS-LOGIC-STARTUP-BACKLINKS)))
    (SET-DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
     SYM-BACKLINKS-STELLA-METHOD-STARTUP-CLASSNAME
     (WRAP-STRING "Startup-Backlinks") NULL-STRING-WRAPPER))))

(CL:DEFUN STARTUP-BACKLINKS ()
  (CL:LET*
   ((*MODULE* (GET-STELLA-MODULE "/LOGIC" (> *STARTUP-TIME-PHASE* 1)))
    (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2) (HELP-STARTUP-BACKLINKS1))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 4)
    (CL:SETQ *INTEGER-LOGIC-WRAPPER-TABLE* (NEW-INTEGER-HASH-TABLE))
    (CL:SETQ *FLOAT-LOGIC-WRAPPER-TABLE* (NEW-FLOAT-HASH-TABLE))
    (CL:SETQ *STRING-LOGIC-WRAPPER-TABLE* (NEW-STRING-HASH-TABLE)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7) (HELP-STARTUP-BACKLINKS2))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *SPECIALIZED-BACKLINKS-CROSSOVER-POINT* INTEGER 10 :DOCUMENTATION \"When 'dependent-propositions-list' gets this long in a
backlinks index, then we create a hash table index and other
specialized indices.\")")
    (CL:SETQ *WRAPPED-TYPE-TABLE*
     (CONCATENATE *WRAPPED-TYPE-TABLE*
      (LIST*
       (LIST* SGT-BACKLINKS-LOGIC-INTEGER-LOGIC-WRAPPER
        SGT-BACKLINKS-STELLA-INTEGER NIL)
       (LIST* SGT-BACKLINKS-LOGIC-FLOAT-LOGIC-WRAPPER
        SGT-BACKLINKS-STELLA-FLOAT NIL)
       (LIST* SGT-BACKLINKS-LOGIC-STRING-LOGIC-WRAPPER
        SGT-BACKLINKS-STELLA-STRING NIL)
       NIL)))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *INTEGER-LOGIC-WRAPPER-TABLE* INTEGER-HASH-TABLE (NEW INTEGER-HASH-TABLE))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *FLOAT-LOGIC-WRAPPER-TABLE* FLOAT-HASH-TABLE (NEW FLOAT-HASH-TABLE))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *STRING-LOGIC-WRAPPER-TABLE* STRING-HASH-TABLE (NEW STRING-HASH-TABLE))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *BACKLINK-ALL-PROPOSITION-ARGUMENTS?* BOOLEAN FALSE :DOCUMENTATION \"If TRUE, wrap all literal proposition arguments
so that they can all support backlink indices.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *SUPPRESSINSERTIONINTOCLASSEXTENSION?* BOOLEAN FALSE :DOCUMENTATION \"Used when creating a skolem (e.g., a prototype) that
isn't visible in the corresponding class extension.\")"))))
