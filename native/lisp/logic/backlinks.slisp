;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; backlinks.slisp

#|
 +---------------------------- BEGIN LICENSE BLOCK ---------------------------+
 |                                                                            |
 | Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
 |                                                                            |
 | The contents of this file are subject to the Mozilla Public License        |
 | Version 1.1 (the "License"); you may not use this file except in           |
 | compliance with the License. You may obtain a copy of the License at       |
 | http://www.mozilla.org/MPL/                                                |
 |                                                                            |
 | Software distributed under the License is distributed on an "AS IS" basis, |
 | WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
 | for the specific language governing rights and limitations under the       |
 | License.                                                                   |
 |                                                                            |
 | The Original Code is the PowerLoom KR&R System.                            |
 |                                                                            |
 | The Initial Developer of the Original Code is                              |
 | UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
 | 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
 |                                                                            |
 | Portions created by the Initial Developer are Copyright (C) 1997-2006      |
 | the Initial Developer. All Rights Reserved.                                |
 |                                                                            |
 | Contributor(s):                                                            |
 |                                                                            |
 | Alternatively, the contents of this file may be used under the terms of    |
 | either the GNU General Public License Version 2 or later (the "GPL"), or   |
 | the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
 | in which case the provisions of the GPL or the LGPL are applicable instead |
 | of those above. If you wish to allow use of your version of this file only |
 | under the terms of either the GPL or the LGPL, and not to allow others to  |
 | use your version of this file under the terms of the MPL, indicate your    |
 | decision by deleting the provisions above and replace them with the notice |
 | and other provisions required by the GPL or the LGPL. If you do not delete |
 | the provisions above, a recipient may use your version of this file under  |
 | the terms of any one of the MPL, the GPL or the LGPL.                      |
 |                                                                            |
 +----------------------------- END LICENSE BLOCK ----------------------------+
|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SGT-BACKLINKS-LOGIC-PATTERN-VARIABLE NULL)
(CL:DEFVAR KWD-BACKLINKS-NON-PAGING NULL)
(CL:DEFVAR KWD-BACKLINKS-DEPENDENTS NULL)
(CL:DEFVAR SYM-BACKLINKS-LOGIC-DEPENDENT-PROPOSITIONS-INDEX NULL)
(CL:DEFVAR SGT-BACKLINKS-LOGIC-INTEGER-LOGIC-WRAPPER NULL)
(CL:DEFVAR SGT-BACKLINKS-LOGIC-FLOAT-LOGIC-WRAPPER NULL)
(CL:DEFVAR SGT-BACKLINKS-LOGIC-STRING-LOGIC-WRAPPER NULL)
(CL:DEFVAR SGT-BACKLINKS-LOGIC-LOGIC-OBJECT NULL)
(CL:DEFVAR SGT-BACKLINKS-STELLA-THING NULL)
(CL:DEFVAR KWD-BACKLINKS-ISA NULL)
(CL:DEFVAR KWD-BACKLINKS-RELATION NULL)
(CL:DEFVAR SYM-BACKLINKS-LOGIC-DESCRIPTIVE? NULL)
(CL:DEFVAR KWD-BACKLINKS-CONSTANT NULL)
(CL:DEFVAR SGT-BACKLINKS-LOGIC-SKOLEM NULL)
(CL:DEFVAR SGT-BACKLINKS-LOGIC-DESCRIPTION NULL)
(CL:DEFVAR KWD-BACKLINKS-DEBUGGING NULL)
(CL:DEFVAR SYM-BACKLINKS-LOGIC-HYPOTHESIZED-INSTANCE? NULL)
(CL:DEFVAR KWD-BACKLINKS-WARNING NULL)
(CL:DEFVAR SGT-BACKLINKS-LOGIC-PROPOSITION NULL)
(CL:DEFVAR SGT-BACKLINKS-STELLA-INTEGER NULL)
(CL:DEFVAR SGT-BACKLINKS-STELLA-FLOAT NULL)
(CL:DEFVAR SGT-BACKLINKS-STELLA-STRING NULL)
(CL:DEFVAR SGT-BACKLINKS-STELLA-LITERAL-WRAPPER NULL)
(CL:DEFVAR SGT-BACKLINKS-LOGIC-PAGING-INDEX NULL)
(CL:DEFVAR SGT-BACKLINKS-PL-KERNEL-KB-SUBSET-OF NULL)
(CL:DEFVAR SYM-BACKLINKS-LOGIC-MASTER-PROPOSITION NULL)
(CL:DEFVAR KWD-BACKLINKS-FORWARD NULL)
(CL:DEFVAR SYM-BACKLINKS-LOGIC-SUBSUMPTION-LINK? NULL)
(CL:DEFVAR KWD-BACKLINKS-RULES NULL)
(CL:DEFVAR KWD-BACKLINKS-CONTEXT-PROPOSITIONS NULL)
(CL:DEFVAR KWD-BACKLINKS-CONTEXT-INSTANCES NULL)
(CL:DEFVAR SGT-BACKLINKS-LOGIC-F-SELECT-RELATION-PROPOSITIONS-MEMO-TABLE-000 NULL)
(CL:DEFVAR SGT-BACKLINKS-LOGIC-F-SELECT-RELATION-PROPOSITIONS-MEMO-TABLE-001 NULL)
(CL:DEFVAR SGT-BACKLINKS-LOGIC-F-SELECT-RELATION-PROPOSITIONS-MEMO-TABLE-002 NULL)
(CL:DEFVAR KWD-BACKLINKS-EVALUATE? NULL)
(CL:DEFVAR SYM-BACKLINKS-STELLA-TRUE NULL)
(CL:DEFVAR KWD-BACKLINKS-FUNCTION NULL)
(CL:DEFVAR KWD-BACKLINKS-PREDICATE NULL)
(CL:DEFVAR KWD-BACKLINKS-EQUIVALENT NULL)
(CL:DEFVAR KWD-BACKLINKS-EXTENSIONAL-ASSERTION NULL)
(CL:DEFVAR KWD-BACKLINKS-DESCRIPTION NULL)
(CL:DEFVAR KWD-BACKLINKS-PAGING NULL)
(CL:DEFVAR SYM-BACKLINKS-LOGIC-STARTUP-BACKLINKS NULL)
(CL:DEFVAR SYM-BACKLINKS-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STARTUP-TIME-PHASE* NIL-PAGING-INDEX
  *LOADINGREGENERABLEOBJECTS?* *EVALUATIONMODE* NIL-LIST
  UNKNOWN-TRUTH-VALUE *CONTEXT* *MEMOIZATION-ENABLED?*
  MEMOIZED-NULL-VALUE TRUE-WRAPPER NULL-INTEGER STANDARD-OUTPUT
  FALSE-WRAPPER NIL-NON-PAGING-INDEX *POWERLOOM-EXECUTION-MODE*
  STANDARD-WARNING EOL NIL *MODULE*))

;;; (DEFUN (TYPE-HAS-BACKLINKS? BOOLEAN) ...)

(CL:DEFUN TYPE-HAS-BACKLINKS? (TYPE)
  (CL:IF (CL:EQ (%SURROGATE.SURROGATE-VALUE TYPE) NULL) CL:NIL
   (CL:NOT (LITERAL-TYPE? TYPE))))

;;; (DEFUN (CREATE-BACKLINKS-INDEX BACKLINKS-INDEX) ...)

(CL:DEFUN CREATE-BACKLINKS-INDEX (SELF)
  (CL:LET* ((INDEX (NEW-BACKLINKS-INDEX)))
   (CL:SETF (%BACKLINKS-INDEX.DEPENDENT-PROPOSITIONS-LIST INDEX)
    (CL:IF (ISA? SELF SGT-BACKLINKS-LOGIC-PATTERN-VARIABLE)
     (CREATE-SEQUENCE-INDEX KWD-BACKLINKS-NON-PAGING NIL)
     (CREATE-SEQUENCE-INDEX *MODULE*
      (CONS KWD-BACKLINKS-DEPENDENTS
       (CONS (CL:IF (CL:EQ NIL NULL) NIL NIL) (CONS SELF NIL))))))
   INDEX))

;;; (DEFUN (GET-BACKLINKS-INDEX BACKLINKS-INDEX) ...)

(CL:DEFUN GET-BACKLINKS-INDEX (SELF)
  (CL:WHEN (CL:EQ SELF NULL) (CL:RETURN-FROM GET-BACKLINKS-INDEX NULL))
  (CL:LET* ((TEST-VALUE-001 (SAFE-PRIMARY-TYPE SELF)))
   (CL:COND
    ((SUBTYPE-OF? TEST-VALUE-001 SGT-BACKLINKS-LOGIC-LOGIC-OBJECT)
     (CL:PROGN
      (CL:LET*
       ((INDEX (%LOGIC-OBJECT.DEPENDENT-PROPOSITIONS-INDEX SELF)))
       (CL:WHEN (CL:NOT (CL:EQ INDEX NULL))
        (CL:RETURN-FROM GET-BACKLINKS-INDEX INDEX))
       (CL:SETQ INDEX (CREATE-BACKLINKS-INDEX SELF))
       (CL:SETF (%LOGIC-OBJECT.DEPENDENT-PROPOSITIONS-INDEX SELF)
        INDEX)
       (CL:RETURN-FROM GET-BACKLINKS-INDEX INDEX))))
    ((SUBTYPE-OF? TEST-VALUE-001 SGT-BACKLINKS-STELLA-THING)
     (CL:PROGN
      (CL:LET*
       ((INDEX
         (DYNAMIC-SLOT-VALUE (%THING.DYNAMIC-SLOTS SELF)
          SYM-BACKLINKS-LOGIC-DEPENDENT-PROPOSITIONS-INDEX NULL)))
       (CL:WHEN (CL:NOT (CL:EQ INDEX NULL))
        (CL:RETURN-FROM GET-BACKLINKS-INDEX INDEX))
       (CL:SETQ INDEX (CREATE-BACKLINKS-INDEX SELF))
       (SET-DYNAMIC-SLOT-VALUE (%THING.DYNAMIC-SLOTS SELF)
        SYM-BACKLINKS-LOGIC-DEPENDENT-PROPOSITIONS-INDEX INDEX NULL)
       (CL:RETURN-FROM GET-BACKLINKS-INDEX INDEX))))
    ((SUBTYPE-OF-WRAPPER? TEST-VALUE-001)
     (CL:PROGN
      (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE SELF)))
       (CL:COND
        ((SUBTYPE-OF? TEST-VALUE-000
          SGT-BACKLINKS-LOGIC-INTEGER-LOGIC-WRAPPER)
         (CL:PROGN
          (CL:LET*
           ((INDEX
             (%INTEGER-LOGIC-WRAPPER.DEPENDENT-PROPOSITIONS-INDEX
              SELF)))
           (CL:WHEN (CL:NOT (CL:EQ INDEX NULL))
            (CL:RETURN-FROM GET-BACKLINKS-INDEX INDEX))
           (CL:SETQ INDEX (CREATE-BACKLINKS-INDEX SELF))
           (CL:SETF
            (%INTEGER-LOGIC-WRAPPER.DEPENDENT-PROPOSITIONS-INDEX SELF)
            INDEX)
           (CL:RETURN-FROM GET-BACKLINKS-INDEX INDEX))))
        ((SUBTYPE-OF? TEST-VALUE-000
          SGT-BACKLINKS-LOGIC-FLOAT-LOGIC-WRAPPER)
         (CL:PROGN
          (CL:LET*
           ((INDEX
             (%FLOAT-LOGIC-WRAPPER.DEPENDENT-PROPOSITIONS-INDEX SELF)))
           (CL:WHEN (CL:NOT (CL:EQ INDEX NULL))
            (CL:RETURN-FROM GET-BACKLINKS-INDEX INDEX))
           (CL:SETQ INDEX (CREATE-BACKLINKS-INDEX SELF))
           (CL:SETF
            (%FLOAT-LOGIC-WRAPPER.DEPENDENT-PROPOSITIONS-INDEX SELF)
            INDEX)
           (CL:RETURN-FROM GET-BACKLINKS-INDEX INDEX))))
        ((SUBTYPE-OF? TEST-VALUE-000
          SGT-BACKLINKS-LOGIC-STRING-LOGIC-WRAPPER)
         (CL:PROGN
          (CL:LET*
           ((INDEX
             (%STRING-LOGIC-WRAPPER.DEPENDENT-PROPOSITIONS-INDEX
              SELF)))
           (CL:WHEN (CL:NOT (CL:EQ INDEX NULL))
            (CL:RETURN-FROM GET-BACKLINKS-INDEX INDEX))
           (CL:SETQ INDEX (CREATE-BACKLINKS-INDEX SELF))
           (CL:SETF
            (%STRING-LOGIC-WRAPPER.DEPENDENT-PROPOSITIONS-INDEX SELF)
            INDEX)
           (CL:RETURN-FROM GET-BACKLINKS-INDEX INDEX))))
        (CL:T)))))
    (CL:T)))
  NULL)

;;; (DEFGLOBAL *SPECIALIZED-BACKLINKS-CROSSOVER-POINT* ...)

(CL:DEFVAR *SPECIALIZED-BACKLINKS-CROSSOVER-POINT* 10
  "When 'dependent-propositions-list' gets this long in a
backlinks index, then we create a hash table index and other
specialized indices.")
(CL:DECLAIM (CL:TYPE CL:FIXNUM *SPECIALIZED-BACKLINKS-CROSSOVER-POINT*))

;;; (DEFUN ADD-DEPENDENT-PROPOSITION-TO-SPECIALIZED-INDEX ...)

(CL:DEFUN ADD-DEPENDENT-PROPOSITION-TO-SPECIALIZED-INDEX (INDEX PROPOSITION ARGUMENT)
  (CL:LET*
   ((TABLE (%BACKLINKS-INDEX.PREDICATE-PROPOSITIONS-TABLE INDEX)))
   (CL:WHEN (CL:EQ TABLE NULL) (CL:SETQ TABLE (NEW-HASH-TABLE))
    (CL:SETF (%BACKLINKS-INDEX.PREDICATE-PROPOSITIONS-TABLE INDEX)
     TABLE)
    (CL:LET*
     ((PROP NULL)
      (ITER-000
       (ALLOCATE-ITERATOR
        (%BACKLINKS-INDEX.DEPENDENT-PROPOSITIONS-LIST INDEX))))
     (CL:LOOP WHILE (NEXT? ITER-000) DO
      (CL:SETQ PROP (%ITERATOR.VALUE ITER-000))
      (ADD-DEPENDENT-PROPOSITION-TO-SPECIALIZED-INDEX INDEX PROP
       ARGUMENT))))
   (CL:COND
    ((CL:EQ (%PROPOSITION.KIND PROPOSITION) KWD-BACKLINKS-ISA)
     (CL:WHEN
      (CL:EQ (%BACKLINKS-INDEX.DEPENDENT-ISA-PROPOSITIONS-LIST INDEX)
       NULL)
      (CL:SETF (%BACKLINKS-INDEX.DEPENDENT-ISA-PROPOSITIONS-LIST INDEX)
       (CREATE-SEQUENCE-INDEX *MODULE*
        (CONS KWD-BACKLINKS-ISA
         (CONS (CL:IF (CL:EQ NIL NULL) NIL NIL)
          (CONS ARGUMENT NIL))))))
     (INSERT (%BACKLINKS-INDEX.DEPENDENT-ISA-PROPOSITIONS-LIST INDEX)
      PROPOSITION))
    (CL:T
     (CL:LET*
      ((SURROGATE (%PROPOSITION.OPERATOR PROPOSITION)) (BUCKET NULL))
      (CL:SETQ BUCKET (LOOKUP TABLE SURROGATE))
      (CL:WHEN (CL:EQ BUCKET NULL)
       (CL:SETQ BUCKET
        (CREATE-SEQUENCE-INDEX *MODULE*
         (CONS KWD-BACKLINKS-RELATION
          (CONS (CL:IF (CL:EQ NIL NULL) NIL NIL)
           (CONS SURROGATE (CONS ARGUMENT NIL))))))
       (INSERT-AT TABLE SURROGATE BUCKET))
      (INSERT BUCKET PROPOSITION))))))

;;; (DEFUN HELP-ADD-DEPENDENT-PROPOSITION ...)

(CL:DEFUN HELP-ADD-DEPENDENT-PROPOSITION (INDEX PROPOSITION ARGUMENT)
  (CL:LET*
   ((ALLDEPENDENTPROPOSITIONS
     (%BACKLINKS-INDEX.DEPENDENT-PROPOSITIONS-LIST INDEX))
    (TABLE (%BACKLINKS-INDEX.PREDICATE-PROPOSITIONS-TABLE INDEX)))
   (CL:WHEN (CL:EQ TABLE NULL)
    (CL:WHEN
     (CL:< (SEQUENCE-INDEX.ESTIMATED-LENGTH ALLDEPENDENTPROPOSITIONS)
      *SPECIALIZED-BACKLINKS-CROSSOVER-POINT*)
     (INSERT ALLDEPENDENTPROPOSITIONS PROPOSITION)
     (CL:RETURN-FROM HELP-ADD-DEPENDENT-PROPOSITION)))
   (ADD-DEPENDENT-PROPOSITION-TO-SPECIALIZED-INDEX INDEX PROPOSITION
    ARGUMENT)
   (INSERT ALLDEPENDENTPROPOSITIONS PROPOSITION)))

;;; (DEFUN ADD-DEPENDENT-PROPOSITION-LINK ...)

(CL:DEFUN ADD-DEPENDENT-PROPOSITION-LINK (SELF PROPOSITION)
  (CL:LET*
   ((DESCRIPTION?
     (CL:OR (DESCRIPTION-MODE?)
      (%BOOLEAN-WRAPPER.WRAPPER-VALUE
       (DYNAMIC-SLOT-VALUE (%PROPOSITION.DYNAMIC-SLOTS PROPOSITION)
        SYM-BACKLINKS-LOGIC-DESCRIPTIVE? FALSE-WRAPPER)))))
   (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE SELF)))
    (CL:COND
     ((SUBTYPE-OF? TEST-VALUE-000 SGT-BACKLINKS-LOGIC-PROPOSITION)
      (CL:PROGN
       (CL:COND
        ((CL:EQ (%PROPOSITION.KIND SELF) KWD-BACKLINKS-CONSTANT))
        (CL:T
         (CL:LET* ((INDEX (%PROPOSITION.DEPENDENT-PROPOSITIONS SELF)))
          (CL:WHEN (CL:EQ INDEX NIL-NON-PAGING-INDEX)
           (CL:SETQ INDEX
            (CREATE-SEQUENCE-INDEX KWD-BACKLINKS-NON-PAGING NIL))
           (CL:SETF (%PROPOSITION.DEPENDENT-PROPOSITIONS SELF) INDEX))
          (INSERT (%PROPOSITION.DEPENDENT-PROPOSITIONS SELF)
           PROPOSITION))))))
     ((SUBTYPE-OF? TEST-VALUE-000 SGT-BACKLINKS-LOGIC-LOGIC-OBJECT)
      (CL:PROGN
       (CL:WHEN
        (CL:NOT
         (CL:OR (CL:NOT DESCRIPTION?)
          (ISA? SELF SGT-BACKLINKS-LOGIC-SKOLEM)
          (CL:AND (ISA? SELF SGT-BACKLINKS-LOGIC-DESCRIPTION)
           (CL:EQ (%LOGIC-OBJECT.SURROGATE-VALUE-INVERSE SELF) NULL))))
        (CL:ERROR
         "Safety violation: INTERNAL ERROR: A named LOGIC-OBJECT such as `~A' should never be argument to a description proposition such as `~A'"
         SELF PROPOSITION))
       (CL:WHEN
        (CL:AND
         (CL:EQ *POWERLOOM-EXECUTION-MODE* KWD-BACKLINKS-DEBUGGING)
         DESCRIPTION? (SKOLEM? SELF) (CL:NOT (VARIABLE? SELF))
         (CL:NOT
          (%BOOLEAN-WRAPPER.WRAPPER-VALUE
           (DYNAMIC-SLOT-VALUE (%LOGIC-OBJECT.DYNAMIC-SLOTS SELF)
            SYM-BACKLINKS-LOGIC-HYPOTHESIZED-INSTANCE?
            FALSE-WRAPPER))))
        (CL:LET* ((*PRINTREADABLY?* CL:T))
         (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
         (%%PRINT-STREAM
          (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-WARNING)
          "WARNING: Found skolem " SELF " in descriptive proposition "
          PROPOSITION EOL)
         (HELP-SIGNAL-PROPOSITION-ERROR STANDARD-WARNING
          KWD-BACKLINKS-WARNING)))
       (CL:WHEN (CL:OR (CL:NOT DESCRIPTION?) (VARIABLE? SELF))
        (HELP-ADD-DEPENDENT-PROPOSITION (GET-BACKLINKS-INDEX SELF)
         PROPOSITION SELF))))
     ((SUBTYPE-OF-WRAPPER? TEST-VALUE-000)
      (CL:PROGN
       (CL:WHEN (CL:NOT DESCRIPTION?)
        (CL:LET* ((INDEX (GET-BACKLINKS-INDEX SELF)))
         (CL:WHEN (CL:NOT (CL:EQ INDEX NULL))
          (HELP-ADD-DEPENDENT-PROPOSITION INDEX PROPOSITION SELF))))))
     ((SUBTYPE-OF? TEST-VALUE-000 SGT-BACKLINKS-STELLA-THING)
      (CL:PROGN
       (CL:WHEN (CL:NOT DESCRIPTION?)
        (HELP-ADD-DEPENDENT-PROPOSITION (GET-BACKLINKS-INDEX SELF)
         PROPOSITION SELF))))
     (CL:T)))))

;;; (DEFUN REMOVE-DEPENDENT-PROPOSITION-LINK ...)

(CL:DEFUN REMOVE-DEPENDENT-PROPOSITION-LINK (SELF PROPOSITION)
  (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE SELF)))
   (CL:COND
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-BACKLINKS-LOGIC-PROPOSITION)
     (CL:PROGN
      (REMOVE (%PROPOSITION.DEPENDENT-PROPOSITIONS SELF) PROPOSITION)))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-BACKLINKS-LOGIC-LOGIC-OBJECT)
     (CL:PROGN
      (HELP-REMOVE-DEPENDENT-PROPOSITION (GET-BACKLINKS-INDEX SELF)
       PROPOSITION)))
    ((SUBTYPE-OF-WRAPPER? TEST-VALUE-000)
     (CL:PROGN
      (CL:LET* ((INDEX (GET-BACKLINKS-INDEX SELF)))
       (CL:WHEN (CL:NOT (CL:EQ INDEX NULL))
        (HELP-REMOVE-DEPENDENT-PROPOSITION INDEX PROPOSITION)))))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-BACKLINKS-STELLA-THING)
     (CL:PROGN
      (HELP-REMOVE-DEPENDENT-PROPOSITION (GET-BACKLINKS-INDEX SELF)
       PROPOSITION)))
    (CL:T))))

;;; (DEFUN HELP-REMOVE-DEPENDENT-PROPOSITION ...)

(CL:DEFUN HELP-REMOVE-DEPENDENT-PROPOSITION (INDEX PROPOSITION)
  (CL:LET*
   ((LIST (%BACKLINKS-INDEX.DEPENDENT-PROPOSITIONS-LIST INDEX))
    (TABLE (%BACKLINKS-INDEX.PREDICATE-PROPOSITIONS-TABLE INDEX)))
   (CL:WHEN (CL:NOT (CL:EQ LIST NULL)) (REMOVE LIST PROPOSITION))
   (CL:WHEN (CL:NOT (CL:EQ TABLE NULL))
    (CL:COND
     ((CL:EQ (%PROPOSITION.KIND PROPOSITION) KWD-BACKLINKS-ISA)
      (CL:SETQ LIST
       (%BACKLINKS-INDEX.DEPENDENT-ISA-PROPOSITIONS-LIST INDEX))
      (CL:WHEN (CL:NOT (CL:EQ LIST NULL)) (REMOVE LIST PROPOSITION)))
     (CL:T
      (CL:SETQ LIST (LOOKUP TABLE (%PROPOSITION.OPERATOR PROPOSITION)))
      (CL:WHEN (CL:NOT (CL:EQ LIST NULL)) (REMOVE LIST PROPOSITION)))))))

;;; (DEFUN REMOVE-ALL-DEPENDENT-PROPOSITION-LINKS ...)

(CL:DEFUN REMOVE-ALL-DEPENDENT-PROPOSITION-LINKS (SELF)
  (CL:SETF (%LOGIC-OBJECT.DEPENDENT-PROPOSITIONS-INDEX SELF) NULL))

;;; (DEFGLOBAL *INTEGER-LOGIC-WRAPPER-TABLE* ...)

(CL:DEFVAR *INTEGER-LOGIC-WRAPPER-TABLE* NULL)

;;; (DEFGLOBAL *FLOAT-LOGIC-WRAPPER-TABLE* ...)

(CL:DEFVAR *FLOAT-LOGIC-WRAPPER-TABLE* NULL)

;;; (DEFGLOBAL *STRING-LOGIC-WRAPPER-TABLE* ...)

(CL:DEFVAR *STRING-LOGIC-WRAPPER-TABLE* NULL)

;;; (DEFUN (REWRAP-ARGUMENT OBJECT) ...)

(CL:DEFUN REWRAP-ARGUMENT (ARGUMENT)
  (CL:LET* ((WRAPPER NULL))
   (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE ARGUMENT)))
    (CL:COND
     ((SUBTYPE-OF-INTEGER? TEST-VALUE-000)
      (CL:PROGN
       (CL:LET* ((VALUE (%INTEGER-WRAPPER.WRAPPER-VALUE ARGUMENT)))
        (CL:DECLARE (CL:TYPE CL:FIXNUM VALUE))
        (CL:SETQ WRAPPER (LOOKUP *INTEGER-LOGIC-WRAPPER-TABLE* VALUE))
        (CL:WHEN (CL:EQ WRAPPER NULL)
         (CL:SETQ WRAPPER (NEW-INTEGER-LOGIC-WRAPPER VALUE))
         (INSERT-AT *INTEGER-LOGIC-WRAPPER-TABLE* VALUE WRAPPER)))))
     ((SUBTYPE-OF-FLOAT? TEST-VALUE-000)
      (CL:PROGN
       (CL:LET* ((VALUE (%FLOAT-WRAPPER.WRAPPER-VALUE ARGUMENT)))
        (CL:DECLARE (CL:TYPE CL:DOUBLE-FLOAT VALUE))
        (CL:SETQ WRAPPER (LOOKUP *FLOAT-LOGIC-WRAPPER-TABLE* VALUE))
        (CL:WHEN (CL:EQ WRAPPER NULL)
         (CL:SETQ WRAPPER (NEW-FLOAT-LOGIC-WRAPPER VALUE))
         (INSERT-AT *FLOAT-LOGIC-WRAPPER-TABLE* VALUE WRAPPER)))))
     ((SUBTYPE-OF-STRING? TEST-VALUE-000)
      (CL:PROGN
       (CL:LET* ((VALUE (%STRING-WRAPPER.WRAPPER-VALUE ARGUMENT)))
        (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING VALUE))
        (CL:SETQ WRAPPER (LOOKUP *STRING-LOGIC-WRAPPER-TABLE* VALUE))
        (CL:WHEN (CL:EQ WRAPPER NULL)
         (CL:SETQ WRAPPER (NEW-STRING-LOGIC-WRAPPER VALUE))
         (INSERT-AT *STRING-LOGIC-WRAPPER-TABLE* VALUE WRAPPER)))))
     ((SUBTYPE-OF? TEST-VALUE-000 SGT-BACKLINKS-STELLA-LITERAL-WRAPPER)
      (CL:PROGN
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
        "Backlinking not implemented on literal of type: `"
        (PRIMARY-TYPE ARGUMENT) "'" EOL EOL)
       (CL:RETURN-FROM REWRAP-ARGUMENT ARGUMENT)))
     (CL:T
      (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
        "`" TEST-VALUE-000 "' is not a valid case option")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
   WRAPPER))

;;; (DEFGLOBAL *BACKLINK-ALL-PROPOSITION-ARGUMENTS?* ...)

(CL:DEFVAR *BACKLINK-ALL-PROPOSITION-ARGUMENTS?* CL:NIL
  "If TRUE, wrap all literal proposition arguments
so that they can all support backlink indices.")

;;; (DEFUN (INDEX-ITH-DOMAIN? BOOLEAN) ...)

(CL:DEFUN INDEX-ITH-DOMAIN? (DESCRIPTION I)
  (CL:DECLARE (CL:TYPE CL:FIXNUM I))
  #+MCL
  (CL:CHECK-TYPE I CL:FIXNUM)
  (CL:LET* ((TEST-VALUE-000 CL:NIL))
   (CL:SETQ TEST-VALUE-000 (FUNCTION-DESCRIPTION? DESCRIPTION))
   (CL:WHEN TEST-VALUE-000
    (CL:SETQ TEST-VALUE-000 (CL:NOT (COMPUTED-RELATION? DESCRIPTION)))
    (CL:WHEN TEST-VALUE-000 (CL:SETQ TEST-VALUE-000 (CL:= I 0))
     (CL:WHEN TEST-VALUE-000
      (CL:LET* ((ALWAYS?-000 CL:T))
       (CL:LET*
        ((T NULL)
         (ITER-000
          (BUT-LAST
           (%NAMED-DESCRIPTION.IO-VARIABLE-TYPES DESCRIPTION))))
        (CL:LOOP WHILE (NEXT? ITER-000) DO
         (CL:SETQ T (%ITERATOR.VALUE ITER-000))
         (CL:WHEN (CL:NOT (LOGICAL-SUBTYPE-OF-LITERAL? T))
          (CL:SETQ ALWAYS?-000 CL:NIL) (CL:RETURN))))
       (CL:SETQ TEST-VALUE-000 ALWAYS?-000)))))
   (CL:LET* ((VALUE-000 TEST-VALUE-000)) VALUE-000)))

;;; (DEFUN (REWRAP-ITH-ARGUMENT? BOOLEAN) ...)

(CL:DEFUN REWRAP-ITH-ARGUMENT? (ARGUMENT PROPOSITION I)
  (CL:DECLARE (CL:TYPE CL:FIXNUM I))
  #+MCL
  (CL:CHECK-TYPE I CL:FIXNUM)
  (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE ARGUMENT)))
   (CL:COND
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-BACKLINKS-LOGIC-LOGIC-OBJECT)
     (CL:PROGN CL:NIL))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-BACKLINKS-LOGIC-PROPOSITION)
     (CL:PROGN CL:NIL))
    ((SUBTYPE-OF-SURROGATE? TEST-VALUE-000) (CL:PROGN CL:NIL))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-BACKLINKS-STELLA-THING)
     (CL:PROGN CL:NIL))
    ((SUBTYPE-OF-KEYWORD? TEST-VALUE-000) (CL:PROGN CL:NIL))
    (CL:T
     (CL:OR *BACKLINK-ALL-PROPOSITION-ARGUMENTS?*
      (CL:AND
       (MEMBER?
        (GET-QUOTED-TREE "((:PREDICATE :FUNCTION) \"/LOGIC\")"
         "/LOGIC")
        (%PROPOSITION.KIND PROPOSITION))
       (INDEX-ITH-DOMAIN?
        (GET-DESCRIPTION (%PROPOSITION.OPERATOR PROPOSITION)) I)))))))

;;; (DEFUN REWRAP-PROPOSITION-ARGUMENTS ...)

(CL:DEFUN REWRAP-PROPOSITION-ARGUMENTS (SELF)
  (CL:LET*
   ((ARG NULL) (VECTOR-000 (%PROPOSITION.ARGUMENTS SELF)) (INDEX-000 0)
    (LENGTH-000 (LENGTH VECTOR-000)) (I NULL-INTEGER) (ITER-000 0))
   (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000 I ITER-000))
   (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
    (CL:SETQ ARG
     (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-000))
      INDEX-000))
    (CL:SETQ I ITER-000)
    (CL:WHEN
     (CL:AND (CL:NOT (CL:EQ ARG NULL))
      (REWRAP-ITH-ARGUMENT? ARG SELF I))
     (CL:LET
      ((SELF (%VECTOR.THE-ARRAY (%PROPOSITION.ARGUMENTS SELF)))
       (VALUE (REWRAP-ARGUMENT ARG)) (POSITION I))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:SETF (CL:AREF SELF POSITION) VALUE)))
    (CL:SETQ INDEX-000 (CL:1+ INDEX-000))
    (CL:SETQ ITER-000 (CL:1+ ITER-000)))))

;;; (DEFUN (UNFILTERED-DEPENDENT-PROPOSITIONS PROPOSITIONS-INDEX) ...)

(CL:DEFUN UNFILTERED-DEPENDENT-PROPOSITIONS (SELF RELATION)
  (CL:COND
   ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE SELF)
     SGT-BACKLINKS-LOGIC-PROPOSITION)
    (CL:PROGN
     (CL:COND
      ((CL:EQ RELATION NULL)
       (%PROPOSITION.DEPENDENT-PROPOSITIONS SELF))
      (CL:T
       (CL:LET*
        ((DEPENDENTS
          (CREATE-SEQUENCE-INDEX KWD-BACKLINKS-NON-PAGING NULL)))
        (CL:LET*
         ((PROP NULL)
          (ITER-000
           (ALLOCATE-ITERATOR
            (%PROPOSITION.DEPENDENT-PROPOSITIONS SELF))))
         (CL:LOOP WHILE (NEXT? ITER-000) DO
          (CL:SETQ PROP (%ITERATOR.VALUE ITER-000))
          (CL:WHEN (CL:EQ (%PROPOSITION.OPERATOR PROP) RELATION)
           (PUSH DEPENDENTS PROP))))
        DEPENDENTS)))))
   (CL:T
    (CL:LET*
     ((INDEX (GET-BACKLINKS-INDEX SELF)) (ALLPROPOSITIONSINDEX NULL))
     (CL:WHEN (CL:EQ INDEX NULL)
      (CL:RETURN-FROM UNFILTERED-DEPENDENT-PROPOSITIONS
       NIL-NON-PAGING-INDEX))
     (CL:SETQ ALLPROPOSITIONSINDEX
      (%BACKLINKS-INDEX.DEPENDENT-PROPOSITIONS-LIST INDEX))
     (CL:WHEN (CL:EQ RELATION NULL)
      (CL:RETURN-FROM UNFILTERED-DEPENDENT-PROPOSITIONS
       ALLPROPOSITIONSINDEX))
     (CL:LET*
      ((TABLE (%BACKLINKS-INDEX.PREDICATE-PROPOSITIONS-TABLE INDEX))
       (LIST
        (CL:IF (CL:EQ TABLE NULL) ALLPROPOSITIONSINDEX
         (LOOKUP TABLE RELATION))))
      (CL:WHEN (CL:EQ LIST NULL)
       (CL:SETQ LIST
        (%BACKLINKS-INDEX.DEPENDENT-ISA-PROPOSITIONS-LIST INDEX)))
      (CL:WHEN (CL:EQ LIST NULL)
       (CL:RETURN-FROM UNFILTERED-DEPENDENT-PROPOSITIONS
        NIL-NON-PAGING-INDEX))
      (CL:WHEN
       (CL:AND (CL:EQ LIST ALLPROPOSITIONSINDEX)
        (ISA? LIST SGT-BACKLINKS-LOGIC-PAGING-INDEX))
       (CL:LET*
        ((STORE (%PAGING-INDEX.STORE LIST))
         (PAGINGLIST
          (CL:IF (CL:NOT (CL:EQ STORE NULL))
           (CREATE-SEQUENCE-INDEX STORE
            (CONS KWD-BACKLINKS-RELATION
             (CONS (CL:IF (CL:EQ NIL NULL) NIL NIL)
              (CONS RELATION (CONS SELF NIL)))))
           NULL)))
        (CL:WHEN (CL:NOT (CL:EQ PAGINGLIST NULL))
         (CL:LET* ((VALUE-000 NIL))
          (CL:LET*
           ((PROP NULL) (ITER-001 (%SEQUENCE-INDEX.THE-SEQUENCE LIST))
            (COLLECT-000 NULL))
           (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
            (CL:SETQ PROP (%%VALUE ITER-001))
            (CL:WHEN (CL:EQ (%PROPOSITION.OPERATOR PROP) RELATION)
             (CL:IF (CL:EQ COLLECT-000 NULL)
              (CL:PROGN (CL:SETQ COLLECT-000 (CONS PROP NIL))
               (CL:IF (CL:EQ VALUE-000 NIL)
                (CL:SETQ VALUE-000 COLLECT-000)
                (ADD-CONS-TO-END-OF-CONS-LIST VALUE-000 COLLECT-000)))
              (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS PROP NIL))
               (CL:SETQ COLLECT-000 (%%REST COLLECT-000)))))
            (CL:SETQ ITER-001 (%%REST ITER-001))))
          (CL:SETF (%SEQUENCE-INDEX.THE-SEQUENCE PAGINGLIST)
           VALUE-000))
         (CL:SETQ LIST PAGINGLIST))))
      LIST)))))

;;; (DEFUN (ALL-SPECIALIZING-DEPENDENT-PROPOSITIONS-NEXT? BOOLEAN) ...)

(CL:DEFUN ALL-SPECIALIZING-DEPENDENT-PROPOSITIONS-NEXT? (SELF)
  (CL:LET*
   ((ITERATOR (%ALL-PURPOSE-ITERATOR.ITERATOR-NESTED-ITERATOR SELF))
    (RELATION
     (%%VALUE (%ALL-PURPOSE-ITERATOR.ITERATOR-CONS-LIST SELF))))
   (CL:LOOP
    (CL:LOOP WHILE (NEXT? ITERATOR) DO
     (CL:LET* ((PROPOSITION (%ITERATOR.VALUE ITERATOR)))
      (CL:WHEN
       (CL:EQ (%PROPOSITION.OPERATOR PROPOSITION)
        (%NAMED-DESCRIPTION.SURROGATE-VALUE-INVERSE RELATION))
       (CL:SETF (%ALL-PURPOSE-ITERATOR.VALUE SELF) PROPOSITION)
       (CL:RETURN-FROM ALL-SPECIALIZING-DEPENDENT-PROPOSITIONS-NEXT?
        CL:T))))
    (CL:SETF (%ALL-PURPOSE-ITERATOR.ITERATOR-CONS-LIST SELF)
     (%%REST (%ALL-PURPOSE-ITERATOR.ITERATOR-CONS-LIST SELF)))
    (CL:SETQ RELATION
     (%%VALUE (%ALL-PURPOSE-ITERATOR.ITERATOR-CONS-LIST SELF)))
    (CL:WHEN (CL:EQ RELATION NULL)
     (CL:SETF (%ALL-PURPOSE-ITERATOR.VALUE SELF) NULL)
     (CL:RETURN-FROM ALL-SPECIALIZING-DEPENDENT-PROPOSITIONS-NEXT?
      CL:NIL))
    (CL:SETQ ITERATOR
     (ALLOCATE-ITERATOR
      (UNFILTERED-DEPENDENT-PROPOSITIONS
       (%ALL-PURPOSE-ITERATOR.ITERATOR-OBJECT SELF)
       (%NAMED-DESCRIPTION.SURROGATE-VALUE-INVERSE RELATION))))
    (CL:SETF (%ALL-PURPOSE-ITERATOR.ITERATOR-NESTED-ITERATOR SELF)
     ITERATOR))))

;;; (DEFUN (ALL-SPECIALIZING-DEPENDENT-PROPOSITIONS (ITERATOR OF PROPOSITION)) ...)

(CL:DEFUN ALL-SPECIALIZING-DEPENDENT-PROPOSITIONS (SELF RELATIONREF)
  (CL:LET* ((RELATION (GET-DESCRIPTION RELATIONREF)))
   (CL:LET* ((SELF-000 (NEW-ALL-PURPOSE-ITERATOR)))
    (CL:SETF (%ALL-PURPOSE-ITERATOR.ITERATOR-OBJECT SELF-000) SELF)
    (CL:SETF (%ALL-PURPOSE-ITERATOR.ITERATOR-CONS-LIST SELF-000)
     (CONS RELATION (ALL-SUBRELATIONS RELATION CL:NIL)))
    (CL:SETF (%ALL-PURPOSE-ITERATOR.ITERATOR-NESTED-ITERATOR SELF-000)
     (ALLOCATE-ITERATOR
      (UNFILTERED-DEPENDENT-PROPOSITIONS SELF RELATIONREF)))
    (CL:SETF (%ALL-PURPOSE-ITERATOR.ITERATOR-NEXT-CODE SELF-000)
     (CL:FUNCTION ALL-SPECIALIZING-DEPENDENT-PROPOSITIONS-NEXT?))
    (CL:LET* ((VALUE-000 SELF-000)) VALUE-000))))

;;; (DEFUN (UNFILTERED-DEPENDENT-ISA-PROPOSITIONS PROPOSITIONS-INDEX) ...)

(CL:DEFUN UNFILTERED-DEPENDENT-ISA-PROPOSITIONS (SELF)
  (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE SELF)))
   (CL:COND
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-BACKLINKS-LOGIC-LOGIC-OBJECT)
     (CL:PROGN
      (CL:LET*
       ((INDEX (GET-BACKLINKS-INDEX SELF))
        (LIST
         (CL:IF (CL:EQ INDEX NULL) NIL-NON-PAGING-INDEX
          (%BACKLINKS-INDEX.DEPENDENT-ISA-PROPOSITIONS-LIST INDEX))))
       (CL:WHEN (CL:EQ LIST NULL)
        (CL:SETQ LIST
         (%BACKLINKS-INDEX.DEPENDENT-PROPOSITIONS-LIST INDEX))
        (CL:WHEN (ISA? LIST SGT-BACKLINKS-LOGIC-PAGING-INDEX)
         (CL:LET*
          ((STORE (%PAGING-INDEX.STORE LIST))
           (PAGINGLIST
            (CL:IF (CL:NOT (CL:EQ STORE NULL))
             (CREATE-SEQUENCE-INDEX STORE
              (CONS KWD-BACKLINKS-ISA
               (CONS (CL:IF (CL:EQ NIL NULL) NIL NIL)
                (CONS SELF NIL))))
             NULL)))
          (CL:WHEN (CL:NOT (CL:EQ PAGINGLIST NULL))
           (CL:LET* ((VALUE-000 NIL))
            (CL:LET*
             ((PROP NULL)
              (ITER-000 (%SEQUENCE-INDEX.THE-SEQUENCE LIST))
              (COLLECT-000 NULL))
             (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
              (CL:SETQ PROP (%%VALUE ITER-000))
              (CL:WHEN
               (CL:EQ (%PROPOSITION.KIND PROP) KWD-BACKLINKS-ISA)
               (CL:IF (CL:EQ COLLECT-000 NULL)
                (CL:PROGN (CL:SETQ COLLECT-000 (CONS PROP NIL))
                 (CL:IF (CL:EQ VALUE-000 NIL)
                  (CL:SETQ VALUE-000 COLLECT-000)
                  (ADD-CONS-TO-END-OF-CONS-LIST VALUE-000
                   COLLECT-000)))
                (CL:PROGN
                 (CL:SETF (%%REST COLLECT-000) (CONS PROP NIL))
                 (CL:SETQ COLLECT-000 (%%REST COLLECT-000)))))
              (CL:SETQ ITER-000 (%%REST ITER-000))))
            (CL:SETF (%SEQUENCE-INDEX.THE-SEQUENCE PAGINGLIST)
             VALUE-000))
           (CL:SETQ LIST PAGINGLIST)))))
       LIST)))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-BACKLINKS-STELLA-THING)
     (CL:PROGN
      (CL:LET*
       ((INDEX (GET-BACKLINKS-INDEX SELF))
        (LIST
         (CL:IF (CL:EQ INDEX NULL) NIL-NON-PAGING-INDEX
          (%BACKLINKS-INDEX.DEPENDENT-ISA-PROPOSITIONS-LIST INDEX))))
       (CL:WHEN (CL:EQ LIST NULL)
        (CL:SETQ LIST
         (%BACKLINKS-INDEX.DEPENDENT-PROPOSITIONS-LIST INDEX))
        (CL:WHEN (ISA? LIST SGT-BACKLINKS-LOGIC-PAGING-INDEX)
         (CL:LET*
          ((STORE (%PAGING-INDEX.STORE LIST))
           (PAGINGLIST
            (CL:IF (CL:NOT (CL:EQ STORE NULL))
             (CREATE-SEQUENCE-INDEX STORE
              (CONS KWD-BACKLINKS-ISA
               (CONS (CL:IF (CL:EQ NIL NULL) NIL NIL)
                (CONS SELF NIL))))
             NULL)))
          (CL:WHEN (CL:NOT (CL:EQ PAGINGLIST NULL))
           (CL:LET* ((VALUE-001 NIL))
            (CL:LET*
             ((PROP NULL)
              (ITER-001 (%SEQUENCE-INDEX.THE-SEQUENCE LIST))
              (COLLECT-001 NULL))
             (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
              (CL:SETQ PROP (%%VALUE ITER-001))
              (CL:WHEN
               (CL:EQ (%PROPOSITION.KIND PROP) KWD-BACKLINKS-ISA)
               (CL:IF (CL:EQ COLLECT-001 NULL)
                (CL:PROGN (CL:SETQ COLLECT-001 (CONS PROP NIL))
                 (CL:IF (CL:EQ VALUE-001 NIL)
                  (CL:SETQ VALUE-001 COLLECT-001)
                  (ADD-CONS-TO-END-OF-CONS-LIST VALUE-001
                   COLLECT-001)))
                (CL:PROGN
                 (CL:SETF (%%REST COLLECT-001) (CONS PROP NIL))
                 (CL:SETQ COLLECT-001 (%%REST COLLECT-001)))))
              (CL:SETQ ITER-001 (%%REST ITER-001))))
            (CL:SETF (%SEQUENCE-INDEX.THE-SEQUENCE PAGINGLIST)
             VALUE-001))
           (CL:SETQ LIST PAGINGLIST)))))
       LIST)))
    (CL:T
     (CL:LET*
      ((INDEX (GET-BACKLINKS-INDEX SELF))
       (LIST
        (CL:IF (CL:EQ INDEX NULL) NIL-NON-PAGING-INDEX
         (%BACKLINKS-INDEX.DEPENDENT-ISA-PROPOSITIONS-LIST INDEX))))
      (CL:IF (CL:NOT (CL:EQ LIST NULL)) LIST
       (%BACKLINKS-INDEX.DEPENDENT-PROPOSITIONS-LIST INDEX)))))))

;;; (DEFUN (UNFILTERED-DEPENDENT-IMPLIES-PROPOSITIONS PROPOSITIONS-INDEX) ...)

(CL:DEFUN UNFILTERED-DEPENDENT-IMPLIES-PROPOSITIONS (SELF)
  (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE SELF)))
   (CL:COND
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-BACKLINKS-LOGIC-LOGIC-OBJECT)
     (CL:PROGN
      (CL:LET* ((INDEX (GET-BACKLINKS-INDEX SELF)))
       (CL:IF (CL:EQ INDEX NULL) NIL-NON-PAGING-INDEX
        (CL:LET*
         ((TABLE (%BACKLINKS-INDEX.PREDICATE-PROPOSITIONS-TABLE INDEX))
          (LIST NULL))
         (CL:WHEN (CL:NOT (CL:EQ TABLE NULL))
          (CL:SETQ LIST
           (LOOKUP TABLE SGT-BACKLINKS-PL-KERNEL-KB-SUBSET-OF))
          (CL:WHEN (CL:EQ LIST NULL)
           (CL:SETQ LIST NIL-NON-PAGING-INDEX)))
         (CL:WHEN (CL:EQ LIST NULL)
          (CL:SETQ LIST
           (%BACKLINKS-INDEX.DEPENDENT-PROPOSITIONS-LIST INDEX))
          (CL:WHEN (ISA? LIST SGT-BACKLINKS-LOGIC-PAGING-INDEX)
           (CL:LET*
            ((STORE (%PAGING-INDEX.STORE LIST))
             (PAGINGLIST
              (CL:IF (CL:NOT (CL:EQ STORE NULL))
               (CREATE-SEQUENCE-INDEX STORE
                (CONS KWD-BACKLINKS-RELATION
                 (CONS (CL:IF (CL:EQ NIL NULL) NIL NIL)
                  (CONS SGT-BACKLINKS-PL-KERNEL-KB-SUBSET-OF
                   (CONS SELF NIL)))))
               NULL)))
            (CL:WHEN (CL:NOT (CL:EQ PAGINGLIST NULL))
             (CL:LET* ((VALUE-000 NIL))
              (CL:LET*
               ((PROP NULL)
                (ITER-000 (%SEQUENCE-INDEX.THE-SEQUENCE LIST))
                (COLLECT-000 NULL))
               (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
                (CL:SETQ PROP (%%VALUE ITER-000))
                (CL:WHEN
                 (CL:EQ (%PROPOSITION.OPERATOR PROP)
                  SGT-BACKLINKS-PL-KERNEL-KB-SUBSET-OF)
                 (CL:IF (CL:EQ COLLECT-000 NULL)
                  (CL:PROGN (CL:SETQ COLLECT-000 (CONS PROP NIL))
                   (CL:IF (CL:EQ VALUE-000 NIL)
                    (CL:SETQ VALUE-000 COLLECT-000)
                    (ADD-CONS-TO-END-OF-CONS-LIST VALUE-000
                     COLLECT-000)))
                  (CL:PROGN
                   (CL:SETF (%%REST COLLECT-000) (CONS PROP NIL))
                   (CL:SETQ COLLECT-000 (%%REST COLLECT-000)))))
                (CL:SETQ ITER-000 (%%REST ITER-000))))
              (CL:SETF (%SEQUENCE-INDEX.THE-SEQUENCE PAGINGLIST)
               VALUE-000))
             (CL:SETQ LIST PAGINGLIST)))))
         LIST)))))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-BACKLINKS-STELLA-THING)
     (CL:PROGN
      (CL:LET* ((INDEX (GET-BACKLINKS-INDEX SELF)))
       (CL:IF (CL:EQ INDEX NULL) NIL-NON-PAGING-INDEX
        (CL:LET*
         ((TABLE (%BACKLINKS-INDEX.PREDICATE-PROPOSITIONS-TABLE INDEX))
          (LIST NULL))
         (CL:WHEN (CL:NOT (CL:EQ TABLE NULL))
          (CL:SETQ LIST
           (LOOKUP TABLE SGT-BACKLINKS-PL-KERNEL-KB-SUBSET-OF))
          (CL:WHEN (CL:EQ LIST NULL)
           (CL:SETQ LIST NIL-NON-PAGING-INDEX)))
         (CL:WHEN (CL:EQ LIST NULL)
          (CL:SETQ LIST
           (%BACKLINKS-INDEX.DEPENDENT-PROPOSITIONS-LIST INDEX))
          (CL:WHEN (ISA? LIST SGT-BACKLINKS-LOGIC-PAGING-INDEX)
           (CL:LET*
            ((STORE (%PAGING-INDEX.STORE LIST))
             (PAGINGLIST
              (CL:IF (CL:NOT (CL:EQ STORE NULL))
               (CREATE-SEQUENCE-INDEX STORE
                (CONS KWD-BACKLINKS-RELATION
                 (CONS (CL:IF (CL:EQ NIL NULL) NIL NIL)
                  (CONS SGT-BACKLINKS-PL-KERNEL-KB-SUBSET-OF
                   (CONS SELF NIL)))))
               NULL)))
            (CL:WHEN (CL:NOT (CL:EQ PAGINGLIST NULL))
             (CL:LET* ((VALUE-001 NIL))
              (CL:LET*
               ((PROP NULL)
                (ITER-001 (%SEQUENCE-INDEX.THE-SEQUENCE LIST))
                (COLLECT-001 NULL))
               (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
                (CL:SETQ PROP (%%VALUE ITER-001))
                (CL:WHEN
                 (CL:EQ (%PROPOSITION.OPERATOR PROP)
                  SGT-BACKLINKS-PL-KERNEL-KB-SUBSET-OF)
                 (CL:IF (CL:EQ COLLECT-001 NULL)
                  (CL:PROGN (CL:SETQ COLLECT-001 (CONS PROP NIL))
                   (CL:IF (CL:EQ VALUE-001 NIL)
                    (CL:SETQ VALUE-001 COLLECT-001)
                    (ADD-CONS-TO-END-OF-CONS-LIST VALUE-001
                     COLLECT-001)))
                  (CL:PROGN
                   (CL:SETF (%%REST COLLECT-001) (CONS PROP NIL))
                   (CL:SETQ COLLECT-001 (%%REST COLLECT-001)))))
                (CL:SETQ ITER-001 (%%REST ITER-001))))
              (CL:SETF (%SEQUENCE-INDEX.THE-SEQUENCE PAGINGLIST)
               VALUE-001))
             (CL:SETQ LIST PAGINGLIST)))))
         LIST)))))
    (CL:T
     (CL:LET* ((INDEX (GET-BACKLINKS-INDEX SELF)))
      (CL:IF (CL:EQ INDEX NULL) NIL-NON-PAGING-INDEX
       (CL:LET*
        ((TABLE (%BACKLINKS-INDEX.PREDICATE-PROPOSITIONS-TABLE INDEX)))
        (CL:IF (CL:NOT (CL:EQ TABLE NULL))
         (CL:LET*
          ((TEMP-000
            (LOOKUP TABLE SGT-BACKLINKS-PL-KERNEL-KB-SUBSET-OF)))
          (CL:LET*
           ((VALUE-002
             (CL:IF (CL:NOT (CL:EQ TEMP-000 NULL)) TEMP-000
              NIL-NON-PAGING-INDEX)))
           VALUE-002))
         (%BACKLINKS-INDEX.DEPENDENT-PROPOSITIONS-LIST INDEX)))))))))

;;; (DEFUN (INHERITS-TRUTH-FROM-MASTER? BOOLEAN) ...)

(CL:DEFUN INHERITS-TRUTH-FROM-MASTER? (SELF)
  (CL:LET*
   ((MASTER
     (DYNAMIC-SLOT-VALUE (%PROPOSITION.DYNAMIC-SLOTS SELF)
      SYM-BACKLINKS-LOGIC-MASTER-PROPOSITION NULL)))
   (CL:WHEN (CL:AND (CL:NOT (CL:EQ MASTER NULL)) (TRUE? MASTER))
    (ASSIGN-TRUTH-VALUE SELF TRUE-WRAPPER)
    (CL:RETURN-FROM INHERITS-TRUTH-FROM-MASTER? CL:T)))
  CL:NIL)

;;; (DEFUN (APPLICABLE-RULES-OF-DESCRIPTION (CONS OF PROPOSITION)) ...)

(CL:DEFUN APPLICABLE-RULES-OF-DESCRIPTION (SELF DIRECTION TRUERULESONLY?)
  (CL:WHEN (ISA? SELF SGT-BACKLINKS-LOGIC-DESCRIPTION)
   (DERIVE-DEFERRED-SATELLITE-RULES SELF))
  (CL:LET* ((RULES NIL))
   (CL:LET*
    ((P NULL)
     (ITER-000
      (ALLOCATE-ITERATOR
       (SELECT-RULE-PROPOSITIONS
        (MAKE-RULES-PATTERN
         (CL:IF (CL:EQ DIRECTION KWD-BACKLINKS-FORWARD) NULL SELF)
         (CL:IF (CL:EQ DIRECTION KWD-BACKLINKS-FORWARD) SELF NULL)))))
     (COLLECT-000 NULL))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ P (%ITERATOR.VALUE ITER-000))
     (CL:WHEN
      (CL:OR
       (CL:AND (TRUE? P)
        (CL:NOT
         (%BOOLEAN-WRAPPER.WRAPPER-VALUE
          (DYNAMIC-SLOT-VALUE (%PROPOSITION.DYNAMIC-SLOTS P)
           SYM-BACKLINKS-LOGIC-SUBSUMPTION-LINK? FALSE-WRAPPER))))
       (INHERITS-TRUTH-FROM-MASTER? P) (CL:NOT TRUERULESONLY?))
      (CL:IF (CL:EQ COLLECT-000 NULL)
       (CL:PROGN (CL:SETQ COLLECT-000 (CONS P NIL))
        (CL:IF (CL:EQ RULES NIL) (CL:SETQ RULES COLLECT-000)
         (ADD-CONS-TO-END-OF-CONS-LIST RULES COLLECT-000)))
       (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS P NIL))
        (CL:SETQ COLLECT-000 (%%REST COLLECT-000)))))))
   RULES))

;;; (DEFUN (MAKE-SELECTION-PATTERN SELECTION-PATTERN) ...)

(CL:DEFUN MAKE-SELECTION-PATTERN (KIND OPTIONS ARGUMENTS)
  (CONS KIND (CONS (CL:IF (CL:EQ OPTIONS NULL) NIL OPTIONS) ARGUMENTS)))

;;; (DEFUN (PATTERN-KIND KEYWORD) ...)

(CL:DEFUN PATTERN-KIND (PATTERN)
  (%%VALUE PATTERN))

;;; (DEFUN (PATTERN-OPTIONS CONS) ...)

(CL:DEFUN PATTERN-OPTIONS (PATTERN)
  (%%VALUE (%%REST PATTERN)))

;;; (DEFUN (PATTERN-ARGUMENTS CONS) ...)

(CL:DEFUN PATTERN-ARGUMENTS (PATTERN)
  (%%REST (%%REST PATTERN)))

;;; (DEFUN (MAKE-DEPENDENT-PROPOSITIONS-PATTERN SELECTION-PATTERN) ...)

(CL:DEFUN MAKE-DEPENDENT-PROPOSITIONS-PATTERN (ARGUMENT)
  (CONS KWD-BACKLINKS-DEPENDENTS
   (CONS (CL:IF (CL:EQ NIL NULL) NIL NIL) (CONS ARGUMENT NIL))))

;;; (DEFUN (MAKE-ISA-PATTERN SELECTION-PATTERN) ...)

(CL:DEFUN MAKE-ISA-PATTERN (ARGUMENT)
  (CONS KWD-BACKLINKS-ISA
   (CONS (CL:IF (CL:EQ NIL NULL) NIL NIL) (CONS ARGUMENT NIL))))

;;; (DEFUN (MAKE-RELATION-EXTENSION-PATTERN SELECTION-PATTERN) ...)

(CL:DEFUN MAKE-RELATION-EXTENSION-PATTERN (RELATION)
  (CONS KWD-BACKLINKS-RELATION
   (CONS (CL:IF (CL:EQ NIL NULL) NIL NIL) (CONS RELATION NIL))))

;;; (DEFUN (MAKE-RELATION-PATTERN SELECTION-PATTERN) ...)

(CL:DEFUN MAKE-RELATION-PATTERN (RELATION ARGUMENT)
  (CONS KWD-BACKLINKS-RELATION
   (CONS (CL:IF (CL:EQ NIL NULL) NIL NIL)
    (CONS RELATION (CONS ARGUMENT NIL)))))

;;; (DEFUN (MAKE-RELATION-PATTERN-1 CONS) ...)

(CL:DEFUN MAKE-RELATION-PATTERN-1 (RELATION ARGUMENT)
  (MAKE-RELATION-PATTERN-2 RELATION ARGUMENT NULL))

;;; (DEFUN (MAKE-RELATION-PATTERN-2 SELECTION-PATTERN) ...)

(CL:DEFUN MAKE-RELATION-PATTERN-2 (RELATION ARGUMENT1 ARGUMENT2)
  (CONS KWD-BACKLINKS-RELATION
   (CONS (CL:IF (CL:EQ NIL NULL) NIL NIL)
    (CONS RELATION (CONS ARGUMENT1 (CONS ARGUMENT2 NIL))))))

;;; (DEFUN (MAKE-RELATION-PATTERN-3 SELECTION-PATTERN) ...)

(CL:DEFUN MAKE-RELATION-PATTERN-3 (RELATION ARGUMENT1 ARGUMENT2 ARGUMENT3)
  (CONS KWD-BACKLINKS-RELATION
   (CONS (CL:IF (CL:EQ NIL NULL) NIL NIL)
    (CONS RELATION
     (CONS ARGUMENT1 (CONS ARGUMENT2 (CONS ARGUMENT3 NIL)))))))

;;; (DEFUN (MAKE-RELATION-PATTERN-4 SELECTION-PATTERN) ...)

(CL:DEFUN MAKE-RELATION-PATTERN-4 (RELATION ARGUMENT1 ARGUMENT2 ARGUMENT3 ARGUMENT4)
  (CONS KWD-BACKLINKS-RELATION
   (CONS (CL:IF (CL:EQ NIL NULL) NIL NIL)
    (CONS RELATION
     (CONS ARGUMENT1
      (CONS ARGUMENT2 (CONS ARGUMENT3 (CONS ARGUMENT4 NIL))))))))

;;; (DEFUN (MAKE-RELATION-PATTERN-N SELECTION-PATTERN) ...)

(CL:DEFUN MAKE-RELATION-PATTERN-N (RELATION CL:&REST ARGUMENTS)
  (CL:LET* ((ARGLIST-000 NIL))
   (CL:LET* ((ARG-000 NULL) (ITER-000 ARGUMENTS) (COLLECT-000 NULL))
    (CL:LOOP WHILE ITER-000 DO (CL:SETQ ARG-000 (CL:POP ITER-000))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN (CL:SETQ COLLECT-000 (CONS ARG-000 NIL))
       (CL:IF (CL:EQ ARGLIST-000 NIL) (CL:SETQ ARGLIST-000 COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST ARGLIST-000 COLLECT-000)))
      (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS ARG-000 NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
   (CL:LET*
    ((VALUE-000
      (CONS KWD-BACKLINKS-RELATION
       (CONS (CL:IF (CL:EQ NIL NULL) NIL NIL)
        (CONS RELATION ARGLIST-000)))))
    VALUE-000)))

;;; (DEFUN (MAKE-RULES-PATTERN SELECTION-PATTERN) ...)

(CL:DEFUN MAKE-RULES-PATTERN (POSRELATION NEGRELATION)
  (CONS KWD-BACKLINKS-RULES
   (CONS (CL:IF (CL:EQ NIL NULL) NIL NIL)
    (CONS POSRELATION (CONS NEGRELATION NIL)))))

;;; (DEFUN (FIND-SELECTION-KEY-WITH-EQUIVALENTS LOGIC-OBJECT) ...)

(CL:DEFUN FIND-SELECTION-KEY-WITH-EQUIVALENTS (PATTERN)
  (CL:LET* ((CANDIDATEKEYS (%%REST (%%REST PATTERN))))
   (CL:LET* ((TEST-VALUE-000 (%%VALUE PATTERN)))
    (CL:COND
     ((CL:OR (CL:EQ TEST-VALUE-000 KWD-BACKLINKS-DEPENDENTS)
       (CL:EQ TEST-VALUE-000 KWD-BACKLINKS-ISA)))
     ((CL:EQ TEST-VALUE-000 KWD-BACKLINKS-RELATION)
      (CL:SETQ CANDIDATEKEYS (%%REST CANDIDATEKEYS)))
     ((CL:OR (CL:EQ TEST-VALUE-000 KWD-BACKLINKS-CONTEXT-PROPOSITIONS)
       (CL:EQ TEST-VALUE-000 KWD-BACKLINKS-CONTEXT-INSTANCES))
      (CL:SETQ CANDIDATEKEYS (%%REST CANDIDATEKEYS)))
     (CL:T
      (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
        "get-selection-key-equivalents: Can't yet handle pattern `"
        PATTERN "'")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
   (CL:LET* ((KEY NULL) (ITER-000 CANDIDATEKEYS))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ KEY (%%VALUE ITER-000))
     (CL:COND
      ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE KEY)
        SGT-BACKLINKS-LOGIC-LOGIC-OBJECT)
       (CL:PROGN
        (CL:WHEN (CL:NOT (CL:EQ (VARIABLE-VALUE-INVERSE KEY) NIL))
         (CL:RETURN-FROM FIND-SELECTION-KEY-WITH-EQUIVALENTS KEY))))
      (CL:T))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   NULL))

;;; (DEFUN (SELECT-PROPOSITIONS PROPOSITIONS-INDEX) ...)

(CL:DEFUN SELECT-PROPOSITIONS (PATTERN)
  (CL:LET*
   ((KIND (%%VALUE PATTERN)) (ARGUMENTS (%%REST (%%REST PATTERN))))
   (CL:COND
    ((CL:EQ KIND KWD-BACKLINKS-DEPENDENTS)
     (UNFILTERED-DEPENDENT-PROPOSITIONS (%%VALUE ARGUMENTS) NULL))
    ((CL:EQ KIND KWD-BACKLINKS-ISA) (SELECT-ISA-PROPOSITIONS PATTERN))
    ((CL:EQ KIND KWD-BACKLINKS-RELATION)
     (SELECT-RELATION-PROPOSITIONS PATTERN))
    ((CL:EQ KIND KWD-BACKLINKS-RULES)
     (SELECT-RULE-PROPOSITIONS PATTERN))
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
       "select-propositions: Can't yet handle pattern `" PATTERN "'")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))

;;; (DEFUN (SELECT-ISA-PROPOSITIONS PROPOSITIONS-INDEX) ...)

(CL:DEFUN SELECT-ISA-PROPOSITIONS (PATTERN)
  (CL:LET*
   ((OBJECT (%%VALUE (%%REST (%%REST PATTERN))))
    (INDEX (UNFILTERED-DEPENDENT-ISA-PROPOSITIONS OBJECT)))
   (CL:COND
    ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE INDEX)
      SGT-BACKLINKS-LOGIC-PAGING-INDEX)
     (CL:PROGN
      (CL:WHEN
       (CL:EQ (%%VALUE (%PAGING-INDEX.SELECTION-PATTERN INDEX))
        KWD-BACKLINKS-ISA)
       (CL:RETURN-FROM SELECT-ISA-PROPOSITIONS INDEX))))
    (CL:T))
   (CL:LET*
    ((SEQUENCE (%SEQUENCE-INDEX.THE-SEQUENCE INDEX))
     (FILTEREDSEQUENCE NIL))
    (CL:WHEN (CL:EQ SEQUENCE NIL)
     (CL:RETURN-FROM SELECT-ISA-PROPOSITIONS NIL-NON-PAGING-INDEX))
    (CL:LET* ((PROP NULL) (ITER-000 SEQUENCE))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:SETQ PROP (%%VALUE ITER-000))
      (CL:WHEN
       (CL:AND (CL:EQ (%PROPOSITION.KIND PROP) KWD-BACKLINKS-ISA)
        (CL:NOT (DELETED? PROP)))
       (CL:SETQ FILTEREDSEQUENCE (CONS PROP FILTEREDSEQUENCE)))
      (CL:SETQ ITER-000 (%%REST ITER-000))))
    (CL:IF (CL:EQ FILTEREDSEQUENCE NIL) NIL-NON-PAGING-INDEX
     (CL:LET* ((SELF-000 (NEW-NON-PAGING-INDEX)))
      (CL:SETF (%NON-PAGING-INDEX.THE-SEQUENCE SELF-000)
       FILTEREDSEQUENCE)
      (CL:LET* ((VALUE-000 SELF-000)) VALUE-000))))))

;;; (DEFUN (HELP-SELECT-RELATION-PROPOSITIONS PROPOSITIONS-INDEX) ...)

(CL:DEFUN HELP-SELECT-RELATION-PROPOSITIONS (PATTERN)
  (CL:LET*
   ((ARGUMENTS (%%REST (%%REST PATTERN)))
    (RELATION (%%VALUE ARGUMENTS)) (KEYS (%%REST ARGUMENTS)))
   (CL:LET* ((VALUE-000 NULL))
    (CL:LET* ((KEY NULL) (ITER-000 KEYS))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:SETQ KEY (%%VALUE ITER-000))
      (CL:WHEN
       (CL:AND (CL:NOT (CL:EQ KEY NULL)) (INSTANCE-HAS-BACKLINKS? KEY))
       (CL:SETQ VALUE-000 KEY) (CL:RETURN))
      (CL:SETQ ITER-000 (%%REST ITER-000))))
    (CL:LET* ((ANCHOR VALUE-000))
     (CL:WHEN (CL:EQ ANCHOR NULL)
      (CL:LET* ((DESCRIPTION (GET-DESCRIPTION RELATION)))
       (CL:IF (CL:NOT (CL:EQ DESCRIPTION NULL))
        (CL:RETURN-FROM HELP-SELECT-RELATION-PROPOSITIONS
         (GET-DESCRIPTION-EXTENSION DESCRIPTION CL:T))
        (CL:RETURN-FROM HELP-SELECT-RELATION-PROPOSITIONS
         NIL-NON-PAGING-INDEX))))
     (CL:LET*
      ((INDEX (UNFILTERED-DEPENDENT-PROPOSITIONS ANCHOR RELATION))
       (SEQUENCE (%SEQUENCE-INDEX.THE-SEQUENCE INDEX))
       (FILTEREDSEQUENCE NIL) (ALLKEYVALUES NULL))
      (CL:COND
       ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE INDEX)
         SGT-BACKLINKS-LOGIC-PAGING-INDEX)
        (CL:PROGN
         (CL:WHEN
          (CL:AND (CL:NOT (CL:EQ (%PAGING-INDEX.STORE INDEX) NULL))
           (CL:EQ (%%VALUE (%PAGING-INDEX.SELECTION-PATTERN INDEX))
            KWD-BACKLINKS-RELATION))
          (CL:SETF (%PAGING-INDEX.SELECTION-PATTERN INDEX) PATTERN)
          (CL:RETURN-FROM HELP-SELECT-RELATION-PROPOSITIONS INDEX))))
       (CL:T))
      (CL:WHEN (CL:EQ SEQUENCE NIL)
       (CL:RETURN-FROM HELP-SELECT-RELATION-PROPOSITIONS
        NIL-NON-PAGING-INDEX))
      (CL:LET* ((PROP NULL) (ITER-001 SEQUENCE))
       (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
        (CL:SETQ PROP (%%VALUE ITER-001))
        (CL:TAGBODY
         (CL:WHEN (EQUAL? RELATION (%PROPOSITION.OPERATOR PROP))
          (CL:WHEN (CL:EQ ALLKEYVALUES NULL) (CL:SETQ ALLKEYVALUES NIL)
           (CL:WHEN (CL:NOT (CL:EQ (%%REST KEYS) NIL))
            (CL:LET* ((KEY NULL) (ITER-002 KEYS) (COLLECT-000 NULL))
             (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-002 NIL)) DO
              (CL:SETQ KEY (%%VALUE ITER-002))
              (CL:IF (CL:EQ COLLECT-000 NULL)
               (CL:PROGN
                (CL:SETQ COLLECT-000 (CONS (VALUE-OF KEY) NIL))
                (CL:IF (CL:EQ ALLKEYVALUES NIL)
                 (CL:SETQ ALLKEYVALUES COLLECT-000)
                 (ADD-CONS-TO-END-OF-CONS-LIST ALLKEYVALUES
                  COLLECT-000)))
               (CL:PROGN
                (CL:SETF (%%REST COLLECT-000)
                 (CONS (VALUE-OF KEY) NIL))
                (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))
              (CL:SETQ ITER-002 (%%REST ITER-002))))))
          (CL:WHEN (CL:NOT (CL:EQ ALLKEYVALUES NIL))
           (CL:LET* ((ARGUMENTS (%PROPOSITION.ARGUMENTS PROP)))
            (CL:LET* ((TEST-VALUE-000 CL:NIL))
             (CL:SETQ TEST-VALUE-000 (CL:NOT (CL:EQ ARGUMENTS NULL)))
             (CL:WHEN TEST-VALUE-000
              (CL:LET* ((ALWAYS?-000 CL:T))
               (CL:LET*
                ((KEY NULL) (ITER-003 ALLKEYVALUES) (ARG NULL)
                 (VECTOR-000 ARGUMENTS) (INDEX-000 0)
                 (LENGTH-000 (LENGTH VECTOR-000)))
                (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
                (CL:LOOP WHILE
                 (CL:AND (CL:NOT (CL:EQ ITER-003 NIL))
                  (CL:< INDEX-000 LENGTH-000))
                 DO (CL:SETQ KEY (%%VALUE ITER-003))
                 (CL:SETQ ARG
                  (CL:AREF
                   (CL:THE CL:SIMPLE-VECTOR
                    (%VECTOR.THE-ARRAY VECTOR-000))
                   INDEX-000))
                 (CL:WHEN
                  (CL:NOT
                   (CL:OR (CL:EQ KEY NULL) (EQUAL? KEY (VALUE-OF ARG))
                    (CL:AND (ISA? KEY SGT-BACKLINKS-LOGIC-PROPOSITION)
                     (ISA? (VALUE-OF ARG)
                      SGT-BACKLINKS-LOGIC-PROPOSITION)
                     (UNIFY-PROPOSITIONS? KEY (VALUE-OF ARG)
                      (NEW-KEY-VALUE-LIST)))))
                  (CL:SETQ ALWAYS?-000 CL:NIL) (CL:RETURN))
                 (CL:SETQ ITER-003 (%%REST ITER-003))
                 (CL:SETQ INDEX-000 (CL:1+ INDEX-000))))
               (CL:SETQ TEST-VALUE-000 ALWAYS?-000)))
             (CL:WHEN (CL:NOT TEST-VALUE-000) (CL:GO :CONTINUE)))))
          (CL:WHEN (CL:NOT (DELETED-PROPOSITION? PROP))
           (CL:SETQ FILTEREDSEQUENCE (CONS PROP FILTEREDSEQUENCE))))
         :CONTINUE)
        (CL:SETQ ITER-001 (%%REST ITER-001))))
      (CL:IF (CL:EQ FILTEREDSEQUENCE NIL) NIL-NON-PAGING-INDEX
       (CL:LET* ((SELF-001 (NEW-NON-PAGING-INDEX)))
        (CL:SETF (%NON-PAGING-INDEX.THE-SEQUENCE SELF-001)
         FILTEREDSEQUENCE)
        (CL:LET* ((VALUE-001 SELF-001)) VALUE-001))))))))

;;; (DEFUN (SELECT-RELATION-PROPOSITIONS PROPOSITIONS-INDEX) ...)

(CL:DEFUN SELECT-RELATION-PROPOSITIONS (PATTERN)
  (CL:LET*
   ((ARGUMENTS (%%REST (%%REST PATTERN)))
    (RELATION (%%VALUE ARGUMENTS)) (KEY1 NULL) (KEY2 NULL))
   (CL:SETQ ARGUMENTS (%%REST ARGUMENTS))
   (CL:WHEN (CL:EQ ARGUMENTS NIL)
    (CL:LET*
     ((MEMO-TABLE-000 NULL) (MEMOIZED-ENTRY-000 NULL)
      (MEMOIZED-VALUE-000 NULL))
     (CL:WHEN *MEMOIZATION-ENABLED?*
      (CL:SETQ MEMO-TABLE-000
       (%SURROGATE.SURROGATE-VALUE
        SGT-BACKLINKS-LOGIC-F-SELECT-RELATION-PROPOSITIONS-MEMO-TABLE-000))
      (CL:WHEN (CL:EQ MEMO-TABLE-000 NULL)
       (INITIALIZE-MEMOIZATION-TABLE
        SGT-BACKLINKS-LOGIC-F-SELECT-RELATION-PROPOSITIONS-MEMO-TABLE-000
        "(:MAX-VALUES 50 :TIMESTAMPS (:KB-UPDATE))")
       (CL:SETQ MEMO-TABLE-000
        (%SURROGATE.SURROGATE-VALUE
         SGT-BACKLINKS-LOGIC-F-SELECT-RELATION-PROPOSITIONS-MEMO-TABLE-000)))
      (CL:SETQ MEMOIZED-ENTRY-000
       (LOOKUP-MRU-MEMOIZED-VALUE MEMO-TABLE-000 RELATION *CONTEXT*
        MEMOIZED-NULL-VALUE NULL 2))
      (CL:SETQ MEMOIZED-VALUE-000 (%%VALUE MEMOIZED-ENTRY-000)))
     (CL:COND
      ((CL:NOT (CL:EQ MEMOIZED-VALUE-000 NULL))
       (CL:WHEN (CL:EQ MEMOIZED-VALUE-000 MEMOIZED-NULL-VALUE)
        (CL:SETQ MEMOIZED-VALUE-000 NULL)))
      (CL:T
       (CL:SETQ MEMOIZED-VALUE-000
        (HELP-SELECT-RELATION-PROPOSITIONS PATTERN))
       (CL:WHEN *MEMOIZATION-ENABLED?*
        (CL:SETF (%%VALUE MEMOIZED-ENTRY-000)
         (CL:IF (CL:EQ MEMOIZED-VALUE-000 NULL) MEMOIZED-NULL-VALUE
          MEMOIZED-VALUE-000)))))
     (CL:LET* ((VALUE-000 MEMOIZED-VALUE-000))
      (CL:RETURN-FROM SELECT-RELATION-PROPOSITIONS VALUE-000))))
   (CL:SETQ KEY1 (%%VALUE ARGUMENTS))
   (CL:SETQ ARGUMENTS (%%REST ARGUMENTS))
   (CL:WHEN (CL:EQ ARGUMENTS NIL)
    (CL:LET*
     ((MEMO-TABLE-001 NULL) (MEMOIZED-ENTRY-001 NULL)
      (MEMOIZED-VALUE-001 NULL))
     (CL:WHEN *MEMOIZATION-ENABLED?*
      (CL:SETQ MEMO-TABLE-001
       (%SURROGATE.SURROGATE-VALUE
        SGT-BACKLINKS-LOGIC-F-SELECT-RELATION-PROPOSITIONS-MEMO-TABLE-001))
      (CL:WHEN (CL:EQ MEMO-TABLE-001 NULL)
       (INITIALIZE-MEMOIZATION-TABLE
        SGT-BACKLINKS-LOGIC-F-SELECT-RELATION-PROPOSITIONS-MEMO-TABLE-001
        "(:MAX-VALUES 1000 :TIMESTAMPS (:KB-UPDATE))")
       (CL:SETQ MEMO-TABLE-001
        (%SURROGATE.SURROGATE-VALUE
         SGT-BACKLINKS-LOGIC-F-SELECT-RELATION-PROPOSITIONS-MEMO-TABLE-001)))
      (CL:SETQ MEMOIZED-ENTRY-001
       (LOOKUP-MRU-MEMOIZED-VALUE MEMO-TABLE-001 RELATION KEY1
        *CONTEXT* MEMOIZED-NULL-VALUE 4))
      (CL:SETQ MEMOIZED-VALUE-001 (%%VALUE MEMOIZED-ENTRY-001)))
     (CL:COND
      ((CL:NOT (CL:EQ MEMOIZED-VALUE-001 NULL))
       (CL:WHEN (CL:EQ MEMOIZED-VALUE-001 MEMOIZED-NULL-VALUE)
        (CL:SETQ MEMOIZED-VALUE-001 NULL)))
      (CL:T
       (CL:SETQ MEMOIZED-VALUE-001
        (HELP-SELECT-RELATION-PROPOSITIONS PATTERN))
       (CL:WHEN *MEMOIZATION-ENABLED?*
        (CL:SETF (%%VALUE MEMOIZED-ENTRY-001)
         (CL:IF (CL:EQ MEMOIZED-VALUE-001 NULL) MEMOIZED-NULL-VALUE
          MEMOIZED-VALUE-001)))))
     (CL:LET* ((VALUE-001 MEMOIZED-VALUE-001))
      (CL:RETURN-FROM SELECT-RELATION-PROPOSITIONS VALUE-001))))
   (CL:SETQ KEY2 (%%VALUE ARGUMENTS))
   (CL:SETQ ARGUMENTS (%%REST ARGUMENTS))
   (CL:WHEN (CL:EQ ARGUMENTS NIL)
    (CL:LET*
     ((MEMO-TABLE-002 NULL) (MEMOIZED-ENTRY-002 NULL)
      (MEMOIZED-VALUE-002 NULL))
     (CL:WHEN *MEMOIZATION-ENABLED?*
      (CL:SETQ MEMO-TABLE-002
       (%SURROGATE.SURROGATE-VALUE
        SGT-BACKLINKS-LOGIC-F-SELECT-RELATION-PROPOSITIONS-MEMO-TABLE-002))
      (CL:WHEN (CL:EQ MEMO-TABLE-002 NULL)
       (INITIALIZE-MEMOIZATION-TABLE
        SGT-BACKLINKS-LOGIC-F-SELECT-RELATION-PROPOSITIONS-MEMO-TABLE-002
        "(:MAX-VALUES 1000 :TIMESTAMPS (:KB-UPDATE))")
       (CL:SETQ MEMO-TABLE-002
        (%SURROGATE.SURROGATE-VALUE
         SGT-BACKLINKS-LOGIC-F-SELECT-RELATION-PROPOSITIONS-MEMO-TABLE-002)))
      (CL:SETQ MEMOIZED-ENTRY-002
       (LOOKUP-MRU-MEMOIZED-VALUE MEMO-TABLE-002 RELATION KEY1 KEY2
        *CONTEXT* 8))
      (CL:SETQ MEMOIZED-VALUE-002 (%%VALUE MEMOIZED-ENTRY-002)))
     (CL:COND
      ((CL:NOT (CL:EQ MEMOIZED-VALUE-002 NULL))
       (CL:WHEN (CL:EQ MEMOIZED-VALUE-002 MEMOIZED-NULL-VALUE)
        (CL:SETQ MEMOIZED-VALUE-002 NULL)))
      (CL:T
       (CL:SETQ MEMOIZED-VALUE-002
        (HELP-SELECT-RELATION-PROPOSITIONS PATTERN))
       (CL:WHEN *MEMOIZATION-ENABLED?*
        (CL:SETF (%%VALUE MEMOIZED-ENTRY-002)
         (CL:IF (CL:EQ MEMOIZED-VALUE-002 NULL) MEMOIZED-NULL-VALUE
          MEMOIZED-VALUE-002)))))
     (CL:LET* ((VALUE-002 MEMOIZED-VALUE-002))
      (CL:RETURN-FROM SELECT-RELATION-PROPOSITIONS VALUE-002))))
   (HELP-SELECT-RELATION-PROPOSITIONS PATTERN)))

;;; (DEFUN (SELECT-RULE-PROPOSITIONS PROPOSITIONS-INDEX) ...)

(CL:DEFUN SELECT-RULE-PROPOSITIONS (PATTERN)
  (CL:LET*
   ((ARGUMENTS (%%REST (%%REST PATTERN)))
    (POSRELATION (%%VALUE ARGUMENTS))
    (NEGRELATION (%%VALUE (%%REST ARGUMENTS))) (DESCRIPTION NULL)
    (STORE NULL))
   (CL:WHEN (CL:NOT (CL:EQ POSRELATION NULL))
    (CL:COND
     ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE POSRELATION)
       SGT-BACKLINKS-LOGIC-DESCRIPTION)
      (CL:PROGN (CL:SETQ DESCRIPTION POSRELATION)))
     (CL:T (CL:SETQ DESCRIPTION (GET-DESCRIPTION POSRELATION))))
    (CL:SETQ NEGRELATION NULL))
   (CL:WHEN (CL:NOT (CL:EQ NEGRELATION NULL))
    (CL:COND
     ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE NEGRELATION)
       SGT-BACKLINKS-LOGIC-DESCRIPTION)
      (CL:PROGN (CL:SETQ DESCRIPTION NEGRELATION)))
     (CL:T (CL:SETQ DESCRIPTION (GET-DESCRIPTION NEGRELATION)))))
   (CL:WHEN (CL:NOT (CL:EQ DESCRIPTION NULL))
    (DERIVE-DEFERRED-SATELLITE-RULES DESCRIPTION)
    (CL:SETQ STORE (HOME-OBJECT-STORE DESCRIPTION)))
   (CL:IF (CL:NOT (CL:EQ STORE NULL))
    (CREATE-SEQUENCE-INDEX STORE PATTERN)
    (CL:IF (CL:NOT (CL:EQ DESCRIPTION NULL))
     (SELECT-RELATION-PROPOSITIONS
      (MAKE-RELATION-PATTERN-2 SGT-BACKLINKS-PL-KERNEL-KB-SUBSET-OF
       NEGRELATION POSRELATION))
     NIL-NON-PAGING-INDEX))))

;;; (DEFUN (EVALUATE-SELECTION-PATTERN TRUTH-VALUE) ...)

(CL:DEFUN EVALUATE-SELECTION-PATTERN (PATTERN)
  (CL:SETQ PATTERN
   (MAKE-SELECTION-PATTERN (%%VALUE PATTERN)
    (LIST* KWD-BACKLINKS-EVALUATE? SYM-BACKLINKS-STELLA-TRUE
     (CONCATENATE (%%VALUE (%%REST PATTERN)) NIL))
    (%%REST (%%REST PATTERN))))
  (CL:LET*
   ((PROPOSITION NULL)
    (ITER-000 (ALLOCATE-ITERATOR (SELECT-PROPOSITIONS PATTERN))))
   (CL:LOOP WHILE (NEXT? ITER-000) DO
    (CL:SETQ PROPOSITION (%ITERATOR.VALUE ITER-000))
    (CL:WHEN
     (CL:NOT
      (UNKNOWN-TRUTH-VALUE?
       (ACCESS-IN-CONTEXT (%PROPOSITION.TRUTH-VALUE PROPOSITION)
        (%PROPOSITION.HOME-CONTEXT PROPOSITION) CL:NIL)))
     (CL:RETURN-FROM EVALUATE-SELECTION-PATTERN
      (ACCESS-IN-CONTEXT (%PROPOSITION.TRUTH-VALUE PROPOSITION)
       (%PROPOSITION.HOME-CONTEXT PROPOSITION) CL:NIL)))))
  UNKNOWN-TRUTH-VALUE)

;;; (DEFUN (EVALUATION-SELECTION-PATTERN? BOOLEAN) ...)

(CL:DEFUN EVALUATION-SELECTION-PATTERN? (PATTERN)
  (CL:LET* ((OPTIONS (%%VALUE (%%REST PATTERN))))
   (CL:LOOP WHILE (CL:NOT (CL:EQ OPTIONS NIL)) DO
    (CL:WHEN
     (CL:AND (CL:EQ (%%VALUE OPTIONS) KWD-BACKLINKS-EVALUATE?)
      (CL:EQ (COERCE-TO-BOOLEAN (%%VALUE (%%REST OPTIONS)))
       TRUE-WRAPPER))
     (CL:RETURN-FROM EVALUATION-SELECTION-PATTERN? CL:T))
    (CL:SETQ OPTIONS (%%REST (%%REST OPTIONS))))
   CL:NIL))

;;; (DEFUN (ARGUMENT-DISCOURAGES-BACKLINKS? BOOLEAN) ...)

(CL:DEFUN ARGUMENT-DISCOURAGES-BACKLINKS? (SELF)
  CL:NIL)

;;; (DEFUN SURROGATIFY-DISCOURAGED-ARGUMENTS ...)

(CL:DEFUN SURROGATIFY-DISCOURAGED-ARGUMENTS (SELF))

;;; (DEFUN (COUNT-BACKLINKS-ON-RELATION INTEGER) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T CL:T CL:T) CL:FIXNUM)
  COUNT-BACKLINKS-ON-RELATION))
(CL:DEFUN COUNT-BACKLINKS-ON-RELATION (SELF KIND RELATION)
  (CL:LET*
   ((INDEX (GET-BACKLINKS-INDEX SELF))
    (EQUIVALENTS
     (CL:IF (ISA? SELF SGT-BACKLINKS-LOGIC-LOGIC-OBJECT)
      (VARIABLE-VALUE-INVERSE SELF) NIL))
    (COUNT 0))
   (CL:DECLARE (CL:TYPE CL:FIXNUM COUNT))
   (CL:WHEN (CL:EQ INDEX NULL)
    (CL:RETURN-FROM COUNT-BACKLINKS-ON-RELATION NULL-INTEGER))
   (CL:SETQ COUNT
    (ESTIMATED-LENGTH
     (SELECT-PROPOSITIONS
      (CONS KWD-BACKLINKS-RELATION
       (CONS (CL:IF (CL:EQ NIL NULL) NIL NIL)
        (CONS RELATION (CONS SELF NIL)))))))
   (CL:WHEN
    (CL:AND (CL:= COUNT 0)
     (CL:NOT
      (CL:EQ
       (ALL-DIRECT-SUBRELATIONS (SURROGATE-TO-DESCRIPTION RELATION)
        CL:NIL)
       NIL)))
    (CL:SETQ COUNT 1))
   (CL:LET* ((EQUIV NULL) (ITER-000 EQUIVALENTS))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ EQUIV (%%VALUE ITER-000))
     (CL:SETQ COUNT
      (CL:+ COUNT (COUNT-BACKLINKS-ON-RELATION EQUIV KIND RELATION)))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   COUNT))

;;; (DEFUN (SELECT-ARGUMENT-WITH-BACKLINKS OBJECT BOOLEAN) ...)

(CL:DEFUN SELECT-ARGUMENT-WITH-BACKLINKS (PROPOSITION)
  (CL:LET*
   ((RELATION (%PROPOSITION.OPERATOR PROPOSITION))
    (KIND (%PROPOSITION.KIND PROPOSITION)) (VALUE NULL)
    (COUNT NULL-INTEGER) (LOWESTBACKLINKCOUNT NULL-INTEGER)
    (BESTARGUMENT NULL) (FOUNDDISCOURAGEDARGUMENT? CL:NIL))
   (CL:DECLARE (CL:TYPE CL:FIXNUM COUNT LOWESTBACKLINKCOUNT))
   (CL:LET*
    ((ARG NULL) (VECTOR-000 (%PROPOSITION.ARGUMENTS PROPOSITION))
     (INDEX-000 0) (LENGTH-000 (LENGTH VECTOR-000)))
    (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
    (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
     (CL:SETQ ARG
      (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-000))
       INDEX-000))
     (CL:TAGBODY (CL:SETQ VALUE (ARGUMENT-BOUND-TO ARG))
      (CL:WHEN (CL:NOT (CL:EQ VALUE NULL))
       (CL:WHEN CL:NIL (CL:SETQ FOUNDDISCOURAGEDARGUMENT? CL:T)
        (CL:GO :CONTINUE))
       (CL:SETQ COUNT
        (COUNT-BACKLINKS-ON-RELATION VALUE KIND RELATION))
       (CL:WHEN
        (CL:AND (DEFINED? COUNT)
         (CL:OR (NULL? LOWESTBACKLINKCOUNT)
          (CL:< COUNT LOWESTBACKLINKCOUNT)))
        (CL:SETQ LOWESTBACKLINKCOUNT COUNT)
        (CL:SETQ BESTARGUMENT VALUE)))
      :CONTINUE)
     (CL:SETQ INDEX-000 (CL:1+ INDEX-000))))
   (CL:WHEN
    (CL:AND (NULL? LOWESTBACKLINKCOUNT) FOUNDDISCOURAGEDARGUMENT?)
    (CL:LET*
     ((ARG NULL) (VECTOR-001 (%PROPOSITION.ARGUMENTS PROPOSITION))
      (INDEX-001 0) (LENGTH-001 (LENGTH VECTOR-001)))
     (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-001 LENGTH-001))
     (CL:LOOP WHILE (CL:< INDEX-001 LENGTH-001) DO
      (CL:SETQ ARG
       (CL:AREF
        (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-001))
        INDEX-001))
      (CL:TAGBODY (CL:SETQ VALUE (ARGUMENT-BOUND-TO ARG))
       (CL:WHEN (CL:NOT (CL:EQ VALUE NULL))
        (CL:WHEN (CL:NOT CL:NIL) (CL:GO :CONTINUE))
        (CL:SETQ COUNT
         (COUNT-BACKLINKS-ON-RELATION VALUE KIND RELATION))
        (CL:WHEN
         (CL:AND (DEFINED? COUNT)
          (CL:OR (NULL? LOWESTBACKLINKCOUNT)
           (CL:< COUNT LOWESTBACKLINKCOUNT)))
         (CL:SETQ LOWESTBACKLINKCOUNT COUNT)
         (CL:SETQ BESTARGUMENT VALUE)))
       :CONTINUE)
      (CL:SETQ INDEX-001 (CL:1+ INDEX-001)))))
   (CL:COND ((NULL? LOWESTBACKLINKCOUNT) (CL:VALUES NULL CL:NIL))
    (CL:T (CL:VALUES BESTARGUMENT CL:NIL)))))

;;; (DEFUN (INSTANCE-HAS-BACKLINKS? BOOLEAN) ...)

(CL:DEFUN INSTANCE-HAS-BACKLINKS? (SELF)
  (CL:OR (CL:NOT (CL:EQ (GET-BACKLINKS-INDEX SELF) NULL))
   (ISA? SELF SGT-BACKLINKS-LOGIC-PROPOSITION)))

;;; (DEFUN (SELECT-INSTANCE-WITH-BACKLINKS OBJECT) ...)

(CL:DEFUN SELECT-INSTANCE-WITH-BACKLINKS (INSTANCES RELATION)
  (CL:SETQ RELATION RELATION)
  (CL:LET* ((I NULL) (ITER-000 INSTANCES))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ I (%%VALUE ITER-000))
    (CL:WHEN (CL:AND (CL:NOT (CL:EQ I NULL)) (CL:NOT CL:NIL))
     (CL:LET* ((VALUE (VALUE-OF I)))
      (CL:WHEN (INSTANCE-HAS-BACKLINKS? VALUE)
       (CL:RETURN-FROM SELECT-INSTANCE-WITH-BACKLINKS VALUE))))
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  (CL:LET* ((I NULL) (ITER-001 INSTANCES))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
    (CL:SETQ I (%%VALUE ITER-001))
    (CL:WHEN (CL:AND (CL:NOT (CL:EQ I NULL)) CL:NIL)
     (CL:LET* ((VALUE (VALUE-OF I)))
      (CL:WHEN (INSTANCE-HAS-BACKLINKS? VALUE)
       (CL:RETURN-FROM SELECT-INSTANCE-WITH-BACKLINKS VALUE))))
    (CL:SETQ ITER-001 (%%REST ITER-001))))
  NULL)

;;; (DEFUN (FIND-SIMILAR-PROPOSITIONS PROPOSITIONS-INDEX) ...)

(CL:DEFUN FIND-SIMILAR-PROPOSITIONS (SELF)
  (CL:COND
   ((CL:EQ (%PROPOSITION.KIND SELF) KWD-BACKLINKS-FUNCTION)
    (CL:LET*
     ((ARG NULL) (ITER-000 (BUT-LAST (%PROPOSITION.ARGUMENTS SELF))))
     (CL:LOOP WHILE (NEXT? ITER-000) DO
      (CL:SETQ ARG (%ITERATOR.VALUE ITER-000))
      (CL:WHEN (INSTANCE-HAS-BACKLINKS? (VALUE-OF ARG))
       (CL:RETURN-FROM FIND-SIMILAR-PROPOSITIONS
        (UNFILTERED-DEPENDENT-PROPOSITIONS (VALUE-OF ARG)
         (%PROPOSITION.OPERATOR SELF)))))))
   (CL:T
    (CL:LET*
     ((ARG NULL) (VECTOR-000 (%PROPOSITION.ARGUMENTS SELF))
      (INDEX-000 0) (LENGTH-000 (LENGTH VECTOR-000)))
     (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
     (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
      (CL:SETQ ARG
       (CL:AREF
        (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-000))
        INDEX-000))
      (CL:WHEN (INSTANCE-HAS-BACKLINKS? ARG)
       (CL:RETURN-FROM FIND-SIMILAR-PROPOSITIONS
        (UNFILTERED-DEPENDENT-PROPOSITIONS ARG
         (%PROPOSITION.OPERATOR SELF))))
      (CL:SETQ INDEX-000 (CL:1+ INDEX-000))))))
  (REWRAP-PROPOSITION-ARGUMENTS SELF)
  (CL:LET*
   ((ARG NULL) (VECTOR-001 (%PROPOSITION.ARGUMENTS SELF)) (INDEX-001 0)
    (LENGTH-001 (LENGTH VECTOR-001)))
   (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-001 LENGTH-001))
   (CL:LOOP WHILE (CL:< INDEX-001 LENGTH-001) DO
    (CL:SETQ ARG
     (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-001))
      INDEX-001))
    (CL:WHEN
     (CL:AND (CL:NOT (CL:EQ ARG NULL)) (INSTANCE-HAS-BACKLINKS? ARG))
     (CL:RETURN-FROM FIND-SIMILAR-PROPOSITIONS
      (UNFILTERED-DEPENDENT-PROPOSITIONS ARG
       (%PROPOSITION.OPERATOR SELF))))
    (CL:SETQ INDEX-001 (CL:1+ INDEX-001))))
  NIL-NON-PAGING-INDEX)

;;; (DEFUN (FIND-MATCHING-CONCEIVED-PROPOSITION PROPOSITION) ...)

(CL:DEFUN FIND-MATCHING-CONCEIVED-PROPOSITION (GOAL)
  (CL:LET* ((TEST-VALUE-000 (%PROPOSITION.KIND GOAL)))
   (CL:COND
    ((CL:OR (CL:EQ TEST-VALUE-000 KWD-BACKLINKS-PREDICATE)
      (CL:EQ TEST-VALUE-000 KWD-BACKLINKS-FUNCTION)
      (CL:EQ TEST-VALUE-000 KWD-BACKLINKS-ISA)
      (CL:EQ TEST-VALUE-000 KWD-BACKLINKS-EQUIVALENT))
     (CL:LET*
      ((BACKLINKEDARGUMENT (SELECT-ARGUMENT-WITH-BACKLINKS GOAL)))
      (CL:WHEN (CL:EQ BACKLINKEDARGUMENT NULL)
       (CL:RETURN-FROM FIND-MATCHING-CONCEIVED-PROPOSITION NULL))
      (CL:LET* ((VALUE-000 NULL))
       (CL:LET*
        ((P NULL)
         (ITER-000
          (ALLOCATE-ITERATOR
           (UNFILTERED-DEPENDENT-PROPOSITIONS BACKLINKEDARGUMENT
            (%PROPOSITION.OPERATOR GOAL)))))
        (CL:LOOP WHILE (NEXT? ITER-000) DO
         (CL:SETQ P (%ITERATOR.VALUE ITER-000))
         (CL:WHEN
          (CL:AND
           (CL:EQ (%PROPOSITION.OPERATOR P)
            (%PROPOSITION.OPERATOR GOAL))
           (ARGUMENTS-MATCH-ARGUMENTS? P GOAL))
          (CL:SETQ VALUE-000 P) (CL:RETURN))))
       (CL:LET* ((VALUE-001 VALUE-000)) VALUE-001))))
    (CL:T GOAL))))

;;; (DEFUN TRANSFER-PROPOSITIONS-AND-BACKLINKS ...)

(CL:DEFUN TRANSFER-PROPOSITIONS-AND-BACKLINKS (FROM TO)
  (TRANSFER-PROPOSITIONS-EXCEPT-FOR FROM TO NIL-LIST))

;;; (DEFUN TRANSFER-PROPOSITIONS-EXCEPT-FOR ...)

(CL:DEFUN TRANSFER-PROPOSITIONS-EXCEPT-FOR (FROM TO EXCEPTPROPOSITIONS)
  (CL:WHEN *LOADINGREGENERABLEOBJECTS?*
   (CL:RETURN-FROM TRANSFER-PROPOSITIONS-EXCEPT-FOR))
  (CL:LET* ((VALUE-000 NIL))
   (CL:LET*
    ((P NULL)
     (ITER-000
      (ALLOCATE-ITERATOR (UNFILTERED-DEPENDENT-PROPOSITIONS TO NULL)))
     (COLLECT-000 NULL))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ P (%ITERATOR.VALUE ITER-000))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN (CL:SETQ COLLECT-000 (CONS P NIL))
       (CL:IF (CL:EQ VALUE-000 NIL) (CL:SETQ VALUE-000 COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST VALUE-000 COLLECT-000)))
      (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS P NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
   (CL:LET* ((TOPROPOSITIONS VALUE-000) (TOVALUE NULL))
    (CL:WHEN (CL:EQ EXCEPTPROPOSITIONS NULL)
     (CL:SETQ EXCEPTPROPOSITIONS NIL-LIST))
    (CL:LET* ((*EVALUATIONMODE* KWD-BACKLINKS-EXTENSIONAL-ASSERTION))
     (CL:DECLARE (CL:SPECIAL *EVALUATIONMODE*))
     (CL:LET*
      ((P NULL)
       (ITER-001
        (ALLOCATE-ITERATOR
         (UNFILTERED-DEPENDENT-PROPOSITIONS FROM NULL))))
      (CL:LOOP WHILE (NEXT? ITER-001) DO
       (CL:SETQ P (%ITERATOR.VALUE ITER-001))
       (CL:WHEN (CL:NOT (MEMBER? EXCEPTPROPOSITIONS P))
        (CL:IF
         (%BOOLEAN-WRAPPER.WRAPPER-VALUE
          (DYNAMIC-SLOT-VALUE (%PROPOSITION.DYNAMIC-SLOTS P)
           SYM-BACKLINKS-LOGIC-DESCRIPTIVE? FALSE-WRAPPER))
         (CL:SETQ *EVALUATIONMODE* KWD-BACKLINKS-DESCRIPTION)
         (CL:SETQ *EVALUATIONMODE*
          KWD-BACKLINKS-EXTENSIONAL-ASSERTION))
        (CL:SETQ TOVALUE (EVALUATE-TERM TO))
        (CL:LET*
         ((ARG NULL) (VECTOR-000 (%PROPOSITION.ARGUMENTS P))
          (INDEX-000 0) (LENGTH-000 (LENGTH VECTOR-000))
          (I NULL-INTEGER) (ITER-002 0))
         (CL:DECLARE
          (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000 I ITER-002))
         (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
          (CL:SETQ ARG
           (CL:AREF
            (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-000))
            INDEX-000))
          (CL:SETQ I ITER-002)
          (CL:WHEN (EQL? ARG FROM)
           (CL:LET
            ((SELF (%VECTOR.THE-ARRAY (%PROPOSITION.ARGUMENTS P)))
             (VALUE TOVALUE) (POSITION I))
            (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
             (CL:TYPE CL:FIXNUM POSITION))
            (CL:SETF (CL:AREF SELF POSITION) VALUE)))
          (CL:SETQ INDEX-000 (CL:1+ INDEX-000))
          (CL:SETQ ITER-002 (CL:1+ ITER-002))))
        (CL:LET* ((TEST-VALUE-000 CL:NIL))
         (CL:LET* ((FOUND?-000 CL:NIL))
          (CL:LET* ((TOP NULL) (ITER-003 TOPROPOSITIONS))
           (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-003 NIL)) DO
            (CL:SETQ TOP (%%VALUE ITER-003))
            (CL:WHEN (EQUIVALENT-PROPOSITIONS? P TOP NULL)
             (CL:SETQ FOUND?-000 CL:T) (CL:RETURN))
            (CL:SETQ ITER-003 (%%REST ITER-003))))
          (CL:SETQ TEST-VALUE-000 FOUND?-000))
         (CL:SETQ TEST-VALUE-000 (CL:NOT TEST-VALUE-000))
         (CL:WHEN TEST-VALUE-000
          (REMOVE-DEPENDENT-PROPOSITION-LINK FROM P)
          (ADD-DEPENDENT-PROPOSITION-LINK TOVALUE P))))))))))

;;; (DEFUN TRANSFER-DESCRIPTION-EXTENSION ...)

(CL:DEFUN TRANSFER-DESCRIPTION-EXTENSION (FROM TO)
  (CL:SETF (%NAMED-DESCRIPTION.EXTENSION TO)
   (%NAMED-DESCRIPTION.EXTENSION FROM))
  (CL:SETF (%NAMED-DESCRIPTION.EXTENSION FROM) NULL))

;;; (DEFUN (GET-DESCRIPTION-EXTENSION PROPOSITIONS-INDEX) ...)

(CL:DEFUN GET-DESCRIPTION-EXTENSION (DESCRIPTION UPDATE?)
  (CL:LET* ((EXTENSION (%NAMED-DESCRIPTION.EXTENSION DESCRIPTION)))
   (CL:COND
    ((CL:AND (CL:NOT (CL:EQ EXTENSION NULL))
      (CL:NOT (CL:EQ EXTENSION NIL-PAGING-INDEX)))
     EXTENSION)
    (UPDATE?
     (CL:SETQ EXTENSION
      (CREATE-SEQUENCE-INDEX KWD-BACKLINKS-PAGING
       (CONS KWD-BACKLINKS-RELATION
        (CONS (CL:IF (CL:EQ NIL NULL) NIL NIL)
         (CONS (%NAMED-DESCRIPTION.SURROGATE-VALUE-INVERSE DESCRIPTION)
          NIL)))))
     (CL:SETF (%NAMED-DESCRIPTION.EXTENSION DESCRIPTION) EXTENSION)
     EXTENSION)
    (CL:T NIL-PAGING-INDEX))))

;;; (DEFUN CLEANUP-DESCRIPTION-EXTENSION ...)

(CL:DEFUN CLEANUP-DESCRIPTION-EXTENSION (DESCRIPTION)
  (REMOVE-DELETED-MEMBERS (%NAMED-DESCRIPTION.EXTENSION DESCRIPTION)))

;;; (DEFUN CLEANUP-ALL-DESCRIPTION-EXTENSIONS ...)

(CL:DEFUN CLEANUP-ALL-DESCRIPTION-EXTENSIONS ()
  (CL:LET*
   ((DESCRIPTION NULL) (ITER-000 (ALL-NAMED-DESCRIPTIONS NULL CL:NIL)))
   (CL:LOOP WHILE (NEXT? ITER-000) DO
    (CL:SETQ DESCRIPTION (%ITERATOR.VALUE ITER-000))
    (CL:WHEN
     (CL:AND
      (CL:NOT (CL:EQ (%NAMED-DESCRIPTION.EXTENSION DESCRIPTION) NULL))
      (CL:NOT
       (CL:EQ (%NAMED-DESCRIPTION.EXTENSION DESCRIPTION)
        NIL-PAGING-INDEX)))
     (REMOVE-DELETED-MEMBERS
      (%NAMED-DESCRIPTION.EXTENSION DESCRIPTION))))))

;;; (DEFSPECIAL *SUPPRESSINSERTIONINTOCLASSEXTENSION?* ...)

(CL:DEFVAR *SUPPRESSINSERTIONINTOCLASSEXTENSION?* CL:NIL
  "Used when creating a skolem (e.g., a prototype) that
isn't visible in the corresponding class extension.")

;;; (DEFUN UPDATE-DESCRIPTION-EXTENSION ...)

(CL:DEFUN UPDATE-DESCRIPTION-EXTENSION (SELF)
  (CL:WHEN (DESCRIPTION-MODE?)
   (CL:RETURN-FROM UPDATE-DESCRIPTION-EXTENSION))
  (CL:LET* ((TEST-VALUE-000 (%PROPOSITION.KIND SELF)))
   (CL:COND
    ((CL:OR (CL:EQ TEST-VALUE-000 KWD-BACKLINKS-ISA)
      (CL:EQ TEST-VALUE-000 KWD-BACKLINKS-PREDICATE)
      (CL:EQ TEST-VALUE-000 KWD-BACKLINKS-FUNCTION))
     (CL:LET*
      ((DESCRIPTION (GET-DESCRIPTION (%PROPOSITION.OPERATOR SELF))))
      (CL:LET*
       ((ARG NULL) (VECTOR-000 (%PROPOSITION.ARGUMENTS SELF))
        (INDEX-000 0) (LENGTH-000 (LENGTH VECTOR-000)))
       (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
       (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
        (CL:SETQ ARG
         (CL:AREF
          (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-000))
          INDEX-000))
        (CL:LET* ((TEST-VALUE-001 (SAFE-PRIMARY-TYPE ARG)))
         (CL:COND
          ((SUBTYPE-OF? TEST-VALUE-001
            SGT-BACKLINKS-LOGIC-PATTERN-VARIABLE)
           (CL:PROGN (CL:RETURN-FROM UPDATE-DESCRIPTION-EXTENSION)))
          ((SUBTYPE-OF? TEST-VALUE-001 SGT-BACKLINKS-LOGIC-SKOLEM)
           (CL:PROGN
            (CL:WHEN
             (CL:OR
              (CL:AND (CLASS-DESCRIPTION? DESCRIPTION)
               (LITERAL-TYPE?
                (%NAMED-DESCRIPTION.SURROGATE-VALUE-INVERSE
                 DESCRIPTION)))
              *SUPPRESSINSERTIONINTOCLASSEXTENSION?*
              (%BOOLEAN-WRAPPER.WRAPPER-VALUE
               (DYNAMIC-SLOT-VALUE (%SKOLEM.DYNAMIC-SLOTS ARG)
                SYM-BACKLINKS-LOGIC-HYPOTHESIZED-INSTANCE?
                FALSE-WRAPPER)))
             (CL:RETURN-FROM UPDATE-DESCRIPTION-EXTENSION))))
          ((SUBTYPE-OF? TEST-VALUE-001
            SGT-BACKLINKS-LOGIC-LOGIC-OBJECT)
           (CL:PROGN
            (CL:WHEN
             (%BOOLEAN-WRAPPER.WRAPPER-VALUE
              (DYNAMIC-SLOT-VALUE (%LOGIC-OBJECT.DYNAMIC-SLOTS ARG)
               SYM-BACKLINKS-LOGIC-HYPOTHESIZED-INSTANCE?
               FALSE-WRAPPER))
             (CL:RETURN-FROM UPDATE-DESCRIPTION-EXTENSION))))
          (CL:T)))
        (CL:SETQ INDEX-000 (CL:1+ INDEX-000))))
      (CL:LET*
       ((EXTENSION (GET-DESCRIPTION-EXTENSION DESCRIPTION CL:T)))
       (CL:WHEN (CL:NOT *LOADINGREGENERABLEOBJECTS?*)
        (INSERT EXTENSION SELF)))))
    (CL:T))))

;;; (DEFUN (ALL-EXTENSION-MEMBERS ITERATOR) ...)

(CL:DEFUN ALL-EXTENSION-MEMBERS (DESCRIPTION)
  (CL:LET* ((EXTENSION (GET-DESCRIPTION-EXTENSION DESCRIPTION CL:T)))
   (REMOVE-DELETED-MEMBERS EXTENSION) (ALLOCATE-ITERATOR EXTENSION)))

;;; (DEFUN (COLLECTION-IMPLIES-COLLECTION? BOOLEAN) ...)

(CL:DEFUN COLLECTION-IMPLIES-COLLECTION? (SUBCOLLECTION SUPERCOLLECTION)
  (CL:IF (CL:EQ SUBCOLLECTION SUPERCOLLECTION) CL:T
   (MEMBER? (ALL-SUPERCOLLECTIONS SUBCOLLECTION) SUPERCOLLECTION)))

;;; (DEFUN (RELATION-IMPLIES-RELATION? BOOLEAN) ...)

(CL:DEFUN RELATION-IMPLIES-RELATION? (SUBREL SUPERREL)
  (COLLECTION-IMPLIES-COLLECTION? SUBREL SUPERREL))

;;; (DEFUN (DESCRIPTION-IMPLIES-DESCRIPTION? BOOLEAN) ...)

(CL:DEFUN DESCRIPTION-IMPLIES-DESCRIPTION? (SUBDESC SUPERDESC)
  (COLLECTION-IMPLIES-COLLECTION? SUBDESC SUPERDESC))

;;; (DEFUN (RELATIONREF-SPECIALIZES-RELATIONREF? BOOLEAN) ...)

(CL:DEFUN RELATIONREF-SPECIALIZES-RELATIONREF? (RELATIONREF1 RELATIONREF2)
  (CL:WHEN (CL:EQ RELATIONREF1 RELATIONREF2)
   (CL:RETURN-FROM RELATIONREF-SPECIALIZES-RELATIONREF? CL:T))
  (CL:LET*
   ((DESC1 (SURROGATE-TO-DESCRIPTION RELATIONREF1))
    (DESC2 (SURROGATE-TO-DESCRIPTION RELATIONREF2)))
   (CL:AND (CL:NOT (CL:EQ DESC1 NULL)) (CL:NOT (CL:EQ DESC2 NULL))
    (COLLECTION-IMPLIES-COLLECTION? DESC1 DESC2))))

(CL:DEFUN HELP-STARTUP-BACKLINKS1 ()
  (CL:PROGN
   (CL:SETQ SGT-BACKLINKS-LOGIC-PATTERN-VARIABLE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PATTERN-VARIABLE" NULL 1))
   (CL:SETQ KWD-BACKLINKS-NON-PAGING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NON-PAGING" NULL 2))
   (CL:SETQ KWD-BACKLINKS-DEPENDENTS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DEPENDENTS" NULL 2))
   (CL:SETQ SYM-BACKLINKS-LOGIC-DEPENDENT-PROPOSITIONS-INDEX
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DEPENDENT-PROPOSITIONS-INDEX" NULL
     0))
   (CL:SETQ SGT-BACKLINKS-LOGIC-INTEGER-LOGIC-WRAPPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INTEGER-LOGIC-WRAPPER" NULL 1))
   (CL:SETQ SGT-BACKLINKS-LOGIC-FLOAT-LOGIC-WRAPPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FLOAT-LOGIC-WRAPPER" NULL 1))
   (CL:SETQ SGT-BACKLINKS-LOGIC-STRING-LOGIC-WRAPPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STRING-LOGIC-WRAPPER" NULL 1))
   (CL:SETQ SGT-BACKLINKS-LOGIC-LOGIC-OBJECT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LOGIC-OBJECT" NULL 1))
   (CL:SETQ SGT-BACKLINKS-STELLA-THING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "THING"
     (GET-STELLA-MODULE "/STELLA" CL:T) 1))
   (CL:SETQ KWD-BACKLINKS-ISA
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ISA" NULL 2))
   (CL:SETQ KWD-BACKLINKS-RELATION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "RELATION" NULL 2))
   (CL:SETQ SYM-BACKLINKS-LOGIC-DESCRIPTIVE?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DESCRIPTIVE?" NULL 0))
   (CL:SETQ KWD-BACKLINKS-CONSTANT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONSTANT" NULL 2))
   (CL:SETQ SGT-BACKLINKS-LOGIC-SKOLEM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SKOLEM" NULL 1))
   (CL:SETQ SGT-BACKLINKS-LOGIC-DESCRIPTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DESCRIPTION" NULL 1))
   (CL:SETQ KWD-BACKLINKS-DEBUGGING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DEBUGGING" NULL 2))
   (CL:SETQ SYM-BACKLINKS-LOGIC-HYPOTHESIZED-INSTANCE?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "HYPOTHESIZED-INSTANCE?" NULL 0))
   (CL:SETQ KWD-BACKLINKS-WARNING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WARNING" NULL 2))
   (CL:SETQ SGT-BACKLINKS-LOGIC-PROPOSITION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PROPOSITION" NULL 1))
   (CL:SETQ SGT-BACKLINKS-STELLA-INTEGER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INTEGER"
     (GET-STELLA-MODULE "/STELLA" CL:T) 1))
   (CL:SETQ SGT-BACKLINKS-STELLA-FLOAT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FLOAT"
     (GET-STELLA-MODULE "/STELLA" CL:T) 1))
   (CL:SETQ SGT-BACKLINKS-STELLA-STRING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STRING"
     (GET-STELLA-MODULE "/STELLA" CL:T) 1))
   (CL:SETQ SGT-BACKLINKS-STELLA-LITERAL-WRAPPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LITERAL-WRAPPER"
     (GET-STELLA-MODULE "/STELLA" CL:T) 1))
   (CL:SETQ SGT-BACKLINKS-LOGIC-PAGING-INDEX
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PAGING-INDEX" NULL 1))
   (CL:SETQ SGT-BACKLINKS-PL-KERNEL-KB-SUBSET-OF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SUBSET-OF"
     (GET-STELLA-MODULE "/PL-KERNEL-KB" CL:T) 1))
   (CL:SETQ SYM-BACKLINKS-LOGIC-MASTER-PROPOSITION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MASTER-PROPOSITION" NULL 0))
   (CL:SETQ KWD-BACKLINKS-FORWARD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FORWARD" NULL 2))
   (CL:SETQ SYM-BACKLINKS-LOGIC-SUBSUMPTION-LINK?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SUBSUMPTION-LINK?" NULL 0))
   (CL:SETQ KWD-BACKLINKS-RULES
    (INTERN-RIGID-SYMBOL-WRT-MODULE "RULES" NULL 2))
   (CL:SETQ KWD-BACKLINKS-CONTEXT-PROPOSITIONS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTEXT-PROPOSITIONS" NULL 2))
   (CL:SETQ KWD-BACKLINKS-CONTEXT-INSTANCES
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTEXT-INSTANCES" NULL 2))
   (CL:SETQ
    SGT-BACKLINKS-LOGIC-F-SELECT-RELATION-PROPOSITIONS-MEMO-TABLE-000
    (INTERN-RIGID-SYMBOL-WRT-MODULE
     "F-SELECT-RELATION-PROPOSITIONS-MEMO-TABLE-000" NULL 1))
   (CL:SETQ
    SGT-BACKLINKS-LOGIC-F-SELECT-RELATION-PROPOSITIONS-MEMO-TABLE-001
    (INTERN-RIGID-SYMBOL-WRT-MODULE
     "F-SELECT-RELATION-PROPOSITIONS-MEMO-TABLE-001" NULL 1))
   (CL:SETQ
    SGT-BACKLINKS-LOGIC-F-SELECT-RELATION-PROPOSITIONS-MEMO-TABLE-002
    (INTERN-RIGID-SYMBOL-WRT-MODULE
     "F-SELECT-RELATION-PROPOSITIONS-MEMO-TABLE-002" NULL 1))
   (CL:SETQ KWD-BACKLINKS-EVALUATE?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "EVALUATE?" NULL 2))
   (CL:SETQ SYM-BACKLINKS-STELLA-TRUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TRUE"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ KWD-BACKLINKS-FUNCTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FUNCTION" NULL 2))
   (CL:SETQ KWD-BACKLINKS-PREDICATE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PREDICATE" NULL 2))
   (CL:SETQ KWD-BACKLINKS-EQUIVALENT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "EQUIVALENT" NULL 2))
   (CL:SETQ KWD-BACKLINKS-EXTENSIONAL-ASSERTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "EXTENSIONAL-ASSERTION" NULL 2))
   (CL:SETQ KWD-BACKLINKS-DESCRIPTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DESCRIPTION" NULL 2))
   (CL:SETQ KWD-BACKLINKS-PAGING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PAGING" NULL 2))
   (CL:SETQ SYM-BACKLINKS-LOGIC-STARTUP-BACKLINKS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-BACKLINKS" NULL 0))
   (CL:SETQ SYM-BACKLINKS-STELLA-METHOD-STARTUP-CLASSNAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))))

(CL:DEFUN HELP-STARTUP-BACKLINKS2 ()
  (CL:PROGN
   (DEFINE-FUNCTION-OBJECT "TYPE-HAS-BACKLINKS?"
    "(DEFUN (TYPE-HAS-BACKLINKS? BOOLEAN) ((TYPE TYPE)))"
    (CL:FUNCTION TYPE-HAS-BACKLINKS?) NULL)
   (DEFINE-EXTERNAL-SLOT-FROM-STRINGIFIED-SOURCE
    "(DEFSLOT THING DEPENDENT-PROPOSITIONS-INDEX :TYPE BACKLINKS-INDEX :DOCUMENTATION \"Enables instances of 'THING' to have backindexes to 
propositions, making them first class logic objects.\" :PUBLIC? TRUE :ALLOCATION :DYNAMIC)")
   (DEFINE-EXTERNAL-SLOT-FROM-STRINGIFIED-SOURCE
    "(DEFSLOT PROPOSITION DEPENDENT-PROPOSITIONS-INDEX :TYPE BACKLINKS-INDEX :DOCUMENTATION \"Enables instances of 'PROPOSITION' to have (standard)
backindexes to propositions (as well as their own special ones), making them
first class logic objects.\" :PUBLIC? TRUE :ALLOCATION :DYNAMIC)")
   (DEFINE-FUNCTION-OBJECT "CREATE-BACKLINKS-INDEX"
    "(DEFUN (CREATE-BACKLINKS-INDEX BACKLINKS-INDEX) ((SELF OBJECT)))"
    (CL:FUNCTION CREATE-BACKLINKS-INDEX) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-BACKLINKS-INDEX"
    "(DEFUN (GET-BACKLINKS-INDEX BACKLINKS-INDEX) ((SELF OBJECT)))"
    (CL:FUNCTION GET-BACKLINKS-INDEX) NULL)
   (DEFINE-FUNCTION-OBJECT
    "ADD-DEPENDENT-PROPOSITION-TO-SPECIALIZED-INDEX"
    "(DEFUN ADD-DEPENDENT-PROPOSITION-TO-SPECIALIZED-INDEX ((INDEX BACKLINKS-INDEX) (PROPOSITION PROPOSITION) (ARGUMENT OBJECT)))"
    (CL:FUNCTION ADD-DEPENDENT-PROPOSITION-TO-SPECIALIZED-INDEX) NULL)
   (DEFINE-FUNCTION-OBJECT "HELP-ADD-DEPENDENT-PROPOSITION"
    "(DEFUN HELP-ADD-DEPENDENT-PROPOSITION ((INDEX BACKLINKS-INDEX) (PROPOSITION PROPOSITION) (ARGUMENT OBJECT)))"
    (CL:FUNCTION HELP-ADD-DEPENDENT-PROPOSITION) NULL)
   (DEFINE-FUNCTION-OBJECT "ADD-DEPENDENT-PROPOSITION-LINK"
    "(DEFUN ADD-DEPENDENT-PROPOSITION-LINK ((SELF OBJECT) (PROPOSITION PROPOSITION)))"
    (CL:FUNCTION ADD-DEPENDENT-PROPOSITION-LINK) NULL)
   (DEFINE-FUNCTION-OBJECT "REMOVE-DEPENDENT-PROPOSITION-LINK"
    "(DEFUN REMOVE-DEPENDENT-PROPOSITION-LINK ((SELF OBJECT) (PROPOSITION PROPOSITION)))"
    (CL:FUNCTION REMOVE-DEPENDENT-PROPOSITION-LINK) NULL)
   (DEFINE-FUNCTION-OBJECT "HELP-REMOVE-DEPENDENT-PROPOSITION"
    "(DEFUN HELP-REMOVE-DEPENDENT-PROPOSITION ((INDEX BACKLINKS-INDEX) (PROPOSITION PROPOSITION)))"
    (CL:FUNCTION HELP-REMOVE-DEPENDENT-PROPOSITION) NULL)
   (DEFINE-FUNCTION-OBJECT "REMOVE-ALL-DEPENDENT-PROPOSITION-LINKS"
    "(DEFUN REMOVE-ALL-DEPENDENT-PROPOSITION-LINKS ((SELF LOGIC-OBJECT)))"
    (CL:FUNCTION REMOVE-ALL-DEPENDENT-PROPOSITION-LINKS) NULL)
   (DEFINE-FUNCTION-OBJECT "REWRAP-ARGUMENT"
    "(DEFUN (REWRAP-ARGUMENT OBJECT) ((ARGUMENT OBJECT)))"
    (CL:FUNCTION REWRAP-ARGUMENT) NULL)
   (DEFINE-FUNCTION-OBJECT "INDEX-ITH-DOMAIN?"
    "(DEFUN (INDEX-ITH-DOMAIN? BOOLEAN) ((DESCRIPTION NAMED-DESCRIPTION) (I INTEGER)))"
    (CL:FUNCTION INDEX-ITH-DOMAIN?) NULL)
   (DEFINE-FUNCTION-OBJECT "REWRAP-ITH-ARGUMENT?"
    "(DEFUN (REWRAP-ITH-ARGUMENT? BOOLEAN) ((ARGUMENT OBJECT) (PROPOSITION PROPOSITION) (I INTEGER)))"
    (CL:FUNCTION REWRAP-ITH-ARGUMENT?) NULL)
   (DEFINE-FUNCTION-OBJECT "REWRAP-PROPOSITION-ARGUMENTS"
    "(DEFUN REWRAP-PROPOSITION-ARGUMENTS ((SELF PROPOSITION)))"
    (CL:FUNCTION REWRAP-PROPOSITION-ARGUMENTS) NULL)
   (DEFINE-FUNCTION-OBJECT "UNFILTERED-DEPENDENT-PROPOSITIONS"
    "(DEFUN (UNFILTERED-DEPENDENT-PROPOSITIONS PROPOSITIONS-INDEX) ((SELF OBJECT) (RELATION SURROGATE)))"
    (CL:FUNCTION UNFILTERED-DEPENDENT-PROPOSITIONS) NULL)
   (DEFINE-FUNCTION-OBJECT
    "ALL-SPECIALIZING-DEPENDENT-PROPOSITIONS-NEXT?"
    "(DEFUN (ALL-SPECIALIZING-DEPENDENT-PROPOSITIONS-NEXT? BOOLEAN) ((SELF ALL-PURPOSE-ITERATOR)) :PUBLIC? TRUE)"
    (CL:FUNCTION ALL-SPECIALIZING-DEPENDENT-PROPOSITIONS-NEXT?) NULL)
   (DEFINE-FUNCTION-OBJECT "ALL-SPECIALIZING-DEPENDENT-PROPOSITIONS"
    "(DEFUN (ALL-SPECIALIZING-DEPENDENT-PROPOSITIONS (ITERATOR OF PROPOSITION)) ((SELF OBJECT) (RELATIONREF SURROGATE)) :PUBLIC? TRUE)"
    (CL:FUNCTION ALL-SPECIALIZING-DEPENDENT-PROPOSITIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "UNFILTERED-DEPENDENT-ISA-PROPOSITIONS"
    "(DEFUN (UNFILTERED-DEPENDENT-ISA-PROPOSITIONS PROPOSITIONS-INDEX) ((SELF OBJECT)))"
    (CL:FUNCTION UNFILTERED-DEPENDENT-ISA-PROPOSITIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "UNFILTERED-DEPENDENT-IMPLIES-PROPOSITIONS"
    "(DEFUN (UNFILTERED-DEPENDENT-IMPLIES-PROPOSITIONS PROPOSITIONS-INDEX) ((SELF OBJECT)))"
    (CL:FUNCTION UNFILTERED-DEPENDENT-IMPLIES-PROPOSITIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "INHERITS-TRUTH-FROM-MASTER?"
    "(DEFUN (INHERITS-TRUTH-FROM-MASTER? BOOLEAN) ((SELF PROPOSITION)))"
    (CL:FUNCTION INHERITS-TRUTH-FROM-MASTER?) NULL)
   (DEFINE-FUNCTION-OBJECT "APPLICABLE-RULES-OF-DESCRIPTION"
    "(DEFUN (APPLICABLE-RULES-OF-DESCRIPTION (CONS OF PROPOSITION)) ((SELF LOGIC-OBJECT) (DIRECTION KEYWORD) (TRUERULESONLY? BOOLEAN)))"
    (CL:FUNCTION APPLICABLE-RULES-OF-DESCRIPTION) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-SELECTION-PATTERN"
    "(DEFUN (MAKE-SELECTION-PATTERN SELECTION-PATTERN) ((KIND KEYWORD) (OPTIONS CONS) (ARGUMENTS CONS)) :GLOBALLY-INLINE? TRUE (RETURN (CONS KIND (CONS (CHOOSE (NULL? OPTIONS) NIL OPTIONS) ARGUMENTS))))"
    (CL:FUNCTION MAKE-SELECTION-PATTERN) NULL)
   (DEFINE-FUNCTION-OBJECT "PATTERN-KIND"
    "(DEFUN (PATTERN-KIND KEYWORD) ((PATTERN SELECTION-PATTERN)) :GLOBALLY-INLINE? TRUE (RETURN (FIRST PATTERN)))"
    (CL:FUNCTION PATTERN-KIND) NULL)
   (DEFINE-FUNCTION-OBJECT "PATTERN-OPTIONS"
    "(DEFUN (PATTERN-OPTIONS CONS) ((PATTERN SELECTION-PATTERN)) :GLOBALLY-INLINE? TRUE (RETURN (SECOND PATTERN)))"
    (CL:FUNCTION PATTERN-OPTIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "PATTERN-ARGUMENTS"
    "(DEFUN (PATTERN-ARGUMENTS CONS) ((PATTERN SELECTION-PATTERN)) :GLOBALLY-INLINE? TRUE (RETURN (REST (REST PATTERN))))"
    (CL:FUNCTION PATTERN-ARGUMENTS) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-DEPENDENT-PROPOSITIONS-PATTERN"
    "(DEFUN (MAKE-DEPENDENT-PROPOSITIONS-PATTERN SELECTION-PATTERN) ((ARGUMENT OBJECT)) :GLOBALLY-INLINE? TRUE (RETURN (MAKE-SELECTION-PATTERN :DEPENDENTS NIL (CONS ARGUMENT NIL))))"
    (CL:FUNCTION MAKE-DEPENDENT-PROPOSITIONS-PATTERN) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-ISA-PATTERN"
    "(DEFUN (MAKE-ISA-PATTERN SELECTION-PATTERN) ((ARGUMENT OBJECT)) :GLOBALLY-INLINE? TRUE (RETURN (MAKE-SELECTION-PATTERN :ISA NIL (CONS ARGUMENT NIL))))"
    (CL:FUNCTION MAKE-ISA-PATTERN) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-RELATION-EXTENSION-PATTERN"
    "(DEFUN (MAKE-RELATION-EXTENSION-PATTERN SELECTION-PATTERN) ((RELATION SURROGATE)) :GLOBALLY-INLINE? TRUE (RETURN (MAKE-SELECTION-PATTERN :RELATION NIL (CONS RELATION NIL))))"
    (CL:FUNCTION MAKE-RELATION-EXTENSION-PATTERN) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-RELATION-PATTERN"
    "(DEFUN (MAKE-RELATION-PATTERN SELECTION-PATTERN) ((RELATION SURROGATE) (ARGUMENT OBJECT)) :GLOBALLY-INLINE? TRUE (RETURN (MAKE-SELECTION-PATTERN :RELATION NIL (CONS RELATION (CONS ARGUMENT NIL)))))"
    (CL:FUNCTION MAKE-RELATION-PATTERN) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-RELATION-PATTERN-1"
    "(DEFUN (MAKE-RELATION-PATTERN-1 CONS) ((RELATION SURROGATE) (ARGUMENT OBJECT)) :GLOBALLY-INLINE? TRUE (RETURN (MAKE-RELATION-PATTERN-2 RELATION ARGUMENT NULL)))"
    (CL:FUNCTION MAKE-RELATION-PATTERN-1) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-RELATION-PATTERN-2"
    "(DEFUN (MAKE-RELATION-PATTERN-2 SELECTION-PATTERN) ((RELATION SURROGATE) (ARGUMENT1 OBJECT) (ARGUMENT2 OBJECT)))"
    (CL:FUNCTION MAKE-RELATION-PATTERN-2) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-RELATION-PATTERN-3"
    "(DEFUN (MAKE-RELATION-PATTERN-3 SELECTION-PATTERN) ((RELATION SURROGATE) (ARGUMENT1 OBJECT) (ARGUMENT2 OBJECT) (ARGUMENT3 OBJECT)))"
    (CL:FUNCTION MAKE-RELATION-PATTERN-3) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-RELATION-PATTERN-4"
    "(DEFUN (MAKE-RELATION-PATTERN-4 SELECTION-PATTERN) ((RELATION SURROGATE) (ARGUMENT1 OBJECT) (ARGUMENT2 OBJECT) (ARGUMENT3 OBJECT) (ARGUMENT4 OBJECT)))"
    (CL:FUNCTION MAKE-RELATION-PATTERN-4) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-RELATION-PATTERN-N"
    "(DEFUN (MAKE-RELATION-PATTERN-N SELECTION-PATTERN) ((RELATION SURROGATE) |&REST| (ARGUMENTS OBJECT)))"
    (CL:FUNCTION MAKE-RELATION-PATTERN-N) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-RULES-PATTERN"
    "(DEFUN (MAKE-RULES-PATTERN SELECTION-PATTERN) ((POSRELATION OBJECT) (NEGRELATION OBJECT)))"
    (CL:FUNCTION MAKE-RULES-PATTERN) NULL)
   (DEFINE-FUNCTION-OBJECT "FIND-SELECTION-KEY-WITH-EQUIVALENTS"
    "(DEFUN (FIND-SELECTION-KEY-WITH-EQUIVALENTS LOGIC-OBJECT) ((PATTERN SELECTION-PATTERN)))"
    (CL:FUNCTION FIND-SELECTION-KEY-WITH-EQUIVALENTS) NULL)
   (DEFINE-FUNCTION-OBJECT "SELECT-PROPOSITIONS"
    "(DEFUN (SELECT-PROPOSITIONS PROPOSITIONS-INDEX) ((PATTERN SELECTION-PATTERN)))"
    (CL:FUNCTION SELECT-PROPOSITIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "SELECT-ISA-PROPOSITIONS"
    "(DEFUN (SELECT-ISA-PROPOSITIONS PROPOSITIONS-INDEX) ((PATTERN SELECTION-PATTERN)))"
    (CL:FUNCTION SELECT-ISA-PROPOSITIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "HELP-SELECT-RELATION-PROPOSITIONS"
    "(DEFUN (HELP-SELECT-RELATION-PROPOSITIONS PROPOSITIONS-INDEX) ((PATTERN SELECTION-PATTERN)))"
    (CL:FUNCTION HELP-SELECT-RELATION-PROPOSITIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "SELECT-RELATION-PROPOSITIONS"
    "(DEFUN (SELECT-RELATION-PROPOSITIONS PROPOSITIONS-INDEX) ((PATTERN SELECTION-PATTERN)))"
    (CL:FUNCTION SELECT-RELATION-PROPOSITIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "SELECT-RULE-PROPOSITIONS"
    "(DEFUN (SELECT-RULE-PROPOSITIONS PROPOSITIONS-INDEX) ((PATTERN SELECTION-PATTERN)))"
    (CL:FUNCTION SELECT-RULE-PROPOSITIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "EVALUATE-SELECTION-PATTERN"
    "(DEFUN (EVALUATE-SELECTION-PATTERN TRUTH-VALUE) ((PATTERN SELECTION-PATTERN)))"
    (CL:FUNCTION EVALUATE-SELECTION-PATTERN) NULL)
   (DEFINE-FUNCTION-OBJECT "EVALUATION-SELECTION-PATTERN?"
    "(DEFUN (EVALUATION-SELECTION-PATTERN? BOOLEAN) ((PATTERN SELECTION-PATTERN)))"
    (CL:FUNCTION EVALUATION-SELECTION-PATTERN?) NULL)
   (DEFINE-FUNCTION-OBJECT "ARGUMENT-DISCOURAGES-BACKLINKS?"
    "(DEFUN (ARGUMENT-DISCOURAGES-BACKLINKS? BOOLEAN) ((SELF OBJECT)) :GLOBALLY-INLINE? TRUE (RETURN FALSE))"
    (CL:FUNCTION ARGUMENT-DISCOURAGES-BACKLINKS?) NULL)
   (DEFINE-FUNCTION-OBJECT "SURROGATIFY-DISCOURAGED-ARGUMENTS"
    "(DEFUN SURROGATIFY-DISCOURAGED-ARGUMENTS ((SELF PROPOSITION)))"
    (CL:FUNCTION SURROGATIFY-DISCOURAGED-ARGUMENTS) NULL)
   (DEFINE-FUNCTION-OBJECT "COUNT-BACKLINKS-ON-RELATION"
    "(DEFUN (COUNT-BACKLINKS-ON-RELATION INTEGER) ((SELF OBJECT) (KIND KEYWORD) (RELATION SURROGATE)))"
    (CL:FUNCTION COUNT-BACKLINKS-ON-RELATION) NULL)
   (DEFINE-FUNCTION-OBJECT "SELECT-ARGUMENT-WITH-BACKLINKS"
    "(DEFUN (SELECT-ARGUMENT-WITH-BACKLINKS OBJECT BOOLEAN) ((PROPOSITION PROPOSITION)))"
    (CL:FUNCTION SELECT-ARGUMENT-WITH-BACKLINKS) NULL)
   (DEFINE-FUNCTION-OBJECT "INSTANCE-HAS-BACKLINKS?"
    "(DEFUN (INSTANCE-HAS-BACKLINKS? BOOLEAN) ((SELF OBJECT)))"
    (CL:FUNCTION INSTANCE-HAS-BACKLINKS?) NULL)
   (DEFINE-FUNCTION-OBJECT "SELECT-INSTANCE-WITH-BACKLINKS"
    "(DEFUN (SELECT-INSTANCE-WITH-BACKLINKS OBJECT) ((INSTANCES CONS) (RELATION SURROGATE)) :INLINE INSTANCE-HAS-BACKLINKS?)"
    (CL:FUNCTION SELECT-INSTANCE-WITH-BACKLINKS) NULL)
   (DEFINE-FUNCTION-OBJECT "FIND-SIMILAR-PROPOSITIONS"
    "(DEFUN (FIND-SIMILAR-PROPOSITIONS PROPOSITIONS-INDEX) ((SELF PROPOSITION)))"
    (CL:FUNCTION FIND-SIMILAR-PROPOSITIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "FIND-MATCHING-CONCEIVED-PROPOSITION"
    "(DEFUN (FIND-MATCHING-CONCEIVED-PROPOSITION PROPOSITION) ((GOAL PROPOSITION)))"
    (CL:FUNCTION FIND-MATCHING-CONCEIVED-PROPOSITION) NULL)
   (DEFINE-FUNCTION-OBJECT "TRANSFER-PROPOSITIONS-AND-BACKLINKS"
    "(DEFUN TRANSFER-PROPOSITIONS-AND-BACKLINKS ((FROM OBJECT) (TO OBJECT)))"
    (CL:FUNCTION TRANSFER-PROPOSITIONS-AND-BACKLINKS) NULL)
   (DEFINE-FUNCTION-OBJECT "TRANSFER-PROPOSITIONS-EXCEPT-FOR"
    "(DEFUN TRANSFER-PROPOSITIONS-EXCEPT-FOR ((FROM OBJECT) (TO OBJECT) (EXCEPTPROPOSITIONS (LIST OF PROPOSITION))))"
    (CL:FUNCTION TRANSFER-PROPOSITIONS-EXCEPT-FOR) NULL)
   (DEFINE-FUNCTION-OBJECT "TRANSFER-DESCRIPTION-EXTENSION"
    "(DEFUN TRANSFER-DESCRIPTION-EXTENSION ((FROM NAMED-DESCRIPTION) (TO NAMED-DESCRIPTION)))"
    (CL:FUNCTION TRANSFER-DESCRIPTION-EXTENSION) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-DESCRIPTION-EXTENSION"
    "(DEFUN (GET-DESCRIPTION-EXTENSION PROPOSITIONS-INDEX) ((DESCRIPTION NAMED-DESCRIPTION) (UPDATE? BOOLEAN)))"
    (CL:FUNCTION GET-DESCRIPTION-EXTENSION) NULL)
   (DEFINE-FUNCTION-OBJECT "CLEANUP-DESCRIPTION-EXTENSION"
    "(DEFUN CLEANUP-DESCRIPTION-EXTENSION ((DESCRIPTION NAMED-DESCRIPTION)))"
    (CL:FUNCTION CLEANUP-DESCRIPTION-EXTENSION) NULL)
   (DEFINE-FUNCTION-OBJECT "CLEANUP-ALL-DESCRIPTION-EXTENSIONS"
    "(DEFUN CLEANUP-ALL-DESCRIPTION-EXTENSIONS ())"
    (CL:FUNCTION CLEANUP-ALL-DESCRIPTION-EXTENSIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "UPDATE-DESCRIPTION-EXTENSION"
    "(DEFUN UPDATE-DESCRIPTION-EXTENSION ((SELF PROPOSITION)))"
    (CL:FUNCTION UPDATE-DESCRIPTION-EXTENSION) NULL)
   (DEFINE-FUNCTION-OBJECT "ALL-EXTENSION-MEMBERS"
    "(DEFUN (ALL-EXTENSION-MEMBERS ITERATOR) ((DESCRIPTION NAMED-DESCRIPTION)))"
    (CL:FUNCTION ALL-EXTENSION-MEMBERS) NULL)))

(CL:DEFUN STARTUP-BACKLINKS ()
  (CL:LET*
   ((*MODULE* (GET-STELLA-MODULE "/LOGIC" (> *STARTUP-TIME-PHASE* 1)))
    (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2) (HELP-STARTUP-BACKLINKS1))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 4)
    (CL:SETQ *INTEGER-LOGIC-WRAPPER-TABLE* (NEW-INTEGER-HASH-TABLE))
    (CL:SETQ *FLOAT-LOGIC-WRAPPER-TABLE* (NEW-FLOAT-HASH-TABLE))
    (CL:SETQ *STRING-LOGIC-WRAPPER-TABLE* (NEW-STRING-HASH-TABLE)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7) (HELP-STARTUP-BACKLINKS2)
    (DEFINE-FUNCTION-OBJECT "COLLECTION-IMPLIES-COLLECTION?"
     "(DEFUN (COLLECTION-IMPLIES-COLLECTION? BOOLEAN) ((SUBCOLLECTION LOGIC-OBJECT) (SUPERCOLLECTION LOGIC-OBJECT)))"
     (CL:FUNCTION COLLECTION-IMPLIES-COLLECTION?) NULL)
    (DEFINE-FUNCTION-OBJECT "RELATION-IMPLIES-RELATION?"
     "(DEFUN (RELATION-IMPLIES-RELATION? BOOLEAN) ((SUBREL NAMED-DESCRIPTION) (SUPERREL NAMED-DESCRIPTION)) :GLOBALLY-INLINE? TRUE (RETURN (COLLECTION-IMPLIES-COLLECTION? SUBREL SUPERREL)))"
     (CL:FUNCTION RELATION-IMPLIES-RELATION?) NULL)
    (DEFINE-FUNCTION-OBJECT "DESCRIPTION-IMPLIES-DESCRIPTION?"
     "(DEFUN (DESCRIPTION-IMPLIES-DESCRIPTION? BOOLEAN) ((SUBDESC DESCRIPTION) (SUPERDESC DESCRIPTION)) :GLOBALLY-INLINE? TRUE (RETURN (COLLECTION-IMPLIES-COLLECTION? SUBDESC SUPERDESC)))"
     (CL:FUNCTION DESCRIPTION-IMPLIES-DESCRIPTION?) NULL)
    (DEFINE-FUNCTION-OBJECT "RELATIONREF-SPECIALIZES-RELATIONREF?"
     "(DEFUN (RELATIONREF-SPECIALIZES-RELATIONREF? BOOLEAN) ((RELATIONREF1 SURROGATE) (RELATIONREF2 SURROGATE)) :INLINE SURROGATE-TO-DESCRIPTION)"
     (CL:FUNCTION RELATIONREF-SPECIALIZES-RELATIONREF?) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-BACKLINKS"
     "(DEFUN STARTUP-BACKLINKS () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-BACKLINKS) NULL)
    (CL:LET*
     ((FUNCTION
       (LOOKUP-FUNCTION SYM-BACKLINKS-LOGIC-STARTUP-BACKLINKS)))
     (SET-DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
      SYM-BACKLINKS-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "_StartupBacklinks") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *SPECIALIZED-BACKLINKS-CROSSOVER-POINT* INTEGER 10 :DOCUMENTATION \"When 'dependent-propositions-list' gets this long in a
backlinks index, then we create a hash table index and other
specialized indices.\")")
    (CL:SETQ *WRAPPED-TYPE-TABLE*
     (CONCATENATE *WRAPPED-TYPE-TABLE*
      (LIST*
       (LIST* SGT-BACKLINKS-LOGIC-INTEGER-LOGIC-WRAPPER
        SGT-BACKLINKS-STELLA-INTEGER NIL)
       (LIST* SGT-BACKLINKS-LOGIC-FLOAT-LOGIC-WRAPPER
        SGT-BACKLINKS-STELLA-FLOAT NIL)
       (LIST* SGT-BACKLINKS-LOGIC-STRING-LOGIC-WRAPPER
        SGT-BACKLINKS-STELLA-STRING NIL)
       NIL)))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *INTEGER-LOGIC-WRAPPER-TABLE* INTEGER-HASH-TABLE (NEW INTEGER-HASH-TABLE))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *FLOAT-LOGIC-WRAPPER-TABLE* FLOAT-HASH-TABLE (NEW FLOAT-HASH-TABLE))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *STRING-LOGIC-WRAPPER-TABLE* STRING-HASH-TABLE (NEW STRING-HASH-TABLE))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *BACKLINK-ALL-PROPOSITION-ARGUMENTS?* BOOLEAN FALSE :DOCUMENTATION \"If TRUE, wrap all literal proposition arguments
so that they can all support backlink indices.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *SUPPRESSINSERTIONINTOCLASSEXTENSION?* BOOLEAN FALSE :DOCUMENTATION \"Used when creating a skolem (e.g., a prototype) that
isn't visible in the corresponding class extension.\")"))))
