;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

#|--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1997-2000              | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied "AS IS",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SGT-GENERATE-STELLA-THING NULL)
(CL:DEFVAR SYM-GENERATE-STELLA-SETOF NULL)
(CL:DEFVAR SYM-GENERATE-LOGIC-LISTOF NULL)
(CL:DEFVAR SYM-GENERATE-LOGIC-COMPLEMENT-DESCRIPTION NULL)
(CL:DEFVAR SYM-GENERATE-STELLA-NOT NULL)
(CL:DEFVAR SYM-GENERATE-LOGIC-KAPPA NULL)
(CL:DEFVAR SYM-GENERATE-STELLA-NULL NULL)
(CL:DEFVAR KWD-GENERATE-PREDICATE NULL)
(CL:DEFVAR KWD-GENERATE-FUNCTION NULL)
(CL:DEFVAR KWD-GENERATE-ISA NULL)
(CL:DEFVAR KWD-GENERATE-AND NULL)
(CL:DEFVAR KWD-GENERATE-OR NULL)
(CL:DEFVAR KWD-GENERATE-NOT NULL)
(CL:DEFVAR KWD-GENERATE-EQUIVALENT NULL)
(CL:DEFVAR KWD-GENERATE-EXISTS NULL)
(CL:DEFVAR SYM-GENERATE-STELLA-EXISTS NULL)
(CL:DEFVAR SYM-GENERATE-LOGIC-IO-VARIABLES NULL)
(CL:DEFVAR KWD-GENERATE-FORALL NULL)
(CL:DEFVAR SYM-GENERATE-STELLA-FORALL NULL)
(CL:DEFVAR SYM-GENERATE-STELLA-=> NULL)
(CL:DEFVAR KWD-GENERATE-IMPLIES NULL)
(CL:DEFVAR KWD-GENERATE-FAIL NULL)
(CL:DEFVAR SYM-GENERATE-LOGIC-FAIL NULL)
(CL:DEFVAR KWD-GENERATE-CONSTANT NULL)
(CL:DEFVAR SYM-GENERATE-LOGIC-UNIDENTIFIED-SKOLEM NULL)
(CL:DEFVAR SYM-GENERATE-LOGIC-UNNAMED_OBJECT NULL)
(CL:DEFVAR SGT-GENERATE-LOGIC-PROPOSITION NULL)
(CL:DEFVAR SGT-GENERATE-STELLA-LITERAL-WRAPPER NULL)
(CL:DEFVAR SGT-GENERATE-LOGIC-DESCRIPTION NULL)
(CL:DEFVAR SGT-GENERATE-LOGIC-PATTERN-VARIABLE NULL)
(CL:DEFVAR SGT-GENERATE-LOGIC-SKOLEM NULL)
(CL:DEFVAR SGT-GENERATE-LOGIC-LOGIC-OBJECT NULL)
(CL:DEFVAR SGT-GENERATE-STELLA-COLLECTION NULL)
(CL:DEFVAR SYM-GENERATE-LOGIC-ILLEGAL-TERM NULL)
(CL:DEFVAR SYM-GENERATE-LOGIC-FORWARD-ONLY? NULL)
(CL:DEFVAR SYM-GENERATE-PL-KERNEL-KB-SUBSET-OF NULL)
(CL:DEFVAR SYM-GENERATE-STELLA-<= NULL)
(CL:DEFVAR SYM-GENERATE-LOGIC-STARTUP-GENERATE NULL)
(CL:DEFVAR SYM-GENERATE-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STARTUP-TIME-PHASE* *MODULE* *REVERSEPOLARITY?*
  FALSE-WRAPPER EOL SYSTEM-DEFINED-ARGUMENT-NAMES))

;;; (DEFSPECIAL *CANONICALVARIABLENAMEMAPPING* ...)

(CL:DEFVAR *CANONICALVARIABLENAMEMAPPING* NULL
  "Maps variables to symbols in SYSTEM-DEFINED-ARGUMENT-NAMES.")

;;; (DEFSPECIAL *CANONICALVARIABLECOUNTER* ...)

(CL:PROGN (CL:DEFVAR *CANONICALVARIABLECOUNTER* NULL-INTEGER "Number of the last canonically-mapped variable.") (CL:DECLAIM (CL:TYPE CL:FIXNUM *CANONICALVARIABLECOUNTER*)))

;;; (DEFUN (GENERATE-EXPRESSION OBJECT) ...)

(CL:DEFUN GENERATE-EXPRESSION (SELF CANONICALIZEVARIABLENAMES?)
  "Return an s-expression representing the source expression for 'self'."
  (CL:LET*
   ((*CANONICALVARIABLENAMEMAPPING*
     (CL:IF CANONICALIZEVARIABLENAMES? (NEW-KEY-VALUE-LIST) NULL))
    (*CANONICALVARIABLECOUNTER* -1))
   (CL:DECLARE
    (CL:SPECIAL *CANONICALVARIABLENAMEMAPPING*
     *CANONICALVARIABLECOUNTER*))
   (CL:DECLARE (CL:TYPE CL:FIXNUM *CANONICALVARIABLECOUNTER*))
   (GENERATE-TERM SELF)))

;;; (DEFUN (GENERATE-NAME-OF-VARIABLE SYMBOL) ...)

(CL:DEFUN GENERATE-NAME-OF-VARIABLE (SELF)
  (CL:WHEN (CL:EQ *CANONICALVARIABLENAMEMAPPING* NULL)
   (CL:RETURN-FROM GENERATE-NAME-OF-VARIABLE
    (%PATTERN-VARIABLE.SKOLEM-NAME SELF)))
  (CL:LET* ((CANONICALNAME (LOOKUP *CANONICALVARIABLENAMEMAPPING* SELF)))
   (CL:WHEN (CL:EQ CANONICALNAME NULL)
    (CL:SETQ CANONICALNAME
     (NTH SYSTEM-DEFINED-ARGUMENT-NAMES
      (CL:SETQ *CANONICALVARIABLECOUNTER*
       (CL:1+ *CANONICALVARIABLECOUNTER*))))
    (INSERT-AT *CANONICALVARIABLENAMEMAPPING* SELF CANONICALNAME))
   CANONICALNAME))

;;; (DEFUN (GENERATE-ONE-VARIABLE OBJECT) ...)

(CL:DEFUN GENERATE-ONE-VARIABLE (SELF TYPED?)
  (CL:LET* ((NAME (GENERATE-NAME-OF-VARIABLE SELF)))
   (CL:IF
    (CL:AND TYPED?
     (CL:NOT (CL:EQ (LOGICAL-TYPE SELF) SGT-GENERATE-STELLA-THING)))
    (CONS NAME (CONS (SURROGATE-TO-SYMBOL (LOGICAL-TYPE SELF)) NIL)) NAME)))

;;; (DEFUN (GENERATE-VARIABLES CONS) ...)

(CL:DEFUN GENERATE-VARIABLES (VECTOR TYPED?)
  (CL:LET* ((RESULT NIL))
   (CL:LET*
    ((V NULL) (VECTOR-000 VECTOR) (INDEX-000 0)
     (LENGTH-000 (LENGTH VECTOR-000)) (COLLECT-000 NULL))
    (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
    (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
     (CL:PROGN
      (CL:SETQ V
       (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-000))
        INDEX-000))
      (CL:SETQ INDEX-000 (CL:1+ INDEX-000)))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-000 (CONS (GENERATE-ONE-VARIABLE V TYPED?) NIL))
       (CL:IF (CL:EQ RESULT NIL) (CL:SETQ RESULT COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST RESULT COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000)
        (CONS (GENERATE-ONE-VARIABLE V TYPED?) NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
   RESULT))

;;; (DEFUN (GENERATE-STELLA-COLLECTION CONS) ...)

(CL:DEFUN GENERATE-STELLA-COLLECTION (SELF)
  (CL:LET* ((COLLECTION NIL))
   (CL:LET*
    ((M NULL) (ITER-000 (ALLOCATE-ITERATOR SELF)) (COLLECT-000 NULL))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ M (%ITERATOR.VALUE ITER-000))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN (CL:SETQ COLLECT-000 (CONS (GENERATE-TERM M) NIL))
       (CL:IF (CL:EQ COLLECTION NIL) (CL:SETQ COLLECTION COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST COLLECTION COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000) (CONS (GENERATE-TERM M) NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
   (CONS
    (CL:IF (NO-DUPLICATES? SELF) SYM-GENERATE-STELLA-SETOF
     SYM-GENERATE-LOGIC-LISTOF)
    (CONCATENATE COLLECTION NIL))))

;;; (DEFUN (GENERATE-DESCRIPTION OBJECT) ...)

(CL:DEFUN GENERATE-DESCRIPTION (SELF)
  (CL:COND
   ((NAMED-DESCRIPTION? SELF)
    (INTERNAL-STELLA-OPERATOR-TO-KIF (DESCRIPTION-NAME SELF)))
   ((CL:NOT
     (CL:EQ
      (DYNAMIC-SLOT-VALUE (%DESCRIPTION.DYNAMIC-SLOTS SELF)
       SYM-GENERATE-LOGIC-COMPLEMENT-DESCRIPTION NULL)
      NULL))
    (LIST* SYM-GENERATE-STELLA-NOT
     (INTERNAL-STELLA-OPERATOR-TO-KIF
      (DESCRIPTION-NAME
       (DYNAMIC-SLOT-VALUE (%DESCRIPTION.DYNAMIC-SLOTS SELF)
        SYM-GENERATE-LOGIC-COMPLEMENT-DESCRIPTION NULL)))
     NIL))
   (CL:T
    (LIST* SYM-GENERATE-LOGIC-KAPPA
     (GENERATE-VARIABLES (%DESCRIPTION.IO-VARIABLES SELF) TRUE)
     (CONS (GENERATE-PROPOSITION (%DESCRIPTION.PROPOSITION SELF)) NIL)))))

;;; (DEFUN (GENERATE-ARGUMENTS CONS) ...)

(CL:DEFUN GENERATE-ARGUMENTS (ARGUMENTS)
  (CL:LET* ((RESULT NIL))
   (CL:LET*
    ((ARG NULL) (VECTOR-000 ARGUMENTS) (INDEX-000 0)
     (LENGTH-000 (LENGTH VECTOR-000)) (COLLECT-000 NULL))
    (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
    (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
     (CL:PROGN
      (CL:SETQ ARG
       (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-000))
        INDEX-000))
      (CL:SETQ INDEX-000 (CL:1+ INDEX-000)))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN (CL:SETQ COLLECT-000 (CONS (GENERATE-TERM ARG) NIL))
       (CL:IF (CL:EQ RESULT NIL) (CL:SETQ RESULT COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST RESULT COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000) (CONS (GENERATE-TERM ARG) NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
   RESULT))

;;; (DEFUN (GENERATE-OPERATOR SYMBOL) ...)

(CL:DEFUN GENERATE-OPERATOR (SELF)
  (CL:LET* ((OPERATOR (%PROPOSITION.OPERATOR SELF)))
   (CL:WHEN (CL:EQ OPERATOR NULL)
    (CL:RETURN-FROM GENERATE-OPERATOR SYM-GENERATE-STELLA-NULL))
   (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE OPERATOR)))
    (CL:COND
     ((SUBTYPE-OF-SURROGATE? TEST-VALUE-000)
      (CL:PROGN
       (CL:LET*
        ((DESCRIPTION (GET-DESCRIPTION OPERATOR))
         (SYMBOL (SURROGATE-TO-SYMBOL OPERATOR)))
        (CL:IF (CL:NOT (CL:EQ DESCRIPTION NULL))
         (INTERNAL-STELLA-OPERATOR-TO-KIF SYMBOL) SYMBOL))))
     ((SUBTYPE-OF-SYMBOL? TEST-VALUE-000) (CL:PROGN OPERATOR))
     (CL:T
      (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
        "`" TEST-VALUE-000 "' is not a valid case option")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))))

;;; (DEFUN (GENERATE-PROPOSITION OBJECT) ...)

(CL:DEFUN GENERATE-PROPOSITION (SELF)
  (CL:LET* ((TEST-VALUE-000 (%PROPOSITION.KIND SELF)))
   (CL:COND
    ((CL:OR (CL:EQ TEST-VALUE-000 KWD-GENERATE-PREDICATE)
      (CL:EQ TEST-VALUE-000 KWD-GENERATE-FUNCTION)
      (CL:EQ TEST-VALUE-000 KWD-GENERATE-ISA)
      (CL:EQ TEST-VALUE-000 KWD-GENERATE-AND)
      (CL:EQ TEST-VALUE-000 KWD-GENERATE-OR)
      (CL:EQ TEST-VALUE-000 KWD-GENERATE-NOT)
      (CL:EQ TEST-VALUE-000 KWD-GENERATE-EQUIVALENT))
     (CL:LET* ((OPERATOR (GENERATE-OPERATOR SELF)))
      (CONS OPERATOR
       (CONCATENATE (GENERATE-ARGUMENTS (%PROPOSITION.ARGUMENTS SELF))
        NIL))))
    ((CL:EQ TEST-VALUE-000 KWD-GENERATE-EXISTS)
     (LIST* SYM-GENERATE-STELLA-EXISTS
      (GENERATE-VARIABLES
       (DYNAMIC-SLOT-VALUE (%PROPOSITION.DYNAMIC-SLOTS SELF)
        SYM-GENERATE-LOGIC-IO-VARIABLES NULL)
       FALSE)
      (CONS
       (GENERATE-PROPOSITION
        (CL:AREF
         (CL:THE CL:SIMPLE-VECTOR
          (%VECTOR.THE-ARRAY (%PROPOSITION.ARGUMENTS SELF)))
         0))
       NIL)))
    ((CL:EQ TEST-VALUE-000 KWD-GENERATE-FORALL)
     (LIST* SYM-GENERATE-STELLA-FORALL
      (GENERATE-VARIABLES
       (DYNAMIC-SLOT-VALUE (%PROPOSITION.DYNAMIC-SLOTS SELF)
        SYM-GENERATE-LOGIC-IO-VARIABLES NULL)
       FALSE)
      (CONS
       (LIST* SYM-GENERATE-STELLA-=>
        (GENERATE-PROPOSITION
         (CL:AREF
          (CL:THE CL:SIMPLE-VECTOR
           (%VECTOR.THE-ARRAY (%PROPOSITION.ARGUMENTS SELF)))
          0))
        (CONS
         (GENERATE-PROPOSITION
          (CL:AREF
           (CL:THE CL:SIMPLE-VECTOR
            (%VECTOR.THE-ARRAY (%PROPOSITION.ARGUMENTS SELF)))
           1))
         NIL))
       NIL)))
    ((CL:EQ TEST-VALUE-000 KWD-GENERATE-IMPLIES)
     (GENERATE-IMPLIES-PROPOSITION SELF))
    ((CL:EQ TEST-VALUE-000 KWD-GENERATE-FAIL)
     (CONS SYM-GENERATE-LOGIC-FAIL
      (CONCATENATE (GENERATE-ARGUMENTS (%PROPOSITION.ARGUMENTS SELF))
       NIL)))
    ((CL:EQ TEST-VALUE-000 KWD-GENERATE-CONSTANT)
     (GENERATE-OPERATOR SELF))
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
       TEST-VALUE-000 "' is not a valid case option")
      (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))

;;; (DEFUN (GENERATE-FUNCTION-AS-TERM CONS) ...)

(CL:DEFUN GENERATE-FUNCTION-AS-TERM (SELF)
  (CL:LET* ((ARGUMENTS NIL))
   (CL:LET*
    ((ARG NULL) (ITER-000 (BUT-LAST (%PROPOSITION.ARGUMENTS SELF)))
     (COLLECT-000 NULL))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ ARG (%ITERATOR.VALUE ITER-000))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN (CL:SETQ COLLECT-000 (CONS (GENERATE-TERM ARG) NIL))
       (CL:IF (CL:EQ ARGUMENTS NIL) (CL:SETQ ARGUMENTS COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST ARGUMENTS COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000) (CONS (GENERATE-TERM ARG) NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
   (CONS (GENERATE-OPERATOR SELF) (CONCATENATE ARGUMENTS NIL))))

;;; (DEFUN (GENERATE-SKOLEM OBJECT) ...)

(CL:DEFUN GENERATE-SKOLEM (SELF)
  (CL:COND
   ((CL:NOT (CL:EQ (NATIVE-VALUE-OF SELF) NULL))
    (GENERATE-TERM (NATIVE-VALUE-OF SELF)))
   ((CL:AND (CL:NOT (CL:EQ (%SKOLEM.DEFINING-PROPOSITION SELF) NULL))
     (CL:EQ
      (ACCESS-IN-CONTEXT (%SKOLEM.VARIABLE-VALUE SELF)
       (%SKOLEM.HOME-CONTEXT SELF) FALSE)
      NULL))
    (GENERATE-FUNCTION-AS-TERM (%SKOLEM.DEFINING-PROPOSITION SELF)))
   ((CL:NOT (CL:EQ (INNERMOST-OF SELF) NULL))
    (GENERATE-TERM (INNERMOST-OF SELF)))
   (CL:T (CL:WARN "Don't know how to generate skolem: `~A'~%" SELF)
    SYM-GENERATE-LOGIC-UNIDENTIFIED-SKOLEM)))

;;; (DEFUN (GENERATE-TERM OBJECT) ...)

(CL:DEFUN GENERATE-TERM (SELF)
  (CL:WHEN (CL:EQ SELF NULL) (CL:RETURN-FROM GENERATE-TERM NULL))
  (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE SELF)))
   (CL:COND
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-GENERATE-LOGIC-PROPOSITION)
     (CL:PROGN (GENERATE-PROPOSITION SELF)))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-GENERATE-STELLA-LITERAL-WRAPPER)
     (CL:PROGN SELF))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-GENERATE-LOGIC-DESCRIPTION)
     (CL:PROGN (GENERATE-DESCRIPTION SELF)))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-GENERATE-LOGIC-PATTERN-VARIABLE)
     (CL:PROGN (GENERATE-ONE-VARIABLE SELF FALSE)))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-GENERATE-LOGIC-SKOLEM)
     (CL:PROGN (GENERATE-SKOLEM SELF)))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-GENERATE-LOGIC-LOGIC-OBJECT)
     (CL:PROGN
      (CL:IF
       (CL:NOT (CL:EQ (%LOGIC-OBJECT.SURROGATE-VALUE-INVERSE SELF) NULL))
       (SURROGATE-TO-SYMBOL (%LOGIC-OBJECT.SURROGATE-VALUE-INVERSE SELF))
       SYM-GENERATE-LOGIC-UNNAMED_OBJECT)))
    ((SUBTYPE-OF-SURROGATE? TEST-VALUE-000)
     (CL:PROGN (SURROGATE-TO-SYMBOL SELF)))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-GENERATE-STELLA-COLLECTION)
     (CL:PROGN (GENERATE-STELLA-COLLECTION SELF)))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-GENERATE-STELLA-THING)
     (CL:PROGN
      (CL:IF (CL:NOT (CL:EQ (%THING.SURROGATE-VALUE-INVERSE SELF) NULL))
       (%THING.SURROGATE-VALUE-INVERSE SELF)
       (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
        (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
         "DON'T KNOW HOW TO GENERATE EXPRESSION FOR THE THING: `" SELF
         "'")
        (CL:ERROR
         (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
    (CL:T (CL:WARN "Illegal logical form: `~A'~%" SELF)
     SYM-GENERATE-LOGIC-ILLEGAL-TERM))))

;;; (DEFUN (GENERATE-IMPLIES-PROPOSITION CONS) ...)

(CL:DEFUN GENERATE-IMPLIES-PROPOSITION (SELF)
  (CL:LET*
   ((TAILARG
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR
       (%VECTOR.THE-ARRAY (%PROPOSITION.ARGUMENTS SELF)))
      0))
    (HEADARG
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR
       (%VECTOR.THE-ARRAY (%PROPOSITION.ARGUMENTS SELF)))
      1)))
   (CL:IF
    (CL:AND (ISA? HEADARG SGT-GENERATE-LOGIC-DESCRIPTION)
     (ISA? TAILARG SGT-GENERATE-LOGIC-DESCRIPTION))
    (GENERATE-DESCRIPTIONS-AS-RULE HEADARG TAILARG
     (%BOOLEAN-WRAPPER.WRAPPER-VALUE
      (DYNAMIC-SLOT-VALUE (%PROPOSITION.DYNAMIC-SLOTS SELF)
       SYM-GENERATE-LOGIC-FORWARD-ONLY? FALSE-WRAPPER)))
    (CONS SYM-GENERATE-PL-KERNEL-KB-SUBSET-OF
     (CONCATENATE (GENERATE-ARGUMENTS (%PROPOSITION.ARGUMENTS SELF))
      NIL)))))

;;; (DEFUN (GENERATE-DESCRIPTION-PROPOSITION CONS) ...)

(CL:DEFUN GENERATE-DESCRIPTION-PROPOSITION (SELF)
  (CL:LET*
   ((PROP (GENERATE-PROPOSITION (%DESCRIPTION.PROPOSITION SELF)))
    (EXISTENTALS NIL))
   (CL:LET*
    ((VAR NULL) (ITER-000 (TOP-LEVEL-EXISTENTIAL-VARIABLES SELF))
     (COLLECT-000 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:PROGN (CL:SETQ VAR (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-000 (CONS (GENERATE-ONE-VARIABLE VAR TRUE) NIL))
       (CL:IF (CL:EQ EXISTENTALS NIL) (CL:SETQ EXISTENTALS COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST EXISTENTALS COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000)
        (CONS (GENERATE-ONE-VARIABLE VAR TRUE) NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
   (CL:WHEN (CL:NOT (CL:EQ EXISTENTALS NIL))
    (CL:SETQ PROP
     (LIST* SYM-GENERATE-STELLA-EXISTS EXISTENTALS (CONS PROP NIL))))
   PROP))

;;; (DEFUN (GENERATE-DESCRIPTIONS-AS-RULE CONS) ...)

(CL:DEFUN GENERATE-DESCRIPTIONS-AS-RULE (HEAD TAIL FORWARDRULE?)
  (CL:LET*
   ((ARROW SYM-GENERATE-STELLA-<=)
    (HEADPROP (GENERATE-DESCRIPTION-PROPOSITION HEAD))
    (TAILPROP (GENERATE-DESCRIPTION-PROPOSITION TAIL)) (TEMP HEADPROP)
    (UNIVERSALS NIL))
   (CL:WHEN FORWARDRULE? (CL:SETQ HEADPROP TAILPROP)
    (CL:SETQ TAILPROP TEMP) (CL:SETQ ARROW SYM-GENERATE-STELLA-=>))
   (CL:LET*
    ((VAR NULL) (VECTOR-000 (%DESCRIPTION.IO-VARIABLES HEAD))
     (INDEX-000 0) (LENGTH-000 (LENGTH VECTOR-000)) (COLLECT-000 NULL))
    (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
    (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
     (CL:PROGN
      (CL:SETQ VAR
       (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-000))
        INDEX-000))
      (CL:SETQ INDEX-000 (CL:1+ INDEX-000)))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-000 (CONS (GENERATE-ONE-VARIABLE VAR TRUE) NIL))
       (CL:IF (CL:EQ UNIVERSALS NIL) (CL:SETQ UNIVERSALS COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST UNIVERSALS COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000)
        (CONS (GENERATE-ONE-VARIABLE VAR TRUE) NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
   (CL:WHEN *REVERSEPOLARITY?*
    (CL:SETQ TEMP (LIST* SYM-GENERATE-STELLA-NOT HEADPROP NIL))
    (CL:SETQ HEADPROP (LIST* SYM-GENERATE-STELLA-NOT TAILPROP NIL))
    (CL:SETQ TAILPROP TEMP))
   (LIST* SYM-GENERATE-STELLA-FORALL UNIVERSALS
    (CONS (CONS ARROW (CONS HEADPROP (CONS TAILPROP NIL))) NIL))))

(CL:DEFUN STARTUP-GENERATE ()
  (CL:LET*
   ((*MODULE* (GET-STELLA-MODULE "/LOGIC" (> *STARTUP-TIME-PHASE* 1)))
    (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2)
    (CL:SETQ SGT-GENERATE-STELLA-THING
     (INTERN-RIGID-SYMBOL-WRT-MODULE "THING"
      (GET-STELLA-MODULE "/STELLA" TRUE) 1))
    (CL:SETQ SYM-GENERATE-STELLA-SETOF
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SETOF"
      (GET-STELLA-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ SYM-GENERATE-LOGIC-LISTOF
     (INTERN-RIGID-SYMBOL-WRT-MODULE "LISTOF" NULL 0))
    (CL:SETQ SYM-GENERATE-LOGIC-COMPLEMENT-DESCRIPTION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "COMPLEMENT-DESCRIPTION" NULL 0))
    (CL:SETQ SYM-GENERATE-STELLA-NOT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NOT"
      (GET-STELLA-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ SYM-GENERATE-LOGIC-KAPPA
     (INTERN-RIGID-SYMBOL-WRT-MODULE "KAPPA" NULL 0))
    (CL:SETQ SYM-GENERATE-STELLA-NULL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL"
      (GET-STELLA-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ KWD-GENERATE-PREDICATE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PREDICATE" NULL 2))
    (CL:SETQ KWD-GENERATE-FUNCTION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FUNCTION" NULL 2))
    (CL:SETQ KWD-GENERATE-ISA
     (INTERN-RIGID-SYMBOL-WRT-MODULE "ISA" NULL 2))
    (CL:SETQ KWD-GENERATE-AND
     (INTERN-RIGID-SYMBOL-WRT-MODULE "AND" NULL 2))
    (CL:SETQ KWD-GENERATE-OR (INTERN-RIGID-SYMBOL-WRT-MODULE "OR" NULL 2))
    (CL:SETQ KWD-GENERATE-NOT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NOT" NULL 2))
    (CL:SETQ KWD-GENERATE-EQUIVALENT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "EQUIVALENT" NULL 2))
    (CL:SETQ KWD-GENERATE-EXISTS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "EXISTS" NULL 2))
    (CL:SETQ SYM-GENERATE-STELLA-EXISTS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "EXISTS"
      (GET-STELLA-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ SYM-GENERATE-LOGIC-IO-VARIABLES
     (INTERN-RIGID-SYMBOL-WRT-MODULE "IO-VARIABLES" NULL 0))
    (CL:SETQ KWD-GENERATE-FORALL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FORALL" NULL 2))
    (CL:SETQ SYM-GENERATE-STELLA-FORALL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FORALL"
      (GET-STELLA-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ SYM-GENERATE-STELLA-=>
     (INTERN-RIGID-SYMBOL-WRT-MODULE "=>"
      (GET-STELLA-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ KWD-GENERATE-IMPLIES
     (INTERN-RIGID-SYMBOL-WRT-MODULE "IMPLIES" NULL 2))
    (CL:SETQ KWD-GENERATE-FAIL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FAIL" NULL 2))
    (CL:SETQ SYM-GENERATE-LOGIC-FAIL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FAIL" NULL 0))
    (CL:SETQ KWD-GENERATE-CONSTANT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CONSTANT" NULL 2))
    (CL:SETQ SYM-GENERATE-LOGIC-UNIDENTIFIED-SKOLEM
     (INTERN-RIGID-SYMBOL-WRT-MODULE "UNIDENTIFIED-SKOLEM" NULL 0))
    (CL:SETQ SYM-GENERATE-LOGIC-UNNAMED_OBJECT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "UNNAMED_OBJECT" NULL 0))
    (CL:SETQ SGT-GENERATE-LOGIC-PROPOSITION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PROPOSITION" NULL 1))
    (CL:SETQ SGT-GENERATE-STELLA-LITERAL-WRAPPER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "LITERAL-WRAPPER"
      (GET-STELLA-MODULE "/STELLA" TRUE) 1))
    (CL:SETQ SGT-GENERATE-LOGIC-DESCRIPTION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DESCRIPTION" NULL 1))
    (CL:SETQ SGT-GENERATE-LOGIC-PATTERN-VARIABLE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PATTERN-VARIABLE" NULL 1))
    (CL:SETQ SGT-GENERATE-LOGIC-SKOLEM
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SKOLEM" NULL 1))
    (CL:SETQ SGT-GENERATE-LOGIC-LOGIC-OBJECT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "LOGIC-OBJECT" NULL 1))
    (CL:SETQ SGT-GENERATE-STELLA-COLLECTION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "COLLECTION"
      (GET-STELLA-MODULE "/STELLA" TRUE) 1))
    (CL:SETQ SYM-GENERATE-LOGIC-ILLEGAL-TERM
     (INTERN-RIGID-SYMBOL-WRT-MODULE "ILLEGAL-TERM" NULL 0))
    (CL:SETQ SYM-GENERATE-LOGIC-FORWARD-ONLY?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FORWARD-ONLY?" NULL 0))
    (CL:SETQ SYM-GENERATE-PL-KERNEL-KB-SUBSET-OF
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SUBSET-OF"
      (GET-STELLA-MODULE "/PL-KERNEL-KB" TRUE) 0))
    (CL:SETQ SYM-GENERATE-STELLA-<=
     (INTERN-RIGID-SYMBOL-WRT-MODULE "<="
      (GET-STELLA-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ SYM-GENERATE-LOGIC-STARTUP-GENERATE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-GENERATE" NULL 0))
    (CL:SETQ SYM-GENERATE-STELLA-METHOD-STARTUP-CLASSNAME
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME"
      (GET-STELLA-MODULE "/STELLA" TRUE) 0)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (DEFINE-FUNCTION-OBJECT "GENERATE-EXPRESSION"
     "(DEFUN (GENERATE-EXPRESSION OBJECT) ((SELF LOGIC-OBJECT) (CANONICALIZEVARIABLENAMES? BOOLEAN)) :PUBLIC? TRUE :DOCUMENTATION \"Return an s-expression representing the source expression for 'self'.\")"
     (CL:FUNCTION GENERATE-EXPRESSION) NULL)
    (DEFINE-FUNCTION-OBJECT "GENERATE-NAME-OF-VARIABLE"
     "(DEFUN (GENERATE-NAME-OF-VARIABLE SYMBOL) ((SELF PATTERN-VARIABLE)))"
     (CL:FUNCTION GENERATE-NAME-OF-VARIABLE) NULL)
    (DEFINE-FUNCTION-OBJECT "GENERATE-ONE-VARIABLE"
     "(DEFUN (GENERATE-ONE-VARIABLE OBJECT) ((SELF PATTERN-VARIABLE) (TYPED? BOOLEAN)))"
     (CL:FUNCTION GENERATE-ONE-VARIABLE) NULL)
    (DEFINE-FUNCTION-OBJECT "GENERATE-VARIABLES"
     "(DEFUN (GENERATE-VARIABLES CONS) ((VECTOR VECTOR) (TYPED? BOOLEAN)))"
     (CL:FUNCTION GENERATE-VARIABLES) NULL)
    (DEFINE-FUNCTION-OBJECT "GENERATE-STELLA-COLLECTION"
     "(DEFUN (GENERATE-STELLA-COLLECTION CONS) ((SELF COLLECTION)))"
     (CL:FUNCTION GENERATE-STELLA-COLLECTION) NULL)
    (DEFINE-FUNCTION-OBJECT "GENERATE-DESCRIPTION"
     "(DEFUN (GENERATE-DESCRIPTION OBJECT) ((SELF DESCRIPTION)))"
     (CL:FUNCTION GENERATE-DESCRIPTION) NULL)
    (DEFINE-FUNCTION-OBJECT "GENERATE-ARGUMENTS"
     "(DEFUN (GENERATE-ARGUMENTS CONS) ((ARGUMENTS VECTOR)))"
     (CL:FUNCTION GENERATE-ARGUMENTS) NULL)
    (DEFINE-FUNCTION-OBJECT "GENERATE-OPERATOR"
     "(DEFUN (GENERATE-OPERATOR SYMBOL) ((SELF PROPOSITION)))"
     (CL:FUNCTION GENERATE-OPERATOR) NULL)
    (DEFINE-FUNCTION-OBJECT "GENERATE-PROPOSITION"
     "(DEFUN (GENERATE-PROPOSITION OBJECT) ((SELF PROPOSITION)))"
     (CL:FUNCTION GENERATE-PROPOSITION) NULL)
    (DEFINE-FUNCTION-OBJECT "GENERATE-FUNCTION-AS-TERM"
     "(DEFUN (GENERATE-FUNCTION-AS-TERM CONS) ((SELF PROPOSITION)))"
     (CL:FUNCTION GENERATE-FUNCTION-AS-TERM) NULL)
    (DEFINE-FUNCTION-OBJECT "GENERATE-SKOLEM"
     "(DEFUN (GENERATE-SKOLEM OBJECT) ((SELF SKOLEM)))"
     (CL:FUNCTION GENERATE-SKOLEM) NULL)
    (DEFINE-FUNCTION-OBJECT "GENERATE-TERM"
     "(DEFUN (GENERATE-TERM OBJECT) ((SELF OBJECT)))"
     (CL:FUNCTION GENERATE-TERM) NULL)
    (DEFINE-FUNCTION-OBJECT "GENERATE-IMPLIES-PROPOSITION"
     "(DEFUN (GENERATE-IMPLIES-PROPOSITION CONS) ((SELF PROPOSITION)))"
     (CL:FUNCTION GENERATE-IMPLIES-PROPOSITION) NULL)
    (DEFINE-FUNCTION-OBJECT "GENERATE-DESCRIPTION-PROPOSITION"
     "(DEFUN (GENERATE-DESCRIPTION-PROPOSITION CONS) ((SELF DESCRIPTION)))"
     (CL:FUNCTION GENERATE-DESCRIPTION-PROPOSITION) NULL)
    (DEFINE-FUNCTION-OBJECT "GENERATE-DESCRIPTIONS-AS-RULE"
     "(DEFUN (GENERATE-DESCRIPTIONS-AS-RULE CONS) ((HEAD DESCRIPTION) (TAIL DESCRIPTION) (FORWARDRULE? BOOLEAN)))"
     (CL:FUNCTION GENERATE-DESCRIPTIONS-AS-RULE) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-GENERATE"
     "(DEFUN STARTUP-GENERATE () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-GENERATE) NULL)
    (CL:LET*
     ((FUNCTION (LOOKUP-FUNCTION SYM-GENERATE-LOGIC-STARTUP-GENERATE)))
     (SET-DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
      SYM-GENERATE-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "Startup-Generate") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *CANONICALVARIABLENAMEMAPPING* KEY-VALUE-LIST NULL :DOCUMENTATION \"Maps variables to symbols in SYSTEM-DEFINED-ARGUMENT-NAMES.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *CANONICALVARIABLECOUNTER* INTEGER NULL :DOCUMENTATION \"Number of the last canonically-mapped variable.\")"))))
