;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; unit-support.lisp

#|
 +---------------------------- BEGIN LICENSE BLOCK ---------------------------+
 |                                                                            |
 | Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
 |                                                                            |
 | The contents of this file are subject to the Mozilla Public License        |
 | Version 1.1 (the "License"); you may not use this file except in           |
 | compliance with the License. You may obtain a copy of the License at       |
 | http://www.mozilla.org/MPL/                                                |
 |                                                                            |
 | Software distributed under the License is distributed on an "AS IS" basis, |
 | WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
 | for the specific language governing rights and limitations under the       |
 | License.                                                                   |
 |                                                                            |
 | The Original Code is the PowerLoom KR&R System.                            |
 |                                                                            |
 | The Initial Developer of the Original Code is                              |
 | UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
 | 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
 |                                                                            |
 | Portions created by the Initial Developer are Copyright (C) 1997-2006      |
 | the Initial Developer. All Rights Reserved.                                |
 |                                                                            |
 | Contributor(s):                                                            |
 |                                                                            |
 | Alternatively, the contents of this file may be used under the terms of    |
 | either the GNU General Public License Version 2 or later (the "GPL"), or   |
 | the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
 | in which case the provisions of the GPL or the LGPL are applicable instead |
 | of those above. If you wish to allow use of your version of this file only |
 | under the terms of either the GPL or the LGPL, and not to allow others to  |
 | use your version of this file under the terms of the MPL, indicate your    |
 | decision by deleting the provisions above and replace them with the notice |
 | and other provisions required by the GPL or the LGPL. If you do not delete |
 | the provisions above, a recipient may use your version of this file under  |
 | the terms of any one of the MPL, the GPL or the LGPL.                      |
 |                                                                            |
 +----------------------------- END LICENSE BLOCK ----------------------------+
|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SGT-UNIT-SUPPORT-UNIT-SUPPORT-DIM-NUMBER-LOGIC-WRAPPER NULL)
(CL:DEFVAR SYM-UNIT-SUPPORT-STELLA-WRAPPER-VALUE NULL)
(CL:DEFVAR SGT-UNIT-SUPPORT-UNIT-KB-UNITS NULL)
(CL:DEFVAR SGT-UNIT-SUPPORT-STELLA-CALENDAR-DATE NULL)
(CL:DEFVAR SGT-UNIT-SUPPORT-STELLA-TIME-DURATION NULL)
(CL:DEFVAR SGT-UNIT-SUPPORT-LOGIC-SKOLEM NULL)
(CL:DEFVAR SGT-UNIT-SUPPORT-TIMEPOINT-SUPPORT-DATE-TIME-LOGIC-WRAPPER NULL)
(CL:DEFVAR SGT-UNIT-SUPPORT-LOGIC-PATTERN-VARIABLE NULL)
(CL:DEFVAR SGT-UNIT-SUPPORT-STELLA-CS-VALUE NULL)
(CL:DEFVAR KWD-UNIT-SUPPORT-FINAL-SUCCESS NULL)
(CL:DEFVAR KWD-UNIT-SUPPORT-TERMINAL-FAILURE NULL)
(CL:DEFVAR KWD-UNIT-SUPPORT-FAILURE NULL)
(CL:DEFVAR SYM-UNIT-SUPPORT-STELLA-ITERATOR NULL)
(CL:DEFVAR KWD-UNIT-SUPPORT-CONTINUING-SUCCESS NULL)
(CL:DEFVAR SGT-UNIT-SUPPORT-STELLA-INTEGER-WRAPPER NULL)
(CL:DEFVAR SGT-UNIT-SUPPORT-UNIT-KB-NUMERATOR-MEASURES NULL)
(CL:DEFVAR SGT-UNIT-SUPPORT-UNIT-KB-DENOMINATOR-MEASURES NULL)
(CL:DEFVAR SGT-UNIT-SUPPORT-LOGIC-LOGIC-OBJECT NULL)
(CL:DEFVAR SGT-UNIT-SUPPORT-STELLA-NUMBER-WRAPPER NULL)
(CL:DEFVAR SYM-UNIT-SUPPORT-UNIT-SUPPORT-STARTUP-UNIT-SUPPORT NULL)
(CL:DEFVAR SYM-UNIT-SUPPORT-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STARTUP-TIME-PHASE* *MODULE* *CONTEXT* *ALL-MEASURES*
  *BASE-MEASURES* *RATIO-ONE* *INSTANCE-MEASURE-TABLE* *QUERYITERATOR*
  NULL-INTEGER *MEASURE-INSTANCE-TABLE* STANDARD-OUTPUT EOL
  UNKNOWN-TRUTH-VALUE TRUE-TRUTH-VALUE FALSE-TRUTH-VALUE TRUE-WRAPPER
  FALSE-WRAPPER NULL-FLOAT NIL *PRINTREADABLY?*))

;;; (DEFGLOBAL *DIM-NUMBER-HASH-TABLE* ...)

(CL:DEFVAR *DIM-NUMBER-HASH-TABLE* NULL
  "Table for interning dim number logic wrappers")

;;; (DEFCLASS DIM-NUMBER-LOGIC-WRAPPER ...)

(CL:DEFCLASS DIM-NUMBER-LOGIC-WRAPPER (QUANTITY-LOGIC-WRAPPER)
  ())

(CL:DEFUN NEW-DIM-NUMBER-LOGIC-WRAPPER (WRAPPER-VALUE)
  (CL:LET* ((SELF NULL))
   (CL:SETQ SELF
    (CL:MAKE-INSTANCE (CL:QUOTE DIM-NUMBER-LOGIC-WRAPPER)))
   (CL:SETF (%WRAPPER-VALUE SELF) WRAPPER-VALUE)
   (CL:SETF (%DYNAMIC-SLOTS SELF) (NEW-KEY-VALUE-LIST))
   (CL:SETF (%SURROGATE-VALUE-INVERSE SELF) NULL)
   (CL:SETF (%FUNCTION-TERM SELF) NULL) SELF))

(CL:DEFMETHOD PRIMARY-TYPE ((SELF DIM-NUMBER-LOGIC-WRAPPER))
  SGT-UNIT-SUPPORT-UNIT-SUPPORT-DIM-NUMBER-LOGIC-WRAPPER)

(CL:DEFUN ACCESS-DIM-NUMBER-LOGIC-WRAPPER-SLOT-VALUE (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-UNIT-SUPPORT-STELLA-WRAPPER-VALUE)
    (CL:IF SETVALUE? (CL:SETF (%WRAPPER-VALUE SELF) VALUE)
     (CL:SETQ VALUE (%WRAPPER-VALUE SELF))))
   (CL:T
    (CL:IF SETVALUE?
     (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS SELF) SLOTNAME VALUE NULL)
     (CL:SETQ VALUE (LOOKUP (%DYNAMIC-SLOTS SELF) SLOTNAME)))))
  VALUE)

(CL:DEFMETHOD PRINT-OBJECT ((SELF DIM-NUMBER-LOGIC-WRAPPER) STREAM)
  (CL:IF *PRINTREADABLY?* (%%PRINT-STREAM STREAM (%WRAPPER-VALUE SELF))
   (%%PRINT-STREAM STREAM "|uw|" (%WRAPPER-VALUE SELF))))

;;; (DEFMETHOD (GENERATE-SPECIALIZED-TERM OBJECT) ...)

(CL:DEFMETHOD GENERATE-SPECIALIZED-TERM ((SELF DIM-NUMBER-LOGIC-WRAPPER))
  (CL:LET* ((TERM (%FUNCTION-TERM SELF)) (DIM (%WRAPPER-VALUE SELF)))
   (CL:COND ((CL:NOT (CL:EQ TERM NULL)) TERM)
    ((CL:NOT (CL:EQ DIM NULL))
     (CL:SETQ TERM
      (CONS (GENERATE-TERM SGT-UNIT-SUPPORT-UNIT-KB-UNITS)
       (CONS (WRAP-FLOAT (GET-MAGNITUDE DIM (GET-UNIT DIM)))
        (CONS (WRAP-STRING (GET-UNIT DIM)) NIL))))
     (CL:SETF (%FUNCTION-TERM SELF) TERM) TERM)
    (CL:T
     (CL:ERROR
      (NEW-TERM-GENERATION-EXCEPTION SELF
       "Dim Number Wrapper doesn't have a value."))))))

;;; (DEFMETHOD (HASH-CODE INTEGER) ...)

(CL:DEFMETHOD HASH-CODE ((SELF DIM-NUMBER-LOGIC-WRAPPER))
  (CL:IF (CL:NOT (CL:EQ (%WRAPPER-VALUE SELF) NULL))
   (HASH-CODE (%WRAPPER-VALUE SELF)) 0))

;;; (DEFMETHOD (OBJECT-EQL? BOOLEAN) ...)

(CL:DEFMETHOD OBJECT-EQL? ((SELF DIM-NUMBER-LOGIC-WRAPPER) X)
  (CL:AND (CL:NOT (CL:EQ X NULL))
   (ISA? X SGT-UNIT-SUPPORT-UNIT-SUPPORT-DIM-NUMBER-LOGIC-WRAPPER)
   (EQL? (%WRAPPER-VALUE SELF) (%WRAPPER-VALUE X))))

;;; (DEFUN (WRAP-DIM-NUMBER DIM-NUMBER-LOGIC-WRAPPER) ...)

(CL:DEFUN WRAP-DIM-NUMBER (VALUE)
  "Return an interned LOGIC-WRAPPER for `value'.  This assures us
that all logic-wrapped DIM-NUMBERs are the same object."
  (CL:LET* ((WRAPPER (LOOKUP *DIM-NUMBER-HASH-TABLE* VALUE)))
   (CL:WHEN (CL:EQ WRAPPER NULL)
    (CL:SETF (%PREFERRED-UNITS VALUE) STELLA::NULL-STRING)
    (CL:SETQ WRAPPER (NEW-DIM-NUMBER-LOGIC-WRAPPER VALUE))
    (INSERT-AT *DIM-NUMBER-HASH-TABLE* VALUE WRAPPER))
   WRAPPER))

;;; (DEFMETHOD (GET-UNIT STRING) ...)

(CL:DEFMETHOD GET-UNIT ((SELF DIM-NUMBER-LOGIC-WRAPPER))
  (GET-UNIT (%WRAPPER-VALUE SELF)))

;;; (DEFMETHOD (GET-BASE-UNIT STRING) ...)

(CL:DEFMETHOD GET-BASE-UNIT ((SELF DIM-NUMBER-LOGIC-WRAPPER))
  (GET-BASE-UNIT (%WRAPPER-VALUE SELF)))

;;; (DEFMETHOD (GET-MAGNITUDE FLOAT) ...)

(CL:DEFMETHOD GET-MAGNITUDE ((SELF DIM-NUMBER-LOGIC-WRAPPER) UNITS)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING UNITS))
  #+MCL
  (CL:CHECK-TYPE UNITS CL:SIMPLE-STRING)
  (GET-MAGNITUDE (%WRAPPER-VALUE SELF) UNITS))

;;; (DEFUN (HELP-GET-DIM-NUMBER DIM-NUMBER-LOGIC-WRAPPER) ...)

(CL:DEFUN HELP-GET-DIM-NUMBER (ITEM)
  (CL:LET* ((TEST-VALUE-002 (SAFE-PRIMARY-TYPE ITEM)))
   (CL:COND
    ((SUBTYPE-OF? TEST-VALUE-002
      SGT-UNIT-SUPPORT-UNIT-SUPPORT-DIM-NUMBER-LOGIC-WRAPPER)
     (CL:PROGN ITEM))
    ((SUBTYPE-OF? TEST-VALUE-002
      SGT-UNIT-SUPPORT-TIMEPOINT-SUPPORT-DATE-TIME-LOGIC-WRAPPER)
     (CL:PROGN
      (CL:LET* ((VALUE (%WRAPPER-VALUE ITEM)))
       (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE VALUE)))
        (CL:COND
         ((SUBTYPE-OF? TEST-VALUE-000
           SGT-UNIT-SUPPORT-STELLA-CALENDAR-DATE)
          (CL:PROGN NULL))
         ((SUBTYPE-OF? TEST-VALUE-000
           SGT-UNIT-SUPPORT-STELLA-TIME-DURATION)
          (CL:PROGN
           (NEW-DIM-NUMBER-LOGIC-WRAPPER
            (TIME-DURATION-TO-DIM VALUE))))
         (CL:T
          (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
           (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`"
            TEST-VALUE-000 "' is not a valid case option")
           (CL:ERROR
            (NEW-STELLA-EXCEPTION
             (THE-STRING-READER STREAM-000))))))))))
    ((SUBTYPE-OF? TEST-VALUE-002
      SGT-UNIT-SUPPORT-LOGIC-PATTERN-VARIABLE)
     (CL:PROGN
      (CL:LET* ((VALUE (SAFE-BOUND-TO ITEM)))
       (CL:IF (CL:NOT (CL:EQ VALUE NULL)) (HELP-GET-DIM-NUMBER VALUE)
        NULL))))
    ((SUBTYPE-OF? TEST-VALUE-002 SGT-UNIT-SUPPORT-LOGIC-SKOLEM)
     (CL:PROGN
      (CL:LET*
       ((VALUE
         (ACCESS-IN-CONTEXT (%VARIABLE-VALUE ITEM) (%HOME-CONTEXT ITEM)
          CL:NIL)))
       (CL:WHEN (CL:EQ VALUE NULL)
        (CL:RETURN-FROM HELP-GET-DIM-NUMBER NULL))
       (CL:LET* ((TEST-VALUE-001 (SAFE-PRIMARY-TYPE VALUE)))
        (CL:COND
         ((SUBTYPE-OF? TEST-VALUE-001
           SGT-UNIT-SUPPORT-UNIT-SUPPORT-DIM-NUMBER-LOGIC-WRAPPER)
          (CL:PROGN VALUE))
         ((SUBTYPE-OF? TEST-VALUE-001 SGT-UNIT-SUPPORT-LOGIC-SKOLEM)
          (CL:PROGN
           (CL:WHEN
            (CL:EQ
             (ACCESS-IN-CONTEXT (%VARIABLE-VALUE VALUE)
              (%HOME-CONTEXT VALUE) CL:NIL)
             NULL)
            (CL:RETURN-FROM HELP-GET-DIM-NUMBER NULL))
           (CL:IF
            (ISA?
             (ACCESS-IN-CONTEXT (%VARIABLE-VALUE VALUE)
              (%HOME-CONTEXT VALUE) CL:NIL)
             SGT-UNIT-SUPPORT-LOGIC-SKOLEM)
            NULL
            (HELP-GET-DIM-NUMBER
             (ACCESS-IN-CONTEXT (%VARIABLE-VALUE VALUE)
              (%HOME-CONTEXT VALUE) CL:NIL)))))
         (CL:T
          (CL:IF
           (ISA?
            (ACCESS-IN-CONTEXT (%VARIABLE-VALUE ITEM)
             (%HOME-CONTEXT ITEM) CL:NIL)
            SGT-UNIT-SUPPORT-LOGIC-SKOLEM)
           NULL
           (HELP-GET-DIM-NUMBER
            (ACCESS-IN-CONTEXT (%VARIABLE-VALUE ITEM)
             (%HOME-CONTEXT ITEM) CL:NIL)))))))))
    (CL:T NULL))))

;;; (DEFUN (HELP-GET-UNIT-VALUE DIM-NUMBER-LOGIC-WRAPPER) ...)

(CL:DEFUN HELP-GET-UNIT-VALUE (MAGNITUDE UNITS)
  (CL:LET* ((TEST-VALUE-004 (SAFE-PRIMARY-TYPE MAGNITUDE)))
   (CL:COND
    ((SUBTYPE-OF-FLOAT? TEST-VALUE-004)
     (CL:PROGN
      (CL:LET* ((TEST-VALUE-001 (SAFE-PRIMARY-TYPE UNITS)))
       (CL:COND
        ((SUBTYPE-OF-STRING? TEST-VALUE-001)
         (CL:PROGN
          (CL:LET*
           ((VALUE (%WRAPPER-VALUE MAGNITUDE)) (RETURN-VALUE NULL))
           (CL:DECLARE (CL:TYPE CL:DOUBLE-FLOAT VALUE))
           (CL:HANDLER-CASE
            (CL:WHEN (CL:NOT (CL:= VALUE NULL-FLOAT))
             (CL:SETQ RETURN-VALUE
              (WRAP-DIM-NUMBER
               (MAKE-DIM-NUMBER VALUE (%WRAPPER-VALUE UNITS)))))
            (STELLA-EXCEPTION () NULL))
           RETURN-VALUE)))
        ((SUBTYPE-OF? TEST-VALUE-001
          SGT-UNIT-SUPPORT-LOGIC-PATTERN-VARIABLE)
         (CL:PROGN
          (CL:LET* ((UNIT-VALUE (SAFE-BOUND-TO UNITS)))
           (CL:IF (CL:NOT (CL:EQ UNIT-VALUE NULL))
            (HELP-GET-UNIT-VALUE MAGNITUDE UNIT-VALUE) NULL))))
        ((SUBTYPE-OF? TEST-VALUE-001 SGT-UNIT-SUPPORT-LOGIC-SKOLEM)
         (CL:PROGN
          (CL:LET*
           ((UNIT-VALUE
             (ACCESS-IN-CONTEXT (%VARIABLE-VALUE UNITS)
              (%HOME-CONTEXT UNITS) CL:NIL)))
           (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE UNIT-VALUE)))
            (CL:COND
             ((SUBTYPE-OF-STRING? TEST-VALUE-000)
              (CL:PROGN (HELP-GET-UNIT-VALUE MAGNITUDE UNIT-VALUE)))
             ((SUBTYPE-OF? TEST-VALUE-000
               SGT-UNIT-SUPPORT-LOGIC-SKOLEM)
              (CL:PROGN
               (CL:IF
                (ISA?
                 (ACCESS-IN-CONTEXT (%VARIABLE-VALUE UNIT-VALUE)
                  (%HOME-CONTEXT UNIT-VALUE) CL:NIL)
                 SGT-UNIT-SUPPORT-LOGIC-SKOLEM)
                NULL
                (HELP-GET-UNIT-VALUE MAGNITUDE
                 (ACCESS-IN-CONTEXT (%VARIABLE-VALUE UNIT-VALUE)
                  (%HOME-CONTEXT UNIT-VALUE) CL:NIL)))))
             (CL:T
              (CL:IF
               (ISA?
                (ACCESS-IN-CONTEXT (%VARIABLE-VALUE UNITS)
                 (%HOME-CONTEXT UNITS) CL:NIL)
                SGT-UNIT-SUPPORT-LOGIC-SKOLEM)
               NULL
               (HELP-GET-UNIT-VALUE MAGNITUDE
                (ACCESS-IN-CONTEXT (%VARIABLE-VALUE UNITS)
                 (%HOME-CONTEXT UNITS) CL:NIL)))))))))
        (CL:T NULL)))))
    ((SUBTYPE-OF-INTEGER? TEST-VALUE-004)
     (CL:PROGN
      (CL:LET* ((TEST-VALUE-003 (SAFE-PRIMARY-TYPE UNITS)))
       (CL:COND
        ((SUBTYPE-OF-STRING? TEST-VALUE-003)
         (CL:PROGN
          (CL:LET*
           ((VALUE (%WRAPPER-VALUE MAGNITUDE)) (RETURN-VALUE NULL))
           (CL:DECLARE (CL:TYPE CL:FIXNUM VALUE))
           (CL:HANDLER-CASE
            (CL:WHEN (DEFINED? VALUE)
             (CL:SETQ RETURN-VALUE
              (WRAP-DIM-NUMBER
               (MAKE-DIM-NUMBER (CL:FLOAT VALUE 0.0d0)
                (%WRAPPER-VALUE UNITS)))))
            (STELLA-EXCEPTION () NULL))
           RETURN-VALUE)))
        ((SUBTYPE-OF? TEST-VALUE-003
          SGT-UNIT-SUPPORT-LOGIC-PATTERN-VARIABLE)
         (CL:PROGN
          (CL:LET* ((UNIT-VALUE (SAFE-BOUND-TO UNITS)))
           (CL:IF (CL:NOT (CL:EQ UNIT-VALUE NULL))
            (HELP-GET-UNIT-VALUE MAGNITUDE UNIT-VALUE) NULL))))
        ((SUBTYPE-OF? TEST-VALUE-003 SGT-UNIT-SUPPORT-LOGIC-SKOLEM)
         (CL:PROGN
          (CL:LET*
           ((UNIT-VALUE
             (ACCESS-IN-CONTEXT (%VARIABLE-VALUE UNITS)
              (%HOME-CONTEXT UNITS) CL:NIL)))
           (CL:LET* ((TEST-VALUE-002 (SAFE-PRIMARY-TYPE UNIT-VALUE)))
            (CL:COND
             ((SUBTYPE-OF-STRING? TEST-VALUE-002)
              (CL:PROGN (HELP-GET-UNIT-VALUE MAGNITUDE UNIT-VALUE)))
             ((SUBTYPE-OF? TEST-VALUE-002
               SGT-UNIT-SUPPORT-LOGIC-SKOLEM)
              (CL:PROGN
               (CL:IF
                (ISA?
                 (ACCESS-IN-CONTEXT (%VARIABLE-VALUE UNIT-VALUE)
                  (%HOME-CONTEXT UNIT-VALUE) CL:NIL)
                 SGT-UNIT-SUPPORT-LOGIC-SKOLEM)
                NULL
                (HELP-GET-UNIT-VALUE MAGNITUDE
                 (ACCESS-IN-CONTEXT (%VARIABLE-VALUE UNIT-VALUE)
                  (%HOME-CONTEXT UNIT-VALUE) CL:NIL)))))
             (CL:T
              (CL:IF
               (ISA?
                (ACCESS-IN-CONTEXT (%VARIABLE-VALUE UNITS)
                 (%HOME-CONTEXT UNITS) CL:NIL)
                SGT-UNIT-SUPPORT-LOGIC-SKOLEM)
               NULL
               (HELP-GET-UNIT-VALUE MAGNITUDE
                (ACCESS-IN-CONTEXT (%VARIABLE-VALUE UNITS)
                 (%HOME-CONTEXT UNITS) CL:NIL)))))))))
        (CL:T NULL)))))
    ((SUBTYPE-OF? TEST-VALUE-004
      SGT-UNIT-SUPPORT-LOGIC-PATTERN-VARIABLE)
     (CL:PROGN
      (CL:LET* ((VALUE (SAFE-BOUND-TO MAGNITUDE)))
       (CL:IF (CL:NOT (CL:EQ VALUE NULL))
        (HELP-GET-UNIT-VALUE VALUE UNITS) NULL))))
    ((SUBTYPE-OF? TEST-VALUE-004 SGT-UNIT-SUPPORT-LOGIC-SKOLEM)
     (CL:PROGN
      (CL:LET*
       ((VALUE
         (ACCESS-IN-CONTEXT (%VARIABLE-VALUE MAGNITUDE)
          (%HOME-CONTEXT MAGNITUDE) CL:NIL)))
       (CL:COND
        ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE VALUE)
          SGT-UNIT-SUPPORT-LOGIC-SKOLEM)
         (CL:PROGN
          (CL:IF
           (ISA?
            (ACCESS-IN-CONTEXT (%VARIABLE-VALUE VALUE)
             (%HOME-CONTEXT VALUE) CL:NIL)
            SGT-UNIT-SUPPORT-LOGIC-SKOLEM)
           NULL
           (HELP-GET-UNIT-VALUE
            (ACCESS-IN-CONTEXT (%VARIABLE-VALUE VALUE)
             (%HOME-CONTEXT VALUE) CL:NIL)
            UNITS))))
        (CL:T
         (CL:IF
          (ISA?
           (ACCESS-IN-CONTEXT (%VARIABLE-VALUE MAGNITUDE)
            (%HOME-CONTEXT MAGNITUDE) CL:NIL)
           SGT-UNIT-SUPPORT-LOGIC-SKOLEM)
          NULL
          (HELP-GET-UNIT-VALUE
           (ACCESS-IN-CONTEXT (%VARIABLE-VALUE MAGNITUDE)
            (%HOME-CONTEXT MAGNITUDE) CL:NIL)
           UNITS)))))))
    (CL:T NULL))))

;;; (DEFUN UNITS-EVALUATOR ...)

(CL:DEFUN UNITS-EVALUATOR (SELF)
  (CL:LET*
   ((MAGNITUDE
     (VALUE-OF
      (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS SELF)))
       0)))
    (UNITS
     (VALUE-OF
      (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS SELF)))
       1)))
    (DIM-NUMBER
     (VALUE-OF
      (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS SELF)))
       2)))
    (VALUE1 (HELP-GET-UNIT-VALUE MAGNITUDE UNITS)))
   (CL:WHEN (CL:NOT (CL:EQ VALUE1 NULL))
    (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE DIM-NUMBER)))
     (CL:COND
      ((SUBTYPE-OF? TEST-VALUE-000 SGT-UNIT-SUPPORT-LOGIC-SKOLEM)
       (CL:PROGN (BIND-SKOLEM-TO-VALUE DIM-NUMBER VALUE1 CL:NIL)))
      ((SUBTYPE-OF? TEST-VALUE-000
        SGT-UNIT-SUPPORT-UNIT-SUPPORT-DIM-NUMBER-LOGIC-WRAPPER)
       (CL:PROGN
        (CL:WHEN
         (CL:NOT
          (EQL? (%WRAPPER-VALUE VALUE1) (%WRAPPER-VALUE DIM-NUMBER)))
         (SIGNAL-UNIFICATION-CLASH VALUE1 DIM-NUMBER))))
      ((SUBTYPE-OF? TEST-VALUE-000
        SGT-UNIT-SUPPORT-TIMEPOINT-SUPPORT-DATE-TIME-LOGIC-WRAPPER)
       (CL:PROGN
        (CL:LET* ((THE-DIM (HELP-GET-DIM-NUMBER DIM-NUMBER)))
         (CL:WHEN
          (CL:NOT
           (CL:AND (CL:NOT (CL:EQ THE-DIM NULL))
            (EQL? (%WRAPPER-VALUE VALUE1) (%WRAPPER-VALUE THE-DIM))))
          (SIGNAL-UNIFICATION-CLASH VALUE1 DIM-NUMBER)))))
      (CL:T (SIGNAL-UNIFICATION-CLASH VALUE1 DIM-NUMBER)))))))

;;; (DEFUN (UNITS-SPECIALIST KEYWORD) ...)

(CL:DEFUN UNITS-SPECIALIST (FRAME LASTMOVE)
  (CL:LET*
   ((PROPOSITION (%PROPOSITION FRAME))
    (MAGNITUDE
     (VALUE-OF
      (CL:AREF
       (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
       0)))
    (UNITS
     (VALUE-OF
      (CL:AREF
       (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
       1)))
    (DIM
     (VALUE-OF
      (CL:AREF
       (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
       2)))
    (THE-VALUE (HELP-GET-UNIT-VALUE MAGNITUDE UNITS))
    (UNIT-STRING STELLA::NULL-STRING))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING UNIT-STRING))
   (CL:SETQ LASTMOVE LASTMOVE)
   (CL:COND
    ((CL:NOT (CL:EQ THE-VALUE NULL))
     (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE DIM)))
      (CL:COND
       ((SUBTYPE-OF? TEST-VALUE-000
         SGT-UNIT-SUPPORT-LOGIC-PATTERN-VARIABLE)
        (CL:PROGN
         (SELECT-PROOF-RESULT
          (BIND-VARIABLE-TO-VALUE? DIM THE-VALUE CL:T) CL:NIL CL:T)))
       ((SUBTYPE-OF? TEST-VALUE-000 SGT-UNIT-SUPPORT-LOGIC-SKOLEM)
        (CL:PROGN
         (CL:LET*
          ((OBJECT-000 DIM) (VALUE-000 THE-VALUE)
           (OLD-VALUE-000 (%VARIABLE-VALUE OBJECT-000))
           (NEW-VALUE-000
            (UPDATE-IN-CONTEXT OLD-VALUE-000 VALUE-000
             (%HOME-CONTEXT OBJECT-000) CL:NIL)))
          (CL:WHEN
           (CL:NOT
            (CL:AND (CL:NOT (CL:EQ OLD-VALUE-000 NULL))
             (CL:EQ (PRIMARY-TYPE OLD-VALUE-000)
              SGT-UNIT-SUPPORT-STELLA-CS-VALUE)))
           (CL:SETF (%VARIABLE-VALUE OBJECT-000) NEW-VALUE-000)))
         KWD-UNIT-SUPPORT-FINAL-SUCCESS))
       ((SUBTYPE-OF? TEST-VALUE-000
         SGT-UNIT-SUPPORT-UNIT-SUPPORT-DIM-NUMBER-LOGIC-WRAPPER)
        (CL:PROGN
         (SELECT-PROOF-RESULT
          (OBJECT-EQL? (%WRAPPER-VALUE THE-VALUE) (%WRAPPER-VALUE DIM))
          CL:NIL CL:T)))
       ((SUBTYPE-OF? TEST-VALUE-000
         SGT-UNIT-SUPPORT-TIMEPOINT-SUPPORT-DATE-TIME-LOGIC-WRAPPER)
        (CL:PROGN
         (CL:LET* ((THE-DIM (HELP-GET-DIM-NUMBER DIM)))
          (CL:IF (CL:EQ THE-DIM NULL) KWD-UNIT-SUPPORT-TERMINAL-FAILURE
           (SELECT-PROOF-RESULT
            (OBJECT-EQL? (%WRAPPER-VALUE THE-VALUE)
             (%WRAPPER-VALUE THE-DIM))
            CL:NIL CL:T)))))
       (CL:T
        (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
         (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" TEST-VALUE-000
          "' is not a valid case option")
         (CL:ERROR
          (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))
    ((CL:NOT (CL:EQ DIM NULL))
     (CL:SETQ THE-VALUE (HELP-GET-DIM-NUMBER DIM))
     (CL:WHEN (CL:EQ THE-VALUE NULL)
      (CL:RETURN-FROM UNITS-SPECIALIST KWD-UNIT-SUPPORT-FAILURE))
     (CL:SETQ UNIT-STRING (GET-UNIT (%WRAPPER-VALUE THE-VALUE)))
     (CL:LET* ((TEST-VALUE-005 (SAFE-PRIMARY-TYPE MAGNITUDE)))
      (CL:COND
       ((SUBTYPE-OF? TEST-VALUE-005
         SGT-UNIT-SUPPORT-LOGIC-PATTERN-VARIABLE)
        (CL:PROGN
         (CL:LET* ((TEST-VALUE-001 (SAFE-PRIMARY-TYPE UNITS)))
          (CL:COND
           ((SUBTYPE-OF? TEST-VALUE-001
             SGT-UNIT-SUPPORT-LOGIC-PATTERN-VARIABLE)
            (CL:PROGN
             (SELECT-PROOF-RESULT
              (CL:AND
               (BIND-VARIABLE-TO-VALUE? UNITS (WRAP-STRING UNIT-STRING)
                CL:T)
               (BIND-VARIABLE-TO-VALUE? MAGNITUDE
                (WRAP-FLOAT
                 (GET-MAGNITUDE (%WRAPPER-VALUE THE-VALUE)
                  UNIT-STRING))
                CL:T))
              CL:NIL CL:T)))
           ((SUBTYPE-OF-STRING? TEST-VALUE-001)
            (CL:PROGN
             (CL:LET* ((RETURN-VALUE KWD-UNIT-SUPPORT-FAILURE))
              (CL:HANDLER-CASE
               (CL:PROGN
                (CL:SETQ RETURN-VALUE
                 (SELECT-PROOF-RESULT
                  (BIND-VARIABLE-TO-VALUE? MAGNITUDE
                   (WRAP-FLOAT
                    (GET-MAGNITUDE (%WRAPPER-VALUE THE-VALUE)
                     (%WRAPPER-VALUE UNITS)))
                   CL:T)
                  CL:NIL CL:T)))
               (INCOMPATIBLE-UNITS-EXCEPTION ()
                (CL:SETQ RETURN-VALUE
                 KWD-UNIT-SUPPORT-TERMINAL-FAILURE))
               (STELLA-EXCEPTION () NULL))
              RETURN-VALUE)))
           ((SUBTYPE-OF? TEST-VALUE-001 SGT-UNIT-SUPPORT-LOGIC-SKOLEM)
            (CL:PROGN
             (CL:LET*
              ((OBJECT-001 UNITS) (VALUE-001 (WRAP-STRING UNIT-STRING))
               (OLD-VALUE-001 (%VARIABLE-VALUE OBJECT-001))
               (NEW-VALUE-001
                (UPDATE-IN-CONTEXT OLD-VALUE-001 VALUE-001
                 (%HOME-CONTEXT OBJECT-001) CL:NIL)))
              (CL:WHEN
               (CL:NOT
                (CL:AND (CL:NOT (CL:EQ OLD-VALUE-001 NULL))
                 (CL:EQ (PRIMARY-TYPE OLD-VALUE-001)
                  SGT-UNIT-SUPPORT-STELLA-CS-VALUE)))
               (CL:SETF (%VARIABLE-VALUE OBJECT-001) NEW-VALUE-001)))
             (SELECT-PROOF-RESULT
              (BIND-VARIABLE-TO-VALUE? MAGNITUDE
               (WRAP-FLOAT
                (GET-MAGNITUDE (%WRAPPER-VALUE THE-VALUE) UNIT-STRING))
               CL:T)
              CL:NIL CL:T)))
           (CL:T KWD-UNIT-SUPPORT-FAILURE)))))
       ((SUBTYPE-OF? TEST-VALUE-005 SGT-UNIT-SUPPORT-LOGIC-SKOLEM)
        (CL:PROGN
         (CL:LET* ((TEST-VALUE-002 (SAFE-PRIMARY-TYPE UNITS)))
          (CL:COND
           ((SUBTYPE-OF? TEST-VALUE-002
             SGT-UNIT-SUPPORT-LOGIC-PATTERN-VARIABLE)
            (CL:PROGN
             (CL:LET*
              ((OBJECT-002 MAGNITUDE)
               (VALUE-002
                (WRAP-FLOAT
                 (GET-MAGNITUDE (%WRAPPER-VALUE THE-VALUE)
                  UNIT-STRING)))
               (OLD-VALUE-002 (%VARIABLE-VALUE OBJECT-002))
               (NEW-VALUE-002
                (UPDATE-IN-CONTEXT OLD-VALUE-002 VALUE-002
                 (%HOME-CONTEXT OBJECT-002) CL:NIL)))
              (CL:WHEN
               (CL:NOT
                (CL:AND (CL:NOT (CL:EQ OLD-VALUE-002 NULL))
                 (CL:EQ (PRIMARY-TYPE OLD-VALUE-002)
                  SGT-UNIT-SUPPORT-STELLA-CS-VALUE)))
               (CL:SETF (%VARIABLE-VALUE OBJECT-002) NEW-VALUE-002)))
             (SELECT-PROOF-RESULT
              (BIND-VARIABLE-TO-VALUE? UNITS (WRAP-STRING UNIT-STRING)
               CL:T)
              CL:NIL CL:T)))
           ((SUBTYPE-OF-STRING? TEST-VALUE-002)
            (CL:PROGN
             (CL:LET* ((RETURN-VALUE KWD-UNIT-SUPPORT-FINAL-SUCCESS))
              (CL:HANDLER-CASE
               (CL:PROGN
                (CL:LET*
                 ((OBJECT-003 MAGNITUDE)
                  (VALUE-003
                   (WRAP-FLOAT
                    (GET-MAGNITUDE (%WRAPPER-VALUE THE-VALUE)
                     (%WRAPPER-VALUE UNITS))))
                  (OLD-VALUE-003 (%VARIABLE-VALUE OBJECT-003))
                  (NEW-VALUE-003
                   (UPDATE-IN-CONTEXT OLD-VALUE-003 VALUE-003
                    (%HOME-CONTEXT OBJECT-003) CL:NIL)))
                 (CL:WHEN
                  (CL:NOT
                   (CL:AND (CL:NOT (CL:EQ OLD-VALUE-003 NULL))
                    (CL:EQ (PRIMARY-TYPE OLD-VALUE-003)
                     SGT-UNIT-SUPPORT-STELLA-CS-VALUE)))
                  (CL:SETF (%VARIABLE-VALUE OBJECT-003)
                   NEW-VALUE-003))))
               (INCOMPATIBLE-UNITS-EXCEPTION ()
                (CL:SETQ RETURN-VALUE
                 KWD-UNIT-SUPPORT-TERMINAL-FAILURE))
               (STELLA-EXCEPTION ()
                (CL:SETQ RETURN-VALUE KWD-UNIT-SUPPORT-FAILURE)))
              RETURN-VALUE)))
           ((SUBTYPE-OF? TEST-VALUE-002 SGT-UNIT-SUPPORT-LOGIC-SKOLEM)
            (CL:PROGN
             (CL:LET*
              ((OBJECT-004 UNITS) (VALUE-004 (WRAP-STRING UNIT-STRING))
               (OLD-VALUE-004 (%VARIABLE-VALUE OBJECT-004))
               (NEW-VALUE-004
                (UPDATE-IN-CONTEXT OLD-VALUE-004 VALUE-004
                 (%HOME-CONTEXT OBJECT-004) CL:NIL)))
              (CL:WHEN
               (CL:NOT
                (CL:AND (CL:NOT (CL:EQ OLD-VALUE-004 NULL))
                 (CL:EQ (PRIMARY-TYPE OLD-VALUE-004)
                  SGT-UNIT-SUPPORT-STELLA-CS-VALUE)))
               (CL:SETF (%VARIABLE-VALUE OBJECT-004) NEW-VALUE-004)))
             (CL:LET*
              ((OBJECT-005 MAGNITUDE)
               (VALUE-005
                (WRAP-FLOAT
                 (GET-MAGNITUDE (%WRAPPER-VALUE THE-VALUE)
                  UNIT-STRING)))
               (OLD-VALUE-005 (%VARIABLE-VALUE OBJECT-005))
               (NEW-VALUE-005
                (UPDATE-IN-CONTEXT OLD-VALUE-005 VALUE-005
                 (%HOME-CONTEXT OBJECT-005) CL:NIL)))
              (CL:WHEN
               (CL:NOT
                (CL:AND (CL:NOT (CL:EQ OLD-VALUE-005 NULL))
                 (CL:EQ (PRIMARY-TYPE OLD-VALUE-005)
                  SGT-UNIT-SUPPORT-STELLA-CS-VALUE)))
               (CL:SETF (%VARIABLE-VALUE OBJECT-005) NEW-VALUE-005)))
             KWD-UNIT-SUPPORT-FINAL-SUCCESS))
           (CL:T KWD-UNIT-SUPPORT-FAILURE)))))
       ((SUBTYPE-OF-FLOAT? TEST-VALUE-005)
        (CL:PROGN
         (CL:IF
          (CL:AND (CL:NOT (CL:= (%WRAPPER-VALUE MAGNITUDE) NULL-FLOAT))
           (CL:= (%WRAPPER-VALUE MAGNITUDE)
            (GET-MAGNITUDE (%WRAPPER-VALUE THE-VALUE) UNIT-STRING)))
          (CL:LET* ((TEST-VALUE-003 (SAFE-PRIMARY-TYPE UNITS)))
           (CL:COND
            ((SUBTYPE-OF? TEST-VALUE-003
              SGT-UNIT-SUPPORT-LOGIC-PATTERN-VARIABLE)
             (CL:PROGN
              (SELECT-PROOF-RESULT
               (BIND-VARIABLE-TO-VALUE? UNITS (WRAP-STRING UNIT-STRING)
                CL:T)
               CL:NIL CL:T)))
            ((SUBTYPE-OF? TEST-VALUE-003 SGT-UNIT-SUPPORT-LOGIC-SKOLEM)
             (CL:PROGN
              (CL:LET*
               ((OBJECT-006 UNITS)
                (VALUE-006 (WRAP-STRING UNIT-STRING))
                (OLD-VALUE-006 (%VARIABLE-VALUE OBJECT-006))
                (NEW-VALUE-006
                 (UPDATE-IN-CONTEXT OLD-VALUE-006 VALUE-006
                  (%HOME-CONTEXT OBJECT-006) CL:NIL)))
               (CL:WHEN
                (CL:NOT
                 (CL:AND (CL:NOT (CL:EQ OLD-VALUE-006 NULL))
                  (CL:EQ (PRIMARY-TYPE OLD-VALUE-006)
                   SGT-UNIT-SUPPORT-STELLA-CS-VALUE)))
                (CL:SETF (%VARIABLE-VALUE OBJECT-006) NEW-VALUE-006)))
              KWD-UNIT-SUPPORT-FINAL-SUCCESS))
            (CL:T KWD-UNIT-SUPPORT-FAILURE)))
          KWD-UNIT-SUPPORT-FAILURE)))
       ((SUBTYPE-OF-INTEGER? TEST-VALUE-005)
        (CL:PROGN
         (CL:IF
          (CL:AND (DEFINED? (%WRAPPER-VALUE MAGNITUDE))
           (CL:= (CL:FLOAT (%WRAPPER-VALUE MAGNITUDE) 0.0d0)
            (GET-MAGNITUDE (%WRAPPER-VALUE THE-VALUE) UNIT-STRING)))
          (CL:LET* ((TEST-VALUE-004 (SAFE-PRIMARY-TYPE UNITS)))
           (CL:COND
            ((SUBTYPE-OF? TEST-VALUE-004
              SGT-UNIT-SUPPORT-LOGIC-PATTERN-VARIABLE)
             (CL:PROGN
              (SELECT-PROOF-RESULT
               (BIND-VARIABLE-TO-VALUE? UNITS (WRAP-STRING UNIT-STRING)
                CL:T)
               CL:NIL CL:T)))
            ((SUBTYPE-OF? TEST-VALUE-004 SGT-UNIT-SUPPORT-LOGIC-SKOLEM)
             (CL:PROGN
              (CL:LET*
               ((OBJECT-007 UNITS)
                (VALUE-007 (WRAP-STRING UNIT-STRING))
                (OLD-VALUE-007 (%VARIABLE-VALUE OBJECT-007))
                (NEW-VALUE-007
                 (UPDATE-IN-CONTEXT OLD-VALUE-007 VALUE-007
                  (%HOME-CONTEXT OBJECT-007) CL:NIL)))
               (CL:WHEN
                (CL:NOT
                 (CL:AND (CL:NOT (CL:EQ OLD-VALUE-007 NULL))
                  (CL:EQ (PRIMARY-TYPE OLD-VALUE-007)
                   SGT-UNIT-SUPPORT-STELLA-CS-VALUE)))
                (CL:SETF (%VARIABLE-VALUE OBJECT-007) NEW-VALUE-007)))
              KWD-UNIT-SUPPORT-FINAL-SUCCESS))
            (CL:T KWD-UNIT-SUPPORT-FAILURE)))
          KWD-UNIT-SUPPORT-FAILURE)))
       (CL:T KWD-UNIT-SUPPORT-TERMINAL-FAILURE))))
    (CL:T KWD-UNIT-SUPPORT-FAILURE))))

;;; (DEFUN (U-PLUS-CONSTRAINT OBJECT) ...)

(CL:DEFUN U-PLUS-CONSTRAINT (MISSING-ARGUMENT X1 X2 X3)
  (CL:LET* ((VALUE NULL))
   (CL:CASE (%WRAPPER-VALUE MISSING-ARGUMENT)
    (-1
     (CL:SETQ VALUE
      (CL:IF
       (EQL? (ADD (%WRAPPER-VALUE X1) (%WRAPPER-VALUE X2))
        (%WRAPPER-VALUE X3))
       TRUE-WRAPPER FALSE-WRAPPER)))
    (0
     (CL:SETQ VALUE
      (CL:IF
       (OBJECT-EQL? (%PID (%WRAPPER-VALUE X3))
        (%PID (%WRAPPER-VALUE X2)))
       (WRAP-DIM-NUMBER
        (SUBTRACT (%WRAPPER-VALUE X3) (%WRAPPER-VALUE X2)))
       NULL)))
    (1
     (CL:SETQ VALUE
      (CL:IF
       (OBJECT-EQL? (%PID (%WRAPPER-VALUE X3))
        (%PID (%WRAPPER-VALUE X1)))
       (WRAP-DIM-NUMBER
        (SUBTRACT (%WRAPPER-VALUE X3) (%WRAPPER-VALUE X1)))
       NULL)))
    (2
     (CL:SETQ VALUE
      (CL:IF
       (OBJECT-EQL? (%PID (%WRAPPER-VALUE X1))
        (%PID (%WRAPPER-VALUE X2)))
       (WRAP-DIM-NUMBER (ADD (%WRAPPER-VALUE X1) (%WRAPPER-VALUE X2)))
       NULL)))
    (CL:OTHERWISE))
   VALUE))

;;; (DEFUN (U-MINUS-CONSTRAINT OBJECT) ...)

(CL:DEFUN U-MINUS-CONSTRAINT (MISSING-ARGUMENT X1 X2 X3)
  (CL:LET* ((VALUE NULL))
   (CL:CASE (%WRAPPER-VALUE MISSING-ARGUMENT)
    (-1
     (CL:SETQ VALUE
      (CL:IF
       (EQL? (SUBTRACT (%WRAPPER-VALUE X1) (%WRAPPER-VALUE X2))
        (%WRAPPER-VALUE X3))
       TRUE-WRAPPER FALSE-WRAPPER)))
    (0
     (CL:SETQ VALUE
      (CL:IF
       (OBJECT-EQL? (%PID (%WRAPPER-VALUE X3))
        (%PID (%WRAPPER-VALUE X2)))
       (WRAP-DIM-NUMBER (ADD (%WRAPPER-VALUE X3) (%WRAPPER-VALUE X2)))
       NULL)))
    (1
     (CL:SETQ VALUE
      (CL:IF
       (OBJECT-EQL? (%PID (%WRAPPER-VALUE X3))
        (%PID (%WRAPPER-VALUE X1)))
       (WRAP-DIM-NUMBER
        (SUBTRACT (%WRAPPER-VALUE X1) (%WRAPPER-VALUE X3)))
       NULL)))
    (2
     (CL:SETQ VALUE
      (CL:IF
       (OBJECT-EQL? (%PID (%WRAPPER-VALUE X1))
        (%PID (%WRAPPER-VALUE X2)))
       (WRAP-DIM-NUMBER
        (SUBTRACT (%WRAPPER-VALUE X1) (%WRAPPER-VALUE X2)))
       NULL)))
    (CL:OTHERWISE))
   VALUE))

;;; (DEFUN (U-TIMES-CONSTRAINT OBJECT) ...)

(CL:DEFUN U-TIMES-CONSTRAINT (MISSING-ARGUMENT X1 X2 X3)
  (CL:LET* ((VALUE NULL))
   (CL:CASE (%WRAPPER-VALUE MISSING-ARGUMENT)
    (-1
     (CL:SETQ VALUE
      (CL:IF
       (EQL? (MULTIPLY (%WRAPPER-VALUE X1) (%WRAPPER-VALUE X2))
        (%WRAPPER-VALUE X3))
       TRUE-WRAPPER FALSE-WRAPPER)))
    (0
     (CL:SETQ VALUE
      (CL:IF (CL:= (%MAGNITUDE (%WRAPPER-VALUE X2)) 0.0d0) NULL
       (WRAP-DIM-NUMBER
        (DIVIDE (%WRAPPER-VALUE X3) (%WRAPPER-VALUE X2))))))
    (1
     (CL:SETQ VALUE
      (CL:IF (CL:= (%MAGNITUDE (%WRAPPER-VALUE X1)) 0.0d0) NULL
       (WRAP-DIM-NUMBER
        (DIVIDE (%WRAPPER-VALUE X3) (%WRAPPER-VALUE X1))))))
    (2
     (CL:SETQ VALUE
      (WRAP-DIM-NUMBER
       (MULTIPLY (%WRAPPER-VALUE X1) (%WRAPPER-VALUE X2)))))
    (CL:OTHERWISE))
   VALUE))

;;; (DEFUN (U-DIVIDE-CONSTRAINT OBJECT) ...)

(CL:DEFUN U-DIVIDE-CONSTRAINT (MISSING-ARGUMENT X1 X2 X3)
  (CL:LET* ((VALUE NULL))
   (CL:CASE (%WRAPPER-VALUE MISSING-ARGUMENT)
    (-1
     (CL:SETQ VALUE
      (CL:IF (CL:= (%MAGNITUDE (%WRAPPER-VALUE X2)) 0.0d0)
       (CL:IF
        (EQL? (%WRAPPER-VALUE X1)
         (MULTIPLY (%WRAPPER-VALUE X2) (%WRAPPER-VALUE X3)))
        TRUE-WRAPPER FALSE-WRAPPER)
       (CL:IF
        (EQL? (%WRAPPER-VALUE X3)
         (DIVIDE (%WRAPPER-VALUE X1) (%WRAPPER-VALUE X2)))
        TRUE-WRAPPER FALSE-WRAPPER))))
    (0
     (CL:SETQ VALUE
      (WRAP-DIM-NUMBER
       (MULTIPLY (%WRAPPER-VALUE X2) (%WRAPPER-VALUE X3)))))
    (1
     (CL:SETQ VALUE
      (CL:IF (CL:= (%MAGNITUDE (%WRAPPER-VALUE X3)) 0.0d0) NULL
       (WRAP-DIM-NUMBER
        (DIVIDE (%WRAPPER-VALUE X1) (%WRAPPER-VALUE X3))))))
    (2
     (CL:SETQ VALUE
      (CL:IF (CL:= (%MAGNITUDE (%WRAPPER-VALUE X2)) 0.0d0) NULL
       (WRAP-DIM-NUMBER
        (DIVIDE (%WRAPPER-VALUE X1) (%WRAPPER-VALUE X2))))))
    (CL:OTHERWISE))
   VALUE))

;;; (DEFUN (U-ABS-SPECIALIST KEYWORD) ...)

(CL:DEFUN U-ABS-SPECIALIST (FRAME LASTMOVE)
  (CL:LET*
   ((PROPOSITION (%PROPOSITION FRAME))
    (MAINARG
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
      0))
    (MAINARGVALUE (ARGUMENT-BOUND-TO MAINARG))
    (MAINARGDIM
     (CL:IF (CL:EQ MAINARGVALUE NULL) NULL
      (HELP-GET-DIM-NUMBER MAINARGVALUE)))
    (ABSARG
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
      1))
    (ABSARGVALUE (ARGUMENT-BOUND-TO ABSARG))
    (ABSARGDIM
     (CL:IF (CL:EQ ABSARGVALUE NULL) NULL
      (HELP-GET-DIM-NUMBER ABSARGVALUE)))
    (ITERATOR
     (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
      SYM-UNIT-SUPPORT-STELLA-ITERATOR NULL))
    (COLLECTION NIL))
   (CL:SETQ LASTMOVE LASTMOVE)
   (CL:WHEN (CL:EQ ITERATOR NULL)
    (CL:IF (CL:EQ ABSARGVALUE NULL)
     (CL:IF (CL:EQ MAINARGVALUE NULL)
      (CL:RETURN-FROM U-ABS-SPECIALIST
       KWD-UNIT-SUPPORT-TERMINAL-FAILURE)
      (CL:IF (CL:NOT (CL:EQ MAINARGDIM NULL))
       (CL:RETURN-FROM U-ABS-SPECIALIST
        (SELECT-PROOF-RESULT
         (BIND-ARGUMENT-TO-VALUE? ABSARG
          (WRAP-DIM-NUMBER
           (ABSOLUTE-VALUE (%WRAPPER-VALUE MAINARGDIM)))
          CL:T)
         CL:NIL CL:T))
       (CL:RETURN-FROM U-ABS-SPECIALIST
        KWD-UNIT-SUPPORT-TERMINAL-FAILURE)))
     (CL:IF (CL:NOT (CL:EQ ABSARGDIM NULL))
      (CL:IF (CL:< (%MAGNITUDE (%WRAPPER-VALUE ABSARGDIM)) 0.0d0)
       (CL:RETURN-FROM U-ABS-SPECIALIST
        KWD-UNIT-SUPPORT-TERMINAL-FAILURE)
       (CL:SETQ COLLECTION
        (CONS-LIST ABSARGDIM
         (WRAP-DIM-NUMBER (NEGATE (%WRAPPER-VALUE ABSARGDIM))))))
      (CL:RETURN-FROM U-ABS-SPECIALIST
       KWD-UNIT-SUPPORT-TERMINAL-FAILURE))))
   (CL:WHEN (CL:NOT (CL:EQ MAINARGDIM NULL))
    (CL:IF (MEMBER? COLLECTION MAINARGDIM)
     (CL:PROGN (SET-FRAME-TRUTH-VALUE FRAME TRUE-TRUTH-VALUE)
      (CL:RETURN-FROM U-ABS-SPECIALIST KWD-UNIT-SUPPORT-FINAL-SUCCESS))
     (CL:PROGN (SET-FRAME-TRUTH-VALUE FRAME FALSE-TRUTH-VALUE)
      (CL:RETURN-FROM U-ABS-SPECIALIST
       KWD-UNIT-SUPPORT-TERMINAL-FAILURE))))
   (CL:WHEN (CL:EQ ITERATOR NULL)
    (CL:SETQ ITERATOR (ALLOCATE-ITERATOR COLLECTION))
    (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
     SYM-UNIT-SUPPORT-STELLA-ITERATOR ITERATOR NULL))
   (CL:IF
    (CL:AND (NEXT? ITERATOR)
     (BIND-ARGUMENT-TO-VALUE? MAINARG (%VALUE ITERATOR) CL:T))
    KWD-UNIT-SUPPORT-CONTINUING-SUCCESS
    KWD-UNIT-SUPPORT-TERMINAL-FAILURE)))

;;; (DEFUN (U-SIGNUM-SPECIALIST KEYWORD) ...)

(CL:DEFUN U-SIGNUM-SPECIALIST (FRAME LASTMOVE)
  (CL:LET*
   ((PROPOSITION (%PROPOSITION FRAME))
    (MAINARG
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
      0))
    (MAINARGVALUE (ARGUMENT-BOUND-TO MAINARG))
    (MAINARGDIM
     (CL:IF (CL:EQ MAINARGVALUE NULL) NULL
      (HELP-GET-DIM-NUMBER MAINARGVALUE)))
    (SIGNUMARG
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
      1))
    (SIGNUMARGVALUE (ARGUMENT-BOUND-TO SIGNUMARG)))
   (CL:SETQ LASTMOVE LASTMOVE)
   (CL:IF (CL:EQ MAINARGVALUE NULL) KWD-UNIT-SUPPORT-FAILURE
    (CL:IF (CL:EQ SIGNUMARGVALUE NULL)
     (CL:IF (CL:NOT (CL:EQ MAINARGDIM NULL))
      (SELECT-PROOF-RESULT
       (BIND-ARGUMENT-TO-VALUE? SIGNUMARG
        (WRAP-INTEGER (SIGNUM (%WRAPPER-VALUE MAINARGDIM))) CL:T)
       CL:NIL CL:T)
      KWD-UNIT-SUPPORT-TERMINAL-FAILURE)
     (CL:IF
      (CL:AND
       (ISA? SIGNUMARGVALUE SGT-UNIT-SUPPORT-STELLA-INTEGER-WRAPPER)
       (CL:NOT (CL:EQ MAINARGDIM NULL)))
      (CL:IF
       (CL:= (SIGNUM (%WRAPPER-VALUE MAINARGDIM))
        (%WRAPPER-VALUE SIGNUMARGVALUE))
       (CL:PROGN (SET-FRAME-TRUTH-VALUE FRAME TRUE-TRUTH-VALUE)
        KWD-UNIT-SUPPORT-FINAL-SUCCESS)
       (CL:PROGN (SET-FRAME-TRUTH-VALUE FRAME FALSE-TRUTH-VALUE)
        KWD-UNIT-SUPPORT-TERMINAL-FAILURE))
      KWD-UNIT-SUPPORT-TERMINAL-FAILURE)))))

;;; (DEFUN (MINIMUM-OF-UNITS-SPECIALIST KEYWORD) ...)

(CL:DEFUN MINIMUM-OF-UNITS-SPECIALIST (FRAME LASTMOVE)
  (CL:LET*
   ((PROPOSITION (%PROPOSITION FRAME))
    (LISTARG
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
      0))
    (LISTSKOLEM (ARGUMENT-BOUND-TO LISTARG))
    (MINARG
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
      1))
    (MINVALUE (ARGUMENT-BOUND-TO MINARG)) (MINIMUM NULL)
    (MISSINGUNITS? CL:NIL))
   (CL:SETQ LASTMOVE LASTMOVE)
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ LISTSKOLEM NULL))
     (CL:NOT (LOGICAL-COLLECTION? LISTSKOLEM)))
    (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) EOL
     "Non list appears in second argument to 'MINIMUM-OF-UNITS'" EOL
     EOL)
    (CL:RETURN-FROM MINIMUM-OF-UNITS-SPECIALIST
     KWD-UNIT-SUPPORT-TERMINAL-FAILURE))
   (CL:LET*
    ((LISTVALUE (ASSERTED-COLLECTION-MEMBERS LISTSKOLEM CL:T))
     (DIMVALUE NULL))
    (CL:WHEN (EMPTY? LISTVALUE)
     (CL:RETURN-FROM MINIMUM-OF-UNITS-SPECIALIST
      KWD-UNIT-SUPPORT-TERMINAL-FAILURE))
    (CL:LET* ((V NULL) (ITER-000 (%THE-CONS-LIST LISTVALUE)))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:SETQ V (%%VALUE ITER-000))
      (CL:SETQ DIMVALUE (HELP-GET-DIM-NUMBER V))
      (CL:IF (CL:NOT (CL:EQ DIMVALUE NULL))
       (CL:WHEN
        (CL:OR (CL:EQ MINIMUM NULL)
         (LESS? (%WRAPPER-VALUE DIMVALUE) MINIMUM))
        (CL:SETQ MINIMUM (%WRAPPER-VALUE DIMVALUE)))
       (CL:SETQ MISSINGUNITS? CL:T))
      (CL:SETQ ITER-000 (%%REST ITER-000))))
    (CL:WHEN (CL:EQ MINIMUM NULL)
     (CL:RETURN-FROM MINIMUM-OF-UNITS-SPECIALIST
      KWD-UNIT-SUPPORT-TERMINAL-FAILURE))
    (CL:WHEN MISSINGUNITS?
     (CL:IF
      (CL:AND (CL:NOT (CL:EQ MINVALUE NULL))
       (CL:NOT (CL:EQ (HELP-GET-DIM-NUMBER MINVALUE) NULL))
       (GREATER? (%WRAPPER-VALUE (HELP-GET-DIM-NUMBER MINVALUE))
        MINIMUM))
      (CL:PROGN (SET-FRAME-TRUTH-VALUE FRAME FALSE-TRUTH-VALUE)
       (CL:RETURN-FROM MINIMUM-OF-UNITS-SPECIALIST
        KWD-UNIT-SUPPORT-TERMINAL-FAILURE))
      (CL:PROGN (SET-FRAME-TRUTH-VALUE FRAME UNKNOWN-TRUTH-VALUE)
       (CL:RETURN-FROM MINIMUM-OF-UNITS-SPECIALIST
        KWD-UNIT-SUPPORT-FAILURE))))
    (CL:IF
     (BIND-ARGUMENT-TO-VALUE? MINARG (WRAP-DIM-NUMBER MINIMUM) CL:T)
     (CL:PROGN (SET-FRAME-TRUTH-VALUE FRAME TRUE-TRUTH-VALUE)
      KWD-UNIT-SUPPORT-FINAL-SUCCESS)
     (CL:PROGN (SET-FRAME-TRUTH-VALUE FRAME FALSE-TRUTH-VALUE)
      KWD-UNIT-SUPPORT-TERMINAL-FAILURE)))))

;;; (DEFUN (MAXIMUM-OF-UNITS-SPECIALIST KEYWORD) ...)

(CL:DEFUN MAXIMUM-OF-UNITS-SPECIALIST (FRAME LASTMOVE)
  (CL:LET*
   ((PROPOSITION (%PROPOSITION FRAME))
    (LISTARG
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
      0))
    (LISTSKOLEM (ARGUMENT-BOUND-TO LISTARG))
    (MAXARG
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
      1))
    (MAXVALUE (ARGUMENT-BOUND-TO MAXARG)) (MAXIMUM NULL)
    (MISSINGUNITS? CL:NIL))
   (CL:SETQ LASTMOVE LASTMOVE)
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ LISTSKOLEM NULL))
     (CL:NOT (LOGICAL-COLLECTION? LISTSKOLEM)))
    (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) EOL
     "Non list appears in second argument to 'MAXIMUM-OF-UNITS'" EOL
     EOL)
    (CL:RETURN-FROM MAXIMUM-OF-UNITS-SPECIALIST
     KWD-UNIT-SUPPORT-TERMINAL-FAILURE))
   (CL:LET*
    ((LISTVALUE (ASSERTED-COLLECTION-MEMBERS LISTSKOLEM CL:T))
     (DIMVALUE NULL))
    (CL:WHEN (EMPTY? LISTVALUE)
     (CL:RETURN-FROM MAXIMUM-OF-UNITS-SPECIALIST
      KWD-UNIT-SUPPORT-TERMINAL-FAILURE))
    (CL:LET* ((V NULL) (ITER-000 (%THE-CONS-LIST LISTVALUE)))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:SETQ V (%%VALUE ITER-000))
      (CL:SETQ DIMVALUE (HELP-GET-DIM-NUMBER V))
      (CL:IF
       (ISA? V SGT-UNIT-SUPPORT-UNIT-SUPPORT-DIM-NUMBER-LOGIC-WRAPPER)
       (CL:WHEN
        (CL:OR (CL:EQ MAXIMUM NULL)
         (GREATER? (%WRAPPER-VALUE DIMVALUE) MAXIMUM))
        (CL:SETQ MAXIMUM (%WRAPPER-VALUE DIMVALUE)))
       (CL:SETQ MISSINGUNITS? CL:T))
      (CL:SETQ ITER-000 (%%REST ITER-000))))
    (CL:WHEN (CL:EQ MAXIMUM NULL)
     (CL:RETURN-FROM MAXIMUM-OF-UNITS-SPECIALIST
      KWD-UNIT-SUPPORT-TERMINAL-FAILURE))
    (CL:WHEN MISSINGUNITS?
     (CL:IF
      (CL:AND (CL:NOT (CL:EQ MAXVALUE NULL))
       (CL:NOT (CL:EQ (HELP-GET-DIM-NUMBER MAXVALUE) NULL))
       (LESS? (%WRAPPER-VALUE (HELP-GET-DIM-NUMBER MAXVALUE)) MAXIMUM))
      (CL:PROGN (SET-FRAME-TRUTH-VALUE FRAME FALSE-TRUTH-VALUE)
       (CL:RETURN-FROM MAXIMUM-OF-UNITS-SPECIALIST
        KWD-UNIT-SUPPORT-TERMINAL-FAILURE))
      (CL:PROGN (SET-FRAME-TRUTH-VALUE FRAME UNKNOWN-TRUTH-VALUE)
       (CL:RETURN-FROM MAXIMUM-OF-UNITS-SPECIALIST
        KWD-UNIT-SUPPORT-FAILURE))))
    (CL:IF
     (BIND-ARGUMENT-TO-VALUE? MAXARG (WRAP-DIM-NUMBER MAXIMUM) CL:T)
     (CL:PROGN (SET-FRAME-TRUTH-VALUE FRAME TRUE-TRUTH-VALUE)
      KWD-UNIT-SUPPORT-FINAL-SUCCESS)
     (CL:PROGN (SET-FRAME-TRUTH-VALUE FRAME FALSE-TRUTH-VALUE)
      KWD-UNIT-SUPPORT-TERMINAL-FAILURE)))))

;;; (DEFUN (SUM-OF-UNITS-SPECIALIST KEYWORD) ...)

(CL:DEFUN SUM-OF-UNITS-SPECIALIST (FRAME LASTMOVE)
  (CL:LET*
   ((PROPOSITION (%PROPOSITION FRAME))
    (LISTARG
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
      0))
    (LISTSKOLEM (ARGUMENT-BOUND-TO LISTARG))
    (SUMARG
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
      1))
    (SUM NULL))
   (CL:SETQ LASTMOVE LASTMOVE)
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ LISTSKOLEM NULL))
     (CL:NOT (LOGICAL-COLLECTION? LISTSKOLEM)))
    (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) EOL
     "Non list appears in second argument to 'SUM-OF-NUMBERS'" EOL EOL)
    (CL:RETURN-FROM SUM-OF-UNITS-SPECIALIST
     KWD-UNIT-SUPPORT-TERMINAL-FAILURE))
   (CL:LET*
    ((LISTVALUE (ASSERTED-COLLECTION-MEMBERS LISTSKOLEM CL:T))
     (DIMVALUE NULL))
    (CL:WHEN (EMPTY? LISTVALUE)
     (CL:RETURN-FROM SUM-OF-UNITS-SPECIALIST
      KWD-UNIT-SUPPORT-TERMINAL-FAILURE))
    (CL:HANDLER-CASE
     (CL:LET* ((V NULL) (ITER-000 (%THE-CONS-LIST LISTVALUE)))
      (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
       (CL:SETQ V (%%VALUE ITER-000))
       (CL:SETQ DIMVALUE (HELP-GET-DIM-NUMBER V))
       (CL:IF (CL:NOT (CL:EQ DIMVALUE NULL))
        (CL:IF (CL:EQ SUM NULL) (CL:SETQ SUM (%WRAPPER-VALUE DIMVALUE))
         (CL:SETQ SUM (ADD SUM (%WRAPPER-VALUE DIMVALUE))))
        (CL:RETURN-FROM SUM-OF-UNITS-SPECIALIST
         KWD-UNIT-SUPPORT-FAILURE))
       (CL:SETQ ITER-000 (%%REST ITER-000))))
     (INCOMPATIBLE-UNITS-EXCEPTION ()
      (CL:RETURN-FROM SUM-OF-UNITS-SPECIALIST
       KWD-UNIT-SUPPORT-TERMINAL-FAILURE)))
    (CL:WHEN (CL:EQ SUM NULL)
     (CL:RETURN-FROM SUM-OF-UNITS-SPECIALIST
      KWD-UNIT-SUPPORT-TERMINAL-FAILURE))
    (CL:IF (BIND-ARGUMENT-TO-VALUE? SUMARG (WRAP-DIM-NUMBER SUM) CL:T)
     (CL:PROGN (SET-FRAME-TRUTH-VALUE FRAME TRUE-TRUTH-VALUE)
      KWD-UNIT-SUPPORT-FINAL-SUCCESS)
     (CL:PROGN (SET-FRAME-TRUTH-VALUE FRAME FALSE-TRUTH-VALUE)
      KWD-UNIT-SUPPORT-TERMINAL-FAILURE)))))

;;; (DEFUN (U-VALUE-MEASURE-SPECIALIST KEYWORD) ...)

(CL:DEFUN U-VALUE-MEASURE-SPECIALIST (FRAME LASTMOVE)
  (CL:LET*
   ((PROPOSITION (%PROPOSITION FRAME))
    (MAINARG
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
      0))
    (MAINARGVALUE (ARGUMENT-BOUND-TO MAINARG))
    (MEASUREARG
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
      1))
    (MEASUREARGVALUE (ARGUMENT-BOUND-TO MEASUREARG)))
   (CL:SETQ LASTMOVE LASTMOVE)
   (CL:IF (CL:EQ MAINARGVALUE NULL) KWD-UNIT-SUPPORT-FAILURE
    (CL:IF (CL:EQ MEASUREARGVALUE NULL)
     (CL:IF
      (ISA? MAINARGVALUE
       SGT-UNIT-SUPPORT-UNIT-SUPPORT-DIM-NUMBER-LOGIC-WRAPPER)
      (CL:LET*
       ((MEASURE (GET-MEASURE (%WRAPPER-VALUE MAINARGVALUE)))
        (MEASURE-INSTANCE
         (CL:IF (CL:NOT (CL:EQ MEASURE NULL))
          (LOOKUP *MEASURE-INSTANCE-TABLE* MEASURE) NULL)))
       (CL:IF (CL:NOT (CL:EQ MEASURE-INSTANCE NULL))
        (SELECT-PROOF-RESULT
         (BIND-ARGUMENT-TO-VALUE? MEASUREARG MEASURE-INSTANCE CL:T)
         CL:NIL CL:T)
        KWD-UNIT-SUPPORT-FAILURE))
      KWD-UNIT-SUPPORT-TERMINAL-FAILURE)
     (CL:LET*
      ((MEASURE (GET-MEASURE (%WRAPPER-VALUE MAINARGVALUE)))
       (MEASURE-INSTANCE
        (CL:IF (CL:NOT (CL:EQ MEASURE NULL))
         (LOOKUP *MEASURE-INSTANCE-TABLE* MEASURE) NULL)))
      (CL:IF (CL:NOT (CL:EQ MEASURE-INSTANCE NULL))
       (CL:IF (CL:EQ MEASUREARGVALUE MEASURE-INSTANCE)
        (CL:PROGN (SET-FRAME-TRUTH-VALUE FRAME TRUE-TRUTH-VALUE)
         KWD-UNIT-SUPPORT-FINAL-SUCCESS)
        (CL:PROGN (SET-FRAME-TRUTH-VALUE FRAME FALSE-TRUTH-VALUE)
         KWD-UNIT-SUPPORT-TERMINAL-FAILURE))
       KWD-UNIT-SUPPORT-TERMINAL-FAILURE))))))

;;; (DEFUN (ARGUMENT-MATCHES-LIST-HELPER? BOOLEAN) ...)

(CL:DEFUN ARGUMENT-MATCHES-LIST-HELPER? (ARGUMENT THE-LIST)
  (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE ARGUMENT)))
   (CL:COND
    ((SUBTYPE-OF? TEST-VALUE-000
      SGT-UNIT-SUPPORT-LOGIC-PATTERN-VARIABLE)
     (CL:PROGN
      (CL:LET*
       ((VALUE
         (CL:AREF
          (CL:THE CL:SIMPLE-VECTOR
           (%THE-ARRAY
            (%VARIABLE-BINDINGS
             (%CURRENT-PATTERN-RECORD *QUERYITERATOR*))))
          (CL:THE CL:FIXNUM (%BOUND-TO-OFFSET ARGUMENT)))))
       (CL:IF (CL:NOT (CL:EQ VALUE NULL))
        (ARGUMENT-MATCHES-LIST-HELPER? VALUE THE-LIST) CL:T))))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-UNIT-SUPPORT-LOGIC-SKOLEM)
     (CL:PROGN
      (CL:LET*
       ((PROP (%DEFINING-PROPOSITION ARGUMENT))
        (ARGS
         (CL:IF (CL:NOT (CL:EQ PROP NULL)) (%ARGUMENTS PROP) NULL))
        (LIST-LENGTH (LENGTH THE-LIST)))
       (CL:DECLARE (CL:TYPE CL:FIXNUM LIST-LENGTH))
       (CL:COND ((CL:EQ ARGS NULL) CL:NIL)
        ((CL:= (LENGTH ARGS) (CL:1+ LIST-LENGTH))
         (CL:LET*
          ((ITEM NULL) (ITER-000 (%THE-CONS-LIST THE-LIST))
           (I NULL-INTEGER) (ITER-001 0))
          (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-001))
          (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
           (CL:SETQ ITEM (%%VALUE ITER-000)) (CL:SETQ I ITER-001)
           (CL:WHEN
            (CL:NOT
             (EQL? ITEM
              (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY ARGS)) I)))
            (CL:RETURN-FROM ARGUMENT-MATCHES-LIST-HELPER? CL:NIL))
           (CL:SETQ ITER-000 (%%REST ITER-000))
           (CL:SETQ ITER-001 (CL:1+ ITER-001))))
         CL:T)
        (CL:T CL:NIL)))))
    (CL:T CL:NIL))))

;;; (DEFUN (INTEGER-TO-MEASURES-HELPER KEYWORD) ...)

(CL:DEFUN INTEGER-TO-MEASURES-HELPER (FRAME LASTMOVE CODE)
  (CL:DECLARE (CL:TYPE CL:FIXNUM CODE))
  #+MCL
  (CL:CHECK-TYPE CODE CL:FIXNUM)
  (CL:SETQ LASTMOVE LASTMOVE)
  (CL:LET*
   ((PROPOSITION (%PROPOSITION FRAME))
    (LISTARG
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
      1))
    (LISTARGVALUE (ARGUMENT-BOUND-TO LISTARG))
    (MEASURESLIST (NEW-LIST)))
   (CL:LET*
    ((M NULL) (ITER-000 (COMPUTE-MEASURES-FOR-INTEGER CODE))
     (COLLECT-000 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ M (%%VALUE ITER-000))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-000
        (CONS (LOOKUP *MEASURE-INSTANCE-TABLE* M) NIL))
       (CL:IF (CL:EQ (%THE-CONS-LIST MEASURESLIST) NIL)
        (CL:SETF (%THE-CONS-LIST MEASURESLIST) COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST (%THE-CONS-LIST MEASURESLIST)
         COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000)
        (CONS (LOOKUP *MEASURE-INSTANCE-TABLE* M) NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:COND
    ((CL:EQ LISTARGVALUE NULL)
     (SELECT-PROOF-RESULT
      (BIND-ARGUMENT-TO-VALUE? LISTARG
       (CREATE-LOGICAL-LIST MEASURESLIST) CL:T)
      CL:NIL CL:T))
    ((ARGUMENT-MATCHES-LIST-HELPER? LISTARG MEASURESLIST)
     (SET-FRAME-TRUTH-VALUE FRAME TRUE-TRUTH-VALUE)
     KWD-UNIT-SUPPORT-FINAL-SUCCESS)
    (CL:T (SET-FRAME-TRUTH-VALUE FRAME FALSE-TRUTH-VALUE)
     KWD-UNIT-SUPPORT-TERMINAL-FAILURE))))

;;; (DEFUN (U-BASE-MEASURES-SPECIALIST KEYWORD) ...)

(CL:DEFUN U-BASE-MEASURES-SPECIALIST (FRAME LASTMOVE)
  (CL:LET*
   ((PROPOSITION (%PROPOSITION FRAME))
    (MAINARG
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
      0))
    (MAINARGVALUE (ARGUMENT-BOUND-TO MAINARG)) (VALUE NULL-INTEGER))
   (CL:DECLARE (CL:TYPE CL:FIXNUM VALUE))
   (CL:IF (CL:EQ MAINARGVALUE NULL) KWD-UNIT-SUPPORT-FAILURE
    (CL:LET* ((TEST-VALUE-002 (SAFE-PRIMARY-TYPE MAINARGVALUE)))
     (CL:COND
      ((SUBTYPE-OF? TEST-VALUE-002
        SGT-UNIT-SUPPORT-UNIT-SUPPORT-DIM-NUMBER-LOGIC-WRAPPER)
       (CL:PROGN
        (CL:LET* ((TEST-VALUE-000 (%OPERATOR PROPOSITION)))
         (CL:COND
          ((CL:EQ TEST-VALUE-000
            SGT-UNIT-SUPPORT-UNIT-KB-NUMERATOR-MEASURES)
           (CL:SETQ VALUE
            (%NUMERATOR (%PID (%WRAPPER-VALUE MAINARGVALUE)))))
          ((CL:EQ TEST-VALUE-000
            SGT-UNIT-SUPPORT-UNIT-KB-DENOMINATOR-MEASURES)
           (CL:SETQ VALUE
            (%DENOMINATOR (%PID (%WRAPPER-VALUE MAINARGVALUE)))))
          (CL:T
           (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
            (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`"
             TEST-VALUE-000 "' is not a valid case option")
            (CL:ERROR
             (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
        (INTEGER-TO-MEASURES-HELPER FRAME LASTMOVE VALUE)))
      ((SUBTYPE-OF? TEST-VALUE-002 SGT-UNIT-SUPPORT-LOGIC-LOGIC-OBJECT)
       (CL:PROGN
        (CL:LET*
         ((MEASURE (LOOKUP *INSTANCE-MEASURE-TABLE* MAINARGVALUE)))
         (CL:WHEN (CL:NOT (CL:EQ MEASURE NULL))
          (CL:LET* ((TEST-VALUE-001 (%OPERATOR PROPOSITION)))
           (CL:COND
            ((CL:EQ TEST-VALUE-001
              SGT-UNIT-SUPPORT-UNIT-KB-NUMERATOR-MEASURES)
             (CL:SETQ VALUE (%NUMERATOR (%PRIME-ID MEASURE))))
            ((CL:EQ TEST-VALUE-001
              SGT-UNIT-SUPPORT-UNIT-KB-DENOMINATOR-MEASURES)
             (CL:SETQ VALUE (%DENOMINATOR (%PRIME-ID MEASURE))))
            (CL:T
             (CL:LET* ((STREAM-001 (NEW-OUTPUT-STRING-STREAM)))
              (%%PRINT-STREAM (%NATIVE-STREAM STREAM-001) "`"
               TEST-VALUE-001 "' is not a valid case option")
              (CL:ERROR
               (NEW-STELLA-EXCEPTION
                (THE-STRING-READER STREAM-001)))))))
          (CL:RETURN-FROM U-BASE-MEASURES-SPECIALIST
           (INTEGER-TO-MEASURES-HELPER FRAME LASTMOVE VALUE))))
        KWD-UNIT-SUPPORT-FAILURE))
      (CL:T KWD-UNIT-SUPPORT-FAILURE))))))

;;; (DEFUN (GET-OBJECT-PID RATIO) ...)

(CL:DEFUN GET-OBJECT-PID (OBJ)
  (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE OBJ)))
   (CL:COND
    ((SUBTYPE-OF? TEST-VALUE-000
      SGT-UNIT-SUPPORT-UNIT-SUPPORT-DIM-NUMBER-LOGIC-WRAPPER)
     (CL:PROGN (%PID (%WRAPPER-VALUE OBJ))))
    ((SUBTYPE-OF-STRING? TEST-VALUE-000)
     (CL:PROGN
      (CL:LET* ((STRING-VALUE (%WRAPPER-VALUE OBJ)))
       (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING STRING-VALUE))
       (CL:IF (CL:EQ STRING-VALUE STELLA::NULL-STRING) NULL
        (CL:LET* ((DUMMY NULL-FLOAT) (PID NULL))
         (CL:DECLARE (CL:TYPE CL:DOUBLE-FLOAT DUMMY))
         (CL:MULTIPLE-VALUE-SETQ (DUMMY PID)
          (UNIT-TO-SCALE-FACTOR-AND-ID STRING-VALUE))
         (CL:SETQ DUMMY DUMMY) PID)))))
    ((SUBTYPE-OF? TEST-VALUE-000
      SGT-UNIT-SUPPORT-STELLA-NUMBER-WRAPPER)
     (CL:PROGN *RATIO-ONE*))
    (CL:T NULL))))

;;; (DEFUN (COMENSURATE-UNITS-SPECIALIST KEYWORD) ...)

(CL:DEFUN COMENSURATE-UNITS-SPECIALIST (FRAME LASTMOVE)
  (CL:LET*
   ((PROPOSITION (%PROPOSITION FRAME))
    (ARG1
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
      0))
    (ARG1-VALUE (ARGUMENT-BOUND-TO ARG1))
    (ARG2
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
      1))
    (ARG2-VALUE (ARGUMENT-BOUND-TO ARG2)))
   (CL:SETQ LASTMOVE LASTMOVE)
   (CL:IF (CL:OR (CL:EQ ARG1-VALUE NULL) (CL:EQ ARG2-VALUE NULL))
    KWD-UNIT-SUPPORT-FAILURE
    (CL:HANDLER-CASE
     (CL:LET*
      ((ARG1-PID (GET-OBJECT-PID ARG1-VALUE))
       (ARG2-PID (GET-OBJECT-PID ARG2-VALUE)))
      (CL:IF
       (CL:AND (CL:NOT (CL:EQ ARG1-PID NULL))
        (CL:NOT (CL:EQ ARG2-PID NULL)))
       (CL:RETURN-FROM COMENSURATE-UNITS-SPECIALIST
        (SELECT-TEST-RESULT (OBJECT-EQL? ARG1-PID ARG2-PID) CL:T
         FRAME))
       (CL:RETURN-FROM COMENSURATE-UNITS-SPECIALIST
        KWD-UNIT-SUPPORT-FAILURE)))
     (BAD-ARGUMENT-EXCEPTION ()
      (SELECT-TEST-RESULT CL:NIL CL:T FRAME))))))

;;; (DEFGLOBAL *MEASURE-INSTANCE-TABLE* ...)

(CL:DEFVAR *MEASURE-INSTANCE-TABLE* NULL
  "Mapping table from measure objects to their PowerLoom representation.")

;;; (DEFGLOBAL *INSTANCE-MEASURE-TABLE* ...)

(CL:DEFVAR *INSTANCE-MEASURE-TABLE* NULL
  "Mapping table from PowerLoom representations of measures to measure objects")

;;; (DEFUN INITIALIZE-MEASURE-CONCEPTS ...)

(CL:DEFUN INITIALIZE-MEASURE-CONCEPTS ()
  (CL:LET*
   ((*CONTEXT* (GET-STELLA-CONTEXT "PL-KERNEL-KB" CL:T))
    (*MODULE* (%BASE-MODULE *CONTEXT*)))
   (CL:DECLARE (CL:SPECIAL *CONTEXT* *MODULE*))
   (CL:LET*
    ((I NULL) (MEASURE (PLI::GET-CONCEPT "/UNIT-KB/MEASURE" NULL NULL))
     (BASE-MEASURE
      (PLI::GET-CONCEPT "/UNIT-KB/BASE-MEASURE" NULL NULL))
     (UNIT-RELATION
      (PLI::GET-RELATION "/UNIT-KB/MEASURE-UNIT" NULL NULL))
     (MEASURE-NAME STELLA::NULL-STRING))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MEASURE-NAME))
    (CL:LET* ((M NULL) (ITER-000 *ALL-MEASURES*))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:SETQ M (%%VALUE ITER-000))
      (CL:SETQ MEASURE-NAME
       (CONCATENATE "/UNIT-KB/" (STRING-UPCASE (%NAME M)) "-MEASURE"))
      (CL:SETQ I (PLI::GET-CONCEPT MEASURE-NAME NULL NULL))
      (CL:WHEN (CL:EQ I NULL)
       (CL:SETQ I
        (PLI::CREATE-CONCEPT MEASURE-NAME MEASURE NULL NULL)))
      (PLI::ASSERT-UNARY-PROPOSITION MEASURE I NULL NULL)
      (CL:WHEN (MEMBER? *BASE-MEASURES* M)
       (PLI::ASSERT-UNARY-PROPOSITION BASE-MEASURE I NULL NULL))
      (INSERT-AT *MEASURE-INSTANCE-TABLE* M I)
      (INSERT-AT *INSTANCE-MEASURE-TABLE* I M)
      (CL:LET* ((U NULL) (ITER-001 (%THE-CONS-LIST (GET-UNITS M))))
       (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
        (CL:SETQ U (%%VALUE ITER-001))
        (PLI::ASSERT-BINARY-PROPOSITION UNIT-RELATION I U NULL NULL)
        (CL:SETQ ITER-001 (%%REST ITER-001))))
      (CL:SETQ ITER-000 (%%REST ITER-000)))))))

(CL:DEFUN STARTUP-UNIT-SUPPORT ()
  (CL:LET*
   ((*MODULE*
     (GET-STELLA-MODULE "/UNIT-SUPPORT" (> *STARTUP-TIME-PHASE* 1)))
    (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2)
    (CL:SETQ SGT-UNIT-SUPPORT-UNIT-SUPPORT-DIM-NUMBER-LOGIC-WRAPPER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DIM-NUMBER-LOGIC-WRAPPER" NULL
      1))
    (CL:SETQ SYM-UNIT-SUPPORT-STELLA-WRAPPER-VALUE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WRAPPER-VALUE"
      (GET-STELLA-MODULE "/STELLA" CL:T) 0))
    (CL:SETQ SGT-UNIT-SUPPORT-UNIT-KB-UNITS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "UNITS"
      (GET-STELLA-MODULE "/UNIT-KB" CL:T) 1))
    (CL:SETQ SGT-UNIT-SUPPORT-STELLA-CALENDAR-DATE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CALENDAR-DATE"
      (GET-STELLA-MODULE "/STELLA" CL:T) 1))
    (CL:SETQ SGT-UNIT-SUPPORT-STELLA-TIME-DURATION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "TIME-DURATION"
      (GET-STELLA-MODULE "/STELLA" CL:T) 1))
    (CL:SETQ SGT-UNIT-SUPPORT-LOGIC-SKOLEM
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SKOLEM"
      (GET-STELLA-MODULE "/LOGIC" CL:T) 1))
    (CL:SETQ SGT-UNIT-SUPPORT-TIMEPOINT-SUPPORT-DATE-TIME-LOGIC-WRAPPER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DATE-TIME-LOGIC-WRAPPER"
      (GET-STELLA-MODULE "/TIMEPOINT-SUPPORT" CL:T) 1))
    (CL:SETQ SGT-UNIT-SUPPORT-LOGIC-PATTERN-VARIABLE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PATTERN-VARIABLE"
      (GET-STELLA-MODULE "/LOGIC" CL:T) 1))
    (CL:SETQ SGT-UNIT-SUPPORT-STELLA-CS-VALUE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CS-VALUE"
      (GET-STELLA-MODULE "/STELLA" CL:T) 1))
    (CL:SETQ KWD-UNIT-SUPPORT-FINAL-SUCCESS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FINAL-SUCCESS" NULL 2))
    (CL:SETQ KWD-UNIT-SUPPORT-TERMINAL-FAILURE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "TERMINAL-FAILURE" NULL 2))
    (CL:SETQ KWD-UNIT-SUPPORT-FAILURE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FAILURE" NULL 2))
    (CL:SETQ SYM-UNIT-SUPPORT-STELLA-ITERATOR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "ITERATOR"
      (GET-STELLA-MODULE "/STELLA" CL:T) 0))
    (CL:SETQ KWD-UNIT-SUPPORT-CONTINUING-SUCCESS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTINUING-SUCCESS" NULL 2))
    (CL:SETQ SGT-UNIT-SUPPORT-STELLA-INTEGER-WRAPPER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "INTEGER-WRAPPER"
      (GET-STELLA-MODULE "/STELLA" CL:T) 1))
    (CL:SETQ SGT-UNIT-SUPPORT-UNIT-KB-NUMERATOR-MEASURES
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NUMERATOR-MEASURES"
      (GET-STELLA-MODULE "/UNIT-KB" CL:T) 1))
    (CL:SETQ SGT-UNIT-SUPPORT-UNIT-KB-DENOMINATOR-MEASURES
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DENOMINATOR-MEASURES"
      (GET-STELLA-MODULE "/UNIT-KB" CL:T) 1))
    (CL:SETQ SGT-UNIT-SUPPORT-LOGIC-LOGIC-OBJECT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "LOGIC-OBJECT"
      (GET-STELLA-MODULE "/LOGIC" CL:T) 1))
    (CL:SETQ SGT-UNIT-SUPPORT-STELLA-NUMBER-WRAPPER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NUMBER-WRAPPER"
      (GET-STELLA-MODULE "/STELLA" CL:T) 1))
    (CL:SETQ SYM-UNIT-SUPPORT-UNIT-SUPPORT-STARTUP-UNIT-SUPPORT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-UNIT-SUPPORT" NULL 0))
    (CL:SETQ SYM-UNIT-SUPPORT-STELLA-METHOD-STARTUP-CLASSNAME
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME"
      (GET-STELLA-MODULE "/STELLA" CL:T) 0)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 4)
    (CL:SETQ *DIM-NUMBER-HASH-TABLE* (NEW-STELLA-HASH-TABLE))
    (CL:SETQ *MEASURE-INSTANCE-TABLE* (NEW-HASH-TABLE))
    (CL:SETQ *INSTANCE-MEASURE-TABLE* (NEW-HASH-TABLE)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 5)
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "DIM-NUMBER-LOGIC-WRAPPER"
        "(DEFCLASS DIM-NUMBER-LOGIC-WRAPPER (QUANTITY-LOGIC-WRAPPER) :PUBLIC-SLOTS ((WRAPPER-VALUE :TYPE DIM-NUMBER :REQUIRED? TRUE)) :PRINT-FORM (IF *PRINTREADABLY?* (PRINT-NATIVE-STREAM STREAM (WRAPPER-VALUE SELF)) (PRINT-NATIVE-STREAM STREAM \"|uw|\" (WRAPPER-VALUE SELF))))")))
     (CL:SETF (%CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-DIM-NUMBER-LOGIC-WRAPPER))
     (CL:SETF (%CLASS-SLOT-ACCESSOR-CODE CLASS)
      (CL:FUNCTION ACCESS-DIM-NUMBER-LOGIC-WRAPPER-SLOT-VALUE))))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD (GENERATE-SPECIALIZED-TERM OBJECT) ((SELF DIM-NUMBER-LOGIC-WRAPPER)))"
     (CL:FUNCTION GENERATE-SPECIALIZED-TERM) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD (HASH-CODE INTEGER) ((SELF DIM-NUMBER-LOGIC-WRAPPER)))"
     (CL:FUNCTION HASH-CODE) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD (OBJECT-EQL? BOOLEAN) ((SELF DIM-NUMBER-LOGIC-WRAPPER) (X OBJECT)))"
     (CL:FUNCTION OBJECT-EQL?) NULL)
    (DEFINE-FUNCTION-OBJECT "WRAP-DIM-NUMBER"
     "(DEFUN (WRAP-DIM-NUMBER DIM-NUMBER-LOGIC-WRAPPER) ((VALUE DIM-NUMBER)) :PUBLIC? TRUE :DOCUMENTATION \"Return an interned LOGIC-WRAPPER for `value'.  This assures us
that all logic-wrapped DIM-NUMBERs are the same object.\")"
     (CL:FUNCTION WRAP-DIM-NUMBER) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD (GET-UNIT STRING) ((SELF DIM-NUMBER-LOGIC-WRAPPER)))"
     (CL:FUNCTION GET-UNIT) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD (GET-BASE-UNIT STRING) ((SELF DIM-NUMBER-LOGIC-WRAPPER)))"
     (CL:FUNCTION GET-BASE-UNIT) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD (GET-MAGNITUDE FLOAT) ((SELF DIM-NUMBER-LOGIC-WRAPPER) (UNITS STRING)))"
     (CL:FUNCTION GET-MAGNITUDE) NULL)
    (DEFINE-FUNCTION-OBJECT "HELP-GET-DIM-NUMBER"
     "(DEFUN (HELP-GET-DIM-NUMBER DIM-NUMBER-LOGIC-WRAPPER) ((ITEM OBJECT)))"
     (CL:FUNCTION HELP-GET-DIM-NUMBER) NULL)
    (DEFINE-FUNCTION-OBJECT "HELP-GET-UNIT-VALUE"
     "(DEFUN (HELP-GET-UNIT-VALUE DIM-NUMBER-LOGIC-WRAPPER) ((MAGNITUDE OBJECT) (UNITS OBJECT)))"
     (CL:FUNCTION HELP-GET-UNIT-VALUE) NULL)
    (DEFINE-FUNCTION-OBJECT "UNITS-EVALUATOR"
     "(DEFUN UNITS-EVALUATOR ((SELF PROPOSITION)))"
     (CL:FUNCTION UNITS-EVALUATOR) NULL)
    (DEFINE-FUNCTION-OBJECT "UNITS-SPECIALIST"
     "(DEFUN (UNITS-SPECIALIST KEYWORD) ((FRAME CONTROL-FRAME) (LASTMOVE KEYWORD)))"
     (CL:FUNCTION UNITS-SPECIALIST) NULL)
    (DEFINE-FUNCTION-OBJECT "U-PLUS-CONSTRAINT"
     "(DEFUN (U-PLUS-CONSTRAINT OBJECT) ((MISSING-ARGUMENT INTEGER-WRAPPER) (X1 DIM-NUMBER-LOGIC-WRAPPER) (X2 DIM-NUMBER-LOGIC-WRAPPER) (X3 DIM-NUMBER-LOGIC-WRAPPER)))"
     (CL:FUNCTION U-PLUS-CONSTRAINT) NULL)
    (DEFINE-FUNCTION-OBJECT "U-MINUS-CONSTRAINT"
     "(DEFUN (U-MINUS-CONSTRAINT OBJECT) ((MISSING-ARGUMENT INTEGER-WRAPPER) (X1 DIM-NUMBER-LOGIC-WRAPPER) (X2 DIM-NUMBER-LOGIC-WRAPPER) (X3 DIM-NUMBER-LOGIC-WRAPPER)))"
     (CL:FUNCTION U-MINUS-CONSTRAINT) NULL)
    (DEFINE-FUNCTION-OBJECT "U-TIMES-CONSTRAINT"
     "(DEFUN (U-TIMES-CONSTRAINT OBJECT) ((MISSING-ARGUMENT INTEGER-WRAPPER) (X1 DIM-NUMBER-LOGIC-WRAPPER) (X2 DIM-NUMBER-LOGIC-WRAPPER) (X3 DIM-NUMBER-LOGIC-WRAPPER)))"
     (CL:FUNCTION U-TIMES-CONSTRAINT) NULL)
    (DEFINE-FUNCTION-OBJECT "U-DIVIDE-CONSTRAINT"
     "(DEFUN (U-DIVIDE-CONSTRAINT OBJECT) ((MISSING-ARGUMENT INTEGER-WRAPPER) (X1 DIM-NUMBER-LOGIC-WRAPPER) (X2 DIM-NUMBER-LOGIC-WRAPPER) (X3 DIM-NUMBER-LOGIC-WRAPPER)))"
     (CL:FUNCTION U-DIVIDE-CONSTRAINT) NULL)
    (DEFINE-FUNCTION-OBJECT "U-ABS-SPECIALIST"
     "(DEFUN (U-ABS-SPECIALIST KEYWORD) ((FRAME CONTROL-FRAME) (LASTMOVE KEYWORD)))"
     (CL:FUNCTION U-ABS-SPECIALIST) NULL)
    (DEFINE-FUNCTION-OBJECT "U-SIGNUM-SPECIALIST"
     "(DEFUN (U-SIGNUM-SPECIALIST KEYWORD) ((FRAME CONTROL-FRAME) (LASTMOVE KEYWORD)))"
     (CL:FUNCTION U-SIGNUM-SPECIALIST) NULL)
    (DEFINE-FUNCTION-OBJECT "MINIMUM-OF-UNITS-SPECIALIST"
     "(DEFUN (MINIMUM-OF-UNITS-SPECIALIST KEYWORD) ((FRAME CONTROL-FRAME) (LASTMOVE KEYWORD)))"
     (CL:FUNCTION MINIMUM-OF-UNITS-SPECIALIST) NULL)
    (DEFINE-FUNCTION-OBJECT "MAXIMUM-OF-UNITS-SPECIALIST"
     "(DEFUN (MAXIMUM-OF-UNITS-SPECIALIST KEYWORD) ((FRAME CONTROL-FRAME) (LASTMOVE KEYWORD)))"
     (CL:FUNCTION MAXIMUM-OF-UNITS-SPECIALIST) NULL)
    (DEFINE-FUNCTION-OBJECT "SUM-OF-UNITS-SPECIALIST"
     "(DEFUN (SUM-OF-UNITS-SPECIALIST KEYWORD) ((FRAME CONTROL-FRAME) (LASTMOVE KEYWORD)))"
     (CL:FUNCTION SUM-OF-UNITS-SPECIALIST) NULL)
    (DEFINE-FUNCTION-OBJECT "U-VALUE-MEASURE-SPECIALIST"
     "(DEFUN (U-VALUE-MEASURE-SPECIALIST KEYWORD) ((FRAME CONTROL-FRAME) (LASTMOVE KEYWORD)))"
     (CL:FUNCTION U-VALUE-MEASURE-SPECIALIST) NULL)
    (DEFINE-FUNCTION-OBJECT "ARGUMENT-MATCHES-LIST-HELPER?"
     "(DEFUN (ARGUMENT-MATCHES-LIST-HELPER? BOOLEAN) ((ARGUMENT OBJECT) (THE-LIST LIST)))"
     (CL:FUNCTION ARGUMENT-MATCHES-LIST-HELPER?) NULL)
    (DEFINE-FUNCTION-OBJECT "INTEGER-TO-MEASURES-HELPER"
     "(DEFUN (INTEGER-TO-MEASURES-HELPER KEYWORD) ((FRAME CONTROL-FRAME) (LASTMOVE KEYWORD) (CODE INTEGER)))"
     (CL:FUNCTION INTEGER-TO-MEASURES-HELPER) NULL)
    (DEFINE-FUNCTION-OBJECT "U-BASE-MEASURES-SPECIALIST"
     "(DEFUN (U-BASE-MEASURES-SPECIALIST KEYWORD) ((FRAME CONTROL-FRAME) (LASTMOVE KEYWORD)))"
     (CL:FUNCTION U-BASE-MEASURES-SPECIALIST) NULL)
    (DEFINE-FUNCTION-OBJECT "GET-OBJECT-PID"
     "(DEFUN (GET-OBJECT-PID RATIO) ((OBJ OBJECT)))"
     (CL:FUNCTION GET-OBJECT-PID) NULL)
    (DEFINE-FUNCTION-OBJECT "COMENSURATE-UNITS-SPECIALIST"
     "(DEFUN (COMENSURATE-UNITS-SPECIALIST KEYWORD) ((FRAME CONTROL-FRAME) (LASTMOVE KEYWORD)))"
     (CL:FUNCTION COMENSURATE-UNITS-SPECIALIST) NULL)
    (DEFINE-FUNCTION-OBJECT "INITIALIZE-MEASURE-CONCEPTS"
     "(DEFUN INITIALIZE-MEASURE-CONCEPTS ())"
     (CL:FUNCTION INITIALIZE-MEASURE-CONCEPTS) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-UNIT-SUPPORT"
     "(DEFUN STARTUP-UNIT-SUPPORT () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-UNIT-SUPPORT) NULL)
    (CL:LET*
     ((FUNCTION
       (LOOKUP-FUNCTION
        SYM-UNIT-SUPPORT-UNIT-SUPPORT-STARTUP-UNIT-SUPPORT)))
     (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FUNCTION)
      SYM-UNIT-SUPPORT-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "_StartupUnitSupport") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *DIM-NUMBER-HASH-TABLE* (STELLA-HASH-TABLE OF DIM-NUMBER DIM-NUMBER-LOGIC-WRAPPER) (NEW STELLA-HASH-TABLE) :DOCUMENTATION \"Table for interning dim number logic wrappers\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *MEASURE-INSTANCE-TABLE* (HASH-TABLE OF MEASURE LOGIC-OBJECT) (NEW HASH-TABLE) :DOCUMENTATION \"Mapping table from measure objects to their PowerLoom representation.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *INSTANCE-MEASURE-TABLE* (HASH-TABLE OF LOGIC-OBJECT MEASURE) (NEW HASH-TABLE) :DOCUMENTATION \"Mapping table from PowerLoom representations of measures to measure objects\")"))))
