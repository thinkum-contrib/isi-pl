;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; timepoint-support.slisp

#|
 +---------------------------- BEGIN LICENSE BLOCK ---------------------------+
 |                                                                            |
 | Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
 |                                                                            |
 | The contents of this file are subject to the Mozilla Public License        |
 | Version 1.1 (the "License"); you may not use this file except in           |
 | compliance with the License. You may obtain a copy of the License at       |
 | http://www.mozilla.org/MPL/                                                |
 |                                                                            |
 | Software distributed under the License is distributed on an "AS IS" basis, |
 | WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
 | for the specific language governing rights and limitations under the       |
 | License.                                                                   |
 |                                                                            |
 | The Original Code is the PowerLoom KR&R System.                            |
 |                                                                            |
 | The Initial Developer of the Original Code is                              |
 | UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
 | 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
 |                                                                            |
 | Portions created by the Initial Developer are Copyright (C) 1997-2012      |
 | the Initial Developer. All Rights Reserved.                                |
 |                                                                            |
 | Contributor(s):                                                            |
 |                                                                            |
 | Alternatively, the contents of this file may be used under the terms of    |
 | either the GNU General Public License Version 2 or later (the "GPL"), or   |
 | the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
 | in which case the provisions of the GPL or the LGPL are applicable instead |
 | of those above. If you wish to allow use of your version of this file only |
 | under the terms of either the GPL or the LGPL, and not to allow others to  |
 | use your version of this file under the terms of the MPL, indicate your    |
 | decision by deleting the provisions above and replace them with the notice |
 | and other provisions required by the GPL or the LGPL. If you do not delete |
 | the provisions above, a recipient may use your version of this file under  |
 | the terms of any one of the MPL, the GPL or the LGPL.                      |
 |                                                                            |
 +----------------------------- END LICENSE BLOCK ----------------------------+
|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SGT-TIMEPOINT-SUPPORT-TIMEPOINT-SUPPORT-DATE-TIME-LOGIC-WRAPPER NULL)
(CL:DEFVAR SYM-TIMEPOINT-SUPPORT-STELLA-WRAPPER-VALUE NULL)
(CL:DEFVAR SGT-TIMEPOINT-SUPPORT-TIMEPOINT-KB-TIMEPOINT-OF NULL)
(CL:DEFVAR SGT-TIMEPOINT-SUPPORT-TIMEPOINT-KB-DURATION-OF NULL)
(CL:DEFVAR SGT-TIMEPOINT-SUPPORT-STELLA-CALENDAR-DATE NULL)
(CL:DEFVAR SGT-TIMEPOINT-SUPPORT-STELLA-TIME-DURATION NULL)
(CL:DEFVAR SGT-TIMEPOINT-SUPPORT-LOGIC-SKOLEM NULL)
(CL:DEFVAR SGT-TIMEPOINT-SUPPORT-LOGIC-PATTERN-VARIABLE NULL)
(CL:DEFVAR SGT-TIMEPOINT-SUPPORT-UNIT-SUPPORT-DIM-NUMBER-LOGIC-WRAPPER NULL)
(CL:DEFVAR SGT-TIMEPOINT-SUPPORT-STELLA-CS-VALUE NULL)
(CL:DEFVAR SYM-TIMEPOINT-SUPPORT-TIMEPOINT-SUPPORT-TIMEPOINT-OF*-COMPUTATION NULL)
(CL:DEFVAR KWD-TIMEPOINT-SUPPORT-FAILURE NULL)
(CL:DEFVAR KWD-TIMEPOINT-SUPPORT-TERMINAL-FAILURE NULL)
(CL:DEFVAR KWD-TIMEPOINT-SUPPORT-MONDAY NULL)
(CL:DEFVAR SGT-TIMEPOINT-SUPPORT-TIMEPOINT-KB-MONDAY NULL)
(CL:DEFVAR KWD-TIMEPOINT-SUPPORT-TUESDAY NULL)
(CL:DEFVAR SGT-TIMEPOINT-SUPPORT-TIMEPOINT-KB-TUESDAY NULL)
(CL:DEFVAR KWD-TIMEPOINT-SUPPORT-WEDNESDAY NULL)
(CL:DEFVAR SGT-TIMEPOINT-SUPPORT-TIMEPOINT-KB-WEDNESDAY NULL)
(CL:DEFVAR KWD-TIMEPOINT-SUPPORT-THURSDAY NULL)
(CL:DEFVAR SGT-TIMEPOINT-SUPPORT-TIMEPOINT-KB-THURSDAY NULL)
(CL:DEFVAR KWD-TIMEPOINT-SUPPORT-FRIDAY NULL)
(CL:DEFVAR SGT-TIMEPOINT-SUPPORT-TIMEPOINT-KB-FRIDAY NULL)
(CL:DEFVAR KWD-TIMEPOINT-SUPPORT-SATURDAY NULL)
(CL:DEFVAR SGT-TIMEPOINT-SUPPORT-TIMEPOINT-KB-SATURDAY NULL)
(CL:DEFVAR KWD-TIMEPOINT-SUPPORT-SUNDAY NULL)
(CL:DEFVAR SGT-TIMEPOINT-SUPPORT-TIMEPOINT-KB-SUNDAY NULL)
(CL:DEFVAR SYM-TIMEPOINT-SUPPORT-TIMEPOINT-SUPPORT-STARTUP-TIMEPOINT-SUPPORT NULL)
(CL:DEFVAR SYM-TIMEPOINT-SUPPORT-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STARTUP-TIME-PHASE* *MODULE* *ZONE-STRINGS* TRUE-WRAPPER
  FALSE-WRAPPER NULL-FLOAT NULL-INTEGER NIL *PRINTREADABLY?*))

;;; (DEFGLOBAL *DATE-TIME-HASH-TABLE* ...)

(CL:DEFVAR *DATE-TIME-HASH-TABLE* NULL
  "Table for interning date-time logic wrappers")

(CL:DEFUN NEW-DATE-TIME-LOGIC-WRAPPER (WRAPPER-VALUE)
  (CL:LET* ((SELF NULL)) (CL:SETQ SELF (%MAKE-DATE-TIME-LOGIC-WRAPPER))
   (CL:SETF (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE SELF) WRAPPER-VALUE)
   (CL:SETF (%DATE-TIME-LOGIC-WRAPPER.DYNAMIC-SLOTS SELF)
    (NEW-KEY-VALUE-LIST))
   (CL:SETF (%DATE-TIME-LOGIC-WRAPPER.SURROGATE-VALUE-INVERSE SELF) NULL)
   (CL:SETF (%DATE-TIME-LOGIC-WRAPPER.FUNCTION-TERM SELF) NULL) SELF))

(CL:DEFMETHOD PRIMARY-TYPE ((SELF DATE-TIME-LOGIC-WRAPPER))
  SGT-TIMEPOINT-SUPPORT-TIMEPOINT-SUPPORT-DATE-TIME-LOGIC-WRAPPER)

(CL:DEFUN ACCESS-DATE-TIME-LOGIC-WRAPPER-SLOT-VALUE (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-TIMEPOINT-SUPPORT-STELLA-WRAPPER-VALUE)
    (CL:IF SETVALUE?
     (CL:SETF (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE SELF) VALUE)
     (CL:SETQ VALUE (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE SELF))))
   (CL:T
    (CL:IF SETVALUE?
     (SET-DYNAMIC-SLOT-VALUE (%DATE-TIME-LOGIC-WRAPPER.DYNAMIC-SLOTS SELF)
      SLOTNAME VALUE NULL)
     (CL:SETQ VALUE
      (LOOKUP (%DATE-TIME-LOGIC-WRAPPER.DYNAMIC-SLOTS SELF) SLOTNAME)))))
  VALUE)

(CL:DEFMETHOD PRINT-OBJECT ((SELF DATE-TIME-LOGIC-WRAPPER) STREAM)
  (CL:IF *PRINTREADABLY?*
   (%%PRINT-STREAM STREAM (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE SELF))
   (%%PRINT-STREAM STREAM "|tw|"
    (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE SELF))))

;;; (DEFMETHOD (GENERATE-SPECIALIZED-TERM OBJECT) ...)

(CL:DEFMETHOD GENERATE-SPECIALIZED-TERM ((SELF DATE-TIME-LOGIC-WRAPPER))
  (CL:LET*
   ((TERM (%DATE-TIME-LOGIC-WRAPPER.FUNCTION-TERM SELF))
    (DATETIME (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE SELF)))
   (CL:COND ((CL:NOT (CL:EQ TERM NULL)) TERM)
    ((CL:NOT (CL:EQ DATETIME NULL))
     (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE DATETIME)))
      (CL:COND
       ((SUBTYPE-OF? TEST-VALUE-000
         SGT-TIMEPOINT-SUPPORT-STELLA-CALENDAR-DATE)
        (CL:PROGN
         (CL:SETQ TERM
          (CONS
           (GENERATE-TERM SGT-TIMEPOINT-SUPPORT-TIMEPOINT-KB-TIMEPOINT-OF)
           (CONS
            (WRAP-STRING (CALENDAR-DATE-TO-STRING DATETIME 0.0d0 CL:NIL CL:T))
            NIL)))))
       ((SUBTYPE-OF? TEST-VALUE-000
         SGT-TIMEPOINT-SUPPORT-STELLA-TIME-DURATION)
        (CL:PROGN
         (CL:SETQ TERM
          (CONS (GENERATE-TERM SGT-TIMEPOINT-SUPPORT-TIMEPOINT-KB-DURATION-OF)
           (CONS (WRAP-STRING (TIME-DURATION-TO-STRING DATETIME)) NIL)))))
       (CL:T
        (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
         (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
          TEST-VALUE-000 "' is not a valid case option")
         (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
     (CL:SETF (%DATE-TIME-LOGIC-WRAPPER.FUNCTION-TERM SELF) TERM) TERM)
    (CL:T
     (CL:ERROR
      (NEW-TERM-GENERATION-EXCEPTION SELF
       "Date Time Number Wrapper doesn't have a value."))))))

;;; (DEFMETHOD (HASH-CODE INTEGER) ...)

(CL:DEFMETHOD HASH-CODE ((SELF DATE-TIME-LOGIC-WRAPPER))
  (CL:IF (CL:NOT (CL:EQ (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE SELF) NULL))
   (HASH-CODE (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE SELF)) 0))

;;; (DEFMETHOD (OBJECT-EQL? BOOLEAN) ...)

(CL:DEFMETHOD OBJECT-EQL? ((SELF DATE-TIME-LOGIC-WRAPPER) X)
  (CL:COND
   ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE X)
     SGT-TIMEPOINT-SUPPORT-TIMEPOINT-SUPPORT-DATE-TIME-LOGIC-WRAPPER)
    (CL:PROGN
     (OBJECT-EQL? (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE SELF)
      (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE X))))
   (CL:T CL:NIL)))

;;; (DEFUN (WRAP-DATE-TIME DATE-TIME-LOGIC-WRAPPER) ...)

(CL:DEFUN WRAP-DATE-TIME (VALUE)
  "Return an interned LOGIC-WRAPPER for `value'.  This assures us
that all logic-wrapped DATE-TIME-OBJECTs are the same object."
  (CL:LET* ((WRAPPER (LOOKUP *DATE-TIME-HASH-TABLE* VALUE)))
   (CL:WHEN (CL:EQ WRAPPER NULL)
    (CL:SETQ WRAPPER (NEW-DATE-TIME-LOGIC-WRAPPER VALUE))
    (INSERT-AT *DATE-TIME-HASH-TABLE* VALUE WRAPPER))
   WRAPPER))

;;; (DEFUN (HELP-GET-CALENDAR-TIME DATE-TIME-LOGIC-WRAPPER) ...)

(CL:DEFUN HELP-GET-CALENDAR-TIME (ITEM)
  (CL:LET* ((TEST-VALUE-001 (SAFE-PRIMARY-TYPE ITEM)))
   (CL:COND
    ((SUBTYPE-OF-STRING? TEST-VALUE-001)
     (CL:PROGN
      (CL:LET*
       ((VALUE
         (STRING-TO-CALENDAR-DATE (%STRING-WRAPPER.WRAPPER-VALUE ITEM))))
       (CL:IF (CL:NOT (CL:EQ VALUE NULL)) (WRAP-DATE-TIME VALUE) NULL))))
    ((SUBTYPE-OF? TEST-VALUE-001 SGT-TIMEPOINT-SUPPORT-LOGIC-PATTERN-VARIABLE)
     (CL:PROGN
      (CL:LET* ((VALUE (SAFE-BOUND-TO ITEM)))
       (CL:IF (CL:NOT (CL:EQ VALUE NULL)) (HELP-GET-CALENDAR-TIME VALUE)
        NULL))))
    ((SUBTYPE-OF? TEST-VALUE-001
      SGT-TIMEPOINT-SUPPORT-TIMEPOINT-SUPPORT-DATE-TIME-LOGIC-WRAPPER)
     (CL:PROGN ITEM))
    ((SUBTYPE-OF? TEST-VALUE-001 SGT-TIMEPOINT-SUPPORT-LOGIC-SKOLEM)
     (CL:PROGN
      (CL:LET*
       ((VALUE
         (ACCESS-IN-CONTEXT (%SKOLEM.VARIABLE-VALUE ITEM)
          (%SKOLEM.HOME-CONTEXT ITEM) CL:NIL)))
       (CL:WHEN (CL:EQ VALUE NULL)
        (CL:RETURN-FROM HELP-GET-CALENDAR-TIME NULL))
       (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE VALUE)))
        (CL:COND
         ((SUBTYPE-OF? TEST-VALUE-000
           SGT-TIMEPOINT-SUPPORT-TIMEPOINT-SUPPORT-DATE-TIME-LOGIC-WRAPPER)
          (CL:PROGN VALUE))
         ((SUBTYPE-OF? TEST-VALUE-000 SGT-TIMEPOINT-SUPPORT-LOGIC-SKOLEM)
          (CL:PROGN
           (CL:IF
            (ISA?
             (ACCESS-IN-CONTEXT (%SKOLEM.VARIABLE-VALUE VALUE)
              (%SKOLEM.HOME-CONTEXT VALUE) CL:NIL)
             SGT-TIMEPOINT-SUPPORT-LOGIC-SKOLEM)
            NULL
            (HELP-GET-CALENDAR-TIME
             (ACCESS-IN-CONTEXT (%SKOLEM.VARIABLE-VALUE VALUE)
              (%SKOLEM.HOME-CONTEXT VALUE) CL:NIL)))))
         (CL:T
          (CL:IF
           (ISA?
            (ACCESS-IN-CONTEXT (%SKOLEM.VARIABLE-VALUE ITEM)
             (%SKOLEM.HOME-CONTEXT ITEM) CL:NIL)
            SGT-TIMEPOINT-SUPPORT-LOGIC-SKOLEM)
           NULL
           (HELP-GET-CALENDAR-TIME
            (ACCESS-IN-CONTEXT (%SKOLEM.VARIABLE-VALUE ITEM)
             (%SKOLEM.HOME-CONTEXT ITEM) CL:NIL)))))))))
    (CL:T NULL))))

;;; (DEFUN (HELP-GET-TIME-DURATION DATE-TIME-LOGIC-WRAPPER) ...)

(CL:DEFUN HELP-GET-TIME-DURATION (ITEM)
  (CL:LET* ((TEST-VALUE-001 (SAFE-PRIMARY-TYPE ITEM)))
   (CL:COND
    ((SUBTYPE-OF-STRING? TEST-VALUE-001)
     (CL:PROGN
      (CL:LET*
       ((VALUE
         (STRING-TO-TIME-DURATION (%STRING-WRAPPER.WRAPPER-VALUE ITEM))))
       (CL:IF (CL:NOT (CL:EQ VALUE NULL)) (WRAP-DATE-TIME VALUE) NULL))))
    ((SUBTYPE-OF? TEST-VALUE-001 SGT-TIMEPOINT-SUPPORT-LOGIC-PATTERN-VARIABLE)
     (CL:PROGN
      (CL:LET* ((VALUE (SAFE-BOUND-TO ITEM)))
       (CL:IF (CL:NOT (CL:EQ VALUE NULL)) (HELP-GET-TIME-DURATION VALUE)
        NULL))))
    ((SUBTYPE-OF? TEST-VALUE-001
      SGT-TIMEPOINT-SUPPORT-TIMEPOINT-SUPPORT-DATE-TIME-LOGIC-WRAPPER)
     (CL:PROGN ITEM))
    ((SUBTYPE-OF? TEST-VALUE-001
      SGT-TIMEPOINT-SUPPORT-UNIT-SUPPORT-DIM-NUMBER-LOGIC-WRAPPER)
     (CL:PROGN
      (CL:HANDLER-CASE
       (CL:RETURN-FROM HELP-GET-TIME-DURATION
        (WRAP-DATE-TIME
         (DIM-TO-TIME-DURATION
          (%DIM-NUMBER-LOGIC-WRAPPER.WRAPPER-VALUE ITEM))))
       (INCOMPATIBLE-UNITS-EXCEPTION () NULL))))
    ((SUBTYPE-OF? TEST-VALUE-001 SGT-TIMEPOINT-SUPPORT-LOGIC-SKOLEM)
     (CL:PROGN
      (CL:LET*
       ((VALUE
         (ACCESS-IN-CONTEXT (%SKOLEM.VARIABLE-VALUE ITEM)
          (%SKOLEM.HOME-CONTEXT ITEM) CL:NIL)))
       (CL:WHEN (CL:EQ VALUE NULL)
        (CL:RETURN-FROM HELP-GET-TIME-DURATION NULL))
       (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE VALUE)))
        (CL:COND
         ((SUBTYPE-OF? TEST-VALUE-000
           SGT-TIMEPOINT-SUPPORT-TIMEPOINT-SUPPORT-DATE-TIME-LOGIC-WRAPPER)
          (CL:PROGN VALUE))
         ((SUBTYPE-OF? TEST-VALUE-000 SGT-TIMEPOINT-SUPPORT-LOGIC-SKOLEM)
          (CL:PROGN
           (CL:IF
            (ISA?
             (ACCESS-IN-CONTEXT (%SKOLEM.VARIABLE-VALUE VALUE)
              (%SKOLEM.HOME-CONTEXT VALUE) CL:NIL)
             SGT-TIMEPOINT-SUPPORT-LOGIC-SKOLEM)
            NULL
            (HELP-GET-TIME-DURATION
             (ACCESS-IN-CONTEXT (%SKOLEM.VARIABLE-VALUE VALUE)
              (%SKOLEM.HOME-CONTEXT VALUE) CL:NIL)))))
         (CL:T
          (CL:IF
           (ISA?
            (ACCESS-IN-CONTEXT (%SKOLEM.VARIABLE-VALUE ITEM)
             (%SKOLEM.HOME-CONTEXT ITEM) CL:NIL)
            SGT-TIMEPOINT-SUPPORT-LOGIC-SKOLEM)
           NULL
           (HELP-GET-TIME-DURATION
            (ACCESS-IN-CONTEXT (%SKOLEM.VARIABLE-VALUE ITEM)
             (%SKOLEM.HOME-CONTEXT ITEM) CL:NIL)))))))))
    (CL:T NULL))))

;;; (DEFUN (HELP-GET-TIME-OBJECT DATE-TIME-LOGIC-WRAPPER) ...)

(CL:DEFUN HELP-GET-TIME-OBJECT (ITEM)
  (CL:LET* ((TEST-VALUE-001 (SAFE-PRIMARY-TYPE ITEM)))
   (CL:COND
    ((SUBTYPE-OF-STRING? TEST-VALUE-001)
     (CL:PROGN
      (CL:LET*
       ((VALUE
         (STRING-TO-CALENDAR-DATE (%STRING-WRAPPER.WRAPPER-VALUE ITEM))))
       (CL:WHEN (CL:EQ VALUE NULL)
        (CL:SETQ VALUE
         (STRING-TO-TIME-DURATION (%STRING-WRAPPER.WRAPPER-VALUE ITEM))))
       (CL:IF (CL:NOT (CL:EQ VALUE NULL)) (WRAP-DATE-TIME VALUE) NULL))))
    ((SUBTYPE-OF? TEST-VALUE-001 SGT-TIMEPOINT-SUPPORT-LOGIC-PATTERN-VARIABLE)
     (CL:PROGN
      (CL:LET* ((VALUE (SAFE-BOUND-TO ITEM)))
       (CL:IF (CL:NOT (CL:EQ VALUE NULL)) (HELP-GET-TIME-OBJECT VALUE)
        NULL))))
    ((SUBTYPE-OF? TEST-VALUE-001
      SGT-TIMEPOINT-SUPPORT-TIMEPOINT-SUPPORT-DATE-TIME-LOGIC-WRAPPER)
     (CL:PROGN ITEM))
    ((SUBTYPE-OF? TEST-VALUE-001
      SGT-TIMEPOINT-SUPPORT-UNIT-SUPPORT-DIM-NUMBER-LOGIC-WRAPPER)
     (CL:PROGN
      (CL:HANDLER-CASE
       (CL:RETURN-FROM HELP-GET-TIME-OBJECT
        (WRAP-DATE-TIME
         (DIM-TO-TIME-DURATION
          (%DIM-NUMBER-LOGIC-WRAPPER.WRAPPER-VALUE ITEM))))
       (INCOMPATIBLE-UNITS-EXCEPTION () NULL))))
    ((SUBTYPE-OF? TEST-VALUE-001 SGT-TIMEPOINT-SUPPORT-LOGIC-SKOLEM)
     (CL:PROGN
      (CL:LET*
       ((VALUE
         (ACCESS-IN-CONTEXT (%SKOLEM.VARIABLE-VALUE ITEM)
          (%SKOLEM.HOME-CONTEXT ITEM) CL:NIL)))
       (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE VALUE)))
        (CL:COND
         ((SUBTYPE-OF? TEST-VALUE-000
           SGT-TIMEPOINT-SUPPORT-TIMEPOINT-SUPPORT-DATE-TIME-LOGIC-WRAPPER)
          (CL:PROGN VALUE))
         ((SUBTYPE-OF? TEST-VALUE-000 SGT-TIMEPOINT-SUPPORT-LOGIC-SKOLEM)
          (CL:PROGN
           (CL:IF
            (ISA?
             (ACCESS-IN-CONTEXT (%SKOLEM.VARIABLE-VALUE VALUE)
              (%SKOLEM.HOME-CONTEXT VALUE) CL:NIL)
             SGT-TIMEPOINT-SUPPORT-LOGIC-SKOLEM)
            NULL
            (HELP-GET-TIME-OBJECT
             (ACCESS-IN-CONTEXT (%SKOLEM.VARIABLE-VALUE VALUE)
              (%SKOLEM.HOME-CONTEXT VALUE) CL:NIL)))))
         (CL:T
          (CL:IF
           (ISA?
            (ACCESS-IN-CONTEXT (%SKOLEM.VARIABLE-VALUE ITEM)
             (%SKOLEM.HOME-CONTEXT ITEM) CL:NIL)
            SGT-TIMEPOINT-SUPPORT-LOGIC-SKOLEM)
           NULL
           (HELP-GET-TIME-OBJECT
            (ACCESS-IN-CONTEXT (%SKOLEM.VARIABLE-VALUE ITEM)
             (%SKOLEM.HOME-CONTEXT ITEM) CL:NIL)))))))))
    (CL:T NULL))))

;;; (DEFUN (HELP-GET-INTEGER INTEGER) ...)

(CL:DECLAIM (CL:FTYPE (CL:FUNCTION (CL:T) CL:FIXNUM) HELP-GET-INTEGER))
(CL:DEFUN HELP-GET-INTEGER (OBJ)
  (CL:IF (CL:EQ OBJ NULL) NULL-INTEGER
   (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE OBJ)))
    (CL:COND
     ((SUBTYPE-OF-FLOAT? TEST-VALUE-000)
      (CL:PROGN
       (CL:IF (INTEGER-VALUED? (%FLOAT-WRAPPER.WRAPPER-VALUE OBJ))
        (FLOOR (%FLOAT-WRAPPER.WRAPPER-VALUE OBJ)) NULL-INTEGER)))
     ((SUBTYPE-OF-INTEGER? TEST-VALUE-000)
      (CL:PROGN (%INTEGER-WRAPPER.WRAPPER-VALUE OBJ)))
     (CL:T NULL-INTEGER)))))

;;; (DEFUN (HELP-GET-FLOAT FLOAT) ...)

(CL:DECLAIM (CL:FTYPE (CL:FUNCTION (CL:T) CL:DOUBLE-FLOAT) HELP-GET-FLOAT))
(CL:DEFUN HELP-GET-FLOAT (OBJ)
  (CL:IF (CL:EQ OBJ NULL) NULL-FLOAT
   (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE OBJ)))
    (CL:COND
     ((SUBTYPE-OF-FLOAT? TEST-VALUE-000)
      (CL:PROGN (%FLOAT-WRAPPER.WRAPPER-VALUE OBJ)))
     ((SUBTYPE-OF-INTEGER? TEST-VALUE-000)
      (CL:PROGN (CL:FLOAT (%INTEGER-WRAPPER.WRAPPER-VALUE OBJ) 0.0d0)))
     (CL:T NULL-FLOAT)))))

;;; (DEFUN (HELP-GET-TIMEZONE FLOAT) ...)

(CL:DECLAIM (CL:FTYPE (CL:FUNCTION (CL:T) CL:DOUBLE-FLOAT) HELP-GET-TIMEZONE))
(CL:DEFUN HELP-GET-TIMEZONE (OBJ)
  (CL:IF (CL:EQ OBJ NULL) NULL-FLOAT
   (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE OBJ)))
    (CL:COND
     ((SUBTYPE-OF-FLOAT? TEST-VALUE-000)
      (CL:PROGN (%FLOAT-WRAPPER.WRAPPER-VALUE OBJ)))
     ((SUBTYPE-OF-INTEGER? TEST-VALUE-000)
      (CL:PROGN (CL:FLOAT (%INTEGER-WRAPPER.WRAPPER-VALUE OBJ) 0.0d0)))
     ((SUBTYPE-OF-STRING? TEST-VALUE-000)
      (CL:PROGN
       (CL:LET*
        ((DECODED-ZONE
          (ZONE
           (WRAP-STRING
            (STRING-DOWNCASE (%STRING-WRAPPER.WRAPPER-VALUE OBJ))))))
        (CL:IF (CL:NOT (CL:EQ DECODED-ZONE NULL))
         (%FLOAT-WRAPPER.WRAPPER-VALUE DECODED-ZONE) NULL-FLOAT))))
     (CL:T NULL-FLOAT)))))

;;; (DEFUN (CAN-BIND-ALL? BOOLEAN) ...)

(CL:DEFUN CAN-BIND-ALL? (PL-OBJECTS VALUES)
  (CL:LET* ((OBJ NULL) (ITER-000 PL-OBJECTS) (VALUE NULL) (ITER-001 VALUES))
   (CL:LOOP WHILE
    (CL:AND (CL:NOT (CL:EQ ITER-000 NIL)) (CL:NOT (CL:EQ ITER-001 NIL))) DO
    (CL:SETQ OBJ (%%VALUE ITER-000)) (CL:SETQ VALUE (%%VALUE ITER-001))
    (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE OBJ)))
     (CL:COND
      ((SUBTYPE-OF? TEST-VALUE-000
        SGT-TIMEPOINT-SUPPORT-LOGIC-PATTERN-VARIABLE)
       (CL:PROGN
        (CL:WHEN (CL:NOT (BIND-VARIABLE-TO-VALUE? OBJ VALUE CL:T))
         (CL:RETURN-FROM CAN-BIND-ALL? CL:NIL))))
      ((SUBTYPE-OF? TEST-VALUE-000 SGT-TIMEPOINT-SUPPORT-LOGIC-SKOLEM)
       (CL:PROGN
        (CL:LET*
         ((OBJECT-000 OBJ) (VALUE-000 VALUE)
          (OLD-VALUE-000 (%SKOLEM.VARIABLE-VALUE OBJECT-000))
          (NEW-VALUE-000
           (UPDATE-IN-CONTEXT OLD-VALUE-000 VALUE-000
            (%SKOLEM.HOME-CONTEXT OBJECT-000) CL:NIL)))
         (CL:WHEN
          (CL:NOT
           (CL:AND (CL:NOT (CL:EQ OLD-VALUE-000 NULL))
            (CL:EQ (PRIMARY-TYPE OLD-VALUE-000)
             SGT-TIMEPOINT-SUPPORT-STELLA-CS-VALUE)))
          (CL:SETF (%SKOLEM.VARIABLE-VALUE OBJECT-000) NEW-VALUE-000)))))
      (CL:T
       (CL:WHEN (CL:NOT (OBJECT-EQL? OBJ VALUE))
        (CL:RETURN-FROM CAN-BIND-ALL? CL:NIL)))))
    (CL:SETQ ITER-000 (%%REST ITER-000)) (CL:SETQ ITER-001 (%%REST ITER-001))))
  CL:T)

;;; (DEFUN (TIMEPOINT-OF-CONSTRAINT OBJECT) ...)

(CL:DEFUN TIMEPOINT-OF-CONSTRAINT (MISSING-ARGUMENT X1 X2)
  (CL:LET* ((VALUE NULL))
   (CL:CASE (%INTEGER-WRAPPER.WRAPPER-VALUE MISSING-ARGUMENT)
    (-1
     (CL:SETQ VALUE
      (CL:IF
       (OBJECT-EQL?
        (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE (HELP-GET-CALENDAR-TIME X1))
        (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE X2))
       TRUE-WRAPPER FALSE-WRAPPER)))
    (0
     (CL:LET* ((TIMEPOINTWRAPPER (HELP-GET-CALENDAR-TIME X2)))
      (CL:SETQ VALUE
       (WRAP-STRING
        (CALENDAR-DATE-TO-STRING
         (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE TIMEPOINTWRAPPER) 0.0d0
         CL:NIL CL:T)))))
    (1
     (CL:LET* ((TIMEPOINTSPECVALUE (VALUE-OF X1)))
      (CL:IF (CL:EQ TIMEPOINTSPECVALUE NULL) (CL:SETQ VALUE NULL)
       (CL:SETQ VALUE (HELP-GET-CALENDAR-TIME TIMEPOINTSPECVALUE)))))
    (CL:OTHERWISE))
   VALUE))

;;; (DEFUN (TIMEPOINT-OF*-COMPUTATION DATE-TIME-LOGIC-WRAPPER) ...)

(CL:DEFUN TIMEPOINT-OF*-COMPUTATION (YY MM DD HR MIN SEC TZ)
  (CL:LET*
   ((YY-VALUE (VALUE-OF YY)) (MM-VALUE (VALUE-OF MM)) (DD-VALUE (VALUE-OF DD))
    (HR-VALUE (VALUE-OF HR)) (MIN-VALUE (VALUE-OF MIN))
    (SEC-VALUE (VALUE-OF SEC)) (TZ-VALUE (VALUE-OF TZ))
    (YEAR (HELP-GET-INTEGER YY-VALUE)) (MONTH (HELP-GET-INTEGER MM-VALUE))
    (DAY (HELP-GET-INTEGER DD-VALUE)) (HOUR (HELP-GET-INTEGER HR-VALUE))
    (MINUTE (HELP-GET-INTEGER MIN-VALUE))
    (SECOND-FLOAT (HELP-GET-FLOAT SEC-VALUE))
    (ZONE (HELP-GET-TIMEZONE TZ-VALUE)) (SECOND 0) (TP NULL))
   (CL:DECLARE (CL:TYPE CL:FIXNUM YEAR MONTH DAY HOUR MINUTE SECOND)
    (CL:TYPE CL:DOUBLE-FLOAT SECOND-FLOAT ZONE))
   (CL:WHEN
    (CL:AND (CL:NOT (CL:= YEAR NULL-INTEGER))
     (CL:NOT (CL:= MONTH NULL-INTEGER)) (CL:NOT (CL:= DAY NULL-INTEGER))
     (CL:NOT (CL:= HOUR NULL-INTEGER)) (CL:NOT (CL:= MINUTE NULL-INTEGER))
     (CL:NOT (CL:= SECOND-FLOAT NULL-FLOAT)) (CL:NOT (CL:= ZONE NULL-FLOAT)))
    (CL:SETQ SECOND (FLOOR SECOND-FLOAT))
    (CL:SETQ TP
     (WRAP-DATE-TIME
      (MAKE-DATE-TIME YEAR MONTH DAY HOUR MINUTE SECOND
       (FLOOR (CL:* 1000 (CL:- SECOND-FLOAT SECOND))) ZONE))))
   TP))

;;; (DEFUN TIMEPOINT-OF*-EVALUATOR ...)

(CL:DEFUN TIMEPOINT-OF*-EVALUATOR (SELF)
  (EQUATE-EQUIVALENT-FUNCTION-PROPOSITIONS SELF)
  (CL:LET*
   ((STOREDVALUE
     (VALUE-OF
      (CL:AREF
       (CL:THE CL:SIMPLE-VECTOR
        (%VECTOR.THE-ARRAY (%PROPOSITION.ARGUMENTS SELF)))
       7)))
    (COMPUTATION
     (LOOKUP-FUNCTION
      SYM-TIMEPOINT-SUPPORT-TIMEPOINT-SUPPORT-TIMEPOINT-OF*-COMPUTATION))
    (COMPUTEDVALUE (COMPUTE-RELATION-VALUE SELF COMPUTATION CL:NIL)))
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ COMPUTEDVALUE NULL))
     (CL:NOT (EQL? COMPUTEDVALUE STOREDVALUE)))
    (EQUATE-VALUES SELF COMPUTEDVALUE STOREDVALUE))))

;;; (DEFUN (TIMEPOINT-OF*-SPECIALIST KEYWORD) ...)

(CL:DEFUN TIMEPOINT-OF*-SPECIALIST (FRAME LASTMOVE)
  (CL:LET*
   ((PROPOSITION (%CONTROL-FRAME.PROPOSITION FRAME))
    (ARGS (%PROPOSITION.ARGUMENTS PROPOSITION))
    (YEAR
     (HELP-GET-INTEGER
      (ARGUMENT-BOUND-TO
       (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY ARGS)) 0))))
    (MONTH
     (HELP-GET-INTEGER
      (ARGUMENT-BOUND-TO
       (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY ARGS)) 1))))
    (DAY
     (HELP-GET-INTEGER
      (ARGUMENT-BOUND-TO
       (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY ARGS)) 2))))
    (HOUR
     (HELP-GET-INTEGER
      (ARGUMENT-BOUND-TO
       (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY ARGS)) 3))))
    (MINUTE
     (HELP-GET-INTEGER
      (ARGUMENT-BOUND-TO
       (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY ARGS)) 4))))
    (SECOND-FLOAT
     (HELP-GET-FLOAT
      (ARGUMENT-BOUND-TO
       (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY ARGS)) 5))))
    (SECOND 0)
    (ZONE
     (HELP-GET-TIMEZONE
      (ARGUMENT-BOUND-TO
       (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY ARGS)) 6))))
    (TP
     (ARGUMENT-BOUND-TO
      (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY ARGS)) 7)))
    (THE-TIME NULL) (CALENDAR-DATE NULL))
   (CL:DECLARE (CL:TYPE CL:FIXNUM YEAR MONTH DAY HOUR MINUTE SECOND)
    (CL:TYPE CL:DOUBLE-FLOAT SECOND-FLOAT ZONE))
   (CL:SETQ LASTMOVE LASTMOVE)
   (CL:COND
    ((CL:AND (CL:NOT (CL:= YEAR NULL-INTEGER))
      (CL:NOT (CL:= MONTH NULL-INTEGER)) (CL:NOT (CL:= DAY NULL-INTEGER))
      (CL:NOT (CL:= HOUR NULL-INTEGER)) (CL:NOT (CL:= MINUTE NULL-INTEGER))
      (CL:NOT (CL:= SECOND-FLOAT NULL-FLOAT)) (CL:NOT (CL:= ZONE NULL-FLOAT)))
     (CL:SETQ SECOND (FLOOR SECOND-FLOAT))
     (CL:SETQ THE-TIME
      (WRAP-DATE-TIME
       (MAKE-DATE-TIME YEAR MONTH DAY HOUR MINUTE SECOND
        (FLOOR (CL:* 1000 (CL:- SECOND-FLOAT SECOND))) ZONE)))
     (SELECT-PROOF-RESULT
      (BIND-ARGUMENT-TO-VALUE?
       (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY ARGS)) 7) THE-TIME
       CL:T)
      CL:NIL CL:T))
    ((CL:NOT (CL:EQ TP NULL)) (CL:SETQ THE-TIME (HELP-GET-CALENDAR-TIME TP))
     (CL:SETQ CALENDAR-DATE (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE THE-TIME))
     (CL:WHEN (CL:= ZONE NULL-FLOAT) (CL:SETQ ZONE 0.0d0)
      (CL:WHEN
       (CL:NOT
        (BIND-ARGUMENT-TO-VALUE?
         (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY ARGS)) 6)
         (WRAP-FLOAT ZONE) CL:T))
       (CL:RETURN-FROM TIMEPOINT-OF*-SPECIALIST
        KWD-TIMEPOINT-SUPPORT-FAILURE)))
     (CL:IF (CL:NOT (CL:EQ THE-TIME NULL))
      (CL:LET*
       ((YY NULL-INTEGER) (MM NULL-INTEGER) (DD NULL-INTEGER) (DOW NULL))
       (CL:DECLARE (CL:TYPE CL:FIXNUM YY MM DD))
       (CL:MULTIPLE-VALUE-SETQ (YY MM DD DOW)
        (GET-CALENDAR-DATE CALENDAR-DATE ZONE))
       (CL:SETQ DOW DOW)
       (CL:LET*
        ((H NULL-INTEGER) (M NULL-INTEGER) (S NULL-INTEGER)
         (MILLI NULL-INTEGER))
        (CL:DECLARE (CL:TYPE CL:FIXNUM H M S MILLI))
        (CL:MULTIPLE-VALUE-SETQ (H M S MILLI) (GET-TIME CALENDAR-DATE ZONE))
        (SELECT-PROOF-RESULT
         (CAN-BIND-ALL?
          (CONS-LIST
           (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY ARGS)) 0)
           (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY ARGS)) 1)
           (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY ARGS)) 2)
           (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY ARGS)) 3)
           (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY ARGS)) 4)
           (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY ARGS)) 5))
          (CONS-LIST (WRAP-INTEGER YY) (WRAP-INTEGER MM) (WRAP-INTEGER DD)
           (WRAP-INTEGER H) (WRAP-INTEGER M)
           (WRAP-FLOAT (CL:FLOAT (CL:+ S (CL:* MILLI 0.001d0)) 0.0d0))))
         CL:NIL CL:T)))
      KWD-TIMEPOINT-SUPPORT-TERMINAL-FAILURE))
    (CL:T KWD-TIMEPOINT-SUPPORT-FAILURE))))

;;; (DEFUN (DURATION-OF-CONSTRAINT OBJECT) ...)

(CL:DEFUN DURATION-OF-CONSTRAINT (MISSING-ARGUMENT X1 X2)
  (CL:LET* ((VALUE NULL))
   (CL:CASE (%INTEGER-WRAPPER.WRAPPER-VALUE MISSING-ARGUMENT)
    (-1
     (CL:SETQ VALUE
      (CL:IF
       (OBJECT-EQL?
        (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE (HELP-GET-TIME-DURATION X1))
        (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE X2))
       TRUE-WRAPPER FALSE-WRAPPER)))
    (0
     (CL:LET* ((DURATIONWRAPPER (HELP-GET-TIME-DURATION X2)))
      (CL:SETQ VALUE
       (WRAP-STRING
        (TIME-DURATION-TO-STRING
         (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE DURATIONWRAPPER))))))
    (1
     (CL:LET* ((DURATIONSPECVALUE (VALUE-OF X1)))
      (CL:IF (CL:EQ DURATIONSPECVALUE NULL) (CL:SETQ VALUE NULL)
       (CL:SETQ VALUE (HELP-GET-TIME-DURATION DURATIONSPECVALUE)))))
    (CL:OTHERWISE))
   VALUE))

;;; (DEFUN (TIME-MINUS-CONSTRAINT OBJECT) ...)

(CL:DEFUN TIME-MINUS-CONSTRAINT (MISSING-ARGUMENT X1 X2 X3)
  (CL:LET* ((VALUE NULL))
   (CL:CASE (%INTEGER-WRAPPER.WRAPPER-VALUE MISSING-ARGUMENT)
    (-1
     (CL:SETQ VALUE
      (CL:IF
       (OBJECT-EQL?
        (TIME-SUBTRACT (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE X1)
         (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE X2))
        (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE X3))
       TRUE-WRAPPER FALSE-WRAPPER)))
    (0
     (CL:SETQ VALUE
      (WRAP-DATE-TIME
       (TIME-ADD (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE X2)
        (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE X3)))))
    (1
     (CL:SETQ VALUE
      (WRAP-DATE-TIME
       (TIME-SUBTRACT (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE X1)
        (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE X3)))))
    (2
     (CL:SETQ VALUE
      (WRAP-DATE-TIME
       (TIME-SUBTRACT (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE X1)
        (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE X2)))))
    (CL:OTHERWISE))
   VALUE))

;;; (DEFUN (TIME-PLUS-CONSTRAINT OBJECT) ...)

(CL:DEFUN TIME-PLUS-CONSTRAINT (MISSING-ARGUMENT X1 X2 X3)
  (CL:LET* ((VALUE NULL))
   (CL:CASE (%INTEGER-WRAPPER.WRAPPER-VALUE MISSING-ARGUMENT)
    (-1
     (CL:SETQ VALUE
      (CL:IF
       (OBJECT-EQL?
        (TIME-ADD (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE X1)
         (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE X2))
        (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE X3))
       TRUE-WRAPPER FALSE-WRAPPER)))
    (0
     (CL:SETQ VALUE
      (WRAP-DATE-TIME
       (TIME-SUBTRACT (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE X3)
        (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE X2)))))
    (1
     (CL:SETQ VALUE
      (WRAP-DATE-TIME
       (TIME-SUBTRACT (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE X3)
        (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE X1)))))
    (2
     (CL:SETQ VALUE
      (WRAP-DATE-TIME
       (TIME-ADD (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE X1)
        (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE X2)))))
    (CL:OTHERWISE))
   VALUE))

;;; (DEFUN (HELP-GET-TIME-ZONE FLOAT) ...)

(CL:DECLAIM (CL:FTYPE (CL:FUNCTION (CL:T) CL:DOUBLE-FLOAT) HELP-GET-TIME-ZONE))
(CL:DEFUN HELP-GET-TIME-ZONE (TIME-ZONE-SPECIFIER)
  (CL:WHEN (CL:EQ TIME-ZONE-SPECIFIER NULL)
   (CL:RETURN-FROM HELP-GET-TIME-ZONE NULL-FLOAT))
  (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE TIME-ZONE-SPECIFIER)))
   (CL:COND
    ((SUBTYPE-OF-STRING? TEST-VALUE-000)
     (CL:PROGN
      (CL:LET*
       ((ZONE
         (LOOKUP *ZONE-STRINGS*
          (STRING-DOWNCASE
           (%STRING-WRAPPER.WRAPPER-VALUE TIME-ZONE-SPECIFIER)))))
       (CL:IF (CL:EQ ZONE NULL) NULL-FLOAT
        (%FLOAT-WRAPPER.WRAPPER-VALUE ZONE)))))
    ((SUBTYPE-OF-INTEGER? TEST-VALUE-000)
     (CL:PROGN
      (CL:FLOAT (%INTEGER-WRAPPER.WRAPPER-VALUE TIME-ZONE-SPECIFIER) 0.0d0)))
    ((SUBTYPE-OF-FLOAT? TEST-VALUE-000)
     (CL:PROGN (%FLOAT-WRAPPER.WRAPPER-VALUE TIME-ZONE-SPECIFIER)))
    (CL:T NULL-FLOAT))))

;;; (DEFUN (DOW-KEYWORD-TO-INSTANCE LOGIC-OBJECT) ...)

(CL:DEFUN DOW-KEYWORD-TO-INSTANCE (DOW)
  (CL:COND
   ((CL:EQ DOW KWD-TIMEPOINT-SUPPORT-MONDAY)
    (%SURROGATE.SURROGATE-VALUE SGT-TIMEPOINT-SUPPORT-TIMEPOINT-KB-MONDAY))
   ((CL:EQ DOW KWD-TIMEPOINT-SUPPORT-TUESDAY)
    (%SURROGATE.SURROGATE-VALUE SGT-TIMEPOINT-SUPPORT-TIMEPOINT-KB-TUESDAY))
   ((CL:EQ DOW KWD-TIMEPOINT-SUPPORT-WEDNESDAY)
    (%SURROGATE.SURROGATE-VALUE SGT-TIMEPOINT-SUPPORT-TIMEPOINT-KB-WEDNESDAY))
   ((CL:EQ DOW KWD-TIMEPOINT-SUPPORT-THURSDAY)
    (%SURROGATE.SURROGATE-VALUE SGT-TIMEPOINT-SUPPORT-TIMEPOINT-KB-THURSDAY))
   ((CL:EQ DOW KWD-TIMEPOINT-SUPPORT-FRIDAY)
    (%SURROGATE.SURROGATE-VALUE SGT-TIMEPOINT-SUPPORT-TIMEPOINT-KB-FRIDAY))
   ((CL:EQ DOW KWD-TIMEPOINT-SUPPORT-SATURDAY)
    (%SURROGATE.SURROGATE-VALUE SGT-TIMEPOINT-SUPPORT-TIMEPOINT-KB-SATURDAY))
   ((CL:EQ DOW KWD-TIMEPOINT-SUPPORT-SUNDAY)
    (%SURROGATE.SURROGATE-VALUE SGT-TIMEPOINT-SUPPORT-TIMEPOINT-KB-SUNDAY))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`" DOW
      "' is not a valid case option")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))

;;; (DEFUN (TIMEPOINT-YEAR-COMPUTATION INTEGER-WRAPPER) ...)

(CL:DEFUN TIMEPOINT-YEAR-COMPUTATION (TIMEPOINT TIMEZONE)
  (CL:SETQ TIMEZONE (WRAP-FLOAT (HELP-GET-TIME-ZONE TIMEZONE)))
  (CL:IF (CL:NOT (CL:EQ TIMEZONE NULL))
   (CL:LET*
    ((YEAR NULL-INTEGER) (MONTH NULL-INTEGER) (DAY NULL-INTEGER) (DOW NULL))
    (CL:DECLARE (CL:TYPE CL:FIXNUM YEAR MONTH DAY))
    (CL:MULTIPLE-VALUE-SETQ (YEAR MONTH DAY DOW)
     (GET-CALENDAR-DATE (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE TIMEPOINT)
      (%FLOAT-WRAPPER.WRAPPER-VALUE TIMEZONE)))
    (CL:PROGN (CL:SETQ MONTH MONTH) (CL:SETQ DAY DAY) (CL:SETQ DOW DOW))
    (WRAP-INTEGER YEAR))
   NULL))

;;; (DEFUN (TIMEPOINT-MONTH-COMPUTATION INTEGER-WRAPPER) ...)

(CL:DEFUN TIMEPOINT-MONTH-COMPUTATION (TIMEPOINT TIMEZONE)
  (CL:SETQ TIMEZONE (WRAP-FLOAT (HELP-GET-TIME-ZONE TIMEZONE)))
  (CL:IF (CL:NOT (CL:EQ TIMEZONE NULL))
   (CL:LET*
    ((YEAR NULL-INTEGER) (MONTH NULL-INTEGER) (DAY NULL-INTEGER) (DOW NULL))
    (CL:DECLARE (CL:TYPE CL:FIXNUM YEAR MONTH DAY))
    (CL:MULTIPLE-VALUE-SETQ (YEAR MONTH DAY DOW)
     (GET-CALENDAR-DATE (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE TIMEPOINT)
      (%FLOAT-WRAPPER.WRAPPER-VALUE TIMEZONE)))
    (CL:PROGN (CL:SETQ YEAR YEAR) (CL:SETQ DAY DAY) (CL:SETQ DOW DOW))
    (WRAP-INTEGER MONTH))
   NULL))

;;; (DEFUN (TIMEPOINT-DAY-COMPUTATION INTEGER-WRAPPER) ...)

(CL:DEFUN TIMEPOINT-DAY-COMPUTATION (TIMEPOINT TIMEZONE)
  (CL:SETQ TIMEZONE (WRAP-FLOAT (HELP-GET-TIME-ZONE TIMEZONE)))
  (CL:IF (CL:NOT (CL:EQ TIMEZONE NULL))
   (CL:LET*
    ((YEAR NULL-INTEGER) (MONTH NULL-INTEGER) (DAY NULL-INTEGER) (DOW NULL))
    (CL:DECLARE (CL:TYPE CL:FIXNUM YEAR MONTH DAY))
    (CL:MULTIPLE-VALUE-SETQ (YEAR MONTH DAY DOW)
     (GET-CALENDAR-DATE (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE TIMEPOINT)
      (%FLOAT-WRAPPER.WRAPPER-VALUE TIMEZONE)))
    (CL:PROGN (CL:SETQ YEAR YEAR) (CL:SETQ MONTH MONTH) (CL:SETQ DOW DOW))
    (WRAP-INTEGER DAY))
   NULL))

;;; (DEFUN (TIMEPOINT-DAY-OF-WEEK-COMPUTATION LOGIC-OBJECT) ...)

(CL:DEFUN TIMEPOINT-DAY-OF-WEEK-COMPUTATION (TIMEPOINT TIMEZONE)
  (CL:SETQ TIMEZONE (WRAP-FLOAT (HELP-GET-TIME-ZONE TIMEZONE)))
  (CL:IF (CL:NOT (CL:EQ TIMEZONE NULL))
   (CL:LET*
    ((YEAR NULL-INTEGER) (MONTH NULL-INTEGER) (DAY NULL-INTEGER) (DOW NULL))
    (CL:DECLARE (CL:TYPE CL:FIXNUM YEAR MONTH DAY))
    (CL:MULTIPLE-VALUE-SETQ (YEAR MONTH DAY DOW)
     (GET-CALENDAR-DATE (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE TIMEPOINT)
      (%FLOAT-WRAPPER.WRAPPER-VALUE TIMEZONE)))
    (CL:PROGN (CL:SETQ YEAR YEAR) (CL:SETQ MONTH MONTH) (CL:SETQ DAY DAY))
    (DOW-KEYWORD-TO-INSTANCE DOW))
   NULL))

;;; (DEFUN (TIMEPOINT-HOUR-COMPUTATION INTEGER-WRAPPER) ...)

(CL:DEFUN TIMEPOINT-HOUR-COMPUTATION (TIMEPOINT TIMEZONE)
  (CL:SETQ TIMEZONE (WRAP-FLOAT (HELP-GET-TIME-ZONE TIMEZONE)))
  (CL:IF (CL:NOT (CL:EQ TIMEZONE NULL))
   (CL:LET*
    ((HOUR NULL-INTEGER) (MINUTE NULL-INTEGER) (SECOND NULL-INTEGER)
     (MILLISECOND NULL-INTEGER))
    (CL:DECLARE (CL:TYPE CL:FIXNUM HOUR MINUTE SECOND MILLISECOND))
    (CL:MULTIPLE-VALUE-SETQ (HOUR MINUTE SECOND MILLISECOND)
     (GET-TIME (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE TIMEPOINT)
      (%FLOAT-WRAPPER.WRAPPER-VALUE TIMEZONE)))
    (CL:PROGN (CL:SETQ MINUTE MINUTE) (CL:SETQ SECOND SECOND)
     (CL:SETQ MILLISECOND MILLISECOND))
    (WRAP-INTEGER HOUR))
   NULL))

;;; (DEFUN (TIMEPOINT-MINUTE-COMPUTATION INTEGER-WRAPPER) ...)

(CL:DEFUN TIMEPOINT-MINUTE-COMPUTATION (TIMEPOINT TIMEZONE)
  (CL:SETQ TIMEZONE (WRAP-FLOAT (HELP-GET-TIME-ZONE TIMEZONE)))
  (CL:IF (CL:NOT (CL:EQ TIMEZONE NULL))
   (CL:LET*
    ((HOUR NULL-INTEGER) (MINUTE NULL-INTEGER) (SECOND NULL-INTEGER)
     (MILLISECOND NULL-INTEGER))
    (CL:DECLARE (CL:TYPE CL:FIXNUM HOUR MINUTE SECOND MILLISECOND))
    (CL:MULTIPLE-VALUE-SETQ (HOUR MINUTE SECOND MILLISECOND)
     (GET-TIME (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE TIMEPOINT)
      (%FLOAT-WRAPPER.WRAPPER-VALUE TIMEZONE)))
    (CL:PROGN (CL:SETQ HOUR HOUR) (CL:SETQ SECOND SECOND)
     (CL:SETQ MILLISECOND MILLISECOND))
    (WRAP-INTEGER MINUTE))
   NULL))

;;; (DEFUN (TIMEPOINT-SECOND-COMPUTATION NUMBER-WRAPPER) ...)

(CL:DEFUN TIMEPOINT-SECOND-COMPUTATION (TIMEPOINT TIMEZONE)
  (CL:SETQ TIMEZONE (WRAP-FLOAT (HELP-GET-TIME-ZONE TIMEZONE)))
  (CL:IF (CL:NOT (CL:EQ TIMEZONE NULL))
   (CL:LET*
    ((HOUR NULL-INTEGER) (MINUTE NULL-INTEGER) (SECOND NULL-INTEGER)
     (MILLISECOND NULL-INTEGER))
    (CL:DECLARE (CL:TYPE CL:FIXNUM HOUR MINUTE SECOND MILLISECOND))
    (CL:MULTIPLE-VALUE-SETQ (HOUR MINUTE SECOND MILLISECOND)
     (GET-TIME (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE TIMEPOINT)
      (%FLOAT-WRAPPER.WRAPPER-VALUE TIMEZONE)))
    (CL:PROGN (CL:SETQ HOUR HOUR) (CL:SETQ MINUTE MINUTE))
    (CL:IF (CL:= MILLISECOND 0) (WRAP-INTEGER SECOND)
     (WRAP-FLOAT (CL:+ SECOND (CL:* MILLISECOND 0.001d0)))))
   NULL))

;;; (DEFUN (TIMEPOINT-DATE-COMPUTATION STRING-WRAPPER) ...)

(CL:DEFUN TIMEPOINT-DATE-COMPUTATION (TIMEPOINT TIMEZONE)
  (CL:SETQ TIMEZONE (WRAP-FLOAT (HELP-GET-TIME-ZONE TIMEZONE)))
  (CL:IF (CL:NOT (CL:EQ TIMEZONE NULL))
   (WRAP-STRING
    (CALENDAR-DATE-TO-DATE-STRING
     (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE TIMEPOINT)
     (%FLOAT-WRAPPER.WRAPPER-VALUE TIMEZONE) CL:NIL))
   NULL))

;;; (DEFUN (TIMEPOINT-TIME-COMPUTATION STRING-WRAPPER) ...)

(CL:DEFUN TIMEPOINT-TIME-COMPUTATION (TIMEPOINT TIMEZONE)
  (CL:SETQ TIMEZONE (WRAP-FLOAT (HELP-GET-TIME-ZONE TIMEZONE)))
  (CL:IF (CL:NOT (CL:EQ TIMEZONE NULL))
   (WRAP-STRING
    (CALENDAR-DATE-TO-TIME-STRING
     (%DATE-TIME-LOGIC-WRAPPER.WRAPPER-VALUE TIMEPOINT)
     (%FLOAT-WRAPPER.WRAPPER-VALUE TIMEZONE) CL:T CL:T CL:T))
   NULL))

(CL:DEFUN HELP-STARTUP-TIMEPOINT-SUPPORT1 ()
  (CL:PROGN
   (CL:SETQ SGT-TIMEPOINT-SUPPORT-TIMEPOINT-SUPPORT-DATE-TIME-LOGIC-WRAPPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DATE-TIME-LOGIC-WRAPPER" NULL 1))
   (CL:SETQ SYM-TIMEPOINT-SUPPORT-STELLA-WRAPPER-VALUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WRAPPER-VALUE"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SGT-TIMEPOINT-SUPPORT-TIMEPOINT-KB-TIMEPOINT-OF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TIMEPOINT-OF"
     (GET-STELLA-MODULE "/TIMEPOINT-KB" CL:T) 1))
   (CL:SETQ SGT-TIMEPOINT-SUPPORT-TIMEPOINT-KB-DURATION-OF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DURATION-OF"
     (GET-STELLA-MODULE "/TIMEPOINT-KB" CL:T) 1))
   (CL:SETQ SGT-TIMEPOINT-SUPPORT-STELLA-CALENDAR-DATE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CALENDAR-DATE"
     (GET-STELLA-MODULE "/STELLA" CL:T) 1))
   (CL:SETQ SGT-TIMEPOINT-SUPPORT-STELLA-TIME-DURATION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TIME-DURATION"
     (GET-STELLA-MODULE "/STELLA" CL:T) 1))
   (CL:SETQ SGT-TIMEPOINT-SUPPORT-LOGIC-SKOLEM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SKOLEM" (GET-STELLA-MODULE "/LOGIC" CL:T)
     1))
   (CL:SETQ SGT-TIMEPOINT-SUPPORT-LOGIC-PATTERN-VARIABLE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PATTERN-VARIABLE"
     (GET-STELLA-MODULE "/LOGIC" CL:T) 1))
   (CL:SETQ SGT-TIMEPOINT-SUPPORT-UNIT-SUPPORT-DIM-NUMBER-LOGIC-WRAPPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DIM-NUMBER-LOGIC-WRAPPER"
     (GET-STELLA-MODULE "/UNIT-SUPPORT" CL:T) 1))
   (CL:SETQ SGT-TIMEPOINT-SUPPORT-STELLA-CS-VALUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CS-VALUE"
     (GET-STELLA-MODULE "/STELLA" CL:T) 1))
   (CL:SETQ SYM-TIMEPOINT-SUPPORT-TIMEPOINT-SUPPORT-TIMEPOINT-OF*-COMPUTATION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TIMEPOINT-OF*-COMPUTATION" NULL 0))
   (CL:SETQ KWD-TIMEPOINT-SUPPORT-FAILURE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FAILURE" NULL 2))
   (CL:SETQ KWD-TIMEPOINT-SUPPORT-TERMINAL-FAILURE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TERMINAL-FAILURE" NULL 2))
   (CL:SETQ KWD-TIMEPOINT-SUPPORT-MONDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MONDAY" NULL 2))
   (CL:SETQ SGT-TIMEPOINT-SUPPORT-TIMEPOINT-KB-MONDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MONDAY"
     (GET-STELLA-MODULE "/TIMEPOINT-KB" CL:T) 1))
   (CL:SETQ KWD-TIMEPOINT-SUPPORT-TUESDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TUESDAY" NULL 2))
   (CL:SETQ SGT-TIMEPOINT-SUPPORT-TIMEPOINT-KB-TUESDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TUESDAY"
     (GET-STELLA-MODULE "/TIMEPOINT-KB" CL:T) 1))
   (CL:SETQ KWD-TIMEPOINT-SUPPORT-WEDNESDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WEDNESDAY" NULL 2))
   (CL:SETQ SGT-TIMEPOINT-SUPPORT-TIMEPOINT-KB-WEDNESDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WEDNESDAY"
     (GET-STELLA-MODULE "/TIMEPOINT-KB" CL:T) 1))
   (CL:SETQ KWD-TIMEPOINT-SUPPORT-THURSDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "THURSDAY" NULL 2))
   (CL:SETQ SGT-TIMEPOINT-SUPPORT-TIMEPOINT-KB-THURSDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "THURSDAY"
     (GET-STELLA-MODULE "/TIMEPOINT-KB" CL:T) 1))
   (CL:SETQ KWD-TIMEPOINT-SUPPORT-FRIDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FRIDAY" NULL 2))
   (CL:SETQ SGT-TIMEPOINT-SUPPORT-TIMEPOINT-KB-FRIDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FRIDAY"
     (GET-STELLA-MODULE "/TIMEPOINT-KB" CL:T) 1))
   (CL:SETQ KWD-TIMEPOINT-SUPPORT-SATURDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SATURDAY" NULL 2))
   (CL:SETQ SGT-TIMEPOINT-SUPPORT-TIMEPOINT-KB-SATURDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SATURDAY"
     (GET-STELLA-MODULE "/TIMEPOINT-KB" CL:T) 1))
   (CL:SETQ KWD-TIMEPOINT-SUPPORT-SUNDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SUNDAY" NULL 2))
   (CL:SETQ SGT-TIMEPOINT-SUPPORT-TIMEPOINT-KB-SUNDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SUNDAY"
     (GET-STELLA-MODULE "/TIMEPOINT-KB" CL:T) 1))
   (CL:SETQ SYM-TIMEPOINT-SUPPORT-TIMEPOINT-SUPPORT-STARTUP-TIMEPOINT-SUPPORT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-TIMEPOINT-SUPPORT" NULL 0))
   (CL:SETQ SYM-TIMEPOINT-SUPPORT-STELLA-METHOD-STARTUP-CLASSNAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))))

(CL:DEFUN STARTUP-TIMEPOINT-SUPPORT ()
  (CL:LET*
   ((*MODULE*
     (GET-STELLA-MODULE "/TIMEPOINT-SUPPORT" (> *STARTUP-TIME-PHASE* 1)))
    (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2) (HELP-STARTUP-TIMEPOINT-SUPPORT1))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 4)
    (CL:SETQ *DATE-TIME-HASH-TABLE* (NEW-STELLA-HASH-TABLE)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 5)
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "DATE-TIME-LOGIC-WRAPPER"
        "(DEFCLASS DATE-TIME-LOGIC-WRAPPER (QUANTITY-LOGIC-WRAPPER) :PUBLIC-SLOTS ((WRAPPER-VALUE :TYPE DATE-TIME-OBJECT :REQUIRED? TRUE)) :PRINT-FORM (IF *PRINTREADABLY?* (PRINT-NATIVE-STREAM STREAM (WRAPPER-VALUE SELF)) (PRINT-NATIVE-STREAM STREAM \"|tw|\" (WRAPPER-VALUE SELF))))")))
     (CL:SETF (%CLASS.CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-DATE-TIME-LOGIC-WRAPPER))
     (CL:SETF (%CLASS.CLASS-SLOT-ACCESSOR-CODE CLASS)
      (CL:FUNCTION ACCESS-DATE-TIME-LOGIC-WRAPPER-SLOT-VALUE))))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD (GENERATE-SPECIALIZED-TERM OBJECT) ((SELF DATE-TIME-LOGIC-WRAPPER)))"
     (CL:FUNCTION GENERATE-SPECIALIZED-TERM) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD (HASH-CODE INTEGER) ((SELF DATE-TIME-LOGIC-WRAPPER)))"
     (CL:FUNCTION HASH-CODE) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD (OBJECT-EQL? BOOLEAN) ((SELF DATE-TIME-LOGIC-WRAPPER) (X OBJECT)))"
     (CL:FUNCTION OBJECT-EQL?) NULL)
    (DEFINE-FUNCTION-OBJECT "WRAP-DATE-TIME"
     "(DEFUN (WRAP-DATE-TIME DATE-TIME-LOGIC-WRAPPER) ((VALUE DATE-TIME-OBJECT)) :PUBLIC? TRUE :DOCUMENTATION \"Return an interned LOGIC-WRAPPER for `value'.  This assures us
that all logic-wrapped DATE-TIME-OBJECTs are the same object.\")"
     (CL:FUNCTION WRAP-DATE-TIME) NULL)
    (DEFINE-FUNCTION-OBJECT "HELP-GET-CALENDAR-TIME"
     "(DEFUN (HELP-GET-CALENDAR-TIME DATE-TIME-LOGIC-WRAPPER) ((ITEM OBJECT)))"
     (CL:FUNCTION HELP-GET-CALENDAR-TIME) NULL)
    (DEFINE-FUNCTION-OBJECT "HELP-GET-TIME-DURATION"
     "(DEFUN (HELP-GET-TIME-DURATION DATE-TIME-LOGIC-WRAPPER) ((ITEM OBJECT)))"
     (CL:FUNCTION HELP-GET-TIME-DURATION) NULL)
    (DEFINE-FUNCTION-OBJECT "HELP-GET-TIME-OBJECT"
     "(DEFUN (HELP-GET-TIME-OBJECT DATE-TIME-LOGIC-WRAPPER) ((ITEM OBJECT)))"
     (CL:FUNCTION HELP-GET-TIME-OBJECT) NULL)
    (DEFINE-FUNCTION-OBJECT "HELP-GET-INTEGER"
     "(DEFUN (HELP-GET-INTEGER INTEGER) ((OBJ OBJECT)))"
     (CL:FUNCTION HELP-GET-INTEGER) NULL)
    (DEFINE-FUNCTION-OBJECT "HELP-GET-FLOAT"
     "(DEFUN (HELP-GET-FLOAT FLOAT) ((OBJ OBJECT)))"
     (CL:FUNCTION HELP-GET-FLOAT) NULL)
    (DEFINE-FUNCTION-OBJECT "HELP-GET-TIMEZONE"
     "(DEFUN (HELP-GET-TIMEZONE FLOAT) ((OBJ OBJECT)))"
     (CL:FUNCTION HELP-GET-TIMEZONE) NULL)
    (DEFINE-FUNCTION-OBJECT "CAN-BIND-ALL?"
     "(DEFUN (CAN-BIND-ALL? BOOLEAN) ((PL-OBJECTS CONS) (VALUES CONS)))"
     (CL:FUNCTION CAN-BIND-ALL?) NULL)
    (DEFINE-FUNCTION-OBJECT "TIMEPOINT-OF-CONSTRAINT"
     "(DEFUN (TIMEPOINT-OF-CONSTRAINT OBJECT) ((MISSING-ARGUMENT INTEGER-WRAPPER) (X1 STRING-WRAPPER) (X2 DATE-TIME-LOGIC-WRAPPER)))"
     (CL:FUNCTION TIMEPOINT-OF-CONSTRAINT) NULL)
    (DEFINE-FUNCTION-OBJECT "TIMEPOINT-OF*-COMPUTATION"
     "(DEFUN (TIMEPOINT-OF*-COMPUTATION DATE-TIME-LOGIC-WRAPPER) ((YY INTEGER-WRAPPER) (MM INTEGER-WRAPPER) (DD INTEGER-WRAPPER) (HR INTEGER-WRAPPER) (MIN INTEGER-WRAPPER) (SEC NUMBER-WRAPPER) (TZ OBJECT)))"
     (CL:FUNCTION TIMEPOINT-OF*-COMPUTATION) NULL)
    (DEFINE-FUNCTION-OBJECT "TIMEPOINT-OF*-EVALUATOR"
     "(DEFUN TIMEPOINT-OF*-EVALUATOR ((SELF PROPOSITION)))"
     (CL:FUNCTION TIMEPOINT-OF*-EVALUATOR) NULL)
    (DEFINE-FUNCTION-OBJECT "TIMEPOINT-OF*-SPECIALIST"
     "(DEFUN (TIMEPOINT-OF*-SPECIALIST KEYWORD) ((FRAME CONTROL-FRAME) (LASTMOVE KEYWORD)))"
     (CL:FUNCTION TIMEPOINT-OF*-SPECIALIST) NULL)
    (DEFINE-FUNCTION-OBJECT "DURATION-OF-CONSTRAINT"
     "(DEFUN (DURATION-OF-CONSTRAINT OBJECT) ((MISSING-ARGUMENT INTEGER-WRAPPER) (X1 STRING-WRAPPER) (X2 DATE-TIME-LOGIC-WRAPPER)))"
     (CL:FUNCTION DURATION-OF-CONSTRAINT) NULL)
    (DEFINE-FUNCTION-OBJECT "TIME-MINUS-CONSTRAINT"
     "(DEFUN (TIME-MINUS-CONSTRAINT OBJECT) ((MISSING-ARGUMENT INTEGER-WRAPPER) (X1 DATE-TIME-LOGIC-WRAPPER) (X2 DATE-TIME-LOGIC-WRAPPER) (X3 DATE-TIME-LOGIC-WRAPPER)))"
     (CL:FUNCTION TIME-MINUS-CONSTRAINT) NULL)
    (DEFINE-FUNCTION-OBJECT "TIME-PLUS-CONSTRAINT"
     "(DEFUN (TIME-PLUS-CONSTRAINT OBJECT) ((MISSING-ARGUMENT INTEGER-WRAPPER) (X1 DATE-TIME-LOGIC-WRAPPER) (X2 DATE-TIME-LOGIC-WRAPPER) (X3 DATE-TIME-LOGIC-WRAPPER)))"
     (CL:FUNCTION TIME-PLUS-CONSTRAINT) NULL)
    (DEFINE-FUNCTION-OBJECT "HELP-GET-TIME-ZONE"
     "(DEFUN (HELP-GET-TIME-ZONE FLOAT) ((TIME-ZONE-SPECIFIER OBJECT)))"
     (CL:FUNCTION HELP-GET-TIME-ZONE) NULL)
    (DEFINE-FUNCTION-OBJECT "DOW-KEYWORD-TO-INSTANCE"
     "(DEFUN (DOW-KEYWORD-TO-INSTANCE LOGIC-OBJECT) ((DOW KEYWORD)))"
     (CL:FUNCTION DOW-KEYWORD-TO-INSTANCE) NULL)
    (DEFINE-FUNCTION-OBJECT "TIMEPOINT-YEAR-COMPUTATION"
     "(DEFUN (TIMEPOINT-YEAR-COMPUTATION INTEGER-WRAPPER) ((TIMEPOINT DATE-TIME-LOGIC-WRAPPER) (TIMEZONE OBJECT)))"
     (CL:FUNCTION TIMEPOINT-YEAR-COMPUTATION) NULL)
    (DEFINE-FUNCTION-OBJECT "TIMEPOINT-MONTH-COMPUTATION"
     "(DEFUN (TIMEPOINT-MONTH-COMPUTATION INTEGER-WRAPPER) ((TIMEPOINT DATE-TIME-LOGIC-WRAPPER) (TIMEZONE OBJECT)))"
     (CL:FUNCTION TIMEPOINT-MONTH-COMPUTATION) NULL)
    (DEFINE-FUNCTION-OBJECT "TIMEPOINT-DAY-COMPUTATION"
     "(DEFUN (TIMEPOINT-DAY-COMPUTATION INTEGER-WRAPPER) ((TIMEPOINT DATE-TIME-LOGIC-WRAPPER) (TIMEZONE OBJECT)))"
     (CL:FUNCTION TIMEPOINT-DAY-COMPUTATION) NULL)
    (DEFINE-FUNCTION-OBJECT "TIMEPOINT-DAY-OF-WEEK-COMPUTATION"
     "(DEFUN (TIMEPOINT-DAY-OF-WEEK-COMPUTATION LOGIC-OBJECT) ((TIMEPOINT DATE-TIME-LOGIC-WRAPPER) (TIMEZONE OBJECT)))"
     (CL:FUNCTION TIMEPOINT-DAY-OF-WEEK-COMPUTATION) NULL)
    (DEFINE-FUNCTION-OBJECT "TIMEPOINT-HOUR-COMPUTATION"
     "(DEFUN (TIMEPOINT-HOUR-COMPUTATION INTEGER-WRAPPER) ((TIMEPOINT DATE-TIME-LOGIC-WRAPPER) (TIMEZONE OBJECT)))"
     (CL:FUNCTION TIMEPOINT-HOUR-COMPUTATION) NULL)
    (DEFINE-FUNCTION-OBJECT "TIMEPOINT-MINUTE-COMPUTATION"
     "(DEFUN (TIMEPOINT-MINUTE-COMPUTATION INTEGER-WRAPPER) ((TIMEPOINT DATE-TIME-LOGIC-WRAPPER) (TIMEZONE OBJECT)))"
     (CL:FUNCTION TIMEPOINT-MINUTE-COMPUTATION) NULL)
    (DEFINE-FUNCTION-OBJECT "TIMEPOINT-SECOND-COMPUTATION"
     "(DEFUN (TIMEPOINT-SECOND-COMPUTATION NUMBER-WRAPPER) ((TIMEPOINT DATE-TIME-LOGIC-WRAPPER) (TIMEZONE OBJECT)))"
     (CL:FUNCTION TIMEPOINT-SECOND-COMPUTATION) NULL)
    (DEFINE-FUNCTION-OBJECT "TIMEPOINT-DATE-COMPUTATION"
     "(DEFUN (TIMEPOINT-DATE-COMPUTATION STRING-WRAPPER) ((TIMEPOINT DATE-TIME-LOGIC-WRAPPER) (TIMEZONE OBJECT)))"
     (CL:FUNCTION TIMEPOINT-DATE-COMPUTATION) NULL)
    (DEFINE-FUNCTION-OBJECT "TIMEPOINT-TIME-COMPUTATION"
     "(DEFUN (TIMEPOINT-TIME-COMPUTATION STRING-WRAPPER) ((TIMEPOINT DATE-TIME-LOGIC-WRAPPER) (TIMEZONE OBJECT)))"
     (CL:FUNCTION TIMEPOINT-TIME-COMPUTATION) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-TIMEPOINT-SUPPORT"
     "(DEFUN STARTUP-TIMEPOINT-SUPPORT () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-TIMEPOINT-SUPPORT) NULL)
    (CL:LET*
     ((FUNCTION
       (LOOKUP-FUNCTION
        SYM-TIMEPOINT-SUPPORT-TIMEPOINT-SUPPORT-STARTUP-TIMEPOINT-SUPPORT)))
     (SET-DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
      SYM-TIMEPOINT-SUPPORT-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "_StartupTimepointSupport") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (%IN-MODULE (COPY-CONS-TREE (WRAP-STRING "TIMEPOINT-SUPPORT")))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *DATE-TIME-HASH-TABLE* (STELLA-HASH-TABLE OF DATE-TIME-OBJECT DATE-TIME-LOGIC-WRAPPER) (NEW STELLA-HASH-TABLE) :DOCUMENTATION \"Table for interning date-time logic wrappers\")"))))
