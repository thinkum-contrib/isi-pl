;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; arithmetic.slisp

#|
 +--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1997-2003              |
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied "AS IS",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------+
|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-INTEGER-INTERVAL NULL)
(CL:DEFVAR /PL-KERNEL-KB/SYM-ARITHMETIC-PL-KERNEL-KB-INTERVAL-LOWER-BOUND NULL)
(CL:DEFVAR /PL-KERNEL-KB/SYM-ARITHMETIC-PL-KERNEL-KB-INTERVAL-UPPER-BOUND NULL)
(CL:DEFVAR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-INTERVAL-CACHE NULL)
(CL:DEFVAR /PL-KERNEL-KB/SYM-ARITHMETIC-STELLA-HOME-CONTEXT NULL)
(CL:DEFVAR /PL-KERNEL-KB/SYM-ARITHMETIC-PL-KERNEL-KB-INTERVAL-MEMBER NULL)
(CL:DEFVAR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-INTEGER-INTERVAL-CACHE NULL)
(CL:DEFVAR /PL-KERNEL-KB/SYM-ARITHMETIC-STELLA-LOWER-BOUND NULL)
(CL:DEFVAR /PL-KERNEL-KB/SYM-ARITHMETIC-STELLA-UPPER-BOUND NULL)
(CL:DEFVAR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-FLOAT-INTERVAL-CACHE NULL)
(CL:DEFVAR /PL-KERNEL-KB/SYM-ARITHMETIC-PL-KERNEL-KB-STRICT-LOWER-BOUND? NULL)
(CL:DEFVAR /PL-KERNEL-KB/SYM-ARITHMETIC-PL-KERNEL-KB-STRICT-UPPER-BOUND? NULL)
(CL:DEFVAR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-INTERVAL-CACHE-OF NULL)
(CL:DEFVAR /PL-KERNEL-KB/SGT-ARITHMETIC-STELLA-INTEGER NULL)
(CL:DEFVAR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-> NULL)
(CL:DEFVAR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB->= NULL)
(CL:DEFVAR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-< NULL)
(CL:DEFVAR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-=< NULL)
(CL:DEFVAR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-INEQUALITY NULL)
(CL:DEFVAR /PL-KERNEL-KB/SGT-ARITHMETIC-LOGIC-LOGIC-OBJECT NULL)
(CL:DEFVAR /PL-KERNEL-KB/KWD-ARITHMETIC-PROPAGATE NULL)
(CL:DEFVAR /PL-KERNEL-KB/SGT-ARITHMETIC-STELLA-NUMBER-WRAPPER NULL)
(CL:DEFVAR /PL-KERNEL-KB/KWD-ARITHMETIC-LOWER-BOUND NULL)
(CL:DEFVAR /PL-KERNEL-KB/KWD-ARITHMETIC-UPPER-BOUND NULL)
(CL:DEFVAR /PL-KERNEL-KB/KWD-ARITHMETIC-TERMINAL-FAILURE NULL)
(CL:DEFVAR /PL-KERNEL-KB/SGT-ARITHMETIC-STELLA-INTEGER-WRAPPER NULL)
(CL:DEFVAR /PL-KERNEL-KB/KWD-ARITHMETIC-FINAL-SUCCESS NULL)
(CL:DEFVAR /PL-KERNEL-KB/KWD-ARITHMETIC-FAILURE NULL)
(CL:DEFVAR /PL-KERNEL-KB/SYM-ARITHMETIC-STELLA-ITERATOR NULL)
(CL:DEFVAR /PL-KERNEL-KB/KWD-ARITHMETIC-CONTINUING-SUCCESS NULL)
(CL:DEFVAR /PL-KERNEL-KB/SYM-ARITHMETIC-PL-KERNEL-KB-STARTUP-ARITHMETIC NULL)
(CL:DEFVAR /PL-KERNEL-KB/SYM-ARITHMETIC-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STARTUP-TIME-PHASE* *MODULE* *REVERSEPOLARITY?*
  TRUE-TRUTH-VALUE FALSE-TRUTH-VALUE *TRACED-KEYWORDS* STANDARD-OUTPUT
  TRUE EOL *CONTEXT* FALSE TRUE-WRAPPER FALSE-WRAPPER NULL-INTEGER
  NULL-FLOAT))

;;; (DEFUN (ARITHMETIC-EQUAL-TEST BOOLEAN) ...)

(CL:DEFUN /PL-KERNEL-KB/ARITHMETIC-EQUAL-TEST (X Y)
  (CL:LET* ((TEST-VALUE-002 (SAFE-PRIMARY-TYPE X)))
   (CL:COND
    ((SUBTYPE-OF-INTEGER? TEST-VALUE-002)
     (CL:PROGN
      (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE Y)))
       (CL:COND
        ((SUBTYPE-OF-INTEGER? TEST-VALUE-000)
         (CL:PROGN
          (CL:= (%INTEGER-WRAPPER.WRAPPER-VALUE X)
           (%INTEGER-WRAPPER.WRAPPER-VALUE Y))))
        ((SUBTYPE-OF-FLOAT? TEST-VALUE-000)
         (CL:PROGN
          (CL:= (CL:FLOAT (%INTEGER-WRAPPER.WRAPPER-VALUE X) 0.0d0)
           (%FLOAT-WRAPPER.WRAPPER-VALUE Y))))
        (CL:T
         (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
          (%%PRINT-STREAM
           (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
           TEST-VALUE-000 "' is not a valid case option")
          (CL:ERROR
           (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))))
    ((SUBTYPE-OF-FLOAT? TEST-VALUE-002)
     (CL:PROGN
      (CL:LET* ((TEST-VALUE-001 (SAFE-PRIMARY-TYPE Y)))
       (CL:COND
        ((SUBTYPE-OF-INTEGER? TEST-VALUE-001)
         (CL:PROGN
          (CL:= (%FLOAT-WRAPPER.WRAPPER-VALUE X)
           (CL:FLOAT (%INTEGER-WRAPPER.WRAPPER-VALUE Y) 0.0d0))))
        ((SUBTYPE-OF-FLOAT? TEST-VALUE-001)
         (CL:PROGN
          (CL:= (%FLOAT-WRAPPER.WRAPPER-VALUE X)
           (%FLOAT-WRAPPER.WRAPPER-VALUE Y))))
        (CL:T
         (CL:LET* ((STREAM-001 (NEW-OUTPUT-STRING-STREAM)))
          (%%PRINT-STREAM
           (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-001) "`"
           TEST-VALUE-001 "' is not a valid case option")
          (CL:ERROR
           (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-001)))))))))
    (CL:T
     (CL:LET* ((STREAM-002 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-002)
       "`" TEST-VALUE-002 "' is not a valid case option")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-002))))))))

;;; (DEFUN (ARITHMETIC-LESS-TEST BOOLEAN) ...)

(CL:DEFUN /PL-KERNEL-KB/ARITHMETIC-LESS-TEST (X Y)
  (CL:LET* ((TEST-VALUE-002 (SAFE-PRIMARY-TYPE X)))
   (CL:COND
    ((SUBTYPE-OF-INTEGER? TEST-VALUE-002)
     (CL:PROGN
      (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE Y)))
       (CL:COND
        ((SUBTYPE-OF-INTEGER? TEST-VALUE-000)
         (CL:PROGN
          (< (%INTEGER-WRAPPER.WRAPPER-VALUE X)
           (%INTEGER-WRAPPER.WRAPPER-VALUE Y))))
        ((SUBTYPE-OF-FLOAT? TEST-VALUE-000)
         (CL:PROGN
          (< (CL:FLOAT (%INTEGER-WRAPPER.WRAPPER-VALUE X) 0.0d0)
           (%FLOAT-WRAPPER.WRAPPER-VALUE Y))))
        (CL:T
         (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
          (%%PRINT-STREAM
           (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
           TEST-VALUE-000 "' is not a valid case option")
          (CL:ERROR
           (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))))
    ((SUBTYPE-OF-FLOAT? TEST-VALUE-002)
     (CL:PROGN
      (CL:LET* ((TEST-VALUE-001 (SAFE-PRIMARY-TYPE Y)))
       (CL:COND
        ((SUBTYPE-OF-INTEGER? TEST-VALUE-001)
         (CL:PROGN
          (< (%FLOAT-WRAPPER.WRAPPER-VALUE X)
           (CL:FLOAT (%INTEGER-WRAPPER.WRAPPER-VALUE Y) 0.0d0))))
        ((SUBTYPE-OF-FLOAT? TEST-VALUE-001)
         (CL:PROGN
          (< (%FLOAT-WRAPPER.WRAPPER-VALUE X)
           (%FLOAT-WRAPPER.WRAPPER-VALUE Y))))
        (CL:T
         (CL:LET* ((STREAM-001 (NEW-OUTPUT-STRING-STREAM)))
          (%%PRINT-STREAM
           (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-001) "`"
           TEST-VALUE-001 "' is not a valid case option")
          (CL:ERROR
           (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-001)))))))))
    (CL:T
     (CL:LET* ((STREAM-002 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-002)
       "`" TEST-VALUE-002 "' is not a valid case option")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-002))))))))

;;; (DEFUN (ARITHMETIC-GREATER-TEST BOOLEAN) ...)

(CL:DEFUN /PL-KERNEL-KB/ARITHMETIC-GREATER-TEST (X Y)
  (CL:LET* ((TEST-VALUE-002 (SAFE-PRIMARY-TYPE X)))
   (CL:COND
    ((SUBTYPE-OF-INTEGER? TEST-VALUE-002)
     (CL:PROGN
      (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE Y)))
       (CL:COND
        ((SUBTYPE-OF-INTEGER? TEST-VALUE-000)
         (CL:PROGN
          (> (%INTEGER-WRAPPER.WRAPPER-VALUE X)
           (%INTEGER-WRAPPER.WRAPPER-VALUE Y))))
        ((SUBTYPE-OF-FLOAT? TEST-VALUE-000)
         (CL:PROGN
          (> (CL:FLOAT (%INTEGER-WRAPPER.WRAPPER-VALUE X) 0.0d0)
           (%FLOAT-WRAPPER.WRAPPER-VALUE Y))))
        (CL:T
         (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
          (%%PRINT-STREAM
           (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
           TEST-VALUE-000 "' is not a valid case option")
          (CL:ERROR
           (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))))
    ((SUBTYPE-OF-FLOAT? TEST-VALUE-002)
     (CL:PROGN
      (CL:LET* ((TEST-VALUE-001 (SAFE-PRIMARY-TYPE Y)))
       (CL:COND
        ((SUBTYPE-OF-INTEGER? TEST-VALUE-001)
         (CL:PROGN
          (> (%FLOAT-WRAPPER.WRAPPER-VALUE X)
           (CL:FLOAT (%INTEGER-WRAPPER.WRAPPER-VALUE Y) 0.0d0))))
        ((SUBTYPE-OF-FLOAT? TEST-VALUE-001)
         (CL:PROGN
          (> (%FLOAT-WRAPPER.WRAPPER-VALUE X)
           (%FLOAT-WRAPPER.WRAPPER-VALUE Y))))
        (CL:T
         (CL:LET* ((STREAM-001 (NEW-OUTPUT-STRING-STREAM)))
          (%%PRINT-STREAM
           (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-001) "`"
           TEST-VALUE-001 "' is not a valid case option")
          (CL:ERROR
           (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-001)))))))))
    (CL:T
     (CL:LET* ((STREAM-002 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-002)
       "`" TEST-VALUE-002 "' is not a valid case option")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-002))))))))

;;; (DEFUN (PLUS-COMPUTATION NUMBER-WRAPPER) ...)

(CL:DEFUN /PL-KERNEL-KB/PLUS-COMPUTATION (X Y)
  (CL:LET* ((FLOATRESULT NULL-FLOAT))
   (CL:DECLARE (CL:TYPE CL:DOUBLE-FLOAT FLOATRESULT))
   (CL:LET* ((TEST-VALUE-002 (SAFE-PRIMARY-TYPE X)))
    (CL:COND
     ((SUBTYPE-OF-INTEGER? TEST-VALUE-002)
      (CL:PROGN
       (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE Y)))
        (CL:COND
         ((SUBTYPE-OF-INTEGER? TEST-VALUE-000)
          (CL:PROGN
           (CL:RETURN-FROM /PL-KERNEL-KB/PLUS-COMPUTATION
            (WRAP-INTEGER
             (CL:TRUNCATE
              (CL:+ (%INTEGER-WRAPPER.WRAPPER-VALUE X)
               (%INTEGER-WRAPPER.WRAPPER-VALUE Y)))))))
         ((SUBTYPE-OF-FLOAT? TEST-VALUE-000)
          (CL:PROGN
           (CL:SETQ FLOATRESULT
            (CL:+ (%INTEGER-WRAPPER.WRAPPER-VALUE X)
             (%FLOAT-WRAPPER.WRAPPER-VALUE Y)))))
         (CL:T
          (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
           (%%PRINT-STREAM
            (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
            TEST-VALUE-000 "' is not a valid case option")
           (CL:ERROR
            (NEW-STELLA-EXCEPTION
             (THE-STRING-READER STREAM-000)))))))))
     ((SUBTYPE-OF-FLOAT? TEST-VALUE-002)
      (CL:PROGN
       (CL:LET* ((TEST-VALUE-001 (SAFE-PRIMARY-TYPE Y)))
        (CL:COND
         ((SUBTYPE-OF-INTEGER? TEST-VALUE-001)
          (CL:PROGN
           (CL:SETQ FLOATRESULT
            (CL:+ (%FLOAT-WRAPPER.WRAPPER-VALUE X)
             (%INTEGER-WRAPPER.WRAPPER-VALUE Y)))))
         ((SUBTYPE-OF-FLOAT? TEST-VALUE-001)
          (CL:PROGN
           (CL:SETQ FLOATRESULT
            (CL:+ (%FLOAT-WRAPPER.WRAPPER-VALUE X)
             (%FLOAT-WRAPPER.WRAPPER-VALUE Y)))))
         (CL:T
          (CL:LET* ((STREAM-001 (NEW-OUTPUT-STRING-STREAM)))
           (%%PRINT-STREAM
            (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-001) "`"
            TEST-VALUE-001 "' is not a valid case option")
           (CL:ERROR
            (NEW-STELLA-EXCEPTION
             (THE-STRING-READER STREAM-001)))))))))
     (CL:T
      (CL:LET* ((STREAM-002 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-002)
        "`" TEST-VALUE-002 "' is not a valid case option")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-002)))))))
   (WRAP-FLOAT FLOATRESULT)))

;;; (DEFUN (MINUS-COMPUTATION NUMBER-WRAPPER) ...)

(CL:DEFUN /PL-KERNEL-KB/MINUS-COMPUTATION (X Y)
  (CL:LET* ((FLOATRESULT NULL-FLOAT))
   (CL:DECLARE (CL:TYPE CL:DOUBLE-FLOAT FLOATRESULT))
   (CL:LET* ((TEST-VALUE-002 (SAFE-PRIMARY-TYPE X)))
    (CL:COND
     ((SUBTYPE-OF-INTEGER? TEST-VALUE-002)
      (CL:PROGN
       (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE Y)))
        (CL:COND
         ((SUBTYPE-OF-INTEGER? TEST-VALUE-000)
          (CL:PROGN
           (CL:RETURN-FROM /PL-KERNEL-KB/MINUS-COMPUTATION
            (WRAP-INTEGER
             (CL:TRUNCATE
              (CL:- (%INTEGER-WRAPPER.WRAPPER-VALUE X)
               (%INTEGER-WRAPPER.WRAPPER-VALUE Y)))))))
         ((SUBTYPE-OF-FLOAT? TEST-VALUE-000)
          (CL:PROGN
           (CL:SETQ FLOATRESULT
            (CL:- (%INTEGER-WRAPPER.WRAPPER-VALUE X)
             (%FLOAT-WRAPPER.WRAPPER-VALUE Y)))))
         (CL:T
          (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
           (%%PRINT-STREAM
            (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
            TEST-VALUE-000 "' is not a valid case option")
           (CL:ERROR
            (NEW-STELLA-EXCEPTION
             (THE-STRING-READER STREAM-000)))))))))
     ((SUBTYPE-OF-FLOAT? TEST-VALUE-002)
      (CL:PROGN
       (CL:LET* ((TEST-VALUE-001 (SAFE-PRIMARY-TYPE Y)))
        (CL:COND
         ((SUBTYPE-OF-INTEGER? TEST-VALUE-001)
          (CL:PROGN
           (CL:SETQ FLOATRESULT
            (CL:- (%FLOAT-WRAPPER.WRAPPER-VALUE X)
             (%INTEGER-WRAPPER.WRAPPER-VALUE Y)))))
         ((SUBTYPE-OF-FLOAT? TEST-VALUE-001)
          (CL:PROGN
           (CL:SETQ FLOATRESULT
            (CL:- (%FLOAT-WRAPPER.WRAPPER-VALUE X)
             (%FLOAT-WRAPPER.WRAPPER-VALUE Y)))))
         (CL:T
          (CL:LET* ((STREAM-001 (NEW-OUTPUT-STRING-STREAM)))
           (%%PRINT-STREAM
            (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-001) "`"
            TEST-VALUE-001 "' is not a valid case option")
           (CL:ERROR
            (NEW-STELLA-EXCEPTION
             (THE-STRING-READER STREAM-001)))))))))
     (CL:T
      (CL:LET* ((STREAM-002 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-002)
        "`" TEST-VALUE-002 "' is not a valid case option")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-002)))))))
   (WRAP-FLOAT FLOATRESULT)))

;;; (DEFUN (TIMES-COMPUTATION NUMBER-WRAPPER) ...)

(CL:DEFUN /PL-KERNEL-KB/TIMES-COMPUTATION (X Y)
  (CL:LET* ((FLOATRESULT NULL-FLOAT))
   (CL:DECLARE (CL:TYPE CL:DOUBLE-FLOAT FLOATRESULT))
   (CL:LET* ((TEST-VALUE-002 (SAFE-PRIMARY-TYPE X)))
    (CL:COND
     ((SUBTYPE-OF-INTEGER? TEST-VALUE-002)
      (CL:PROGN
       (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE Y)))
        (CL:COND
         ((SUBTYPE-OF-INTEGER? TEST-VALUE-000)
          (CL:PROGN
           (CL:RETURN-FROM /PL-KERNEL-KB/TIMES-COMPUTATION
            (WRAP-INTEGER
             (CL:TRUNCATE
              (CL:* (%INTEGER-WRAPPER.WRAPPER-VALUE X)
               (%INTEGER-WRAPPER.WRAPPER-VALUE Y)))))))
         ((SUBTYPE-OF-FLOAT? TEST-VALUE-000)
          (CL:PROGN
           (CL:SETQ FLOATRESULT
            (CL:* (%INTEGER-WRAPPER.WRAPPER-VALUE X)
             (%FLOAT-WRAPPER.WRAPPER-VALUE Y)))))
         (CL:T
          (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
           (%%PRINT-STREAM
            (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
            TEST-VALUE-000 "' is not a valid case option")
           (CL:ERROR
            (NEW-STELLA-EXCEPTION
             (THE-STRING-READER STREAM-000)))))))))
     ((SUBTYPE-OF-FLOAT? TEST-VALUE-002)
      (CL:PROGN
       (CL:LET* ((TEST-VALUE-001 (SAFE-PRIMARY-TYPE Y)))
        (CL:COND
         ((SUBTYPE-OF-INTEGER? TEST-VALUE-001)
          (CL:PROGN
           (CL:SETQ FLOATRESULT
            (CL:* (%FLOAT-WRAPPER.WRAPPER-VALUE X)
             (%INTEGER-WRAPPER.WRAPPER-VALUE Y)))))
         ((SUBTYPE-OF-FLOAT? TEST-VALUE-001)
          (CL:PROGN
           (CL:SETQ FLOATRESULT
            (CL:* (%FLOAT-WRAPPER.WRAPPER-VALUE X)
             (%FLOAT-WRAPPER.WRAPPER-VALUE Y)))))
         (CL:T
          (CL:LET* ((STREAM-001 (NEW-OUTPUT-STRING-STREAM)))
           (%%PRINT-STREAM
            (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-001) "`"
            TEST-VALUE-001 "' is not a valid case option")
           (CL:ERROR
            (NEW-STELLA-EXCEPTION
             (THE-STRING-READER STREAM-001)))))))))
     (CL:T
      (CL:LET* ((STREAM-002 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-002)
        "`" TEST-VALUE-002 "' is not a valid case option")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-002)))))))
   (WRAP-FLOAT FLOATRESULT)))

;;; (DEFUN (DIVIDE-COMPUTATION NUMBER-WRAPPER) ...)

(CL:DEFUN /PL-KERNEL-KB/DIVIDE-COMPUTATION (X Y)
  (CL:HANDLER-CASE
   (CL:LET* ((FLOATRESULT NULL-FLOAT))
    (CL:DECLARE (CL:TYPE CL:DOUBLE-FLOAT FLOATRESULT))
    (CL:LET* ((TEST-VALUE-002 (SAFE-PRIMARY-TYPE X)))
     (CL:COND
      ((SUBTYPE-OF-INTEGER? TEST-VALUE-002)
       (CL:PROGN
        (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE Y)))
         (CL:COND
          ((SUBTYPE-OF-INTEGER? TEST-VALUE-000)
           (CL:PROGN
            (CL:IF
             (CL:=
              (CL:THE CL:FIXNUM
               (CL:REM
                (CL:THE CL:FIXNUM (%INTEGER-WRAPPER.WRAPPER-VALUE X))
                (CL:THE CL:FIXNUM (%INTEGER-WRAPPER.WRAPPER-VALUE Y))))
              0)
             (CL:RETURN-FROM /PL-KERNEL-KB/DIVIDE-COMPUTATION
              (WRAP-INTEGER
               (CL:LET
                ((X (%INTEGER-WRAPPER.WRAPPER-VALUE X))
                 (Y (%INTEGER-WRAPPER.WRAPPER-VALUE Y)))
                (CL:DECLARE (CL:TYPE CL:FIXNUM X Y))
                (CL:THE CL:FIXNUM (CL:VALUES (CL:TRUNCATE X Y))))))
             (CL:SETQ FLOATRESULT
              (CL:/ (CL:FLOAT (%INTEGER-WRAPPER.WRAPPER-VALUE X) 0.0d0)
               (CL:FLOAT (%INTEGER-WRAPPER.WRAPPER-VALUE Y) 0.0d0))))))
          ((SUBTYPE-OF-FLOAT? TEST-VALUE-000)
           (CL:PROGN
            (CL:SETQ FLOATRESULT
             (CL:/ (%INTEGER-WRAPPER.WRAPPER-VALUE X)
              (%FLOAT-WRAPPER.WRAPPER-VALUE Y)))))
          (CL:T
           (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
            (%%PRINT-STREAM
             (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
             TEST-VALUE-000 "' is not a valid case option")
            (CL:ERROR
             (NEW-STELLA-EXCEPTION
              (THE-STRING-READER STREAM-000)))))))))
      ((SUBTYPE-OF-FLOAT? TEST-VALUE-002)
       (CL:PROGN
        (CL:LET* ((TEST-VALUE-001 (SAFE-PRIMARY-TYPE Y)))
         (CL:COND
          ((SUBTYPE-OF-INTEGER? TEST-VALUE-001)
           (CL:PROGN
            (CL:SETQ FLOATRESULT
             (CL:/ (%FLOAT-WRAPPER.WRAPPER-VALUE X)
              (%INTEGER-WRAPPER.WRAPPER-VALUE Y)))))
          ((SUBTYPE-OF-FLOAT? TEST-VALUE-001)
           (CL:PROGN
            (CL:SETQ FLOATRESULT
             (CL:/ (%FLOAT-WRAPPER.WRAPPER-VALUE X)
              (%FLOAT-WRAPPER.WRAPPER-VALUE Y)))))
          (CL:T
           (CL:LET* ((STREAM-001 (NEW-OUTPUT-STRING-STREAM)))
            (%%PRINT-STREAM
             (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-001) "`"
             TEST-VALUE-001 "' is not a valid case option")
            (CL:ERROR
             (NEW-STELLA-EXCEPTION
              (THE-STRING-READER STREAM-001)))))))))
      (CL:T
       (CL:LET* ((STREAM-002 (NEW-OUTPUT-STRING-STREAM)))
        (%%PRINT-STREAM
         (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-002) "`"
         TEST-VALUE-002 "' is not a valid case option")
        (CL:ERROR
         (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-002)))))))
    (CL:RETURN-FROM /PL-KERNEL-KB/DIVIDE-COMPUTATION
     (WRAP-FLOAT FLOATRESULT)))
   (CL:CONDITION () NULL)))

;;; (DEFUN (SQRT-COMPUTATION NUMBER-WRAPPER) ...)

(CL:DEFUN /PL-KERNEL-KB/SQRT-COMPUTATION (X)
  (CL:LET* ((FLOATRESULT NULL-FLOAT) (INTEGERRESULT NULL-INTEGER))
   (CL:DECLARE (CL:TYPE CL:DOUBLE-FLOAT FLOATRESULT)
    (CL:TYPE CL:FIXNUM INTEGERRESULT))
   (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE X)))
    (CL:COND
     ((SUBTYPE-OF-INTEGER? TEST-VALUE-000)
      (CL:PROGN
       (CL:SETQ FLOATRESULT
        (CL:THE CL:DOUBLE-FLOAT
         (CL:SQRT
          (CL:THE CL:DOUBLE-FLOAT
           (CL:FLOAT (%INTEGER-WRAPPER.WRAPPER-VALUE X) 0.0d0)))))
       (CL:SETQ INTEGERRESULT (CL:TRUNCATE FLOATRESULT))
       (CL:IF (CL:= FLOATRESULT (CL:FLOAT INTEGERRESULT 0.0d0))
        (CL:RETURN-FROM /PL-KERNEL-KB/SQRT-COMPUTATION
         (WRAP-INTEGER INTEGERRESULT))
        (CL:RETURN-FROM /PL-KERNEL-KB/SQRT-COMPUTATION
         (WRAP-FLOAT FLOATRESULT)))))
     ((SUBTYPE-OF-FLOAT? TEST-VALUE-000)
      (CL:PROGN
       (CL:SETQ FLOATRESULT
        (CL:THE CL:DOUBLE-FLOAT
         (CL:SQRT
          (CL:THE CL:DOUBLE-FLOAT
           (%FLOAT-WRAPPER.WRAPPER-VALUE X)))))))
     (CL:T
      (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
        "`" TEST-VALUE-000 "' is not a valid case option")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
   (WRAP-FLOAT FLOATRESULT)))

;;; (DEFUN (PLUS-CONSTRAINT OBJECT) ...)

(CL:DEFUN /PL-KERNEL-KB/PLUS-CONSTRAINT (MISSING-ARGUMENT X1 X2 X3)
  (CL:LET* ((VALUE NULL))
   (CL:CASE (%INTEGER-WRAPPER.WRAPPER-VALUE MISSING-ARGUMENT)
    (-1
     (CL:SETQ VALUE
      (CL:IF
       (/PL-KERNEL-KB/ARITHMETIC-EQUAL-TEST
        (/PL-KERNEL-KB/PLUS-COMPUTATION X1 X2) X3)
       TRUE-WRAPPER FALSE-WRAPPER)))
    (0 (CL:SETQ VALUE (/PL-KERNEL-KB/MINUS-COMPUTATION X3 X2)))
    (1 (CL:SETQ VALUE (/PL-KERNEL-KB/MINUS-COMPUTATION X3 X1)))
    (2 (CL:SETQ VALUE (/PL-KERNEL-KB/PLUS-COMPUTATION X1 X2)))
    (CL:OTHERWISE))
   VALUE))

;;; (DEFUN (MINUS-CONSTRAINT OBJECT) ...)

(CL:DEFUN /PL-KERNEL-KB/MINUS-CONSTRAINT (MISSING-ARGUMENT X1 X2 X3)
  (CL:LET* ((VALUE NULL))
   (CL:CASE (%INTEGER-WRAPPER.WRAPPER-VALUE MISSING-ARGUMENT)
    (-1
     (CL:SETQ VALUE
      (CL:IF
       (/PL-KERNEL-KB/ARITHMETIC-EQUAL-TEST
        (/PL-KERNEL-KB/MINUS-COMPUTATION X1 X2) X3)
       TRUE-WRAPPER FALSE-WRAPPER)))
    (0 (CL:SETQ VALUE (/PL-KERNEL-KB/PLUS-COMPUTATION X2 X3)))
    (1 (CL:SETQ VALUE (/PL-KERNEL-KB/MINUS-COMPUTATION X1 X3)))
    (2 (CL:SETQ VALUE (/PL-KERNEL-KB/MINUS-COMPUTATION X1 X2)))
    (CL:OTHERWISE))
   VALUE))

;;; (DEFUN (TIMES-CONSTRAINT OBJECT) ...)

(CL:DEFUN /PL-KERNEL-KB/TIMES-CONSTRAINT (MISSING-ARGUMENT X1 X2 X3)
  (CL:LET* ((VALUE NULL))
   (CL:CASE (%INTEGER-WRAPPER.WRAPPER-VALUE MISSING-ARGUMENT)
    (-1
     (CL:SETQ VALUE
      (CL:IF
       (/PL-KERNEL-KB/ARITHMETIC-EQUAL-TEST
        (/PL-KERNEL-KB/TIMES-COMPUTATION X1 X2) X3)
       TRUE-WRAPPER FALSE-WRAPPER)))
    (0 (CL:SETQ VALUE (/PL-KERNEL-KB/DIVIDE-COMPUTATION X3 X2)))
    (1 (CL:SETQ VALUE (/PL-KERNEL-KB/DIVIDE-COMPUTATION X3 X1)))
    (2 (CL:SETQ VALUE (/PL-KERNEL-KB/TIMES-COMPUTATION X1 X2)))
    (CL:OTHERWISE))
   VALUE))

;;; (DEFUN (DIVIDE-CONSTRAINT OBJECT) ...)

(CL:DEFUN /PL-KERNEL-KB/DIVIDE-CONSTRAINT (MISSING-ARGUMENT X1 X2 X3)
  (CL:LET* ((VALUE NULL))
   (CL:CASE (%INTEGER-WRAPPER.WRAPPER-VALUE MISSING-ARGUMENT)
    (-1
     (CL:LET* ((RATIO (/PL-KERNEL-KB/DIVIDE-COMPUTATION X1 X2)))
      (CL:IF (CL:NOT (CL:EQ RATIO NULL))
       (CL:SETQ VALUE
        (CL:IF (/PL-KERNEL-KB/ARITHMETIC-EQUAL-TEST RATIO X3)
         TRUE-WRAPPER FALSE-WRAPPER))
       (CL:SETQ VALUE FALSE-WRAPPER))))
    (0 (CL:SETQ VALUE (/PL-KERNEL-KB/TIMES-COMPUTATION X2 X3)))
    (1 (CL:SETQ VALUE (/PL-KERNEL-KB/DIVIDE-COMPUTATION X1 X3)))
    (2 (CL:SETQ VALUE (/PL-KERNEL-KB/DIVIDE-COMPUTATION X1 X2)))
    (CL:OTHERWISE))
   VALUE))

;;; (DEFUN (SQRT-CONSTRAINT OBJECT) ...)

(CL:DEFUN /PL-KERNEL-KB/SQRT-CONSTRAINT (MISSING-ARGUMENT X1 X2)
  (CL:LET* ((VALUE NULL))
   (CL:CASE (%INTEGER-WRAPPER.WRAPPER-VALUE MISSING-ARGUMENT)
    (-1
     (CL:SETQ VALUE
      (CL:IF
       (/PL-KERNEL-KB/ARITHMETIC-EQUAL-TEST
        (/PL-KERNEL-KB/TIMES-COMPUTATION X2 X2) X1)
       TRUE-WRAPPER FALSE-WRAPPER)))
    (0 (CL:SETQ VALUE (/PL-KERNEL-KB/TIMES-COMPUTATION X2 X2)))
    (1
     (CL:IF (/PL-KERNEL-KB/ARITHMETIC-LESS-TEST X1 (WRAP-INTEGER 0))
      (CL:SETQ VALUE NULL)
      (CL:SETQ VALUE (/PL-KERNEL-KB/SQRT-COMPUTATION X1))))
    (CL:OTHERWISE))
   VALUE))

(CL:DEFUN /PL-KERNEL-KB/NEW-INTEGER-INTERVAL ()
  (CL:LET* ((SELF NULL))
   (CL:SETQ SELF (/PL-KERNEL-KB/%MAKE-INTEGER-INTERVAL))
   (CL:SETF (/PL-KERNEL-KB/%INTEGER-INTERVAL.DYNAMIC-SLOTS SELF)
    (NEW-KEY-VALUE-LIST))
   (CL:SETF
    (/PL-KERNEL-KB/%INTEGER-INTERVAL.SURROGATE-VALUE-INVERSE SELF)
    NULL)
   (CL:SETF (/PL-KERNEL-KB/%INTEGER-INTERVAL.INTERVAL-UPPER-BOUND SELF)
    NULL-INTEGER)
   (CL:SETF (/PL-KERNEL-KB/%INTEGER-INTERVAL.INTERVAL-LOWER-BOUND SELF)
    NULL-INTEGER)
   SELF))

(CL:DEFMETHOD PRIMARY-TYPE ((SELF /PL-KERNEL-KB/INTEGER-INTERVAL))
  /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-INTEGER-INTERVAL)

(CL:DEFUN /PL-KERNEL-KB/ACCESS-INTEGER-INTERVAL-SLOT-VALUE (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME
     /PL-KERNEL-KB/SYM-ARITHMETIC-PL-KERNEL-KB-INTERVAL-LOWER-BOUND)
    (CL:IF SETVALUE?
     (CL:SETF
      (/PL-KERNEL-KB/%INTEGER-INTERVAL.INTERVAL-LOWER-BOUND SELF)
      (%INTEGER-WRAPPER.WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE
      (WRAP-INTEGER
       (/PL-KERNEL-KB/%INTEGER-INTERVAL.INTERVAL-LOWER-BOUND SELF)))))
   ((CL:EQ SLOTNAME
     /PL-KERNEL-KB/SYM-ARITHMETIC-PL-KERNEL-KB-INTERVAL-UPPER-BOUND)
    (CL:IF SETVALUE?
     (CL:SETF
      (/PL-KERNEL-KB/%INTEGER-INTERVAL.INTERVAL-UPPER-BOUND SELF)
      (%INTEGER-WRAPPER.WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE
      (WRAP-INTEGER
       (/PL-KERNEL-KB/%INTEGER-INTERVAL.INTERVAL-UPPER-BOUND SELF)))))
   (CL:T
    (CL:IF SETVALUE?
     (SET-DYNAMIC-SLOT-VALUE
      (/PL-KERNEL-KB/%INTEGER-INTERVAL.DYNAMIC-SLOTS SELF) SLOTNAME
      VALUE NULL)
     (CL:SETQ VALUE
      (LOOKUP (/PL-KERNEL-KB/%INTEGER-INTERVAL.DYNAMIC-SLOTS SELF)
       SLOTNAME)))))
  VALUE)

(CL:DEFUN /PL-KERNEL-KB/NEW-INTERVAL-CACHE ()
  (CL:LET* ((SELF NULL))
   (CL:SETQ SELF (/PL-KERNEL-KB/%MAKE-INTERVAL-CACHE))
   (CL:SETF (/PL-KERNEL-KB/%INTERVAL-CACHE.DYNAMIC-SLOTS SELF)
    (NEW-KEY-VALUE-LIST))
   (CL:SETF
    (/PL-KERNEL-KB/%INTERVAL-CACHE.SURROGATE-VALUE-INVERSE SELF) NULL)
   (CL:SETF (/PL-KERNEL-KB/%INTERVAL-CACHE.INTERVAL-MEMBER SELF) NULL)
   (CL:SETF (/PL-KERNEL-KB/%INTERVAL-CACHE.HOME-CONTEXT SELF) NULL)
   SELF))

(CL:DEFMETHOD PRIMARY-TYPE ((SELF /PL-KERNEL-KB/INTERVAL-CACHE))
  /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-INTERVAL-CACHE)

(CL:DEFUN /PL-KERNEL-KB/ACCESS-INTERVAL-CACHE-SLOT-VALUE (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME /PL-KERNEL-KB/SYM-ARITHMETIC-STELLA-HOME-CONTEXT)
    (CL:IF SETVALUE?
     (CL:SETF (/PL-KERNEL-KB/%INTERVAL-CACHE.HOME-CONTEXT SELF) VALUE)
     (CL:SETQ VALUE
      (/PL-KERNEL-KB/%INTERVAL-CACHE.HOME-CONTEXT SELF))))
   ((CL:EQ SLOTNAME
     /PL-KERNEL-KB/SYM-ARITHMETIC-PL-KERNEL-KB-INTERVAL-MEMBER)
    (CL:IF SETVALUE?
     (CL:SETF (/PL-KERNEL-KB/%INTERVAL-CACHE.INTERVAL-MEMBER SELF)
      VALUE)
     (CL:SETQ VALUE
      (/PL-KERNEL-KB/%INTERVAL-CACHE.INTERVAL-MEMBER SELF))))
   (CL:T
    (CL:IF SETVALUE?
     (SET-DYNAMIC-SLOT-VALUE
      (/PL-KERNEL-KB/%INTERVAL-CACHE.DYNAMIC-SLOTS SELF) SLOTNAME VALUE
      NULL)
     (CL:SETQ VALUE
      (LOOKUP (/PL-KERNEL-KB/%INTERVAL-CACHE.DYNAMIC-SLOTS SELF)
       SLOTNAME)))))
  VALUE)

(CL:DEFUN /PL-KERNEL-KB/NEW-INTEGER-INTERVAL-CACHE ()
  (CL:LET* ((SELF NULL))
   (CL:SETQ SELF (/PL-KERNEL-KB/%MAKE-INTEGER-INTERVAL-CACHE))
   (CL:SETF (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.DYNAMIC-SLOTS SELF)
    (NEW-KEY-VALUE-LIST))
   (CL:SETF
    (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.SURROGATE-VALUE-INVERSE
     SELF)
    NULL)
   (CL:SETF
    (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.INTERVAL-MEMBER SELF) NULL)
   (CL:SETF (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.HOME-CONTEXT SELF)
    NULL)
   (CL:SETF (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.UPPER-BOUND SELF)
    NULL-INTEGER)
   (CL:SETF (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.LOWER-BOUND SELF)
    NULL-INTEGER)
   SELF))

(CL:DEFMETHOD PRIMARY-TYPE ((SELF /PL-KERNEL-KB/INTEGER-INTERVAL-CACHE))
  /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-INTEGER-INTERVAL-CACHE)

(CL:DEFUN /PL-KERNEL-KB/ACCESS-INTEGER-INTERVAL-CACHE-SLOT-VALUE (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME /PL-KERNEL-KB/SYM-ARITHMETIC-STELLA-LOWER-BOUND)
    (CL:IF SETVALUE?
     (CL:SETF (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.LOWER-BOUND SELF)
      (%INTEGER-WRAPPER.WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE
      (WRAP-INTEGER
       (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.LOWER-BOUND SELF)))))
   ((CL:EQ SLOTNAME /PL-KERNEL-KB/SYM-ARITHMETIC-STELLA-UPPER-BOUND)
    (CL:IF SETVALUE?
     (CL:SETF (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.UPPER-BOUND SELF)
      (%INTEGER-WRAPPER.WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE
      (WRAP-INTEGER
       (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.UPPER-BOUND SELF)))))
   (CL:T
    (CL:IF SETVALUE?
     (SET-DYNAMIC-SLOT-VALUE
      (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.DYNAMIC-SLOTS SELF)
      SLOTNAME VALUE NULL)
     (CL:SETQ VALUE
      (LOOKUP
       (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.DYNAMIC-SLOTS SELF)
       SLOTNAME)))))
  VALUE)

(CL:DEFMETHOD PRINT-OBJECT ((SELF /PL-KERNEL-KB/INTEGER-INTERVAL-CACHE) STREAM)
  (%%PRINT-STREAM STREAM "|IIcache-of: "
   (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.INTERVAL-MEMBER SELF) " ["
   (CL:IF
    (DEFINED? (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.LOWER-BOUND SELF))
    (INTEGER-TO-STRING
     (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.LOWER-BOUND SELF))
    "?")
   ","
   (CL:IF
    (DEFINED? (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.UPPER-BOUND SELF))
    (INTEGER-TO-STRING
     (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.UPPER-BOUND SELF))
    "?")
   "]|"))

(CL:DEFUN /PL-KERNEL-KB/NEW-FLOAT-INTERVAL-CACHE ()
  (CL:LET* ((SELF NULL))
   (CL:SETQ SELF (/PL-KERNEL-KB/%MAKE-FLOAT-INTERVAL-CACHE))
   (CL:SETF (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.DYNAMIC-SLOTS SELF)
    (NEW-KEY-VALUE-LIST))
   (CL:SETF
    (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.SURROGATE-VALUE-INVERSE SELF)
    NULL)
   (CL:SETF (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.INTERVAL-MEMBER SELF)
    NULL)
   (CL:SETF (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.HOME-CONTEXT SELF)
    NULL)
   (CL:SETF
    (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.STRICT-UPPER-BOUND? SELF)
    FALSE)
   (CL:SETF
    (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.STRICT-LOWER-BOUND? SELF)
    FALSE)
   (CL:SETF (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.UPPER-BOUND SELF)
    NULL-FLOAT)
   (CL:SETF (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.LOWER-BOUND SELF)
    NULL-FLOAT)
   SELF))

(CL:DEFMETHOD PRIMARY-TYPE ((SELF /PL-KERNEL-KB/FLOAT-INTERVAL-CACHE))
  /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-FLOAT-INTERVAL-CACHE)

(CL:DEFUN /PL-KERNEL-KB/ACCESS-FLOAT-INTERVAL-CACHE-SLOT-VALUE (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME /PL-KERNEL-KB/SYM-ARITHMETIC-STELLA-LOWER-BOUND)
    (CL:IF SETVALUE?
     (CL:SETF (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.LOWER-BOUND SELF)
      (%FLOAT-WRAPPER.WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE
      (WRAP-FLOAT
       (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.LOWER-BOUND SELF)))))
   ((CL:EQ SLOTNAME /PL-KERNEL-KB/SYM-ARITHMETIC-STELLA-UPPER-BOUND)
    (CL:IF SETVALUE?
     (CL:SETF (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.UPPER-BOUND SELF)
      (%FLOAT-WRAPPER.WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE
      (WRAP-FLOAT
       (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.UPPER-BOUND SELF)))))
   ((CL:EQ SLOTNAME
     /PL-KERNEL-KB/SYM-ARITHMETIC-PL-KERNEL-KB-STRICT-LOWER-BOUND?)
    (CL:IF SETVALUE?
     (CL:SETF
      (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.STRICT-LOWER-BOUND? SELF)
      (COERCE-WRAPPED-BOOLEAN-TO-BOOLEAN VALUE))
     (CL:SETQ VALUE
      (CL:IF
       (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.STRICT-LOWER-BOUND? SELF)
       TRUE-WRAPPER FALSE-WRAPPER))))
   ((CL:EQ SLOTNAME
     /PL-KERNEL-KB/SYM-ARITHMETIC-PL-KERNEL-KB-STRICT-UPPER-BOUND?)
    (CL:IF SETVALUE?
     (CL:SETF
      (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.STRICT-UPPER-BOUND? SELF)
      (COERCE-WRAPPED-BOOLEAN-TO-BOOLEAN VALUE))
     (CL:SETQ VALUE
      (CL:IF
       (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.STRICT-UPPER-BOUND? SELF)
       TRUE-WRAPPER FALSE-WRAPPER))))
   (CL:T
    (CL:IF SETVALUE?
     (SET-DYNAMIC-SLOT-VALUE
      (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.DYNAMIC-SLOTS SELF) SLOTNAME
      VALUE NULL)
     (CL:SETQ VALUE
      (LOOKUP (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.DYNAMIC-SLOTS SELF)
       SLOTNAME)))))
  VALUE)

(CL:DEFMETHOD PRINT-OBJECT ((SELF /PL-KERNEL-KB/FLOAT-INTERVAL-CACHE) STREAM)
  (%%PRINT-STREAM STREAM "|FIcache-of: "
   (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.INTERVAL-MEMBER SELF) " "
   (CL:IF
    (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.STRICT-LOWER-BOUND? SELF) "("
    "[")
   (CL:IF
    (CL:NOT
     (CL:= (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.LOWER-BOUND SELF)
      NULL-FLOAT))
    (FLOAT-TO-STRING
     (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.LOWER-BOUND SELF))
    "?")
   ","
   (CL:IF
    (CL:NOT
     (CL:= (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.UPPER-BOUND SELF)
      NULL-FLOAT))
    (FLOAT-TO-STRING
     (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.UPPER-BOUND SELF))
    "?")
   (CL:IF
    (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.STRICT-UPPER-BOUND? SELF) ")"
    "]")
   "|"))

;;; (DEFUN (CREATE-INTERVAL-CACHE INTERVAL-CACHE) ...)

(CL:DEFUN /PL-KERNEL-KB/CREATE-INTERVAL-CACHE (INTERVALMEMBER INTEGER?)
  (CL:LET*
   ((INTERVALCACHE
     (CL:IF INTEGER? (/PL-KERNEL-KB/NEW-INTEGER-INTERVAL-CACHE)
      (/PL-KERNEL-KB/NEW-FLOAT-INTERVAL-CACHE))))
   (CL:SETF
    (/PL-KERNEL-KB/%INTERVAL-CACHE.INTERVAL-MEMBER INTERVALCACHE)
    INTERVALMEMBER)
   (CL:SETF (/PL-KERNEL-KB/%INTERVAL-CACHE.HOME-CONTEXT INTERVALCACHE)
    *CONTEXT*)
   (ASSERT-BINARY-VALUE
    /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-INTERVAL-CACHE-OF
    INTERVALMEMBER INTERVALCACHE)
   INTERVALCACHE))

;;; (DEFUN (GET-INTERVAL-CACHE INTERVAL-CACHE) ...)

(CL:DEFUN /PL-KERNEL-KB/GET-INTERVAL-CACHE (SELF)
  (CL:LET*
   ((INTERVALCACHE
     (ACCESS-BINARY-VALUE SELF
      /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-INTERVAL-CACHE-OF)))
   (CL:IF
    (CL:AND (CL:NOT (CL:EQ INTERVALCACHE NULL))
     (CL:NOT (SKOLEM? INTERVALCACHE))
     (CL:EQ (/PL-KERNEL-KB/%INTERVAL-CACHE.HOME-CONTEXT INTERVALCACHE)
      *CONTEXT*))
    INTERVALCACHE
    (/PL-KERNEL-KB/CREATE-INTERVAL-CACHE SELF
     (CL:OR
      (TEST-ISA? SELF /PL-KERNEL-KB/SGT-ARITHMETIC-STELLA-INTEGER)
      (CL:AND (FUNCTION-OUTPUT-SKOLEM? SELF)
       (LOGICAL-SUBTYPE-OF? (%SKOLEM.SKOLEM-TYPE SELF)
        /PL-KERNEL-KB/SGT-ARITHMETIC-STELLA-INTEGER)))))))

;;; (DEFUN (COERCE-INTERVAL-BOUND-TO-INTEGER INTEGER) ...)

(CL:DEFUN /PL-KERNEL-KB/COERCE-INTERVAL-BOUND-TO-INTEGER (SELF OPERATOR)
  (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE SELF)))
   (CL:COND
    ((SUBTYPE-OF-INTEGER? TEST-VALUE-000)
     (CL:PROGN
      (/PL-KERNEL-KB/INTEGER.COERCE-INTERVAL-BOUND-TO-INTEGER SELF
       OPERATOR)))
    ((SUBTYPE-OF-FLOAT? TEST-VALUE-000)
     (CL:PROGN
      (/PL-KERNEL-KB/FLOAT.COERCE-INTERVAL-BOUND-TO-INTEGER SELF
       OPERATOR)))
    (CL:T NULL-INTEGER))))
(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T CL:T) CL:FIXNUM)
  /PL-KERNEL-KB/COERCE-INTERVAL-BOUND-TO-INTEGER))

;;; (DEFUN (INTEGER.COERCE-INTERVAL-BOUND-TO-INTEGER INTEGER) ...)

(CL:DEFUN /PL-KERNEL-KB/INTEGER.COERCE-INTERVAL-BOUND-TO-INTEGER (SELF OPERATOR)
  (CL:WHEN (NULL? (%INTEGER-WRAPPER.WRAPPER-VALUE SELF))
   (CL:RETURN-FROM
    /PL-KERNEL-KB/INTEGER.COERCE-INTERVAL-BOUND-TO-INTEGER
    NULL-INTEGER))
  (CL:COND
   ((CL:EQ OPERATOR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB->)
    (CL:1+ (%INTEGER-WRAPPER.WRAPPER-VALUE SELF)))
   ((CL:EQ OPERATOR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB->=)
    (%INTEGER-WRAPPER.WRAPPER-VALUE SELF))
   ((CL:EQ OPERATOR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-<)
    (CL:1- (%INTEGER-WRAPPER.WRAPPER-VALUE SELF)))
   ((CL:EQ OPERATOR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-=<)
    (%INTEGER-WRAPPER.WRAPPER-VALUE SELF))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "`" OPERATOR "' is not a valid case option")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T CL:T) CL:FIXNUM)
  /PL-KERNEL-KB/INTEGER.COERCE-INTERVAL-BOUND-TO-INTEGER))

;;; (DEFUN (FLOAT.COERCE-INTERVAL-BOUND-TO-INTEGER INTEGER) ...)

(CL:DEFUN /PL-KERNEL-KB/FLOAT.COERCE-INTERVAL-BOUND-TO-INTEGER (SELF OPERATOR)
  (CL:WHEN (CL:= (%FLOAT-WRAPPER.WRAPPER-VALUE SELF) NULL-FLOAT)
   (CL:RETURN-FROM /PL-KERNEL-KB/FLOAT.COERCE-INTERVAL-BOUND-TO-INTEGER
    NULL-INTEGER))
  (CL:COND
   ((CL:EQ OPERATOR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB->)
    (CL:1+ (FLOOR (%FLOAT-WRAPPER.WRAPPER-VALUE SELF))))
   ((CL:EQ OPERATOR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB->=)
    (CEILING (%FLOAT-WRAPPER.WRAPPER-VALUE SELF)))
   ((CL:EQ OPERATOR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-<)
    (CL:1- (CEILING (%FLOAT-WRAPPER.WRAPPER-VALUE SELF))))
   ((CL:EQ OPERATOR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-=<)
    (FLOOR (%FLOAT-WRAPPER.WRAPPER-VALUE SELF)))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "`" OPERATOR "' is not a valid case option")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T CL:T) CL:FIXNUM)
  /PL-KERNEL-KB/FLOAT.COERCE-INTERVAL-BOUND-TO-INTEGER))

;;; (DEFUN SIGNAL-INTERVAL-CLASH ...)

(CL:DEFUN /PL-KERNEL-KB/SIGNAL-INTERVAL-CLASH (INTERVAL)
  (MARK-AS-INCOHERENT
   (/PL-KERNEL-KB/%INTERVAL-CACHE.INTERVAL-MEMBER INTERVAL))
  (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
   (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
    "Clash in interval values `" INTERVAL "'" EOL)
   (CL:ERROR (NEW-CLASH (THE-STRING-READER STREAM-000)))))

;;; (DEFUN EVALUATE-ADJACENT-INEQUALITIES ...)

(CL:DEFUN /PL-KERNEL-KB/EVALUATE-ADJACENT-INEQUALITIES (SELF)
  (CL:LET*
   ((DEP NULL)
    (ITER-000
     (ALL-SPECIALIZING-DEPENDENT-PROPOSITIONS SELF
      /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-INEQUALITY)))
   (CL:LOOP WHILE (NEXT? ITER-000) DO
    (CL:SETQ DEP (%ITERATOR.VALUE ITER-000))
    (CL:LET* ((ALWAYS?-000 TRUE))
     (CL:LET*
      ((ARG NULL) (VECTOR-000 (%PROPOSITION.ARGUMENTS DEP))
       (INDEX-000 0) (LENGTH-000 (LENGTH VECTOR-000)))
      (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
      (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
       (CL:PROGN
        (CL:SETQ ARG
         (CL:AREF
          (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY VECTOR-000))
          INDEX-000))
        (CL:SETQ INDEX-000 (CL:1+ INDEX-000)))
       (CL:WHEN
        (CL:NOT
         (CL:OR
          (ISA? (VALUE-OF ARG)
           /PL-KERNEL-KB/SGT-ARITHMETIC-LOGIC-LOGIC-OBJECT)
          (CL:NOT (TRUE? DEP))))
        (CL:SETQ ALWAYS?-000 FALSE) (CL:RETURN))))
     (CL:WHEN ALWAYS?-000 (POST-FOR-EVALUATION DEP))))))

;;; (DEFMETHOD EVALUATE-TIGHTER-INTERVAL ...)

(CL:DEFMETHOD /PL-KERNEL-KB/EVALUATE-TIGHTER-INTERVAL ((INTERVAL /PL-KERNEL-KB/INTERVAL-CACHE)))

;;; (DEFMETHOD EVALUATE-TIGHTER-INTERVAL ...)

(CL:DEFMETHOD /PL-KERNEL-KB/EVALUATE-TIGHTER-INTERVAL ((INTERVAL /PL-KERNEL-KB/INTEGER-INTERVAL-CACHE))
  (CL:WHEN
   (CL:AND (CL:NOT (CL:EQ *TRACED-KEYWORDS* NULL))
    (MEMB? *TRACED-KEYWORDS* /PL-KERNEL-KB/KWD-ARITHMETIC-PROPAGATE))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
    "TIGHTER BOUNDS ON: "
    (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.INTERVAL-MEMBER INTERVAL)
    EOL "   LB: "
    (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.LOWER-BOUND INTERVAL)
    "   UB: "
    (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.UPPER-BOUND INTERVAL) EOL))
  (/PL-KERNEL-KB/EVALUATE-ADJACENT-INEQUALITIES
   (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.INTERVAL-MEMBER INTERVAL))
  (CL:WHEN
   (CL:OR
    (NULL?
     (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.LOWER-BOUND INTERVAL))
    (NULL?
     (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.UPPER-BOUND INTERVAL)))
   (CL:RETURN-FROM /PL-KERNEL-KB/EVALUATE-TIGHTER-INTERVAL))
  (CL:COND
   ((CL:= (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.LOWER-BOUND INTERVAL)
     (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.UPPER-BOUND INTERVAL))
    (EQUATE-VALUES
     (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.INTERVAL-MEMBER INTERVAL)
     (WRAP-INTEGER
      (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.LOWER-BOUND INTERVAL))))
   ((CL:> (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.LOWER-BOUND INTERVAL)
     (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.UPPER-BOUND INTERVAL))
    (/PL-KERNEL-KB/SIGNAL-INTERVAL-CLASH INTERVAL))))

;;; (DEFMETHOD EVALUATE-TIGHTER-INTERVAL ...)

(CL:DEFMETHOD /PL-KERNEL-KB/EVALUATE-TIGHTER-INTERVAL ((INTERVAL /PL-KERNEL-KB/FLOAT-INTERVAL-CACHE))
  (CL:WHEN
   (CL:AND
    (CL:NOT
     (CL:= (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.LOWER-BOUND INTERVAL)
      NULL-FLOAT))
    (CL:NOT
     (CL:= (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.UPPER-BOUND INTERVAL)
      NULL-FLOAT)))
   (CL:COND
    ((CL:= (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.LOWER-BOUND INTERVAL)
      (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.UPPER-BOUND INTERVAL))
     (CL:IF
      (CL:OR
       (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.STRICT-LOWER-BOUND?
        INTERVAL)
       (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.STRICT-UPPER-BOUND?
        INTERVAL))
      (/PL-KERNEL-KB/SIGNAL-INTERVAL-CLASH INTERVAL)
      (EQUATE-VALUES
       (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.INTERVAL-MEMBER INTERVAL)
       (WRAP-FLOAT
        (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.LOWER-BOUND INTERVAL)))))
    ((CL:> (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.LOWER-BOUND INTERVAL)
      (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.UPPER-BOUND INTERVAL))
     (/PL-KERNEL-KB/SIGNAL-INTERVAL-CLASH INTERVAL))))
  (/PL-KERNEL-KB/EVALUATE-ADJACENT-INEQUALITIES
   (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.INTERVAL-MEMBER INTERVAL)))

;;; (DEFMETHOD PROPAGATE-INEQUALITY-TO-INTERVAL-CACHE ...)

(CL:DEFMETHOD /PL-KERNEL-KB/PROPAGATE-INEQUALITY-TO-INTERVAL-CACHE ((SELF /PL-KERNEL-KB/INTERVAL-CACHE) VALUE OPERATOR)
  (CL:PROGN (CL:SETQ OPERATOR OPERATOR) (CL:SETQ VALUE VALUE)))

;;; (DEFMETHOD PROPAGATE-INEQUALITY-TO-INTERVAL-CACHE ...)

(CL:DEFMETHOD /PL-KERNEL-KB/PROPAGATE-INEQUALITY-TO-INTERVAL-CACHE ((SELF /PL-KERNEL-KB/INTEGER-INTERVAL-CACHE) VALUE OPERATOR)
  (CL:LET*
   ((INTEGERVALUE
     (/PL-KERNEL-KB/COERCE-INTERVAL-BOUND-TO-INTEGER VALUE OPERATOR)))
   (CL:DECLARE (CL:TYPE CL:FIXNUM INTEGERVALUE))
   (CL:WHEN (NULL? INTEGERVALUE)
    (CL:RETURN-FROM
     /PL-KERNEL-KB/PROPAGATE-INEQUALITY-TO-INTERVAL-CACHE))
   (CL:COND
    ((CL:OR
      (CL:EQ OPERATOR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB->)
      (CL:EQ OPERATOR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB->=))
     (CL:WHEN
      (CL:OR
       (NULL? (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.LOWER-BOUND SELF))
       (CL:> INTEGERVALUE
        (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.LOWER-BOUND SELF)))
      (CL:SETF (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.LOWER-BOUND SELF)
       INTEGERVALUE)
      (/PL-KERNEL-KB/EVALUATE-TIGHTER-INTERVAL SELF)))
    ((CL:OR
      (CL:EQ OPERATOR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-<)
      (CL:EQ OPERATOR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-=<))
     (CL:WHEN
      (CL:OR
       (NULL? (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.UPPER-BOUND SELF))
       (CL:< INTEGERVALUE
        (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.UPPER-BOUND SELF)))
      (CL:SETF (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.UPPER-BOUND SELF)
       INTEGERVALUE)
      (/PL-KERNEL-KB/EVALUATE-TIGHTER-INTERVAL SELF)))
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
       "`" OPERATOR "' is not a valid case option")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))

;;; (DEFMETHOD PROPAGATE-INEQUALITY-TO-INTERVAL-CACHE ...)

(CL:DEFMETHOD /PL-KERNEL-KB/PROPAGATE-INEQUALITY-TO-INTERVAL-CACHE ((SELF /PL-KERNEL-KB/FLOAT-INTERVAL-CACHE) VALUE OPERATOR)
  (CL:WHEN
   (CL:NOT
    (ISA? VALUE /PL-KERNEL-KB/SGT-ARITHMETIC-STELLA-NUMBER-WRAPPER))
   (CL:RETURN-FROM
    /PL-KERNEL-KB/PROPAGATE-INEQUALITY-TO-INTERVAL-CACHE))
  (CL:LET*
   ((FLOATVALUE (NUMBER-WRAPPER-TO-FLOAT VALUE))
    (TIGHTERINTERVAL? FALSE))
   (CL:DECLARE (CL:TYPE CL:DOUBLE-FLOAT FLOATVALUE))
   (CL:WHEN (CL:= FLOATVALUE NULL-FLOAT)
    (CL:RETURN-FROM
     /PL-KERNEL-KB/PROPAGATE-INEQUALITY-TO-INTERVAL-CACHE))
   (CL:COND
    ((CL:EQ OPERATOR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB->)
     (CL:WHEN
      (CL:OR
       (CL:= (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.LOWER-BOUND SELF)
        NULL-FLOAT)
       (CL:> FLOATVALUE
        (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.LOWER-BOUND SELF))
       (CL:AND
        (CL:= FLOATVALUE
         (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.LOWER-BOUND SELF))
        (CL:NOT
         (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.STRICT-LOWER-BOUND?
          SELF))))
      (CL:SETF (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.LOWER-BOUND SELF)
       FLOATVALUE)
      (CL:SETF
       (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.STRICT-LOWER-BOUND? SELF)
       TRUE)
      (CL:SETQ TIGHTERINTERVAL? TRUE)))
    ((CL:EQ OPERATOR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB->=)
     (CL:WHEN
      (CL:OR
       (CL:= (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.LOWER-BOUND SELF)
        NULL-FLOAT)
       (CL:> FLOATVALUE
        (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.LOWER-BOUND SELF)))
      (CL:SETF (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.LOWER-BOUND SELF)
       FLOATVALUE)
      (CL:SETF
       (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.STRICT-LOWER-BOUND? SELF)
       FALSE)
      (CL:SETQ TIGHTERINTERVAL? TRUE)))
    ((CL:EQ OPERATOR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-<)
     (CL:WHEN
      (CL:OR
       (CL:= (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.UPPER-BOUND SELF)
        NULL-FLOAT)
       (CL:< FLOATVALUE
        (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.UPPER-BOUND SELF))
       (CL:AND
        (CL:= FLOATVALUE
         (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.UPPER-BOUND SELF))
        (CL:NOT
         (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.STRICT-UPPER-BOUND?
          SELF))))
      (CL:SETF (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.UPPER-BOUND SELF)
       FLOATVALUE)
      (CL:SETF
       (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.STRICT-UPPER-BOUND? SELF)
       TRUE)
      (CL:SETQ TIGHTERINTERVAL? TRUE)))
    ((CL:EQ OPERATOR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-=<)
     (CL:WHEN
      (CL:OR
       (CL:= (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.UPPER-BOUND SELF)
        NULL-FLOAT)
       (CL:< FLOATVALUE
        (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.UPPER-BOUND SELF)))
      (CL:SETF (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.UPPER-BOUND SELF)
       FLOATVALUE)
      (CL:SETF
       (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.STRICT-UPPER-BOUND? SELF)
       FALSE)
      (CL:SETQ TIGHTERINTERVAL? TRUE)))
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
       "`" OPERATOR "' is not a valid case option")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
   (CL:WHEN TIGHTERINTERVAL?
    (/PL-KERNEL-KB/EVALUATE-TIGHTER-INTERVAL SELF))))

;;; (DEFUN (INVERSE-INEQUALITY-OPERATOR SURROGATE) ...)

(CL:DEFUN /PL-KERNEL-KB/INVERSE-INEQUALITY-OPERATOR (OPERATOR)
  (CL:COND
   ((CL:EQ OPERATOR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB->)
    /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-<)
   ((CL:EQ OPERATOR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-<)
    /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB->)
   ((CL:EQ OPERATOR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB->=)
    /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-=<)
   ((CL:EQ OPERATOR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-=<)
    /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB->=)
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "`" OPERATOR "' is not a valid case option")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))

;;; (DEFUN UNIFY-INTERVAL-CACHES ...)

(CL:DEFUN /PL-KERNEL-KB/UNIFY-INTERVAL-CACHES (CACHE1 CACHE2 OPERATOR)
  (CL:COND
   ((CL:OR (CL:EQ OPERATOR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB->)
     (CL:EQ OPERATOR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB->=))
    (/PL-KERNEL-KB/PROPAGATE-INEQUALITY-TO-INTERVAL-CACHE CACHE1
     (/PL-KERNEL-KB/ACCESS-INTERVAL-CACHE-BOUNDS CACHE2
      /PL-KERNEL-KB/KWD-ARITHMETIC-LOWER-BOUND)
     OPERATOR)
    (/PL-KERNEL-KB/PROPAGATE-INEQUALITY-TO-INTERVAL-CACHE CACHE2
     (/PL-KERNEL-KB/ACCESS-INTERVAL-CACHE-BOUNDS CACHE1
      /PL-KERNEL-KB/KWD-ARITHMETIC-UPPER-BOUND)
     (/PL-KERNEL-KB/INVERSE-INEQUALITY-OPERATOR OPERATOR)))
   ((CL:OR (CL:EQ OPERATOR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-<)
     (CL:EQ OPERATOR /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-=<))
    (/PL-KERNEL-KB/PROPAGATE-INEQUALITY-TO-INTERVAL-CACHE CACHE1
     (/PL-KERNEL-KB/ACCESS-INTERVAL-CACHE-BOUNDS CACHE2
      /PL-KERNEL-KB/KWD-ARITHMETIC-UPPER-BOUND)
     OPERATOR)
    (/PL-KERNEL-KB/PROPAGATE-INEQUALITY-TO-INTERVAL-CACHE CACHE2
     (/PL-KERNEL-KB/ACCESS-INTERVAL-CACHE-BOUNDS CACHE1
      /PL-KERNEL-KB/KWD-ARITHMETIC-LOWER-BOUND)
     (/PL-KERNEL-KB/INVERSE-INEQUALITY-OPERATOR OPERATOR)))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "`" OPERATOR "' is not a valid case option")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))

;;; (DEFUN (ACCESS-INTERVAL-BOUNDS NUMBER-WRAPPER BOOLEAN) ...)

(CL:DEFUN /PL-KERNEL-KB/ACCESS-INTERVAL-BOUNDS (X LOWERORUPPER)
  (CL:COND
   ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE X)
     /PL-KERNEL-KB/SGT-ARITHMETIC-STELLA-NUMBER-WRAPPER)
    (CL:PROGN (CL:VALUES X FALSE)))
   (CL:T
    (/PL-KERNEL-KB/ACCESS-INTERVAL-CACHE-BOUNDS
     (ACCESS-BINARY-VALUE X
      /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-INTERVAL-CACHE-OF)
     LOWERORUPPER))))

;;; (DEFUN (ACCESS-INTERVAL-CACHE-BOUNDS NUMBER-WRAPPER BOOLEAN) ...)

(CL:DEFUN /PL-KERNEL-KB/ACCESS-INTERVAL-CACHE-BOUNDS (INTERVALCACHE LOWERORUPPER)
  (CL:WHEN (CL:EQ INTERVALCACHE NULL)
   (CL:RETURN-FROM /PL-KERNEL-KB/ACCESS-INTERVAL-CACHE-BOUNDS
    (CL:VALUES NULL FALSE)))
  (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE INTERVALCACHE)))
   (CL:COND
    ((SUBTYPE-OF? TEST-VALUE-000
      /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-INTEGER-INTERVAL-CACHE)
     (CL:PROGN
      (CL:COND
       ((CL:EQ LOWERORUPPER /PL-KERNEL-KB/KWD-ARITHMETIC-LOWER-BOUND)
        (CL:VALUES
         (WRAP-INTEGER
          (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.LOWER-BOUND
           INTERVALCACHE))
         FALSE))
       ((CL:EQ LOWERORUPPER /PL-KERNEL-KB/KWD-ARITHMETIC-UPPER-BOUND)
        (CL:VALUES
         (WRAP-INTEGER
          (/PL-KERNEL-KB/%INTEGER-INTERVAL-CACHE.UPPER-BOUND
           INTERVALCACHE))
         FALSE))
       (CL:T
        (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
         (%%PRINT-STREAM
          (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
          LOWERORUPPER "' is not a valid case option")
         (CL:ERROR
          (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))
    ((SUBTYPE-OF? TEST-VALUE-000
      /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-FLOAT-INTERVAL-CACHE)
     (CL:PROGN
      (CL:COND
       ((CL:EQ LOWERORUPPER /PL-KERNEL-KB/KWD-ARITHMETIC-LOWER-BOUND)
        (CL:VALUES
         (WRAP-FLOAT
          (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.LOWER-BOUND
           INTERVALCACHE))
         (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.STRICT-LOWER-BOUND?
          INTERVALCACHE)))
       ((CL:EQ LOWERORUPPER /PL-KERNEL-KB/KWD-ARITHMETIC-UPPER-BOUND)
        (CL:VALUES
         (WRAP-FLOAT
          (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.UPPER-BOUND
           INTERVALCACHE))
         (/PL-KERNEL-KB/%FLOAT-INTERVAL-CACHE.STRICT-UPPER-BOUND?
          INTERVALCACHE)))
       (CL:T
        (CL:LET* ((STREAM-001 (NEW-OUTPUT-STRING-STREAM)))
         (%%PRINT-STREAM
          (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-001) "`"
          LOWERORUPPER "' is not a valid case option")
         (CL:ERROR
          (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-001))))))))
    (CL:T
     (CL:LET* ((STREAM-002 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-002)
       "`" TEST-VALUE-000 "' is not a valid case option")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-002))))))))

;;; (DEFUN (COMPARE-INTERVAL-BOUNDS? BOOLEAN) ...)

(CL:DEFUN /PL-KERNEL-KB/COMPARE-INTERVAL-BOUNDS? (RELATION X Y)
  (CL:WHEN
   (CL:OR (/PL-KERNEL-KB/NULL-NUMBER? X)
    (/PL-KERNEL-KB/NULL-NUMBER? Y))
   (CL:RETURN-FROM /PL-KERNEL-KB/COMPARE-INTERVAL-BOUNDS? FALSE))
  (CL:COND
   ((CL:EQ RELATION /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-=<)
    (<= (NUMBER-WRAPPER-TO-FLOAT X) (NUMBER-WRAPPER-TO-FLOAT Y)))
   ((CL:EQ RELATION /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-<)
    (< (NUMBER-WRAPPER-TO-FLOAT X) (NUMBER-WRAPPER-TO-FLOAT Y)))
   (CL:T (CL:ERROR (NEW-STELLA-EXCEPTION "Shouldn't get here!")))))

;;; (DEFUN (NULL-NUMBER? BOOLEAN) ...)

(CL:DEFUN /PL-KERNEL-KB/NULL-NUMBER? (SELF)
  (CL:WHEN (CL:EQ SELF NULL)
   (CL:RETURN-FROM /PL-KERNEL-KB/NULL-NUMBER? TRUE))
  (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE SELF)))
   (CL:COND
    ((SUBTYPE-OF-INTEGER? TEST-VALUE-000)
     (CL:PROGN (NULL? (%INTEGER-WRAPPER.WRAPPER-VALUE SELF))))
    ((SUBTYPE-OF-FLOAT? TEST-VALUE-000)
     (CL:PROGN (CL:= (%FLOAT-WRAPPER.WRAPPER-VALUE SELF) NULL-FLOAT)))
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
       "`" TEST-VALUE-000 "' is not a valid case option")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))

;;; (DEFUN (SATISFIES-INTERVAL-BOUNDS? BOOLEAN) ...)

(CL:DEFUN /PL-KERNEL-KB/SATISFIES-INTERVAL-BOUNDS? (OBJECT VALUE)
  (CL:LET*
   ((LB NULL) (STRICTLOWER? FALSE) (UB NULL) (STRICTUPPER? FALSE)
    (ANSWER TRUE))
   (CL:MULTIPLE-VALUE-SETQ (LB STRICTLOWER?)
    (/PL-KERNEL-KB/ACCESS-INTERVAL-BOUNDS OBJECT
     /PL-KERNEL-KB/KWD-ARITHMETIC-LOWER-BOUND))
   (CL:MULTIPLE-VALUE-SETQ (UB STRICTUPPER?)
    (/PL-KERNEL-KB/ACCESS-INTERVAL-BOUNDS OBJECT
     /PL-KERNEL-KB/KWD-ARITHMETIC-UPPER-BOUND))
   (CL:WHEN (/PL-KERNEL-KB/NULL-NUMBER? VALUE)
    (CL:RETURN-FROM /PL-KERNEL-KB/SATISFIES-INTERVAL-BOUNDS? FALSE))
   (CL:WHEN (CL:NOT (/PL-KERNEL-KB/NULL-NUMBER? LB))
    (CL:IF STRICTLOWER?
     (CL:SETQ ANSWER
      (/PL-KERNEL-KB/COMPARE-INTERVAL-BOUNDS?
       /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-< LB VALUE))
     (CL:SETQ ANSWER
      (/PL-KERNEL-KB/COMPARE-INTERVAL-BOUNDS?
       /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-=< LB VALUE))))
   (CL:WHEN (CL:NOT (/PL-KERNEL-KB/NULL-NUMBER? UB))
    (CL:IF STRICTUPPER?
     (CL:SETQ ANSWER
      (CL:AND ANSWER
       (/PL-KERNEL-KB/COMPARE-INTERVAL-BOUNDS?
        /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-< VALUE UB)))
     (CL:SETQ ANSWER
      (CL:AND ANSWER
       (/PL-KERNEL-KB/COMPARE-INTERVAL-BOUNDS?
        /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-=< VALUE UB)))))
   ANSWER))

;;; (DEFUN (LESS-SPECIALIST KEYWORD) ...)

(CL:DEFUN /PL-KERNEL-KB/LESS-SPECIALIST (FRAME LASTMOVE)
  (CL:LET*
   ((PROPOSITION (%CONTROL-FRAME.PROPOSITION FRAME))
    (RELATION (%PROPOSITION.OPERATOR PROPOSITION))
    (XARG
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR
       (%VECTOR.THE-ARRAY (%PROPOSITION.ARGUMENTS PROPOSITION)))
      0))
    (YARG
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR
       (%VECTOR.THE-ARRAY (%PROPOSITION.ARGUMENTS PROPOSITION)))
      1))
    (X (ARGUMENT-BOUND-TO XARG)) (Y (ARGUMENT-BOUND-TO YARG))
    (XBOUND NULL) (STRICTX? FALSE) (YBOUND NULL) (STRICTY? FALSE))
   (CL:SETQ LASTMOVE LASTMOVE)
   (CL:LET* ((SUCCESS? FALSE))
    (CL:WHEN (CL:EQ Y NULL)
     (CL:WHEN (CL:EQ X NULL)
      (CL:RETURN-FROM /PL-KERNEL-KB/LESS-SPECIALIST
       /PL-KERNEL-KB/KWD-ARITHMETIC-TERMINAL-FAILURE))
     (CL:MULTIPLE-VALUE-SETQ (XBOUND STRICTX?)
      (/PL-KERNEL-KB/ACCESS-INTERVAL-BOUNDS X
       /PL-KERNEL-KB/KWD-ARITHMETIC-UPPER-BOUND))
     (CL:COND
      ((CL:EQ RELATION /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-<)
       (CL:WHEN
        (CL:AND (CL:NOT (/PL-KERNEL-KB/NULL-NUMBER? XBOUND))
         (ISA? XBOUND
          /PL-KERNEL-KB/SGT-ARITHMETIC-STELLA-INTEGER-WRAPPER))
        (CL:SETQ XBOUND
         (WRAP-INTEGER
          (CL:1+ (%INTEGER-WRAPPER.WRAPPER-VALUE XBOUND))))))
      (CL:T))
     (CL:WHEN (CL:NOT (/PL-KERNEL-KB/NULL-NUMBER? XBOUND))
      (CL:SETQ SUCCESS? (BIND-VARIABLE-TO-VALUE? YARG XBOUND TRUE)))
     (CL:RETURN-FROM /PL-KERNEL-KB/LESS-SPECIALIST
      (SELECT-PROOF-RESULT SUCCESS? FALSE FALSE)))
    (CL:WHEN (CL:EQ X NULL)
     (CL:MULTIPLE-VALUE-SETQ (YBOUND STRICTY?)
      (/PL-KERNEL-KB/ACCESS-INTERVAL-BOUNDS Y
       /PL-KERNEL-KB/KWD-ARITHMETIC-LOWER-BOUND))
     (CL:COND
      ((CL:EQ RELATION /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-<)
       (CL:WHEN
        (CL:AND (CL:NOT (/PL-KERNEL-KB/NULL-NUMBER? YBOUND))
         (ISA? YBOUND
          /PL-KERNEL-KB/SGT-ARITHMETIC-STELLA-INTEGER-WRAPPER))
        (CL:SETQ YBOUND
         (WRAP-INTEGER
          (CL:1- (%INTEGER-WRAPPER.WRAPPER-VALUE YBOUND))))))
      (CL:T))
     (CL:WHEN (CL:NOT (/PL-KERNEL-KB/NULL-NUMBER? YBOUND))
      (CL:SETQ SUCCESS? (BIND-VARIABLE-TO-VALUE? XARG YBOUND TRUE)))
     (CL:RETURN-FROM /PL-KERNEL-KB/LESS-SPECIALIST
      (SELECT-PROOF-RESULT SUCCESS? FALSE FALSE))))
   (CL:WHEN *REVERSEPOLARITY?*
    (CL:LET* ((TEMPNUMBER X)) (CL:SETQ X Y) (CL:SETQ Y TEMPNUMBER))
    (CL:COND
     ((CL:EQ RELATION /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-<)
      (CL:SETQ RELATION /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-=<))
     ((CL:EQ RELATION /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-=<)
      (CL:SETQ RELATION /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-<))
     (CL:T
      (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
        "`" RELATION "' is not a valid case option")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
   (CL:LET* ((SUCCESS? FALSE))
    (CL:MULTIPLE-VALUE-SETQ (XBOUND STRICTX?)
     (/PL-KERNEL-KB/ACCESS-INTERVAL-BOUNDS X
      /PL-KERNEL-KB/KWD-ARITHMETIC-UPPER-BOUND))
    (CL:MULTIPLE-VALUE-SETQ (YBOUND STRICTY?)
     (/PL-KERNEL-KB/ACCESS-INTERVAL-BOUNDS Y
      /PL-KERNEL-KB/KWD-ARITHMETIC-LOWER-BOUND))
    (CL:COND
     ((CL:EQ RELATION /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-<)
      (CL:SETQ SUCCESS?
       (CL:OR
        (CL:AND (CL:OR STRICTX? STRICTY?)
         (/PL-KERNEL-KB/COMPARE-INTERVAL-BOUNDS?
          /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-=< XBOUND YBOUND))
        (/PL-KERNEL-KB/COMPARE-INTERVAL-BOUNDS?
         /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-< XBOUND YBOUND))))
     ((CL:EQ RELATION /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-=<)
      (CL:SETQ SUCCESS?
       (/PL-KERNEL-KB/COMPARE-INTERVAL-BOUNDS? RELATION XBOUND
        YBOUND)))
     (CL:T
      (CL:LET* ((STREAM-001 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-001)
        "`" RELATION "' is not a valid case option")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-001))))))
    (CL:WHEN SUCCESS? (SET-FRAME-TRUTH-VALUE FRAME TRUE-TRUTH-VALUE)
     (CL:RETURN-FROM /PL-KERNEL-KB/LESS-SPECIALIST
      /PL-KERNEL-KB/KWD-ARITHMETIC-FINAL-SUCCESS))
    (CL:MULTIPLE-VALUE-SETQ (XBOUND STRICTX?)
     (/PL-KERNEL-KB/ACCESS-INTERVAL-BOUNDS X
      /PL-KERNEL-KB/KWD-ARITHMETIC-LOWER-BOUND))
    (CL:MULTIPLE-VALUE-SETQ (YBOUND STRICTY?)
     (/PL-KERNEL-KB/ACCESS-INTERVAL-BOUNDS Y
      /PL-KERNEL-KB/KWD-ARITHMETIC-UPPER-BOUND))
    (CL:COND
     ((CL:EQ RELATION /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-=<)
      (CL:SETQ SUCCESS?
       (CL:OR
        (CL:AND (CL:OR STRICTX? STRICTY?)
         (/PL-KERNEL-KB/COMPARE-INTERVAL-BOUNDS?
          /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-=< YBOUND XBOUND))
        (/PL-KERNEL-KB/COMPARE-INTERVAL-BOUNDS?
         /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-< YBOUND XBOUND))))
     ((CL:EQ RELATION /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-<)
      (CL:SETQ SUCCESS?
       (/PL-KERNEL-KB/COMPARE-INTERVAL-BOUNDS?
        /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-=< YBOUND XBOUND)))
     (CL:T
      (CL:LET* ((STREAM-002 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-002)
        "`" RELATION "' is not a valid case option")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-002))))))
    (CL:WHEN SUCCESS? (SET-FRAME-TRUTH-VALUE FRAME FALSE-TRUTH-VALUE)
     (CL:RETURN-FROM /PL-KERNEL-KB/LESS-SPECIALIST
      /PL-KERNEL-KB/KWD-ARITHMETIC-TERMINAL-FAILURE)))
   (CL:IF (CL:AND (SKOLEM? X) (SKOLEM? Y))
    /PL-KERNEL-KB/KWD-ARITHMETIC-FAILURE
    /PL-KERNEL-KB/KWD-ARITHMETIC-TERMINAL-FAILURE)))

;;; (DEFUN (GREATER-SPECIALIST KEYWORD) ...)

(CL:DEFUN /PL-KERNEL-KB/GREATER-SPECIALIST (FRAME LASTMOVE)
  (CL:LET*
   ((PROPOSITION (%CONTROL-FRAME.PROPOSITION FRAME))
    (RELATION (%PROPOSITION.OPERATOR PROPOSITION))
    (ARGUMENTS (%PROPOSITION.ARGUMENTS PROPOSITION)))
   (CL:COND
    ((CL:EQ RELATION /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB->)
     (CL:SETF (%PROPOSITION.OPERATOR PROPOSITION)
      /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-<))
    ((CL:EQ RELATION /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB->=)
     (CL:SETF (%PROPOSITION.OPERATOR PROPOSITION)
      /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-=<))
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
       "`" RELATION "' is not a valid case option")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
   (CL:LET*
    ((TEMP
      (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY ARGUMENTS))
       0)))
    (CL:LET
     ((SELF (%VECTOR.THE-ARRAY ARGUMENTS))
      (VALUE
       (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY ARGUMENTS))
        1))
      (POSITION 0))
     (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
      (CL:TYPE CL:FIXNUM POSITION))
     (CL:SETF (CL:AREF SELF POSITION) VALUE))
    (CL:LET
     ((SELF (%VECTOR.THE-ARRAY ARGUMENTS)) (VALUE TEMP) (POSITION 1))
     (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
      (CL:TYPE CL:FIXNUM POSITION))
     (CL:SETF (CL:AREF SELF POSITION) VALUE)))
   (/PL-KERNEL-KB/LESS-SPECIALIST FRAME LASTMOVE)))

;;; (DEFUN INEQUALITY-EVALUATOR ...)

(CL:DEFUN /PL-KERNEL-KB/INEQUALITY-EVALUATOR (SELF)
  (CL:WHEN (CL:NOT (TRUE? SELF))
   (CL:RETURN-FROM /PL-KERNEL-KB/INEQUALITY-EVALUATOR))
  (CL:LET*
   ((ARG1
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR
       (%VECTOR.THE-ARRAY (%PROPOSITION.ARGUMENTS SELF)))
      0))
    (ARG2
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR
       (%VECTOR.THE-ARRAY (%PROPOSITION.ARGUMENTS SELF)))
      1))
    (VALUE1 (VALUE-OF ARG1)) (VALUE2 (VALUE-OF ARG2))
    (SKOLEM1?
     (ISA? VALUE1 /PL-KERNEL-KB/SGT-ARITHMETIC-LOGIC-LOGIC-OBJECT))
    (SKOLEM2?
     (ISA? VALUE2 /PL-KERNEL-KB/SGT-ARITHMETIC-LOGIC-LOGIC-OBJECT))
    (OPERATOR (%PROPOSITION.OPERATOR SELF)))
   (CL:WHEN (EQL? VALUE1 VALUE2)
    (CL:COND
     ((CL:NOT (EQL? ARG1 VALUE1))
      (CL:COND
       ((CL:NOT (EQL? ARG2 VALUE2))
        (/PL-KERNEL-KB/UNIFY-INTERVAL-CACHES
         (/PL-KERNEL-KB/GET-INTERVAL-CACHE ARG1)
         (/PL-KERNEL-KB/GET-INTERVAL-CACHE ARG2)
         /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-=<)
        (/PL-KERNEL-KB/UNIFY-INTERVAL-CACHES
         (/PL-KERNEL-KB/GET-INTERVAL-CACHE ARG1)
         (/PL-KERNEL-KB/GET-INTERVAL-CACHE ARG2)
         /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB->=)
        (CL:SETQ VALUE2 ARG2) (CL:SETQ SKOLEM2? TRUE))
       (CL:T
        (/PL-KERNEL-KB/PROPAGATE-INEQUALITY-TO-INTERVAL-CACHE
         (/PL-KERNEL-KB/GET-INTERVAL-CACHE ARG1) VALUE2
         /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-=<)
        (/PL-KERNEL-KB/PROPAGATE-INEQUALITY-TO-INTERVAL-CACHE
         (/PL-KERNEL-KB/GET-INTERVAL-CACHE ARG1) VALUE2
         /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB->=)))
      (CL:SETQ VALUE1 ARG1) (CL:SETQ SKOLEM1? TRUE))
     ((CL:NOT (EQL? ARG2 VALUE2))
      (CL:COND
       ((CL:NOT (EQL? ARG1 VALUE1))
        (/PL-KERNEL-KB/UNIFY-INTERVAL-CACHES
         (/PL-KERNEL-KB/GET-INTERVAL-CACHE ARG2)
         (/PL-KERNEL-KB/GET-INTERVAL-CACHE ARG1)
         /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-=<)
        (/PL-KERNEL-KB/UNIFY-INTERVAL-CACHES
         (/PL-KERNEL-KB/GET-INTERVAL-CACHE ARG2)
         (/PL-KERNEL-KB/GET-INTERVAL-CACHE ARG1)
         /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB->=)
        (CL:SETQ VALUE1 ARG1) (CL:SETQ SKOLEM1? TRUE))
       (CL:T
        (/PL-KERNEL-KB/PROPAGATE-INEQUALITY-TO-INTERVAL-CACHE
         (/PL-KERNEL-KB/GET-INTERVAL-CACHE ARG2) VALUE1
         /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-=<)
        (/PL-KERNEL-KB/PROPAGATE-INEQUALITY-TO-INTERVAL-CACHE
         (/PL-KERNEL-KB/GET-INTERVAL-CACHE ARG2) VALUE1
         /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB->=)))
      (CL:SETQ VALUE2 ARG2) (CL:SETQ SKOLEM2? TRUE))))
   (CL:IF SKOLEM1?
    (CL:IF SKOLEM2?
     (/PL-KERNEL-KB/UNIFY-INTERVAL-CACHES
      (/PL-KERNEL-KB/GET-INTERVAL-CACHE VALUE1)
      (/PL-KERNEL-KB/GET-INTERVAL-CACHE VALUE2) OPERATOR)
     (/PL-KERNEL-KB/PROPAGATE-INEQUALITY-TO-INTERVAL-CACHE
      (/PL-KERNEL-KB/GET-INTERVAL-CACHE VALUE1) VALUE2 OPERATOR))
    (CL:IF SKOLEM2?
     (/PL-KERNEL-KB/PROPAGATE-INEQUALITY-TO-INTERVAL-CACHE
      (/PL-KERNEL-KB/GET-INTERVAL-CACHE VALUE2) VALUE1
      (/PL-KERNEL-KB/INVERSE-INEQUALITY-OPERATOR OPERATOR))
     (EVALUATE-PREDICATE-PROPOSITION SELF)))))

;;; (DEFUN (CONCATENATE-CONSTRAINT OBJECT) ...)

(CL:DEFUN /PL-KERNEL-KB/CONCATENATE-CONSTRAINT (MISSING-ARGUMENT X1 X2 X3)
  (CL:LET* ((VALUE NULL))
   (CL:CASE (%INTEGER-WRAPPER.WRAPPER-VALUE MISSING-ARGUMENT)
    (-1
     (CL:SETQ VALUE
      (CL:IF
       (STRING-EQL?
        (CONCATENATE (%STRING-WRAPPER.WRAPPER-VALUE X1)
         (%STRING-WRAPPER.WRAPPER-VALUE X2))
        (%STRING-WRAPPER.WRAPPER-VALUE X3))
       TRUE-WRAPPER FALSE-WRAPPER)))
    (0
     (CL:LET*
      ((S2 (%STRING-WRAPPER.WRAPPER-VALUE X2))
       (S3 (%STRING-WRAPPER.WRAPPER-VALUE X3))
       (N
        (CL:- (CL:THE CL:FIXNUM (CL:LENGTH S3))
         (CL:THE CL:FIXNUM (CL:LENGTH S2)))))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING S2 S3)
       (CL:TYPE CL:FIXNUM N))
      (CL:IF
       (CL:AND (CL:>= N 0)
        (STRING-EQL? (SUBSEQUENCE S3 N NULL-INTEGER) S2))
       (CL:SETQ VALUE (WRAP-STRING (SUBSEQUENCE S3 0 N)))
       (CL:SETQ VALUE NULL))))
    (1
     (CL:LET*
      ((S1 (%STRING-WRAPPER.WRAPPER-VALUE X1))
       (S3 (%STRING-WRAPPER.WRAPPER-VALUE X3))
       (L1 (CL:THE CL:FIXNUM (CL:LENGTH S1))))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING S1 S3)
       (CL:TYPE CL:FIXNUM L1))
      (CL:IF (STRING-EQL? (SUBSEQUENCE S3 0 L1) S1)
       (CL:SETQ VALUE (WRAP-STRING (SUBSEQUENCE S3 L1 NULL-INTEGER)))
       (CL:SETQ VALUE NULL))))
    (2
     (CL:SETQ VALUE
      (WRAP-STRING
       (CONCATENATE (%STRING-WRAPPER.WRAPPER-VALUE X1)
        (%STRING-WRAPPER.WRAPPER-VALUE X2)))))
    (CL:OTHERWISE))
   VALUE))

;;; (DEFUN (SUBSEQUENCE-SPECIALIST KEYWORD) ...)

(CL:DEFUN /PL-KERNEL-KB/SUBSEQUENCE-SPECIALIST (FRAME LASTMOVE)
  (CL:LET*
   ((PROPOSITION (%CONTROL-FRAME.PROPOSITION FRAME))
    (SUPERARG
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR
       (%VECTOR.THE-ARRAY (%PROPOSITION.ARGUMENTS PROPOSITION)))
      0))
    (SUPERARGVALUE (ARGUMENT-BOUND-TO SUPERARG))
    (P1ARG
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR
       (%VECTOR.THE-ARRAY (%PROPOSITION.ARGUMENTS PROPOSITION)))
      1))
    (P1ARGVALUE (ARGUMENT-BOUND-TO P1ARG))
    (P2ARG
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR
       (%VECTOR.THE-ARRAY (%PROPOSITION.ARGUMENTS PROPOSITION)))
      2))
    (P2ARGVALUE (ARGUMENT-BOUND-TO P2ARG))
    (SUBARG
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR
       (%VECTOR.THE-ARRAY (%PROPOSITION.ARGUMENTS PROPOSITION)))
      3))
    (SUBARGVALUE (ARGUMENT-BOUND-TO SUBARG))
    (ITERATOR
     (DYNAMIC-SLOT-VALUE (%CONTROL-FRAME.DYNAMIC-SLOTS FRAME)
      /PL-KERNEL-KB/SYM-ARITHMETIC-STELLA-ITERATOR NULL)))
   (CL:SETQ LASTMOVE LASTMOVE)
   (CL:WHEN (CL:EQ ITERATOR NULL)
    (CL:COND
     ((CL:EQ SUPERARGVALUE NULL)
      (CL:RETURN-FROM /PL-KERNEL-KB/SUBSEQUENCE-SPECIALIST
       /PL-KERNEL-KB/KWD-ARITHMETIC-FAILURE))
     ((CL:EQ SUBARGVALUE NULL)
      (CL:LET*
       ((P1 NULL-INTEGER) (P2 NULL-INTEGER)
        (SUPER STELLA::NULL-STRING))
       (CL:DECLARE (CL:TYPE CL:FIXNUM P1 P2)
        (CL:TYPE CL:SIMPLE-STRING SUPER))
       (CL:IF (CL:OR (CL:EQ P1ARGVALUE NULL) (CL:EQ P2ARGVALUE NULL))
        (CL:RETURN-FROM /PL-KERNEL-KB/SUBSEQUENCE-SPECIALIST
         /PL-KERNEL-KB/KWD-ARITHMETIC-FAILURE)
        (CL:PROGN
         (CL:SETQ P1 (%INTEGER-WRAPPER.WRAPPER-VALUE P1ARGVALUE))
         (CL:SETQ P2 (%INTEGER-WRAPPER.WRAPPER-VALUE P2ARGVALUE))
         (CL:SETQ SUPER (UNWRAP-STRING SUPERARGVALUE))
         (CL:IF
          (CL:OR (CL:< P1 0)
           (CL:> P2 (CL:THE CL:FIXNUM (CL:LENGTH SUPER))))
          (CL:RETURN-FROM /PL-KERNEL-KB/SUBSEQUENCE-SPECIALIST
           /PL-KERNEL-KB/KWD-ARITHMETIC-TERMINAL-FAILURE)
          (CL:RETURN-FROM /PL-KERNEL-KB/SUBSEQUENCE-SPECIALIST
           (SELECT-PROOF-RESULT
            (BIND-ARGUMENT-TO-VALUE? SUBARG
             (WRAP-STRING (SUBSEQUENCE SUPER P1 P2)) TRUE)
            FALSE TRUE)))))))
     ((CL:EQ P1ARGVALUE NULL)
      (CL:IF (CL:EQ P2ARGVALUE NULL)
       (CL:PROGN
        (CL:SETQ ITERATOR
         (NEW-SUBSTRING-POSITION-ITERATOR (UNWRAP-STRING SUPERARGVALUE)
          (UNWRAP-STRING SUBARGVALUE)))
        (SET-DYNAMIC-SLOT-VALUE (%CONTROL-FRAME.DYNAMIC-SLOTS FRAME)
         /PL-KERNEL-KB/SYM-ARITHMETIC-STELLA-ITERATOR ITERATOR NULL))
       (CL:LET*
        ((P2 (%INTEGER-WRAPPER.WRAPPER-VALUE P2ARGVALUE))
         (SUB (UNWRAP-STRING SUBARGVALUE))
         (LSUB (CL:THE CL:FIXNUM (CL:LENGTH SUB))))
        (CL:DECLARE (CL:TYPE CL:FIXNUM P2 LSUB)
         (CL:TYPE CL:SIMPLE-STRING SUB))
        (CL:COND
         ((CL:> LSUB P2)
          (CL:RETURN-FROM /PL-KERNEL-KB/SUBSEQUENCE-SPECIALIST
           /PL-KERNEL-KB/KWD-ARITHMETIC-TERMINAL-FAILURE))
         ((STRING-EQL?
           (SUBSEQUENCE (UNWRAP-STRING SUPERARGVALUE) (CL:- P2 LSUB)
            P2)
           SUB)
          (CL:RETURN-FROM /PL-KERNEL-KB/SUBSEQUENCE-SPECIALIST
           (SELECT-PROOF-RESULT
            (BIND-ARGUMENT-TO-VALUE? P1ARG
             (WRAP-INTEGER (CL:- P2 LSUB)) TRUE)
            FALSE TRUE)))
         (CL:T
          (CL:RETURN-FROM /PL-KERNEL-KB/SUBSEQUENCE-SPECIALIST
           /PL-KERNEL-KB/KWD-ARITHMETIC-TERMINAL-FAILURE))))))
     ((CL:EQ P2ARGVALUE NULL)
      (CL:LET*
       ((P1 (%INTEGER-WRAPPER.WRAPPER-VALUE P1ARGVALUE))
        (SUB (UNWRAP-STRING SUBARGVALUE))
        (LSUB (CL:THE CL:FIXNUM (CL:LENGTH SUB)))
        (SUPER (UNWRAP-STRING SUPERARGVALUE))
        (LSUPER (CL:THE CL:FIXNUM (CL:LENGTH SUPER))))
       (CL:DECLARE (CL:TYPE CL:FIXNUM P1 LSUB LSUPER)
        (CL:TYPE CL:SIMPLE-STRING SUB SUPER))
       (CL:COND
        ((CL:OR (CL:< P1 0) (CL:> (CL:+ P1 LSUB) LSUPER))
         (CL:RETURN-FROM /PL-KERNEL-KB/SUBSEQUENCE-SPECIALIST
          /PL-KERNEL-KB/KWD-ARITHMETIC-TERMINAL-FAILURE))
        ((STRING-EQL? SUB (SUBSEQUENCE SUPER P1 (CL:+ P1 LSUB)))
         (CL:RETURN-FROM /PL-KERNEL-KB/SUBSEQUENCE-SPECIALIST
          (SELECT-PROOF-RESULT
           (BIND-ARGUMENT-TO-VALUE? P2ARG (WRAP-INTEGER (CL:+ P1 LSUB))
            TRUE)
           FALSE TRUE)))
        (CL:T
         (CL:RETURN-FROM /PL-KERNEL-KB/SUBSEQUENCE-SPECIALIST
          /PL-KERNEL-KB/KWD-ARITHMETIC-TERMINAL-FAILURE)))))
     (CL:T
      (CL:LET*
       ((MATCH?
         (BIND-ARGUMENT-TO-VALUE? SUBARG
          (WRAP-STRING
           (SUBSEQUENCE (UNWRAP-STRING SUPERARGVALUE)
            (%INTEGER-WRAPPER.WRAPPER-VALUE P1ARGVALUE)
            (%INTEGER-WRAPPER.WRAPPER-VALUE P2ARGVALUE)))
          TRUE)))
       (SET-FRAME-TRUTH-VALUE FRAME
        (CL:IF MATCH? TRUE-TRUTH-VALUE FALSE-TRUTH-VALUE))
       (CL:RETURN-FROM /PL-KERNEL-KB/SUBSEQUENCE-SPECIALIST
        (SELECT-PROOF-RESULT MATCH? FALSE TRUE))))))
   (CL:IF
    (CL:AND (NEXT? ITERATOR)
     (BIND-ARGUMENT-TO-VALUE? P1ARG
      (%%VALUE (%ITERATOR.VALUE ITERATOR)) TRUE)
     (BIND-ARGUMENT-TO-VALUE? P2ARG
      (%%VALUE (%%REST (%ITERATOR.VALUE ITERATOR))) TRUE))
    /PL-KERNEL-KB/KWD-ARITHMETIC-CONTINUING-SUCCESS
    /PL-KERNEL-KB/KWD-ARITHMETIC-TERMINAL-FAILURE)))

;;; (DEFUN (STRING-MATCH-COMPUTATION INTEGER-WRAPPER) ...)

(CL:DEFUN /PL-KERNEL-KB/STRING-MATCH-COMPUTATION (PATTERN X START END)
  (CL:WHEN
   (CL:NOT (CL:AND (STRING? PATTERN) (INTEGER? START) (INTEGER? END)))
   (CL:RETURN-FROM /PL-KERNEL-KB/STRING-MATCH-COMPUTATION NULL))
  (CL:LET*
   ((THEPATTERN (%STRING-WRAPPER.WRAPPER-VALUE PATTERN))
    (THESTART (%INTEGER-WRAPPER.WRAPPER-VALUE START))
    (THEEND (%INTEGER-WRAPPER.WRAPPER-VALUE END))
    (NAME
     (CL:IF (STRING? X) (%STRING-WRAPPER.WRAPPER-VALUE X)
      (OBJECT-NAME-STRING X)))
    (MATCHPOSITION NULL-INTEGER))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING THEPATTERN NAME)
    (CL:TYPE CL:FIXNUM THESTART THEEND MATCHPOSITION))
   (CL:WHEN
    (CL:AND (CL:>= THEEND 0)
     (CL:<= THEEND (CL:THE CL:FIXNUM (CL:LENGTH NAME))))
    (CL:SETQ NAME (SUBSEQUENCE NAME THESTART THEEND)))
   (CL:SETQ MATCHPOSITION (STRING-SEARCH NAME THEPATTERN THESTART))
   (CL:IF (DEFINED? MATCHPOSITION) (WRAP-INTEGER MATCHPOSITION) NULL)))

;;; (DEFUN (LENGTH-COMPUTATION INTEGER-WRAPPER) ...)

(CL:DEFUN /PL-KERNEL-KB/LENGTH-COMPUTATION (X)
  (CL:COND
   ((SUBTYPE-OF-STRING? (SAFE-PRIMARY-TYPE X))
    (CL:PROGN
     (WRAP-INTEGER
      (CL:THE CL:FIXNUM
       (CL:LENGTH
        (CL:THE CL:SIMPLE-STRING
         (%STRING-WRAPPER.WRAPPER-VALUE X)))))))
   (CL:T
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
     "Length computation not yet implemented for Lists")
    (WRAP-INTEGER NULL-INTEGER))))

(CL:DEFUN /PL-KERNEL-KB/HELP-STARTUP-ARITHMETIC1 ()
  (CL:PROGN
   (CL:SETQ /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-INTEGER-INTERVAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INTEGER-INTERVAL" NULL 1))
   (CL:SETQ
    /PL-KERNEL-KB/SYM-ARITHMETIC-PL-KERNEL-KB-INTERVAL-LOWER-BOUND
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INTERVAL-LOWER-BOUND" NULL 0))
   (CL:SETQ
    /PL-KERNEL-KB/SYM-ARITHMETIC-PL-KERNEL-KB-INTERVAL-UPPER-BOUND
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INTERVAL-UPPER-BOUND" NULL 0))
   (CL:SETQ /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-INTERVAL-CACHE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INTERVAL-CACHE" NULL 1))
   (CL:SETQ /PL-KERNEL-KB/SYM-ARITHMETIC-STELLA-HOME-CONTEXT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "HOME-CONTEXT"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ /PL-KERNEL-KB/SYM-ARITHMETIC-PL-KERNEL-KB-INTERVAL-MEMBER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INTERVAL-MEMBER" NULL 0))
   (CL:SETQ
    /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-INTEGER-INTERVAL-CACHE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INTEGER-INTERVAL-CACHE" NULL 1))
   (CL:SETQ /PL-KERNEL-KB/SYM-ARITHMETIC-STELLA-LOWER-BOUND
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LOWER-BOUND"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ /PL-KERNEL-KB/SYM-ARITHMETIC-STELLA-UPPER-BOUND
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UPPER-BOUND"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ
    /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-FLOAT-INTERVAL-CACHE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FLOAT-INTERVAL-CACHE" NULL 1))
   (CL:SETQ
    /PL-KERNEL-KB/SYM-ARITHMETIC-PL-KERNEL-KB-STRICT-LOWER-BOUND?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STRICT-LOWER-BOUND?" NULL 0))
   (CL:SETQ
    /PL-KERNEL-KB/SYM-ARITHMETIC-PL-KERNEL-KB-STRICT-UPPER-BOUND?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STRICT-UPPER-BOUND?" NULL 0))
   (CL:SETQ /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-INTERVAL-CACHE-OF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INTERVAL-CACHE-OF" NULL 1))
   (CL:SETQ /PL-KERNEL-KB/SGT-ARITHMETIC-STELLA-INTEGER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INTEGER"
     (GET-STELLA-MODULE "/STELLA" TRUE) 1))
   (CL:SETQ /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB->
    (INTERN-RIGID-SYMBOL-WRT-MODULE ">" NULL 1))
   (CL:SETQ /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB->=
    (INTERN-RIGID-SYMBOL-WRT-MODULE ">=" NULL 1))
   (CL:SETQ /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-<
    (INTERN-RIGID-SYMBOL-WRT-MODULE "<" NULL 1))
   (CL:SETQ /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-=<
    (INTERN-RIGID-SYMBOL-WRT-MODULE "=<" NULL 1))
   (CL:SETQ /PL-KERNEL-KB/SGT-ARITHMETIC-PL-KERNEL-KB-INEQUALITY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INEQUALITY" NULL 1))
   (CL:SETQ /PL-KERNEL-KB/SGT-ARITHMETIC-LOGIC-LOGIC-OBJECT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LOGIC-OBJECT"
     (GET-STELLA-MODULE "/LOGIC" TRUE) 1))
   (CL:SETQ /PL-KERNEL-KB/KWD-ARITHMETIC-PROPAGATE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PROPAGATE" NULL 2))
   (CL:SETQ /PL-KERNEL-KB/SGT-ARITHMETIC-STELLA-NUMBER-WRAPPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NUMBER-WRAPPER"
     (GET-STELLA-MODULE "/STELLA" TRUE) 1))
   (CL:SETQ /PL-KERNEL-KB/KWD-ARITHMETIC-LOWER-BOUND
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LOWER-BOUND" NULL 2))
   (CL:SETQ /PL-KERNEL-KB/KWD-ARITHMETIC-UPPER-BOUND
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UPPER-BOUND" NULL 2))
   (CL:SETQ /PL-KERNEL-KB/KWD-ARITHMETIC-TERMINAL-FAILURE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TERMINAL-FAILURE" NULL 2))
   (CL:SETQ /PL-KERNEL-KB/SGT-ARITHMETIC-STELLA-INTEGER-WRAPPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INTEGER-WRAPPER"
     (GET-STELLA-MODULE "/STELLA" TRUE) 1))
   (CL:SETQ /PL-KERNEL-KB/KWD-ARITHMETIC-FINAL-SUCCESS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FINAL-SUCCESS" NULL 2))
   (CL:SETQ /PL-KERNEL-KB/KWD-ARITHMETIC-FAILURE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FAILURE" NULL 2))
   (CL:SETQ /PL-KERNEL-KB/SYM-ARITHMETIC-STELLA-ITERATOR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ITERATOR"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ /PL-KERNEL-KB/KWD-ARITHMETIC-CONTINUING-SUCCESS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTINUING-SUCCESS" NULL 2))
   (CL:SETQ
    /PL-KERNEL-KB/SYM-ARITHMETIC-PL-KERNEL-KB-STARTUP-ARITHMETIC
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-ARITHMETIC" NULL 0))
   (CL:SETQ
    /PL-KERNEL-KB/SYM-ARITHMETIC-STELLA-METHOD-STARTUP-CLASSNAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))))

(CL:DEFUN /PL-KERNEL-KB/STARTUP-ARITHMETIC ()
  (CL:LET*
   ((*MODULE*
     (GET-STELLA-MODULE "/PL-KERNEL-KB" (> *STARTUP-TIME-PHASE* 1)))
    (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2)
    (/PL-KERNEL-KB/HELP-STARTUP-ARITHMETIC1))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 5)
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "INTEGER-INTERVAL"
        "(DEFCLASS INTEGER-INTERVAL (THING) :DOCUMENTATION \"An interval of integers\" :SLOTS ((INTERVAL-LOWER-BOUND :TYPE INTEGER) (INTERVAL-UPPER-BOUND :TYPE INTEGER)))")))
     (CL:SETF (%CLASS.CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION /PL-KERNEL-KB/NEW-INTEGER-INTERVAL))
     (CL:SETF (%CLASS.CLASS-SLOT-ACCESSOR-CODE CLASS)
      (CL:FUNCTION /PL-KERNEL-KB/ACCESS-INTEGER-INTERVAL-SLOT-VALUE)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "INTERVAL-CACHE"
        "(DEFCLASS INTERVAL-CACHE (THING) :PUBLIC? TRUE :PUBLIC-SLOTS ((HOME-CONTEXT :TYPE CONTEXT) (INTERVAL-MEMBER :TYPE LOGIC-OBJECT)))")))
     (CL:SETF (%CLASS.CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION /PL-KERNEL-KB/NEW-INTERVAL-CACHE))
     (CL:SETF (%CLASS.CLASS-SLOT-ACCESSOR-CODE CLASS)
      (CL:FUNCTION /PL-KERNEL-KB/ACCESS-INTERVAL-CACHE-SLOT-VALUE)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "INTEGER-INTERVAL-CACHE"
        "(DEFCLASS INTEGER-INTERVAL-CACHE (INTERVAL-CACHE) :PUBLIC? TRUE :PUBLIC-SLOTS ((LOWER-BOUND :TYPE INTEGER) (UPPER-BOUND :TYPE INTEGER)) :PRINT-FORM (PRINT-NATIVE-STREAM STREAM \"|IIcache-of: \" (INTERVAL-MEMBER SELF) \" [\" (CHOOSE (DEFINED? (LOWER-BOUND SELF)) (INTEGER-TO-STRING (LOWER-BOUND SELF)) \"?\") \",\" (CHOOSE (DEFINED? (UPPER-BOUND SELF)) (INTEGER-TO-STRING (UPPER-BOUND SELF)) \"?\") \"]|\"))")))
     (CL:SETF (%CLASS.CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION /PL-KERNEL-KB/NEW-INTEGER-INTERVAL-CACHE))
     (CL:SETF (%CLASS.CLASS-SLOT-ACCESSOR-CODE CLASS)
      (CL:FUNCTION
       /PL-KERNEL-KB/ACCESS-INTEGER-INTERVAL-CACHE-SLOT-VALUE)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "FLOAT-INTERVAL-CACHE"
        "(DEFCLASS FLOAT-INTERVAL-CACHE (INTERVAL-CACHE) :PUBLIC? TRUE :PUBLIC-SLOTS ((LOWER-BOUND :TYPE FLOAT) (UPPER-BOUND :TYPE FLOAT) (STRICT-LOWER-BOUND? :TYPE BOOLEAN) (STRICT-UPPER-BOUND? :TYPE BOOLEAN)) :PRINT-FORM (PRINT-NATIVE-STREAM STREAM \"|FIcache-of: \" (INTERVAL-MEMBER SELF) \" \" (CHOOSE (STRICT-LOWER-BOUND? SELF) \"(\" \"[\") (CHOOSE (DEFINED? (LOWER-BOUND SELF)) (FLOAT-TO-STRING (LOWER-BOUND SELF)) \"?\") \",\" (CHOOSE (DEFINED? (UPPER-BOUND SELF)) (FLOAT-TO-STRING (UPPER-BOUND SELF)) \"?\") (CHOOSE (STRICT-UPPER-BOUND? SELF) \")\" \"]\") \"|\"))")))
     (CL:SETF (%CLASS.CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION /PL-KERNEL-KB/NEW-FLOAT-INTERVAL-CACHE))
     (CL:SETF (%CLASS.CLASS-SLOT-ACCESSOR-CODE CLASS)
      (CL:FUNCTION
       /PL-KERNEL-KB/ACCESS-FLOAT-INTERVAL-CACHE-SLOT-VALUE))))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (DEFINE-FUNCTION-OBJECT "ARITHMETIC-EQUAL-TEST"
     "(DEFUN (ARITHMETIC-EQUAL-TEST BOOLEAN) ((X NUMBER-WRAPPER) (Y NUMBER-WRAPPER)) :PUBLIC? TRUE)"
     (CL:FUNCTION /PL-KERNEL-KB/ARITHMETIC-EQUAL-TEST) NULL)
    (DEFINE-FUNCTION-OBJECT "ARITHMETIC-LESS-TEST"
     "(DEFUN (ARITHMETIC-LESS-TEST BOOLEAN) ((X NUMBER-WRAPPER) (Y NUMBER-WRAPPER)) :PUBLIC? TRUE)"
     (CL:FUNCTION /PL-KERNEL-KB/ARITHMETIC-LESS-TEST) NULL)
    (DEFINE-FUNCTION-OBJECT "ARITHMETIC-GREATER-TEST"
     "(DEFUN (ARITHMETIC-GREATER-TEST BOOLEAN) ((X NUMBER-WRAPPER) (Y NUMBER-WRAPPER)) :PUBLIC? TRUE)"
     (CL:FUNCTION /PL-KERNEL-KB/ARITHMETIC-GREATER-TEST) NULL)
    (DEFINE-FUNCTION-OBJECT "PLUS-COMPUTATION"
     "(DEFUN (PLUS-COMPUTATION NUMBER-WRAPPER) ((X NUMBER-WRAPPER) (Y NUMBER-WRAPPER)) :PUBLIC? TRUE)"
     (CL:FUNCTION /PL-KERNEL-KB/PLUS-COMPUTATION) NULL)
    (DEFINE-FUNCTION-OBJECT "MINUS-COMPUTATION"
     "(DEFUN (MINUS-COMPUTATION NUMBER-WRAPPER) ((X NUMBER-WRAPPER) (Y NUMBER-WRAPPER)) :PUBLIC? TRUE)"
     (CL:FUNCTION /PL-KERNEL-KB/MINUS-COMPUTATION) NULL)
    (DEFINE-FUNCTION-OBJECT "TIMES-COMPUTATION"
     "(DEFUN (TIMES-COMPUTATION NUMBER-WRAPPER) ((X NUMBER-WRAPPER) (Y NUMBER-WRAPPER)) :PUBLIC? TRUE)"
     (CL:FUNCTION /PL-KERNEL-KB/TIMES-COMPUTATION) NULL)
    (DEFINE-FUNCTION-OBJECT "DIVIDE-COMPUTATION"
     "(DEFUN (DIVIDE-COMPUTATION NUMBER-WRAPPER) ((X NUMBER-WRAPPER) (Y NUMBER-WRAPPER)) :PUBLIC? TRUE)"
     (CL:FUNCTION /PL-KERNEL-KB/DIVIDE-COMPUTATION) NULL)
    (DEFINE-FUNCTION-OBJECT "SQRT-COMPUTATION"
     "(DEFUN (SQRT-COMPUTATION NUMBER-WRAPPER) ((X NUMBER-WRAPPER)) :PUBLIC? TRUE)"
     (CL:FUNCTION /PL-KERNEL-KB/SQRT-COMPUTATION) NULL)
    (DEFINE-FUNCTION-OBJECT "PLUS-CONSTRAINT"
     "(DEFUN (PLUS-CONSTRAINT OBJECT) ((MISSING-ARGUMENT INTEGER-WRAPPER) (X1 NUMBER-WRAPPER) (X2 NUMBER-WRAPPER) (X3 NUMBER-WRAPPER)))"
     (CL:FUNCTION /PL-KERNEL-KB/PLUS-CONSTRAINT) NULL)
    (DEFINE-FUNCTION-OBJECT "MINUS-CONSTRAINT"
     "(DEFUN (MINUS-CONSTRAINT OBJECT) ((MISSING-ARGUMENT INTEGER-WRAPPER) (X1 NUMBER-WRAPPER) (X2 NUMBER-WRAPPER) (X3 NUMBER-WRAPPER)))"
     (CL:FUNCTION /PL-KERNEL-KB/MINUS-CONSTRAINT) NULL)
    (DEFINE-FUNCTION-OBJECT "TIMES-CONSTRAINT"
     "(DEFUN (TIMES-CONSTRAINT OBJECT) ((MISSING-ARGUMENT INTEGER-WRAPPER) (X1 NUMBER-WRAPPER) (X2 NUMBER-WRAPPER) (X3 NUMBER-WRAPPER)))"
     (CL:FUNCTION /PL-KERNEL-KB/TIMES-CONSTRAINT) NULL)
    (DEFINE-FUNCTION-OBJECT "DIVIDE-CONSTRAINT"
     "(DEFUN (DIVIDE-CONSTRAINT OBJECT) ((MISSING-ARGUMENT INTEGER-WRAPPER) (X1 NUMBER-WRAPPER) (X2 NUMBER-WRAPPER) (X3 NUMBER-WRAPPER)))"
     (CL:FUNCTION /PL-KERNEL-KB/DIVIDE-CONSTRAINT) NULL)
    (DEFINE-FUNCTION-OBJECT "SQRT-CONSTRAINT"
     "(DEFUN (SQRT-CONSTRAINT OBJECT) ((MISSING-ARGUMENT INTEGER-WRAPPER) (X1 NUMBER-WRAPPER) (X2 NUMBER-WRAPPER)))"
     (CL:FUNCTION /PL-KERNEL-KB/SQRT-CONSTRAINT) NULL)
    (DEFINE-FUNCTION-OBJECT "CREATE-INTERVAL-CACHE"
     "(DEFUN (CREATE-INTERVAL-CACHE INTERVAL-CACHE) ((INTERVALMEMBER LOGIC-OBJECT) (INTEGER? BOOLEAN)) :PUBLIC? TRUE)"
     (CL:FUNCTION /PL-KERNEL-KB/CREATE-INTERVAL-CACHE) NULL)
    (DEFINE-FUNCTION-OBJECT "GET-INTERVAL-CACHE"
     "(DEFUN (GET-INTERVAL-CACHE INTERVAL-CACHE) ((SELF LOGIC-OBJECT)) :PUBLIC? TRUE)"
     (CL:FUNCTION /PL-KERNEL-KB/GET-INTERVAL-CACHE) NULL)
    (DEFINE-FUNCTION-OBJECT "COERCE-INTERVAL-BOUND-TO-INTEGER"
     "(DEFUN (COERCE-INTERVAL-BOUND-TO-INTEGER INTEGER) ((SELF OBJECT) (OPERATOR SURROGATE)) :PUBLIC? TRUE)"
     (CL:FUNCTION /PL-KERNEL-KB/COERCE-INTERVAL-BOUND-TO-INTEGER) NULL)
    (DEFINE-FUNCTION-OBJECT "INTEGER.COERCE-INTERVAL-BOUND-TO-INTEGER"
     "(DEFUN (INTEGER.COERCE-INTERVAL-BOUND-TO-INTEGER INTEGER) ((SELF INTEGER-WRAPPER) (OPERATOR SURROGATE)))"
     (CL:FUNCTION
      /PL-KERNEL-KB/INTEGER.COERCE-INTERVAL-BOUND-TO-INTEGER)
     NULL)
    (DEFINE-FUNCTION-OBJECT "FLOAT.COERCE-INTERVAL-BOUND-TO-INTEGER"
     "(DEFUN (FLOAT.COERCE-INTERVAL-BOUND-TO-INTEGER INTEGER) ((SELF FLOAT-WRAPPER) (OPERATOR SURROGATE)))"
     (CL:FUNCTION /PL-KERNEL-KB/FLOAT.COERCE-INTERVAL-BOUND-TO-INTEGER)
     NULL)
    (DEFINE-FUNCTION-OBJECT "SIGNAL-INTERVAL-CLASH"
     "(DEFUN SIGNAL-INTERVAL-CLASH ((INTERVAL INTERVAL-CACHE)))"
     (CL:FUNCTION /PL-KERNEL-KB/SIGNAL-INTERVAL-CLASH) NULL)
    (DEFINE-FUNCTION-OBJECT "EVALUATE-ADJACENT-INEQUALITIES"
     "(DEFUN EVALUATE-ADJACENT-INEQUALITIES ((SELF LOGIC-OBJECT)))"
     (CL:FUNCTION /PL-KERNEL-KB/EVALUATE-ADJACENT-INEQUALITIES) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD EVALUATE-TIGHTER-INTERVAL ((INTERVAL INTERVAL-CACHE)))"
     (CL:FUNCTION /PL-KERNEL-KB/EVALUATE-TIGHTER-INTERVAL) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD EVALUATE-TIGHTER-INTERVAL ((INTERVAL INTEGER-INTERVAL-CACHE)))"
     (CL:FUNCTION /PL-KERNEL-KB/EVALUATE-TIGHTER-INTERVAL) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD EVALUATE-TIGHTER-INTERVAL ((INTERVAL FLOAT-INTERVAL-CACHE)))"
     (CL:FUNCTION /PL-KERNEL-KB/EVALUATE-TIGHTER-INTERVAL) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD PROPAGATE-INEQUALITY-TO-INTERVAL-CACHE ((SELF INTERVAL-CACHE) (VALUE OBJECT) (OPERATOR SURROGATE)))"
     (CL:FUNCTION /PL-KERNEL-KB/PROPAGATE-INEQUALITY-TO-INTERVAL-CACHE)
     NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD PROPAGATE-INEQUALITY-TO-INTERVAL-CACHE ((SELF INTEGER-INTERVAL-CACHE) (VALUE OBJECT) (OPERATOR SURROGATE)))"
     (CL:FUNCTION /PL-KERNEL-KB/PROPAGATE-INEQUALITY-TO-INTERVAL-CACHE)
     NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD PROPAGATE-INEQUALITY-TO-INTERVAL-CACHE ((SELF FLOAT-INTERVAL-CACHE) (VALUE OBJECT) (OPERATOR SURROGATE)))"
     (CL:FUNCTION /PL-KERNEL-KB/PROPAGATE-INEQUALITY-TO-INTERVAL-CACHE)
     NULL)
    (DEFINE-FUNCTION-OBJECT "INVERSE-INEQUALITY-OPERATOR"
     "(DEFUN (INVERSE-INEQUALITY-OPERATOR SURROGATE) ((OPERATOR SURROGATE)))"
     (CL:FUNCTION /PL-KERNEL-KB/INVERSE-INEQUALITY-OPERATOR) NULL)
    (DEFINE-FUNCTION-OBJECT "UNIFY-INTERVAL-CACHES"
     "(DEFUN UNIFY-INTERVAL-CACHES ((CACHE1 INTERVAL-CACHE) (CACHE2 INTERVAL-CACHE) (OPERATOR SURROGATE)))"
     (CL:FUNCTION /PL-KERNEL-KB/UNIFY-INTERVAL-CACHES) NULL)
    (DEFINE-FUNCTION-OBJECT "ACCESS-INTERVAL-BOUNDS"
     "(DEFUN (ACCESS-INTERVAL-BOUNDS NUMBER-WRAPPER BOOLEAN) ((X OBJECT) (LOWERORUPPER KEYWORD)))"
     (CL:FUNCTION /PL-KERNEL-KB/ACCESS-INTERVAL-BOUNDS) NULL)
    (DEFINE-FUNCTION-OBJECT "ACCESS-INTERVAL-CACHE-BOUNDS"
     "(DEFUN (ACCESS-INTERVAL-CACHE-BOUNDS NUMBER-WRAPPER BOOLEAN) ((INTERVALCACHE INTERVAL-CACHE) (LOWERORUPPER KEYWORD)))"
     (CL:FUNCTION /PL-KERNEL-KB/ACCESS-INTERVAL-CACHE-BOUNDS) NULL)
    (DEFINE-FUNCTION-OBJECT "COMPARE-INTERVAL-BOUNDS?"
     "(DEFUN (COMPARE-INTERVAL-BOUNDS? BOOLEAN) ((RELATION SURROGATE) (X NUMBER-WRAPPER) (Y NUMBER-WRAPPER)))"
     (CL:FUNCTION /PL-KERNEL-KB/COMPARE-INTERVAL-BOUNDS?) NULL)
    (DEFINE-FUNCTION-OBJECT "NULL-NUMBER?"
     "(DEFUN (NULL-NUMBER? BOOLEAN) ((SELF NUMBER-WRAPPER)) :PUBLIC? TRUE)"
     (CL:FUNCTION /PL-KERNEL-KB/NULL-NUMBER?) NULL)
    (DEFINE-FUNCTION-OBJECT "SATISFIES-INTERVAL-BOUNDS?"
     "(DEFUN (SATISFIES-INTERVAL-BOUNDS? BOOLEAN) ((OBJECT OBJECT) (VALUE NUMBER-WRAPPER)))"
     (CL:FUNCTION /PL-KERNEL-KB/SATISFIES-INTERVAL-BOUNDS?) NULL)
    (DEFINE-FUNCTION-OBJECT "LESS-SPECIALIST"
     "(DEFUN (LESS-SPECIALIST KEYWORD) ((FRAME CONTROL-FRAME) (LASTMOVE KEYWORD)))"
     (CL:FUNCTION /PL-KERNEL-KB/LESS-SPECIALIST) NULL)
    (DEFINE-FUNCTION-OBJECT "GREATER-SPECIALIST"
     "(DEFUN (GREATER-SPECIALIST KEYWORD) ((FRAME CONTROL-FRAME) (LASTMOVE KEYWORD)))"
     (CL:FUNCTION /PL-KERNEL-KB/GREATER-SPECIALIST) NULL)
    (DEFINE-FUNCTION-OBJECT "INEQUALITY-EVALUATOR"
     "(DEFUN INEQUALITY-EVALUATOR ((SELF PROPOSITION)))"
     (CL:FUNCTION /PL-KERNEL-KB/INEQUALITY-EVALUATOR) NULL)
    (DEFINE-FUNCTION-OBJECT "CONCATENATE-CONSTRAINT"
     "(DEFUN (CONCATENATE-CONSTRAINT OBJECT) ((MISSING-ARGUMENT INTEGER-WRAPPER) (X1 STRING-WRAPPER) (X2 STRING-WRAPPER) (X3 STRING-WRAPPER)))"
     (CL:FUNCTION /PL-KERNEL-KB/CONCATENATE-CONSTRAINT) NULL)
    (DEFINE-FUNCTION-OBJECT "SUBSEQUENCE-SPECIALIST"
     "(DEFUN (SUBSEQUENCE-SPECIALIST KEYWORD) ((FRAME CONTROL-FRAME) (LASTMOVE KEYWORD)))"
     (CL:FUNCTION /PL-KERNEL-KB/SUBSEQUENCE-SPECIALIST) NULL)
    (DEFINE-FUNCTION-OBJECT "STRING-MATCH-COMPUTATION"
     "(DEFUN (STRING-MATCH-COMPUTATION INTEGER-WRAPPER) ((PATTERN OBJECT) (X OBJECT) (START OBJECT) (END OBJECT)))"
     (CL:FUNCTION /PL-KERNEL-KB/STRING-MATCH-COMPUTATION) NULL)
    (DEFINE-FUNCTION-OBJECT "LENGTH-COMPUTATION"
     "(DEFUN (LENGTH-COMPUTATION INTEGER-WRAPPER) ((X OBJECT)))"
     (CL:FUNCTION /PL-KERNEL-KB/LENGTH-COMPUTATION) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-ARITHMETIC"
     "(DEFUN STARTUP-ARITHMETIC () :PUBLIC? TRUE)"
     (CL:FUNCTION /PL-KERNEL-KB/STARTUP-ARITHMETIC) NULL)
    (CL:LET*
     ((FUNCTION
       (LOOKUP-FUNCTION
        /PL-KERNEL-KB/SYM-ARITHMETIC-PL-KERNEL-KB-STARTUP-ARITHMETIC)))
     (SET-DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
      /PL-KERNEL-KB/SYM-ARITHMETIC-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "_Startup-Arithmetic") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))))
