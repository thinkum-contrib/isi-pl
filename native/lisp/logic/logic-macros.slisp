;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; logic-macros.slisp

#|
 +---------------------------- BEGIN LICENSE BLOCK ---------------------------+
 |                                                                            |
 | Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
 |                                                                            |
 | The contents of this file are subject to the Mozilla Public License        |
 | Version 1.1 (the "License"); you may not use this file except in           |
 | compliance with the License. You may obtain a copy of the License at       |
 | http://www.mozilla.org/MPL/                                                |
 |                                                                            |
 | Software distributed under the License is distributed on an "AS IS" basis, |
 | WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
 | for the specific language governing rights and limitations under the       |
 | License.                                                                   |
 |                                                                            |
 | The Original Code is the PowerLoom KR&R System.                            |
 |                                                                            |
 | The Initial Developer of the Original Code is                              |
 | UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
 | 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
 |                                                                            |
 | Portions created by the Initial Developer are Copyright (C) 1997-2006      |
 | the Initial Developer. All Rights Reserved.                                |
 |                                                                            |
 | Contributor(s):                                                            |
 |                                                                            |
 | Alternatively, the contents of this file may be used under the terms of    |
 | either the GNU General Public License Version 2 or later (the "GPL"), or   |
 | the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
 | in which case the provisions of the GPL or the LGPL are applicable instead |
 | of those above. If you wish to allow use of your version of this file only |
 | under the terms of either the GPL or the LGPL, and not to allow others to  |
 | use your version of this file under the terms of the MPL, indicate your    |
 | decision by deleting the provisions above and replace them with the notice |
 | and other provisions required by the GPL or the LGPL. If you do not delete |
 | the provisions above, a recipient may use your version of this file under  |
 | the terms of any one of the MPL, the GPL or the LGPL.                      |
 |                                                                            |
 +----------------------------- END LICENSE BLOCK ----------------------------+
|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-LET NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-NEW NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-OUTPUT-STRING-STREAM NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-SPECIAL NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-*PRINTREADABLY?* NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-TRUE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-PRINT-STREAM NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-EOL NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-HELP-SIGNAL-PROPOSITION-ERROR NULL)
(CL:DEFVAR KWD-LOGIC-MACROS-ERROR NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-SIGNAL-EXCEPTION NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-PARSING-ERROR NULL)
(CL:DEFVAR KWD-LOGIC-MACROS-MESSAGE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-THE-STRING NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-PROPOSITION-ERROR NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-STANDARD-WARNING NULL)
(CL:DEFVAR KWD-LOGIC-MACROS-WARNING NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-DEFUN NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-STRING NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-PRINT NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-RETURN NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-DEF-DISPLAY-GLOBALS NULL)
(CL:DEFVAR KWD-LOGIC-MACROS-COMMON-LISP NULL)
(CL:DEFVAR KWD-LOGIC-MACROS-FUNCTION NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-PROGN NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-SETF NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-TRUTH-VALUE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-FRAME NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-NULL NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-JUSTIFICATION NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-WHEN NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-DEFINED? NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-PARTIAL-MATCH-FRAME NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-CLEAR-FRAME-PARTIAL-TRUTH NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-SETQ NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-LASTMOVE NULL)
(CL:DEFVAR KWD-LOGIC-MACROS-DOWN NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-COND NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-CHECKFORMOVEOUT? NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-PARENT NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-UP NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-STARTTICKS NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-STARTING-CLOCK-TICKS NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-AVAILABLETICKS NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-- NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-ALLOTTED-CLOCK-TICKS NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-CLOCKTICKS NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA--- NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-CURRENT-CLOCK-TICKS NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-QUERY NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-++ NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-<= NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-POP-FRAMES-UP-TO NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-MV-SETQ NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-DEPTH NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-HANDLE-TIMEOUT NULL)
(CL:DEFVAR KWD-LOGIC-MACROS-UP-FAIL NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-1+ NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-OTHERWISE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-UPFRAME NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-DOWNFRAME NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-DOWN NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-AND NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-NULL? NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-1- NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-PROPOSITION NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-NTH NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-ARGUMENTS NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-ARGUMENT-CURSOR NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-CREATE-DOWN-FRAME NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-> NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-CURRENT-DEPTH-CUTOFF NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-EQL? NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-STATE NULL)
(CL:DEFVAR KWD-LOGIC-MACROS-PATTERN NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-HANDLE-DEPTH-VIOLATION NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-NOT NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-FAIL NULL)
(CL:DEFVAR KWD-LOGIC-MACROS-UP-TRUE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-FALSE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-RESULT NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-IF NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-CACHE-QUERY-RESULTS? NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-CACHE-GOAL NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-UPDATE-GOAL-CACHE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-SUCCESS? NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-BREAK NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-KEEP-FRAME NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-POP-DOWN-FRAME NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-APPLY-CACHED-RETRIEVE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-BQUOTE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-CONS-LIST NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-QUOTE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-APPLY-CACHED-ASK NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-*CONTEXT* NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-GET-INFERENCE-CACHE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-*MODULE* NULL)
(CL:DEFVAR KWD-LOGIC-MACROS-META NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-*CLASSIFICATIONSESSION* NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-GET-CLASSIFICATION-SESSION NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-CLASSIFICATION-WORLD NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-OBJECT NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-MISSING-ARGUMENT NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-INTEGER-WRAPPER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-CASE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-BOOLEAN NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-X NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-NUMBER-WRAPPER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-Y NULL)
(CL:DEFVAR KWD-LOGIC-MACROS-PUBLIC? NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-TYPECASE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-FLOAT-WRAPPER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-CAST NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-FLOAT NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-FLOATRESULT NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-WRAP-LITERAL NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-SAFE-CAST NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-INTEGER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-MODULE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-CONTEXT NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-WITH-PROCESS-LOCK NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-*POWERLOOM-LOCK* NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-IGNORE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-*CYC-KLUDGES-ENABLED?* NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LOGIC-STARTUP-LOGIC-MACROS NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM (CL:SPECIAL *STARTUP-TIME-PHASE* *MODULE* NULL-INTEGER NIL))

(CL:DEFUN NEW-LOGIC-EXCEPTION (MESSAGE)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MESSAGE))
  #+MCL
  (CL:CHECK-TYPE MESSAGE CL:SIMPLE-STRING)
  (CL:LET* ((SELF NULL))
   (CL:SETQ SELF
    (CL:MAKE-CONDITION (CL:QUOTE LOGIC-EXCEPTION)
     *CONDITION-MESSAGE-KEYWORD*
     (REPLACE-SUBSTRINGS MESSAGE "~~" "~")))
   SELF))

(CL:DEFUN NEW-PROPOSITION-ERROR (MESSAGE)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MESSAGE))
  #+MCL
  (CL:CHECK-TYPE MESSAGE CL:SIMPLE-STRING)
  (CL:LET* ((SELF NULL))
   (CL:SETQ SELF
    (CL:MAKE-CONDITION (CL:QUOTE PROPOSITION-ERROR)
     *CONDITION-MESSAGE-KEYWORD*
     (REPLACE-SUBSTRINGS MESSAGE "~~" "~")))
   SELF))

(CL:DEFUN NEW-PARSING-ERROR (MESSAGE)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MESSAGE))
  #+MCL
  (CL:CHECK-TYPE MESSAGE CL:SIMPLE-STRING)
  (CL:LET* ((SELF NULL))
   (CL:SETQ SELF
    (CL:MAKE-CONDITION (CL:QUOTE PARSING-ERROR)
     *CONDITION-MESSAGE-KEYWORD*
     (REPLACE-SUBSTRINGS MESSAGE "~~" "~")))
   SELF))

(CL:DEFUN NEW-CLASH (MESSAGE)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MESSAGE))
  #+MCL
  (CL:CHECK-TYPE MESSAGE CL:SIMPLE-STRING)
  (CL:LET* ((SELF NULL))
   (CL:SETQ SELF
    (CL:MAKE-CONDITION (CL:QUOTE CLASH) *CONDITION-MESSAGE-KEYWORD*
     (REPLACE-SUBSTRINGS MESSAGE "~~" "~")))
   SELF))

(CL:DEFUN NEW-FAIL-EXCEPTION (MESSAGE)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MESSAGE))
  #+MCL
  (CL:CHECK-TYPE MESSAGE CL:SIMPLE-STRING)
  (CL:LET* ((SELF NULL))
   (CL:SETQ SELF
    (CL:MAKE-CONDITION (CL:QUOTE FAIL-EXCEPTION)
     *CONDITION-MESSAGE-KEYWORD*
     (REPLACE-SUBSTRINGS MESSAGE "~~" "~")))
   SELF))

(CL:DEFUN NEW-QUERY-THREAD-LIMIT-VIOLATION (MESSAGE)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MESSAGE))
  #+MCL
  (CL:CHECK-TYPE MESSAGE CL:SIMPLE-STRING)
  (CL:LET* ((SELF NULL))
   (CL:SETQ SELF
    (CL:MAKE-CONDITION (CL:QUOTE QUERY-THREAD-LIMIT-VIOLATION)
     *CONDITION-MESSAGE-KEYWORD*
     (REPLACE-SUBSTRINGS MESSAGE "~~" "~")))
   SELF))

;;; (DEFSPECIAL *SUPPRESSNONLOGICOBJECTWARNING?* ...)

(CL:DEFVAR *SUPPRESSNONLOGICOBJECTWARNING?* CL:T)

;;; (DEFMACRO SIGNAL-PARSING-ERROR ...)

(CL:DEFUN SIGNAL-PARSING-ERROR (MESSAGE)
  (CL:LET* ((STREAMVAR (LOCAL-GENSYM "STREAM")))
   (CL:SETQ MESSAGE (FORMAT-MESSAGE-ARGUMENTS MESSAGE CL:NIL))
   (LIST* SYM-LOGIC-MACROS-STELLA-LET
    (CONS
     (CONS STREAMVAR
      (CONS
       (LIST* SYM-LOGIC-MACROS-STELLA-NEW
        SYM-LOGIC-MACROS-STELLA-OUTPUT-STRING-STREAM NIL)
       NIL))
     NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-SPECIAL
     (CONS
      (LIST* SYM-LOGIC-MACROS-STELLA-*PRINTREADABLY?*
       SYM-LOGIC-MACROS-STELLA-TRUE NIL)
      NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-PRINT-STREAM STREAMVAR
      (CONS (WRAP-STRING "PARSING ERROR: ")
       (CONCATENATE MESSAGE
        (LIST* (WRAP-STRING ".") SYM-LOGIC-MACROS-STELLA-EOL NIL))))
     (LIST* SYM-LOGIC-MACROS-LOGIC-HELP-SIGNAL-PROPOSITION-ERROR
      STREAMVAR (CONS KWD-LOGIC-MACROS-ERROR NIL))
     NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-SIGNAL-EXCEPTION
     (LIST* SYM-LOGIC-MACROS-STELLA-NEW
      SYM-LOGIC-MACROS-LOGIC-PARSING-ERROR KWD-LOGIC-MACROS-MESSAGE
      (LIST* SYM-LOGIC-MACROS-STELLA-THE-STRING STREAMVAR NIL) NIL)
     NIL)
    NIL)))

;;; (DEFMACRO SIGNAL-PROPOSITION-ERROR ...)

(CL:DEFUN SIGNAL-PROPOSITION-ERROR (MESSAGE)
  (CL:LET* ((STREAMVAR (LOCAL-GENSYM "STREAM")))
   (CL:SETQ MESSAGE (FORMAT-MESSAGE-ARGUMENTS MESSAGE CL:NIL))
   (LIST* SYM-LOGIC-MACROS-STELLA-LET
    (CONS
     (CONS STREAMVAR
      (CONS
       (LIST* SYM-LOGIC-MACROS-STELLA-NEW
        SYM-LOGIC-MACROS-STELLA-OUTPUT-STRING-STREAM NIL)
       NIL))
     NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-SPECIAL
     (CONS
      (LIST* SYM-LOGIC-MACROS-STELLA-*PRINTREADABLY?*
       SYM-LOGIC-MACROS-STELLA-TRUE NIL)
      NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-PRINT-STREAM STREAMVAR
      (CONS (WRAP-STRING "ERROR: ")
       (CONCATENATE MESSAGE
        (LIST* (WRAP-STRING ".") SYM-LOGIC-MACROS-STELLA-EOL NIL))))
     (LIST* SYM-LOGIC-MACROS-LOGIC-HELP-SIGNAL-PROPOSITION-ERROR
      STREAMVAR (CONS KWD-LOGIC-MACROS-ERROR NIL))
     NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-SIGNAL-EXCEPTION
     (LIST* SYM-LOGIC-MACROS-STELLA-NEW
      SYM-LOGIC-MACROS-LOGIC-PROPOSITION-ERROR KWD-LOGIC-MACROS-MESSAGE
      (LIST* SYM-LOGIC-MACROS-STELLA-THE-STRING STREAMVAR NIL) NIL)
     NIL)
    NIL)))

;;; (DEFMACRO SIGNAL-PROPOSITION-WARNING ...)

(CL:DEFUN SIGNAL-PROPOSITION-WARNING (MESSAGE)
  (LIST* SYM-LOGIC-MACROS-STELLA-SPECIAL
   (CONS
    (LIST* SYM-LOGIC-MACROS-STELLA-*PRINTREADABLY?*
     SYM-LOGIC-MACROS-STELLA-TRUE NIL)
    NIL)
   (LIST* SYM-LOGIC-MACROS-STELLA-PRINT-STREAM
    SYM-LOGIC-MACROS-STELLA-STANDARD-WARNING (WRAP-STRING "WARNING: ")
    (CONCATENATE MESSAGE (CONS SYM-LOGIC-MACROS-STELLA-EOL NIL)))
   (LIST* SYM-LOGIC-MACROS-LOGIC-HELP-SIGNAL-PROPOSITION-ERROR
    SYM-LOGIC-MACROS-STELLA-STANDARD-WARNING KWD-LOGIC-MACROS-WARNING
    NIL)
   NIL))

;;; (DEFMACRO DEF-DISPLAY-GLOBALS ...)

(CL:DEFUN %DEF-DISPLAY-GLOBALS (DISPLAYFUNCTIONNAME GLOBALVARIABLENAMES)
  (CL:LET* ((PRINTCLAUSES NIL))
   (CL:LET* ((G NULL) (ITER-000 (REVERSE GLOBALVARIABLENAMES)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ G (%%VALUE ITER-000))
     (CL:SETQ PRINTCLAUSES
      (APPEND
       (CONS (WRAP-STRING (%SYMBOL.SYMBOL-NAME G))
        (LIST* (WRAP-STRING " =  ") G
         (CONS SYM-LOGIC-MACROS-STELLA-EOL NIL)))
       PRINTCLAUSES))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (LIST* SYM-LOGIC-MACROS-STELLA-DEFUN
    (CONS DISPLAYFUNCTIONNAME
     (CONS SYM-LOGIC-MACROS-STELLA-STRING NIL))
    NIL
    (LIST* SYM-LOGIC-MACROS-STELLA-PRINT SYM-LOGIC-MACROS-STELLA-EOL
     (CONCATENATE PRINTCLAUSES (CONS SYM-LOGIC-MACROS-STELLA-EOL NIL)))
    (LIST* SYM-LOGIC-MACROS-STELLA-RETURN (WRAP-STRING "") NIL) NIL)))

(CL:DEFMACRO DEF-DISPLAY-GLOBALS (CL:&WHOLE EXPRESSION CL:&REST IGNORE)
  (CL:DECLARE (CL:IGNORE IGNORE))
  (CL:LET ((*IGNORETRANSLATIONERRORS?* TRUE))
   (CL-INCREMENTALLY-TRANSLATE EXPRESSION)))

(CL:SETF (CL:MACRO-FUNCTION (CL:QUOTE |/LOGIC/DEF-DISPLAY-GLOBALS|)) (CL:MACRO-FUNCTION (CL:QUOTE DEF-DISPLAY-GLOBALS)))

;;; (DEFMACRO MOVE-IN-PLACE ...)

(CL:DEFUN MOVE-IN-PLACE ()
  (LIST* SYM-LOGIC-MACROS-STELLA-PROGN
   (LIST* SYM-LOGIC-MACROS-STELLA-SETF
    (LIST* SYM-LOGIC-MACROS-LOGIC-TRUTH-VALUE
     SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
    SYM-LOGIC-MACROS-STELLA-NULL NIL)
   (LIST* SYM-LOGIC-MACROS-STELLA-SETF
    (LIST* SYM-LOGIC-MACROS-LOGIC-JUSTIFICATION
     SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
    SYM-LOGIC-MACROS-STELLA-NULL NIL)
   (LIST* SYM-LOGIC-MACROS-STELLA-WHEN
    (LIST* SYM-LOGIC-MACROS-STELLA-DEFINED?
     (LIST* SYM-LOGIC-MACROS-LOGIC-PARTIAL-MATCH-FRAME
      SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
     NIL)
    (LIST* SYM-LOGIC-MACROS-LOGIC-CLEAR-FRAME-PARTIAL-TRUTH
     (LIST* SYM-LOGIC-MACROS-LOGIC-PARTIAL-MATCH-FRAME
      SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
     NIL)
    NIL)
   (LIST* SYM-LOGIC-MACROS-STELLA-SETQ SYM-LOGIC-MACROS-LOGIC-LASTMOVE
    KWD-LOGIC-MACROS-DOWN NIL)
   (LIST* SYM-LOGIC-MACROS-STELLA-COND
    (LIST* SYM-LOGIC-MACROS-LOGIC-CHECKFORMOVEOUT?
     (LIST* SYM-LOGIC-MACROS-STELLA-LET
      (LIST*
       (LIST* SYM-LOGIC-MACROS-LOGIC-PARENT
        (LIST* SYM-LOGIC-MACROS-LOGIC-UP SYM-LOGIC-MACROS-LOGIC-FRAME
         NIL)
        NIL)
       (LIST* SYM-LOGIC-MACROS-LOGIC-STARTTICKS
        (LIST* SYM-LOGIC-MACROS-LOGIC-STARTING-CLOCK-TICKS
         SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
        NIL)
       (LIST* SYM-LOGIC-MACROS-LOGIC-AVAILABLETICKS
        (LIST* SYM-LOGIC-MACROS-STELLA--
         (LIST* SYM-LOGIC-MACROS-LOGIC-ALLOTTED-CLOCK-TICKS
          SYM-LOGIC-MACROS-LOGIC-PARENT NIL)
         (LIST* SYM-LOGIC-MACROS-STELLA--
          SYM-LOGIC-MACROS-LOGIC-CLOCKTICKS
          SYM-LOGIC-MACROS-LOGIC-STARTTICKS NIL)
         (WRAP-INTEGER 1) NIL)
        NIL)
       NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-SETF
       (LIST* SYM-LOGIC-MACROS-LOGIC-ALLOTTED-CLOCK-TICKS
        SYM-LOGIC-MACROS-LOGIC-PARENT NIL)
       SYM-LOGIC-MACROS-LOGIC-AVAILABLETICKS NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA---
       SYM-LOGIC-MACROS-LOGIC-AVAILABLETICKS NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-SETF
       (LIST* SYM-LOGIC-MACROS-LOGIC-ALLOTTED-CLOCK-TICKS
        SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
       SYM-LOGIC-MACROS-LOGIC-AVAILABLETICKS NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-SETF
       (LIST* SYM-LOGIC-MACROS-LOGIC-CURRENT-CLOCK-TICKS
        SYM-LOGIC-MACROS-LOGIC-QUERY NIL)
       (LIST* SYM-LOGIC-MACROS-STELLA-++
        SYM-LOGIC-MACROS-LOGIC-CLOCKTICKS NIL)
       NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-SETF
       (LIST* SYM-LOGIC-MACROS-LOGIC-STARTING-CLOCK-TICKS
        SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
       SYM-LOGIC-MACROS-LOGIC-CLOCKTICKS NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-WHEN
       (LIST* SYM-LOGIC-MACROS-STELLA-<=
        SYM-LOGIC-MACROS-LOGIC-AVAILABLETICKS (WRAP-INTEGER 0) NIL)
       (LIST* SYM-LOGIC-MACROS-LOGIC-POP-FRAMES-UP-TO
        SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
       (LIST* SYM-LOGIC-MACROS-STELLA-MV-SETQ
        (LIST* SYM-LOGIC-MACROS-LOGIC-FRAME
         SYM-LOGIC-MACROS-STELLA-DEPTH NIL)
        (LIST* SYM-LOGIC-MACROS-LOGIC-HANDLE-TIMEOUT
         SYM-LOGIC-MACROS-LOGIC-FRAME SYM-LOGIC-MACROS-STELLA-DEPTH
         NIL)
        NIL)
       (LIST* SYM-LOGIC-MACROS-STELLA-SETQ
        SYM-LOGIC-MACROS-LOGIC-LASTMOVE KWD-LOGIC-MACROS-UP-FAIL NIL)
       (LIST* SYM-LOGIC-MACROS-STELLA---
        (LIST* SYM-LOGIC-MACROS-LOGIC-ALLOTTED-CLOCK-TICKS
         SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
        (LIST* SYM-LOGIC-MACROS-STELLA-1+
         (LIST* SYM-LOGIC-MACROS-STELLA--
          SYM-LOGIC-MACROS-LOGIC-CLOCKTICKS
          SYM-LOGIC-MACROS-LOGIC-STARTTICKS NIL)
         NIL)
        NIL)
       NIL)
      NIL)
     NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-OTHERWISE
     (LIST* SYM-LOGIC-MACROS-STELLA-SETF
      (LIST* SYM-LOGIC-MACROS-LOGIC-CURRENT-CLOCK-TICKS
       SYM-LOGIC-MACROS-LOGIC-QUERY NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-++
       SYM-LOGIC-MACROS-LOGIC-CLOCKTICKS NIL)
      NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-SETF
      (LIST* SYM-LOGIC-MACROS-LOGIC-STARTING-CLOCK-TICKS
       SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
      SYM-LOGIC-MACROS-LOGIC-CLOCKTICKS NIL)
     NIL)
    NIL)
   NIL))

;;; (DEFMACRO MOVE-DOWN ...)

(CL:DEFUN MOVE-DOWN ()
  (LIST* SYM-LOGIC-MACROS-STELLA-LET
   (LIST*
    (LIST* SYM-LOGIC-MACROS-LOGIC-UPFRAME SYM-LOGIC-MACROS-LOGIC-FRAME
     NIL)
    (LIST* SYM-LOGIC-MACROS-LOGIC-DOWNFRAME
     (LIST* SYM-LOGIC-MACROS-LOGIC-DOWN SYM-LOGIC-MACROS-LOGIC-FRAME
      NIL)
     NIL)
    NIL)
   (LIST* SYM-LOGIC-MACROS-STELLA-SETQ SYM-LOGIC-MACROS-STELLA-DEPTH
    (LIST* SYM-LOGIC-MACROS-STELLA-1+ SYM-LOGIC-MACROS-STELLA-DEPTH
     NIL)
    NIL)
   (LIST* SYM-LOGIC-MACROS-STELLA-SETF
    (LIST* SYM-LOGIC-MACROS-LOGIC-CURRENT-CLOCK-TICKS
     SYM-LOGIC-MACROS-LOGIC-QUERY NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-++ SYM-LOGIC-MACROS-LOGIC-CLOCKTICKS
     NIL)
    NIL)
   (LIST* SYM-LOGIC-MACROS-STELLA-COND
    (LIST*
     (LIST* SYM-LOGIC-MACROS-STELLA-DEFINED?
      SYM-LOGIC-MACROS-LOGIC-DOWNFRAME NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-SETQ SYM-LOGIC-MACROS-LOGIC-FRAME
      SYM-LOGIC-MACROS-LOGIC-DOWNFRAME NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-SETF
      (LIST* SYM-LOGIC-MACROS-LOGIC-STARTING-CLOCK-TICKS
       SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
      SYM-LOGIC-MACROS-LOGIC-CLOCKTICKS NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-WHEN
      (LIST* SYM-LOGIC-MACROS-STELLA-AND
       SYM-LOGIC-MACROS-LOGIC-CHECKFORMOVEOUT?
       (LIST* SYM-LOGIC-MACROS-STELLA-NULL?
        (LIST* SYM-LOGIC-MACROS-LOGIC-ALLOTTED-CLOCK-TICKS
         SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
        NIL)
       NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-SETF
       (LIST* SYM-LOGIC-MACROS-LOGIC-ALLOTTED-CLOCK-TICKS
        SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
       (LIST* SYM-LOGIC-MACROS-STELLA-1-
        (LIST* SYM-LOGIC-MACROS-LOGIC-ALLOTTED-CLOCK-TICKS
         SYM-LOGIC-MACROS-LOGIC-UPFRAME NIL)
        NIL)
       NIL)
      NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-SETF
      (LIST* SYM-LOGIC-MACROS-LOGIC-TRUTH-VALUE
       SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
      SYM-LOGIC-MACROS-STELLA-NULL NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-SETF
      (LIST* SYM-LOGIC-MACROS-LOGIC-JUSTIFICATION
       SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
      SYM-LOGIC-MACROS-STELLA-NULL NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-WHEN
      (LIST* SYM-LOGIC-MACROS-STELLA-DEFINED?
       (LIST* SYM-LOGIC-MACROS-LOGIC-PARTIAL-MATCH-FRAME
        SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
       NIL)
      (LIST* SYM-LOGIC-MACROS-LOGIC-CLEAR-FRAME-PARTIAL-TRUTH
       (LIST* SYM-LOGIC-MACROS-LOGIC-PARTIAL-MATCH-FRAME
        SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
       NIL)
      NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-SETQ
      SYM-LOGIC-MACROS-LOGIC-LASTMOVE KWD-LOGIC-MACROS-DOWN NIL)
     NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-OTHERWISE
     (LIST* SYM-LOGIC-MACROS-STELLA-LET
      (CONS
       (LIST* SYM-LOGIC-MACROS-LOGIC-PROPOSITION
        (LIST* SYM-LOGIC-MACROS-STELLA-NTH
         (LIST* SYM-LOGIC-MACROS-STELLA-ARGUMENTS
          (LIST* SYM-LOGIC-MACROS-LOGIC-PROPOSITION
           SYM-LOGIC-MACROS-LOGIC-UPFRAME NIL)
          NIL)
         (LIST* SYM-LOGIC-MACROS-LOGIC-ARGUMENT-CURSOR
          SYM-LOGIC-MACROS-LOGIC-UPFRAME NIL)
         NIL)
        NIL)
       NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-SETQ
       SYM-LOGIC-MACROS-LOGIC-DOWNFRAME
       (LIST* SYM-LOGIC-MACROS-LOGIC-CREATE-DOWN-FRAME
        SYM-LOGIC-MACROS-LOGIC-UPFRAME
        SYM-LOGIC-MACROS-LOGIC-PROPOSITION NIL)
       NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-SETQ SYM-LOGIC-MACROS-LOGIC-FRAME
       SYM-LOGIC-MACROS-LOGIC-DOWNFRAME NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-SETF
       (LIST* SYM-LOGIC-MACROS-LOGIC-STARTING-CLOCK-TICKS
        SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
       SYM-LOGIC-MACROS-LOGIC-CLOCKTICKS NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-WHEN
       SYM-LOGIC-MACROS-LOGIC-CHECKFORMOVEOUT?
       (LIST* SYM-LOGIC-MACROS-STELLA-SETF
        (LIST* SYM-LOGIC-MACROS-LOGIC-ALLOTTED-CLOCK-TICKS
         SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
        (LIST* SYM-LOGIC-MACROS-STELLA-1-
         (LIST* SYM-LOGIC-MACROS-LOGIC-ALLOTTED-CLOCK-TICKS
          SYM-LOGIC-MACROS-LOGIC-UPFRAME NIL)
         NIL)
        NIL)
       NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-SETQ
       SYM-LOGIC-MACROS-LOGIC-LASTMOVE KWD-LOGIC-MACROS-DOWN NIL)
      NIL)
     NIL)
    NIL)
   (LIST* SYM-LOGIC-MACROS-STELLA-WHEN
    (LIST* SYM-LOGIC-MACROS-STELLA-AND
     (LIST* SYM-LOGIC-MACROS-STELLA-> SYM-LOGIC-MACROS-STELLA-DEPTH
      (LIST* SYM-LOGIC-MACROS-LOGIC-CURRENT-DEPTH-CUTOFF
       SYM-LOGIC-MACROS-LOGIC-QUERY NIL)
      NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-EQL?
      (LIST* SYM-LOGIC-MACROS-STELLA-STATE
       SYM-LOGIC-MACROS-LOGIC-UPFRAME NIL)
      KWD-LOGIC-MACROS-PATTERN NIL)
     NIL)
    (LIST* SYM-LOGIC-MACROS-LOGIC-POP-FRAMES-UP-TO
     SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-MV-SETQ
     (LIST* SYM-LOGIC-MACROS-LOGIC-FRAME SYM-LOGIC-MACROS-STELLA-DEPTH
      NIL)
     (LIST* SYM-LOGIC-MACROS-LOGIC-HANDLE-DEPTH-VIOLATION
      SYM-LOGIC-MACROS-LOGIC-FRAME SYM-LOGIC-MACROS-STELLA-DEPTH NIL)
     NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-SETQ SYM-LOGIC-MACROS-LOGIC-LASTMOVE
     KWD-LOGIC-MACROS-UP-FAIL NIL)
    NIL)
   (LIST* SYM-LOGIC-MACROS-STELLA-WHEN
    SYM-LOGIC-MACROS-LOGIC-CHECKFORMOVEOUT?
    (LIST* SYM-LOGIC-MACROS-STELLA-WHEN
     (LIST* SYM-LOGIC-MACROS-STELLA-AND
      (LIST* SYM-LOGIC-MACROS-STELLA-<=
       (LIST* SYM-LOGIC-MACROS-LOGIC-ALLOTTED-CLOCK-TICKS
        SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
       (WRAP-INTEGER 0) NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-NOT
       (LIST* SYM-LOGIC-MACROS-STELLA-EQL?
        SYM-LOGIC-MACROS-LOGIC-LASTMOVE KWD-LOGIC-MACROS-UP-FAIL NIL)
       NIL)
      NIL)
     (LIST* SYM-LOGIC-MACROS-LOGIC-POP-FRAMES-UP-TO
      SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-MV-SETQ
      (LIST* SYM-LOGIC-MACROS-LOGIC-FRAME SYM-LOGIC-MACROS-STELLA-DEPTH
       NIL)
      (LIST* SYM-LOGIC-MACROS-LOGIC-HANDLE-TIMEOUT
       SYM-LOGIC-MACROS-LOGIC-FRAME SYM-LOGIC-MACROS-STELLA-DEPTH NIL)
      NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-SETQ
      SYM-LOGIC-MACROS-LOGIC-LASTMOVE KWD-LOGIC-MACROS-UP-FAIL NIL)
     NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-WHEN
     (LIST* SYM-LOGIC-MACROS-STELLA-EQL?
      SYM-LOGIC-MACROS-LOGIC-LASTMOVE KWD-LOGIC-MACROS-UP-FAIL NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA---
      (LIST* SYM-LOGIC-MACROS-LOGIC-ALLOTTED-CLOCK-TICKS
       SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-1+
       (LIST* SYM-LOGIC-MACROS-STELLA--
        SYM-LOGIC-MACROS-LOGIC-CLOCKTICKS
        (LIST* SYM-LOGIC-MACROS-LOGIC-STARTING-CLOCK-TICKS
         SYM-LOGIC-MACROS-LOGIC-DOWNFRAME NIL)
        NIL)
       NIL)
      NIL)
     NIL)
    NIL)
   NIL))

;;; (DEFMACRO MOVE-UP ...)

(CL:DEFUN MOVE-UP (SUCCESS? KEEPFRAME?)
  (CL:LET* ((LASTMOVE NULL))
   (CL:COND
    ((CL:EQ SUCCESS? SYM-LOGIC-MACROS-STELLA-TRUE)
     (CL:SETQ LASTMOVE KWD-LOGIC-MACROS-UP-TRUE))
    ((CL:EQ SUCCESS? SYM-LOGIC-MACROS-LOGIC-FAIL)
     (CL:SETQ LASTMOVE KWD-LOGIC-MACROS-UP-FAIL)
     (CL:SETQ SUCCESS? SYM-LOGIC-MACROS-STELLA-FALSE))
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
       "`" SUCCESS? "' is not a valid case option")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
   (LIST* SYM-LOGIC-MACROS-STELLA-LET
    (CONS
     (LIST* SYM-LOGIC-MACROS-LOGIC-PARENT
      (LIST* SYM-LOGIC-MACROS-LOGIC-UP SYM-LOGIC-MACROS-LOGIC-FRAME
       NIL)
      NIL)
     NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-WHEN
     (LIST* SYM-LOGIC-MACROS-STELLA-DEFINED?
      SYM-LOGIC-MACROS-LOGIC-PARENT NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-SETF
      (LIST* SYM-LOGIC-MACROS-STELLA-RESULT
       SYM-LOGIC-MACROS-LOGIC-PARENT NIL)
      SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-IF
      (CONS SYM-LOGIC-MACROS-LOGIC-CACHE-QUERY-RESULTS? NIL)
      (LIST* SYM-LOGIC-MACROS-LOGIC-CACHE-GOAL
       SYM-LOGIC-MACROS-LOGIC-FRAME SUCCESS?
       (CONS
        (CL:IF (CL:EQ KEEPFRAME? SYM-LOGIC-MACROS-LOGIC-KEEP-FRAME)
         SYM-LOGIC-MACROS-STELLA-TRUE SYM-LOGIC-MACROS-STELLA-FALSE)
        (CONS SYM-LOGIC-MACROS-LOGIC-CLOCKTICKS NIL)))
      (LIST* SYM-LOGIC-MACROS-LOGIC-UPDATE-GOAL-CACHE
       SYM-LOGIC-MACROS-LOGIC-FRAME SUCCESS? NIL)
      NIL)
     NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-SETQ SYM-LOGIC-MACROS-STELLA-DEPTH
     (LIST* SYM-LOGIC-MACROS-STELLA-1- SYM-LOGIC-MACROS-STELLA-DEPTH
      NIL)
     NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-WHEN
     SYM-LOGIC-MACROS-LOGIC-CHECKFORMOVEOUT?
     (LIST* SYM-LOGIC-MACROS-STELLA-SETF
      (LIST* SYM-LOGIC-MACROS-LOGIC-ALLOTTED-CLOCK-TICKS
       SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
      SYM-LOGIC-MACROS-STELLA-NULL NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-WHEN
      (LIST* SYM-LOGIC-MACROS-STELLA-DEFINED?
       SYM-LOGIC-MACROS-LOGIC-PARENT NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-SETF
       (LIST* SYM-LOGIC-MACROS-LOGIC-ALLOTTED-CLOCK-TICKS
        SYM-LOGIC-MACROS-LOGIC-PARENT NIL)
       (LIST* SYM-LOGIC-MACROS-STELLA--
        (LIST* SYM-LOGIC-MACROS-LOGIC-ALLOTTED-CLOCK-TICKS
         SYM-LOGIC-MACROS-LOGIC-PARENT NIL)
        (LIST* SYM-LOGIC-MACROS-STELLA--
         SYM-LOGIC-MACROS-LOGIC-CLOCKTICKS
         (LIST* SYM-LOGIC-MACROS-LOGIC-STARTING-CLOCK-TICKS
          SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
         NIL)
        (WRAP-INTEGER 1) NIL)
       NIL)
      NIL)
     NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-SETQ SYM-LOGIC-MACROS-LOGIC-FRAME
     SYM-LOGIC-MACROS-LOGIC-PARENT NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-WHEN
     (LIST* SYM-LOGIC-MACROS-STELLA-NULL? SYM-LOGIC-MACROS-LOGIC-FRAME
      NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-SETQ
      SYM-LOGIC-MACROS-LOGIC-SUCCESS? SUCCESS? NIL)
     (CONS SYM-LOGIC-MACROS-STELLA-BREAK NIL) NIL)
    (CONCATENATE
     (CL:IF (CL:EQ KEEPFRAME? SYM-LOGIC-MACROS-LOGIC-KEEP-FRAME) NIL
      (CONS
       (LIST* SYM-LOGIC-MACROS-LOGIC-POP-DOWN-FRAME
        SYM-LOGIC-MACROS-LOGIC-FRAME NIL)
       NIL))
     (LIST*
      (LIST* SYM-LOGIC-MACROS-STELLA-SETQ
       SYM-LOGIC-MACROS-LOGIC-LASTMOVE LASTMOVE NIL)
      SYM-LOGIC-MACROS-LOGIC-LASTMOVE NIL)))))

;;; (DEFMACRO APPLY-RETRIEVE ...)

(CL:DEFUN APPLY-RETRIEVE (BODY)
  "Execute a query composed of io-variables `variables'
and body `queryBody'.  Before executing, bind variables to `inputBindings'
(in sequence). If one variable is left unbound, returns a cons list of
bindings of that variable.  If two or more are unbound, returns
a cons list of cons lists of bindings:
  `(apply-retrieve variables queryBody inputBindings)'"
  (CL:LET* ((GENSYMNAME (METHOD-GENSYM "QUERY")))
   (LIST* SYM-LOGIC-MACROS-LOGIC-APPLY-CACHED-RETRIEVE
    (LIST* SYM-LOGIC-MACROS-STELLA-BQUOTE (%%VALUE BODY) NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-BQUOTE (%%VALUE (%%REST BODY)) NIL)
    (CONS SYM-LOGIC-MACROS-STELLA-CONS-LIST
     (CONCATENATE (%%VALUE (%%REST (%%REST BODY))) NIL))
    (CONS SYM-LOGIC-MACROS-STELLA-CONS-LIST
     (CONCATENATE (NTH-REST BODY 3) NIL))
    (LIST* SYM-LOGIC-MACROS-STELLA-QUOTE GENSYMNAME NIL) NIL)))

;;; (DEFMACRO APPLY-ASK ...)

(CL:DEFUN APPLY-ASK (BODY)
  "Execute a yes/no query composed of input-variables
`inputVariables' and body `queryBody'.  Before executing, bind variables
to `inputBindings' (in sequence).
  `(apply-ask inputVariables queryBody inputBindings)'"
  (CL:LET* ((GENSYMNAME (METHOD-GENSYM "QUERY")))
   (LIST* SYM-LOGIC-MACROS-LOGIC-APPLY-CACHED-ASK
    (LIST* SYM-LOGIC-MACROS-STELLA-BQUOTE (%%VALUE BODY) NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-BQUOTE (%%VALUE (%%REST BODY)) NIL)
    (CONS SYM-LOGIC-MACROS-STELLA-CONS-LIST
     (CONCATENATE (%%VALUE (%%REST (%%REST BODY))) NIL))
    (CONS SYM-LOGIC-MACROS-STELLA-CONS-LIST
     (CONCATENATE (NTH-REST BODY 3) NIL))
    (LIST* SYM-LOGIC-MACROS-STELLA-QUOTE GENSYMNAME NIL) NIL)))

;;; (DEFMACRO WITHIN-META-CACHE ...)

(CL:DEFUN WITHIN-META-CACHE (BODY)
  "Execute `body' within the meta cache of the current module.
Set appropriate special variables."
  (LIST* SYM-LOGIC-MACROS-STELLA-SPECIAL
   (CONS
    (LIST* SYM-LOGIC-MACROS-STELLA-*CONTEXT*
     (LIST* SYM-LOGIC-MACROS-LOGIC-GET-INFERENCE-CACHE
      SYM-LOGIC-MACROS-STELLA-*MODULE* KWD-LOGIC-MACROS-META NIL)
     NIL)
    NIL)
   (CONCATENATE BODY NIL)))

;;; (DEFMACRO WITHIN-CLASSIFICATION-SESSION ...)

(CL:DEFUN WITHIN-CLASSIFICATION-SESSION (DESCRIPTIONORINSTANCE BODY)
  "Used during classification.  Execute `body' within the indicated
classification session and inference world."
  (LIST* SYM-LOGIC-MACROS-STELLA-SPECIAL
   (LIST*
    (LIST* SYM-LOGIC-MACROS-LOGIC-*CLASSIFICATIONSESSION*
     (LIST* SYM-LOGIC-MACROS-LOGIC-GET-CLASSIFICATION-SESSION
      DESCRIPTIONORINSTANCE NIL)
     NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-*CONTEXT*
     (LIST* SYM-LOGIC-MACROS-LOGIC-CLASSIFICATION-WORLD
      SYM-LOGIC-MACROS-LOGIC-*CLASSIFICATIONSESSION* NIL)
     NIL)
    NIL)
   (CONCATENATE BODY NIL)))

;;; (VERBATIM :COMMON-LISP ...)

(CL:UNLESS (CL:FIND-PACKAGE "POWERLOOM-USER") (CL:DEFPACKAGE "POWERLOOM-USER" (:NICKNAMES "PL-USER")))

;;; (VERBATIM :COMMON-LISP ...)

(CL:defpackage "LOOM-API" (:use))

;;; (VERBATIM :COMMON-LISP ...)

(CL:defpackage "PLI"
     (:use "STELLA")
     (:import-from "STELLA" "NULL-STRING" "CONSIFY" "LISTIFY")
     (:export #:INITIALIZE #:RESET-POWERLOOM #:CLEAR-CACHES  #:NEW-ENVIRONMENT
              #:ASSERTION-ENV #:TAXONOMIC-ENV #:INFERENCE-ENV
	      #:PL-ITERATOR #:LISTIFY #:CONSIFY #:NEXT? #:EMPTY? #:VALUE
              #:GET-KEYWORD #:GET-SYMBOL
	      #:GET-OPERATOR #:GET-OBJECT #:S-GET-OBJECT
              #:GET-CONCEPT #:S-GET-CONCEPT #:GET-RELATION #:S-GET-RELATION
              #:GET-NAME #:GET-SHORT-NAME #:GET-NAME-IN-MODULE
	      #:OBJECT-TO-STRING #:OBJECT-TO-INTEGER #:OBJECT-TO-FLOAT 
	      #:OBJECT-TO-PARSABLE-STRING #:STRING-TO-OBJECT
	      #:GET-PROPOSITION #:S-GET-PROPOSITION
              #:GET-PROPOSITIONS #:S-GET-PROPOSITIONS
	      #:GET-BINARY-PROPOSITION #:GET-BINARY-PROPOSITIONS
	      #:GET-INFERRED-BINARY-PROPOSITION-VALUES
	      #:S-GET-INFERRED-BINARY-PROPOSITION-VALUES
	      #:GET-PROPOSITIONS-OF #:S-GET-PROPOSITIONS-OF
              #:GET-PROPOSITIONS-IN-MODULE
	      #:IS-TRUE-UNARY-PROPOSITION #:IS-TRUE-BINARY-PROPOSITION
	      #:IS-TRUE-PROPOSITION #:S-IS-TRUE-PROPOSITION
	      #:IS-SUBRELATION
	      #:GET-PROPER-SUBRELATIONS #:GET-DIRECT-SUBRELATIONS
	      #:GET-PROPER-SUPERRELATIONS #:GET-DIRECT-SUPERRELATIONS
	      #:IS-A
	      #:GET-CONCEPT-INSTANCES #:S-GET-CONCEPT-INSTANCES
	      #:GET-DIRECT-CONCEPT-INSTANCES #:S-GET-DIRECT-CONCEPT-INSTANCES
	      #:GET-CONCEPT-INSTANCES-MATCHING-VALUE
	      #:GET-CONCEPT-INSTANCE-MATCHING-VALUE
	      #:GET-TYPES #:GET-DIRECT-TYPES #:GET-RELATION-EXTENSION
	      #:S-GET-RELATION-EXTENSION
	      #:GET-MODULE #:GET-CURRENT-MODULE #:GET-MODULES #:GET-HOME-MODULE
              #:CREATE-MODULE #:S-CREATE-MODULE
	      #:CHANGE-MODULE #:S-CHANGE-MODULE #:CLEAR-MODULE #:S-CLEAR-MODULE
	      #:GET-CHILD-MODULES #:S-GET-CHILD-MODULES
	      #:GET-PARENT-MODULES #:S-GET-PARENT-MODULES
              #:GENERATE-UNIQUE-NAME
              #:CREATE-KEYWORD #:CREATE-SYMBOL
	      #:CREATE-OBJECT #:S-CREATE-OBJECT
	      #:CREATE-CONCEPT #:S-CREATE-CONCEPT
              #:CREATE-RELATION #:S-CREATE-RELATION
              #:CREATE-FUNCTION #:S-CREATE-FUNCTION
              #:REGISTER-SPECIALIST-FUNCTION #:S-REGISTER-SPECIALIST-FUNCTION
              #:CREATE-ENUMERATED-LIST #:CREATE-ENUMERATED-SET
	      #:DESTROY-OBJECT #:S-DESTROY-OBJECT
	      #:ASSERT-UNARY-PROPOSITION #:ASSERT-BINARY-PROPOSITION #:ASSERT-NARY-PROPOSITION
	      #:ASSERT-PROPOSITION #:S-ASSERT-PROPOSITION
	      #:RETRACT-UNARY-PROPOSITION #:RETRACT-BINARY-PROPOSITION #:RETRACT-NARY-PROPOSITION
              #:RETRACT-PROPOSITION #:S-RETRACT-PROPOSITION
              #:CONCEIVE #:S-CONCEIVE
	      #:GET-RULES #:S-GET-RULES #:S-PRINT-RULES #:RUN-FORWARD-RULES
	      #:GET-ARITY #:S-GET-ARITY #:GET-DOMAIN #:S-GET-DOMAIN
	      #:GET-RANGE #:S-GET-RANGE #:GET-NTH-DOMAIN #:S-GET-NTH-DOMAIN
	      #:LOAD #:LOAD-STREAM #:LOAD-NATIVE-STREAM
              #:SAVE-MODULE #:S-SAVE-MODULE
	      #:GET-PREDICATE #:GET-COLUMN-COUNT 
              #:GET-NTH-VALUE #:GET-NTH-LOGIC-OBJECT
	      #:GET-NTH-STRING #:GET-NTH-INTEGER #:GET-NTH-FLOAT
              #:GET-ENUMERATED-COLLECTION-MEMBERS
	      #:EVALUATE #:S-EVALUATE
              #:IS-LOGIC-OBJECT #:IS-INTEGER #:IS-FLOAT #:IS-NUMBER #:IS-STRING
              #:IS-ENUMERATED-COLLECTION #:IS-ENUMERATED-SET #:IS-ENUMERATED-LIST
	      #:IS-TRUE #:IS-FALSE #:IS-UNKNOWN #:IS-INCONSISTENT #:IS-STRICT #:IS-DEFAULT
	      #:ASK #:S-ASK #:RETRIEVE #:S-RETRIEVE
              ))

;;; (DEFMACRO DEFINE-COMPUTED-CONSTRAINT ...)

(CL:DEFUN DEFINE-COMPUTED-CONSTRAINT (NAME VAR-LIST CONSTRAINT-TEST POSITION-COMPUTATIONS)
  "Defines `name' to be a constraint computation which uses
`constraint-test' to determine if a fully bound set of variables
satisfies the constraint.  The forms in `position-computations'
are used to compute the value for each of the positions. All such
computations must set the variable `value' to be the result
computed for the missing position.  Setting `value' to `null' for
any such computation means that that particular argument cannot
be computed from the others.  The input variables in `var-list'
will be bound to the N arguments to the constraint.
  The generated function will return a Stella Object and take as 
inputs the values of the N arguments to the constraint.  A value
of `null' means that the value is not available.  If all
arguments are not `null', then the return value will be a Stella
wrapped boolean indicating whether the constraint is satisified
or not.
  If more than one input value is `null', then this constraint
code will not be called."
  (CL:LET*
   ((VALUECOMPUTATIONCODE NIL) (VALUESYMBOL (INTERN-SYMBOL "VALUE")))
   (CL:LET*
    ((COMPUTATION NULL) (ITER-000 POSITION-COMPUTATIONS)
     (I NULL-INTEGER) (ITER-001 0) (COLLECT-000 NULL))
    (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-001))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ COMPUTATION (%%VALUE ITER-000)) (CL:SETQ I ITER-001)
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-000
        (CONS (CONS (WRAP-INTEGER I) (CONS COMPUTATION NIL)) NIL))
       (CL:IF (CL:EQ VALUECOMPUTATIONCODE NIL)
        (CL:SETQ VALUECOMPUTATIONCODE COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST VALUECOMPUTATIONCODE
         COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000)
        (CONS (CONS (WRAP-INTEGER I) (CONS COMPUTATION NIL)) NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))
     (CL:SETQ ITER-000 (%%REST ITER-000))
     (CL:SETQ ITER-001 (CL:1+ ITER-001))))
   (LIST* SYM-LOGIC-MACROS-STELLA-DEFUN
    (CONS NAME (CONS SYM-LOGIC-MACROS-STELLA-OBJECT NIL))
    (CONS
     (LIST* SYM-LOGIC-MACROS-LOGIC-MISSING-ARGUMENT
      SYM-LOGIC-MACROS-STELLA-INTEGER-WRAPPER NIL)
     (CONCATENATE VAR-LIST NIL))
    (LIST* SYM-LOGIC-MACROS-STELLA-LET
     (CONS
      (CONS VALUESYMBOL
       (LIST* SYM-LOGIC-MACROS-STELLA-OBJECT
        SYM-LOGIC-MACROS-STELLA-NULL NIL))
      NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-CASE
      (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
       SYM-LOGIC-MACROS-LOGIC-MISSING-ARGUMENT NIL)
      (LIST* (WRAP-INTEGER -1) CONSTRAINT-TEST NIL)
      (CONCATENATE VALUECOMPUTATIONCODE
       (CONS
        (LIST* SYM-LOGIC-MACROS-STELLA-OTHERWISE
         SYM-LOGIC-MACROS-STELLA-NULL NIL)
        NIL)))
     (LIST* SYM-LOGIC-MACROS-STELLA-RETURN VALUESYMBOL NIL) NIL)
    NIL)))

;;; (DEFMACRO DEFINE-ARITHMETIC-TEST-ON-WRAPPERS ...)

(CL:DEFUN DEFINE-ARITHMETIC-TEST-ON-WRAPPERS (NAME TEST-NAME)
  "Defines `name' as an arithmetic comparision operation using the
test `test-name'.  It will take two wrapped number parameters and
return a `boolean'.  The code will use the appropriate test for
the specific subtype of wrapped number actually passed in."
  (LIST* SYM-LOGIC-MACROS-STELLA-DEFUN
   (CONS NAME (CONS SYM-LOGIC-MACROS-STELLA-BOOLEAN NIL))
   (LIST*
    (LIST* SYM-LOGIC-MACROS-STELLA-X
     SYM-LOGIC-MACROS-STELLA-NUMBER-WRAPPER NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-Y
     SYM-LOGIC-MACROS-STELLA-NUMBER-WRAPPER NIL)
    NIL)
   KWD-LOGIC-MACROS-PUBLIC? SYM-LOGIC-MACROS-STELLA-TRUE
   (LIST* SYM-LOGIC-MACROS-STELLA-TYPECASE SYM-LOGIC-MACROS-STELLA-X
    (LIST* SYM-LOGIC-MACROS-STELLA-INTEGER-WRAPPER
     (LIST* SYM-LOGIC-MACROS-STELLA-TYPECASE SYM-LOGIC-MACROS-STELLA-Y
      (LIST* SYM-LOGIC-MACROS-STELLA-INTEGER-WRAPPER
       (LIST* SYM-LOGIC-MACROS-STELLA-RETURN
        (CONS TEST-NAME
         (LIST*
          (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
           SYM-LOGIC-MACROS-STELLA-X NIL)
          (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
           SYM-LOGIC-MACROS-STELLA-Y NIL)
          NIL))
        NIL)
       NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-FLOAT-WRAPPER
       (LIST* SYM-LOGIC-MACROS-STELLA-RETURN
        (CONS TEST-NAME
         (LIST*
          (LIST* SYM-LOGIC-MACROS-STELLA-CAST
           (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
            SYM-LOGIC-MACROS-STELLA-X NIL)
           SYM-LOGIC-MACROS-STELLA-FLOAT NIL)
          (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
           SYM-LOGIC-MACROS-STELLA-Y NIL)
          NIL))
        NIL)
       NIL)
      NIL)
     NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-FLOAT-WRAPPER
     (LIST* SYM-LOGIC-MACROS-STELLA-TYPECASE SYM-LOGIC-MACROS-STELLA-Y
      (LIST* SYM-LOGIC-MACROS-STELLA-INTEGER-WRAPPER
       (LIST* SYM-LOGIC-MACROS-STELLA-RETURN
        (CONS TEST-NAME
         (LIST*
          (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
           SYM-LOGIC-MACROS-STELLA-X NIL)
          (LIST* SYM-LOGIC-MACROS-STELLA-CAST
           (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
            SYM-LOGIC-MACROS-STELLA-Y NIL)
           SYM-LOGIC-MACROS-STELLA-FLOAT NIL)
          NIL))
        NIL)
       NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-FLOAT-WRAPPER
       (LIST* SYM-LOGIC-MACROS-STELLA-RETURN
        (CONS TEST-NAME
         (LIST*
          (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
           SYM-LOGIC-MACROS-STELLA-X NIL)
          (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
           SYM-LOGIC-MACROS-STELLA-Y NIL)
          NIL))
        NIL)
       NIL)
      NIL)
     NIL)
    NIL)
   NIL))

;;; (DEFMACRO DEFINE-ARITHMETIC-OPERATION-ON-WRAPPERS ...)

(CL:DEFUN DEFINE-ARITHMETIC-OPERATION-ON-WRAPPERS (NAME OPERATION-NAME)
  "Defines `name' as an arithmetic comparision operation using the
test `test-name'.  It will take two wrapped number parameters and
return a wrapped number.  The code will use the appropriate test
for the specific subtype of wrapped number actually passed in,
and return the appropriate subtype of wrapped number based on the
normal arithmetic contagion rules.
  
For example, if both input parameters are wrapped integers then
the output will be a wrapped integer.  If the inputs are a
wrapped integer and a wrapped float then the output will be a
wrapped float, etc."
  (LIST* SYM-LOGIC-MACROS-STELLA-DEFUN
   (CONS NAME (CONS SYM-LOGIC-MACROS-STELLA-NUMBER-WRAPPER NIL))
   (LIST*
    (LIST* SYM-LOGIC-MACROS-STELLA-X
     SYM-LOGIC-MACROS-STELLA-NUMBER-WRAPPER NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-Y
     SYM-LOGIC-MACROS-STELLA-NUMBER-WRAPPER NIL)
    NIL)
   KWD-LOGIC-MACROS-PUBLIC? SYM-LOGIC-MACROS-STELLA-TRUE
   (LIST* SYM-LOGIC-MACROS-STELLA-LET
    (CONS
     (LIST* SYM-LOGIC-MACROS-LOGIC-FLOATRESULT
      SYM-LOGIC-MACROS-STELLA-FLOAT SYM-LOGIC-MACROS-STELLA-NULL NIL)
     NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-TYPECASE SYM-LOGIC-MACROS-STELLA-X
     (LIST* SYM-LOGIC-MACROS-STELLA-INTEGER-WRAPPER
      (LIST* SYM-LOGIC-MACROS-STELLA-TYPECASE SYM-LOGIC-MACROS-STELLA-Y
       (LIST* SYM-LOGIC-MACROS-STELLA-INTEGER-WRAPPER
        (LIST* SYM-LOGIC-MACROS-STELLA-RETURN
         (LIST* SYM-LOGIC-MACROS-STELLA-WRAP-LITERAL
          (LIST* SYM-LOGIC-MACROS-STELLA-SAFE-CAST
           (CONS OPERATION-NAME
            (LIST*
             (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
              SYM-LOGIC-MACROS-STELLA-X NIL)
             (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
              SYM-LOGIC-MACROS-STELLA-Y NIL)
             NIL))
           SYM-LOGIC-MACROS-STELLA-INTEGER NIL)
          NIL)
         NIL)
        NIL)
       (LIST* SYM-LOGIC-MACROS-STELLA-FLOAT-WRAPPER
        (LIST* SYM-LOGIC-MACROS-STELLA-SETQ
         SYM-LOGIC-MACROS-LOGIC-FLOATRESULT
         (CONS OPERATION-NAME
          (LIST*
           (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
            SYM-LOGIC-MACROS-STELLA-X NIL)
           (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
            SYM-LOGIC-MACROS-STELLA-Y NIL)
           NIL))
         NIL)
        NIL)
       NIL)
      NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-FLOAT-WRAPPER
      (LIST* SYM-LOGIC-MACROS-STELLA-TYPECASE SYM-LOGIC-MACROS-STELLA-Y
       (LIST*
        (LIST* SYM-LOGIC-MACROS-STELLA-INTEGER-WRAPPER
         SYM-LOGIC-MACROS-STELLA-FLOAT-WRAPPER NIL)
        (LIST* SYM-LOGIC-MACROS-STELLA-SETQ
         SYM-LOGIC-MACROS-LOGIC-FLOATRESULT
         (CONS OPERATION-NAME
          (LIST*
           (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
            SYM-LOGIC-MACROS-STELLA-X NIL)
           (LIST* SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
            SYM-LOGIC-MACROS-STELLA-Y NIL)
           NIL))
         NIL)
        NIL)
       NIL)
      NIL)
     NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-RETURN
     (LIST* SYM-LOGIC-MACROS-STELLA-WRAP-LITERAL
      SYM-LOGIC-MACROS-LOGIC-FLOATRESULT NIL)
     NIL)
    NIL)
   NIL))

;;; (DEFMACRO WITH-LOGIC-ENVIRONMENT ...)

(CL:DEFUN WITH-LOGIC-ENVIRONMENT (MODULEFORM ENVIRONMENT BODY)
  "Execute `body' within the module resulting from `moduleForm'.
`*module*' is an acceptable `moduleForm'.  It will locally rebind 
`*module*' and `*context*' and shield the outer bindings from changes."
  (CL:LET*
   ((MODULEVAR (LOCAL-GENSYM "MDL")) (CONTEXTVAR (LOCAL-GENSYM "CXT")))
   (LIST* SYM-LOGIC-MACROS-STELLA-LET
    (LIST*
     (CONS MODULEVAR
      (LIST* SYM-LOGIC-MACROS-STELLA-MODULE MODULEFORM NIL))
     (CONS CONTEXTVAR
      (LIST* SYM-LOGIC-MACROS-STELLA-CONTEXT MODULEVAR NIL))
     NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-WHEN
     (LIST* SYM-LOGIC-MACROS-STELLA-NULL? MODULEVAR NIL)
     (LIST* SYM-LOGIC-MACROS-STELLA-SETQ MODULEVAR
      (CONS SYM-LOGIC-MACROS-STELLA-*MODULE* NIL))
     (LIST* SYM-LOGIC-MACROS-STELLA-SETQ CONTEXTVAR
      (CONS SYM-LOGIC-MACROS-STELLA-*CONTEXT* NIL))
     NIL)
    (LIST* SYM-LOGIC-MACROS-STELLA-SPECIAL
     (LIST* (LIST* SYM-LOGIC-MACROS-STELLA-*MODULE* MODULEVAR NIL)
      (LIST* SYM-LOGIC-MACROS-STELLA-*CONTEXT* CONTEXTVAR NIL) NIL)
     (CONCATENATE
      (CL:IF
       (CL:AND (SYMBOL? ENVIRONMENT)
        (CL:NOT (CL:EQ ENVIRONMENT SYM-LOGIC-MACROS-STELLA-NULL)))
       (CONS (LIST* SYM-LOGIC-MACROS-STELLA-IGNORE ENVIRONMENT NIL)
        NIL)
       NIL)
      (CONS
       (LIST* SYM-LOGIC-MACROS-STELLA-WITH-PROCESS-LOCK
        SYM-LOGIC-MACROS-LOGIC-*POWERLOOM-LOCK* (CONCATENATE BODY NIL))
       NIL)))
    NIL)))

;;; (DEFGLOBAL *CYC-KLUDGES-ENABLED?* ...)

(CL:DEFVAR *CYC-KLUDGES-ENABLED?* CL:NIL)

;;; (DEFMACRO WHEN-CYC-KLUDGES-ENABLED ...)

(CL:DEFUN WHEN-CYC-KLUDGES-ENABLED (BODY)
  (LIST* SYM-LOGIC-MACROS-STELLA-WHEN
   SYM-LOGIC-MACROS-LOGIC-*CYC-KLUDGES-ENABLED?* (CONCATENATE BODY NIL)))

(CL:DEFUN HELP-STARTUP-LOGIC-MACROS1 ()
  (CL:PROGN
   (INTERN-SURROGATE-IN-MODULE "PROPOSITION.IF" *STELLA-MODULE* CL:T)
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-LET
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LET"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-NEW
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NEW"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-OUTPUT-STRING-STREAM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "OUTPUT-STRING-STREAM"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-SPECIAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SPECIAL"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-*PRINTREADABLY?*
    (INTERN-RIGID-SYMBOL-WRT-MODULE "*PRINTREADABLY?*"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-TRUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TRUE"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-PRINT-STREAM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT-STREAM"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-EOL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "EOL"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-HELP-SIGNAL-PROPOSITION-ERROR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "HELP-SIGNAL-PROPOSITION-ERROR"
     NULL 0))
   (CL:SETQ KWD-LOGIC-MACROS-ERROR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ERROR" NULL 2))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-SIGNAL-EXCEPTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SIGNAL-EXCEPTION"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-PARSING-ERROR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PARSING-ERROR" NULL 0))
   (CL:SETQ KWD-LOGIC-MACROS-MESSAGE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MESSAGE" NULL 2))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-THE-STRING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "THE-STRING"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-PROPOSITION-ERROR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PROPOSITION-ERROR" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-STANDARD-WARNING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STANDARD-WARNING"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ KWD-LOGIC-MACROS-WARNING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WARNING" NULL 2))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-DEFUN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFUN"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-STRING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STRING"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-PRINT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-RETURN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "RETURN"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-DEF-DISPLAY-GLOBALS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DEF-DISPLAY-GLOBALS" NULL 0))
   (CL:SETQ KWD-LOGIC-MACROS-COMMON-LISP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "COMMON-LISP" NULL 2))
   (CL:SETQ KWD-LOGIC-MACROS-FUNCTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FUNCTION" NULL 2))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-PROGN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PROGN"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-SETF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SETF"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-TRUTH-VALUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TRUTH-VALUE" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-FRAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FRAME" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-NULL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-JUSTIFICATION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JUSTIFICATION" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-WHEN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WHEN"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-DEFINED?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFINED?"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-PARTIAL-MATCH-FRAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PARTIAL-MATCH-FRAME" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-CLEAR-FRAME-PARTIAL-TRUTH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CLEAR-FRAME-PARTIAL-TRUTH" NULL
     0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-SETQ
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SETQ"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-LASTMOVE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LASTMOVE" NULL 0))
   (CL:SETQ KWD-LOGIC-MACROS-DOWN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DOWN" NULL 2))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-COND
    (INTERN-RIGID-SYMBOL-WRT-MODULE "COND"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-CHECKFORMOVEOUT?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CHECKFORMOVEOUT?" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-PARENT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PARENT" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-UP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UP" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-STARTTICKS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTTICKS" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-STARTING-CLOCK-TICKS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTING-CLOCK-TICKS" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-AVAILABLETICKS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "AVAILABLETICKS" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA--
    (INTERN-RIGID-SYMBOL-WRT-MODULE "-"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-ALLOTTED-CLOCK-TICKS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ALLOTTED-CLOCK-TICKS" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-CLOCKTICKS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CLOCKTICKS" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA---
    (INTERN-RIGID-SYMBOL-WRT-MODULE "--"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-CURRENT-CLOCK-TICKS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CURRENT-CLOCK-TICKS" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-QUERY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "QUERY" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-++
    (INTERN-RIGID-SYMBOL-WRT-MODULE "++"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-<=
    (INTERN-RIGID-SYMBOL-WRT-MODULE "<="
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-POP-FRAMES-UP-TO
    (INTERN-RIGID-SYMBOL-WRT-MODULE "POP-FRAMES-UP-TO" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-MV-SETQ
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MV-SETQ"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-DEPTH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DEPTH"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-HANDLE-TIMEOUT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "HANDLE-TIMEOUT" NULL 0))
   (CL:SETQ KWD-LOGIC-MACROS-UP-FAIL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UP-FAIL" NULL 2))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-1+
    (INTERN-RIGID-SYMBOL-WRT-MODULE "1+"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-OTHERWISE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "OTHERWISE"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))))

(CL:DEFUN HELP-STARTUP-LOGIC-MACROS2 ()
  (CL:PROGN
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-UPFRAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UPFRAME" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-DOWNFRAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DOWNFRAME" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-DOWN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DOWN" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-AND
    (INTERN-RIGID-SYMBOL-WRT-MODULE "AND"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-NULL?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL?"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-1-
    (INTERN-RIGID-SYMBOL-WRT-MODULE "1-"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-PROPOSITION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PROPOSITION" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-NTH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NTH"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-ARGUMENTS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ARGUMENTS"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-ARGUMENT-CURSOR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ARGUMENT-CURSOR" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-CREATE-DOWN-FRAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CREATE-DOWN-FRAME" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA->
    (INTERN-RIGID-SYMBOL-WRT-MODULE ">"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-CURRENT-DEPTH-CUTOFF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CURRENT-DEPTH-CUTOFF" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-EQL?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "EQL?"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-STATE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STATE"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ KWD-LOGIC-MACROS-PATTERN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PATTERN" NULL 2))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-HANDLE-DEPTH-VIOLATION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "HANDLE-DEPTH-VIOLATION" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-NOT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NOT"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-FAIL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FAIL" NULL 0))
   (CL:SETQ KWD-LOGIC-MACROS-UP-TRUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UP-TRUE" NULL 2))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-FALSE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FALSE"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-RESULT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "RESULT"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-IF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "IF"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-CACHE-QUERY-RESULTS?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CACHE-QUERY-RESULTS?" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-CACHE-GOAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CACHE-GOAL" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-UPDATE-GOAL-CACHE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UPDATE-GOAL-CACHE" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-SUCCESS?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SUCCESS?" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-BREAK
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BREAK"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-KEEP-FRAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "KEEP-FRAME" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-POP-DOWN-FRAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "POP-DOWN-FRAME" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-APPLY-CACHED-RETRIEVE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "APPLY-CACHED-RETRIEVE" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-BQUOTE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BQUOTE"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-CONS-LIST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONS-LIST"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-QUOTE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "QUOTE"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-APPLY-CACHED-ASK
    (INTERN-RIGID-SYMBOL-WRT-MODULE "APPLY-CACHED-ASK" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-*CONTEXT*
    (INTERN-RIGID-SYMBOL-WRT-MODULE "*CONTEXT*"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-GET-INFERENCE-CACHE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GET-INFERENCE-CACHE" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-*MODULE*
    (INTERN-RIGID-SYMBOL-WRT-MODULE "*MODULE*"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ KWD-LOGIC-MACROS-META
    (INTERN-RIGID-SYMBOL-WRT-MODULE "META" NULL 2))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-*CLASSIFICATIONSESSION*
    (INTERN-RIGID-SYMBOL-WRT-MODULE "*CLASSIFICATIONSESSION*" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-GET-CLASSIFICATION-SESSION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GET-CLASSIFICATION-SESSION" NULL
     0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-CLASSIFICATION-WORLD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASSIFICATION-WORLD" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-OBJECT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "OBJECT"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-MISSING-ARGUMENT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MISSING-ARGUMENT" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-INTEGER-WRAPPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INTEGER-WRAPPER"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-CASE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CASE"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-WRAPPER-VALUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WRAPPER-VALUE"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-BOOLEAN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BOOLEAN"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-X
    (INTERN-RIGID-SYMBOL-WRT-MODULE "X"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-NUMBER-WRAPPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NUMBER-WRAPPER"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-Y
    (INTERN-RIGID-SYMBOL-WRT-MODULE "Y"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ KWD-LOGIC-MACROS-PUBLIC?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PUBLIC?" NULL 2))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-TYPECASE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TYPECASE"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-FLOAT-WRAPPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FLOAT-WRAPPER"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-CAST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CAST"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-FLOAT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FLOAT"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-LOGIC-FLOATRESULT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FLOATRESULT" NULL 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-WRAP-LITERAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WRAP-LITERAL"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-SAFE-CAST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SAFE-CAST"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOGIC-MACROS-STELLA-INTEGER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INTEGER"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))))

(CL:DEFUN STARTUP-LOGIC-MACROS ()
  (CL:LET*
   ((*MODULE* (GET-STELLA-MODULE "/LOGIC" (> *STARTUP-TIME-PHASE* 1)))
    (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2)
    (HELP-STARTUP-LOGIC-MACROS1) (HELP-STARTUP-LOGIC-MACROS2)
    (CL:SETQ SYM-LOGIC-MACROS-STELLA-MODULE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MODULE"
      (GET-STELLA-MODULE "/STELLA" CL:T) 0))
    (CL:SETQ SYM-LOGIC-MACROS-STELLA-CONTEXT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTEXT"
      (GET-STELLA-MODULE "/STELLA" CL:T) 0))
    (CL:SETQ SYM-LOGIC-MACROS-STELLA-WITH-PROCESS-LOCK
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WITH-PROCESS-LOCK"
      (GET-STELLA-MODULE "/STELLA" CL:T) 0))
    (CL:SETQ SYM-LOGIC-MACROS-LOGIC-*POWERLOOM-LOCK*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "*POWERLOOM-LOCK*" NULL 0))
    (CL:SETQ SYM-LOGIC-MACROS-STELLA-IGNORE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "IGNORE"
      (GET-STELLA-MODULE "/STELLA" CL:T) 0))
    (CL:SETQ SYM-LOGIC-MACROS-LOGIC-*CYC-KLUDGES-ENABLED?*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "*CYC-KLUDGES-ENABLED?*" NULL 0))
    (CL:SETQ SYM-LOGIC-MACROS-LOGIC-STARTUP-LOGIC-MACROS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-LOGIC-MACROS" NULL 0))
    (CL:SETQ SYM-LOGIC-MACROS-STELLA-METHOD-STARTUP-CLASSNAME
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME"
      (GET-STELLA-MODULE "/STELLA" CL:T) 0)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 5)
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "LOGIC-EXCEPTION"
        "(DEFCLASS LOGIC-EXCEPTION (STELLA-EXCEPTION))")))
     (CL:SETF (%CLASS.CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-LOGIC-EXCEPTION)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "PROPOSITION-ERROR"
        "(DEFCLASS PROPOSITION-ERROR (LOGIC-EXCEPTION))")))
     (CL:SETF (%CLASS.CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-PROPOSITION-ERROR)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "PARSING-ERROR"
        "(DEFCLASS PARSING-ERROR (LOGIC-EXCEPTION))")))
     (CL:SETF (%CLASS.CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-PARSING-ERROR)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "CLASH"
        "(DEFCLASS CLASH (LOGIC-EXCEPTION))")))
     (CL:SETF (%CLASS.CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-CLASH)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "FAIL-EXCEPTION"
        "(DEFCLASS FAIL-EXCEPTION (LOGIC-EXCEPTION))")))
     (CL:SETF (%CLASS.CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-FAIL-EXCEPTION)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE
        "QUERY-THREAD-LIMIT-VIOLATION"
        "(DEFCLASS QUERY-THREAD-LIMIT-VIOLATION (LOGIC-EXCEPTION))")))
     (CL:SETF (%CLASS.CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-QUERY-THREAD-LIMIT-VIOLATION))))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (DEFINE-FUNCTION-OBJECT "SIGNAL-PARSING-ERROR"
     "(DEFUN SIGNAL-PARSING-ERROR (|&BODY| (MESSAGE CONS)) :TYPE OBJECT :MACRO? TRUE)"
     (CL:FUNCTION SIGNAL-PARSING-ERROR) NULL)
    (DEFINE-FUNCTION-OBJECT "SIGNAL-PROPOSITION-ERROR"
     "(DEFUN SIGNAL-PROPOSITION-ERROR (|&BODY| (MESSAGE CONS)) :TYPE OBJECT :MACRO? TRUE)"
     (CL:FUNCTION SIGNAL-PROPOSITION-ERROR) NULL)
    (DEFINE-FUNCTION-OBJECT "SIGNAL-PROPOSITION-WARNING"
     "(DEFUN SIGNAL-PROPOSITION-WARNING (|&BODY| (MESSAGE CONS)) :TYPE OBJECT :MACRO? TRUE)"
     (CL:FUNCTION SIGNAL-PROPOSITION-WARNING) NULL)
    (DEFINE-FUNCTION-OBJECT "DEF-DISPLAY-GLOBALS"
     "(DEFUN DEF-DISPLAY-GLOBALS ((DISPLAYFUNCTIONNAME SYMBOL) (GLOBALVARIABLENAMES (CONS OF SYMBOL))) :TYPE OBJECT :MACRO? TRUE :LISP-MACRO? TRUE)"
     (CL:FUNCTION %DEF-DISPLAY-GLOBALS) NULL)
    (DEFINE-FUNCTION-OBJECT "MOVE-IN-PLACE"
     "(DEFUN MOVE-IN-PLACE () :TYPE OBJECT :MACRO? TRUE)"
     (CL:FUNCTION MOVE-IN-PLACE) NULL)
    (DEFINE-FUNCTION-OBJECT "MOVE-DOWN"
     "(DEFUN MOVE-DOWN () :TYPE OBJECT :MACRO? TRUE)"
     (CL:FUNCTION MOVE-DOWN) NULL)
    (DEFINE-FUNCTION-OBJECT "MOVE-UP"
     "(DEFUN MOVE-UP ((SUCCESS? SYMBOL) (KEEPFRAME? SYMBOL)) :TYPE OBJECT :MACRO? TRUE)"
     (CL:FUNCTION MOVE-UP) NULL)
    (DEFINE-FUNCTION-OBJECT "APPLY-RETRIEVE"
     "(DEFUN APPLY-RETRIEVE (|&BODY| (BODY CONS)) :TYPE OBJECT :MACRO? TRUE :DOCUMENTATION \"Execute a query composed of io-variables `variables'
and body `queryBody'.  Before executing, bind variables to `inputBindings'
(in sequence). If one variable is left unbound, returns a cons list of
bindings of that variable.  If two or more are unbound, returns
a cons list of cons lists of bindings:
  `(apply-retrieve variables queryBody inputBindings)'\")"
     (CL:FUNCTION APPLY-RETRIEVE) NULL)
    (DEFINE-FUNCTION-OBJECT "APPLY-ASK"
     "(DEFUN APPLY-ASK (|&BODY| (BODY CONS)) :TYPE OBJECT :MACRO? TRUE :DOCUMENTATION \"Execute a yes/no query composed of input-variables
`inputVariables' and body `queryBody'.  Before executing, bind variables
to `inputBindings' (in sequence).
  `(apply-ask inputVariables queryBody inputBindings)'\")"
     (CL:FUNCTION APPLY-ASK) NULL)
    (DEFINE-FUNCTION-OBJECT "WITHIN-META-CACHE"
     "(DEFUN WITHIN-META-CACHE (|&BODY| (BODY CONS)) :TYPE OBJECT :MACRO? TRUE :DOCUMENTATION \"Execute `body' within the meta cache of the current module.
Set appropriate special variables.\")" (CL:FUNCTION WITHIN-META-CACHE)
     NULL)
    (DEFINE-FUNCTION-OBJECT "WITHIN-CLASSIFICATION-SESSION"
     "(DEFUN WITHIN-CLASSIFICATION-SESSION ((DESCRIPTIONORINSTANCE KEYWORD) |&BODY| (BODY CONS)) :TYPE OBJECT :MACRO? TRUE :DOCUMENTATION \"Used during classification.  Execute `body' within the indicated
classification session and inference world.\")"
     (CL:FUNCTION WITHIN-CLASSIFICATION-SESSION) NULL)
    (DEFINE-FUNCTION-OBJECT "DEFINE-COMPUTED-CONSTRAINT"
     "(DEFUN DEFINE-COMPUTED-CONSTRAINT ((NAME SYMBOL) (VAR-LIST CONS) (CONSTRAINT-TEST CONS) |&BODY| (POSITION-COMPUTATIONS CONS)) :TYPE OBJECT :MACRO? TRUE :PUBLIC? TRUE :DOCUMENTATION \"Defines `name' to be a constraint computation which uses
`constraint-test' to determine if a fully bound set of variables
satisfies the constraint.  The forms in `position-computations'
are used to compute the value for each of the positions. All such
computations must set the variable `value' to be the result
computed for the missing position.  Setting `value' to `null' for
any such computation means that that particular argument cannot
be computed from the others.  The input variables in `var-list'
will be bound to the N arguments to the constraint.
  The generated function will return a Stella Object and take as 
inputs the values of the N arguments to the constraint.  A value
of `null' means that the value is not available.  If all
arguments are not `null', then the return value will be a Stella
wrapped boolean indicating whether the constraint is satisified
or not.
  If more than one input value is `null', then this constraint
code will not be called.\")" (CL:FUNCTION DEFINE-COMPUTED-CONSTRAINT)
     NULL)
    (DEFINE-FUNCTION-OBJECT "DEFINE-ARITHMETIC-TEST-ON-WRAPPERS"
     "(DEFUN DEFINE-ARITHMETIC-TEST-ON-WRAPPERS ((NAME SYMBOL) (TEST-NAME SYMBOL)) :TYPE OBJECT :MACRO? TRUE :DOCUMENTATION \"Defines `name' as an arithmetic comparision operation using the
test `test-name'.  It will take two wrapped number parameters and
return a `boolean'.  The code will use the appropriate test for
the specific subtype of wrapped number actually passed in.\")"
     (CL:FUNCTION DEFINE-ARITHMETIC-TEST-ON-WRAPPERS) NULL)
    (DEFINE-FUNCTION-OBJECT "DEFINE-ARITHMETIC-OPERATION-ON-WRAPPERS"
     "(DEFUN DEFINE-ARITHMETIC-OPERATION-ON-WRAPPERS ((NAME SYMBOL) (OPERATION-NAME SYMBOL)) :TYPE OBJECT :MACRO? TRUE :DOCUMENTATION \"Defines `name' as an arithmetic comparision operation using the
test `test-name'.  It will take two wrapped number parameters and
return a wrapped number.  The code will use the appropriate test
for the specific subtype of wrapped number actually passed in,
and return the appropriate subtype of wrapped number based on the
normal arithmetic contagion rules.
  
For example, if both input parameters are wrapped integers then
the output will be a wrapped integer.  If the inputs are a
wrapped integer and a wrapped float then the output will be a
wrapped float, etc.\")"
     (CL:FUNCTION DEFINE-ARITHMETIC-OPERATION-ON-WRAPPERS) NULL)
    (DEFINE-FUNCTION-OBJECT "WITH-LOGIC-ENVIRONMENT"
     "(DEFUN WITH-LOGIC-ENVIRONMENT ((MODULEFORM OBJECT) (ENVIRONMENT OBJECT) |&BODY| (BODY CONS)) :TYPE OBJECT :MACRO? TRUE :DOCUMENTATION \"Execute `body' within the module resulting from `moduleForm'.
`*module*' is an acceptable `moduleForm'.  It will locally rebind 
`*module*' and `*context*' and shield the outer bindings from changes.\" :PUBLIC? TRUE)"
     (CL:FUNCTION WITH-LOGIC-ENVIRONMENT) NULL)
    (DEFINE-FUNCTION-OBJECT "WHEN-CYC-KLUDGES-ENABLED"
     "(DEFUN WHEN-CYC-KLUDGES-ENABLED (|&BODY| (BODY CONS)) :TYPE OBJECT :MACRO? TRUE)"
     (CL:FUNCTION WHEN-CYC-KLUDGES-ENABLED) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-LOGIC-MACROS"
     "(DEFUN STARTUP-LOGIC-MACROS () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-LOGIC-MACROS) NULL)
    (CL:LET*
     ((FUNCTION
       (LOOKUP-FUNCTION SYM-LOGIC-MACROS-LOGIC-STARTUP-LOGIC-MACROS)))
     (SET-DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
      SYM-LOGIC-MACROS-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "_StartupLogicMacros") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *SUPPRESSNONLOGICOBJECTWARNING?* BOOLEAN TRUE)")
    (REGISTER-NATIVE-NAME SYM-LOGIC-MACROS-LOGIC-DEF-DISPLAY-GLOBALS
     KWD-LOGIC-MACROS-COMMON-LISP KWD-LOGIC-MACROS-FUNCTION)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *CYC-KLUDGES-ENABLED?* BOOLEAN FALSE)"))))
