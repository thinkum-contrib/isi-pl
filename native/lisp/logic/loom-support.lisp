;;; -*- Mode: Lisp; Package: LOOM-API; Syntax: COMMON-LISP; Base: 10 -*-

;;; loom-support.lisp

#|
 +---------------------------- BEGIN LICENSE BLOCK ---------------------------+
 |                                                                            |
 | Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
 |                                                                            |
 | The contents of this file are subject to the Mozilla Public License        |
 | Version 1.1 (the "License"); you may not use this file except in           |
 | compliance with the License. You may obtain a copy of the License at       |
 | http://www.mozilla.org/MPL/                                                |
 |                                                                            |
 | Software distributed under the License is distributed on an "AS IS" basis, |
 | WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
 | for the specific language governing rights and limitations under the       |
 | License.                                                                   |
 |                                                                            |
 | The Original Code is the PowerLoom KR&R System.                            |
 |                                                                            |
 | The Initial Developer of the Original Code is                              |
 | UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
 | 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
 |                                                                            |
 | Portions created by the Initial Developer are Copyright (C) 1997-2006      |
 | the Initial Developer. All Rights Reserved.                                |
 |                                                                            |
 | Contributor(s):                                                            |
 |                                                                            |
 | Alternatively, the contents of this file may be used under the terms of    |
 | either the GNU General Public License Version 2 or later (the "GPL"), or   |
 | the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
 | in which case the provisions of the GPL or the LGPL are applicable instead |
 | of those above. If you wish to allow use of your version of this file only |
 | under the terms of either the GPL or the LGPL, and not to allow others to  |
 | use your version of this file under the terms of the MPL, indicate your    |
 | decision by deleting the provisions above and replace them with the notice |
 | and other provisions required by the GPL or the LGPL. If you do not delete |
 | the provisions above, a recipient may use your version of this file under  |
 | the terms of any one of the MPL, the GPL or the LGPL.                      |
 |                                                                            |
 +----------------------------- END LICENSE BLOCK ----------------------------+
|#

(CL:EVAL-WHEN (CL:COMPILE CL:LOAD CL:EVAL)
  (CL:UNLESS (CL:FIND-PACKAGE "LOOM-API")
     (CL:DEFPACKAGE "LOOM-API" (:USE))))

(CL:IN-PACKAGE "LOOM-API")

;;; Auxiliary variables:

(CL:DEFVAR SGT-LOOM-SUPPORT-LOOM-API-LOOM-ROLE STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-LOOM-API-LOOM-ROLE-OF STELLA::NULL)
(CL:DEFVAR KWD-LOOM-SUPPORT-DOCUMENTATION STELLA::NULL)
(CL:DEFVAR KWD-LOOM-SUPPORT-AXIOMS STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-LOOM-API-?I STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-LOOM-API-?R STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-LOOM-API-?ROLE STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-LOOM-API-F-FIND-OR-CREATE-LOOM-ROLE-QUERY-000 STELLA::NULL)
(CL:DEFVAR SGT-LOOM-SUPPORT-LOOM-API-LOOM-ROLE-OF STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-STELLA-EXISTS STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-LOOM-API-F-GET-LOOM-ROLES-QUERY-000 STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-STELLA-OR STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-LOOM-API-?FR STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-LOOM-API-?V STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-STELLA-AND STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-LOOM-API-FRAME-PREDICATE STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-PL-KERNEL-KB-HOLDS STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-STELLA-NOT STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-STELLA-= STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-PL-KERNEL-KB-RANGE-MAX-CARDINALITY STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-LOGIC-?C STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-LOOM-API-INSTANCE-OF STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-PL-KERNEL-KB-DOMAIN STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-LOOM-API-F-GET-RELATION-INDUCED-ROLES-QUERY-000 STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-LOOM-API-F-RELATION-OF-LOOM-ROLE-QUERY-000 STELLA::NULL)
(CL:DEFVAR SGT-LOOM-SUPPORT-STELLA-MODULE STELLA::NULL)
(CL:DEFVAR SGT-LOOM-SUPPORT-LOGIC-LOGIC-OBJECT STELLA::NULL)
(CL:DEFVAR KWD-LOOM-SUPPORT-ALL STELLA::NULL)
(CL:DEFVAR KWD-LOOM-SUPPORT-CONCEPTS STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-LOGIC-?X STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-PL-KERNEL-KB-CLASS STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-LOOM-API-F-LIST-CONTEXT-QUERY-000 STELLA::NULL)
(CL:DEFVAR KWD-LOOM-SUPPORT-RELATIONS STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-PL-KERNEL-KB-RELATION STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-LOGIC-FAIL STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-LOOM-API-F-LIST-CONTEXT-QUERY-001 STELLA::NULL)
(CL:DEFVAR KWD-LOOM-SUPPORT-INSTANCES STELLA::NULL)
(CL:DEFVAR SGT-LOOM-SUPPORT-PL-KERNEL-KB-ARITY STELLA::NULL)
(CL:DEFVAR SGT-LOOM-SUPPORT-LOGIC-DESCRIPTION STELLA::NULL)
(CL:DEFVAR SGT-LOOM-SUPPORT-STELLA-SURROGATE STELLA::NULL)
(CL:DEFVAR SGT-LOOM-SUPPORT-STELLA-THING STELLA::NULL)
(CL:DEFVAR KWD-LOOM-SUPPORT-ASSERT-TRUE STELLA::NULL)
(CL:DEFVAR KWD-LOOM-SUPPORT-RETRACT-TRUE STELLA::NULL)
(CL:DEFVAR KWD-LOOM-SUPPORT-DIRECT STELLA::NULL)
(CL:DEFVAR KWD-LOOM-SUPPORT-ASSERTED STELLA::NULL)
(CL:DEFVAR KWD-LOOM-SUPPORT-DEFAULT STELLA::NULL)
(CL:DEFVAR KWD-LOOM-SUPPORT-STRICT STELLA::NULL)
(CL:DEFVAR KWD-LOOM-SUPPORT-DESCRIPTION STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-LOGIC-KAPPA STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-LOOM-API-?D STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-LOOM-API-F-GET-DOMAIN-QUERY-000 STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-PL-KERNEL-KB-RANGE STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-LOOM-API-F-GET-RANGE-QUERY-000 STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-LOGIC-?MDC STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-PL-KERNEL-KB-MEMBER-OF STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-PL-KERNEL-KB-MUTUALLY-DISJOINT-COLLECTION STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-LOOM-API-F-GET-PARTITIONS-QUERY-000 STELLA::NULL)
(CL:DEFVAR SGT-LOOM-SUPPORT-PL-KERNEL-KB-MUTUALLY-DISJOINT-COLLECTION STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-LOOM-API-?COVERED STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-LOOM-API-COVERING STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-LOOM-API-F-COVERING?-QUERY-000 STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-LOOM-API-STARTUP-LOOM-SUPPORT STELLA::NULL)
(CL:DEFVAR SYM-LOOM-SUPPORT-STELLA-METHOD-STARTUP-CLASSNAME STELLA::NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL STELLA::*STARTUP-TIME-PHASE*
  STELLA::SYSTEM-DEFINED-ARGUMENT-NAMES STELLA::*MODULE*
  STELLA::NULL-INTEGER STELLA::*CONTEXT* STELLA::*PL-KERNEL-MODULE*
  STELLA::STANDARD-OUTPUT STELLA::EOL STELLA::NIL))

;;; (VERBATIM :COMMON-LISP ...)

(CL:defpackage "LOOM-API" 
            (:use)
            (:import-from "COMMON-LISP" CL:print-object)
            (:export #:loom-role
                     #:loom-role-of
                     #:relation-of-loom-role
                     #:clear-user-contexts
                     #:generate-source-expression
                     #:collection-members
                     #:get-instance-name
                     #:get-partitions
                     #:disjoint-relations?
                     #:covering?
                     #:stringified-source
                     #:get-role-names-and-values
                     #:get-loom-roles
                     #:get-value-restriction
                     #:get-max-cardinality
                     #:get-min-cardinality
                     #:get-range
                     #:get-domain
                     #:compute-conjunction-relation
                     #:most-specific-relations
                     #:subrelation?
                     #:get-class-instances
                     #:get-role-value
                     #:remove-role-value
                     #:add-role-value
                     #:instance-of?
                     #:delete-instance
                     #:create-instance
                     #:get-equivalent-names
                     #:instance?
                     #:context-of-instance
                     #:get-child-contexts
                     #:get-parent-contexts
                     #:get-xcontext
                     ))

;;; (DEFUN (SAFE-SURROGATIFY SURROGATE) ...)

(CL:DEFUN SAFE-SURROGATIFY (SURROGATEREF)
  (CL:WHEN (CL:EQ SURROGATEREF STELLA::NULL)
   (CL:RETURN-FROM SAFE-SURROGATIFY STELLA::NULL))
  (CL:LET* ((TEST-VALUE-000 (STELLA::SAFE-PRIMARY-TYPE SURROGATEREF)))
   (CL:COND
    ((STELLA::SUBTYPE-OF-STRING? TEST-VALUE-000)
     (CL:PROGN
      (STELLA::STRING-TO-SURROGATE
       (STELLA::%WRAPPER-VALUE SURROGATEREF))))
    ((STELLA::SUBTYPE-OF-SURROGATE? TEST-VALUE-000)
     (CL:PROGN SURROGATEREF))
    ((STELLA::SUBTYPE-OF-SYMBOL? TEST-VALUE-000)
     (CL:PROGN (STELLA::SYMBOL-TO-SURROGATE SURROGATEREF)))
    (CL:T STELLA::NULL))))

;;; (DEFCLASS LOOM-ROLE ...)

(CL:DEFCLASS LOOM-ROLE (STELLA::THING)
  ()
  (:DOCUMENTATION ""))

(CL:DEFUN NEW-LOOM-ROLE ()
  (CL:LET* ((SELF STELLA::NULL))
   (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE LOOM-ROLE)))
   (CL:SETF (STELLA::%DYNAMIC-SLOTS SELF) (STELLA::NEW-KEY-VALUE-LIST))
   (CL:SETF (STELLA::%SURROGATE-VALUE-INVERSE SELF) STELLA::NULL) SELF))

(CL:DEFMETHOD STELLA::PRIMARY-TYPE ((SELF LOOM-ROLE))
  SGT-LOOM-SUPPORT-LOOM-API-LOOM-ROLE)

(CL:DEFUN ACCESS-LOOM-ROLE-SLOT-VALUE (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   (CL:T
    (CL:IF SETVALUE?
     (STELLA::SET-DYNAMIC-SLOT-VALUE (STELLA::%DYNAMIC-SLOTS SELF)
      SLOTNAME VALUE STELLA::NULL)
     (CL:SETQ VALUE
      (STELLA::LOOKUP (STELLA::%DYNAMIC-SLOTS SELF) SLOTNAME)))))
  VALUE)

;;; (DEFUN (FIND-OR-CREATE-LOOM-ROLE LOOM-ROLE) ...)

(CL:DEFUN FIND-OR-CREATE-LOOM-ROLE (INSTANCEREF RELATIONREF CREATE?)
  "Return a LOOM-ROLE instance if 'instanceRef' has
a Loom role named 'relationRef'.  If 'create?', create a role
instance if one doesn't already exist."
  (CL:LET*
   ((INSTANCE (STELLA::GET-INSTANCE INSTANCEREF))
    (RELATION (STELLA::GET-RELATION RELATIONREF)) (ROLE STELLA::NULL))
   (CL:WHEN
    (CL:OR (CL:EQ INSTANCE STELLA::NULL) (CL:EQ RELATION STELLA::NULL))
    (CL:RETURN-FROM FIND-OR-CREATE-LOOM-ROLE STELLA::NULL))
   (CL:SETQ ROLE
    (STELLA::%%VALUE
     (STELLA::APPLY-CACHED-RETRIEVE
      (STELLA::LIST* SYM-LOOM-SUPPORT-LOOM-API-?I
       SYM-LOOM-SUPPORT-LOOM-API-?R SYM-LOOM-SUPPORT-LOOM-API-?ROLE
       STELLA::NIL)
      (STELLA::LIST* SYM-LOOM-SUPPORT-LOOM-API-LOOM-ROLE-OF
       SYM-LOOM-SUPPORT-LOOM-API-?I SYM-LOOM-SUPPORT-LOOM-API-?R
       SYM-LOOM-SUPPORT-LOOM-API-?ROLE STELLA::NIL)
      (STELLA::CONS-LIST INSTANCE RELATION STELLA::NULL)
      (STELLA::CONS-LIST)
      SYM-LOOM-SUPPORT-LOOM-API-F-FIND-OR-CREATE-LOOM-ROLE-QUERY-000)))
   (CL:WHEN (CL:OR (CL:NOT (CL:EQ ROLE STELLA::NULL)) (CL:NOT CREATE?))
    (CL:RETURN-FROM FIND-OR-CREATE-LOOM-ROLE ROLE))
   (CL:SETQ ROLE
    (STELLA::CREATE-LOGIC-INSTANCE STELLA::NULL
     SGT-LOOM-SUPPORT-LOOM-API-LOOM-ROLE))
   (STELLA::ASSERT-TUPLE SGT-LOOM-SUPPORT-LOOM-API-LOOM-ROLE-OF
    (STELLA::CONS-LIST INSTANCE RELATION ROLE))
   ROLE))

;;; (DEFUN (GET-LOOM-ROLES (CONS OF LOOM-ROLE)) ...)

(CL:DEFUN GET-LOOM-ROLES (INSTANCEREF INFERROLES?)
  "Return a list of LOOM-ROLEs on 'instanceRef'.  If
'inferRoles', create roles on the fly corresponding to
frame predicate or domain propositions inherited by 'instance'."
  (CL:LET* ((INSTANCE (STELLA::GET-INSTANCE INSTANCEREF)))
   (CL:WHEN (CL:EQ INSTANCE STELLA::NULL)
    (CL:RETURN-FROM GET-LOOM-ROLES STELLA::NULL))
   (CL:WHEN INFERROLES? (GET-RELATION-INDUCED-ROLES INSTANCE))
   (STELLA::APPLY-CACHED-RETRIEVE
    (STELLA::LIST* SYM-LOOM-SUPPORT-LOOM-API-?I
     SYM-LOOM-SUPPORT-LOOM-API-?ROLE STELLA::NIL)
    (STELLA::LIST* SYM-LOOM-SUPPORT-STELLA-EXISTS
     SYM-LOOM-SUPPORT-LOOM-API-?R
     (STELLA::LIST* SYM-LOOM-SUPPORT-LOOM-API-LOOM-ROLE-OF
      SYM-LOOM-SUPPORT-LOOM-API-?I SYM-LOOM-SUPPORT-LOOM-API-?R
      SYM-LOOM-SUPPORT-LOOM-API-?ROLE STELLA::NIL)
     STELLA::NIL)
    (STELLA::CONS-LIST INSTANCE STELLA::NULL) (STELLA::CONS-LIST)
    SYM-LOOM-SUPPORT-LOOM-API-F-GET-LOOM-ROLES-QUERY-000)))

;;; (DEFUN (GET-RELATION-INDUCED-ROLES (CONS OF LOOM-ROLE)) ...)

(CL:DEFUN GET-RELATION-INDUCED-ROLES (INSTANCEREF)
  (CL:LET*
   ((INSTANCE (STELLA::GET-INSTANCE INSTANCEREF))
    (RELATIONS STELLA::NIL) (ROLES STELLA::NIL))
   (CL:WHEN (CL:EQ INSTANCE STELLA::NULL)
    (CL:RETURN-FROM GET-RELATION-INDUCED-ROLES STELLA::NULL))
   (CL:SETQ RELATIONS
    (STELLA::APPLY-CACHED-RETRIEVE
     (STELLA::LIST* SYM-LOOM-SUPPORT-LOOM-API-?R
      SYM-LOOM-SUPPORT-LOOM-API-?I STELLA::NIL)
     (STELLA::LIST* SYM-LOOM-SUPPORT-STELLA-OR
      (STELLA::LIST* SYM-LOOM-SUPPORT-STELLA-EXISTS
       (STELLA::LIST* SYM-LOOM-SUPPORT-LOOM-API-?FR
        SYM-LOOM-SUPPORT-LOOM-API-?V STELLA::NIL)
       (STELLA::LIST* SYM-LOOM-SUPPORT-STELLA-AND
        (STELLA::LIST* SYM-LOOM-SUPPORT-LOOM-API-FRAME-PREDICATE
         SYM-LOOM-SUPPORT-LOOM-API-?FR STELLA::NIL)
        (STELLA::LIST* SYM-LOOM-SUPPORT-PL-KERNEL-KB-HOLDS
         SYM-LOOM-SUPPORT-LOOM-API-?FR SYM-LOOM-SUPPORT-LOOM-API-?R
         SYM-LOOM-SUPPORT-LOOM-API-?I SYM-LOOM-SUPPORT-LOOM-API-?V
         STELLA::NIL)
        (STELLA::LIST* SYM-LOOM-SUPPORT-STELLA-NOT
         (STELLA::LIST* SYM-LOOM-SUPPORT-STELLA-AND
          (STELLA::LIST* SYM-LOOM-SUPPORT-STELLA-=
           SYM-LOOM-SUPPORT-LOOM-API-?FR
           SYM-LOOM-SUPPORT-PL-KERNEL-KB-RANGE-MAX-CARDINALITY
           STELLA::NIL)
          (STELLA::LIST* SYM-LOOM-SUPPORT-STELLA-=
           SYM-LOOM-SUPPORT-LOOM-API-?V (STELLA::WRAP-INTEGER 0)
           STELLA::NIL)
          STELLA::NIL)
         STELLA::NIL)
        STELLA::NIL)
       STELLA::NIL)
      (STELLA::LIST* SYM-LOOM-SUPPORT-STELLA-EXISTS
       (STELLA::CONS SYM-LOOM-SUPPORT-LOGIC-?C STELLA::NIL)
       (STELLA::LIST* SYM-LOOM-SUPPORT-STELLA-AND
        (STELLA::LIST* SYM-LOOM-SUPPORT-LOOM-API-INSTANCE-OF
         SYM-LOOM-SUPPORT-LOOM-API-?I SYM-LOOM-SUPPORT-LOGIC-?C
         STELLA::NIL)
        (STELLA::LIST* SYM-LOOM-SUPPORT-PL-KERNEL-KB-DOMAIN
         SYM-LOOM-SUPPORT-LOOM-API-?R SYM-LOOM-SUPPORT-LOGIC-?C
         STELLA::NIL)
        STELLA::NIL)
       STELLA::NIL)
      STELLA::NIL)
     (STELLA::CONS-LIST STELLA::NULL INSTANCE) (STELLA::CONS-LIST)
     SYM-LOOM-SUPPORT-LOOM-API-F-GET-RELATION-INDUCED-ROLES-QUERY-000))
   (CL:LET* ((R STELLA::NULL) (ITER-000 RELATIONS))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 STELLA::NIL)) DO
     (CL:SETQ R (STELLA::%%VALUE ITER-000))
     (CL:SETQ ROLES
      (STELLA::CONS (FIND-OR-CREATE-LOOM-ROLE INSTANCE R CL:T) ROLES))
     (CL:SETQ ITER-000 (STELLA::%%REST ITER-000))))
   ROLES))

;;; (DEFUN (RELATION-OF-LOOM-ROLE NAMED-DESCRIPTION) ...)

(CL:DEFUN RELATION-OF-LOOM-ROLE (ROLE)
  "Return the relation for the Loom role 'role'."
  (STELLA::%%VALUE
   (STELLA::APPLY-CACHED-RETRIEVE
    (STELLA::LIST* SYM-LOOM-SUPPORT-LOOM-API-?R
     SYM-LOOM-SUPPORT-LOOM-API-?ROLE STELLA::NIL)
    (STELLA::LIST* SYM-LOOM-SUPPORT-STELLA-EXISTS
     SYM-LOOM-SUPPORT-LOOM-API-?I
     (STELLA::LIST* SYM-LOOM-SUPPORT-LOOM-API-LOOM-ROLE-OF
      SYM-LOOM-SUPPORT-LOOM-API-?I SYM-LOOM-SUPPORT-LOOM-API-?R
      SYM-LOOM-SUPPORT-LOOM-API-?ROLE STELLA::NIL)
     STELLA::NIL)
    (STELLA::CONS-LIST STELLA::NULL ROLE) (STELLA::CONS-LIST)
    SYM-LOOM-SUPPORT-LOOM-API-F-RELATION-OF-LOOM-ROLE-QUERY-000)))

;;; (DEFUN (GET-ROLE-NAMES-AND-VALUES CONS) ...)

(CL:DEFUN GET-ROLE-NAMES-AND-VALUES (INSTANCEREF)
  "Return a list of lists, with each sublist containing
a relation (role) name (a symbol) followed by one or more fillers of
that role on 'instanceRef'."
  (CL:LET*
   ((INSTANCE (STELLA::GET-INSTANCE INSTANCEREF))
    (TABLE (STELLA::NEW-KEY-VALUE-LIST)))
   (CL:WHEN (CL:EQ INSTANCE STELLA::NULL)
    (CL:RETURN-FROM GET-ROLE-NAMES-AND-VALUES STELLA::NULL))
   (CL:LET*
    ((P STELLA::NULL)
     (ITER-000
      (STELLA::CONCATENATE
       (STELLA::ALL-TRUE-DEPENDENT-PROPOSITIONS INSTANCE STELLA::NULL
        CL:T)
       (STELLA::ALL-TRUE-DEPENDENT-PROPOSITIONS INSTANCE STELLA::NULL
        CL:T))))
    (CL:LOOP WHILE (STELLA::NEXT? ITER-000) DO
     (CL:SETQ P (STELLA::%VALUE ITER-000))
     (CL:WHEN
      (CL:AND (CL:= (STELLA::LENGTH (STELLA::%ARGUMENTS P)) 2)
       (STELLA::EQL?
        (CL:AREF
         (CL:THE CL:SIMPLE-VECTOR
          (STELLA::%THE-ARRAY (STELLA::%ARGUMENTS P)))
         0)
        INSTANCE))
      (CL:LET*
       ((RELATION (STELLA::SURROGATE-TO-SYMBOL (STELLA::%OPERATOR P)))
        (FILLER
         (STELLA::VALUE-OF
          (CL:AREF
           (CL:THE CL:SIMPLE-VECTOR
            (STELLA::%THE-ARRAY (STELLA::%ARGUMENTS P)))
           1))))
       (CL:WHEN (CL:NOT (CL:EQ FILLER STELLA::NULL))
        (CL:LET* ((BUCKET (STELLA::LOOKUP TABLE RELATION)))
         (CL:IF (CL:EQ BUCKET STELLA::NULL)
          (STELLA::INSERT-AT TABLE RELATION (STELLA::CONS-LIST FILLER))
          (STELLA::INSERT-AT TABLE RELATION
           (STELLA::CONS FILLER BUCKET)))))))))
   (CL:LET* ((RESULT STELLA::NIL))
    (CL:LET*
     ((KEY STELLA::NULL) (VALUE STELLA::NULL)
      (ITER-001 (STELLA::%THE-KV-LIST TABLE)))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 STELLA::NULL)) DO
      (CL:SETQ KEY (STELLA::%KEY ITER-001))
      (CL:SETQ VALUE (STELLA::%VALUE ITER-001))
      (CL:SETQ RESULT
       (STELLA::CONS
        (STELLA::CONS KEY (STELLA::CONCATENATE VALUE STELLA::NIL))
        RESULT))
      (CL:SETQ ITER-001 (STELLA::%REST ITER-001))))
    RESULT)))

;;; (DEFUN (GET-XCONTEXT MODULE) ...)

(CL:DEFUN GET-XCONTEXT (CONTEXTREF)
  "Return the module referenced by 'contextRef'."
  (STELLA::GET-MODULE CONTEXTREF))

;;; (DEFUN (GET-PARENT-CONTEXTS (CONS OF MODULE)) ...)

(CL:DEFUN GET-PARENT-CONTEXTS (MODULEREF)
  "Return a list of parent modules of 'moduleRef'."
  (CL:LET* ((MODULE (STELLA::GET-MODULE MODULEREF)))
   (CL:IF (CL:EQ MODULE STELLA::NULL) STELLA::NULL
    (STELLA::CONSIFY (STELLA::%PARENT-MODULES MODULE)))))

;;; (DEFUN (GET-CHILD-CONTEXTS (CONS OF MODULE)) ...)

(CL:DEFUN GET-CHILD-CONTEXTS (MODULEREF)
  "Return a list of child modules of 'moduleRef'."
  (CL:LET*
   ((MODULE (STELLA::GET-MODULE MODULEREF)) (CHILDREN STELLA::NIL))
   (CL:WHEN (CL:EQ MODULE STELLA::NULL)
    (CL:RETURN-FROM GET-CHILD-CONTEXTS STELLA::NULL))
   (CL:LET*
    ((CXT STELLA::NULL)
     (ITER-000
      (STELLA::%THE-CONS-LIST (STELLA::%CHILD-CONTEXTS MODULE))))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 STELLA::NIL)) DO
     (CL:SETQ CXT (STELLA::%%VALUE ITER-000))
     (CL:WHEN (STELLA::ISA? CXT SGT-LOOM-SUPPORT-STELLA-MODULE)
      (CL:SETQ CHILDREN (STELLA::CONS CXT CHILDREN)))
     (CL:SETQ ITER-000 (STELLA::%%REST ITER-000))))
   CHILDREN))

;;; (DEFUN (CONTEXT-OF-INSTANCE MODULE) ...)

(CL:DEFUN CONTEXT-OF-INSTANCE (INSTANCEREF)
  "Return the home context (a module) of 'instanceRef',
or NULL if it is not context sensitive."
  (CL:LET* ((INSTANCE (STELLA::GET-INSTANCE INSTANCEREF)))
   (CL:WHEN (CL:EQ INSTANCE STELLA::NULL)
    (CL:RETURN-FROM CONTEXT-OF-INSTANCE STELLA::NULL))
   (CL:COND
    ((STELLA::SUBTYPE-OF? (STELLA::SAFE-PRIMARY-TYPE INSTANCE)
      SGT-LOOM-SUPPORT-LOGIC-LOGIC-OBJECT)
     (CL:PROGN (STELLA::%HOME-CONTEXT INSTANCE)))
    (CL:T STELLA::NULL))))

;;; (DEFUN CLEAR-USER-CONTEXTS ...)

(CL:DEFUN CLEAR-USER-CONTEXTS ()
  "Destroy the contents of all non-system-defined modules."
  (CL:LET* ((MDL STELLA::NULL) (ITER-000 (STELLA::ALL-MODULES)))
   (CL:LOOP WHILE (STELLA::NEXT? ITER-000) DO
    (CL:SETQ MDL (STELLA::%VALUE ITER-000))
    (CL:WHEN
     (CL:AND (STELLA::CLEARABLE? MDL)
      (CL:NOT
       (STELLA::MEMBER? (STELLA::CONS-LIST STELLA::*PL-KERNEL-MODULE*)
        MDL)))
     (STELLA::%%PRINT-STREAM
      (STELLA::%NATIVE-STREAM STELLA::STANDARD-OUTPUT) "Clearing: " MDL
      EOL)
     (STELLA::CALL-CLEAR-MODULE (STELLA::CONS-LIST MDL))))))

;;; (DEFUN (LIST-CONTEXT CONS) ...)

(CL:DEFUN LIST-CONTEXT (CONTEXT VALUES)
  (CL:LET*
   ((STELLA::*CONTEXT* CONTEXT)
    (STELLA::*MODULE* (STELLA::%BASE-MODULE STELLA::*CONTEXT*)))
   (CL:DECLARE (CL:SPECIAL STELLA::*CONTEXT* STELLA::*MODULE*))
   (CL:COND
    ((CL:EQ VALUES KWD-LOOM-SUPPORT-ALL)
     (STELLA::CONSIFY (STELLA::ALL-NAMED-TERMS CONTEXT CL:NIL)))
    ((CL:EQ VALUES KWD-LOOM-SUPPORT-CONCEPTS)
     (STELLA::APPLY-CACHED-RETRIEVE
      (STELLA::CONS SYM-LOOM-SUPPORT-LOGIC-?X STELLA::NIL)
      (STELLA::LIST* SYM-LOOM-SUPPORT-PL-KERNEL-KB-CLASS
       SYM-LOOM-SUPPORT-LOGIC-?X STELLA::NIL)
      (STELLA::CONS-LIST STELLA::NULL) (STELLA::CONS-LIST)
      SYM-LOOM-SUPPORT-LOOM-API-F-LIST-CONTEXT-QUERY-000))
    ((CL:EQ VALUES KWD-LOOM-SUPPORT-RELATIONS)
     (STELLA::APPLY-CACHED-RETRIEVE
      (STELLA::CONS SYM-LOOM-SUPPORT-LOGIC-?X STELLA::NIL)
      (STELLA::LIST* SYM-LOOM-SUPPORT-STELLA-AND
       (STELLA::LIST* SYM-LOOM-SUPPORT-PL-KERNEL-KB-RELATION
        SYM-LOOM-SUPPORT-LOGIC-?X STELLA::NIL)
       (STELLA::LIST* SYM-LOOM-SUPPORT-LOGIC-FAIL
        (STELLA::LIST* SYM-LOOM-SUPPORT-PL-KERNEL-KB-CLASS
         SYM-LOOM-SUPPORT-LOGIC-?X STELLA::NIL)
        STELLA::NIL)
       STELLA::NIL)
      (STELLA::CONS-LIST STELLA::NULL) (STELLA::CONS-LIST)
      SYM-LOOM-SUPPORT-LOOM-API-F-LIST-CONTEXT-QUERY-001))
    ((CL:EQ VALUES KWD-LOOM-SUPPORT-INSTANCES)
     (STELLA::CONSIFY (STELLA::ALL-INSTANCES CONTEXT CL:NIL)))
    (CL:T
     (CL:LET* ((STREAM-000 (STELLA::NEW-OUTPUT-STRING-STREAM)))
      (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM STREAM-000) "`"
       VALUES "' is not a valid case option")
      (CL:ERROR
       (STELLA::NEW-STELLA-EXCEPTION
        (STELLA::THE-STRING-READER STREAM-000))))))))

;;; (DEFUN (RELATION-ARITY INTEGER) ...)

(CL:DECLAIM (CL:FTYPE (CL:FUNCTION (CL:T) CL:FIXNUM) RELATION-ARITY))
(CL:DEFUN RELATION-ARITY (RELATIONREF)
  "Return the arity of the relation 'relationRef'."
  (CL:LET* ((RELATION (STELLA::GET-RELATION RELATIONREF)))
   (CL:IF (CL:NOT (CL:EQ RELATION STELLA::NULL))
    (CL:LET* ((TEST-VALUE-000 (STELLA::SAFE-PRIMARY-TYPE RELATION)))
     (CL:COND
      ((STELLA::SUBTYPE-OF? TEST-VALUE-000
        SGT-LOOM-SUPPORT-LOGIC-DESCRIPTION)
       (CL:PROGN (STELLA::ARITY RELATION)))
      ((STELLA::SUBTYPE-OF? TEST-VALUE-000
        SGT-LOOM-SUPPORT-LOGIC-LOGIC-OBJECT)
       (CL:PROGN
        (STELLA::%WRAPPER-VALUE
         (STELLA::GET-SLOT-VALUE RELATION
          SGT-LOOM-SUPPORT-PL-KERNEL-KB-ARITY))))
      (CL:T
       (CL:LET* ((STREAM-000 (STELLA::NEW-OUTPUT-STRING-STREAM)))
        (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM STREAM-000) "`"
         TEST-VALUE-000 "' is not a valid case option")
        (CL:ERROR
         (STELLA::NEW-STELLA-EXCEPTION
          (STELLA::THE-STRING-READER STREAM-000)))))))
    STELLA::NULL-INTEGER)))

;;; (DEFUN (FIND-CLASS LOGIC-OBJECT) ...)

(CL:DEFUN FIND-CLASS (INSTANCEREF MODULE LOCAL?)
  "Return the nearest class with name 'instanceRef' in
the module 'module'.  If 'local?' is FALSE, also search modules inherited
by 'module'.  'instanceRef' can be a string, symbol, or surrogate."
  (CL:LET*
   ((INSTANCE
     (STELLA::COERCE-TO-INSTANCE-IN-MODULE INSTANCEREF MODULE LOCAL?
      STELLA::NULL)))
   (CL:IF (STELLA::CLASS? INSTANCE) INSTANCE STELLA::NULL)))

;;; (DEFUN (FIND-RELATION LOGIC-OBJECT) ...)

(CL:DEFUN FIND-RELATION (INSTANCEREF MODULE LOCAL?)
  "Return the nearest relation with name 'instanceRef' in
the module 'module'.  If 'local?' is FALSE, also search modules inherited
by 'module'.  'instanceRef' can be a string, symbol, or surrogate."
  (CL:LET*
   ((INSTANCE
     (STELLA::COERCE-TO-INSTANCE-IN-MODULE INSTANCEREF MODULE LOCAL?
      STELLA::NULL)))
   (CL:IF (STELLA::RELATION? INSTANCE) INSTANCE STELLA::NULL)))

;;; (DEFUN (GET-INSTANCE-SURROGATE SURROGATE) ...)

(CL:DEFUN GET-INSTANCE-SURROGATE (INSTANCEREF)
  "Return the surrogate pointing to the instance referenced by
'instanceRef'."
  (CL:COND ((CL:EQ INSTANCEREF STELLA::NULL) STELLA::NULL)
   ((STELLA::ISA? INSTANCEREF SGT-LOOM-SUPPORT-STELLA-SURROGATE)
    (CL:IF (CL:EQ (STELLA::%SURROGATE-VALUE INSTANCEREF) STELLA::NULL)
     STELLA::NULL INSTANCEREF))
   (CL:T
    (CL:LET* ((INSTANCE (STELLA::GET-INSTANCE INSTANCEREF)))
     (CL:WHEN (CL:EQ INSTANCE STELLA::NULL)
      (CL:RETURN-FROM GET-INSTANCE-SURROGATE STELLA::NULL))
     (CL:LET* ((TEST-VALUE-000 (STELLA::SAFE-PRIMARY-TYPE INSTANCE)))
      (CL:COND
       ((STELLA::SUBTYPE-OF? TEST-VALUE-000
         SGT-LOOM-SUPPORT-LOGIC-LOGIC-OBJECT)
        (CL:PROGN
         (CL:IF (CL:NOT (CL:EQ INSTANCE STELLA::NULL))
          (STELLA::%SURROGATE-VALUE-INVERSE INSTANCE) STELLA::NULL)))
       ((STELLA::SUBTYPE-OF? TEST-VALUE-000
         SGT-LOOM-SUPPORT-STELLA-THING)
        (CL:PROGN
         (CL:IF (CL:NOT (CL:EQ INSTANCE STELLA::NULL))
          (STELLA::%SURROGATE-VALUE-INVERSE INSTANCE) STELLA::NULL)))
       (CL:T
        (CL:LET* ((STREAM-000 (STELLA::NEW-OUTPUT-STRING-STREAM)))
         (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM STREAM-000)
          "`" TEST-VALUE-000 "' is not a valid case option")
         (CL:ERROR
          (STELLA::NEW-STELLA-EXCEPTION
           (STELLA::THE-STRING-READER STREAM-000)))))))))))

;;; (DEFUN (GET-INSTANCE-NAME SYMBOL) ...)

(CL:DEFUN GET-INSTANCE-NAME (INSTANCEREF)
  "Return the name (a symbol) of the instance referenced by
'instanceRef'."
  (CL:LET* ((INSTANCE (STELLA::GET-INSTANCE INSTANCEREF)))
   (CL:LET* ((TEST-VALUE-000 (STELLA::SAFE-PRIMARY-TYPE INSTANCE)))
    (CL:COND
     ((STELLA::SUBTYPE-OF? TEST-VALUE-000
       SGT-LOOM-SUPPORT-LOGIC-LOGIC-OBJECT)
      (CL:PROGN
       (CL:WHEN
        (CL:AND (CL:NOT (CL:EQ INSTANCE STELLA::NULL))
         (CL:NOT
          (CL:EQ (STELLA::%SURROGATE-VALUE-INVERSE INSTANCE)
           STELLA::NULL)))
        (CL:RETURN-FROM GET-INSTANCE-NAME
         (STELLA::SURROGATE-TO-SYMBOL
          (STELLA::%SURROGATE-VALUE-INVERSE INSTANCE))))))
     ((STELLA::SUBTYPE-OF? TEST-VALUE-000
       SGT-LOOM-SUPPORT-STELLA-THING)
      (CL:PROGN
       (CL:WHEN
        (CL:AND (CL:NOT (CL:EQ INSTANCE STELLA::NULL))
         (CL:NOT
          (CL:EQ (STELLA::%SURROGATE-VALUE-INVERSE INSTANCE)
           STELLA::NULL)))
        (CL:RETURN-FROM GET-INSTANCE-NAME
         (STELLA::SURROGATE-TO-SYMBOL
          (STELLA::%SURROGATE-VALUE-INVERSE INSTANCE))))))
     (CL:T
      (CL:LET* ((STREAM-000 (STELLA::NEW-OUTPUT-STRING-STREAM)))
       (STELLA::%%PRINT-STREAM (STELLA::%NATIVE-STREAM STREAM-000) "`"
        TEST-VALUE-000 "' is not a valid case option")
       (CL:ERROR
        (STELLA::NEW-STELLA-EXCEPTION
         (STELLA::THE-STRING-READER STREAM-000)))))))
   STELLA::NULL))

;;; (DEFUN (GET-EQUIVALENT-NAMES (CONS OF SYMBOL)) ...)

(CL:DEFUN GET-EQUIVALENT-NAMES (RELATIONREF)
  "Return a list containing the name of 'relationRef'
plus the names of any equivalent relations."
  (CL:LET*
   ((RELATION (STELLA::GET-RELATION RELATIONREF))
    (EQUIVALENTNAMES STELLA::NIL))
   (CL:WHEN (CL:EQ RELATION STELLA::NULL)
    (CL:RETURN-FROM GET-EQUIVALENT-NAMES STELLA::NULL))
   (CL:LET*
    ((E STELLA::NULL)
     (ITER-000 (STELLA::ALL-EQUIVALENT-COLLECTIONS RELATION CL:T))
     (COLLECT-000 STELLA::NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 STELLA::NIL)) DO
     (CL:SETQ E (STELLA::%%VALUE ITER-000))
     (CL:WHEN (STELLA::NAMED-DESCRIPTION? E)
      (CL:IF (CL:EQ COLLECT-000 STELLA::NULL)
       (CL:PROGN
        (CL:SETQ COLLECT-000
         (STELLA::CONS (STELLA::DESCRIPTION-NAME E) STELLA::NIL))
        (CL:IF (CL:EQ EQUIVALENTNAMES STELLA::NIL)
         (CL:SETQ EQUIVALENTNAMES COLLECT-000)
         (STELLA::ADD-CONS-TO-END-OF-CONS-LIST EQUIVALENTNAMES
          COLLECT-000)))
       (CL:PROGN
        (CL:SETF (STELLA::%%REST COLLECT-000)
         (STELLA::CONS (STELLA::DESCRIPTION-NAME E) STELLA::NIL))
        (CL:SETQ COLLECT-000 (STELLA::%%REST COLLECT-000)))))
     (CL:SETQ ITER-000 (STELLA::%%REST ITER-000))))
   EQUIVALENTNAMES))

;;; (DEFUN (INSTANCE? BOOLEAN) ...)

(CL:DEFUN INSTANCE? (OBJECTREF)
  "Return TRUE if 'objectRef' is an instance or the
name of an instance."
  (CL:LET* ((STELLA::*SUPPRESSNONLOGICOBJECTWARNING?* CL:T))
   (CL:DECLARE (CL:SPECIAL STELLA::*SUPPRESSNONLOGICOBJECTWARNING?*))
   (CL:NOT (CL:EQ (STELLA::GET-INSTANCE OBJECTREF) STELLA::NULL))))

;;; (DEFUN (INDIVIDUAL? BOOLEAN) ...)

(CL:DEFUN INDIVIDUAL? (OBJECT)
  "Return TRUE if 'objectRef' is an instance or the
name of an instance, and does not denote a relation, class, or set."
  (CL:LET* ((STELLA::*SUPPRESSNONLOGICOBJECTWARNING?* CL:T))
   (CL:DECLARE (CL:SPECIAL STELLA::*SUPPRESSNONLOGICOBJECTWARNING?*))
   (CL:LET* ((INSTANCE (STELLA::GET-INSTANCE OBJECT)))
    (CL:AND (CL:NOT (CL:EQ INSTANCE STELLA::NULL))
     (CL:NOT (STELLA::COLLECTION? INSTANCE))))))

;;; (DEFUN (NAMED? BOOLEAN) ...)

(CL:DEFUN NAMED? (INSTANCEREF)
  "Return TRUE if the object returned by 'instanceRef'
is matched with a logical constant."
  (CL:NOT (CL:EQ (GET-INSTANCE-NAME INSTANCEREF) STELLA::NULL)))

;;; (DEFUN (CREATE-INSTANCE OBJECT) ...)

(CL:DEFUN CREATE-INSTANCE (INSTANCEREF CLASSREF)
  "Create an instance named 'instanceRef'
of type 'classRef'."
  (CL:LET*
   ((CLASSTYPE (GET-INSTANCE-SURROGATE CLASSREF))
    (SURROGATE (SAFE-SURROGATIFY INSTANCEREF)))
   (CL:IF
    (CL:AND (STELLA::CLASS? CLASSTYPE)
     (CL:OR (CL:EQ INSTANCEREF STELLA::NULL)
      (CL:NOT (CL:EQ SURROGATE STELLA::NULL))))
    (STELLA::CREATE-LOGIC-INSTANCE SURROGATE CLASSTYPE) STELLA::NULL)))

;;; (DEFUN (FIND-OR-CREATE-INSTANCE LOGIC-OBJECT) ...)

(CL:DEFUN FIND-OR-CREATE-INSTANCE (INSTANCEREF CLASSREF)
  "Find an existing instance refenced by 'instanceRef'
of type 'classRef', or create one of type 'classRef'."
  (CL:LET*
   ((INSTANCE (STELLA::GET-INSTANCE INSTANCEREF))
    (CLASSTYPE (GET-INSTANCE-SURROGATE CLASSREF)))
   (CL:COND
    ((CL:NOT (CL:EQ INSTANCE STELLA::NULL))
     (CL:IF
      (CL:OR (CL:EQ CLASSREF STELLA::NULL)
       (INSTANCE-OF? INSTANCE CLASSTYPE))
      INSTANCE STELLA::NULL))
    (CL:T (CREATE-INSTANCE INSTANCEREF CLASSREF)))))

;;; (DEFUN (INSTANCE-OF? BOOLEAN) ...)

(CL:DEFUN INSTANCE-OF? (INSTANCEREF CLASSREF)
  "Return TRUE if the instance referenced by 'instanceRef'
belongs to the class referenced by 'classRef'."
  (CL:LET*
   ((INSTANCE (STELLA::GET-INSTANCE INSTANCEREF))
    (CLASSTYPE (GET-INSTANCE-SURROGATE CLASSREF)))
   (CL:AND (CL:NOT (CL:EQ INSTANCE STELLA::NULL))
    (CL:NOT (CL:EQ CLASSTYPE STELLA::NULL))
    (STELLA::TEST-TYPE-ON-INSTANCE? INSTANCE CLASSTYPE))))

;;; (DEFUN ADD-TYPE ...)

(CL:DEFUN ADD-TYPE (INSTANCEREF CLASSREF)
  "Assert that the instance referenced by 'instanceRef'
is an instance of the class referenced by 'classRef'."
  (CL:LET*
   ((INSTANCE (STELLA::GET-INSTANCE INSTANCEREF))
    (CLASSTYPE (GET-INSTANCE-SURROGATE CLASSREF)))
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ INSTANCE STELLA::NULL))
     (STELLA::CLASS? CLASSTYPE))
    (STELLA::UPDATE-ISA-PROPOSITION INSTANCE CLASSTYPE
     KWD-LOOM-SUPPORT-ASSERT-TRUE))))

;;; (DEFUN REMOVE-TYPE ...)

(CL:DEFUN REMOVE-TYPE (INSTANCEREF CLASSREF)
  "Retract that the instance referenced by 'instanceRef'
is an instance of the class referenced by 'classRef'."
  (CL:LET*
   ((INSTANCE (STELLA::GET-INSTANCE INSTANCEREF))
    (CLASSTYPE (GET-INSTANCE-SURROGATE CLASSREF)))
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ INSTANCE STELLA::NULL))
     (STELLA::CLASS? CLASSTYPE))
    (STELLA::UPDATE-ISA-PROPOSITION INSTANCE CLASSTYPE
     KWD-LOOM-SUPPORT-RETRACT-TRUE))))

;;; (DEFUN (GET-TYPES (CONS OF DESCRIPTION)) ...)

(CL:DEFUN GET-TYPES (INSTANCEREF DIRECTORASSERTED)
  "Return a list of classes that instance belongs to."
  (CL:LET*
   ((INSTANCE (STELLA::GET-INSTANCE INSTANCEREF)) (RESULT STELLA::NIL))
   (CL:WHEN (CL:EQ INSTANCE STELLA::NULL)
    (CL:RETURN-FROM GET-TYPES STELLA::NULL))
   (CL:COND
    ((CL:EQ DIRECTORASSERTED KWD-LOOM-SUPPORT-DIRECT)
     (CL:LET*
      ((D STELLA::NULL) (ITER-000 (STELLA::ALL-DIRECT-TYPES INSTANCE)))
      (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 STELLA::NIL)) DO
       (CL:SETQ D (STELLA::%%VALUE ITER-000))
       (CL:SETQ RESULT (STELLA::CONS D RESULT))
       (CL:SETQ ITER-000 (STELLA::%%REST ITER-000)))))
    ((CL:EQ DIRECTORASSERTED KWD-LOOM-SUPPORT-ASSERTED)
     (CL:LET*
      ((D STELLA::NULL)
       (ITER-001 (STELLA::ALL-ASSERTED-TYPES INSTANCE)))
      (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 STELLA::NIL)) DO
       (CL:SETQ D (STELLA::%%VALUE ITER-001))
       (CL:SETQ RESULT (STELLA::CONS D RESULT))
       (CL:SETQ ITER-001 (STELLA::%%REST ITER-001)))))
    (CL:T
     (CL:LET*
      ((D STELLA::NULL) (ITER-002 (STELLA::ALL-TYPES INSTANCE)))
      (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-002 STELLA::NIL)) DO
       (CL:SETQ D (STELLA::%%VALUE ITER-002))
       (CL:SETQ RESULT (STELLA::CONS D RESULT))
       (CL:SETQ ITER-002 (STELLA::%%REST ITER-002))))))
   RESULT))

;;; (DEFUN UPDATE-ROLE-VALUE ...)

(CL:DEFUN UPDATE-ROLE-VALUE (INSTANCEREF RELATIONREF VALUEREF ASSERT?)
  "Assert the tuple '(relationRef instanceRef valueRef)',
or retract if 'assert?' is FALSE."
  (CL:LET*
   ((INSTANCE (STELLA::GET-INSTANCE INSTANCEREF))
    (RELATION (STELLA::GET-RELATION RELATIONREF))
    (VALUE (STELLA::GET-INSTANCE VALUEREF)))
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ INSTANCE STELLA::NULL))
     (CL:NOT (CL:EQ RELATION STELLA::NULL))
     (CL:= (RELATION-ARITY RELATION) 2)
     (CL:NOT (CL:EQ VALUE STELLA::NULL)))
    (STELLA::UPDATE-TUPLE (GET-INSTANCE-SURROGATE RELATION)
     (STELLA::CONS-LIST INSTANCE VALUE)
     (CL:IF ASSERT? KWD-LOOM-SUPPORT-ASSERT-TRUE
      KWD-LOOM-SUPPORT-RETRACT-TRUE)))))

;;; (DEFUN ADD-ROLE-VALUE ...)

(CL:DEFUN ADD-ROLE-VALUE (INSTANCEREF RELATIONREF VALUEREF)
  "Assert the tuple '(relationRef instanceRef valueRef)'."
  (UPDATE-ROLE-VALUE INSTANCEREF RELATIONREF VALUEREF CL:T))

;;; (DEFUN REMOVE-ROLE-VALUE ...)

(CL:DEFUN REMOVE-ROLE-VALUE (INSTANCEREF RELATIONREF VALUEREF)
  "Retract the tuple '(relationRef instanceRef valueRef)'."
  (UPDATE-ROLE-VALUE INSTANCEREF RELATIONREF VALUEREF CL:NIL))

;;; (DEFUN (GET-ROLE-VALUE OBJECT) ...)

(CL:DEFUN GET-ROLE-VALUE (INSTANCEREF RELATIONREF)
  "Return a value for the binary relation 'relationRef'
applied to 'instanceRef'."
  (CL:LET*
   ((INSTANCE (STELLA::GET-INSTANCE INSTANCEREF))
    (RELATION (STELLA::GET-RELATION RELATIONREF)))
   (CL:IF
    (CL:AND (CL:NOT (CL:EQ INSTANCE STELLA::NULL))
     (CL:NOT (CL:EQ RELATION STELLA::NULL))
     (CL:= (RELATION-ARITY RELATION) 2))
    (STELLA::GET-SLOT-VALUE INSTANCE (GET-INSTANCE-SURROGATE RELATION))
    STELLA::NULL)))

;;; (DEFUN (GET-ROLE-VALUES CONS) ...)

(CL:DEFUN GET-ROLE-VALUES (INSTANCEREF RELATIONREF)
  "Return a list of values for the binary relation 'relationRef'
applied to 'instanceRef'."
  (CL:LET*
   ((INSTANCE (STELLA::GET-INSTANCE INSTANCEREF))
    (RELATION (STELLA::GET-RELATION RELATIONREF)))
   (CL:IF
    (CL:AND (CL:NOT (CL:EQ INSTANCE STELLA::NULL))
     (CL:NOT (CL:EQ RELATION STELLA::NULL))
     (CL:= (RELATION-ARITY RELATION) 2))
    (STELLA::ALL-SLOT-VALUES INSTANCE
     (GET-INSTANCE-SURROGATE RELATION))
    STELLA::NULL)))

;;; (DEFUN (GET-ROLE-DEFAULT-VALUES CONS) ...)

(CL:DEFUN GET-ROLE-DEFAULT-VALUES (INSTANCEREF RELATIONREF)
  "Return a list of default values for the binary relation
'relationRef' applied to 'instanceRef'."
  (CL:LET* ((DEFAULTVALUES STELLA::NULL))
   (CL:LET*
    ((STELLA::*CONTEXT*
      (STELLA::GET-INFERENCE-CACHE STELLA::*MODULE*
       KWD-LOOM-SUPPORT-DEFAULT))
     (STELLA::*MODULE* (STELLA::%BASE-MODULE STELLA::*CONTEXT*)))
    (CL:DECLARE (CL:SPECIAL STELLA::*CONTEXT* STELLA::*MODULE*))
    (CL:SETQ DEFAULTVALUES (GET-ROLE-VALUES INSTANCEREF RELATIONREF)))
   (CL:LET*
    ((STELLA::*CONTEXT*
      (STELLA::GET-INFERENCE-CACHE STELLA::*MODULE*
       KWD-LOOM-SUPPORT-STRICT))
     (STELLA::*MODULE* (STELLA::%BASE-MODULE STELLA::*CONTEXT*)))
    (CL:DECLARE (CL:SPECIAL STELLA::*CONTEXT* STELLA::*MODULE*))
    (CL:LET*
     ((V STELLA::NULL)
      (ITER-000 (GET-ROLE-VALUES INSTANCEREF RELATIONREF)))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 STELLA::NIL)) DO
      (CL:SETQ V (STELLA::%%VALUE ITER-000))
      (CL:SETQ DEFAULTVALUES (STELLA::REMOVE DEFAULTVALUES V))
      (CL:SETQ ITER-000 (STELLA::%%REST ITER-000)))))
   DEFAULTVALUES))

;;; (DEFUN (GET-CLASS-INSTANCES CONS) ...)

(CL:DEFUN GET-CLASS-INSTANCES (CLASSREF DIRECT?)
  "Return a list of instances belonging to the class 'classRef'."
  (CL:LET* ((CLASSTYPE (GET-INSTANCE-SURROGATE CLASSREF)))
   (CL:IF (STELLA::CLASS? CLASSTYPE)
    (CL:IF DIRECT?
     (CL:LET*
      ((INSTANCES (STELLA::ALL-CLASS-INSTANCES CLASSTYPE))
       (DIRECTINSTANCES STELLA::NIL)
       (DIRECTSUBS
        (STELLA::ALL-DIRECT-SUBRELATIONS
         (STELLA::GET-INSTANCE CLASSREF) CL:T))
       (INSTANCE-OF-SUB? CL:NIL))
      (CL:LET* ((I STELLA::NULL) (ITER-000 INSTANCES))
       (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 STELLA::NIL)) DO
        (CL:SETQ I (STELLA::%%VALUE ITER-000))
        (CL:SETQ INSTANCE-OF-SUB? CL:NIL)
        (CL:LET* ((S STELLA::NULL) (ITER-001 DIRECTSUBS))
         (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 STELLA::NIL)) DO
          (CL:SETQ S (STELLA::%%VALUE ITER-001))
          (CL:WHEN (INSTANCE-OF? I S) (CL:SETQ INSTANCE-OF-SUB? CL:T)
           (CL:RETURN))
          (CL:SETQ ITER-001 (STELLA::%%REST ITER-001))))
        (CL:WHEN (CL:NOT INSTANCE-OF-SUB?)
         (CL:SETQ DIRECTINSTANCES (STELLA::CONS I DIRECTINSTANCES)))
        (CL:SETQ ITER-000 (STELLA::%%REST ITER-000))))
      DIRECTINSTANCES)
     (STELLA::ALL-CLASS-INSTANCES CLASSTYPE))
    STELLA::NIL)))

;;; (DEFUN (SUBRELATION? BOOLEAN) ...)

(CL:DEFUN SUBRELATION? (SUBRELATIONREF SUPERRELATIONREF)
  "Return TRUE if 'subrelationRef' specializes 'superrelationRef'.
Side-effect: Upclassify 'subrelationRef'."
  (CL:LET*
   ((SUBRELATION (STELLA::GET-RELATION SUBRELATIONREF))
    (SUBRELATIONTYPE
     (CL:IF (CL:NOT (CL:EQ SUBRELATION STELLA::NULL))
      (STELLA::%SURROGATE-VALUE-INVERSE SUBRELATION) STELLA::NULL))
    (SUPERRELATIONTYPE (GET-INSTANCE-SURROGATE SUPERRELATIONREF)))
   (CL:IF
    (CL:AND (STELLA::RELATION? SUBRELATIONTYPE)
     (STELLA::RELATION? SUPERRELATIONTYPE))
    (CL:PROGN (STELLA::FIND-DIRECT-SUPERS-AND-SUBS SUBRELATION CL:T)
     (STELLA::TEST-SUBRELATION? SUBRELATIONTYPE SUPERRELATIONTYPE))
    CL:NIL)))

;;; (DEFUN (GET-SUPERRELATIONS (CONS OF LOGIC-OBJECT)) ...)

(CL:DEFUN GET-SUPERRELATIONS (RELATIONREF DIRECT?)
  "Return a list of relations that generalize 'relationRef'.
Does not include relations equivalent to 'relationRef'."
  (STELLA::FINALIZE-OBJECTS)
  (CL:LET*
   ((RELATION (STELLA::GET-INSTANCE RELATIONREF)) (RESULT STELLA::NIL))
   (CL:WHEN (STELLA::RELATION? RELATION)
    (CL:IF DIRECT?
     (CL:LET*
      ((SUPER STELLA::NULL)
       (ITER-000 (STELLA::ALL-DIRECT-SUPERRELATIONS RELATION CL:T)))
      (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 STELLA::NIL)) DO
       (CL:SETQ SUPER (STELLA::%%VALUE ITER-000))
       (CL:SETQ RESULT (STELLA::CONS SUPER RESULT))
       (CL:SETQ ITER-000 (STELLA::%%REST ITER-000))))
     (CL:LET*
      ((SUPER STELLA::NULL)
       (ITER-001 (STELLA::ALL-SUPERRELATIONS RELATION CL:T)))
      (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 STELLA::NIL)) DO
       (CL:SETQ SUPER (STELLA::%%VALUE ITER-001))
       (CL:SETQ RESULT (STELLA::CONS SUPER RESULT))
       (CL:SETQ ITER-001 (STELLA::%%REST ITER-001))))))
   RESULT))

;;; (DEFUN (GET-SUBRELATIONS (CONS OF LOGIC-OBJECT)) ...)

(CL:DEFUN GET-SUBRELATIONS (RELATIONREF DIRECT?)
  "Return a list of relations that specialize 'relationRef'.
Does not include relations equivalent to 'relationRef'."
  (STELLA::FINALIZE-OBJECTS)
  (CL:LET*
   ((RELATION (STELLA::GET-INSTANCE RELATIONREF)) (RESULT STELLA::NIL))
   (CL:WHEN (STELLA::RELATION? RELATION)
    (CL:IF DIRECT?
     (CL:LET*
      ((SUB STELLA::NULL)
       (ITER-000 (STELLA::ALL-DIRECT-SUBRELATIONS RELATION CL:T)))
      (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 STELLA::NIL)) DO
       (CL:SETQ SUB (STELLA::%%VALUE ITER-000))
       (CL:SETQ RESULT (STELLA::CONS SUB RESULT))
       (CL:SETQ ITER-000 (STELLA::%%REST ITER-000))))
     (CL:LET*
      ((SUB STELLA::NULL)
       (ITER-001 (STELLA::ALL-SUBRELATIONS RELATION CL:T)))
      (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 STELLA::NIL)) DO
       (CL:SETQ SUB (STELLA::%%VALUE ITER-001))
       (CL:SETQ RESULT (STELLA::CONS SUB RESULT))
       (CL:SETQ ITER-001 (STELLA::%%REST ITER-001))))))
   RESULT))

;;; (DEFUN (MOST-SPECIFIC-RELATIONS (CONS OF LOGIC-OBJECT)) ...)

(CL:DEFUN MOST-SPECIFIC-RELATIONS (RELATIONREFS CLASSIFYFIRST?)
  "Return a list of the most specific among the
relations in 'relationRefs'.  If 'classifyFirst?', insure that
all relations are classified before filtering for most-specific."
  (CL:LET* ((RELATIONS STELLA::NIL))
   (CL:LET*
    ((R STELLA::NULL) (ITER-000 RELATIONREFS)
     (COLLECT-000 STELLA::NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 STELLA::NIL)) DO
     (CL:SETQ R (STELLA::%%VALUE ITER-000))
     (CL:IF (CL:EQ COLLECT-000 STELLA::NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-000
        (STELLA::CONS (STELLA::GET-RELATION R) STELLA::NIL))
       (CL:IF (CL:EQ RELATIONS STELLA::NIL)
        (CL:SETQ RELATIONS COLLECT-000)
        (STELLA::ADD-CONS-TO-END-OF-CONS-LIST RELATIONS COLLECT-000)))
      (CL:PROGN
       (CL:SETF (STELLA::%%REST COLLECT-000)
        (STELLA::CONS (STELLA::GET-RELATION R) STELLA::NIL))
       (CL:SETQ COLLECT-000 (STELLA::%%REST COLLECT-000))))
     (CL:SETQ ITER-000 (STELLA::%%REST ITER-000))))
   (CL:SETQ RELATIONS (STELLA::REMOVE-DUPLICATES RELATIONS))
   (CL:WHEN (CL:EQ (STELLA::%%REST RELATIONS) STELLA::NIL)
    (CL:RETURN-FROM MOST-SPECIFIC-RELATIONS RELATIONS))
   (CL:WHEN CLASSIFYFIRST?
    (CL:LET*
     ((STELLA::*CLASSIFICATIONSESSION*
       (STELLA::GET-CLASSIFICATION-SESSION
        KWD-LOOM-SUPPORT-DESCRIPTION)))
     (CL:DECLARE (CL:SPECIAL STELLA::*CLASSIFICATIONSESSION*))
     (CL:LET* ((STELLA::*CONTEXT* (STELLA::GET-CLASSIFICATION-WORLD)))
      (CL:DECLARE (CL:SPECIAL STELLA::*CONTEXT*))
      (CL:LET* ((YOUNGESTRELATION (STELLA::%%VALUE RELATIONS)))
       (CL:LET*
        ((R STELLA::NULL) (ITER-001 (STELLA::%%REST RELATIONS)))
        (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 STELLA::NIL)) DO
         (CL:SETQ R (STELLA::%%VALUE ITER-001))
         (CL:WHEN
          (CL:> (STELLA::INTRODUCTION-TIMESTAMP R)
           (STELLA::INTRODUCTION-TIMESTAMP YOUNGESTRELATION))
          (CL:SETQ YOUNGESTRELATION R))
         (CL:SETQ ITER-001 (STELLA::%%REST ITER-001))))
       (CL:LET* ((R STELLA::NULL) (ITER-002 RELATIONS))
        (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-002 STELLA::NIL)) DO
         (CL:SETQ R (STELLA::%%VALUE ITER-002))
         (CL:WHEN
          (CL:NOT
           (STELLA::UPCLASSIFIED-LATER-THAN? R YOUNGESTRELATION))
          (STELLA::UPCLASSIFY-ONE-DESCRIPTION R))
         (CL:SETQ ITER-002 (STELLA::%%REST ITER-002))))
       (CL:RETURN-FROM MOST-SPECIFIC-RELATIONS
        (STELLA::MOST-SPECIFIC-NAMED-COLLECTIONS RELATIONS))))))
   (STELLA::MOST-SPECIFIC-NAMED-COLLECTIONS RELATIONS)))

;;; (DEFUN (COMPUTE-CONJUNCTION-RELATION DESCRIPTION) ...)

(CL:DEFUN COMPUTE-CONJUNCTION-RELATION (RELATIONREFS)
  "Return a relation representing the conjunction
of relations in 'relationRefs'."
  (CL:LET*
   ((RELATIONS STELLA::NIL) (CONJUNCTIONDESCRIPTION STELLA::NULL))
   (CL:LET*
    ((R STELLA::NULL) (ITER-000 RELATIONREFS)
     (COLLECT-000 STELLA::NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 STELLA::NIL)) DO
     (CL:SETQ R (STELLA::%%VALUE ITER-000))
     (CL:IF (CL:EQ COLLECT-000 STELLA::NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-000
        (STELLA::CONS (STELLA::GET-RELATION R) STELLA::NIL))
       (CL:IF (CL:EQ RELATIONS STELLA::NIL)
        (CL:SETQ RELATIONS COLLECT-000)
        (STELLA::ADD-CONS-TO-END-OF-CONS-LIST RELATIONS COLLECT-000)))
      (CL:PROGN
       (CL:SETF (STELLA::%%REST COLLECT-000)
        (STELLA::CONS (STELLA::GET-RELATION R) STELLA::NIL))
       (CL:SETQ COLLECT-000 (STELLA::%%REST COLLECT-000))))
     (CL:SETQ ITER-000 (STELLA::%%REST ITER-000))))
   (CL:SETQ RELATIONS (STELLA::REMOVE-DUPLICATES RELATIONS))
   (CL:WHEN (CL:EQ (STELLA::%%REST RELATIONS) STELLA::NIL)
    (CL:RETURN-FROM COMPUTE-CONJUNCTION-RELATION
     (STELLA::%%VALUE RELATIONS)))
   (CL:LET* ((CLAUSES STELLA::NIL) (VARIABLES STELLA::NIL))
    (CL:LET*
     ((V STELLA::NULL) (ITER-001 STELLA::SYSTEM-DEFINED-ARGUMENT-NAMES)
      (I
       (STELLA::INTERVAL 1
        (RELATION-ARITY (STELLA::%%VALUE RELATIONS))))
      (COLLECT-001 STELLA::NULL))
     (CL:LOOP WHILE
      (CL:AND (CL:NOT (CL:EQ ITER-001 STELLA::NIL)) (STELLA::NEXT? I))
      DO (CL:SETQ V (STELLA::%%VALUE ITER-001))
      (CL:IF (CL:EQ COLLECT-001 STELLA::NULL)
       (CL:PROGN (CL:SETQ COLLECT-001 (STELLA::CONS V STELLA::NIL))
        (CL:IF (CL:EQ VARIABLES STELLA::NIL)
         (CL:SETQ VARIABLES COLLECT-001)
         (STELLA::ADD-CONS-TO-END-OF-CONS-LIST VARIABLES COLLECT-001)))
       (CL:PROGN
        (CL:SETF (STELLA::%%REST COLLECT-001)
         (STELLA::CONS V STELLA::NIL))
        (CL:SETQ COLLECT-001 (STELLA::%%REST COLLECT-001))))
      (CL:SETQ ITER-001 (STELLA::%%REST ITER-001))))
    (CL:LET* ((R STELLA::NULL) (ITER-002 RELATIONS))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-002 STELLA::NIL)) DO
      (CL:SETQ R (STELLA::%%VALUE ITER-002))
      (CL:IF (NAMED? R)
       (CL:SETQ CLAUSES
        (STELLA::CONS
         (STELLA::CONS
          (STELLA::SURROGATE-TO-SYMBOL
           (STELLA::%SURROGATE-VALUE-INVERSE R))
          (STELLA::CONCATENATE (STELLA::COPY-CONS-LIST VARIABLES)
           STELLA::NIL))
         CLAUSES))
       (CL:SETQ CLAUSES
        (STELLA::CONS
         (STELLA::%%VALUE
          (STELLA::%%REST
           (STELLA::%%REST (STELLA::GENERATE-EXPRESSION R CL:T))))
         CLAUSES)))
      (CL:SETQ ITER-002 (STELLA::%%REST ITER-002))))
    (CL:SETQ CONJUNCTIONDESCRIPTION
     (STELLA::CONCEIVE-TERM
      (STELLA::LIST* SYM-LOOM-SUPPORT-LOGIC-KAPPA
       (STELLA::CONS VARIABLES STELLA::NIL)
       (STELLA::CONS SYM-LOOM-SUPPORT-STELLA-AND
        (STELLA::CONCATENATE CLAUSES STELLA::NIL))
       STELLA::NIL))))
   (CL:LET*
    ((SUPERS STELLA::NULL) (SUBS STELLA::NULL)
     (EQUIVALENTS STELLA::NULL))
    (CL:MULTIPLE-VALUE-SETQ (SUPERS SUBS EQUIVALENTS)
     (STELLA::FIND-DIRECT-SUPERS-AND-SUBS CONJUNCTIONDESCRIPTION CL:T))
    (CL:PROGN (CL:SETQ SUPERS SUPERS) (CL:SETQ SUBS SUBS))
    (CL:IF (CL:NOT (CL:EQ EQUIVALENTS STELLA::NIL))
     (STELLA::%%VALUE EQUIVALENTS) CONJUNCTIONDESCRIPTION))))

;;; (DEFUN (GET-DOMAIN NAMED-DESCRIPTION) ...)

(CL:DEFUN GET-DOMAIN (RELATIONREF)
  "Return the domain of the binary relation 'relationRef'."
  (CL:LET* ((RELATION (STELLA::GET-RELATION RELATIONREF)))
   (CL:WHEN (CL:EQ RELATION STELLA::NULL)
    (CL:RETURN-FROM GET-DOMAIN STELLA::NULL))
   (STELLA::%%VALUE
    (STELLA::APPLY-CACHED-RETRIEVE
     (STELLA::LIST* SYM-LOOM-SUPPORT-LOOM-API-?D
      SYM-LOOM-SUPPORT-LOOM-API-?R STELLA::NIL)
     (STELLA::LIST* SYM-LOOM-SUPPORT-PL-KERNEL-KB-DOMAIN
      SYM-LOOM-SUPPORT-LOOM-API-?R SYM-LOOM-SUPPORT-LOOM-API-?D
      STELLA::NIL)
     (STELLA::CONS-LIST STELLA::NULL RELATION) (STELLA::CONS-LIST)
     SYM-LOOM-SUPPORT-LOOM-API-F-GET-DOMAIN-QUERY-000))))

;;; (DEFUN (GET-RANGE NAMED-DESCRIPTION) ...)

(CL:DEFUN GET-RANGE (RELATIONREF)
  "Return the range of the binary relation 'relationRef'."
  (CL:LET* ((RELATION (STELLA::GET-RELATION RELATIONREF)))
   (CL:WHEN (CL:EQ RELATION STELLA::NULL)
    (CL:RETURN-FROM GET-RANGE STELLA::NULL))
   (STELLA::%%VALUE
    (STELLA::APPLY-CACHED-RETRIEVE
     (STELLA::LIST* SYM-LOOM-SUPPORT-LOOM-API-?D
      SYM-LOOM-SUPPORT-LOOM-API-?R STELLA::NIL)
     (STELLA::LIST* SYM-LOOM-SUPPORT-PL-KERNEL-KB-RANGE
      SYM-LOOM-SUPPORT-LOOM-API-?R SYM-LOOM-SUPPORT-LOOM-API-?D
      STELLA::NIL)
     (STELLA::CONS-LIST STELLA::NULL RELATION) (STELLA::CONS-LIST)
     SYM-LOOM-SUPPORT-LOOM-API-F-GET-RANGE-QUERY-000))))

;;; (DEFUN (GET-MIN-CARDINALITY INTEGER) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T CL:T) CL:FIXNUM) GET-MIN-CARDINALITY))
(CL:DEFUN GET-MIN-CARDINALITY (INSTANCEREF RELATIONREF)
  "Infer a minimum cardinality for the set of fillers of
the range of relation 'relationRef' applied to 'instanceRef'."
  (CL:LET*
   ((INSTANCE (STELLA::GET-INSTANCE INSTANCEREF))
    (RELATIONSURROGATE (GET-INSTANCE-SURROGATE RELATIONREF)))
   (STELLA::GET-SLOT-MINIMUM-CARDINALITY INSTANCE RELATIONSURROGATE)))

;;; (DEFUN (GET-MAX-CARDINALITY INTEGER) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T CL:T) CL:FIXNUM) GET-MAX-CARDINALITY))
(CL:DEFUN GET-MAX-CARDINALITY (INSTANCEREF RELATIONREF)
  "Infer a maximum cardinality for the set of fillers of
the range of relation 'relationRef' applied to 'instanceRef'."
  (CL:LET*
   ((INSTANCE (STELLA::GET-INSTANCE INSTANCEREF))
    (RELATIONSURROGATE (GET-INSTANCE-SURROGATE RELATIONREF)))
   (STELLA::GET-SLOT-MAXIMUM-CARDINALITY INSTANCE RELATIONSURROGATE)))

;;; (DEFUN (GET-VALUE-RESTRICTION DESCRIPTION) ...)

(CL:DEFUN GET-VALUE-RESTRICTION (INSTANCEREF RELATIONREF)
  "Infer a type restriction on the set of fillers of
the range of relation 'relationRef' applied to 'instanceRef'."
  (CL:LET*
   ((INSTANCE (STELLA::GET-INSTANCE INSTANCEREF))
    (RELATIONSURROGATE (GET-INSTANCE-SURROGATE RELATIONREF))
    (TYPE (STELLA::GET-SLOT-VALUE-TYPE INSTANCE RELATIONSURROGATE)))
   (CL:WHEN (CL:EQ TYPE STELLA::NULL)
    (CL:SETQ TYPE
     (STELLA::GET-DESCRIPTION SGT-LOOM-SUPPORT-STELLA-THING)))
   TYPE))

;;; (DEFUN ASSERT-LOOM-PROPOSITION ...)

(CL:DEFUN ASSERT-LOOM-PROPOSITION (LOOMSENTENCE RETRACT?)
  "Convert each Loom sentence into a KIF equivalent
and assert it or retract it."
  (STELLA::UPDATE-PROPOSITION
   (STELLA::TRANSLATE-LOOM-SENTENCE-TO-KIF LOOMSENTENCE)
   (CL:IF RETRACT? KWD-LOOM-SUPPORT-RETRACT-TRUE
    KWD-LOOM-SUPPORT-ASSERT-TRUE)))

;;; (DEFUN DELETE-INSTANCE ...)

(CL:DEFUN DELETE-INSTANCE (INSTANCEREF)
  "Destroy the instance, class or relation 'instanceRef'."
  (CL:LET* ((INSTANCE (STELLA::GET-INSTANCE INSTANCEREF)))
   (CL:WHEN (CL:NOT (CL:EQ INSTANCE STELLA::NULL))
    (STELLA::DESTROY-TERM INSTANCE))))

;;; (DEFUN (GENERATE-SOURCE-EXPRESSION OBJECT) ...)

(CL:DEFUN GENERATE-SOURCE-EXPRESSION (INSTANCEREF)
  "Return an s-expression representing the
source expression for 'instanceRef'."
  (CL:LET* ((INSTANCE (STELLA::GET-INSTANCE INSTANCEREF)))
   (STELLA::GENERATE-EXPRESSION INSTANCE CL:NIL)))

;;; (DEFUN (GET-PARTITIONS CONS) ...)

(CL:DEFUN GET-PARTITIONS (CLASSREF)
  "Return a list of partitions that
specify disjointness of children of the class classRef'."
  (CL:LET*
   ((CLASS (STELLA::GET-CLASS CLASSREF)) (PARTITIONS STELLA::NIL))
   (CL:WHEN (CL:NOT (CL:EQ CLASS STELLA::NULL))
    (CL:LET*
     ((C STELLA::NULL) (ITER-000 (GET-SUBRELATIONS CLASS CL:T)))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 STELLA::NIL)) DO
      (CL:SETQ C (STELLA::%%VALUE ITER-000))
      (CL:LET*
       ((MDC STELLA::NULL)
        (ITER-001
         (STELLA::APPLY-CACHED-RETRIEVE
          (STELLA::LIST* SYM-LOOM-SUPPORT-LOGIC-?C
           SYM-LOOM-SUPPORT-LOGIC-?MDC STELLA::NIL)
          (STELLA::LIST* SYM-LOOM-SUPPORT-STELLA-AND
           (STELLA::LIST* SYM-LOOM-SUPPORT-PL-KERNEL-KB-MEMBER-OF
            SYM-LOOM-SUPPORT-LOGIC-?C SYM-LOOM-SUPPORT-LOGIC-?MDC
            STELLA::NIL)
           (STELLA::LIST*
            SYM-LOOM-SUPPORT-PL-KERNEL-KB-MUTUALLY-DISJOINT-COLLECTION
            SYM-LOOM-SUPPORT-LOGIC-?MDC STELLA::NIL)
           STELLA::NIL)
          (STELLA::CONS-LIST C STELLA::NULL) (STELLA::CONS-LIST)
          SYM-LOOM-SUPPORT-LOOM-API-F-GET-PARTITIONS-QUERY-000)))
       (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 STELLA::NIL)) DO
        (CL:SETQ MDC (STELLA::%%VALUE ITER-001))
        (CL:WHEN (CL:NOT (STELLA::MEMBER? PARTITIONS MDC))
         (CL:SETQ PARTITIONS (STELLA::CONS MDC PARTITIONS)))
        (CL:SETQ ITER-001 (STELLA::%%REST ITER-001))))
      (CL:SETQ ITER-000 (STELLA::%%REST ITER-000)))))
   PARTITIONS))

;;; (DEFUN (DISJOINT-RELATIONS? BOOLEAN) ...)

(CL:DEFUN DISJOINT-RELATIONS? (RELATIONREF1 RELATIONREF2)
  "Return TRUE if 'relationRef1' and 'relationRef2' are
disjoint."
  (CL:LET*
   ((RELATION1 (STELLA::GET-RELATION RELATIONREF1))
    (RELATION2 (STELLA::GET-RELATION RELATIONREF2)))
   (STELLA::EXPENSIVE-DISJOINT-TERMS? RELATION1 RELATION2)))

;;; (DEFUN (COVERING? BOOLEAN) ...)

(CL:DEFUN COVERING? (INSTANCEREF CLASSREF)
  "Return TRUE if the mutually disjoint collection 'instanceRef'
covers 'classRef'.  If 'classRef' is NULL, return TRUE if 'instanceRef' covers
some concept."
  (CL:LET*
   ((MDC (STELLA::GET-INSTANCE INSTANCEREF))
    (COVEREDCLASS (STELLA::GET-CLASS CLASSREF)))
   (CL:WHEN
    (CL:OR (CL:EQ MDC STELLA::NULL)
     (CL:NOT
      (STELLA::TEST-PROPERTY? MDC
       SGT-LOOM-SUPPORT-PL-KERNEL-KB-MUTUALLY-DISJOINT-COLLECTION)))
    (CL:RETURN-FROM COVERING? CL:NIL))
   (CL:LET*
    ((C
      (STELLA::ALLOCATE-ITERATOR
       (STELLA::APPLY-CACHED-RETRIEVE
        (STELLA::LIST* SYM-LOOM-SUPPORT-LOGIC-?MDC
         SYM-LOOM-SUPPORT-LOOM-API-?COVERED STELLA::NIL)
        (STELLA::LIST* SYM-LOOM-SUPPORT-LOOM-API-COVERING
         SYM-LOOM-SUPPORT-LOGIC-?MDC SYM-LOOM-SUPPORT-LOOM-API-?COVERED
         STELLA::NIL)
        (STELLA::CONS-LIST MDC COVEREDCLASS) (STELLA::CONS-LIST)
        SYM-LOOM-SUPPORT-LOOM-API-F-COVERING?-QUERY-000))))
    (CL:LOOP WHILE (STELLA::NEXT? C) DO
     (CL:RETURN-FROM COVERING? CL:T)))
   CL:NIL))

;;; (DEFUN (COLLECTION-MEMBERS CONS) ...)

(CL:DEFUN COLLECTION-MEMBERS (INSTANCEREF)
  "Return a list of concepts that belong to the collection 'instanceRef'."
  (CL:LET* ((INSTANCE (STELLA::GET-INSTANCE INSTANCEREF)))
   (CL:WHEN (CL:NOT (CL:EQ INSTANCE STELLA::NULL))
    (CL:RETURN-FROM COLLECTION-MEMBERS
     (STELLA::CONSIFY
      (STELLA::ASSERTED-COLLECTION-MEMBERS INSTANCE CL:NIL))))
   STELLA::NIL))

(CL:DEFUN HELP-STARTUP-LOOM-SUPPORT1 ()
  (CL:PROGN
   (CL:SETQ SGT-LOOM-SUPPORT-LOOM-API-LOOM-ROLE
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "LOOM-ROLE" STELLA::NULL
     1))
   (CL:SETQ SYM-LOOM-SUPPORT-LOOM-API-LOOM-ROLE-OF
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "LOOM-ROLE-OF" STELLA::NULL
     0))
   (CL:SETQ KWD-LOOM-SUPPORT-DOCUMENTATION
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "DOCUMENTATION"
     STELLA::NULL 2))
   (CL:SETQ KWD-LOOM-SUPPORT-AXIOMS
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "AXIOMS" STELLA::NULL 2))
   (CL:SETQ SYM-LOOM-SUPPORT-LOOM-API-?I
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "?I" STELLA::NULL 0))
   (CL:SETQ SYM-LOOM-SUPPORT-LOOM-API-?R
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "?R" STELLA::NULL 0))
   (CL:SETQ SYM-LOOM-SUPPORT-LOOM-API-?ROLE
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "?ROLE" STELLA::NULL 0))
   (CL:SETQ
    SYM-LOOM-SUPPORT-LOOM-API-F-FIND-OR-CREATE-LOOM-ROLE-QUERY-000
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE
     "F-FIND-OR-CREATE-LOOM-ROLE-QUERY-000" STELLA::NULL 0))
   (CL:SETQ SGT-LOOM-SUPPORT-LOOM-API-LOOM-ROLE-OF
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "LOOM-ROLE-OF" STELLA::NULL
     1))
   (CL:SETQ SYM-LOOM-SUPPORT-STELLA-EXISTS
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "EXISTS"
     (STELLA::GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOOM-SUPPORT-LOOM-API-F-GET-LOOM-ROLES-QUERY-000
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE
     "F-GET-LOOM-ROLES-QUERY-000" STELLA::NULL 0))
   (CL:SETQ SYM-LOOM-SUPPORT-STELLA-OR
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "OR"
     (STELLA::GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOOM-SUPPORT-LOOM-API-?FR
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "?FR" STELLA::NULL 0))
   (CL:SETQ SYM-LOOM-SUPPORT-LOOM-API-?V
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "?V" STELLA::NULL 0))
   (CL:SETQ SYM-LOOM-SUPPORT-STELLA-AND
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "AND"
     (STELLA::GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOOM-SUPPORT-LOOM-API-FRAME-PREDICATE
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "FRAME-PREDICATE"
     STELLA::NULL 0))
   (CL:SETQ SYM-LOOM-SUPPORT-PL-KERNEL-KB-HOLDS
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "HOLDS"
     (STELLA::GET-STELLA-MODULE "/PL-KERNEL-KB" CL:T) 0))
   (CL:SETQ SYM-LOOM-SUPPORT-STELLA-NOT
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "NOT"
     (STELLA::GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOOM-SUPPORT-STELLA-=
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "="
     (STELLA::GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-LOOM-SUPPORT-PL-KERNEL-KB-RANGE-MAX-CARDINALITY
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "RANGE-MAX-CARDINALITY"
     (STELLA::GET-STELLA-MODULE "/PL-KERNEL-KB" CL:T) 0))
   (CL:SETQ SYM-LOOM-SUPPORT-LOGIC-?C
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "?C"
     (STELLA::GET-STELLA-MODULE "/LOGIC" CL:T) 0))
   (CL:SETQ SYM-LOOM-SUPPORT-LOOM-API-INSTANCE-OF
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "INSTANCE-OF" STELLA::NULL
     0))
   (CL:SETQ SYM-LOOM-SUPPORT-PL-KERNEL-KB-DOMAIN
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "DOMAIN"
     (STELLA::GET-STELLA-MODULE "/PL-KERNEL-KB" CL:T) 0))
   (CL:SETQ
    SYM-LOOM-SUPPORT-LOOM-API-F-GET-RELATION-INDUCED-ROLES-QUERY-000
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE
     "F-GET-RELATION-INDUCED-ROLES-QUERY-000" STELLA::NULL 0))
   (CL:SETQ SYM-LOOM-SUPPORT-LOOM-API-F-RELATION-OF-LOOM-ROLE-QUERY-000
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE
     "F-RELATION-OF-LOOM-ROLE-QUERY-000" STELLA::NULL 0))
   (CL:SETQ SGT-LOOM-SUPPORT-STELLA-MODULE
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "MODULE"
     (STELLA::GET-STELLA-MODULE "/STELLA" CL:T) 1))
   (CL:SETQ SGT-LOOM-SUPPORT-LOGIC-LOGIC-OBJECT
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "LOGIC-OBJECT"
     (STELLA::GET-STELLA-MODULE "/LOGIC" CL:T) 1))
   (CL:SETQ KWD-LOOM-SUPPORT-ALL
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "ALL" STELLA::NULL 2))
   (CL:SETQ KWD-LOOM-SUPPORT-CONCEPTS
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "CONCEPTS" STELLA::NULL 2))
   (CL:SETQ SYM-LOOM-SUPPORT-LOGIC-?X
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "?X"
     (STELLA::GET-STELLA-MODULE "/LOGIC" CL:T) 0))
   (CL:SETQ SYM-LOOM-SUPPORT-PL-KERNEL-KB-CLASS
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS"
     (STELLA::GET-STELLA-MODULE "/PL-KERNEL-KB" CL:T) 0))
   (CL:SETQ SYM-LOOM-SUPPORT-LOOM-API-F-LIST-CONTEXT-QUERY-000
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "F-LIST-CONTEXT-QUERY-000"
     STELLA::NULL 0))
   (CL:SETQ KWD-LOOM-SUPPORT-RELATIONS
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "RELATIONS" STELLA::NULL
     2))
   (CL:SETQ SYM-LOOM-SUPPORT-PL-KERNEL-KB-RELATION
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "RELATION"
     (STELLA::GET-STELLA-MODULE "/PL-KERNEL-KB" CL:T) 0))
   (CL:SETQ SYM-LOOM-SUPPORT-LOGIC-FAIL
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "FAIL"
     (STELLA::GET-STELLA-MODULE "/LOGIC" CL:T) 0))
   (CL:SETQ SYM-LOOM-SUPPORT-LOOM-API-F-LIST-CONTEXT-QUERY-001
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "F-LIST-CONTEXT-QUERY-001"
     STELLA::NULL 0))
   (CL:SETQ KWD-LOOM-SUPPORT-INSTANCES
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "INSTANCES" STELLA::NULL
     2))
   (CL:SETQ SGT-LOOM-SUPPORT-PL-KERNEL-KB-ARITY
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "ARITY"
     (STELLA::GET-STELLA-MODULE "/PL-KERNEL-KB" CL:T) 1))
   (CL:SETQ SGT-LOOM-SUPPORT-LOGIC-DESCRIPTION
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "DESCRIPTION"
     (STELLA::GET-STELLA-MODULE "/LOGIC" CL:T) 1))
   (CL:SETQ SGT-LOOM-SUPPORT-STELLA-SURROGATE
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "SURROGATE"
     (STELLA::GET-STELLA-MODULE "/STELLA" CL:T) 1))
   (CL:SETQ SGT-LOOM-SUPPORT-STELLA-THING
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "THING"
     (STELLA::GET-STELLA-MODULE "/STELLA" CL:T) 1))
   (CL:SETQ KWD-LOOM-SUPPORT-ASSERT-TRUE
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "ASSERT-TRUE" STELLA::NULL
     2))
   (CL:SETQ KWD-LOOM-SUPPORT-RETRACT-TRUE
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "RETRACT-TRUE" STELLA::NULL
     2))
   (CL:SETQ KWD-LOOM-SUPPORT-DIRECT
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "DIRECT" STELLA::NULL 2))
   (CL:SETQ KWD-LOOM-SUPPORT-ASSERTED
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "ASSERTED" STELLA::NULL 2))
   (CL:SETQ KWD-LOOM-SUPPORT-DEFAULT
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "DEFAULT" STELLA::NULL 2))
   (CL:SETQ KWD-LOOM-SUPPORT-STRICT
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "STRICT" STELLA::NULL 2))
   (CL:SETQ KWD-LOOM-SUPPORT-DESCRIPTION
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "DESCRIPTION" STELLA::NULL
     2))
   (CL:SETQ SYM-LOOM-SUPPORT-LOGIC-KAPPA
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "KAPPA"
     (STELLA::GET-STELLA-MODULE "/LOGIC" CL:T) 0))
   (CL:SETQ SYM-LOOM-SUPPORT-LOOM-API-?D
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "?D" STELLA::NULL 0))
   (CL:SETQ SYM-LOOM-SUPPORT-LOOM-API-F-GET-DOMAIN-QUERY-000
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "F-GET-DOMAIN-QUERY-000"
     STELLA::NULL 0))
   (CL:SETQ SYM-LOOM-SUPPORT-PL-KERNEL-KB-RANGE
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "RANGE"
     (STELLA::GET-STELLA-MODULE "/PL-KERNEL-KB" CL:T) 0))
   (CL:SETQ SYM-LOOM-SUPPORT-LOOM-API-F-GET-RANGE-QUERY-000
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "F-GET-RANGE-QUERY-000"
     STELLA::NULL 0))
   (CL:SETQ SYM-LOOM-SUPPORT-LOGIC-?MDC
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "?MDC"
     (STELLA::GET-STELLA-MODULE "/LOGIC" CL:T) 0))
   (CL:SETQ SYM-LOOM-SUPPORT-PL-KERNEL-KB-MEMBER-OF
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "MEMBER-OF"
     (STELLA::GET-STELLA-MODULE "/PL-KERNEL-KB" CL:T) 0))
   (CL:SETQ SYM-LOOM-SUPPORT-PL-KERNEL-KB-MUTUALLY-DISJOINT-COLLECTION
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE
     "MUTUALLY-DISJOINT-COLLECTION"
     (STELLA::GET-STELLA-MODULE "/PL-KERNEL-KB" CL:T) 0))
   (CL:SETQ SYM-LOOM-SUPPORT-LOOM-API-F-GET-PARTITIONS-QUERY-000
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE
     "F-GET-PARTITIONS-QUERY-000" STELLA::NULL 0))
   (CL:SETQ SGT-LOOM-SUPPORT-PL-KERNEL-KB-MUTUALLY-DISJOINT-COLLECTION
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE
     "MUTUALLY-DISJOINT-COLLECTION"
     (STELLA::GET-STELLA-MODULE "/PL-KERNEL-KB" CL:T) 1))
   (CL:SETQ SYM-LOOM-SUPPORT-LOOM-API-?COVERED
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "?COVERED" STELLA::NULL 0))
   (CL:SETQ SYM-LOOM-SUPPORT-LOOM-API-COVERING
    (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "COVERING" STELLA::NULL 0))))

(CL:DEFUN STARTUP-LOOM-SUPPORT ()
  (CL:LET*
   ((STELLA::*MODULE*
     (STELLA::GET-STELLA-MODULE "/PL-KERNEL-KB/LOOM-API"
      (STELLA::> STELLA::*STARTUP-TIME-PHASE* 1)))
    (STELLA::*CONTEXT* STELLA::*MODULE*))
   (CL:DECLARE (CL:SPECIAL STELLA::*MODULE* STELLA::*CONTEXT*))
   (CL:WHEN (STELLA::CURRENT-STARTUP-TIME-PHASE? 2)
    (HELP-STARTUP-LOOM-SUPPORT1)
    (CL:SETQ SYM-LOOM-SUPPORT-LOOM-API-F-COVERING?-QUERY-000
     (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "F-COVERING?-QUERY-000"
      STELLA::NULL 0))
    (CL:SETQ SYM-LOOM-SUPPORT-LOOM-API-STARTUP-LOOM-SUPPORT
     (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-LOOM-SUPPORT"
      STELLA::NULL 0))
    (CL:SETQ SYM-LOOM-SUPPORT-STELLA-METHOD-STARTUP-CLASSNAME
     (STELLA::INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME"
      (STELLA::GET-STELLA-MODULE "/STELLA" CL:T) 0)))
   (CL:WHEN (STELLA::CURRENT-STARTUP-TIME-PHASE? 5)
    (CL:LET*
     ((CLASS
       (STELLA::DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "LOOM-ROLE"
        "(DEFCLASS LOOM-ROLE (THING) :DOCUMENTATION \"\")")))
     (CL:SETF (STELLA::%CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-LOOM-ROLE))))
   (CL:WHEN (STELLA::CURRENT-STARTUP-TIME-PHASE? 6)
    (STELLA::FINALIZE-CLASSES))
   (CL:WHEN (STELLA::CURRENT-STARTUP-TIME-PHASE? 7)
    (STELLA::DEFINE-FUNCTION-OBJECT "SAFE-SURROGATIFY"
     "(DEFUN (SAFE-SURROGATIFY SURROGATE) ((SURROGATEREF OBJECT)))"
     (CL:FUNCTION SAFE-SURROGATIFY) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "FIND-OR-CREATE-LOOM-ROLE"
     "(DEFUN (FIND-OR-CREATE-LOOM-ROLE LOOM-ROLE) ((INSTANCEREF OBJECT) (RELATIONREF OBJECT) (CREATE? BOOLEAN)) :DOCUMENTATION \"Return a LOOM-ROLE instance if 'instanceRef' has
a Loom role named 'relationRef'.  If 'create?', create a role
instance if one doesn't already exist.\")"
     (CL:FUNCTION FIND-OR-CREATE-LOOM-ROLE) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "GET-LOOM-ROLES"
     "(DEFUN (GET-LOOM-ROLES (CONS OF LOOM-ROLE)) ((INSTANCEREF OBJECT) (INFERROLES? BOOLEAN)) :DOCUMENTATION \"Return a list of LOOM-ROLEs on 'instanceRef'.  If
'inferRoles', create roles on the fly corresponding to
frame predicate or domain propositions inherited by 'instance'.\" :PUBLIC? TRUE)"
     (CL:FUNCTION GET-LOOM-ROLES) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "GET-RELATION-INDUCED-ROLES"
     "(DEFUN (GET-RELATION-INDUCED-ROLES (CONS OF LOOM-ROLE)) ((INSTANCEREF OBJECT)))"
     (CL:FUNCTION GET-RELATION-INDUCED-ROLES) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "RELATION-OF-LOOM-ROLE"
     "(DEFUN (RELATION-OF-LOOM-ROLE NAMED-DESCRIPTION) ((ROLE LOOM-ROLE)) :DOCUMENTATION \"Return the relation for the Loom role 'role'.\")"
     (CL:FUNCTION RELATION-OF-LOOM-ROLE) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "GET-ROLE-NAMES-AND-VALUES"
     "(DEFUN (GET-ROLE-NAMES-AND-VALUES CONS) ((INSTANCEREF OBJECT)) :DOCUMENTATION \"Return a list of lists, with each sublist containing
a relation (role) name (a symbol) followed by one or more fillers of
that role on 'instanceRef'.\" :PUBLIC? TRUE)"
     (CL:FUNCTION GET-ROLE-NAMES-AND-VALUES) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "GET-XCONTEXT"
     "(DEFUN (GET-XCONTEXT MODULE) ((CONTEXTREF OBJECT)) :DOCUMENTATION \"Return the module referenced by 'contextRef'.\")"
     (CL:FUNCTION GET-XCONTEXT) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "GET-PARENT-CONTEXTS"
     "(DEFUN (GET-PARENT-CONTEXTS (CONS OF MODULE)) ((MODULEREF OBJECT)) :DOCUMENTATION \"Return a list of parent modules of 'moduleRef'.\")"
     (CL:FUNCTION GET-PARENT-CONTEXTS) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "GET-CHILD-CONTEXTS"
     "(DEFUN (GET-CHILD-CONTEXTS (CONS OF MODULE)) ((MODULEREF OBJECT)) :DOCUMENTATION \"Return a list of child modules of 'moduleRef'.\")"
     (CL:FUNCTION GET-CHILD-CONTEXTS) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "CONTEXT-OF-INSTANCE"
     "(DEFUN (CONTEXT-OF-INSTANCE MODULE) ((INSTANCEREF OBJECT)) :DOCUMENTATION \"Return the home context (a module) of 'instanceRef',
or NULL if it is not context sensitive.\")"
     (CL:FUNCTION CONTEXT-OF-INSTANCE) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "CLEAR-USER-CONTEXTS"
     "(DEFUN CLEAR-USER-CONTEXTS () :DOCUMENTATION \"Destroy the contents of all non-system-defined modules.\")"
     (CL:FUNCTION CLEAR-USER-CONTEXTS) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "LIST-CONTEXT"
     "(DEFUN (LIST-CONTEXT CONS) ((CONTEXT MODULE) (VALUES KEYWORD)))"
     (CL:FUNCTION LIST-CONTEXT) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "RELATION-ARITY"
     "(DEFUN (RELATION-ARITY INTEGER) ((RELATIONREF OBJECT)) :DOCUMENTATION \"Return the arity of the relation 'relationRef'.\" :PUBLIC? TRUE)"
     (CL:FUNCTION RELATION-ARITY) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "FIND-CLASS"
     "(DEFUN (FIND-CLASS LOGIC-OBJECT) ((INSTANCEREF OBJECT) (MODULE MODULE) (LOCAL? BOOLEAN)) :DOCUMENTATION \"Return the nearest class with name 'instanceRef' in
the module 'module'.  If 'local?' is FALSE, also search modules inherited
by 'module'.  'instanceRef' can be a string, symbol, or surrogate.\" :PUBLIC? TRUE)"
     (CL:FUNCTION FIND-CLASS) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "FIND-RELATION"
     "(DEFUN (FIND-RELATION LOGIC-OBJECT) ((INSTANCEREF OBJECT) (MODULE MODULE) (LOCAL? BOOLEAN)) :DOCUMENTATION \"Return the nearest relation with name 'instanceRef' in
the module 'module'.  If 'local?' is FALSE, also search modules inherited
by 'module'.  'instanceRef' can be a string, symbol, or surrogate.\" :PUBLIC? TRUE)"
     (CL:FUNCTION FIND-RELATION) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "GET-INSTANCE-SURROGATE"
     "(DEFUN (GET-INSTANCE-SURROGATE SURROGATE) ((INSTANCEREF OBJECT)) :DOCUMENTATION \"Return the surrogate pointing to the instance referenced by
'instanceRef'.\" :PUBLIC? TRUE)" (CL:FUNCTION GET-INSTANCE-SURROGATE)
     STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "GET-INSTANCE-NAME"
     "(DEFUN (GET-INSTANCE-NAME SYMBOL) ((INSTANCEREF OBJECT)) :DOCUMENTATION \"Return the name (a symbol) of the instance referenced by
'instanceRef'.\" :PUBLIC? TRUE)" (CL:FUNCTION GET-INSTANCE-NAME)
     STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "GET-EQUIVALENT-NAMES"
     "(DEFUN (GET-EQUIVALENT-NAMES (CONS OF SYMBOL)) ((RELATIONREF OBJECT)) :DOCUMENTATION \"Return a list containing the name of 'relationRef'
plus the names of any equivalent relations.\")"
     (CL:FUNCTION GET-EQUIVALENT-NAMES) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "INSTANCE?"
     "(DEFUN (INSTANCE? BOOLEAN) ((OBJECTREF OBJECT)) :DOCUMENTATION \"Return TRUE if 'objectRef' is an instance or the
name of an instance.\" :PUBLIC? TRUE)" (CL:FUNCTION INSTANCE?)
     STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "INDIVIDUAL?"
     "(DEFUN (INDIVIDUAL? BOOLEAN) ((OBJECT OBJECT)) :DOCUMENTATION \"Return TRUE if 'objectRef' is an instance or the
name of an instance, and does not denote a relation, class, or set.\" :PUBLIC? TRUE)"
     (CL:FUNCTION INDIVIDUAL?) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "NAMED?"
     "(DEFUN (NAMED? BOOLEAN) ((INSTANCEREF OBJECT)) :DOCUMENTATION \"Return TRUE if the object returned by 'instanceRef'
is matched with a logical constant.\" :PUBLIC? TRUE)"
     (CL:FUNCTION NAMED?) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "CREATE-INSTANCE"
     "(DEFUN (CREATE-INSTANCE OBJECT) ((INSTANCEREF OBJECT) (CLASSREF OBJECT)) :DOCUMENTATION \"Create an instance named 'instanceRef'
of type 'classRef'.\")" (CL:FUNCTION CREATE-INSTANCE) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "FIND-OR-CREATE-INSTANCE"
     "(DEFUN (FIND-OR-CREATE-INSTANCE LOGIC-OBJECT) ((INSTANCEREF OBJECT) (CLASSREF OBJECT)) :DOCUMENTATION \"Find an existing instance refenced by 'instanceRef'
of type 'classRef', or create one of type 'classRef'.\" :PUBLIC? TRUE)"
     (CL:FUNCTION FIND-OR-CREATE-INSTANCE) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "INSTANCE-OF?"
     "(DEFUN (INSTANCE-OF? BOOLEAN) ((INSTANCEREF OBJECT) (CLASSREF OBJECT)) :DOCUMENTATION \"Return TRUE if the instance referenced by 'instanceRef'
belongs to the class referenced by 'classRef'.\" :PUBLIC? TRUE)"
     (CL:FUNCTION INSTANCE-OF?) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "ADD-TYPE"
     "(DEFUN ADD-TYPE ((INSTANCEREF OBJECT) (CLASSREF OBJECT)) :DOCUMENTATION \"Assert that the instance referenced by 'instanceRef'
is an instance of the class referenced by 'classRef'.\" :PUBLIC? TRUE)"
     (CL:FUNCTION ADD-TYPE) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "REMOVE-TYPE"
     "(DEFUN REMOVE-TYPE ((INSTANCEREF OBJECT) (CLASSREF OBJECT)) :DOCUMENTATION \"Retract that the instance referenced by 'instanceRef'
is an instance of the class referenced by 'classRef'.\" :PUBLIC? TRUE)"
     (CL:FUNCTION REMOVE-TYPE) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "GET-TYPES"
     "(DEFUN (GET-TYPES (CONS OF DESCRIPTION)) ((INSTANCEREF OBJECT) (DIRECTORASSERTED KEYWORD)) :DOCUMENTATION \"Return a list of classes that instance belongs to.\" :PUBLIC? TRUE)"
     (CL:FUNCTION GET-TYPES) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "UPDATE-ROLE-VALUE"
     "(DEFUN UPDATE-ROLE-VALUE ((INSTANCEREF OBJECT) (RELATIONREF OBJECT) (VALUEREF OBJECT) (ASSERT? BOOLEAN)) :DOCUMENTATION \"Assert the tuple '(relationRef instanceRef valueRef)',
or retract if 'assert?' is FALSE.\")" (CL:FUNCTION UPDATE-ROLE-VALUE)
     STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "ADD-ROLE-VALUE"
     "(DEFUN ADD-ROLE-VALUE ((INSTANCEREF OBJECT) (RELATIONREF OBJECT) (VALUEREF OBJECT)) :DOCUMENTATION \"Assert the tuple '(relationRef instanceRef valueRef)'.\" :PUBLIC? TRUE)"
     (CL:FUNCTION ADD-ROLE-VALUE) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "REMOVE-ROLE-VALUE"
     "(DEFUN REMOVE-ROLE-VALUE ((INSTANCEREF OBJECT) (RELATIONREF OBJECT) (VALUEREF OBJECT)) :DOCUMENTATION \"Retract the tuple '(relationRef instanceRef valueRef)'.\" :PUBLIC? TRUE)"
     (CL:FUNCTION REMOVE-ROLE-VALUE) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "GET-ROLE-VALUE"
     "(DEFUN (GET-ROLE-VALUE OBJECT) ((INSTANCEREF OBJECT) (RELATIONREF OBJECT)) :DOCUMENTATION \"Return a value for the binary relation 'relationRef'
applied to 'instanceRef'.\" :PUBLIC? TRUE)"
     (CL:FUNCTION GET-ROLE-VALUE) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "GET-ROLE-VALUES"
     "(DEFUN (GET-ROLE-VALUES CONS) ((INSTANCEREF OBJECT) (RELATIONREF OBJECT)) :DOCUMENTATION \"Return a list of values for the binary relation 'relationRef'
applied to 'instanceRef'.\" :PUBLIC? TRUE)"
     (CL:FUNCTION GET-ROLE-VALUES) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "GET-ROLE-DEFAULT-VALUES"
     "(DEFUN (GET-ROLE-DEFAULT-VALUES CONS) ((INSTANCEREF OBJECT) (RELATIONREF OBJECT)) :DOCUMENTATION \"Return a list of default values for the binary relation
'relationRef' applied to 'instanceRef'.\" :PUBLIC? TRUE)"
     (CL:FUNCTION GET-ROLE-DEFAULT-VALUES) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "GET-CLASS-INSTANCES"
     "(DEFUN (GET-CLASS-INSTANCES CONS) ((CLASSREF OBJECT) (DIRECT? BOOLEAN)) :DOCUMENTATION \"Return a list of instances belonging to the class 'classRef'.\" :PUBLIC? TRUE)"
     (CL:FUNCTION GET-CLASS-INSTANCES) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "SUBRELATION?"
     "(DEFUN (SUBRELATION? BOOLEAN) ((SUBRELATIONREF OBJECT) (SUPERRELATIONREF OBJECT)) :DOCUMENTATION \"Return TRUE if 'subrelationRef' specializes 'superrelationRef'.
Side-effect: Upclassify 'subrelationRef'.\" :PUBLIC? TRUE)"
     (CL:FUNCTION SUBRELATION?) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "GET-SUPERRELATIONS"
     "(DEFUN (GET-SUPERRELATIONS (CONS OF LOGIC-OBJECT)) ((RELATIONREF OBJECT) (DIRECT? BOOLEAN)) :DOCUMENTATION \"Return a list of relations that generalize 'relationRef'.
Does not include relations equivalent to 'relationRef'.\" :PUBLIC? TRUE)"
     (CL:FUNCTION GET-SUPERRELATIONS) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "GET-SUBRELATIONS"
     "(DEFUN (GET-SUBRELATIONS (CONS OF LOGIC-OBJECT)) ((RELATIONREF OBJECT) (DIRECT? BOOLEAN)) :DOCUMENTATION \"Return a list of relations that specialize 'relationRef'.
Does not include relations equivalent to 'relationRef'.\" :PUBLIC? TRUE)"
     (CL:FUNCTION GET-SUBRELATIONS) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "MOST-SPECIFIC-RELATIONS"
     "(DEFUN (MOST-SPECIFIC-RELATIONS (CONS OF LOGIC-OBJECT)) ((RELATIONREFS CONS) (CLASSIFYFIRST? BOOLEAN)) :DOCUMENTATION \"Return a list of the most specific among the
relations in 'relationRefs'.  If 'classifyFirst?', insure that
all relations are classified before filtering for most-specific.\" :PUBLIC? TRUE)"
     (CL:FUNCTION MOST-SPECIFIC-RELATIONS) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "COMPUTE-CONJUNCTION-RELATION"
     "(DEFUN (COMPUTE-CONJUNCTION-RELATION DESCRIPTION) ((RELATIONREFS (CONS OF NAMED-DESCRIPTION))) :DOCUMENTATION \"Return a relation representing the conjunction
of relations in 'relationRefs'.\" :PUBLIC? TRUE)"
     (CL:FUNCTION COMPUTE-CONJUNCTION-RELATION) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "GET-DOMAIN"
     "(DEFUN (GET-DOMAIN NAMED-DESCRIPTION) ((RELATIONREF OBJECT)) :DOCUMENTATION \"Return the domain of the binary relation 'relationRef'.\")"
     (CL:FUNCTION GET-DOMAIN) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "GET-RANGE"
     "(DEFUN (GET-RANGE NAMED-DESCRIPTION) ((RELATIONREF OBJECT)) :DOCUMENTATION \"Return the range of the binary relation 'relationRef'.\")"
     (CL:FUNCTION GET-RANGE) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "GET-MIN-CARDINALITY"
     "(DEFUN (GET-MIN-CARDINALITY INTEGER) ((INSTANCEREF OBJECT) (RELATIONREF OBJECT)) :DOCUMENTATION \"Infer a minimum cardinality for the set of fillers of
the range of relation 'relationRef' applied to 'instanceRef'.\" :PUBLIC? TRUE)"
     (CL:FUNCTION GET-MIN-CARDINALITY) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "GET-MAX-CARDINALITY"
     "(DEFUN (GET-MAX-CARDINALITY INTEGER) ((INSTANCEREF OBJECT) (RELATIONREF OBJECT)) :DOCUMENTATION \"Infer a maximum cardinality for the set of fillers of
the range of relation 'relationRef' applied to 'instanceRef'.\" :PUBLIC? TRUE)"
     (CL:FUNCTION GET-MAX-CARDINALITY) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "GET-VALUE-RESTRICTION"
     "(DEFUN (GET-VALUE-RESTRICTION DESCRIPTION) ((INSTANCEREF OBJECT) (RELATIONREF OBJECT)) :DOCUMENTATION \"Infer a type restriction on the set of fillers of
the range of relation 'relationRef' applied to 'instanceRef'.\" :PUBLIC? TRUE)"
     (CL:FUNCTION GET-VALUE-RESTRICTION) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "ASSERT-LOOM-PROPOSITION"
     "(DEFUN ASSERT-LOOM-PROPOSITION ((LOOMSENTENCE CONS) (RETRACT? BOOLEAN)) :DOCUMENTATION \"Convert each Loom sentence into a KIF equivalent
and assert it or retract it.\")" (CL:FUNCTION ASSERT-LOOM-PROPOSITION)
     STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "DELETE-INSTANCE"
     "(DEFUN DELETE-INSTANCE ((INSTANCEREF OBJECT)) :DOCUMENTATION \"Destroy the instance, class or relation 'instanceRef'.\" :PUBLIC? TRUE)"
     (CL:FUNCTION DELETE-INSTANCE) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "GENERATE-SOURCE-EXPRESSION"
     "(DEFUN (GENERATE-SOURCE-EXPRESSION OBJECT) ((INSTANCEREF OBJECT)) :DOCUMENTATION \"Return an s-expression representing the
source expression for 'instanceRef'.\" :PUBLIC? TRUE)"
     (CL:FUNCTION GENERATE-SOURCE-EXPRESSION) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "GET-PARTITIONS"
     "(DEFUN (GET-PARTITIONS CONS) ((CLASSREF OBJECT)) :DOCUMENTATION \"Return a list of partitions that
specify disjointness of children of the class classRef'.\")"
     (CL:FUNCTION GET-PARTITIONS) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "DISJOINT-RELATIONS?"
     "(DEFUN (DISJOINT-RELATIONS? BOOLEAN) ((RELATIONREF1 OBJECT) (RELATIONREF2 OBJECT)) :DOCUMENTATION \"Return TRUE if 'relationRef1' and 'relationRef2' are
disjoint.\" :PUBLIC? TRUE)" (CL:FUNCTION DISJOINT-RELATIONS?)
     STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "COVERING?"
     "(DEFUN (COVERING? BOOLEAN) ((INSTANCEREF OBJECT) (CLASSREF OBJECT)) :DOCUMENTATION \"Return TRUE if the mutually disjoint collection 'instanceRef'
covers 'classRef'.  If 'classRef' is NULL, return TRUE if 'instanceRef' covers
some concept.\")" (CL:FUNCTION COVERING?) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "COLLECTION-MEMBERS"
     "(DEFUN (COLLECTION-MEMBERS CONS) ((INSTANCEREF OBJECT)) :DOCUMENTATION \"Return a list of concepts that belong to the collection 'instanceRef'.\")"
     (CL:FUNCTION COLLECTION-MEMBERS) STELLA::NULL)
    (STELLA::DEFINE-FUNCTION-OBJECT "STARTUP-LOOM-SUPPORT"
     "(DEFUN STARTUP-LOOM-SUPPORT () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-LOOM-SUPPORT) STELLA::NULL)
    (CL:LET*
     ((FUNCTION
       (STELLA::LOOKUP-FUNCTION
        SYM-LOOM-SUPPORT-LOOM-API-STARTUP-LOOM-SUPPORT)))
     (STELLA::SET-DYNAMIC-SLOT-VALUE (STELLA::%DYNAMIC-SLOTS FUNCTION)
      SYM-LOOM-SUPPORT-STELLA-METHOD-STARTUP-CLASSNAME
      (STELLA::WRAP-STRING "_StartupLoomSupport")
      STELLA::NULL-STRING-WRAPPER)))
   (CL:WHEN (STELLA::CURRENT-STARTUP-TIME-PHASE? 8)
    (STELLA::FINALIZE-SLOTS) (STELLA::CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (STELLA::CURRENT-STARTUP-TIME-PHASE? 9)
    (STELLA::%DEFRELATION
     (STELLA::CONS-LIST
      (STELLA::COPY-CONS-TREE SYM-LOOM-SUPPORT-LOOM-API-LOOM-ROLE-OF)
      (STELLA::COPY-CONS-TREE
       (STELLA::GET-QUOTED-TREE
        "(((?C CLASS) (?R RELATION) (?ROLE LOOM-ROLE)) \"/PL-KERNEL-KB/LOOM-API\")"
        "/PL-KERNEL-KB/LOOM-API"))
      KWD-LOOM-SUPPORT-DOCUMENTATION
      (STELLA::COPY-CONS-TREE (STELLA::WRAP-STRING ""))
      KWD-LOOM-SUPPORT-AXIOMS
      (STELLA::COPY-CONS-TREE
       (STELLA::GET-QUOTED-TREE
        "((SINGLE-VALUED LOOM-ROLE-OF) \"/PL-KERNEL-KB/LOOM-API\")"
        "/PL-KERNEL-KB/LOOM-API")))))))
