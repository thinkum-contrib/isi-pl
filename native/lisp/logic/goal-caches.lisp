;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

#|--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1997-2000              | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied "AS IS",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SGT-GOAL-CACHES-LOGIC-GOAL-CACHE NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-CACHED-BINDINGS NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-TIMESTAMP NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-PROPOSITION NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-REVERSE-POLARITY? NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-CACHE-CONTEXT NULL)
(CL:DEFVAR KWD-GOAL-CACHES-GOAL-CACHES NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-GOAL-CACHE-TABLE NULL)
(CL:DEFVAR KWD-GOAL-CACHES-ISA NULL)
(CL:DEFVAR KWD-GOAL-CACHES-PREDICATE NULL)
(CL:DEFVAR KWD-GOAL-CACHES-FUNCTION NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-NEGATED-GOAL-CACHE-TABLE NULL)
(CL:DEFVAR SGT-GOAL-CACHES-STELLA-SURROGATE NULL)
(CL:DEFVAR KWD-GOAL-CACHES-DUPLICATE-GOALS-WITH-CACHING NULL)
(CL:DEFVAR KWD-GOAL-CACHES-FAILURE NULL)
(CL:DEFVAR KWD-GOAL-CACHES-FINAL-SUCCESS NULL)
(CL:DEFVAR KWD-GOAL-CACHES-CONTINUING-SUCCESS NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-INFERENCE-CACHE-OF NULL)
(CL:DEFVAR KWD-GOAL-CACHES-DUPLICATE-GOALS NULL)
(CL:DEFVAR SGT-GOAL-CACHES-LOGIC-ATOMIC-GOAL-CACHE NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-GOAL-CONTEXT NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-BINDINGS NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-JUSTIFICATION NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-POSITIVE-SCORE NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-DYNAMIC-CUTOFF NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-HOLDS-BY-DEFAULT? NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-PREVIOUS NULL)
(CL:DEFVAR SYM-GOAL-CACHES-STELLA-NEXT NULL)
(CL:DEFVAR KWD-GOAL-CACHES-REALISTIC NULL)
(CL:DEFVAR SGT-GOAL-CACHES-LOGIC-PATTERN-VARIABLE NULL)
(CL:DEFVAR SGT-GOAL-CACHES-LOGIC-SKOLEM NULL)
(CL:DEFVAR SGT-GOAL-CACHES-LOGIC-DESCRIPTION NULL)
(CL:DEFVAR SGT-GOAL-CACHES-LOGIC-LOGIC-OBJECT NULL)
(CL:DEFVAR SGT-GOAL-CACHES-STELLA-LIST NULL)
(CL:DEFVAR SGT-GOAL-CACHES-STELLA-SET NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-GOAL-CACHE-LIST NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-CACHED-GOAL-RESULT? NULL)
(CL:DEFVAR KWD-GOAL-CACHES-MOVE-DOWN NULL)
(CL:DEFVAR KWD-GOAL-CACHES-MOVE-IN-PLACE NULL)
(CL:DEFVAR KWD-GOAL-CACHES-GOAL-INSTANTIATES-CACHE NULL)
(CL:DEFVAR KWD-GOAL-CACHES-CACHE-INSTANTIATES-GOAL NULL)
(CL:DEFVAR KWD-GOAL-CACHES-ATOMIC-GOAL NULL)
(CL:DEFVAR SGT-GOAL-CACHES-PL-KERNEL-KB-FRAME-PREDICATE NULL)
(CL:DEFVAR KWD-GOAL-CACHES-EXECUTE-QUERY NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-CHECK-FOR-CACHED-GOALS? NULL)
(CL:DEFVAR KWD-GOAL-CACHES-SUCCESS NULL)
(CL:DEFVAR SGT-GOAL-CACHES-LOGIC-ATOMIC-GOAL-CACHE-ITERATOR NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-GOAL NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-CACHE-LIST NULL)
(CL:DEFVAR SYM-GOAL-CACHES-LOGIC-STARTUP-GOAL-CACHES NULL)
(CL:DEFVAR SYM-GOAL-CACHES-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STARTUP-TIME-PHASE* *MODULE* *DONTUSEDEFAULTKNOWLEDGE?*
  *RECORD-JUSTIFICATIONS?* *FAILED-GOAL-CUTOFFS* *SUCCEEDED-GOAL-CUTOFFS*
  *CACHE-SUCCEEDED-GOALS?* *CACHE-FAILED-GOALS?*
  *DUPLICATE-SUBGOAL-STRATEGY* *TRACED-KEYWORDS* *CONTEXT* *QUERYITERATOR*
  STANDARD-OUTPUT *REVERSEPOLARITY?* EOL TRUE-WRAPPER FALSE-WRAPPER))

;;; (DEFCLASS GOAL-CACHE ...)

(CL:DEFCLASS GOAL-CACHE (STANDARD-OBJECT)
  ((CACHED-BINDINGS :ALLOCATION :INSTANCE :ACCESSOR %CACHED-BINDINGS)
   (TIMESTAMP :ALLOCATION :INSTANCE :ACCESSOR %TIMESTAMP)
   (PROPOSITION :ALLOCATION :INSTANCE :ACCESSOR %PROPOSITION)
   (REVERSE-POLARITY? :ALLOCATION :INSTANCE :ACCESSOR %REVERSE-POLARITY?)
   (CACHE-CONTEXT :ALLOCATION :INSTANCE :ACCESSOR %CACHE-CONTEXT))
  (:DOCUMENTATION "Cache of output bindings derived for a particular goal
and set of input bindings."))

(CL:DEFUN NEW-GOAL-CACHE ()
  (CL:LET* ((SELF NULL))
   (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE GOAL-CACHE)))
   (CL:SETF (%CACHE-CONTEXT SELF) NULL)
   (CL:SETF (%REVERSE-POLARITY? SELF) FALSE)
   (CL:SETF (%PROPOSITION SELF) NULL)
   (CL:SETF (%TIMESTAMP SELF) NULL-INTEGER)
   (CL:SETF (%CACHED-BINDINGS SELF) (NEW-LIST)) SELF))

(CL:DEFMETHOD PRIMARY-TYPE ((SELF GOAL-CACHE))
  SGT-GOAL-CACHES-LOGIC-GOAL-CACHE)

(CL:DEFUN ACCESS-GOAL-CACHE-SLOT-VALUE (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-CACHED-BINDINGS)
    (CL:IF SETVALUE? (CL:SETF (%CACHED-BINDINGS SELF) VALUE)
     (CL:SETQ VALUE (%CACHED-BINDINGS SELF))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-TIMESTAMP)
    (CL:IF SETVALUE? (CL:SETF (%TIMESTAMP SELF) (%WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE (WRAP-INTEGER (%TIMESTAMP SELF)))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-PROPOSITION)
    (CL:IF SETVALUE? (CL:SETF (%PROPOSITION SELF) VALUE)
     (CL:SETQ VALUE (%PROPOSITION SELF))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-REVERSE-POLARITY?)
    (CL:IF SETVALUE?
     (CL:SETF (%REVERSE-POLARITY? SELF)
      (COERCE-WRAPPED-BOOLEAN-TO-BOOLEAN VALUE))
     (CL:SETQ VALUE
      (CL:IF (%REVERSE-POLARITY? SELF) TRUE-WRAPPER FALSE-WRAPPER))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-CACHE-CONTEXT)
    (CL:IF SETVALUE? (CL:SETF (%CACHE-CONTEXT SELF) VALUE)
     (CL:SETQ VALUE (%CACHE-CONTEXT SELF))))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" SLOTNAME
      "' is not a valid case option")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
  VALUE)

;;; (DEFUN TRACE-GOAL-CACHE ...)

(CL:DEFUN TRACE-GOAL-CACHE (STRING FRAME)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING STRING))
  (CL:LET* ((GOAL (%PROPOSITION FRAME)))
   (CL:WHEN (TRACE-KEYWORD? KWD-GOAL-CACHES-GOAL-CACHES)
    (CL:LET* ((*PRINTINFRAME* FRAME))
     (CL:DECLARE (CL:SPECIAL *PRINTINFRAME*))
     (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) STRING)
     (CL:WHEN *REVERSEPOLARITY?*
      (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) "not~"))
     (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) GOAL EOL)))))

;;; (DEFUN REMOVE-OBSOLETE-GOAL-CACHES ...)

(CL:DEFUN REMOVE-OBSOLETE-GOAL-CACHES (TABLE)
  (CL:LET* ((V NULL) (K NULL) (ITER-000 (%THE-KV-LIST TABLE)))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NULL)) DO
    (CL:SETQ K (%KEY ITER-000))
    (CL:PROGN (CL:SETQ V (%VALUE ITER-000))
     (CL:SETQ ITER-000 (%REST ITER-000)))
    (CL:WHEN (DELETED? K) (REMOVE-AT TABLE K)
     (REMOVE-OBSOLETE-GOAL-CACHES TABLE) (CL:RETURN)))))

;;; (DEFUN (YIELD-GOAL-BINDINGS GOAL-BINDINGS) ...)

(CL:DEFUN YIELD-GOAL-BINDINGS (GOAL)
  (CL:LET* ((RESULT NIL))
   (CL:LET*
    ((ARG NULL) (VECTOR-000 (%ARGUMENTS GOAL)) (INDEX-000 0)
     (LENGTH-000 (LENGTH VECTOR-000)) (COLLECT-000 NULL))
    (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
    (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
     (CL:PROGN
      (CL:SETQ ARG
       (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-000))
        INDEX-000))
      (CL:SETQ INDEX-000 (CL:1+ INDEX-000)))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN (CL:SETQ COLLECT-000 (CONS (ARGUMENT-BOUND-TO ARG) NIL))
       (CL:IF (CL:EQ RESULT NIL) (CL:SETQ RESULT COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST RESULT COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000) (CONS (ARGUMENT-BOUND-TO ARG) NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
   RESULT))

;;; (DEFUN (FIND-GOAL-CACHE-TABLE GOAL-CACHE-TABLE) ...)

(CL:DEFUN FIND-GOAL-CACHE-TABLE (GOAL)
  (CL:LET* ((TEST-VALUE-000 (%KIND GOAL)))
   (CL:COND
    ((CL:OR (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-ISA)
      (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-PREDICATE)
      (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-FUNCTION))
     (CL:LET* ((DESCRIPTION (GET-DESCRIPTION (%OPERATOR GOAL))))
      (CL:IF *REVERSEPOLARITY?*
       (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS DESCRIPTION)
        SYM-GOAL-CACHES-LOGIC-NEGATED-GOAL-CACHE-TABLE NULL)
       (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS DESCRIPTION)
        SYM-GOAL-CACHES-LOGIC-GOAL-CACHE-TABLE NULL))))
    (CL:T NULL))))

;;; (DEFUN (CREATE-GOAL-CACHE? BOOLEAN) ...)

(CL:DEFUN CREATE-GOAL-CACHE? (FRAME)
  (CL:LET*
   ((GOAL (%PROPOSITION FRAME)) (TABLE (FIND-GOAL-CACHE-TABLE GOAL)))
   (CL:WHEN (CL:EQ TABLE NULL) (CL:SETQ TABLE (NEW-KEY-VALUE-LIST))
    (CL:LET* ((TEST-VALUE-000 (%KIND GOAL)))
     (CL:COND
      ((CL:OR (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-ISA)
        (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-PREDICATE)
        (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-FUNCTION))
       (CL:IF
        (CL:EQ (PRIMARY-TYPE (%OPERATOR GOAL))
         SGT-GOAL-CACHES-STELLA-SURROGATE)
        (CL:LET* ((GOALDESCRIPTION (GET-DESCRIPTION (%OPERATOR GOAL))))
         (CL:IF *REVERSEPOLARITY?*
          (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS GOALDESCRIPTION)
           SYM-GOAL-CACHES-LOGIC-NEGATED-GOAL-CACHE-TABLE TABLE NULL)
          (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS GOALDESCRIPTION)
           SYM-GOAL-CACHES-LOGIC-GOAL-CACHE-TABLE TABLE NULL)))
        (CL:RETURN-FROM CREATE-GOAL-CACHE? FALSE)))
      (CL:T (CL:RETURN-FROM CREATE-GOAL-CACHE? FALSE)))))
   (CL:LET* ((GOALCACHE (LOOKUP-GOAL-CACHE TABLE)))
    (CL:WHEN (CL:EQ GOALCACHE NULL)
     (TRACE-GOAL-CACHE "CREATING GOAL CACHE: " FRAME)
     (CL:SETQ GOALCACHE (NEW-GOAL-CACHE))
     (REMOVE-OBSOLETE-GOAL-CACHES TABLE)
     (INSERT-AT TABLE *CONTEXT* GOALCACHE)
     (CL:SETF (%GOAL-CACHE FRAME) GOALCACHE)
     (CL:SETF (%TIMESTAMP GOALCACHE) (GET-NOW-TIMESTAMP))
     (CL:SETF (%PROPOSITION GOALCACHE) GOAL)
     (CL:SETF (%REVERSE-POLARITY? GOALCACHE) *REVERSEPOLARITY?*)
     (CL:SETF (%CACHE-CONTEXT GOALCACHE) *CONTEXT*)
     (INSERT (%ACTIVE-GOAL-CACHES *QUERYITERATOR*) GOALCACHE)
     (CL:WHEN (TOP-LEVEL-QUERY-CONTEXT? *CONTEXT*)
      (CL:SETF (%AUGMENTED-GOAL-CACHE? *QUERYITERATOR*) TRUE)))
    TRUE)))

;;; (DEFUN (LOOKUP-GOAL-CACHE GOAL-CACHE) ...)

(CL:DEFUN LOOKUP-GOAL-CACHE (TABLE)
  (LOOKUP TABLE *CONTEXT*))

;;; (DEFUN (FIND-GOAL-CACHE GOAL-CACHE) ...)

(CL:DEFUN FIND-GOAL-CACHE (FRAME)
  (CL:LET*
   ((GOAL (%PROPOSITION FRAME)) (TABLE (FIND-GOAL-CACHE-TABLE GOAL))
    (GOALCACHE NULL))
   (CL:WHEN (CL:EQ TABLE NULL) (CL:RETURN-FROM FIND-GOAL-CACHE NULL))
   (CL:SETQ GOALCACHE (LOOKUP-GOAL-CACHE TABLE))
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ GOALCACHE NULL))
     (CL:< (%TIMESTAMP GOALCACHE) (GET-NOW-TIMESTAMP)))
    (CLEAR (%CACHED-BINDINGS GOALCACHE))
    (CL:SETF (%TIMESTAMP GOALCACHE) (GET-NOW-TIMESTAMP)))
   GOALCACHE))

;;; (DEFUN UPDATE-GOAL-CACHE ...)

(CL:DEFUN UPDATE-GOAL-CACHE (FRAME SUCCESS?)
  (CL:WHEN
   (CL:OR
    (CL:NOT
     (CL:EQ *DUPLICATE-SUBGOAL-STRATEGY*
      KWD-GOAL-CACHES-DUPLICATE-GOALS-WITH-CACHING))
    (CL:NOT SUCCESS?))
   (CL:RETURN-FROM UPDATE-GOAL-CACHE))
  (CL:LET* ((GOALCACHE (FIND-GOAL-CACHE FRAME)))
   (CL:WHEN (CL:NOT (CL:EQ GOALCACHE NULL))
    (CL:LET*
     ((CACHEDBINDINGS (%CACHED-BINDINGS GOALCACHE))
      (BINDINGS (YIELD-RELATIVE-GOAL-BINDINGS FRAME)))
     (CL:LET* ((FOUND?-000 FALSE))
      (CL:LET*
       ((OLDBINDINGS NULL) (ITER-000 (%THE-CONS-LIST CACHEDBINDINGS)))
       (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
        (CL:PROGN (CL:SETQ OLDBINDINGS (%%VALUE ITER-000))
         (CL:SETQ ITER-000 (%%REST ITER-000)))
        (CL:LET* ((ALWAYS?-000 TRUE))
         (CL:LET*
          ((V2 NULL) (V1 NULL) (ITER-001 BINDINGS) (ITER-002 OLDBINDINGS))
          (CL:LOOP WHILE
           (CL:AND (CL:NOT (CL:EQ ITER-001 NIL))
            (CL:NOT (CL:EQ ITER-002 NIL)))
           DO
           (CL:PROGN (CL:SETQ V1 (%%VALUE ITER-001))
            (CL:SETQ ITER-001 (%%REST ITER-001)))
           (CL:PROGN (CL:SETQ V2 (%%VALUE ITER-002))
            (CL:SETQ ITER-002 (%%REST ITER-002)))
           (CL:WHEN (CL:NOT (EQL? V1 V2)) (CL:SETQ ALWAYS?-000 FALSE)
            (CL:RETURN))))
         (CL:WHEN ALWAYS?-000 (CL:SETQ FOUND?-000 TRUE) (CL:RETURN)))))
      (CL:WHEN FOUND?-000 (CL:RETURN-FROM UPDATE-GOAL-CACHE)))
     (CL:WHEN
      (CL:AND (CL:NOT (CL:EQ *TRACED-KEYWORDS* NULL))
       (MEMB? *TRACED-KEYWORDS* KWD-GOAL-CACHES-GOAL-CACHES))
      (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) "AUGMENT CACHE: "
       BINDINGS "  " FRAME EOL))
     (PUSH CACHEDBINDINGS BINDINGS)
     (CL:SETF (%AUGMENTED-GOAL-CACHE? *QUERYITERATOR*) TRUE)))))

;;; (DEFUN (YIELD-RELATIVE-GOAL-BINDINGS GOAL-BINDINGS) ...)

(CL:DEFUN YIELD-RELATIVE-GOAL-BINDINGS (FRAME)
  (CL:LET*
   ((GOAL (%PROPOSITION FRAME)) (RESULT NIL)
    (SAVECURRENTPR (%CURRENT-PATTERN-RECORD *QUERYITERATOR*)))
   (CL:SETF (%CURRENT-PATTERN-RECORD *QUERYITERATOR*)
    (OPERATIVE-PATTERN-RECORD FRAME))
   (CL:LET*
    ((ARG NULL) (VECTOR-000 (%ARGUMENTS GOAL)) (INDEX-000 0)
     (LENGTH-000 (LENGTH VECTOR-000)) (COLLECT-000 NULL))
    (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
    (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
     (CL:PROGN
      (CL:SETQ ARG
       (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-000))
        INDEX-000))
      (CL:SETQ INDEX-000 (CL:1+ INDEX-000)))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN (CL:SETQ COLLECT-000 (CONS (ARGUMENT-BOUND-TO ARG) NIL))
       (CL:IF (CL:EQ RESULT NIL) (CL:SETQ RESULT COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST RESULT COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000) (CONS (ARGUMENT-BOUND-TO ARG) NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
   (CL:SETF (%CURRENT-PATTERN-RECORD *QUERYITERATOR*) SAVECURRENTPR)
   RESULT))

;;; (DEFUN (CONTINUE-CACHED-BINDINGS-PROOF KEYWORD) ...)

(CL:DEFUN CONTINUE-CACHED-BINDINGS-PROOF (FRAME LASTMOVE)
  (CL:SETQ LASTMOVE LASTMOVE)
  (CL:LET*
   ((GOAL (%PROPOSITION FRAME))
    (ITERATOR (%CACHED-BINDINGS-ITERATOR FRAME)))
   (CL:WHEN (CL:EQ ITERATOR NULL)
    (CL:LET* ((GOALCACHE (FIND-GOAL-CACHE FRAME)) (CACHEDBINDINGS NULL))
     (CL:WHEN (CL:EQ GOALCACHE NULL) (CREATE-GOAL-CACHE? FRAME)
      (CL:RETURN-FROM CONTINUE-CACHED-BINDINGS-PROOF
       KWD-GOAL-CACHES-FAILURE))
     (CL:SETQ CACHEDBINDINGS (%CACHED-BINDINGS GOALCACHE))
     (CL:CASE (LENGTH CACHEDBINDINGS)
      (0 (TRACE-GOAL-CACHE "EMPTY CACHE: " FRAME)
       (CL:RETURN-FROM CONTINUE-CACHED-BINDINGS-PROOF
        KWD-GOAL-CACHES-FAILURE))
      (1 (TRACE-GOAL-CACHE "USED CACHED BINDING: " FRAME)
       (CL:IF
        (BIND-VECTOR-OF-ARGUMENTS-TO-VALUES? (%ARGUMENTS GOAL)
         (FIRST CACHEDBINDINGS))
        (CL:RETURN-FROM CONTINUE-CACHED-BINDINGS-PROOF
         KWD-GOAL-CACHES-FINAL-SUCCESS)
        (CL:RETURN-FROM CONTINUE-CACHED-BINDINGS-PROOF
         KWD-GOAL-CACHES-FAILURE)))
      (CL:OTHERWISE (TRACE-GOAL-CACHE "USED MANY CACHED BINDINGS: " FRAME)
       (CL:SETQ ITERATOR (ALLOCATE-ITERATOR (%CACHED-BINDINGS GOALCACHE)))
       (CL:SETF (%CACHED-BINDINGS-ITERATOR FRAME) ITERATOR)))))
   (CREATE-CHOICE-POINT FRAME)
   (CL:LOOP WHILE (NEXT? ITERATOR) DO
    (CL:WHEN
     (BIND-VECTOR-OF-ARGUMENTS-TO-VALUES?
      (%ARGUMENTS (%PROPOSITION FRAME)) (%VALUE ITERATOR))
     (CL:IF (EMPTY? ITERATOR)
      (CL:RETURN-FROM CONTINUE-CACHED-BINDINGS-PROOF
       KWD-GOAL-CACHES-FINAL-SUCCESS)
      (CL:RETURN-FROM CONTINUE-CACHED-BINDINGS-PROOF
       KWD-GOAL-CACHES-CONTINUING-SUCCESS))))
   KWD-GOAL-CACHES-FAILURE))

;;; (DEFUN (TOP-LEVEL-QUERY-CONTEXT? BOOLEAN) ...)

(CL:DEFUN TOP-LEVEL-QUERY-CONTEXT? (SELF)
  (CL:LET* ((QUERYCONTEXT (%QUERY-CONTEXT *QUERYITERATOR*)))
   (CL:OR (CL:EQ SELF QUERYCONTEXT) (WORLD-STATE? SELF)
    (CL:EQ
     (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS SELF)
      SYM-GOAL-CACHES-LOGIC-INFERENCE-CACHE-OF NULL)
     QUERYCONTEXT))))

;;; (DEFUN (CACHE-QUERY-RESULTS? BOOLEAN) ...)

(CL:DEFUN CACHE-QUERY-RESULTS? ()
  (CL:AND (CL:OR *CACHE-SUCCEEDED-GOALS?* *CACHE-FAILED-GOALS?*)
   (CL:EQ *DUPLICATE-SUBGOAL-STRATEGY* KWD-GOAL-CACHES-DUPLICATE-GOALS)
   (CL:NOT
    (CL:AND (CL:NOT (CL:EQ *QUERYITERATOR* NULL))
     (CL:NOT (CL:EQ (%PARTIAL-MATCH-STRATEGY *QUERYITERATOR*) NULL))))))

;;; (DEFGLOBAL *CACHE-SUCCEEDED-GOALS?* ...)

(CL:DEFVAR *CACHE-SUCCEEDED-GOALS?* TRUE)

;;; (DEFGLOBAL *CACHE-FAILED-GOALS?* ...)

(CL:DEFVAR *CACHE-FAILED-GOALS?* TRUE)

;;; (DEFGLOBAL *CACHE-GOAL-QUANTUM* ...)

(CL:PROGN (CL:DEFVAR *CACHE-GOAL-QUANTUM* 5 "Only goals whose success or failure took at least this
number of query clock ticks will be cached.") (CL:DECLAIM (CL:TYPE CL:FIXNUM *CACHE-GOAL-QUANTUM*)))

;;; (DEFUN (TOGGLE-GOAL-CACHING STRING) ...)

(CL:DEFUN TOGGLE-GOAL-CACHING ()
  (CL:IF *CACHE-SUCCEEDED-GOALS?*
   (CL:PROGN (CL:SETQ *CACHE-SUCCEEDED-GOALS?* FALSE)
    (CL:SETQ *CACHE-FAILED-GOALS?* FALSE) (INCREMENT-NOW-TIMESTAMP)
    "Disabled goal caching.")
   (CL:PROGN (CL:SETQ *CACHE-SUCCEEDED-GOALS?* TRUE)
    (CL:SETQ *CACHE-FAILED-GOALS?* TRUE) "Enabled goal caching.")))

;;; (DEFCLASS ATOMIC-GOAL-CACHE ...)

(CL:DEFCLASS ATOMIC-GOAL-CACHE (STANDARD-OBJECT)
  ((GOAL-CONTEXT :ALLOCATION :INSTANCE :ACCESSOR %GOAL-CONTEXT)
   (TIMESTAMP :ALLOCATION :INSTANCE :ACCESSOR %TIMESTAMP)
   (REVERSE-POLARITY? :ALLOCATION :INSTANCE :ACCESSOR %REVERSE-POLARITY?)
   (PROPOSITION :ALLOCATION :INSTANCE :ACCESSOR %PROPOSITION)
   (BINDINGS :ALLOCATION :INSTANCE :ACCESSOR %BINDINGS)
   (JUSTIFICATION :ALLOCATION :INSTANCE :ACCESSOR %JUSTIFICATION)
   (POSITIVE-SCORE :ALLOCATION :INSTANCE :ACCESSOR %POSITIVE-SCORE)
   (DYNAMIC-CUTOFF :ALLOCATION :INSTANCE :ACCESSOR %DYNAMIC-CUTOFF)
   (HOLDS-BY-DEFAULT? :ALLOCATION :INSTANCE :ACCESSOR %HOLDS-BY-DEFAULT?)
   (PREVIOUS :ALLOCATION :INSTANCE :ACCESSOR %PREVIOUS)
   (NEXT :ALLOCATION :INSTANCE :ACCESSOR %NEXT))
  (:DOCUMENTATION
   "Cache data structure to store the result of proving an atomic
and possibly open `proposition' relative to a set of variable `bindings'."))

(CL:DEFUN NEW-ATOMIC-GOAL-CACHE ()
  (CL:LET* ((SELF NULL))
   (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE ATOMIC-GOAL-CACHE)))
   (CL:SETF (%NEXT SELF) NULL) (CL:SETF (%PREVIOUS SELF) NULL)
   (CL:SETF (%HOLDS-BY-DEFAULT? SELF) FALSE)
   (CL:SETF (%DYNAMIC-CUTOFF SELF) NULL-FLOAT)
   (CL:SETF (%POSITIVE-SCORE SELF) NULL-FLOAT)
   (CL:SETF (%JUSTIFICATION SELF) NULL) (CL:SETF (%BINDINGS SELF) NULL)
   (CL:SETF (%PROPOSITION SELF) NULL)
   (CL:SETF (%REVERSE-POLARITY? SELF) FALSE)
   (CL:SETF (%TIMESTAMP SELF) NULL-INTEGER)
   (CL:SETF (%GOAL-CONTEXT SELF) NULL) SELF))

(CL:DEFMETHOD PRIMARY-TYPE ((SELF ATOMIC-GOAL-CACHE))
  SGT-GOAL-CACHES-LOGIC-ATOMIC-GOAL-CACHE)

(CL:DEFUN ACCESS-ATOMIC-GOAL-CACHE-SLOT-VALUE (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-GOAL-CONTEXT)
    (CL:IF SETVALUE? (CL:SETF (%GOAL-CONTEXT SELF) VALUE)
     (CL:SETQ VALUE (%GOAL-CONTEXT SELF))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-TIMESTAMP)
    (CL:IF SETVALUE? (CL:SETF (%TIMESTAMP SELF) (%WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE (WRAP-INTEGER (%TIMESTAMP SELF)))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-REVERSE-POLARITY?)
    (CL:IF SETVALUE?
     (CL:SETF (%REVERSE-POLARITY? SELF)
      (COERCE-WRAPPED-BOOLEAN-TO-BOOLEAN VALUE))
     (CL:SETQ VALUE
      (CL:IF (%REVERSE-POLARITY? SELF) TRUE-WRAPPER FALSE-WRAPPER))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-PROPOSITION)
    (CL:IF SETVALUE? (CL:SETF (%PROPOSITION SELF) VALUE)
     (CL:SETQ VALUE (%PROPOSITION SELF))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-BINDINGS)
    (CL:IF SETVALUE? (CL:SETF (%BINDINGS SELF) VALUE)
     (CL:SETQ VALUE (%BINDINGS SELF))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-JUSTIFICATION)
    (CL:IF SETVALUE? (CL:SETF (%JUSTIFICATION SELF) VALUE)
     (CL:SETQ VALUE (%JUSTIFICATION SELF))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-POSITIVE-SCORE)
    (CL:IF SETVALUE?
     (CL:SETF (%POSITIVE-SCORE SELF) (%WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE (WRAP-FLOAT (%POSITIVE-SCORE SELF)))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-DYNAMIC-CUTOFF)
    (CL:IF SETVALUE?
     (CL:SETF (%DYNAMIC-CUTOFF SELF) (%WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE (WRAP-FLOAT (%DYNAMIC-CUTOFF SELF)))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-HOLDS-BY-DEFAULT?)
    (CL:IF SETVALUE?
     (CL:SETF (%HOLDS-BY-DEFAULT? SELF)
      (COERCE-WRAPPED-BOOLEAN-TO-BOOLEAN VALUE))
     (CL:SETQ VALUE
      (CL:IF (%HOLDS-BY-DEFAULT? SELF) TRUE-WRAPPER FALSE-WRAPPER))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-PREVIOUS)
    (CL:IF SETVALUE? (CL:SETF (%PREVIOUS SELF) VALUE)
     (CL:SETQ VALUE (%PREVIOUS SELF))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-STELLA-NEXT)
    (CL:IF SETVALUE? (CL:SETF (%NEXT SELF) VALUE)
     (CL:SETQ VALUE (%NEXT SELF))))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" SLOTNAME
      "' is not a valid case option")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
  VALUE)

(CL:DEFMETHOD PRINT-OBJECT ((SELF ATOMIC-GOAL-CACHE) STREAM)
  (PRINT-ATOMIC-GOAL-CACHE SELF STREAM))

;;; (DEFUN PRINT-ATOMIC-GOAL-CACHE ...)

(CL:DEFUN PRINT-ATOMIC-GOAL-CACHE (SELF STREAM)
  (%%PRINT-STREAM STREAM "|GC|[" (CL:IF (%REVERSE-POLARITY? SELF) "~" "")
   "(" (STRINGIFIED-KIF-OPERATOR (%PROPOSITION SELF)))
  (CL:LET*
   ((*PRINTMODE* KWD-GOAL-CACHES-REALISTIC)
    (*PRINTLOGICALFORMSTREAM* (WRAP-NATIVE-OUTPUT-STREAM STREAM)))
   (CL:DECLARE (CL:SPECIAL *PRINTMODE* *PRINTLOGICALFORMSTREAM*))
   (CL:LET*
    ((ARGVALUE NULL) (ARG NULL)
     (VECTOR-000 (%ARGUMENTS (%PROPOSITION SELF))) (INDEX-000 0)
     (LENGTH-000 (LENGTH VECTOR-000)) (ITER-000 (%BINDINGS SELF)))
    (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
    (CL:LOOP WHILE
     (CL:AND (CL:< INDEX-000 LENGTH-000) (CL:NOT (CL:EQ ITER-000 NIL))) DO
     (CL:PROGN
      (CL:SETQ ARG
       (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-000))
        INDEX-000))
      (CL:SETQ INDEX-000 (CL:1+ INDEX-000)))
     (CL:PROGN (CL:SETQ ARGVALUE (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (%%PRINT-STREAM STREAM " ")
     (PRINT-AS-KIF (CL:IF (CL:EQ ARGVALUE NULL) ARG ARGVALUE)))))
  (%%PRINT-STREAM STREAM ") time: " (%TIMESTAMP SELF) " ctxt: "
   (%CONTEXT-NUMBER (%GOAL-CONTEXT SELF)) "]"))

;;; (DEFGLOBAL *SUCCEEDED-GOALS-CACHE* ...)

(CL:DEFVAR *SUCCEEDED-GOALS-CACHE* NULL)

;;; (DEFGLOBAL *FAILED-GOALS-CACHE* ...)

(CL:DEFVAR *FAILED-GOALS-CACHE* NULL)

;;; (DEFUN CLEAR-QUERY-RESULTS-CACHE ...)

(CL:DEFUN CLEAR-QUERY-RESULTS-CACHE ()
  (CL:LET*
   ((CACHE NULL) (VECTOR-000 *SUCCEEDED-GOALS-CACHE*) (INDEX-000 0)
    (LENGTH-000 (LENGTH VECTOR-000)))
   (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
   (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
    (CL:PROGN
     (CL:SETQ CACHE
      (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-000))
       INDEX-000))
     (CL:SETQ INDEX-000 (CL:1+ INDEX-000)))
    (CL:WHEN (CL:NOT (CL:EQ CACHE NULL))
     (SET-GOAL-CACHE-LIST (%PROPOSITION CACHE) NULL))))
  (CLEAR *SUCCEEDED-GOALS-CACHE*)
  (CLEAR *FAILED-GOALS-CACHE*)
  (CL:SETQ *FAILED-GOAL-CUTOFFS* 0)
  (CL:SETQ *SUCCEEDED-GOAL-CUTOFFS* 0))

;;; (DEFUN PRINT-QUERY-RESULTS-CACHE ...)

(CL:DEFUN PRINT-QUERY-RESULTS-CACHE (LIMIT)
  (CL:DECLARE (CL:TYPE CL:FIXNUM LIMIT))
  (CL:WHEN (NULL? LIMIT) (CL:SETQ LIMIT 100))
  (CL:LET* ((COUNT LIMIT)) (CL:DECLARE (CL:TYPE CL:FIXNUM COUNT))
   (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT)
    "Failed goal cutoffs:    " *FAILED-GOAL-CUTOFFS* EOL)
   (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT)
    "Succeeded goal cutoffs: " *SUCCEEDED-GOAL-CUTOFFS* EOL EOL)
   (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) "Cached failed goals:"
    EOL)
   (CL:LET*
    ((I NULL-INTEGER) (CACHE NULL) (VECTOR-000 *FAILED-GOALS-CACHE*)
     (INDEX-000 0) (LENGTH-000 (LENGTH VECTOR-000)) (ITER-000 0))
    (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000 ITER-000 I))
    (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
     (CL:PROGN
      (CL:SETQ CACHE
       (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-000))
        INDEX-000))
      (CL:SETQ INDEX-000 (CL:1+ INDEX-000)))
     (CL:PROGN (CL:SETQ I ITER-000) (CL:SETQ ITER-000 (CL:1+ ITER-000)))
     (CL:LET* ((TEST-VALUE-000 FALSE))
      (CL:SETQ TEST-VALUE-000 (CL:NOT (CL:EQ CACHE NULL)))
      (CL:WHEN TEST-VALUE-000
       (CL:SETQ TEST-VALUE-000 (CL:NOT (DELETED? (%PROPOSITION CACHE))))
       (CL:WHEN TEST-VALUE-000
        (CL:SETQ TEST-VALUE-000
         (CL:NOT (CL:= (%SYMBOL-ID (%OPERATOR (%PROPOSITION CACHE))) -1)))
        (CL:WHEN TEST-VALUE-000
         (CL:LET* ((FOUND?-000 FALSE))
          (CL:LET*
           ((BINDING NULL) (ARG NULL)
            (VECTOR-001 (%ARGUMENTS (%PROPOSITION CACHE))) (INDEX-001 0)
            (LENGTH-001 (LENGTH VECTOR-001)) (ITER-001 (%BINDINGS CACHE)))
           (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-001 LENGTH-001))
           (CL:LOOP WHILE
            (CL:AND (CL:< INDEX-001 LENGTH-001)
             (CL:NOT (CL:EQ ITER-001 NIL)))
            DO
            (CL:PROGN
             (CL:SETQ ARG
              (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-001))
               INDEX-001))
             (CL:SETQ INDEX-001 (CL:1+ INDEX-001)))
            (CL:PROGN (CL:SETQ BINDING (%%VALUE ITER-001))
             (CL:SETQ ITER-001 (%%REST ITER-001)))
            (CL:WHEN
             (CL:OR (DELETED? ARG)
              (CL:AND (CL:NOT (CL:EQ BINDING NULL)) (DELETED? BINDING)))
             (CL:SETQ FOUND?-000 TRUE) (CL:RETURN))))
          (CL:SETQ TEST-VALUE-000 FOUND?-000))
         (CL:SETQ TEST-VALUE-000 (CL:NOT TEST-VALUE-000)))))
      (CL:WHEN TEST-VALUE-000 (CL:WHEN (CL:<= COUNT 0) (CL:RETURN))
       (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) I ": " CACHE EOL)
       (CL:SETQ COUNT (CL:1- COUNT))))))
   (CL:SETQ COUNT LIMIT)
   (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) EOL
    "Cached succeeded goals:" EOL)
   (CL:LET*
    ((I NULL-INTEGER) (CACHE NULL) (VECTOR-002 *SUCCEEDED-GOALS-CACHE*)
     (INDEX-002 0) (LENGTH-002 (LENGTH VECTOR-002)) (ITER-002 0))
    (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-002 LENGTH-002 ITER-002 I))
    (CL:LOOP WHILE (CL:< INDEX-002 LENGTH-002) DO
     (CL:PROGN
      (CL:SETQ CACHE
       (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-002))
        INDEX-002))
      (CL:SETQ INDEX-002 (CL:1+ INDEX-002)))
     (CL:PROGN (CL:SETQ I ITER-002) (CL:SETQ ITER-002 (CL:1+ ITER-002)))
     (CL:LET* ((TEST-VALUE-001 FALSE))
      (CL:SETQ TEST-VALUE-001 (CL:NOT (CL:EQ CACHE NULL)))
      (CL:WHEN TEST-VALUE-001
       (CL:SETQ TEST-VALUE-001 (CL:NOT (DELETED? (%PROPOSITION CACHE))))
       (CL:WHEN TEST-VALUE-001
        (CL:SETQ TEST-VALUE-001
         (CL:NOT (CL:= (%SYMBOL-ID (%OPERATOR (%PROPOSITION CACHE))) -1)))
        (CL:WHEN TEST-VALUE-001
         (CL:LET* ((FOUND?-001 FALSE))
          (CL:LET*
           ((BINDING NULL) (ARG NULL)
            (VECTOR-003 (%ARGUMENTS (%PROPOSITION CACHE))) (INDEX-003 0)
            (LENGTH-003 (LENGTH VECTOR-003)) (ITER-003 (%BINDINGS CACHE)))
           (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-003 LENGTH-003))
           (CL:LOOP WHILE
            (CL:AND (CL:< INDEX-003 LENGTH-003)
             (CL:NOT (CL:EQ ITER-003 NIL)))
            DO
            (CL:PROGN
             (CL:SETQ ARG
              (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-003))
               INDEX-003))
             (CL:SETQ INDEX-003 (CL:1+ INDEX-003)))
            (CL:PROGN (CL:SETQ BINDING (%%VALUE ITER-003))
             (CL:SETQ ITER-003 (%%REST ITER-003)))
            (CL:WHEN
             (CL:OR (DELETED? ARG)
              (CL:AND (CL:NOT (CL:EQ BINDING NULL)) (DELETED? BINDING)))
             (CL:SETQ FOUND?-001 TRUE) (CL:RETURN))))
          (CL:SETQ TEST-VALUE-001 FOUND?-001))
         (CL:SETQ TEST-VALUE-001 (CL:NOT TEST-VALUE-001)))))
      (CL:WHEN TEST-VALUE-001 (CL:WHEN (CL:<= COUNT 0) (CL:RETURN))
       (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) I ": " CACHE EOL)
       (CL:SETQ COUNT (CL:1- COUNT))))))))

;;; (DEFUN (SUCCEEDED-GOAL-INDEX INTEGER) ...)

(CL:DEFUN SUCCEEDED-GOAL-INDEX (FRAME)
  (CL:THE CL:FIXNUM
   (CL:MOD (CL:THE CL:FIXNUM (GOAL-HASH-CODE FRAME)) 1541)))

;;; (DEFUN (FAILED-GOAL-INDEX INTEGER) ...)

(CL:DEFUN FAILED-GOAL-INDEX (FRAME)
  (CL:THE CL:FIXNUM
   (CL:MOD (CL:THE CL:FIXNUM (GOAL-HASH-CODE FRAME)) 1541)))

;;; (DEFUN (GOAL-HASH-CODE INTEGER) ...)

(CL:DEFUN GOAL-HASH-CODE (FRAME)
  (CL:LET*
   ((PROPOSITION (%PROPOSITION FRAME))
    (OPERATOR (CACHED-GOAL-OPERATOR PROPOSITION))
    (ARGUMENTS (%ARGUMENTS PROPOSITION)) (CODE 0))
   (CL:DECLARE (CL:TYPE CL:FIXNUM CODE))
   (CL:SETQ CODE (%CONTEXT-NUMBER *CONTEXT*))
   (CL:IF (%REVERSE-POLARITY? FRAME)
    (CL:SETQ CODE (HASH-SUBSTRING "-" CODE 0 NULL-INTEGER))
    (CL:SETQ CODE (HASH-SUBSTRING "+" CODE 0 NULL-INTEGER)))
   (CL:WHEN (CL:NOT (CL:EQ OPERATOR NULL))
    (CL:SETQ CODE
     (HASH-SUBSTRING (%SYMBOL-NAME OPERATOR) CODE 0 NULL-INTEGER)))
   (CL:LET*
    ((ARGVALUE NULL) (ARG NULL) (VECTOR-000 ARGUMENTS) (INDEX-000 0)
     (LENGTH-000 (LENGTH VECTOR-000)) (ITER-000 (%GOAL-BINDINGS FRAME)))
    (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
    (CL:LOOP WHILE
     (CL:AND (CL:< INDEX-000 LENGTH-000) (CL:NOT (CL:EQ ITER-000 NIL))) DO
     (CL:PROGN
      (CL:SETQ ARG
       (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-000))
        INDEX-000))
      (CL:SETQ INDEX-000 (CL:1+ INDEX-000)))
     (CL:PROGN (CL:SETQ ARGVALUE (%%VALUE ITER-000))
      (CL:SETQ ITER-000 (%%REST ITER-000)))
     (CL:TAGBODY
      (CL:WHEN (CL:EQ ARGVALUE NULL)
       (CL:SETQ ARGVALUE
        (CL:AREF
         (CL:THE CL:SIMPLE-VECTOR
          (%THE-ARRAY
           (%VARIABLE-BINDINGS
            (%CURRENT-PATTERN-RECORD *QUERYITERATOR*))))
         (CL:THE CL:FIXNUM (%BOUND-TO-OFFSET ARG))))
       (CL:WHEN (CL:EQ ARGVALUE NULL)
        (CL:SETQ CODE (HASH-UNBOUND-GOAL-VARIABLE ARG ARGUMENTS CODE))
        (CL:GO :CONTINUE)))
      (CL:SETQ CODE (HASH-GOAL-ARGUMENT ARGVALUE CODE)) :CONTINUE)))
   CODE))

;;; (DEFUN (HASH-UNBOUND-GOAL-VARIABLE INTEGER) ...)

(CL:DEFUN HASH-UNBOUND-GOAL-VARIABLE (VAR ARGUMENTS CODE)
  (CL:DECLARE (CL:TYPE CL:FIXNUM CODE))
  (CL:LET* ((VARINDEX 1)) (CL:DECLARE (CL:TYPE CL:FIXNUM VARINDEX))
   (CL:LET*
    ((I NULL-INTEGER) (ARG NULL) (VECTOR-000 ARGUMENTS) (INDEX-000 0)
     (LENGTH-000 (LENGTH VECTOR-000)) (ITER-000 0))
    (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000 ITER-000 I))
    (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
     (CL:PROGN
      (CL:SETQ ARG
       (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-000))
        INDEX-000))
      (CL:SETQ INDEX-000 (CL:1+ INDEX-000)))
     (CL:PROGN (CL:SETQ I ITER-000) (CL:SETQ ITER-000 (CL:1+ ITER-000)))
     (CL:COND
      ((CL:EQ VAR ARG)
       (CL:RETURN-FROM HASH-UNBOUND-GOAL-VARIABLE
        (HASH-SUBSTRING "#v" (CL:+ CODE VARINDEX) 0 NULL-INTEGER)))
      ((CL:AND (ISA? ARG SGT-GOAL-CACHES-LOGIC-PATTERN-VARIABLE)
        (CL:= (POSITION ARGUMENTS ARG 0) I))
       (CL:SETQ VARINDEX (CL:1+ VARINDEX))))))
   (CL:ERROR (NEW-STELLA-EXCEPTION "Shouldn't get here!"))))

;;; (DEFUN (HASH-GOAL-ARGUMENT INTEGER) ...)

(CL:DEFUN HASH-GOAL-ARGUMENT (ARG CODE)
  (CL:DECLARE (CL:TYPE CL:FIXNUM CODE))
  (CL:WHEN (CL:EQ ARG NULL)
   (CL:RETURN-FROM HASH-GOAL-ARGUMENT
    (HASH-SUBSTRING "NULL" CODE 0 NULL-INTEGER)))
  (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE ARG)))
   (CL:COND
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-GOAL-CACHES-LOGIC-PATTERN-VARIABLE)
     (CL:PROGN
      (HASH-SUBSTRING (%SYMBOL-NAME (%SKOLEM-NAME ARG)) CODE 0
       NULL-INTEGER)))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-GOAL-CACHES-LOGIC-SKOLEM)
     (CL:PROGN
      (HASH-SUBSTRING (%SYMBOL-NAME (%SKOLEM-NAME ARG)) CODE 0
       NULL-INTEGER)))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-GOAL-CACHES-LOGIC-DESCRIPTION)
     (CL:PROGN
      (CL:LET* ((NAME (DESCRIPTION-NAME ARG)))
       (HASH-SUBSTRING
        (CL:IF (CL:NOT (CL:EQ NAME NULL)) (%SYMBOL-NAME NAME)
         (STRINGIFY ARG))
        CODE 0 NULL-INTEGER))))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-GOAL-CACHES-LOGIC-LOGIC-OBJECT)
     (CL:PROGN
      (CL:WHEN (CL:EQ (%SURROGATE-VALUE-INVERSE ARG) NULL)
       (CL:WARN
        "BUG IN 'hash-goal-argument'.  CAN'T HANDLE UNNAMED LOGIC OBJECT~%"))
      (HASH-SUBSTRING (%SYMBOL-NAME (%SURROGATE-VALUE-INVERSE ARG)) CODE 0
       NULL-INTEGER)))
    ((SUBTYPE-OF-SURROGATE? TEST-VALUE-000)
     (CL:PROGN (HASH-SUBSTRING (%SYMBOL-NAME ARG) CODE 0 NULL-INTEGER)))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-GOAL-CACHES-STELLA-LIST)
     (CL:PROGN (CL:SETQ CODE (HASH-SUBSTRING "#c" CODE 0 NULL-INTEGER))
      (CL:LET*
       ((I NULL-INTEGER) (ELT NULL) (ITER-000 (%THE-CONS-LIST ARG))
        (ITER-001 1) (UPPER-BOUND-000 10))
       (CL:DECLARE (CL:TYPE CL:FIXNUM ITER-001 UPPER-BOUND-000 I))
       (CL:LOOP WHILE
        (CL:AND (CL:NOT (CL:EQ ITER-000 NIL))
         (CL:<= ITER-001 UPPER-BOUND-000))
        DO
        (CL:PROGN (CL:SETQ ELT (%%VALUE ITER-000))
         (CL:SETQ ITER-000 (%%REST ITER-000)))
        (CL:PROGN (CL:SETQ I ITER-001)
         (CL:SETQ ITER-001 (CL:1+ ITER-001)))
        (CL:SETQ CODE (HASH-GOAL-ARGUMENT ELT (CL:+ CODE I)))))
      CODE))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-GOAL-CACHES-STELLA-SET)
     (CL:PROGN (CL:SETQ CODE (HASH-SUBSTRING "#c" CODE 0 NULL-INTEGER))
      (CL:LET*
       ((I NULL-INTEGER) (ELT NULL) (ITER-002 (%THE-CONS-LIST ARG))
        (ITER-003 1) (UPPER-BOUND-001 10))
       (CL:DECLARE (CL:TYPE CL:FIXNUM ITER-003 UPPER-BOUND-001 I))
       (CL:LOOP WHILE
        (CL:AND (CL:NOT (CL:EQ ITER-002 NIL))
         (CL:<= ITER-003 UPPER-BOUND-001))
        DO
        (CL:PROGN (CL:SETQ ELT (%%VALUE ITER-002))
         (CL:SETQ ITER-002 (%%REST ITER-002)))
        (CL:PROGN (CL:SETQ I ITER-003)
         (CL:SETQ ITER-003 (CL:1+ ITER-003)))
        (CL:SETQ CODE (HASH-GOAL-ARGUMENT ELT (CL:+ CODE I)))))
      CODE))
    ((SUBTYPE-OF-STRING? TEST-VALUE-000)
     (CL:PROGN (HASH-SUBSTRING (%WRAPPER-VALUE ARG) CODE 0 NULL-INTEGER)))
    ((SUBTYPE-OF-INTEGER? TEST-VALUE-000)
     (CL:PROGN
      (HASH-SUBSTRING "#i"
       (CL:+ CODE
        (CL:THE CL:FIXNUM
         (CL:MOD (CL:THE CL:FIXNUM (%WRAPPER-VALUE ARG)) 1541)))
       0 NULL-INTEGER)))
    ((SUBTYPE-OF-FLOAT? TEST-VALUE-000)
     (CL:PROGN
      (HASH-SUBSTRING "#f"
       (CL:+ CODE
        (CL:THE CL:FIXNUM
         (CL:MOD (CL:THE CL:FIXNUM (FLOOR (CL:* (%WRAPPER-VALUE ARG) 50)))
          1541)))
       0 NULL-INTEGER)))
    (CL:T (HASH-SUBSTRING (STRINGIFY ARG) CODE 0 NULL-INTEGER)))))

;;; (DEFUN (CACHED-GOAL-OPERATOR SURROGATE) ...)

(CL:DEFUN CACHED-GOAL-OPERATOR (GOAL)
  (CL:LET* ((TEST-VALUE-000 (%KIND GOAL)))
   (CL:COND
    ((CL:OR (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-ISA)
      (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-PREDICATE)
      (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-FUNCTION))
     (CL:LET* ((OPERATOR (%OPERATOR GOAL)))
      (CL:WHEN
       (CL:AND (CL:NOT (CL:EQ OPERATOR NULL))
        (ISA? OPERATOR SGT-GOAL-CACHES-STELLA-SURROGATE)
        (CL:NOT (CL:= (%SYMBOL-ID OPERATOR) -1)))
       (CL:RETURN-FROM CACHED-GOAL-OPERATOR OPERATOR))))
    (CL:T)))
  NULL)

;;; (DEFUN (GET-GOAL-CACHE-LIST ATOMIC-GOAL-CACHE) ...)

(CL:DEFUN GET-GOAL-CACHE-LIST (GOAL)
  (CL:LET*
   ((OPERATOR (CACHED-GOAL-OPERATOR GOAL))
    (DESCRIPTION
     (CL:IF (CL:NOT (CL:EQ OPERATOR NULL)) (GET-DESCRIPTION OPERATOR)
      NULL)))
   (CL:IF
    (CL:AND (CL:NOT (CL:EQ DESCRIPTION NULL))
     (CL:NOT (DELETED? DESCRIPTION)))
    (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS DESCRIPTION)
     SYM-GOAL-CACHES-LOGIC-GOAL-CACHE-LIST NULL)
    NULL)))

;;; (DEFUN (SET-GOAL-CACHE-LIST ATOMIC-GOAL-CACHE) ...)

(CL:DEFUN SET-GOAL-CACHE-LIST (GOAL FIRSTCACHE)
  (CL:LET*
   ((OPERATOR (CACHED-GOAL-OPERATOR GOAL))
    (DESCRIPTION
     (CL:IF (CL:NOT (CL:EQ OPERATOR NULL)) (GET-DESCRIPTION OPERATOR)
      NULL)))
   (CL:IF
    (CL:AND (CL:NOT (CL:EQ DESCRIPTION NULL))
     (CL:NOT (DELETED? DESCRIPTION)))
    (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS DESCRIPTION)
     SYM-GOAL-CACHES-LOGIC-GOAL-CACHE-LIST FIRSTCACHE NULL)
    NULL)))

;;; (DEFUN (CREATE-ATOMIC-GOAL-CACHE ATOMIC-GOAL-CACHE) ...)

(CL:DEFUN CREATE-ATOMIC-GOAL-CACHE (FRAME CACHE SUCCESS?)
  (CL:WHEN (CL:EQ CACHE NULL) (CL:SETQ CACHE (NEW-ATOMIC-GOAL-CACHE)))
  (CL:LET* ((PROPOSITION (%PROPOSITION FRAME)))
   (CL:WHEN SUCCESS?
    (CL:WHEN (CL:NOT (CL:EQ (%NEXT CACHE) NULL))
     (CL:SETF (%PREVIOUS (%NEXT CACHE)) (%PREVIOUS CACHE))
     (CL:WHEN (CL:EQ (%PREVIOUS CACHE) NULL)
      (SET-GOAL-CACHE-LIST (%PROPOSITION (%NEXT CACHE)) (%NEXT CACHE))))
    (CL:WHEN (CL:NOT (CL:EQ (%PREVIOUS CACHE) NULL))
     (CL:SETF (%NEXT (%PREVIOUS CACHE)) (%NEXT CACHE)))
    (CL:SETF (%PREVIOUS CACHE) NULL) (CL:SETF (%NEXT CACHE) NULL)
    (CL:LET* ((PREVIOUSSTART (GET-GOAL-CACHE-LIST PROPOSITION)))
     (CL:WHEN (CL:NOT (CL:EQ CACHE PREVIOUSSTART))
      (CL:WHEN (CL:NOT (CL:EQ PREVIOUSSTART NULL))
       (CL:SETF (%PREVIOUS PREVIOUSSTART) CACHE)
       (CL:SETF (%NEXT CACHE) PREVIOUSSTART))))
    (SET-GOAL-CACHE-LIST PROPOSITION CACHE))
   (CL:SETF (%GOAL-CONTEXT CACHE) *CONTEXT*)
   (CL:SETF (%TIMESTAMP CACHE) (GET-NOW-TIMESTAMP))
   (CL:SETF (%REVERSE-POLARITY? CACHE) (%REVERSE-POLARITY? FRAME))
   (CL:SETF (%PROPOSITION CACHE) PROPOSITION)
   (CL:SETF (%BINDINGS CACHE) (YIELD-GOAL-BINDINGS PROPOSITION))
   (CL:SETF (%JUSTIFICATION CACHE)
    (CL:IF SUCCESS? (%JUSTIFICATION FRAME) NULL))
   (CL:SETF (%HOLDS-BY-DEFAULT? CACHE) (%HOLDS-BY-DEFAULT? FRAME))
   (CL:COND
    ((CL:AND (CL:NOT (CL:EQ *QUERYITERATOR* NULL))
      (CL:NOT (CL:EQ (%PARTIAL-MATCH-STRATEGY *QUERYITERATOR*) NULL)))
     (CL:SETF (%POSITIVE-SCORE CACHE)
      (CL:IF SUCCESS? (%LATEST-POSITIVE-SCORE *QUERYITERATOR*) 0.0d0))
     (CL:SETF (%DYNAMIC-CUTOFF CACHE)
      (GET-DYNAMIC-CUTOFF FRAME SUCCESS? TRUE)))
    (CL:T (CL:SETF (%DYNAMIC-CUTOFF CACHE) NULL-FLOAT)
     (CL:SETF (%POSITIVE-SCORE CACHE) NULL-FLOAT)))
   (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
    SYM-GOAL-CACHES-LOGIC-CACHED-GOAL-RESULT?
    (CL:IF TRUE TRUE-WRAPPER FALSE-WRAPPER) FALSE-WRAPPER)
   CACHE))

;;; (DEFGLOBAL *LAST-DYNAMIC-CUTOFF* ...)

(CL:PROGN (CL:DEFVAR *LAST-DYNAMIC-CUTOFF* NULL-FLOAT) (CL:DECLAIM (CL:TYPE CL:DOUBLE-FLOAT *LAST-DYNAMIC-CUTOFF*)))

;;; (DEFUN RECORD-LAST-DYNAMIC-CUTOFF ...)

(CL:DEFUN RECORD-LAST-DYNAMIC-CUTOFF (FRAME LASTMOVE)
  (CL:WHEN
   (CL:AND (CL:NOT (CL:EQ *QUERYITERATOR* NULL))
    (CL:NOT (CL:EQ (%PARTIAL-MATCH-STRATEGY *QUERYITERATOR*) NULL)))
   (CL:COND
    ((CL:OR (CL:EQ LASTMOVE KWD-GOAL-CACHES-MOVE-DOWN)
      (CL:EQ LASTMOVE KWD-GOAL-CACHES-MOVE-IN-PLACE))
     (CL:SETQ *LAST-DYNAMIC-CUTOFF* NULL-FLOAT))
    ((CL:OR (CL:EQ LASTMOVE KWD-GOAL-CACHES-FINAL-SUCCESS)
      (CL:EQ LASTMOVE KWD-GOAL-CACHES-CONTINUING-SUCCESS)
      (CL:EQ LASTMOVE KWD-GOAL-CACHES-FAILURE))
     (CL:WHEN (CL:NOT (CL:EQ (%PARTIAL-MATCH-FRAME FRAME) NULL))
      (CL:SETQ *LAST-DYNAMIC-CUTOFF*
       (%DYNAMIC-CUTOFF (%PARTIAL-MATCH-FRAME FRAME)))))
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" LASTMOVE
       "' is not a valid case option")
      (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))

;;; (DEFUN (GET-DYNAMIC-CUTOFF PARTIAL-MATCH-SCORE) ...)

(CL:DEFUN GET-DYNAMIC-CUTOFF (GOAL SUCCESS? CACHE?)
  (CL:IF (CL:NOT (CL:= *LAST-DYNAMIC-CUTOFF* NULL-FLOAT))
   *LAST-DYNAMIC-CUTOFF*
   (CL:IF TRUE (CL:IF SUCCESS? 1.0d0 0.0d0)
    (CL:LET* ((CURSOR GOAL))
     (CL:LOOP WHILE (CL:EQ (%PARTIAL-MATCH-FRAME CURSOR) NULL) DO
      (CL:SETQ CURSOR (%UP CURSOR)))
     (%DYNAMIC-CUTOFF (%PARTIAL-MATCH-FRAME CURSOR))))))

;;; (DEFUN (GET-POSITIVE-SCORE PARTIAL-MATCH-SCORE) ...)

(CL:DEFUN GET-POSITIVE-SCORE (GOAL)
  (%LATEST-POSITIVE-SCORE *QUERYITERATOR*))

;;; (DEFGLOBAL *UNIFICATION-VECTOR-1* ...)

(CL:DEFVAR *UNIFICATION-VECTOR-1* NULL)

;;; (DEFGLOBAL *UNIFICATION-VECTOR-2* ...)

(CL:DEFVAR *UNIFICATION-VECTOR-2* NULL)

;;; (DEFUN (CACHE-MATCHES-GOAL? BOOLEAN) ...)

(CL:DEFUN CACHE-MATCHES-GOAL? (CACHE GOAL SUCCESS? MODE)
  (CL:SETQ SUCCESS? SUCCESS?)
  (CL:WHEN
   (CL:AND (CL:= (GET-NOW-TIMESTAMP) (%TIMESTAMP CACHE))
    (CL:EQ *CONTEXT* (%GOAL-CONTEXT CACHE))
    (CL:EQ (%REVERSE-POLARITY? GOAL) (%REVERSE-POLARITY? CACHE)))
   (CL:LET*
    ((GOALPROPOSITION (%PROPOSITION GOAL))
     (GOALARGUMENTS (%ARGUMENTS GOALPROPOSITION))
     (CACHEPROPOSITION (%PROPOSITION CACHE))
     (CACHEARGUMENTS (%ARGUMENTS CACHEPROPOSITION)))
    (CL:WHEN
     (CL:AND
      (CL:EQ (%OPERATOR GOALPROPOSITION) (%OPERATOR CACHEPROPOSITION))
      (CL:= (LENGTH GOALARGUMENTS) (LENGTH CACHEARGUMENTS)))
     (CL:LET*
      ((I NULL-INTEGER) (CACHEBINDING NULL) (GOALBINDING NULL)
       (GOALARG NULL) (VECTOR-000 GOALARGUMENTS) (INDEX-000 0)
       (LENGTH-000 (LENGTH VECTOR-000)) (ITER-000 (%GOAL-BINDINGS GOAL))
       (ITER-001 (%BINDINGS CACHE)) (ITER-002 0))
      (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000 ITER-002 I))
      (CL:LOOP WHILE
       (CL:AND (CL:< INDEX-000 LENGTH-000) (CL:NOT (CL:EQ ITER-000 NIL))
        (CL:NOT (CL:EQ ITER-001 NIL)))
       DO
       (CL:PROGN
        (CL:SETQ GOALARG
         (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-000))
          INDEX-000))
        (CL:SETQ INDEX-000 (CL:1+ INDEX-000)))
       (CL:PROGN (CL:SETQ GOALBINDING (%%VALUE ITER-000))
        (CL:SETQ ITER-000 (%%REST ITER-000)))
       (CL:PROGN (CL:SETQ CACHEBINDING (%%VALUE ITER-001))
        (CL:SETQ ITER-001 (%%REST ITER-001)))
       (CL:PROGN (CL:SETQ I ITER-002) (CL:SETQ ITER-002 (CL:1+ ITER-002)))
       (CL:WHEN (CL:EQ GOALBINDING NULL)
        (CL:SETQ GOALBINDING
         (CL:AREF
          (CL:THE CL:SIMPLE-VECTOR
           (%THE-ARRAY
            (%VARIABLE-BINDINGS
             (%CURRENT-PATTERN-RECORD *QUERYITERATOR*))))
          (CL:THE CL:FIXNUM (%BOUND-TO-OFFSET GOALARG)))))
       (CL:LET
        ((SELF (%THE-ARRAY *UNIFICATION-VECTOR-1*)) (VALUE GOALBINDING)
         (POSITION I))
        (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
         (CL:TYPE CL:FIXNUM POSITION))
        (CL:SETF (CL:AREF SELF POSITION) VALUE))
       (CL:LET
        ((SELF (%THE-ARRAY *UNIFICATION-VECTOR-2*)) (VALUE CACHEBINDING)
         (POSITION I))
        (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
         (CL:TYPE CL:FIXNUM POSITION))
        (CL:SETF (CL:AREF SELF POSITION) VALUE))))
     (CL:LET*
      ((SUBARGUMENTS GOALARGUMENTS) (SUBBINDINGS *UNIFICATION-VECTOR-1*)
       (SUPERARGUMENTS CACHEARGUMENTS)
       (SUPERBINDINGS *UNIFICATION-VECTOR-2*))
      (CL:COND ((CL:EQ MODE KWD-GOAL-CACHES-GOAL-INSTANTIATES-CACHE))
       ((CL:EQ MODE KWD-GOAL-CACHES-CACHE-INSTANTIATES-GOAL)
        (CL:SETQ SUBARGUMENTS CACHEARGUMENTS)
        (CL:SETQ SUBBINDINGS *UNIFICATION-VECTOR-2*)
        (CL:SETQ SUPERARGUMENTS GOALARGUMENTS)
        (CL:SETQ SUPERBINDINGS *UNIFICATION-VECTOR-1*))
       (CL:T
        (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
         (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" MODE
          "' is not a valid case option")
         (CL:ERROR
          (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
      (CL:LET*
       ((UNIFIEDARG NULL) (SUPERARG NULL) (SUBARGBINDING NULL)
        (SUBARG NULL) (VECTOR-001 SUBARGUMENTS) (INDEX-001 0)
        (LENGTH-001 (LENGTH VECTOR-001)) (VECTOR-002 SUBBINDINGS)
        (INDEX-002 0) (LENGTH-002 (LENGTH VECTOR-002))
        (VECTOR-003 SUPERARGUMENTS) (INDEX-003 0)
        (LENGTH-003 (LENGTH VECTOR-003)) (VECTOR-004 SUPERBINDINGS)
        (INDEX-004 0) (LENGTH-004 (LENGTH VECTOR-004)))
       (CL:DECLARE
        (CL:TYPE CL:FIXNUM INDEX-001 LENGTH-001 INDEX-002 LENGTH-002
         INDEX-003 LENGTH-003 INDEX-004 LENGTH-004))
       (CL:LOOP WHILE
        (CL:AND (CL:< INDEX-001 LENGTH-001) (CL:< INDEX-002 LENGTH-002)
         (CL:< INDEX-003 LENGTH-003) (CL:< INDEX-004 LENGTH-004))
        DO
        (CL:PROGN
         (CL:SETQ SUBARG
          (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-001))
           INDEX-001))
         (CL:SETQ INDEX-001 (CL:1+ INDEX-001)))
        (CL:PROGN
         (CL:SETQ SUBARGBINDING
          (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-002))
           INDEX-002))
         (CL:SETQ INDEX-002 (CL:1+ INDEX-002)))
        (CL:PROGN
         (CL:SETQ SUPERARG
          (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-003))
           INDEX-003))
         (CL:SETQ INDEX-003 (CL:1+ INDEX-003)))
        (CL:PROGN
         (CL:SETQ UNIFIEDARG
          (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-004))
           INDEX-004))
         (CL:SETQ INDEX-004 (CL:1+ INDEX-004)))
        (CL:TAGBODY
         (CL:WHEN (CL:NOT (CL:EQ UNIFIEDARG NULL))
          (CL:IF (CL:NOT (EQL? SUBARGBINDING UNIFIEDARG))
           (CL:RETURN-FROM CACHE-MATCHES-GOAL? FALSE) (CL:GO :CONTINUE)))
         (CL:WHEN (CL:EQ SUBARGBINDING NULL)
          (CL:SETQ SUBARGBINDING SUBARG))
         (CL:LET*
          ((I NULL-INTEGER) (SUPARG NULL) (VECTOR-005 SUPERARGUMENTS)
           (INDEX-005 0) (LENGTH-005 (LENGTH VECTOR-005)) (ITER-003 0))
          (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-005 LENGTH-005 ITER-003 I))
          (CL:LOOP WHILE (CL:< INDEX-005 LENGTH-005) DO
           (CL:PROGN
            (CL:SETQ SUPARG
             (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-005))
              INDEX-005))
            (CL:SETQ INDEX-005 (CL:1+ INDEX-005)))
           (CL:PROGN (CL:SETQ I ITER-003)
            (CL:SETQ ITER-003 (CL:1+ ITER-003)))
           (CL:WHEN (EQL? SUPARG SUPERARG)
            (CL:LET
             ((SELF (%THE-ARRAY SUPERBINDINGS)) (VALUE SUBARGBINDING)
              (POSITION I))
             (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
              (CL:TYPE CL:FIXNUM POSITION))
             (CL:SETF (CL:AREF SELF POSITION) VALUE)))))
         :CONTINUE)))
      (CL:RETURN-FROM CACHE-MATCHES-GOAL? TRUE)))))
  FALSE)

;;; (DEFUN (GOAL-INSTANTIATES-CACHE? BOOLEAN) ...)

(CL:DEFUN GOAL-INSTANTIATES-CACHE? (GOAL CACHE SUCCESS?)
  (CACHE-MATCHES-GOAL? CACHE GOAL SUCCESS?
   KWD-GOAL-CACHES-GOAL-INSTANTIATES-CACHE))

;;; (DEFUN (CACHE-INSTANTIATES-GOAL? BOOLEAN) ...)

(CL:DEFUN CACHE-INSTANTIATES-GOAL? (CACHE GOAL SUCCESS?)
  (CACHE-MATCHES-GOAL? CACHE GOAL SUCCESS?
   KWD-GOAL-CACHES-CACHE-INSTANTIATES-GOAL))

;;; (DEFUN DONT-CACHE-GOAL-FAILURE-BETWEEN-FRAMES ...)

(CL:DEFUN DONT-CACHE-GOAL-FAILURE-BETWEEN-FRAMES (TOPFRAME BOTTOMFRAME)
  (CL:LOOP (CL:SETF (%DONT-CACHE-GOAL-FAILURE? TOPFRAME) TRUE)
   (CL:WHEN (CL:EQ TOPFRAME BOTTOMFRAME)
    (CL:RETURN-FROM DONT-CACHE-GOAL-FAILURE-BETWEEN-FRAMES))
   (CL:SETQ TOPFRAME (%UP TOPFRAME))))

;;; (DEFUN CACHE-GOAL ...)

(CL:DEFUN CACHE-GOAL (FRAME SUCCESS? KEEPFRAME? CLOCKTICKS)
  (CL:DECLARE (CL:TYPE CL:FIXNUM CLOCKTICKS))
  (CL:SETQ KEEPFRAME? KEEPFRAME?)
  (CL:WHEN (CL:EQ (%STATE FRAME) KWD-GOAL-CACHES-ATOMIC-GOAL)
   (CL:WHEN (CL:EQ (%GOAL-BINDINGS FRAME) NULL)
    (CL:RETURN-FROM CACHE-GOAL))
   (CL:WHEN SUCCESS? (CL:SETF (%DONT-CACHE-GOAL-FAILURE? FRAME) TRUE))
   (CL:WHEN
    (%WRAPPER-VALUE
     (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
      SYM-GOAL-CACHES-LOGIC-CACHED-GOAL-RESULT? FALSE-WRAPPER))
    (CL:RETURN-FROM CACHE-GOAL))
   (CL:WHEN
    (CL:OR
     (CL:>= (CL:- CLOCKTICKS (%STARTING-CLOCK-TICKS FRAME))
      *CACHE-GOAL-QUANTUM*)
     (CL:AND FALSE
      (TEST-PROPERTY?
       (SURROGATE-TO-DESCRIPTION (%OPERATOR (%PROPOSITION FRAME)))
       SGT-GOAL-CACHES-PL-KERNEL-KB-FRAME-PREDICATE)))
    (CL:LET* ((TEST-VALUE-000 (%KIND (%PROPOSITION FRAME))))
     (CL:COND
      ((CL:OR (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-ISA)
        (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-PREDICATE)
        (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-FUNCTION))
       (CL:WHEN
        (MEMBER?
         (GET-QUOTED-TREE
          "((/PL-KERNEL-KB/@FORK /PL-KERNEL-KB/@COLLECT-INTO-LIST) \"/LOGIC\")"
          "/LOGIC")
         (%OPERATOR (%PROPOSITION FRAME)))
        (CL:RETURN-FROM CACHE-GOAL))
       (CL:WHEN (TRACE-KEYWORD? KWD-GOAL-CACHES-GOAL-CACHES)
        (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT)
         "=========> CACHED " (CL:IF SUCCESS? "SUCCESS" "FAILURE") " AT "
         (CL:THE CL:FIXNUM
          (CL:MOD (CL:THE CL:FIXNUM (GOAL-HASH-CODE FRAME)) 1541))
         ": " (%PROPOSITION FRAME) EOL))
       (UPDATE-NOW-TIMESTAMP KWD-GOAL-CACHES-EXECUTE-QUERY)
       (SET-DYNAMIC-SLOT-VALUE
        (%DYNAMIC-SLOTS
         (SURROGATE-TO-DESCRIPTION (%OPERATOR (%PROPOSITION FRAME))))
        SYM-GOAL-CACHES-LOGIC-CHECK-FOR-CACHED-GOALS?
        (CL:IF TRUE TRUE-WRAPPER FALSE-WRAPPER) FALSE-WRAPPER)
       (CL:LET* ((INDEX NULL-INTEGER) (CACHEDGOAL NULL))
        (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX))
        (CL:COND
         (SUCCESS?
          (CL:WHEN (CL:NOT *CACHE-SUCCEEDED-GOALS?*)
           (CL:RETURN-FROM CACHE-GOAL))
          (CL:SETQ INDEX
           (CL:THE CL:FIXNUM
            (CL:MOD (CL:THE CL:FIXNUM (GOAL-HASH-CODE FRAME)) 1541)))
          (CL:SETQ CACHEDGOAL
           (CL:AREF
            (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY *SUCCEEDED-GOALS-CACHE*))
            INDEX))
          (CL:COND
           ((CL:OR (CL:EQ CACHEDGOAL NULL)
             (CL:NOT
              (CACHE-MATCHES-GOAL? CACHEDGOAL FRAME TRUE
               KWD-GOAL-CACHES-GOAL-INSTANTIATES-CACHE))
             (CL:AND *RECORD-JUSTIFICATIONS?*
              (CL:EQ (%JUSTIFICATION CACHEDGOAL) NULL)))
            (CL:LET
             ((SELF (%THE-ARRAY *SUCCEEDED-GOALS-CACHE*))
              (VALUE (CREATE-ATOMIC-GOAL-CACHE FRAME CACHEDGOAL TRUE))
              (POSITION INDEX))
             (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
              (CL:TYPE CL:FIXNUM POSITION))
             (CL:SETF (CL:AREF SELF POSITION) VALUE)))
           ((CL:AND (CL:NOT (CL:EQ CACHEDGOAL NULL))
             (CL:AND (CL:NOT (CL:EQ *QUERYITERATOR* NULL))
              (CL:NOT
               (CL:EQ (%PARTIAL-MATCH-STRATEGY *QUERYITERATOR*) NULL)))
             (CL:< (%DYNAMIC-CUTOFF CACHEDGOAL)
              (GET-DYNAMIC-CUTOFF FRAME TRUE TRUE)))
            (CL:SETF (%DYNAMIC-CUTOFF CACHEDGOAL)
             (GET-DYNAMIC-CUTOFF FRAME TRUE TRUE))
            (CL:SETF (%POSITIVE-SCORE CACHEDGOAL)
             (%LATEST-POSITIVE-SCORE *QUERYITERATOR*)))
           ((CL:AND (CL:NOT (CL:EQ CACHEDGOAL NULL))
             (%HOLDS-BY-DEFAULT? CACHEDGOAL)
             (CL:NOT (%HOLDS-BY-DEFAULT? FRAME)))
            (CL:SETF (%HOLDS-BY-DEFAULT? CACHEDGOAL) FALSE))))
         (CL:T
          (CL:WHEN
           (CL:OR (CL:NOT *CACHE-FAILED-GOALS?*)
            (%DONT-CACHE-GOAL-FAILURE? FRAME))
           (CL:RETURN-FROM CACHE-GOAL))
          (CL:SETQ INDEX
           (CL:THE CL:FIXNUM
            (CL:MOD (CL:THE CL:FIXNUM (GOAL-HASH-CODE FRAME)) 1541)))
          (CL:SETQ CACHEDGOAL
           (CL:AREF
            (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY *FAILED-GOALS-CACHE*))
            INDEX))
          (CL:IF
           (CL:OR (CL:EQ CACHEDGOAL NULL)
            (CL:NOT
             (CACHE-MATCHES-GOAL? CACHEDGOAL FRAME FALSE
              KWD-GOAL-CACHES-GOAL-INSTANTIATES-CACHE)))
           (CL:LET
            ((SELF (%THE-ARRAY *FAILED-GOALS-CACHE*))
             (VALUE (CREATE-ATOMIC-GOAL-CACHE FRAME CACHEDGOAL FALSE))
             (POSITION INDEX))
            (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
             (CL:TYPE CL:FIXNUM POSITION))
            (CL:SETF (CL:AREF SELF POSITION) VALUE))
           (CL:WHEN
            (CL:AND (CL:NOT (CL:EQ CACHEDGOAL NULL))
             (CL:AND (CL:NOT (CL:EQ *QUERYITERATOR* NULL))
              (CL:NOT
               (CL:EQ (%PARTIAL-MATCH-STRATEGY *QUERYITERATOR*) NULL)))
             (CL:> (%DYNAMIC-CUTOFF CACHEDGOAL)
              (GET-DYNAMIC-CUTOFF FRAME FALSE TRUE)))
            (CL:SETF (%DYNAMIC-CUTOFF CACHEDGOAL)
             (GET-DYNAMIC-CUTOFF FRAME FALSE TRUE))))))))
      (CL:T))))))

;;; (DEFUN (FIND-CACHED-GOAL ATOMIC-GOAL-CACHE) ...)

(CL:DEFUN FIND-CACHED-GOAL (FRAME SUCCESSORFAILURE)
  (CL:WHEN (CL:EQ (%STATE FRAME) KWD-GOAL-CACHES-ATOMIC-GOAL)
   (CL:LET* ((TEST-VALUE-000 (%KIND (%PROPOSITION FRAME))))
    (CL:COND
     ((CL:OR (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-ISA)
       (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-PREDICATE)
       (CL:EQ TEST-VALUE-000 KWD-GOAL-CACHES-FUNCTION))
      (CL:LET* ((CACHEDGOAL NULL))
       (CL:COND
        ((CL:EQ SUCCESSORFAILURE KWD-GOAL-CACHES-SUCCESS)
         (CL:WHEN (CL:NOT *CACHE-SUCCEEDED-GOALS?*)
          (CL:RETURN-FROM FIND-CACHED-GOAL NULL))
         (CL:SETQ CACHEDGOAL
          (CL:AREF
           (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY *SUCCEEDED-GOALS-CACHE*))
           (CL:THE CL:FIXNUM
            (CL:MOD (CL:THE CL:FIXNUM (GOAL-HASH-CODE FRAME)) 1541))))
         (CL:WHEN
          (CL:AND (CL:NOT (CL:EQ CACHEDGOAL NULL))
           (CACHE-MATCHES-GOAL? CACHEDGOAL FRAME TRUE
            KWD-GOAL-CACHES-GOAL-INSTANTIATES-CACHE)
           (CL:OR
            (CL:NOT
             (CL:AND (CL:NOT (CL:EQ *QUERYITERATOR* NULL))
              (CL:NOT
               (CL:EQ (%PARTIAL-MATCH-STRATEGY *QUERYITERATOR*) NULL))))
            (CL:>= (%DYNAMIC-CUTOFF CACHEDGOAL)
             (GET-DYNAMIC-CUTOFF FRAME TRUE FALSE)))
           (CL:OR (CL:NOT *RECORD-JUSTIFICATIONS?*)
            (CL:NOT (CL:EQ (%JUSTIFICATION CACHEDGOAL) NULL))))
          (CL:RETURN-FROM FIND-CACHED-GOAL CACHEDGOAL)))
        ((CL:EQ SUCCESSORFAILURE KWD-GOAL-CACHES-FAILURE)
         (CL:WHEN
          (CL:OR (CL:NOT *CACHE-FAILED-GOALS?*)
           (%DONT-CACHE-GOAL-FAILURE? FRAME))
          (CL:RETURN-FROM FIND-CACHED-GOAL NULL))
         (CL:SETQ CACHEDGOAL
          (CL:AREF
           (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY *FAILED-GOALS-CACHE*))
           (CL:THE CL:FIXNUM
            (CL:MOD (CL:THE CL:FIXNUM (GOAL-HASH-CODE FRAME)) 1541))))
         (CL:WHEN
          (CL:AND (CL:NOT (CL:EQ CACHEDGOAL NULL))
           (CACHE-MATCHES-GOAL? CACHEDGOAL FRAME FALSE
            KWD-GOAL-CACHES-GOAL-INSTANTIATES-CACHE)
           (CL:OR
            (CL:NOT
             (CL:AND (CL:NOT (CL:EQ *QUERYITERATOR* NULL))
              (CL:NOT
               (CL:EQ (%PARTIAL-MATCH-STRATEGY *QUERYITERATOR*) NULL))))
            (CL:<= (%DYNAMIC-CUTOFF CACHEDGOAL)
             (GET-DYNAMIC-CUTOFF FRAME FALSE FALSE))))
          (CL:RETURN-FROM FIND-CACHED-GOAL CACHEDGOAL)))
        (CL:T
         (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
          (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" SUCCESSORFAILURE
           "' is not a valid case option")
          (CL:ERROR
           (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))
     (CL:T))))
  NULL)

;;; (DEFCLASS ATOMIC-GOAL-CACHE-ITERATOR ...)

(CL:DEFCLASS ATOMIC-GOAL-CACHE-ITERATOR (ITERATOR)
  ((GOAL :ALLOCATION :INSTANCE :ACCESSOR %GOAL)
   (CACHE-LIST :ALLOCATION :INSTANCE :ACCESSOR %CACHE-LIST)))

(CL:DEFUN NEW-ATOMIC-GOAL-CACHE-ITERATOR ()
  (CL:LET* ((SELF NULL))
   (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE ATOMIC-GOAL-CACHE-ITERATOR)))
   (CL:SETF (%FIRST-ITERATION? SELF) TRUE) (CL:SETF (%VALUE SELF) NULL)
   (CL:SETF (%CACHE-LIST SELF) NULL) (CL:SETF (%GOAL SELF) NULL) SELF))

(CL:DEFMETHOD PRIMARY-TYPE ((SELF ATOMIC-GOAL-CACHE-ITERATOR))
  SGT-GOAL-CACHES-LOGIC-ATOMIC-GOAL-CACHE-ITERATOR)

(CL:DEFUN ACCESS-ATOMIC-GOAL-CACHE-ITERATOR-SLOT-VALUE (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-GOAL)
    (CL:IF SETVALUE? (CL:SETF (%GOAL SELF) VALUE)
     (CL:SETQ VALUE (%GOAL SELF))))
   ((CL:EQ SLOTNAME SYM-GOAL-CACHES-LOGIC-CACHE-LIST)
    (CL:IF SETVALUE? (CL:SETF (%CACHE-LIST SELF) VALUE)
     (CL:SETQ VALUE (%CACHE-LIST SELF))))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" SLOTNAME
      "' is not a valid case option")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
  VALUE)

;;; (DEFUN (ALL-CACHED-PROPOSITIONS ATOMIC-GOAL-CACHE-ITERATOR) ...)

(CL:DEFUN ALL-CACHED-PROPOSITIONS (GOAL)
  (CL:LET*
   ((PROPOSITION (%PROPOSITION GOAL)) (OPERATOR (%OPERATOR PROPOSITION))
    (CACHELIST (GET-GOAL-CACHE-LIST PROPOSITION)))
   (CL:LOOP WHILE
    (CL:AND (CL:NOT (CL:EQ CACHELIST NULL))
     (CL:NOT (CL:EQ (%OPERATOR (%PROPOSITION CACHELIST)) OPERATOR)))
    DO (CL:SETQ CACHELIST (%NEXT CACHELIST)))
   (SET-GOAL-CACHE-LIST PROPOSITION CACHELIST)
   (CL:LET* ((SELF-000 (NEW-ATOMIC-GOAL-CACHE-ITERATOR)))
    (CL:SETF (%GOAL SELF-000) GOAL)
    (CL:SETF (%CACHE-LIST SELF-000) CACHELIST)
    (CL:LET* ((VALUE-000 SELF-000)) VALUE-000))))

;;; (DEFMETHOD (NEXT? BOOLEAN) ...)

(CL:DEFMETHOD NEXT? ((SELF ATOMIC-GOAL-CACHE-ITERATOR))
  (CL:LET* ((GOAL (%GOAL SELF)) (CACHELIST (%CACHE-LIST SELF)))
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ CACHELIST NULL))
     (CL:NOT
      (CL:EQ (%OPERATOR (%PROPOSITION GOAL))
       (%OPERATOR (%PROPOSITION CACHELIST)))))
    (CL:SETF (%CACHE-LIST SELF) NULL) (CL:RETURN-FROM NEXT? FALSE))
   (CL:LOOP WHILE
    (CL:AND (CL:NOT (CL:EQ CACHELIST NULL))
     (CL:OR
      (CL:NOT
       (CACHE-MATCHES-GOAL? CACHELIST GOAL TRUE
        KWD-GOAL-CACHES-CACHE-INSTANTIATES-GOAL))
      (CL:AND (%HOLDS-BY-DEFAULT? GOAL) *DONTUSEDEFAULTKNOWLEDGE?*)
      (CL:AND *RECORD-JUSTIFICATIONS?*
       (CL:EQ (%JUSTIFICATION CACHELIST) NULL))))
    DO (CL:SETQ CACHELIST (%NEXT CACHELIST)))
   (CL:COND
    ((CL:NOT (CL:EQ CACHELIST NULL)) (CL:SETF (%VALUE SELF) CACHELIST)
     (CL:SETF (%CACHE-LIST SELF) (%NEXT CACHELIST)) TRUE)
    (CL:T FALSE))))

(CL:DEFUN HELP-STARTUP-GOAL-CACHES1 ()
  (CL:PROGN
   (CL:SETQ SGT-GOAL-CACHES-LOGIC-GOAL-CACHE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GOAL-CACHE" NULL 1))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-CACHED-BINDINGS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CACHED-BINDINGS" NULL 0))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-TIMESTAMP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TIMESTAMP" NULL 0))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-PROPOSITION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PROPOSITION" NULL 0))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-REVERSE-POLARITY?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "REVERSE-POLARITY?" NULL 0))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-CACHE-CONTEXT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CACHE-CONTEXT" NULL 0))
   (CL:SETQ KWD-GOAL-CACHES-GOAL-CACHES
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GOAL-CACHES" NULL 2))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-GOAL-CACHE-TABLE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GOAL-CACHE-TABLE" NULL 0))
   (CL:SETQ KWD-GOAL-CACHES-ISA
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ISA" NULL 2))
   (CL:SETQ KWD-GOAL-CACHES-PREDICATE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PREDICATE" NULL 2))
   (CL:SETQ KWD-GOAL-CACHES-FUNCTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FUNCTION" NULL 2))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-NEGATED-GOAL-CACHE-TABLE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NEGATED-GOAL-CACHE-TABLE" NULL 0))
   (CL:SETQ SGT-GOAL-CACHES-STELLA-SURROGATE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SURROGATE"
     (GET-STELLA-MODULE "/STELLA" TRUE) 1))
   (CL:SETQ KWD-GOAL-CACHES-DUPLICATE-GOALS-WITH-CACHING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DUPLICATE-GOALS-WITH-CACHING" NULL
     2))
   (CL:SETQ KWD-GOAL-CACHES-FAILURE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FAILURE" NULL 2))
   (CL:SETQ KWD-GOAL-CACHES-FINAL-SUCCESS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FINAL-SUCCESS" NULL 2))
   (CL:SETQ KWD-GOAL-CACHES-CONTINUING-SUCCESS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTINUING-SUCCESS" NULL 2))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-INFERENCE-CACHE-OF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INFERENCE-CACHE-OF" NULL 0))
   (CL:SETQ KWD-GOAL-CACHES-DUPLICATE-GOALS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DUPLICATE-GOALS" NULL 2))
   (CL:SETQ SGT-GOAL-CACHES-LOGIC-ATOMIC-GOAL-CACHE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ATOMIC-GOAL-CACHE" NULL 1))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-GOAL-CONTEXT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GOAL-CONTEXT" NULL 0))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-BINDINGS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BINDINGS" NULL 0))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-JUSTIFICATION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JUSTIFICATION" NULL 0))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-POSITIVE-SCORE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "POSITIVE-SCORE" NULL 0))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-DYNAMIC-CUTOFF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DYNAMIC-CUTOFF" NULL 0))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-HOLDS-BY-DEFAULT?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "HOLDS-BY-DEFAULT?" NULL 0))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-PREVIOUS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PREVIOUS" NULL 0))
   (CL:SETQ SYM-GOAL-CACHES-STELLA-NEXT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NEXT"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))
   (CL:SETQ KWD-GOAL-CACHES-REALISTIC
    (INTERN-RIGID-SYMBOL-WRT-MODULE "REALISTIC" NULL 2))
   (CL:SETQ SGT-GOAL-CACHES-LOGIC-PATTERN-VARIABLE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PATTERN-VARIABLE" NULL 1))
   (CL:SETQ SGT-GOAL-CACHES-LOGIC-SKOLEM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SKOLEM" NULL 1))
   (CL:SETQ SGT-GOAL-CACHES-LOGIC-DESCRIPTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DESCRIPTION" NULL 1))
   (CL:SETQ SGT-GOAL-CACHES-LOGIC-LOGIC-OBJECT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LOGIC-OBJECT" NULL 1))
   (CL:SETQ SGT-GOAL-CACHES-STELLA-LIST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LIST"
     (GET-STELLA-MODULE "/STELLA" TRUE) 1))
   (CL:SETQ SGT-GOAL-CACHES-STELLA-SET
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SET"
     (GET-STELLA-MODULE "/STELLA" TRUE) 1))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-GOAL-CACHE-LIST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GOAL-CACHE-LIST" NULL 0))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-CACHED-GOAL-RESULT?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CACHED-GOAL-RESULT?" NULL 0))
   (CL:SETQ KWD-GOAL-CACHES-MOVE-DOWN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MOVE-DOWN" NULL 2))
   (CL:SETQ KWD-GOAL-CACHES-MOVE-IN-PLACE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MOVE-IN-PLACE" NULL 2))
   (CL:SETQ KWD-GOAL-CACHES-GOAL-INSTANTIATES-CACHE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GOAL-INSTANTIATES-CACHE" NULL 2))
   (CL:SETQ KWD-GOAL-CACHES-CACHE-INSTANTIATES-GOAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CACHE-INSTANTIATES-GOAL" NULL 2))
   (CL:SETQ KWD-GOAL-CACHES-ATOMIC-GOAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ATOMIC-GOAL" NULL 2))
   (CL:SETQ SGT-GOAL-CACHES-PL-KERNEL-KB-FRAME-PREDICATE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FRAME-PREDICATE"
     (GET-STELLA-MODULE "/PL-KERNEL-KB" TRUE) 1))
   (CL:SETQ KWD-GOAL-CACHES-EXECUTE-QUERY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "EXECUTE-QUERY" NULL 2))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-CHECK-FOR-CACHED-GOALS?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CHECK-FOR-CACHED-GOALS?" NULL 0))
   (CL:SETQ KWD-GOAL-CACHES-SUCCESS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SUCCESS" NULL 2))
   (CL:SETQ SGT-GOAL-CACHES-LOGIC-ATOMIC-GOAL-CACHE-ITERATOR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ATOMIC-GOAL-CACHE-ITERATOR" NULL 1))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-GOAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GOAL" NULL 0))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-CACHE-LIST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CACHE-LIST" NULL 0))
   (CL:SETQ SYM-GOAL-CACHES-LOGIC-STARTUP-GOAL-CACHES
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-GOAL-CACHES" NULL 0))
   (CL:SETQ SYM-GOAL-CACHES-STELLA-METHOD-STARTUP-CLASSNAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME"
     (GET-STELLA-MODULE "/STELLA" TRUE) 0))))

(CL:DEFUN STARTUP-GOAL-CACHES ()
  (CL:LET*
   ((*MODULE* (GET-STELLA-MODULE "/LOGIC" (> *STARTUP-TIME-PHASE* 1)))
    (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2) (HELP-STARTUP-GOAL-CACHES1))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 4)
    (CL:SETQ *SUCCEEDED-GOALS-CACHE* (NEW-VECTOR 1541))
    (CL:SETQ *FAILED-GOALS-CACHE* (NEW-VECTOR 1541))
    (CL:SETQ *UNIFICATION-VECTOR-1* (NEW-EXTENSIBLE-VECTOR 10))
    (CL:SETQ *UNIFICATION-VECTOR-2* (NEW-EXTENSIBLE-VECTOR 10)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 5)
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "GOAL-CACHE"
        "(DEFCLASS GOAL-CACHE (STANDARD-OBJECT) :DOCUMENTATION \"Cache of output bindings derived for a particular goal
and set of input bindings.\" :SLOTS ((CACHED-BINDINGS :TYPE (LIST OF GOAL-BINDINGS) :ALLOCATION :EMBEDDED) (TIMESTAMP :TYPE TIMESTAMP) (PROPOSITION :TYPE PROPOSITION) (REVERSE-POLARITY? :TYPE BOOLEAN) (CACHE-CONTEXT :TYPE CONTEXT)))")))
     (CL:SETF (%CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-GOAL-CACHE))
     (CL:SETF (%CLASS-SLOT-ACCESSOR-CODE CLASS)
      (CL:FUNCTION ACCESS-GOAL-CACHE-SLOT-VALUE)))
    (DEFINE-STELLA-TYPE-FROM-STRINGIFIED-SOURCE
     "(DEFTYPE GOAL-CACHE-TABLE (KEY-VALUE-LIST OF CONTEXT GOAL-CACHE))")
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "ATOMIC-GOAL-CACHE"
        "(DEFCLASS ATOMIC-GOAL-CACHE (STANDARD-OBJECT) :DOCUMENTATION \"Cache data structure to store the result of proving an atomic
and possibly open `proposition' relative to a set of variable `bindings'.\" :SLOTS ((GOAL-CONTEXT :TYPE CONTEXT) (TIMESTAMP :TYPE TIMESTAMP) (REVERSE-POLARITY? :TYPE BOOLEAN) (PROPOSITION :TYPE PROPOSITION) (BINDINGS :TYPE GOAL-BINDINGS) (JUSTIFICATION :TYPE JUSTIFICATION) (POSITIVE-SCORE :TYPE PARTIAL-MATCH-SCORE) (DYNAMIC-CUTOFF :TYPE PARTIAL-MATCH-SCORE) (HOLDS-BY-DEFAULT? :TYPE BOOLEAN) (PREVIOUS :TYPE ATOMIC-GOAL-CACHE) (NEXT :TYPE ATOMIC-GOAL-CACHE)) :PRINT-FORM (PRINT-ATOMIC-GOAL-CACHE SELF STREAM))")))
     (CL:SETF (%CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-ATOMIC-GOAL-CACHE))
     (CL:SETF (%CLASS-SLOT-ACCESSOR-CODE CLASS)
      (CL:FUNCTION ACCESS-ATOMIC-GOAL-CACHE-SLOT-VALUE)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "ATOMIC-GOAL-CACHE-ITERATOR"
        "(DEFCLASS ATOMIC-GOAL-CACHE-ITERATOR (ITERATOR) :PARAMETERS ((ANY-VALUE :TYPE ATOMIC-GOAL-CACHE)) :SLOTS ((GOAL :TYPE CONTROL-FRAME) (CACHE-LIST :TYPE ATOMIC-GOAL-CACHE)))")))
     (CL:SETF (%CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-ATOMIC-GOAL-CACHE-ITERATOR))
     (CL:SETF (%CLASS-SLOT-ACCESSOR-CODE CLASS)
      (CL:FUNCTION ACCESS-ATOMIC-GOAL-CACHE-ITERATOR-SLOT-VALUE))))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (DEFINE-FUNCTION-OBJECT "TRACE-GOAL-CACHE"
     "(DEFUN TRACE-GOAL-CACHE ((STRING STRING) (FRAME CONTROL-FRAME)))"
     (CL:FUNCTION TRACE-GOAL-CACHE) NULL)
    (DEFINE-FUNCTION-OBJECT "REMOVE-OBSOLETE-GOAL-CACHES"
     "(DEFUN REMOVE-OBSOLETE-GOAL-CACHES ((TABLE (KEY-VALUE-LIST OF CONTEXT GOAL-CACHE))))"
     (CL:FUNCTION REMOVE-OBSOLETE-GOAL-CACHES) NULL)
    (DEFINE-EXTERNAL-SLOT-FROM-STRINGIFIED-SOURCE
     "(DEFSLOT NAMED-DESCRIPTION GOAL-CACHE-TABLE :TYPE GOAL-CACHE-TABLE :DOCUMENTATION \"Allows attachment of goal caches to classes or slots.\" :ALLOCATION :DYNAMIC)")
    (DEFINE-EXTERNAL-SLOT-FROM-STRINGIFIED-SOURCE
     "(DEFSLOT NAMED-DESCRIPTION NEGATED-GOAL-CACHE-TABLE :TYPE GOAL-CACHE-TABLE :DOCUMENTATION \"Allows attachment of goal caches to classes or slots.\" :ALLOCATION :DYNAMIC)")
    (DEFINE-FUNCTION-OBJECT "YIELD-GOAL-BINDINGS"
     "(DEFUN (YIELD-GOAL-BINDINGS GOAL-BINDINGS) ((GOAL PROPOSITION)))"
     (CL:FUNCTION YIELD-GOAL-BINDINGS) NULL)
    (DEFINE-FUNCTION-OBJECT "FIND-GOAL-CACHE-TABLE"
     "(DEFUN (FIND-GOAL-CACHE-TABLE GOAL-CACHE-TABLE) ((GOAL PROPOSITION)))"
     (CL:FUNCTION FIND-GOAL-CACHE-TABLE) NULL)
    (DEFINE-FUNCTION-OBJECT "CREATE-GOAL-CACHE?"
     "(DEFUN (CREATE-GOAL-CACHE? BOOLEAN) ((FRAME CONTROL-FRAME)))"
     (CL:FUNCTION CREATE-GOAL-CACHE?) NULL)
    (DEFINE-FUNCTION-OBJECT "LOOKUP-GOAL-CACHE"
     "(DEFUN (LOOKUP-GOAL-CACHE GOAL-CACHE) ((TABLE GOAL-CACHE-TABLE)))"
     (CL:FUNCTION LOOKUP-GOAL-CACHE) NULL)
    (DEFINE-FUNCTION-OBJECT "FIND-GOAL-CACHE"
     "(DEFUN (FIND-GOAL-CACHE GOAL-CACHE) ((FRAME CONTROL-FRAME)))"
     (CL:FUNCTION FIND-GOAL-CACHE) NULL)
    (DEFINE-FUNCTION-OBJECT "UPDATE-GOAL-CACHE"
     "(DEFUN UPDATE-GOAL-CACHE ((FRAME CONTROL-FRAME) (SUCCESS? BOOLEAN)))"
     (CL:FUNCTION UPDATE-GOAL-CACHE) NULL)
    (DEFINE-FUNCTION-OBJECT "YIELD-RELATIVE-GOAL-BINDINGS"
     "(DEFUN (YIELD-RELATIVE-GOAL-BINDINGS GOAL-BINDINGS) ((FRAME CONTROL-FRAME)))"
     (CL:FUNCTION YIELD-RELATIVE-GOAL-BINDINGS) NULL)
    (DEFINE-FUNCTION-OBJECT "CONTINUE-CACHED-BINDINGS-PROOF"
     "(DEFUN (CONTINUE-CACHED-BINDINGS-PROOF KEYWORD) ((FRAME CONTROL-FRAME) (LASTMOVE KEYWORD)))"
     (CL:FUNCTION CONTINUE-CACHED-BINDINGS-PROOF) NULL)
    (DEFINE-FUNCTION-OBJECT "TOP-LEVEL-QUERY-CONTEXT?"
     "(DEFUN (TOP-LEVEL-QUERY-CONTEXT? BOOLEAN) ((SELF CONTEXT)))"
     (CL:FUNCTION TOP-LEVEL-QUERY-CONTEXT?) NULL)
    (DEFINE-FUNCTION-OBJECT "CACHE-QUERY-RESULTS?"
     "(DEFUN (CACHE-QUERY-RESULTS? BOOLEAN) () :GLOBALLY-INLINE? TRUE (RETURN (AND (OR *CACHE-SUCCEEDED-GOALS?* *CACHE-FAILED-GOALS?*) (EQL? *DUPLICATE-SUBGOAL-STRATEGY* :DUPLICATE-GOALS) (NOT (PARTIAL-MATCH-MODE?)))))"
     (CL:FUNCTION CACHE-QUERY-RESULTS?) NULL)
    (DEFINE-FUNCTION-OBJECT "TOGGLE-GOAL-CACHING"
     "(DEFUN (TOGGLE-GOAL-CACHING STRING) ())"
     (CL:FUNCTION TOGGLE-GOAL-CACHING) NULL)
    (DEFINE-FUNCTION-OBJECT "PRINT-ATOMIC-GOAL-CACHE"
     "(DEFUN PRINT-ATOMIC-GOAL-CACHE ((SELF ATOMIC-GOAL-CACHE) (STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION PRINT-ATOMIC-GOAL-CACHE) NULL)
    (DEFINE-FUNCTION-OBJECT "CLEAR-QUERY-RESULTS-CACHE"
     "(DEFUN CLEAR-QUERY-RESULTS-CACHE ())"
     (CL:FUNCTION CLEAR-QUERY-RESULTS-CACHE) NULL)
    (DEFINE-FUNCTION-OBJECT "PRINT-QUERY-RESULTS-CACHE"
     "(DEFUN PRINT-QUERY-RESULTS-CACHE ((LIMIT INTEGER)))"
     (CL:FUNCTION PRINT-QUERY-RESULTS-CACHE) NULL)
    (DEFINE-FUNCTION-OBJECT "SUCCEEDED-GOAL-INDEX"
     "(DEFUN (SUCCEEDED-GOAL-INDEX INTEGER) ((FRAME CONTROL-FRAME)) :GLOBALLY-INLINE? TRUE (RETURN (MOD (GOAL-HASH-CODE FRAME) 1541)))"
     (CL:FUNCTION SUCCEEDED-GOAL-INDEX) NULL)
    (DEFINE-FUNCTION-OBJECT "FAILED-GOAL-INDEX"
     "(DEFUN (FAILED-GOAL-INDEX INTEGER) ((FRAME CONTROL-FRAME)) :GLOBALLY-INLINE? TRUE (RETURN (MOD (GOAL-HASH-CODE FRAME) 1541)))"
     (CL:FUNCTION FAILED-GOAL-INDEX) NULL)
    (DEFINE-FUNCTION-OBJECT "GOAL-HASH-CODE"
     "(DEFUN (GOAL-HASH-CODE INTEGER) ((FRAME CONTROL-FRAME)))"
     (CL:FUNCTION GOAL-HASH-CODE) NULL)
    (DEFINE-FUNCTION-OBJECT "HASH-UNBOUND-GOAL-VARIABLE"
     "(DEFUN (HASH-UNBOUND-GOAL-VARIABLE INTEGER) ((VAR PATTERN-VARIABLE) (ARGUMENTS VECTOR) (CODE INTEGER)))"
     (CL:FUNCTION HASH-UNBOUND-GOAL-VARIABLE) NULL)
    (DEFINE-FUNCTION-OBJECT "HASH-GOAL-ARGUMENT"
     "(DEFUN (HASH-GOAL-ARGUMENT INTEGER) ((ARG OBJECT) (CODE INTEGER)))"
     (CL:FUNCTION HASH-GOAL-ARGUMENT) NULL)
    (DEFINE-EXTERNAL-SLOT-FROM-STRINGIFIED-SOURCE
     "(DEFSLOT NAMED-DESCRIPTION GOAL-CACHE-LIST :TYPE ATOMIC-GOAL-CACHE :DOCUMENTATION \"Points at the beginning of a chain of cached values
for some named description\" :ALLOCATION :DYNAMIC)")
    (DEFINE-FUNCTION-OBJECT "CACHED-GOAL-OPERATOR"
     "(DEFUN (CACHED-GOAL-OPERATOR SURROGATE) ((GOAL PROPOSITION)))"
     (CL:FUNCTION CACHED-GOAL-OPERATOR) NULL)
    (DEFINE-FUNCTION-OBJECT "GET-GOAL-CACHE-LIST"
     "(DEFUN (GET-GOAL-CACHE-LIST ATOMIC-GOAL-CACHE) ((GOAL PROPOSITION)))"
     (CL:FUNCTION GET-GOAL-CACHE-LIST) NULL)
    (DEFINE-FUNCTION-OBJECT "SET-GOAL-CACHE-LIST"
     "(DEFUN (SET-GOAL-CACHE-LIST ATOMIC-GOAL-CACHE) ((GOAL PROPOSITION) (FIRSTCACHE ATOMIC-GOAL-CACHE)))"
     (CL:FUNCTION SET-GOAL-CACHE-LIST) NULL)
    (DEFINE-FUNCTION-OBJECT "CREATE-ATOMIC-GOAL-CACHE"
     "(DEFUN (CREATE-ATOMIC-GOAL-CACHE ATOMIC-GOAL-CACHE) ((FRAME CONTROL-FRAME) (CACHE ATOMIC-GOAL-CACHE) (SUCCESS? BOOLEAN)))"
     (CL:FUNCTION CREATE-ATOMIC-GOAL-CACHE) NULL)
    (DEFINE-FUNCTION-OBJECT "RECORD-LAST-DYNAMIC-CUTOFF"
     "(DEFUN RECORD-LAST-DYNAMIC-CUTOFF ((FRAME CONTROL-FRAME) (LASTMOVE KEYWORD)) :GLOBALLY-INLINE? TRUE (WHEN (PARTIAL-MATCH-MODE?) (CASE LASTMOVE ((:MOVE-DOWN :MOVE-IN-PLACE) (SETQ *LAST-DYNAMIC-CUTOFF* NULL)) ((:FINAL-SUCCESS :CONTINUING-SUCCESS :FAILURE) (WHEN (DEFINED? (PARTIAL-MATCH-FRAME FRAME)) (SETQ *LAST-DYNAMIC-CUTOFF* (DYNAMIC-CUTOFF (PARTIAL-MATCH-FRAME FRAME))))))))"
     (CL:FUNCTION RECORD-LAST-DYNAMIC-CUTOFF) NULL)
    (DEFINE-FUNCTION-OBJECT "GET-DYNAMIC-CUTOFF"
     "(DEFUN (GET-DYNAMIC-CUTOFF PARTIAL-MATCH-SCORE) ((GOAL CONTROL-FRAME) (SUCCESS? BOOLEAN) (CACHE? BOOLEAN)))"
     (CL:FUNCTION GET-DYNAMIC-CUTOFF) NULL)
    (DEFINE-FUNCTION-OBJECT "GET-POSITIVE-SCORE"
     "(DEFUN (GET-POSITIVE-SCORE PARTIAL-MATCH-SCORE) ((GOAL CONTROL-FRAME)) :GLOBALLY-INLINE? TRUE (RETURN (LATEST-POSITIVE-SCORE *QUERYITERATOR*)))"
     (CL:FUNCTION GET-POSITIVE-SCORE) NULL)
    (DEFINE-FUNCTION-OBJECT "CACHE-MATCHES-GOAL?"
     "(DEFUN (CACHE-MATCHES-GOAL? BOOLEAN) ((CACHE ATOMIC-GOAL-CACHE) (GOAL CONTROL-FRAME) (SUCCESS? BOOLEAN) (MODE KEYWORD)))"
     (CL:FUNCTION CACHE-MATCHES-GOAL?) NULL)
    (DEFINE-FUNCTION-OBJECT "GOAL-INSTANTIATES-CACHE?"
     "(DEFUN (GOAL-INSTANTIATES-CACHE? BOOLEAN) ((GOAL CONTROL-FRAME) (CACHE ATOMIC-GOAL-CACHE) (SUCCESS? BOOLEAN)) :GLOBALLY-INLINE? TRUE (RETURN (CACHE-MATCHES-GOAL? CACHE GOAL SUCCESS? :GOAL-INSTANTIATES-CACHE)))"
     (CL:FUNCTION GOAL-INSTANTIATES-CACHE?) NULL)
    (DEFINE-FUNCTION-OBJECT "CACHE-INSTANTIATES-GOAL?"
     "(DEFUN (CACHE-INSTANTIATES-GOAL? BOOLEAN) ((CACHE ATOMIC-GOAL-CACHE) (GOAL CONTROL-FRAME) (SUCCESS? BOOLEAN)) :GLOBALLY-INLINE? TRUE (RETURN (CACHE-MATCHES-GOAL? CACHE GOAL SUCCESS? :CACHE-INSTANTIATES-GOAL)))"
     (CL:FUNCTION CACHE-INSTANTIATES-GOAL?) NULL)
    (DEFINE-FUNCTION-OBJECT "DONT-CACHE-GOAL-FAILURE-BETWEEN-FRAMES"
     "(DEFUN DONT-CACHE-GOAL-FAILURE-BETWEEN-FRAMES ((TOPFRAME CONTROL-FRAME) (BOTTOMFRAME CONTROL-FRAME)))"
     (CL:FUNCTION DONT-CACHE-GOAL-FAILURE-BETWEEN-FRAMES) NULL)
    (DEFINE-FUNCTION-OBJECT "CACHE-GOAL"
     "(DEFUN CACHE-GOAL ((FRAME CONTROL-FRAME) (SUCCESS? BOOLEAN) (KEEPFRAME? BOOLEAN) (CLOCKTICKS INTEGER)))"
     (CL:FUNCTION CACHE-GOAL) NULL)
    (DEFINE-FUNCTION-OBJECT "FIND-CACHED-GOAL"
     "(DEFUN (FIND-CACHED-GOAL ATOMIC-GOAL-CACHE) ((FRAME CONTROL-FRAME) (SUCCESSORFAILURE KEYWORD)))"
     (CL:FUNCTION FIND-CACHED-GOAL) NULL)
    (DEFINE-FUNCTION-OBJECT "ALL-CACHED-PROPOSITIONS"
     "(DEFUN (ALL-CACHED-PROPOSITIONS ATOMIC-GOAL-CACHE-ITERATOR) ((GOAL CONTROL-FRAME)))"
     (CL:FUNCTION ALL-CACHED-PROPOSITIONS) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD (NEXT? BOOLEAN) ((SELF ATOMIC-GOAL-CACHE-ITERATOR)))"
     (CL:FUNCTION NEXT?) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-GOAL-CACHES"
     "(DEFUN STARTUP-GOAL-CACHES () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-GOAL-CACHES) NULL)
    (CL:LET*
     ((FUNCTION
       (LOOKUP-FUNCTION SYM-GOAL-CACHES-LOGIC-STARTUP-GOAL-CACHES)))
     (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FUNCTION)
      SYM-GOAL-CACHES-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "Startup-Goal-Caches") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *CACHE-SUCCEEDED-GOALS?* BOOLEAN TRUE)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *CACHE-FAILED-GOALS?* BOOLEAN TRUE)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *CACHE-GOAL-QUANTUM* INTEGER 5 :DOCUMENTATION \"Only goals whose success or failure took at least this
number of query clock ticks will be cached.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *SUCCEEDED-GOALS-CACHE* (VECTOR OF ATOMIC-GOAL-CACHE) (NEW VECTOR :ARRAY-SIZE 1541))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *FAILED-GOALS-CACHE* (VECTOR OF ATOMIC-GOAL-CACHE) (NEW VECTOR :ARRAY-SIZE 1541))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *LAST-DYNAMIC-CUTOFF* FLOAT NULL)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *UNIFICATION-VECTOR-1* EXTENSIBLE-VECTOR (NEW EXTENSIBLE-VECTOR :ARRAY-SIZE 10))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *UNIFICATION-VECTOR-2* EXTENSIBLE-VECTOR (NEW EXTENSIBLE-VECTOR :ARRAY-SIZE 10))"))))
