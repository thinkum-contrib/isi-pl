;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; strategies.lisp

#|
 +---------------------------- BEGIN LICENSE BLOCK ---------------------------+
 |                                                                            |
 | Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
 |                                                                            |
 | The contents of this file are subject to the Mozilla Public License        |
 | Version 1.1 (the "License"); you may not use this file except in           |
 | compliance with the License. You may obtain a copy of the License at       |
 | http://www.mozilla.org/MPL/                                                |
 |                                                                            |
 | Software distributed under the License is distributed on an "AS IS" basis, |
 | WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
 | for the specific language governing rights and limitations under the       |
 | License.                                                                   |
 |                                                                            |
 | The Original Code is the PowerLoom KR&R System.                            |
 |                                                                            |
 | The Initial Developer of the Original Code is                              |
 | UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
 | 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
 |                                                                            |
 | Portions created by the Initial Developer are Copyright (C) 1997-2006      |
 | the Initial Developer. All Rights Reserved.                                |
 |                                                                            |
 | Contributor(s):                                                            |
 |                                                                            |
 | Alternatively, the contents of this file may be used under the terms of    |
 | either the GNU General Public License Version 2 or later (the "GPL"), or   |
 | the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
 | in which case the provisions of the GPL or the LGPL are applicable instead |
 | of those above. If you wish to allow use of your version of this file only |
 | under the terms of either the GPL or the LGPL, and not to allow others to  |
 | use your version of this file under the terms of the MPL, indicate your    |
 | decision by deleting the provisions above and replace them with the notice |
 | and other provisions required by the GPL or the LGPL. If you do not delete |
 | the provisions above, a recipient may use your version of this file under  |
 | the terms of any one of the MPL, the GPL or the LGPL.                      |
 |                                                                            |
 +----------------------------- END LICENSE BLOCK ----------------------------+
|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR KWD-STRATEGIES-DOWN NULL)
(CL:DEFVAR KWD-STRATEGIES-MOVE-DOWN NULL)
(CL:DEFVAR KWD-STRATEGIES-UP-TRUE NULL)
(CL:DEFVAR KWD-STRATEGIES-UP-FAIL NULL)
(CL:DEFVAR KWD-STRATEGIES-FAILURE NULL)
(CL:DEFVAR KWD-STRATEGIES-FINAL-SUCCESS NULL)
(CL:DEFVAR KWD-STRATEGIES-CONTINUING-SUCCESS NULL)
(CL:DEFVAR KWD-STRATEGIES-GOAL-TREE NULL)
(CL:DEFVAR SYM-STRATEGIES-LOGIC-JUSTIFICATION NULL)
(CL:DEFVAR KWD-STRATEGIES-TERMINAL-FAILURE NULL)
(CL:DEFVAR SYM-STRATEGIES-LOGIC-INFERENCE-CUTOFF-REASON NULL)
(CL:DEFVAR SYM-STRATEGIES-STELLA-ITERATOR NULL)
(CL:DEFVAR SYM-STRATEGIES-LOGIC-ANTECEDENTS-RULE NULL)
(CL:DEFVAR SYM-STRATEGIES-LOGIC-PROOF-ADJUNCT NULL)
(CL:DEFVAR KWD-STRATEGIES-PARALLEL-STRATEGIES NULL)
(CL:DEFVAR KWD-STRATEGIES-SELECT-PARALLEL-THREAD NULL)
(CL:DEFVAR KWD-STRATEGIES-FAIL NULL)
(CL:DEFVAR KWD-STRATEGIES-TRUE NULL)
(CL:DEFVAR KWD-STRATEGIES-STRATEGIES NULL)
(CL:DEFVAR SYM-STRATEGIES-LOGIC-DESCRIPTION NULL)
(CL:DEFVAR KWD-STRATEGIES-MOVE-IN-PLACE NULL)
(CL:DEFVAR KWD-STRATEGIES-TIME-OUT NULL)
(CL:DEFVAR KWD-STRATEGIES-SPECIALIST NULL)
(CL:DEFVAR KWD-STRATEGIES-ANTECEDENTS NULL)
(CL:DEFVAR KWD-STRATEGIES-CLUSTERED-CONJUNCTION NULL)
(CL:DEFVAR KWD-STRATEGIES-CONDITIONAL-ANTECEDENT NULL)
(CL:DEFVAR KWD-STRATEGIES-ATOMIC-GOAL NULL)
(CL:DEFVAR KWD-STRATEGIES-DUMMY-JUSTIFICATION NULL)
(CL:DEFVAR KWD-STRATEGIES-LOOKUP-GOAL-CACHES NULL)
(CL:DEFVAR SYM-STRATEGIES-LOGIC-CHECK-FOR-CACHED-GOALS? NULL)
(CL:DEFVAR KWD-STRATEGIES-DUPLICATE-GOALS NULL)
(CL:DEFVAR KWD-STRATEGIES-MANUFACTURE-SKOLEM NULL)
(CL:DEFVAR SGT-STRATEGIES-PL-KERNEL-KB-TOTAL NULL)
(CL:DEFVAR KWD-STRATEGIES-LOOKUP-ASSERTIONS NULL)
(CL:DEFVAR KWD-STRATEGIES-SCAN-PROPOSITIONS NULL)
(CL:DEFVAR KWD-STRATEGIES-SCAN-PARTIAL-PROPOSITIONS NULL)
(CL:DEFVAR KWD-STRATEGIES-SCAN-COLLECTION NULL)
(CL:DEFVAR KWD-STRATEGIES-SHALLOW-DISPROOF NULL)
(CL:DEFVAR KWD-STRATEGIES-SCAN-FOR-VALUE-CLASH NULL)
(CL:DEFVAR KWD-STRATEGIES-ALL-SUBGOAL-STRATEGIES NULL)
(CL:DEFVAR KWD-STRATEGIES-FULL-SUBQUERY NULL)
(CL:DEFVAR KWD-STRATEGIES-GOAL-COMPLEMENT NULL)
(CL:DEFVAR KWD-STRATEGIES-FORWARD-GOALS NULL)
(CL:DEFVAR KWD-STRATEGIES-IMPLIES NULL)
(CL:DEFVAR KWD-STRATEGIES-CONTAINED-BY NULL)
(CL:DEFVAR KWD-STRATEGIES-EQUIVALENCE NULL)
(CL:DEFVAR KWD-STRATEGIES-DISJUNCTIVE-IMPLICATION-INTRODUCTION NULL)
(CL:DEFVAR KWD-STRATEGIES-UNIVERSAL-INTRODUCTION NULL)
(CL:DEFVAR KWD-STRATEGIES-SUBSUMPTION-TEST NULL)
(CL:DEFVAR KWD-STRATEGIES-REFUTATION NULL)
(CL:DEFVAR KWD-STRATEGIES-STRATEGY NULL)
(CL:DEFVAR KWD-STRATEGIES-SUCCESS NULL)
(CL:DEFVAR SYM-STRATEGIES-LOGIC-LATEST-POSITIVE-SCORE NULL)
(CL:DEFVAR KWD-STRATEGIES-GOAL-CACHES NULL)
(CL:DEFVAR KWD-STRATEGIES-ISA NULL)
(CL:DEFVAR SGT-STRATEGIES-LOGIC-WHYNOT-PARTIAL-MATCH NULL)
(CL:DEFVAR KWD-STRATEGIES-FUNCTION NULL)
(CL:DEFVAR SYM-STRATEGIES-LOGIC-WEIGHT NULL)
(CL:DEFVAR SGT-STRATEGIES-PL-KERNEL-KB-MEMBER-OF NULL)
(CL:DEFVAR SGT-STRATEGIES-STELLA-LIST NULL)
(CL:DEFVAR KWD-STRATEGIES-FORWARD NULL)
(CL:DEFVAR KWD-STRATEGIES-DUPLICATE- NULL)
(CL:DEFVAR KWD-STRATEGIES-BACKWARD NULL)
(CL:DEFVAR SYM-STRATEGIES-LOGIC-BACKWARD-ONLY? NULL)
(CL:DEFVAR SYM-STRATEGIES-LOGIC-FORWARD-ONLY? NULL)
(CL:DEFVAR SGT-STRATEGIES-LOGIC-DESCRIPTION NULL)
(CL:DEFVAR KWD-STRATEGIES-FORWARD-RULE NULL)
(CL:DEFVAR SGT-STRATEGIES-LOGIC-CONDITIONAL-ANTECEDENT-PROOF-ADJUNCT NULL)
(CL:DEFVAR SYM-STRATEGIES-LOGIC-PROVABLE-RULE NULL)
(CL:DEFVAR SYM-STRATEGIES-LOGIC-GOAL NULL)
(CL:DEFVAR SYM-STRATEGIES-STELLA-PHASE NULL)
(CL:DEFVAR KWD-STRATEGIES-ORIGINAL-GOAL NULL)
(CL:DEFVAR SGT-STRATEGIES-STELLA-LITERAL-WRAPPER NULL)
(CL:DEFVAR SYM-STRATEGIES-LOGIC-COMPLEMENT-DESCRIPTION NULL)
(CL:DEFVAR SYM-STRATEGIES-LOGIC-CONTAINED-BY NULL)
(CL:DEFVAR SYM-STRATEGIES-STELLA-ISA NULL)
(CL:DEFVAR SYM-STRATEGIES-STELLA-PREDICATE NULL)
(CL:DEFVAR SGT-STRATEGIES-LOGIC-NAMED-DESCRIPTION NULL)
(CL:DEFVAR KWD-STRATEGIES-LOCAL NULL)
(CL:DEFVAR SYM-STRATEGIES-LOGIC-BACK NULL)
(CL:DEFVAR KWD-STRATEGIES-POPPED NULL)
(CL:DEFVAR SYM-STRATEGIES-LOGIC-EXTERNAL-VARIABLES NULL)
(CL:DEFVAR SGT-STRATEGIES-LOGIC-CLUSTERED-CONJUNCTION-PROOF-ADJUNCT NULL)
(CL:DEFVAR SYM-STRATEGIES-LOGIC-CLUSTER-FRAMES NULL)
(CL:DEFVAR KWD-STRATEGIES-AND NULL)
(CL:DEFVAR KWD-STRATEGIES-PREDICATE NULL)
(CL:DEFVAR SYM-STRATEGIES-LOGIC-MONOTONIC? NULL)
(CL:DEFVAR KWD-STRATEGIES-NOT NULL)
(CL:DEFVAR SYM-STRATEGIES-LOGIC-HYPOTHESIZED-INSTANCE? NULL)
(CL:DEFVAR SYM-STRATEGIES-LOGIC-IO-VARIABLES NULL)
(CL:DEFVAR KWD-STRATEGIES-ITERATIVE-FORALL NULL)
(CL:DEFVAR KWD-STRATEGIES-NORMAL NULL)
(CL:DEFVAR KWD-STRATEGIES-CONSTANT-PROPOSITION NULL)
(CL:DEFVAR KWD-STRATEGIES-TECHNICAL NULL)
(CL:DEFVAR KWD-STRATEGIES-LAY NULL)
(CL:DEFVAR SYM-STRATEGIES-LOGIC-STARTUP-STRATEGIES NULL)
(CL:DEFVAR SYM-STRATEGIES-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STARTUP-TIME-PHASE* *MODULE* TRUE-WRAPPER
  *CYC-KLUDGES-ENABLED?* *DUPLICATE-RULE-SEARCH-DEPTH* NULL-INTEGER
  EMPTY-PROPOSITIONS-ITERATOR *REVERSEPOLARITY?* NULL-FLOAT-WRAPPER
  *DONTUSEDEFAULTKNOWLEDGE?* FALSE-WRAPPER *CACHE-SUCCEEDED-GOALS?*
  *CACHE-FAILED-GOALS?* *DUPLICATE-SUBGOAL-STRATEGY*
  *GENERATE-ALL-PROOFS?* *TRACED-KEYWORDS* DEFAULT-TRUE-TRUTH-VALUE
  DEFAULT-FALSE-TRUTH-VALUE STANDARD-OUTPUT TRUE-TRUTH-VALUE EOL
  *QUERYITERATOR* NULL-FLOAT *RECORD-JUSTIFICATIONS?*
  UNKNOWN-TRUTH-VALUE *CONTEXT* NIL FALSE-TRUTH-VALUE))

;;; (DEFUN (CONTINUE-STRATEGIES-PROOFS KEYWORD) ...)

(CL:DEFUN CONTINUE-STRATEGIES-PROOFS (FRAME LASTMOVE)
  (CL:LET* ((RESULT NULL))
   (CL:COND
    ((CL:EQ LASTMOVE KWD-STRATEGIES-DOWN)
     (UNWIND-TO-CHOICE-POINT FRAME) (CLEAR (%JUSTIFICATIONS FRAME))
     (CL:WHEN (CL:NOT (CL:EQ (%DOWN FRAME) NULL))
      (CL:RETURN-FROM CONTINUE-STRATEGIES-PROOFS
       KWD-STRATEGIES-MOVE-DOWN)))
    ((CL:OR (CL:EQ LASTMOVE KWD-STRATEGIES-UP-TRUE)
      (CL:EQ LASTMOVE KWD-STRATEGIES-UP-FAIL))
     (CL:SETQ RESULT
      (RESUME-PROOF-STRATEGY-AFTER-SUBGOAL FRAME LASTMOVE))
     (CL:WHEN (CL:EQ RESULT KWD-STRATEGIES-FAILURE)
      (CL:SETQ RESULT NULL)))
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" LASTMOVE
       "' is not a valid case option")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
   (CL:LOOP
    (CL:TAGBODY
     (CL:WHEN (CL:EQ RESULT NULL)
      (CL:SETQ RESULT (CONTINUE-CURRENT-OR-NEXT-STRATEGY FRAME)))
     (CL:COND
      ((CL:OR (CL:EQ RESULT KWD-STRATEGIES-FINAL-SUCCESS)
        (CL:EQ RESULT KWD-STRATEGIES-CONTINUING-SUCCESS))
       (CL:WHEN
        (CL:AND (CL:NOT (CL:EQ (%PROPOSITION FRAME) NULL))
         (CL:OR (CL:EQ (%TRUTH-VALUE FRAME) DEFAULT-TRUE-TRUTH-VALUE)
          (CL:EQ (%TRUTH-VALUE FRAME) DEFAULT-FALSE-TRUTH-VALUE))
         (HAS-SHALLOW-DISPROOF? FRAME))
        (CL:WHEN (TRACE-KEYWORD? KWD-STRATEGIES-GOAL-TREE)
         (CL:LET*
          ((TRUTHVALUE (%TRUTH-VALUE FRAME))
           (DEFAULT?
            (CL:OR (CL:EQ TRUTHVALUE DEFAULT-TRUE-TRUTH-VALUE)
             (CL:EQ TRUTHVALUE DEFAULT-FALSE-TRUTH-VALUE))))
          (PRINT-VERTICAL-BARS (CL:1+ (COMPUTE-FRAME-DEPTH FRAME)))
          (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT)
           "CLSH: truth=")
          (CL:IF
           (CL:OR (CL:EQ TRUTHVALUE TRUE-TRUTH-VALUE)
            (CL:EQ TRUTHVALUE DEFAULT-TRUE-TRUTH-VALUE))
           (CL:IF DEFAULT?
            (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) "t")
            (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) "T"))
           (CL:IF DEFAULT?
            (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) "f")
            (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) "F")))
          (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) EOL)))
        (UNWIND-TO-CHOICE-POINT FRAME)
        (CL:COND
         ((CL:AND
           (CL:NOT
            (CL:OR
             (CL:EQ (%TRUTH-VALUE FRAME) DEFAULT-TRUE-TRUTH-VALUE)
             (CL:EQ (%TRUTH-VALUE FRAME) DEFAULT-FALSE-TRUTH-VALUE)))
           (ALL-ARGUMENTS-BOUND? (%PROPOSITION FRAME)))
          (CL:SETQ RESULT KWD-STRATEGIES-FAILURE))
         (CL:T (SET-FRAME-TRUTH-VALUE FRAME NULL)
          (CLEAR (%JUSTIFICATIONS FRAME))
          (CL:WHEN (CL:NOT (CL:EQ (%PARTIAL-MATCH-FRAME FRAME) NULL))
           (CLEAR-FRAME-PARTIAL-TRUTH (%PARTIAL-MATCH-FRAME FRAME)))
          (CL:COND
           ((CL:NOT (CL:EQ (%DOWN FRAME) NULL))
            (CL:SETQ RESULT KWD-STRATEGIES-MOVE-DOWN))
           (CL:T (CL:SETQ RESULT NULL) (CL:GO :CONTINUE)))))))
      (CL:T))
     (CL:COND
      ((CL:OR (CL:EQ RESULT KWD-STRATEGIES-CONTINUING-SUCCESS)
        (CL:EQ RESULT KWD-STRATEGIES-FINAL-SUCCESS))
       (CL:WHEN (CL:EQ (%TRUTH-VALUE FRAME) NULL)
        (SET-FRAME-TRUTH-VALUE FRAME TRUE-TRUTH-VALUE))
       (CL:WHEN
        (CL:AND
         (CL:AND (CL:NOT (CL:EQ *QUERYITERATOR* NULL))
          (CL:NOT
           (CL:EQ (%PARTIAL-MATCH-STRATEGY *QUERYITERATOR*) NULL)))
         (CL:NOT
          (CL:AND (CL:NOT (CL:EQ (%PARTIAL-MATCH-FRAME FRAME) NULL))
           (CL:OR
            (CL:NOT
             (CL:= (%POSITIVE-SCORE (%PARTIAL-MATCH-FRAME FRAME))
              NULL-FLOAT))
            (CL:NOT
             (CL:= (%NEGATIVE-SCORE (%PARTIAL-MATCH-FRAME FRAME))
              NULL-FLOAT))))))
        (SET-FRAME-PARTIAL-TRUTH (%PARTIAL-MATCH-FRAME FRAME)
         TRUE-TRUTH-VALUE NULL-FLOAT NULL-FLOAT CL:NIL))
       (CL:WHEN
        (CL:AND *RECORD-JUSTIFICATIONS?*
         (CL:EQ
          (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
           SYM-STRATEGIES-LOGIC-JUSTIFICATION NULL)
          NULL))
        (RECORD-PRIMITIVE-JUSTIFICATION FRAME KWD-STRATEGIES-UP-TRUE)))
      ((CL:OR (CL:EQ RESULT KWD-STRATEGIES-FAILURE)
        (CL:EQ RESULT KWD-STRATEGIES-TERMINAL-FAILURE))
       (CL:IF
        (CL:AND (CL:NOT (CL:EQ *QUERYITERATOR* NULL))
         (CL:NOT
          (CL:EQ (%PARTIAL-MATCH-STRATEGY *QUERYITERATOR*) NULL)))
        (CL:PROGN
         (CL:WHEN
          (CL:NOT
           (CL:AND (CL:NOT (CL:EQ (%PARTIAL-MATCH-FRAME FRAME) NULL))
            (CL:OR
             (CL:NOT
              (CL:= (%POSITIVE-SCORE (%PARTIAL-MATCH-FRAME FRAME))
               NULL-FLOAT))
             (CL:NOT
              (CL:= (%NEGATIVE-SCORE (%PARTIAL-MATCH-FRAME FRAME))
               NULL-FLOAT)))))
          (SET-FRAME-PARTIAL-TRUTH (%PARTIAL-MATCH-FRAME FRAME)
           (%TRUTH-VALUE FRAME)
           (CL:IF (CL:NOT (CL:EQ (%TRUTH-VALUE FRAME) NULL)) NULL-FLOAT
            0.0d0)
           NULL-FLOAT (CL:NOT (CL:EQ (%TRUTH-VALUE FRAME) NULL))))
         (CL:WHEN
          (CL:AND *RECORD-JUSTIFICATIONS?*
           (CL:EQ
            (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
             SYM-STRATEGIES-LOGIC-JUSTIFICATION NULL)
            NULL))
          (RECORD-PRIMITIVE-JUSTIFICATION FRAME
           KWD-STRATEGIES-UP-FAIL)))
        (CL:WHEN
         (CL:AND
          (CL:OR (CL:EQ (%TRUTH-VALUE FRAME) UNKNOWN-TRUTH-VALUE)
           (CL:EQ (%TRUTH-VALUE FRAME) NULL))
          (CL:EQ
           (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
            SYM-STRATEGIES-LOGIC-INFERENCE-CUTOFF-REASON NULL)
           NULL)
          (CL:NOT (CL:EQ (%PROPOSITION FRAME) NULL))
          (CLOSED-PROPOSITION? (%PROPOSITION FRAME)))
         (SET-FRAME-TRUTH-VALUE FRAME FALSE-TRUTH-VALUE)
         (CL:WHEN
          (CL:AND *RECORD-JUSTIFICATIONS?*
           (CL:EQ
            (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
             SYM-STRATEGIES-LOGIC-JUSTIFICATION NULL)
            NULL))
          (RECORD-CLOSED-NOT-JUSTIFICATION FRAME
           KWD-STRATEGIES-UP-FAIL)))))
      (CL:T))
     (CL:RETURN-FROM CONTINUE-STRATEGIES-PROOFS RESULT) :CONTINUE))))

;;; (DEFUN CLEAR-STRATEGY-SLOTS ...)

(CL:DEFUN CLEAR-STRATEGY-SLOTS (FRAME)
  (CL:WHEN
   (CL:NOT
    (CL:EQ
     (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
      SYM-STRATEGIES-STELLA-ITERATOR NULL)
     NULL))
   (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
    SYM-STRATEGIES-STELLA-ITERATOR NULL NULL))
  (CL:WHEN
   (CL:NOT
    (CL:EQ
     (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
      SYM-STRATEGIES-LOGIC-ANTECEDENTS-RULE NULL)
     NULL))
   (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
    SYM-STRATEGIES-LOGIC-ANTECEDENTS-RULE NULL NULL))
  (CL:WHEN
   (CL:NOT
    (CL:EQ
     (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
      SYM-STRATEGIES-LOGIC-PROOF-ADJUNCT NULL)
     NULL))
   (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
    SYM-STRATEGIES-LOGIC-PROOF-ADJUNCT NULL NULL)))

;;; (DEFUN (SELECT-NEXT-STRATEGY CONTROL-FRAME) ...)

(CL:DEFUN SELECT-NEXT-STRATEGY (FRAME)
  (CL:LET* ((STRATEGY NULL))
   (CL:COND
    ((CL:NOT (CL:EQ (%CURRENT-STRATEGY FRAME) NULL))
     (CL:SETQ STRATEGY (%CURRENT-STRATEGY FRAME)))
    ((CL:EQ (%STATE FRAME) KWD-STRATEGIES-PARALLEL-STRATEGIES)
     (CL:SETQ STRATEGY KWD-STRATEGIES-SELECT-PARALLEL-THREAD))
    (CL:T
     (CL:LOOP
      (CL:TAGBODY (CL:SETQ STRATEGY (%%VALUE (%NEXT-STRATEGIES FRAME)))
       (CL:WHEN (CL:EQ STRATEGY NULL)
        (CL:RETURN-FROM SELECT-NEXT-STRATEGY FRAME))
       (CL:SETF (%NEXT-STRATEGIES FRAME)
        (%%REST (%NEXT-STRATEGIES FRAME)))
       (CL:WHEN (FILTER-OUT-STRATEGY? STRATEGY FRAME)
        (CL:GO :CONTINUE))
       (CL:WHEN (PARALLEL-STRATEGY? STRATEGY)
        (CL:SETQ FRAME (PARALLELIZE-CONTROL-FRAME FRAME))
        (CL:SETF (%NEXT-STRATEGIES FRAME)
         (CONS STRATEGY (%NEXT-STRATEGIES FRAME)))
        (CL:SETQ STRATEGY KWD-STRATEGIES-SELECT-PARALLEL-THREAD))
       (CLEAR-STRATEGY-SLOTS FRAME) (CL:RETURN) :CONTINUE))))
   (CL:SETF (%CURRENT-STRATEGY FRAME) STRATEGY) FRAME))

;;; (DEFUN RECORD-BASE-PARTIAL-MATCH-TRUTH ...)

(CL:DEFUN RECORD-BASE-PARTIAL-MATCH-TRUTH (FRAME RESULT)
  (CL:LET*
   ((PMRESULT
     (CL:IF
      (CL:OR (CL:EQ RESULT KWD-STRATEGIES-FAILURE)
       (%REVERSE-POLARITY? FRAME))
      KWD-STRATEGIES-FAIL KWD-STRATEGIES-TRUE)))
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ *QUERYITERATOR* NULL))
     (CL:NOT (CL:EQ (%PARTIAL-MATCH-STRATEGY *QUERYITERATOR*) NULL)))
    (SET-BASE-PARTIAL-MATCH-TRUTH
     (%PARTIAL-MATCH-STRATEGY *QUERYITERATOR*) (%PROPOSITION FRAME)
     PMRESULT))))

;;; (DEFUN (CONTINUE-CURRENT-OR-NEXT-STRATEGY KEYWORD) ...)

(CL:DEFUN CONTINUE-CURRENT-OR-NEXT-STRATEGY (FRAME)
  (CL:LET* ((RESULT NULL))
   (CL:LOOP (CL:SETQ FRAME (SELECT-NEXT-STRATEGY FRAME))
    (CL:WHEN (CL:EQ (%CURRENT-STRATEGY FRAME) NULL)
     (CL:WHEN
      (CL:AND (CL:NOT (CL:EQ *TRACED-KEYWORDS* NULL))
       (MEMB? *TRACED-KEYWORDS* KWD-STRATEGIES-STRATEGIES))
      (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) EOL))
     (CL:IF (NON-EMPTY? (%JUSTIFICATIONS FRAME))
      (CL:RETURN-FROM CONTINUE-CURRENT-OR-NEXT-STRATEGY
       KWD-STRATEGIES-FINAL-SUCCESS)
      (CL:RETURN-FROM CONTINUE-CURRENT-OR-NEXT-STRATEGY
       KWD-STRATEGIES-FAILURE)))
    (CL:WHEN
     (CL:AND (CL:NOT (CL:EQ *TRACED-KEYWORDS* NULL))
      (MEMB? *TRACED-KEYWORDS* KWD-STRATEGIES-STRATEGIES))
     (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) " "
      (%CURRENT-STRATEGY FRAME)))
    (CL:WHEN (TRACE-KEYWORD? KWD-STRATEGIES-STRATEGIES)
     (CL:LET*
      ((DESCRIPTION
        (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
         SYM-STRATEGIES-LOGIC-DESCRIPTION NULL)))
      (CL:WHEN
       (CL:AND (CL:NOT (CL:EQ DESCRIPTION NULL))
        (NAMED-DESCRIPTION? DESCRIPTION))
       (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) "("
        (%SYMBOL-NAME (%SURROGATE-VALUE-INVERSE DESCRIPTION)) ")"))))
    (CL:IF (%REVERSE-POLARITY? FRAME)
     (CL:LET* ((*REVERSEPOLARITY?* CL:T))
      (CL:DECLARE (CL:SPECIAL *REVERSEPOLARITY?*))
      (CL:SETQ RESULT (EXECUTE-PROOF-STRATEGY FRAME)))
     (CL:SETQ RESULT (EXECUTE-PROOF-STRATEGY FRAME)))
    (CL:COND
     ((CL:EQ RESULT KWD-STRATEGIES-TERMINAL-FAILURE)
      (CL:SETF (%NEXT-STRATEGIES FRAME) NIL)
      (CL:SETQ RESULT KWD-STRATEGIES-FAILURE))
     ((CL:OR (CL:EQ RESULT KWD-STRATEGIES-MOVE-DOWN)
       (CL:EQ RESULT KWD-STRATEGIES-MOVE-IN-PLACE)
       (CL:EQ RESULT KWD-STRATEGIES-TIME-OUT))
      (CL:WHEN
       (CL:AND (CL:NOT (CL:EQ *TRACED-KEYWORDS* NULL))
        (MEMB? *TRACED-KEYWORDS* KWD-STRATEGIES-STRATEGIES))
       (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) EOL))
      (CL:RETURN-FROM CONTINUE-CURRENT-OR-NEXT-STRATEGY RESULT))
     (CL:T))
    (RECORD-BASE-PARTIAL-MATCH-TRUTH FRAME RESULT)
    (CL:WHEN (TRACE-KEYWORD? KWD-STRATEGIES-STRATEGIES)
     (CL:COND
      ((CL:EQ RESULT KWD-STRATEGIES-FAILURE)
       (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) " "))
      (CL:T (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) EOL))))
    (CL:IF (CL:EQ RESULT KWD-STRATEGIES-FAILURE)
     (CL:SETF (%CURRENT-STRATEGY FRAME) NULL)
     (CL:RETURN-FROM CONTINUE-CURRENT-OR-NEXT-STRATEGY RESULT)))))

;;; (DEFUN (RESUME-PROOF-STRATEGY-AFTER-SUBGOAL KEYWORD) ...)

(CL:DEFUN RESUME-PROOF-STRATEGY-AFTER-SUBGOAL (FRAME LASTMOVE)
  (CL:LET* ((RESULT NULL))
   (CL:LET* ((TEST-VALUE-000 (%CURRENT-STRATEGY FRAME)))
    (CL:COND
     ((CL:EQ TEST-VALUE-000 KWD-STRATEGIES-SPECIALIST)
      (CL:SETQ RESULT (CONTINUE-SPECIALIST-PROOF FRAME LASTMOVE)))
     ((CL:EQ TEST-VALUE-000 KWD-STRATEGIES-ANTECEDENTS)
      (CL:IF (CL:NOT (CL:EQ (%PARTIAL-MATCH-FRAME FRAME) NULL))
       (CL:SETQ RESULT
        (CONTINUE-PARTIAL-ANTECEDENTS-PROOF
         (%PARTIAL-MATCH-FRAME FRAME) LASTMOVE))
       (CL:SETQ RESULT (CONTINUE-ANTECEDENTS-PROOF FRAME LASTMOVE))))
     ((CL:EQ TEST-VALUE-000 KWD-STRATEGIES-CLUSTERED-CONJUNCTION)
      (CL:SETQ RESULT
       (CONTINUE-CLUSTERED-CONJUNCTION-PROOF FRAME LASTMOVE)))
     ((CL:EQ TEST-VALUE-000 KWD-STRATEGIES-CONDITIONAL-ANTECEDENT)
      (CL:SETQ RESULT
       (CONTINUE-CONDITIONAL-ANTECEDENT-PROOF FRAME LASTMOVE)))
     (CL:T (PROPAGATE-FRAME-TRUTH-VALUE (%RESULT FRAME) FRAME)
      (CL:WHEN
       (CL:NOT (CL:EQ (%PARTIAL-MATCH-FRAME (%RESULT FRAME)) NULL))
       (PROPAGATE-FRAME-PARTIAL-TRUTH
        (%PARTIAL-MATCH-FRAME (%RESULT FRAME)) FRAME))
      (CL:COND
       ((CL:EQ LASTMOVE KWD-STRATEGIES-UP-TRUE)
        (CL:IF (CL:NOT (CL:EQ (%DOWN FRAME) NULL))
         (CL:SETQ RESULT KWD-STRATEGIES-CONTINUING-SUCCESS)
         (CL:SETQ RESULT KWD-STRATEGIES-FINAL-SUCCESS)))
       ((CL:EQ LASTMOVE KWD-STRATEGIES-UP-FAIL)
        (CL:IF
         (CL:OR (CL:EQ (%TRUTH-VALUE FRAME) FALSE-TRUTH-VALUE)
          (CL:EQ (%TRUTH-VALUE FRAME) DEFAULT-FALSE-TRUTH-VALUE))
         (CL:SETQ RESULT KWD-STRATEGIES-TERMINAL-FAILURE)
         (CL:SETQ RESULT KWD-STRATEGIES-FAILURE)))
       (CL:T
        (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
         (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" LASTMOVE
          "' is not a valid case option")
         (CL:ERROR
          (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))))
   (CL:COND
    ((CL:EQ RESULT KWD-STRATEGIES-CONTINUING-SUCCESS)
     (CL:WHEN
      (CL:AND *GENERATE-ALL-PROOFS?*
       (CL:EQ (%STATE FRAME) KWD-STRATEGIES-ATOMIC-GOAL)
       (CL:NOT
        (CL:AND (CL:NOT (CL:EQ *QUERYITERATOR* NULL))
         (CL:NOT
          (CL:EQ (%PARTIAL-MATCH-STRATEGY *QUERYITERATOR*) NULL))))
       (CL:NOT (NEW-BINDINGS-SINCE-LAST-CHOICE-POINT? FRAME)))
      (PUSH (%JUSTIFICATIONS FRAME) KWD-STRATEGIES-DUMMY-JUSTIFICATION)
      (CL:SETQ RESULT KWD-STRATEGIES-MOVE-DOWN)))
    ((CL:OR (CL:EQ RESULT KWD-STRATEGIES-FINAL-SUCCESS)
      (CL:EQ RESULT KWD-STRATEGIES-TERMINAL-FAILURE))
     (CL:SETF (%NEXT-STRATEGIES FRAME) NIL)
     (CL:SETF (%CURRENT-STRATEGY FRAME) NULL)
     (CL:WHEN (CL:EQ RESULT KWD-STRATEGIES-TERMINAL-FAILURE)
      (CL:SETQ RESULT KWD-STRATEGIES-FAILURE)))
    ((CL:EQ RESULT KWD-STRATEGIES-FAILURE)
     (CL:SETF (%CURRENT-STRATEGY FRAME) NULL))
    ((CL:OR (CL:EQ RESULT KWD-STRATEGIES-MOVE-DOWN)
      (CL:EQ RESULT KWD-STRATEGIES-MOVE-IN-PLACE)))
    (CL:T
     (CL:LET* ((STREAM-001 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%NATIVE-STREAM STREAM-001) "`" RESULT
       "' is not a valid case option")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-001))))))
   RESULT))

;;; (DEFUN (FILTER-OUT-STRATEGY? BOOLEAN) ...)

(CL:DEFUN FILTER-OUT-STRATEGY? (STRATEGY FRAME)
  (CL:COND
   ((CL:EQ STRATEGY KWD-STRATEGIES-LOOKUP-GOAL-CACHES)
    (CL:OR
     (CL:NOT
      (%WRAPPER-VALUE
       (DYNAMIC-SLOT-VALUE
        (%DYNAMIC-SLOTS
         (SURROGATE-TO-DESCRIPTION (%OPERATOR (%PROPOSITION FRAME))))
        SYM-STRATEGIES-LOGIC-CHECK-FOR-CACHED-GOALS? FALSE-WRAPPER)))
     (CL:NOT
      (CL:AND (CL:OR *CACHE-SUCCEEDED-GOALS?* *CACHE-FAILED-GOALS?*)
       (CL:EQ *DUPLICATE-SUBGOAL-STRATEGY*
        KWD-STRATEGIES-DUPLICATE-GOALS)
       (CL:NOT
        (CL:AND (CL:NOT (CL:EQ *QUERYITERATOR* NULL))
         (CL:NOT
          (CL:EQ (%PARTIAL-MATCH-STRATEGY *QUERYITERATOR*) NULL))))))))
   ((CL:EQ STRATEGY KWD-STRATEGIES-SPECIALIST)
    (CL:LET*
     ((PROPOSITION (%PROPOSITION FRAME))
      (DESCRIPTION (GET-DESCRIPTION (%OPERATOR PROPOSITION))))
     (CL:EQ (LOOKUP-SPECIALIST DESCRIPTION) NULL)))
   ((CL:EQ STRATEGY KWD-STRATEGIES-MANUFACTURE-SKOLEM)
    (CL:LET*
     ((DESCRIPTION (GET-DESCRIPTION (%OPERATOR (%PROPOSITION FRAME)))))
     (CL:OR
      (CL:NOT
       (TEST-PROPERTY? DESCRIPTION SGT-STRATEGIES-PL-KERNEL-KB-TOTAL))
      (%REVERSE-POLARITY? FRAME))))
   (CL:T CL:NIL)))

;;; (DEFUN (EXECUTE-PROOF-STRATEGY KEYWORD) ...)

(CL:DEFUN EXECUTE-PROOF-STRATEGY (FRAME)
  (CL:LET* ((TEST-VALUE-000 (%CURRENT-STRATEGY FRAME)))
   (CL:COND
    ((CL:EQ TEST-VALUE-000 KWD-STRATEGIES-SPECIALIST)
     (CONTINUE-SPECIALIST-PROOF FRAME KWD-STRATEGIES-DOWN))
    ((CL:EQ TEST-VALUE-000 KWD-STRATEGIES-LOOKUP-GOAL-CACHES)
     (TRY-GOAL-CACHES-PROOF FRAME))
    ((CL:EQ TEST-VALUE-000 KWD-STRATEGIES-LOOKUP-ASSERTIONS)
     (TRY-LOOKUP-GROUND-ASSERTIONS-PROOF FRAME))
    ((CL:EQ TEST-VALUE-000 KWD-STRATEGIES-SCAN-PROPOSITIONS)
     (TRY-SCAN-PROPOSITIONS-PROOF FRAME))
    ((CL:EQ TEST-VALUE-000 KWD-STRATEGIES-SCAN-PARTIAL-PROPOSITIONS)
     (TRY-SCAN-PARTIAL-PROPOSITIONS-PROOF FRAME))
    ((CL:EQ TEST-VALUE-000 KWD-STRATEGIES-SCAN-COLLECTION)
     (TRY-SCAN-COLLECTION-PROOF FRAME))
    ((CL:EQ TEST-VALUE-000 KWD-STRATEGIES-SHALLOW-DISPROOF)
     (TRY-SHALLOW-DISPROOF FRAME))
    ((CL:EQ TEST-VALUE-000 KWD-STRATEGIES-SCAN-FOR-VALUE-CLASH)
     (TRY-SCAN-FOR-VALUE-CLASH-PROOF FRAME))
    ((CL:EQ TEST-VALUE-000 KWD-STRATEGIES-MANUFACTURE-SKOLEM)
     (TRY-MANUFACTURE-SKOLEM-PROOF FRAME))
    ((CL:EQ TEST-VALUE-000 KWD-STRATEGIES-ALL-SUBGOAL-STRATEGIES)
     (TRY-SUBGOAL-STRATEGIES-PROOF FRAME))
    ((CL:EQ TEST-VALUE-000 KWD-STRATEGIES-ANTECEDENTS)
     (CL:IF (CL:NOT (CL:EQ (%PARTIAL-MATCH-FRAME FRAME) NULL))
      (CONTINUE-PARTIAL-ANTECEDENTS-PROOF (%PARTIAL-MATCH-FRAME FRAME)
       KWD-STRATEGIES-DOWN)
      (CONTINUE-ANTECEDENTS-PROOF FRAME KWD-STRATEGIES-DOWN)))
    ((CL:EQ TEST-VALUE-000 KWD-STRATEGIES-FULL-SUBQUERY)
     (TRY-FULL-SUBQUERY-PROOF FRAME))
    ((CL:EQ TEST-VALUE-000 KWD-STRATEGIES-GOAL-COMPLEMENT)
     (TRY-GOAL-COMPLEMENT-PROOF FRAME))
    ((CL:EQ TEST-VALUE-000 KWD-STRATEGIES-CONDITIONAL-ANTECEDENT)
     (CONTINUE-CONDITIONAL-ANTECEDENT-PROOF FRAME KWD-STRATEGIES-DOWN))
    ((CL:EQ TEST-VALUE-000 KWD-STRATEGIES-FORWARD-GOALS)
     (TRY-FORWARD-GOALS-PROOF FRAME))
    ((CL:EQ TEST-VALUE-000 KWD-STRATEGIES-IMPLIES)
     (TRY-IMPLIES-PROOF FRAME))
    ((CL:EQ TEST-VALUE-000 KWD-STRATEGIES-CONTAINED-BY)
     (TRY-CONTAINED-BY-PROOF FRAME))
    ((CL:EQ TEST-VALUE-000 KWD-STRATEGIES-EQUIVALENCE)
     (TRY-EQUIVALENCE-PROOF FRAME))
    ((CL:EQ TEST-VALUE-000 KWD-STRATEGIES-CLUSTERED-CONJUNCTION)
     (CONTINUE-CLUSTERED-CONJUNCTION-PROOF FRAME KWD-STRATEGIES-DOWN))
    ((CL:EQ TEST-VALUE-000
      KWD-STRATEGIES-DISJUNCTIVE-IMPLICATION-INTRODUCTION)
     (TRY-DISJUNCTIVE-IMPLICATION-PROOF FRAME))
    ((CL:EQ TEST-VALUE-000 KWD-STRATEGIES-UNIVERSAL-INTRODUCTION)
     (TRY-UNIVERSAL-INTRODUCTION-PROOF FRAME))
    ((CL:EQ TEST-VALUE-000 KWD-STRATEGIES-SUBSUMPTION-TEST)
     (TRY-SUBSUMPTION-TEST FRAME))
    ((CL:EQ TEST-VALUE-000 KWD-STRATEGIES-REFUTATION)
     (TRY-REFUTATION-PROOF FRAME))
    ((CL:EQ TEST-VALUE-000 KWD-STRATEGIES-SELECT-PARALLEL-THREAD)
     (TRY-PARALLEL-THREAD-PROOF FRAME))
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" TEST-VALUE-000
       "' is not a valid case option")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))

;;; (DEFUN (CONTINUE-PARALLEL-STRATEGIES-PROOFS KEYWORD) ...)

(CL:DEFUN CONTINUE-PARALLEL-STRATEGIES-PROOFS (PFRAME LASTMOVE)
  (CL:COND
   ((CL:EQ LASTMOVE KWD-STRATEGIES-DOWN)
    (CL:WHEN (CL:NOT (CL:EQ (%DOWN PFRAME) NULL))
     (ENTER-PARALLEL-THREAD PFRAME NULL)
     (CL:RETURN-FROM CONTINUE-PARALLEL-STRATEGIES-PROOFS
      KWD-STRATEGIES-MOVE-DOWN))
    (CONTINUE-CURRENT-OR-NEXT-STRATEGY PFRAME))
   ((CL:EQ LASTMOVE KWD-STRATEGIES-UP-TRUE)
    (EXIT-PARALLEL-THREAD PFRAME)
    (CL:WHEN (%UNBOUND-VARIABLES? PFRAME))
    (PROPAGATE-FRAME-TRUTH-VALUE (%RESULT PFRAME) PFRAME)
    (CL:IF (CL:NOT (CL:EQ (%DOWN PFRAME) NULL))
     KWD-STRATEGIES-CONTINUING-SUCCESS KWD-STRATEGIES-FINAL-SUCCESS))
   ((CL:EQ LASTMOVE KWD-STRATEGIES-UP-FAIL)
    (EXIT-PARALLEL-THREAD PFRAME)
    (CL:WHEN (CL:NOT (CL:EQ (%NEXT-STRATEGIES PFRAME) NIL))
     (CL:SETF (%STATE PFRAME) KWD-STRATEGIES-STRATEGY)
     (CL:SETF (%CURRENT-STRATEGY PFRAME) NULL)
     (CL:RETURN-FROM CONTINUE-PARALLEL-STRATEGIES-PROOFS
      (CONTINUE-CURRENT-OR-NEXT-STRATEGY PFRAME)))
    (PROPAGATE-FRAME-TRUTH-VALUE (%RESULT PFRAME) PFRAME)
    KWD-STRATEGIES-FAILURE)
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" LASTMOVE
      "' is not a valid case option")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))

;;; (DEFGLOBAL *PARALLEL-STRATEGIES* ...)

(CL:DEFVAR *PARALLEL-STRATEGIES* NULL
  "List of strategies (keywords) that fork a parallel
control stack before executing.")

;;; (DEFUN (PARALLEL-STRATEGY? BOOLEAN) ...)

(CL:DEFUN PARALLEL-STRATEGY? (STRATEGY)
  (MEMBER? *PARALLEL-STRATEGIES* STRATEGY))

;;; (DEFUN (SELECT-NEXT-CHILD-THREAD PARALLEL-THREAD) ...)

(CL:DEFUN SELECT-NEXT-CHILD-THREAD (PFRAME)
  (FIRST (%CHILD-THREADS PFRAME)))

;;; (DEFUN (CREATE-CHILD-THREAD PARALLEL-THREAD) ...)

(CL:DEFUN CREATE-CHILD-THREAD (PFRAME)
  (CL:LET*
   ((STRATEGIES (%NEXT-STRATEGIES PFRAME))
    (CHILDTHREAD (NEW-PARALLEL-THREAD))
    (DOWNFRAME (CREATE-DOWN-FRAME PFRAME (%PROPOSITION PFRAME))))
   (CL:SETF (%STATE DOWNFRAME) KWD-STRATEGIES-STRATEGY)
   (CL:SETF (%CURRENT-STRATEGY DOWNFRAME) (%%VALUE STRATEGIES))
   (CL:SETF (%NEXT-STRATEGIES PFRAME) (%%REST STRATEGIES))
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ *QUERYITERATOR* NULL))
     (CL:NOT (CL:EQ (%PARTIAL-MATCH-STRATEGY *QUERYITERATOR*) NULL)))
    (CREATE-AND-LINK-PARTIAL-MATCH-FRAME DOWNFRAME
     KWD-STRATEGIES-STRATEGY))
   (CL:SETF (%TOP-CONTROL-FRAME CHILDTHREAD) DOWNFRAME)
   (INSERT (%CHILD-THREADS PFRAME) CHILDTHREAD) CHILDTHREAD))

;;; (DEFUN (TRY-PARALLEL-THREAD-PROOF KEYWORD) ...)

(CL:DEFUN TRY-PARALLEL-THREAD-PROOF (FRAME)
  (CL:LET* ((CHILDTHREAD (CREATE-CHILD-THREAD FRAME)))
   (ENTER-PARALLEL-THREAD FRAME CHILDTHREAD) KWD-STRATEGIES-MOVE-DOWN))

;;; (DEFUN PUSH-NEXT-STRATEGY ...)

(CL:DEFUN PUSH-NEXT-STRATEGY (FRAME STRATEGY)
  (CL:SETF (%NEXT-STRATEGIES FRAME)
   (CONS STRATEGY (%NEXT-STRATEGIES FRAME))))

;;; (DEFUN (CREATE-SUBGOAL-FRAME CONTROL-FRAME) ...)

(CL:DEFUN CREATE-SUBGOAL-FRAME (UPFRAME GOAL STRATEGY)
  (CL:LET* ((DOWNFRAME (CREATE-DOWN-FRAME UPFRAME GOAL)))
   (CL:WHEN (CL:NOT (CL:EQ STRATEGY NULL))
    (CL:IF
     (CL:AND (CL:NOT (CL:EQ GOAL NULL))
      (CL:NOT (CL:EQ GOAL (%PROPOSITION UPFRAME))))
     (CL:SETF (%STATE DOWNFRAME) KWD-STRATEGIES-ATOMIC-GOAL)
     (CL:SETF (%STATE DOWNFRAME) KWD-STRATEGIES-STRATEGY))
    (CL:SETF (%CURRENT-STRATEGY DOWNFRAME) STRATEGY))
   (CL:SETF (%REVERSE-POLARITY? DOWNFRAME)
    (%REVERSE-POLARITY? UPFRAME))
   DOWNFRAME))

;;; (DEFUN (CONTINUE-SPECIALIST-PROOF KEYWORD) ...)

(CL:DEFUN CONTINUE-SPECIALIST-PROOF (FRAME LASTMOVE)
  (CL:LET*
   ((PROPOSITION (%PROPOSITION FRAME))
    (DESCRIPTION (GET-DESCRIPTION (%OPERATOR PROPOSITION)))
    (SPECIALISTCODE (LOOKUP-SPECIALIST DESCRIPTION))
    (RESULT
     (CL:IF (CL:NOT (CL:EQ SPECIALISTCODE NULL))
      (CL:FUNCALL SPECIALISTCODE FRAME LASTMOVE)
      KWD-STRATEGIES-FAILURE)))
   (CL:WHEN (CL:EQ (%TRUTH-VALUE FRAME) NULL)
    (CL:COND
     ((CL:OR (CL:EQ RESULT KWD-STRATEGIES-FINAL-SUCCESS)
       (CL:EQ RESULT KWD-STRATEGIES-CONTINUING-SUCCESS))
      (SET-FRAME-TRUTH-VALUE FRAME TRUE-TRUTH-VALUE))
     (CL:T)))
   RESULT))

;;; (DEFGLOBAL *FAILED-GOAL-CUTOFFS* ...)

(CL:DEFVAR *FAILED-GOAL-CUTOFFS* 0)
(CL:DECLAIM (CL:TYPE CL:FIXNUM *FAILED-GOAL-CUTOFFS*))

;;; (DEFGLOBAL *SUCCEEDED-GOAL-CUTOFFS* ...)

(CL:DEFVAR *SUCCEEDED-GOAL-CUTOFFS* 0)
(CL:DECLAIM (CL:TYPE CL:FIXNUM *SUCCEEDED-GOAL-CUTOFFS*))

;;; (DEFUN (LOOKUP-CACHED-PROOF KEYWORD) ...)

(CL:DEFUN LOOKUP-CACHED-PROOF (FRAME)
  (CL:WHEN
   (CL:OR
    (CL:NOT
     (%WRAPPER-VALUE
      (DYNAMIC-SLOT-VALUE
       (%DYNAMIC-SLOTS
        (SURROGATE-TO-DESCRIPTION (%OPERATOR (%PROPOSITION FRAME))))
       SYM-STRATEGIES-LOGIC-CHECK-FOR-CACHED-GOALS? FALSE-WRAPPER)))
    (CL:NOT
     (CL:AND (CL:OR *CACHE-SUCCEEDED-GOALS?* *CACHE-FAILED-GOALS?*)
      (CL:EQ *DUPLICATE-SUBGOAL-STRATEGY*
       KWD-STRATEGIES-DUPLICATE-GOALS)
      (CL:NOT
       (CL:AND (CL:NOT (CL:EQ *QUERYITERATOR* NULL))
        (CL:NOT
         (CL:EQ (%PARTIAL-MATCH-STRATEGY *QUERYITERATOR*) NULL)))))))
   (CL:RETURN-FROM LOOKUP-CACHED-PROOF KWD-STRATEGIES-FAILURE))
  (CL:LET*
   ((SUCCESSORFAILURE KWD-STRATEGIES-FAILURE)
    (CACHEDGOAL (FIND-CACHED-GOAL FRAME SUCCESSORFAILURE)))
   (CL:WHEN (CL:EQ CACHEDGOAL NULL)
    (CL:SETQ SUCCESSORFAILURE KWD-STRATEGIES-SUCCESS)
    (CL:SETQ CACHEDGOAL (FIND-CACHED-GOAL FRAME SUCCESSORFAILURE)))
   (CL:IF
    (CL:AND (CL:NOT (CL:EQ CACHEDGOAL NULL))
     (CL:OR (CL:NOT *DONTUSEDEFAULTKNOWLEDGE?*)
      (CL:OR (CL:EQ (%TRUTH-VALUE CACHEDGOAL) TRUE-TRUTH-VALUE)
       (CL:EQ (%TRUTH-VALUE CACHEDGOAL) FALSE-TRUTH-VALUE))))
    (FINISH-CACHED-GOAL-PROCESSING CACHEDGOAL FRAME SUCCESSORFAILURE
     CL:NIL)
    KWD-STRATEGIES-FAILURE)))

;;; (DEFUN (SCAN-CACHED-GOALS KEYWORD) ...)

(CL:DEFUN SCAN-CACHED-GOALS (FRAME)
  (CL:LET*
   ((PROPOSITION (%PROPOSITION FRAME))
    (ITERATOR
     (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
      SYM-STRATEGIES-STELLA-ITERATOR NULL))
    (CACHEDGOAL NULL)
    (PATTERNRECORD (%CURRENT-PATTERN-RECORD *QUERYITERATOR*))
    (UBSTACKOFFSET (%TOP-UNBINDING-STACK-OFFSET PATTERNRECORD)))
   (CL:DECLARE (CL:TYPE CL:FIXNUM UBSTACKOFFSET))
   (CL:WHEN
    (CL:NOT
     (%WRAPPER-VALUE
      (DYNAMIC-SLOT-VALUE
       (%DYNAMIC-SLOTS
        (SURROGATE-TO-DESCRIPTION (%OPERATOR PROPOSITION)))
       SYM-STRATEGIES-LOGIC-CHECK-FOR-CACHED-GOALS? FALSE-WRAPPER)))
    (CL:RETURN-FROM SCAN-CACHED-GOALS KWD-STRATEGIES-FAILURE))
   (CL:WHEN (CL:EQ ITERATOR NULL)
    (CL:SETQ ITERATOR
     (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
      SYM-STRATEGIES-STELLA-ITERATOR (ALL-CACHED-PROPOSITIONS FRAME)
      NULL)))
   (CL:LOOP WHILE (NEXT? ITERATOR) DO
    (CL:SETQ CACHEDGOAL (%VALUE ITERATOR))
    (CL:LET* ((ALWAYS?-000 CL:T))
     (CL:LET*
      ((ARG NULL) (VECTOR-000 (%ARGUMENTS PROPOSITION)) (INDEX-000 0)
       (LENGTH-000 (LENGTH VECTOR-000)) (CACHEDBINDING NULL)
       (ITER-000 (%BINDINGS CACHEDGOAL)))
      (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
      (CL:LOOP WHILE
       (CL:AND (CL:< INDEX-000 LENGTH-000)
        (CL:NOT (CL:EQ ITER-000 NIL)))
       DO
       (CL:SETQ ARG
        (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-000))
         INDEX-000))
       (CL:SETQ CACHEDBINDING (%%VALUE ITER-000))
       (CL:WHEN
        (CL:NOT (BIND-ARGUMENT-TO-VALUE? ARG CACHEDBINDING CL:T))
        (CL:SETQ ALWAYS?-000 CL:NIL) (CL:RETURN))
       (CL:SETQ INDEX-000 (CL:1+ INDEX-000))
       (CL:SETQ ITER-000 (%%REST ITER-000))))
     (CL:WHEN ALWAYS?-000
      (CL:RETURN-FROM SCAN-CACHED-GOALS
       (FINISH-CACHED-GOAL-PROCESSING CACHEDGOAL FRAME
        KWD-STRATEGIES-SUCCESS CL:T))))
    (UNBIND-VARIABLES-BEGINNING-AT PATTERNRECORD
     (CL:1+ UBSTACKOFFSET)))
   KWD-STRATEGIES-FAILURE))

;;; (DEFUN (FINISH-CACHED-GOAL-PROCESSING KEYWORD) ...)

(CL:DEFUN FINISH-CACHED-GOAL-PROCESSING (CACHEDGOAL FRAME SUCCESSORFAILURE CONTINUING?)
  (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS *QUERYITERATOR*)
   SYM-STRATEGIES-LOGIC-LATEST-POSITIVE-SCORE
   (WRAP-FLOAT (%POSITIVE-SCORE CACHEDGOAL)) NULL-FLOAT-WRAPPER)
  (CL:SETF (%TRUTH-VALUE FRAME) (%TRUTH-VALUE CACHEDGOAL))
  (CL:WHEN (CL:NOT (CL:EQ (%PARTIAL-MATCH-FRAME FRAME) NULL))
   (SET-FRAME-PARTIAL-TRUTH (%PARTIAL-MATCH-FRAME FRAME)
    (%TRUTH-VALUE CACHEDGOAL) (%POSITIVE-SCORE CACHEDGOAL) NULL-FLOAT
    CL:T))
  (CL:WHEN
   (CL:AND *RECORD-JUSTIFICATIONS?*
    (CL:NOT (CL:EQ (%JUSTIFICATION CACHEDGOAL) NULL)))
   (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
    SYM-STRATEGIES-LOGIC-JUSTIFICATION
    (COPY (%JUSTIFICATION CACHEDGOAL)) NULL))
  (CL:WHEN (CL:AND (TRACE-KEYWORD? KWD-STRATEGIES-GOAL-CACHES) CL:T)
   (CL:LET*
    ((*PRINTINFRAME* FRAME) (*PRETTYPRINTLOGICALFORMS?* CL:NIL))
    (CL:DECLARE (CL:SPECIAL *PRINTINFRAME* *PRETTYPRINTLOGICALFORMS?*))
    (CL:COND
     ((CL:EQ SUCCESSORFAILURE KWD-STRATEGIES-SUCCESS)
      (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT)
       "USED CACHED SUCCESS+: "))
     ((CL:EQ SUCCESSORFAILURE KWD-STRATEGIES-FAILURE)
      (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT)
       "USED CACHED FAILURE-: "))
     (CL:T
      (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" SUCCESSORFAILURE
        "' is not a valid case option")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
    (CL:WHEN
     (CL:OR (CL:EQ (%TRUTH-VALUE FRAME) DEFAULT-TRUE-TRUTH-VALUE)
      (CL:EQ (%TRUTH-VALUE FRAME) DEFAULT-FALSE-TRUTH-VALUE))
     (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) "dflt"))
    (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT)
     (CL:IF (%REVERSE-POLARITY? CACHEDGOAL) "~" " ")
     (%PROPOSITION FRAME) EOL)))
  (CL:COND
   ((CL:EQ SUCCESSORFAILURE KWD-STRATEGIES-SUCCESS)
    (CL:SETQ *SUCCEEDED-GOAL-CUTOFFS* (CL:1+ *SUCCEEDED-GOAL-CUTOFFS*))
    (CL:IF CONTINUING? KWD-STRATEGIES-CONTINUING-SUCCESS
     KWD-STRATEGIES-FINAL-SUCCESS))
   ((CL:EQ SUCCESSORFAILURE KWD-STRATEGIES-FAILURE)
    (CL:SETQ *FAILED-GOAL-CUTOFFS* (CL:1+ *FAILED-GOAL-CUTOFFS*))
    (CL:WHEN (CL:NOT (CL:EQ (%DOWN FRAME) NULL))
     (POP-FRAMES-UP-TO (%DOWN FRAME)))
    KWD-STRATEGIES-TERMINAL-FAILURE)
   (CL:T
    (CL:LET* ((STREAM-001 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%NATIVE-STREAM STREAM-001) "`" SUCCESSORFAILURE
      "' is not a valid case option")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-001)))))))

;;; (DEFUN (TRY-GOAL-CACHES-PROOF KEYWORD) ...)

(CL:DEFUN TRY-GOAL-CACHES-PROOF (FRAME)
  (CL:WHEN
   (CL:EQ
    (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
     SYM-STRATEGIES-STELLA-ITERATOR NULL)
    NULL)
   (CL:LET*
    ((PROPOSITION (%PROPOSITION FRAME))
     (CACHEDRESULT (LOOKUP-CACHED-PROOF FRAME)))
    (CL:WHEN (CL:NOT (CL:EQ CACHEDRESULT KWD-STRATEGIES-FAILURE))
     (CL:RETURN-FROM TRY-GOAL-CACHES-PROOF CACHEDRESULT))
    (CL:WHEN
     (CL:OR (ALL-ARGUMENTS-BOUND? PROPOSITION)
      (CL:NOT
       (CL:AND (CL:OR *CACHE-SUCCEEDED-GOALS?* *CACHE-FAILED-GOALS?*)
        (CL:EQ *DUPLICATE-SUBGOAL-STRATEGY*
         KWD-STRATEGIES-DUPLICATE-GOALS)
        (CL:NOT
         (CL:AND (CL:NOT (CL:EQ *QUERYITERATOR* NULL))
          (CL:NOT
           (CL:EQ (%PARTIAL-MATCH-STRATEGY *QUERYITERATOR*) NULL))))))
      (CL:EQ (GET-GOAL-CACHE-LIST PROPOSITION) NULL))
     (CL:RETURN-FROM TRY-GOAL-CACHES-PROOF KWD-STRATEGIES-FAILURE))))
  (SCAN-CACHED-GOALS FRAME))

;;; (DEFUN (TRY-LOOKUP-GROUND-ASSERTIONS-PROOF KEYWORD) ...)

(CL:DEFUN TRY-LOOKUP-GROUND-ASSERTIONS-PROOF (FRAME)
  (CL:COND
   ((CL:EQ (%KIND (%PROPOSITION FRAME)) KWD-STRATEGIES-ISA)
    (CL:WHEN *REVERSEPOLARITY?*
     (CL:RETURN-FROM TRY-LOOKUP-GROUND-ASSERTIONS-PROOF
      (TRY-SCAN-PROPOSITIONS-PROOF FRAME)))
    (TRY-ISA-PROPOSITION-PROOF FRAME))
   (CL:T (TRY-SCAN-PROPOSITIONS-PROOF FRAME))))

;;; (DEFUN (TRY-SCAN-PROPOSITIONS-PROOF KEYWORD) ...)

(CL:DEFUN TRY-SCAN-PROPOSITIONS-PROOF (FRAME)
  (CL:LET*
   ((PROPOSITION (%PROPOSITION FRAME)) (ALLKEYARGUMENTSBOUND? CL:NIL)
    (ITERATOR
     (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
      SYM-STRATEGIES-STELLA-ITERATOR NULL))
    (RESULT KWD-STRATEGIES-FAILURE))
   (CL:WHEN (CL:EQ ITERATOR NULL)
    (CL:SETQ ALLKEYARGUMENTSBOUND?
     (CL:OR (ALL-ARGUMENTS-BOUND? PROPOSITION)
      (ALL-KEY-ARGUMENTS-BOUND? PROPOSITION)))
    (CL:SETQ ITERATOR (ALL-MATCHING-PROPOSITIONS PROPOSITION))
    (CL:IF (CL:EQ ITERATOR EMPTY-PROPOSITIONS-ITERATOR)
     (CL:SETQ ITERATOR NULL)
     (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
      SYM-STRATEGIES-STELLA-ITERATOR ITERATOR NULL))
    (CL:WHEN
     (CL:AND
      (CL:AND (CL:NOT (CL:EQ *QUERYITERATOR* NULL))
       (CL:NOT (CL:EQ (%PARTIAL-MATCH-STRATEGY *QUERYITERATOR*) NULL)))
      (CL:EQ (%CURRENT-STRATEGY FRAME)
       KWD-STRATEGIES-LOOKUP-ASSERTIONS)
      (CL:> (LENGTH (%ARGUMENTS PROPOSITION)) 1)
      (NULL-INSTANCE-PROPOSITIONS-EXIST?))
     (PUSH-NEXT-STRATEGY FRAME
      KWD-STRATEGIES-SCAN-PARTIAL-PROPOSITIONS)))
   (CL:WHEN (CL:NOT (CL:EQ ITERATOR NULL))
    (CL:LOOP WHILE (NEXT? ITERATOR) DO
     (CL:WHEN
      (ARGUMENTS-UNIFY-WITH-ARGUMENTS? (%VALUE ITERATOR) PROPOSITION)
      (CL:COND
       ((CL:AND ALLKEYARGUMENTSBOUND?
         (CL:OR (CL:NOT *GENERATE-ALL-PROOFS?*)
          (CL:AND
           (CL:AND (CL:NOT (CL:EQ *QUERYITERATOR* NULL))
            (CL:NOT
             (CL:EQ (%PARTIAL-MATCH-STRATEGY *QUERYITERATOR*) NULL)))
           (ISA? (%PARTIAL-MATCH-STRATEGY *QUERYITERATOR*)
            SGT-STRATEGIES-LOGIC-WHYNOT-PARTIAL-MATCH))))
        (CL:SETQ RESULT KWD-STRATEGIES-FINAL-SUCCESS) (CL:RETURN))
       (CL:T (CL:SETQ RESULT KWD-STRATEGIES-CONTINUING-SUCCESS)
        (CL:RETURN))))))
   (CL:WHEN
    (CL:AND (CL:EQ RESULT KWD-STRATEGIES-FAILURE)
     (%REVERSE-POLARITY? FRAME)
     (CL:NOT
      (CL:EQ (%CURRENT-STRATEGY FRAME)
       KWD-STRATEGIES-SHALLOW-DISPROOF))
     (CL:OR (CL:EQ (%KIND PROPOSITION) KWD-STRATEGIES-FUNCTION)
      (SINGLE-VALUED-PREDICATE? PROPOSITION))
     (ALL-ARGUMENTS-BOUND? PROPOSITION))
    (PUSH-NEXT-STRATEGY FRAME KWD-STRATEGIES-SCAN-FOR-VALUE-CLASH))
   (CL:WHEN (CL:NOT (CL:EQ RESULT KWD-STRATEGIES-FAILURE))
    (CL:LET*
     ((TRUTHVALUE (PROPOSITIONS-ITERATOR-TRUTH-VALUE ITERATOR))
      (WEIGHT
       (%WRAPPER-VALUE
        (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS (%VALUE ITERATOR))
         SYM-STRATEGIES-LOGIC-WEIGHT NULL-FLOAT-WRAPPER))))
     (CL:DECLARE (CL:TYPE CL:DOUBLE-FLOAT WEIGHT))
     (CL:WHEN
      (CL:OR (CL:EQ TRUTHVALUE DEFAULT-TRUE-TRUTH-VALUE)
       (CL:EQ TRUTHVALUE DEFAULT-FALSE-TRUTH-VALUE))
      (CL:LET* ((*DONTUSEDEFAULTKNOWLEDGE?* CL:T))
       (CL:DECLARE (CL:SPECIAL *DONTUSEDEFAULTKNOWLEDGE?*))
       (CL:SETQ ITERATOR (ALL-MATCHING-PROPOSITIONS PROPOSITION))
       (CL:WHEN (NEXT? ITERATOR)
        (CL:SETQ TRUTHVALUE
         (PROPOSITIONS-ITERATOR-TRUTH-VALUE ITERATOR))
        (CL:SETQ WEIGHT
         (%WRAPPER-VALUE
          (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS (%VALUE ITERATOR))
           SYM-STRATEGIES-LOGIC-WEIGHT NULL-FLOAT-WRAPPER))))))
     (CL:SETF (%TRUTH-VALUE FRAME) TRUTHVALUE)
     (CL:WHEN (CL:NOT (CL:EQ (%PARTIAL-MATCH-FRAME FRAME) NULL))
      (CL:WHEN (CL:= WEIGHT NULL-FLOAT) (CL:SETQ WEIGHT 1.0d0))
      (SET-FRAME-PARTIAL-TRUTH (%PARTIAL-MATCH-FRAME FRAME) TRUTHVALUE
       (CL:* (%POSITIVE-SCORE TRUTHVALUE) WEIGHT) NULL-FLOAT CL:T))))
   RESULT))

;;; (DEFUN (HAS-SHALLOW-DISPROOF? BOOLEAN) ...)

(CL:DEFUN HAS-SHALLOW-DISPROOF? (FRAME)
  (CL:LET*
   ((ITERATOR
     (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
      SYM-STRATEGIES-STELLA-ITERATOR NULL))
    (PROPOSITION (%PROPOSITION FRAME))
    (TRUTHVALUE (%TRUTH-VALUE FRAME)) (HASDISPROOF? CL:NIL))
   (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
    SYM-STRATEGIES-STELLA-ITERATOR NULL NULL)
   (CL:LET* ((*REVERSEPOLARITY?* (CL:NOT (%REVERSE-POLARITY? FRAME))))
    (CL:DECLARE (CL:SPECIAL *REVERSEPOLARITY?*))
    (CL:SETF (%REVERSE-POLARITY? FRAME) *REVERSEPOLARITY?*)
    (SET-FRAME-TRUTH-VALUE FRAME NULL)
    (CL:WHEN
     (CL:AND
      (CL:AND
       (CL:AND (CL:NOT (CL:EQ *QUERYITERATOR* NULL))
        (CL:NOT
         (CL:EQ (%PARTIAL-MATCH-STRATEGY *QUERYITERATOR*) NULL)))
       (ISA? (%PARTIAL-MATCH-STRATEGY *QUERYITERATOR*)
        SGT-STRATEGIES-LOGIC-WHYNOT-PARTIAL-MATCH))
      (CL:EQ (%KIND PROPOSITION) KWD-STRATEGIES-ISA))
     (CL:COND
      ((CL:NOT *REVERSEPOLARITY?*)
       (CL:SETQ HASDISPROOF?
        (CL:EQ (TRY-ISA-PROPOSITION-PROOF FRAME)
         KWD-STRATEGIES-FINAL-SUCCESS)))
      (CL:T
       (CL:LET*
        ((QUERIEDTYPE (GET-DESCRIPTION (%OPERATOR PROPOSITION)))
         (INSTANCE
          (ARGUMENT-BOUND-TO
           (CL:AREF
            (CL:THE CL:SIMPLE-VECTOR
             (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
            0)))
         (ASSERTEDTYPES NIL))
        (CL:WHEN (CL:NOT (CL:EQ INSTANCE NULL))
         (CL:LET* ((*REVERSEPOLARITY?* CL:NIL))
          (CL:DECLARE (CL:SPECIAL *REVERSEPOLARITY?*))
          (CL:SETQ ASSERTEDTYPES (ALL-ASSERTED-TYPES INSTANCE)))
         (CL:LET* ((TYPE NULL) (ITER-000 ASSERTEDTYPES))
          (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
           (CL:SETQ TYPE (%%VALUE ITER-000))
           (CL:WHEN (DISJOINT-TERMS? TYPE QUERIEDTYPE)
            (CL:SETQ HASDISPROOF? CL:T)
            (SET-FRAME-TRUTH-VALUE FRAME TRUE-TRUTH-VALUE) (CL:RETURN))
           (CL:SETQ ITER-000 (%%REST ITER-000)))))))))
    (CL:WHEN (CL:NOT HASDISPROOF?)
     (CL:SETQ HASDISPROOF?
      (CL:EQ (TRY-SCAN-PROPOSITIONS-PROOF FRAME)
       KWD-STRATEGIES-FINAL-SUCCESS)))
    (CL:WHEN
     (CL:AND (CL:NOT HASDISPROOF?) *REVERSEPOLARITY?*
      (CL:OR
       (CL:EQ (%KIND (%PROPOSITION FRAME)) KWD-STRATEGIES-FUNCTION)
       (SINGLE-VALUED-PREDICATE? (%PROPOSITION FRAME))))
     (CL:SETQ HASDISPROOF?
      (CL:EQ (TRY-SCAN-FOR-VALUE-CLASH-PROOF FRAME)
       KWD-STRATEGIES-FINAL-SUCCESS)))
    (CL:SETF (%REVERSE-POLARITY? FRAME)
     (CL:NOT (%REVERSE-POLARITY? FRAME))))
   (CL:WHEN (CL:NOT HASDISPROOF?)
    (CL:SETF (%TRUTH-VALUE FRAME) TRUTHVALUE))
   (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
    SYM-STRATEGIES-STELLA-ITERATOR ITERATOR NULL)
   HASDISPROOF?))

;;; (DEFUN (TRY-SHALLOW-DISPROOF KEYWORD) ...)

(CL:DEFUN TRY-SHALLOW-DISPROOF (FRAME)
  (CL:LET* ((PROPOSITION (%PROPOSITION FRAME)))
   (CL:COND
    ((CL:NOT (ALL-ARGUMENTS-BOUND? PROPOSITION))
     (CL:RETURN-FROM TRY-SHALLOW-DISPROOF KWD-STRATEGIES-FAILURE))
    ((HAS-SHALLOW-DISPROOF? FRAME)
     (CL:LET*
      ((HASDEFAULTDISPROOF?
        (CL:OR (CL:EQ (%TRUTH-VALUE FRAME) DEFAULT-TRUE-TRUTH-VALUE)
         (CL:EQ (%TRUTH-VALUE FRAME) DEFAULT-FALSE-TRUTH-VALUE))))
      (CL:WHEN HASDEFAULTDISPROOF? (SET-FRAME-TRUTH-VALUE FRAME NULL))
      (CL:RETURN-FROM TRY-SHALLOW-DISPROOF
       (CL:IF HASDEFAULTDISPROOF? KWD-STRATEGIES-FAILURE
        KWD-STRATEGIES-TERMINAL-FAILURE)))))
   KWD-STRATEGIES-FAILURE))

;;; (DEFUN (TRY-SCAN-FOR-VALUE-CLASH-PROOF KEYWORD) ...)

(CL:DEFUN TRY-SCAN-FOR-VALUE-CLASH-PROOF (FRAME)
  (CL:LET*
   ((*REVERSEPOLARITY?* CL:NIL)
    (*DONTUSEDEFAULTKNOWLEDGE?* *DONTUSEDEFAULTKNOWLEDGE?*))
   (CL:DECLARE
    (CL:SPECIAL *REVERSEPOLARITY?* *DONTUSEDEFAULTKNOWLEDGE?*))
   (CL:LET*
    ((PROPOSITION (%PROPOSITION FRAME))
     (CLASHITERATOR (ALL-CLASHING-PROPOSITIONS PROPOSITION))
     (TRUTHVALUE
      (CL:IF (NEXT? CLASHITERATOR)
       (PROPOSITIONS-ITERATOR-TRUTH-VALUE CLASHITERATOR) NULL)))
    (CL:WHEN
     (CL:OR (CL:EQ TRUTHVALUE DEFAULT-TRUE-TRUTH-VALUE)
      (CL:EQ TRUTHVALUE DEFAULT-FALSE-TRUTH-VALUE))
     (CL:SETQ *DONTUSEDEFAULTKNOWLEDGE?* CL:T)
     (CL:SETQ CLASHITERATOR (ALL-CLASHING-PROPOSITIONS PROPOSITION))
     (CL:WHEN (NEXT? CLASHITERATOR)
      (CL:SETQ TRUTHVALUE
       (PROPOSITIONS-ITERATOR-TRUTH-VALUE CLASHITERATOR))))
    (CL:SETF (%TRUTH-VALUE FRAME) (INVERT-TRUTH-VALUE TRUTHVALUE))
    (CL:IF (CL:NOT (CL:EQ TRUTHVALUE NULL))
     KWD-STRATEGIES-FINAL-SUCCESS KWD-STRATEGIES-FAILURE))))

;;; (DEFUN (TRY-MANUFACTURE-SKOLEM-PROOF KEYWORD) ...)

(CL:DEFUN TRY-MANUFACTURE-SKOLEM-PROOF (FRAME)
  (CL:LET*
   ((PROPOSITION (%PROPOSITION FRAME))
    (DESCRIPTION (GET-DESCRIPTION (%OPERATOR PROPOSITION)))
    (ARGUMENTVALUES NIL))
   (CL:WHEN
    (CL:OR
     (CL:NOT
      (TEST-PROPERTY? DESCRIPTION SGT-STRATEGIES-PL-KERNEL-KB-TOTAL))
     (%REVERSE-POLARITY? FRAME))
    (CL:RETURN-FROM TRY-MANUFACTURE-SKOLEM-PROOF
     KWD-STRATEGIES-FAILURE))
   (CL:LET*
    ((ARG NULL) (VECTOR-000 (%ARGUMENTS PROPOSITION)) (INDEX-000 0)
     (LENGTH-000 (LENGTH VECTOR-000)))
    (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
    (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
     (CL:SETQ ARG
      (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-000))
       INDEX-000))
     (CL:SETQ ARGUMENTVALUES
      (CONS (ARGUMENT-BOUND-TO ARG) ARGUMENTVALUES))
     (CL:SETQ INDEX-000 (CL:1+ INDEX-000))))
   (CL:LET* ((TEST-VALUE-000 CL:NIL))
    (CL:IF (CL:NOT (CL:EQ (%%VALUE ARGUMENTVALUES) NULL))
     (CL:SETQ TEST-VALUE-000 CL:T)
     (CL:LET* ((FOUND?-000 CL:NIL))
      (CL:LET* ((VALUE NULL) (ITER-000 (%%REST ARGUMENTVALUES)))
       (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
        (CL:SETQ VALUE (%%VALUE ITER-000))
        (CL:WHEN (CL:EQ VALUE NULL) (CL:SETQ FOUND?-000 CL:T)
         (CL:RETURN))
        (CL:SETQ ITER-000 (%%REST ITER-000))))
      (CL:SETQ TEST-VALUE-000 FOUND?-000)))
    (CL:WHEN TEST-VALUE-000
     (CL:RETURN-FROM TRY-MANUFACTURE-SKOLEM-PROOF
      KWD-STRATEGIES-FAILURE)))
   (CL:LET*
    ((INPUTVALUES (REVERSE (%%REST ARGUMENTVALUES)))
     (DEFININGPROPOSITION
      (CREATE-FUNCTION-PROPOSITION (%OPERATOR PROPOSITION)
       INPUTVALUES)))
    (BIND-VARIABLE-TO-VALUE?
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
      (CL:THE CL:FIXNUM (CL:1- (LENGTH (%ARGUMENTS PROPOSITION)))))
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR
       (%THE-ARRAY (%ARGUMENTS DEFININGPROPOSITION)))
      (CL:THE CL:FIXNUM
       (CL:1- (LENGTH (%ARGUMENTS DEFININGPROPOSITION)))))
     CL:T)
    KWD-STRATEGIES-FINAL-SUCCESS)))

;;; (DEFUN (EXTRACT-SUBGOAL-OF-FRAME PROPOSITION) ...)

(CL:DEFUN EXTRACT-SUBGOAL-OF-FRAME (FRAME)
  (CL:LOOP WHILE
   (CL:NOT (CL:EQ (%STATE FRAME) KWD-STRATEGIES-ATOMIC-GOAL)) DO
   (CL:SETQ FRAME (%UP FRAME)))
  (%PROPOSITION FRAME))

;;; (DEFUN (EXTRACT-SUBGOAL-DESCRIPTION-OF-FRAME DESCRIPTION) ...)

(CL:DEFUN EXTRACT-SUBGOAL-DESCRIPTION-OF-FRAME (FRAME)
  (CL:WHEN
   (CL:NOT
    (CL:EQ
     (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
      SYM-STRATEGIES-LOGIC-DESCRIPTION NULL)
     NULL))
   (CL:RETURN-FROM EXTRACT-SUBGOAL-DESCRIPTION-OF-FRAME
    (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
     SYM-STRATEGIES-LOGIC-DESCRIPTION NULL)))
  (CL:LOOP WHILE
   (CL:NOT (CL:EQ (%STATE FRAME) KWD-STRATEGIES-ATOMIC-GOAL)) DO
   (CL:SETQ FRAME (%UP FRAME)))
  (GET-DESCRIPTION (%OPERATOR (%PROPOSITION FRAME))))

;;; (DEFUN (FIND-EXTERNAL-ARGUMENTS-FOR-SUBGOAL ARGUMENTS-VECTOR) ...)

(CL:DEFUN FIND-EXTERNAL-ARGUMENTS-FOR-SUBGOAL (FRAME)
  (CL:LOOP WHILE
   (CL:NOT (CL:EQ (%STATE FRAME) KWD-STRATEGIES-ATOMIC-GOAL)) DO
   (CL:SETQ FRAME (%UP FRAME)))
  (CL:LET*
   ((PROPOSITION (%PROPOSITION FRAME))
    (EXTERNALARGUMENTS (%ARGUMENTS (%PROPOSITION FRAME))))
   (CL:WHEN
    (CL:AND
     (CL:EQ (%OPERATOR PROPOSITION)
      SGT-STRATEGIES-PL-KERNEL-KB-MEMBER-OF)
     (CL:NOT
      (CL:EQ
       (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
        SYM-STRATEGIES-LOGIC-DESCRIPTION NULL)
       NULL))
     (CL:>
      (ARITY
       (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
        SYM-STRATEGIES-LOGIC-DESCRIPTION NULL))
      1)
     (ISA?
      (CL:AREF
       (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
       0)
      SGT-STRATEGIES-STELLA-LIST))
    (CL:SETQ EXTERNALARGUMENTS
     (COPY-LIST-TO-ARGUMENTS-VECTOR
      (CL:AREF
       (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
       0))))
   EXTERNALARGUMENTS))

;;; (DEFUN (TRY-SUBGOAL-STRATEGIES-PROOF KEYWORD) ...)

(CL:DEFUN TRY-SUBGOAL-STRATEGIES-PROOF (FRAME)
  (CL:LET*
   ((DESCRIPTION (EXTRACT-SUBGOAL-DESCRIPTION-OF-FRAME FRAME))
    (REVERSEPOLARITY? (%REVERSE-POLARITY? FRAME)) (STRATEGIES NIL))
   (CL:LET* ((CHOOSE-VALUE-000 CL:NIL))
    (CL:IF REVERSEPOLARITY?
     (CL:LET* ((FOUND?-000 CL:NIL))
      (CL:LET*
       ((P
         (ALLOCATE-ITERATOR
          (APPLICABLE-RULES-OF-DESCRIPTION DESCRIPTION
           KWD-STRATEGIES-FORWARD CL:T))))
       (CL:LOOP WHILE (NEXT? P) DO (CL:SETQ FOUND?-000 CL:T)
        (CL:RETURN)))
      (CL:SETQ CHOOSE-VALUE-000 FOUND?-000))
     (CL:SETQ CHOOSE-VALUE-000 (INFERABLE? DESCRIPTION)))
    (CL:WHEN CHOOSE-VALUE-000
     (CL:SETQ STRATEGIES
      (CONS KWD-STRATEGIES-ANTECEDENTS STRATEGIES))))
   (CL:WHEN
    (CL:AND REVERSEPOLARITY?
     (CL:NOT
      (CL:EQ (GET-INFERABLE-COMPLEMENT-DESCRIPTION DESCRIPTION) NULL)))
    (CL:SETQ STRATEGIES
     (CONS KWD-STRATEGIES-GOAL-COMPLEMENT STRATEGIES)))
   (CL:LET* ((PROPOSITION (%PROPOSITION FRAME)))
    (CL:WHEN
     (CL:AND (CL:NOT (CL:EQ PROPOSITION NULL))
      (ALL-ARGUMENTS-BOUND? PROPOSITION)
      (CL:NOT
       (CL:EQ (FIND-MATCHING-CONCEIVED-PROPOSITION PROPOSITION) NULL)))
     (CL:SETQ STRATEGIES
      (CONS KWD-STRATEGIES-FORWARD-GOALS STRATEGIES))))
   (CL:LET* ((S NULL) (ITER-000 (REVERSE STRATEGIES)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ S (%%VALUE ITER-000)) (PUSH-NEXT-STRATEGY FRAME S)
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   KWD-STRATEGIES-FAILURE))

;;; (DEFUN ESTABLISH-GOAL-CACHE ...)

(CL:DEFUN ESTABLISH-GOAL-CACHE (FRAME)
  (CL:LET*
   ((GOALFRAME NULL) (RESTARTFRAME NULL) (RESTARTDEPTH NULL-INTEGER))
   (CL:DECLARE (CL:TYPE CL:FIXNUM RESTARTDEPTH))
   (CL:MULTIPLE-VALUE-SETQ (GOALFRAME RESTARTFRAME RESTARTDEPTH)
    (FIND-DUPLICATED-GOAL FRAME))
   (CL:PROGN (CL:SETQ RESTARTFRAME RESTARTFRAME)
    (CL:SETQ RESTARTDEPTH RESTARTDEPTH))
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ GOALFRAME NULL))
     (CL:EQ (FIND-GOAL-CACHE GOALFRAME) NULL))
    (CREATE-GOAL-CACHE? GOALFRAME))))

;;; (DEFUN (CHECK-FOR-DUPLICATE-RULE? BOOLEAN) ...)

(CL:DEFUN CHECK-FOR-DUPLICATE-RULE? (FRAME IMPLIESPROPOSITION)
  (CL:WHEN
   (CL:NOT
    (CL:EQ *DUPLICATE-SUBGOAL-STRATEGY* KWD-STRATEGIES-DUPLICATE-))
   (CL:RETURN-FROM CHECK-FOR-DUPLICATE-RULE? CL:NIL))
  (CL:LET*
   ((PREVIOUSFRAME (%UP FRAME))
    (GOALBINDINGS (YIELD-GOAL-BINDINGS (%PROPOSITION FRAME))))
   (CL:LET*
    ((I NULL-INTEGER) (ITER-000 1)
     (UPPER-BOUND-000 *DUPLICATE-RULE-SEARCH-DEPTH*)
     (UNBOUNDED?-000 (NULL? UPPER-BOUND-000)))
    (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-000 UPPER-BOUND-000))
    (CL:LOOP WHILE
     (CL:OR UNBOUNDED?-000 (CL:<= ITER-000 UPPER-BOUND-000)) DO
     (CL:SETQ I ITER-000) (CL:SETQ I I)
     (CL:WHEN (CL:EQ PREVIOUSFRAME NULL)
      (CL:RETURN-FROM CHECK-FOR-DUPLICATE-RULE? CL:NIL))
     (CL:LET* ((TEST-VALUE-000 CL:NIL))
      (CL:SETQ TEST-VALUE-000
       (CL:EQ
        (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS PREVIOUSFRAME)
         SYM-STRATEGIES-LOGIC-ANTECEDENTS-RULE NULL)
        IMPLIESPROPOSITION))
      (CL:WHEN TEST-VALUE-000
       (CL:LET* ((ALWAYS?-000 CL:T))
        (CL:LET*
         ((B1 NULL) (ITER-001 GOALBINDINGS) (B2 NULL)
          (ITER-002
           (YIELD-GOAL-BINDINGS (%PROPOSITION PREVIOUSFRAME))))
         (CL:LOOP WHILE
          (CL:AND (CL:NOT (CL:EQ ITER-001 NIL))
           (CL:NOT (CL:EQ ITER-002 NIL)))
          DO (CL:SETQ B1 (%%VALUE ITER-001))
          (CL:SETQ B2 (%%VALUE ITER-002))
          (CL:WHEN (CL:NOT (EQL? B1 B2)) (CL:SETQ ALWAYS?-000 CL:NIL)
           (CL:RETURN))
          (CL:SETQ ITER-001 (%%REST ITER-001))
          (CL:SETQ ITER-002 (%%REST ITER-002))))
        (CL:SETQ TEST-VALUE-000 ALWAYS?-000))
       (CL:WHEN TEST-VALUE-000
        (CL:SETQ TEST-VALUE-000
         (CL:EQ (%REVERSE-POLARITY? FRAME)
          (%REVERSE-POLARITY? PREVIOUSFRAME)))))
      (CL:WHEN TEST-VALUE-000
       (CL:WHEN
        (CL:AND (CL:NOT (CL:EQ *TRACED-KEYWORDS* NULL))
         (MEMB? *TRACED-KEYWORDS* KWD-STRATEGIES-GOAL-CACHES))
        (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT)
         "DUPLICATE RULE.  BINDINGS: " GOALBINDINGS EOL))
       (CL:WHEN CL:NIL (ESTABLISH-GOAL-CACHE FRAME))
       (CL:RETURN-FROM CHECK-FOR-DUPLICATE-RULE? CL:T)))
     (CL:SETQ PREVIOUSFRAME (%UP PREVIOUSFRAME))
     (CL:SETQ ITER-000 (CL:1+ ITER-000)))))
  CL:NIL)

;;; (DEFUN (CONTINUE-ANTECEDENTS-PROOF KEYWORD) ...)

(CL:DEFUN CONTINUE-ANTECEDENTS-PROOF (FRAME LASTMOVE)
  (CL:LET*
   ((ITERATOR
     (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
      SYM-STRATEGIES-STELLA-ITERATOR NULL))
    (FIRSTTIME? (CL:EQ ITERATOR NULL))
    (REVERSEPOLARITY? (%REVERSE-POLARITY? FRAME)))
   (CL:COND
    ((CL:EQ LASTMOVE KWD-STRATEGIES-UP-TRUE)
     (CL:LET*
      ((OBJECT-000
        (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
         SYM-STRATEGIES-LOGIC-ANTECEDENTS-RULE NULL))
       (OLD-VALUE-000 (%TRUTH-VALUE OBJECT-000)))
      (CL:SETF (%TRUTH-VALUE FRAME)
       (WEAKEN-TRUTH-VALUE
        (PROPAGATE-FRAME-TRUTH-VALUE (%RESULT FRAME) FRAME)
        (ACCESS-IN-CONTEXT OLD-VALUE-000 (%HOME-CONTEXT OBJECT-000)
         CL:NIL))))
     (CL:WHEN *RECORD-JUSTIFICATIONS?*
      (RECORD-MODUS-PONENS-JUSTIFICATION FRAME LASTMOVE))
     (CL:RETURN-FROM CONTINUE-ANTECEDENTS-PROOF
      KWD-STRATEGIES-CONTINUING-SUCCESS))
    (CL:T))
   (CL:WHEN FIRSTTIME?
    (CL:SETQ ITERATOR
     (ALLOCATE-ANTECEDENTS-ITERATOR
      (EXTRACT-SUBGOAL-DESCRIPTION-OF-FRAME FRAME)
      (FIND-EXTERNAL-ARGUMENTS-FOR-SUBGOAL FRAME) REVERSEPOLARITY?))
    (CL:WHEN (CL:EQ ITERATOR NULL)
     (CL:RETURN-FROM CONTINUE-ANTECEDENTS-PROOF
      KWD-STRATEGIES-FAILURE))
    (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
     SYM-STRATEGIES-STELLA-ITERATOR ITERATOR NULL))
   (CL:LOOP WHILE (NEXT? ITERATOR) DO
    (CL:TAGBODY
     (CL:LET*
      ((IMPLIESPROPOSITION (%VALUE ITERATOR))
       (ANTECEDENTDESCRIPTION
        (CL:IF REVERSEPOLARITY?
         (CL:AREF
          (CL:THE CL:SIMPLE-VECTOR
           (%THE-ARRAY (%ARGUMENTS IMPLIESPROPOSITION)))
          1)
         (CL:AREF
          (CL:THE CL:SIMPLE-VECTOR
           (%THE-ARRAY (%ARGUMENTS IMPLIESPROPOSITION)))
          0))))
      (CL:WHEN (CHECK-FOR-DUPLICATE-RULE? FRAME IMPLIESPROPOSITION)
       (CL:GO :CONTINUE))
      (CL:WHEN (CL:NOT (TRUE? IMPLIESPROPOSITION))
       (CL:IF (EMPTY? (GET-FORWARD-GOALS IMPLIESPROPOSITION))
        (CL:GO :CONTINUE)
        (CL:PROGN
         (CREATE-CONDITIONAL-ANTECEDENT-SUBFRAME FRAME
          (%PROPOSITION FRAME) IMPLIESPROPOSITION)
         (CL:RETURN-FROM CONTINUE-ANTECEDENTS-PROOF
          KWD-STRATEGIES-MOVE-DOWN))))
      (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
       SYM-STRATEGIES-LOGIC-ANTECEDENTS-RULE IMPLIESPROPOSITION NULL)
      (CL:LET*
       ((DOWNFRAME
         (CREATE-SUBGOAL-FRAME FRAME NULL
          KWD-STRATEGIES-FULL-SUBQUERY)))
       (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS DOWNFRAME)
        SYM-STRATEGIES-LOGIC-DESCRIPTION ANTECEDENTDESCRIPTION NULL)
       (CL:RETURN-FROM CONTINUE-ANTECEDENTS-PROOF
        KWD-STRATEGIES-MOVE-DOWN)))
     :CONTINUE))
   KWD-STRATEGIES-FAILURE))

;;; (DEFUN (ALLOCATE-ANTECEDENTS-ITERATOR (ITERATOR OF PROPOSITION)) ...)

(CL:DEFUN ALLOCATE-ANTECEDENTS-ITERATOR (GOALDESCRIPTION EXTERNALARGUMENTS REVERSEPOLARITY?)
  (CL:LET*
   ((ANTECEDENTS NIL) (ANTECEDENT NULL)
    (INCOMPATIBLEARGUMENTS? CL:NIL))
   (CL:LET*
    ((PROP NULL)
     (ITER-000
      (APPLICABLE-RULES-OF-DESCRIPTION GOALDESCRIPTION
       (CL:IF REVERSEPOLARITY? KWD-STRATEGIES-FORWARD
        KWD-STRATEGIES-BACKWARD)
       CL:NIL)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ PROP (%%VALUE ITER-000))
     (CL:TAGBODY
      (CL:WHEN
       (CL:AND
        (CL:IF REVERSEPOLARITY?
         (CL:NOT
          (%WRAPPER-VALUE
           (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS PROP)
            SYM-STRATEGIES-LOGIC-BACKWARD-ONLY? FALSE-WRAPPER)))
         (CL:NOT
          (%WRAPPER-VALUE
           (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS PROP)
            SYM-STRATEGIES-LOGIC-FORWARD-ONLY? FALSE-WRAPPER))))
        (CL:OR (CL:NOT REVERSEPOLARITY?)
         (ATOMIC-GOAL-DESCRIPTION?
          (CL:AREF
           (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROP))) 1))
         (CLOSED-TERM?
          (CL:AREF
           (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROP)))
           1))))
       (CL:SETQ ANTECEDENT
        (CL:IF REVERSEPOLARITY?
         (CL:AREF
          (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROP))) 1)
         (CL:AREF
          (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROP))) 0)))
       (CL:WHEN
        (CL:OR
         (CL:NOT (ISA? ANTECEDENT SGT-STRATEGIES-LOGIC-DESCRIPTION))
         (CL:NOT
          (CL:= (LENGTH EXTERNALARGUMENTS)
           (LENGTH (%IO-VARIABLES ANTECEDENT)))))
        (CL:GO :CONTINUE))
       (CL:SETQ INCOMPATIBLEARGUMENTS? CL:NIL)
       (CL:LET*
        ((V NULL) (VECTOR-000 (%IO-VARIABLES ANTECEDENT)) (INDEX-000 0)
         (LENGTH-000 (LENGTH VECTOR-000)) (ARG NULL)
         (VECTOR-001 EXTERNALARGUMENTS) (INDEX-001 0)
         (LENGTH-001 (LENGTH VECTOR-001)))
        (CL:DECLARE
         (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000 INDEX-001 LENGTH-001))
        (CL:LOOP WHILE
         (CL:AND (CL:< INDEX-000 LENGTH-000)
          (CL:< INDEX-001 LENGTH-001))
         DO
         (CL:SETQ V
          (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-000))
           INDEX-000))
         (CL:SETQ ARG
          (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-001))
           INDEX-001))
         (CL:LET*
          ((ARGVALUE (ARGUMENT-BOUND-TO ARG))
           (VARVALUE (GROUND-VALUE-OF V)))
          (CL:WHEN
           (CL:AND (CL:NOT (CL:EQ ARGVALUE NULL))
            (CL:OR
             (CL:AND (CL:NOT (CL:EQ VARVALUE NULL))
              (CL:NOT (EQL? ARGVALUE VARVALUE)))
             (CL:AND (CL:EQ VARVALUE NULL)
              (FAILS-ANTECEDENT-TYPE-CHECK? V ARGVALUE))))
           (CL:SETQ INCOMPATIBLEARGUMENTS? CL:T) (CL:RETURN)))
         (CL:SETQ INDEX-000 (CL:1+ INDEX-000))
         (CL:SETQ INDEX-001 (CL:1+ INDEX-001))))
       (CL:WHEN (CL:NOT INCOMPATIBLEARGUMENTS?)
        (CL:SETQ ANTECEDENTS (CONS PROP ANTECEDENTS))))
      :CONTINUE)
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:IF (CL:EQ ANTECEDENTS NIL) NULL
    (ALLOCATE-ITERATOR
     (OPTIMIZE-ORDER-OF-APPLICABLE-RULES ANTECEDENTS
      (CL:NOT REVERSEPOLARITY?))))))

;;; (DEFUN (OPTIMIZE-ORDER-OF-APPLICABLE-RULES (CONS OF PROPOSITION)) ...)

(CL:DEFUN OPTIMIZE-ORDER-OF-APPLICABLE-RULES (RULES TAIL?)
  (CL:LET*
   ((CURSOR RULES) (RESULT NIL) (ANTECEDENT NULL)
    (ANTECEDENTINDEX (CL:IF TAIL? 0 1)))
   (CL:DECLARE (CL:TYPE CL:FIXNUM ANTECEDENTINDEX))
   (CL:WHEN (CL:EQ (%%REST RULES) NIL)
    (CL:RETURN-FROM OPTIMIZE-ORDER-OF-APPLICABLE-RULES RULES))
   (CL:LET* ((I NULL-INTEGER) (ITER-000 0))
    (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-000))
    (CL:LOOP WHILE CL:T DO (CL:SETQ I ITER-000)
     (CL:LOOP WHILE (CL:NOT (CL:EQ CURSOR NIL)) DO
      (CL:SETQ ANTECEDENT
       (CL:AREF
        (CL:THE CL:SIMPLE-VECTOR
         (%THE-ARRAY (%ARGUMENTS (%%VALUE CURSOR))))
        ANTECEDENTINDEX))
      (CL:WHEN (CL:= (LENGTH (%INTERNAL-VARIABLES ANTECEDENT)) I)
       (CL:SETQ RESULT (CONS (%%VALUE CURSOR) RESULT))
       (CL:SETF (%%VALUE CURSOR) NULL))
      (CL:SETQ CURSOR (%%REST CURSOR)))
     (CL:SETQ CURSOR (REMOVE RULES NULL))
     (CL:WHEN (CL:EQ CURSOR NIL) (CL:RETURN))
     (CL:SETQ ITER-000 (CL:1+ ITER-000))))
   (REVERSE RESULT)))

;;; (DEFUN (TRY-GOAL-COMPLEMENT-PROOF KEYWORD) ...)

(CL:DEFUN TRY-GOAL-COMPLEMENT-PROOF (FRAME)
  (CL:LET*
   ((DESCRIPTION (EXTRACT-SUBGOAL-DESCRIPTION-OF-FRAME FRAME))
    (COMPLEMENT (GET-INFERABLE-COMPLEMENT-DESCRIPTION DESCRIPTION))
    (DOWNFRAME
     (CREATE-SUBGOAL-FRAME FRAME NULL
      KWD-STRATEGIES-ALL-SUBGOAL-STRATEGIES)))
   (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS DOWNFRAME)
    SYM-STRATEGIES-LOGIC-DESCRIPTION COMPLEMENT NULL)
   (CL:SETF (%REVERSE-POLARITY? DOWNFRAME) CL:NIL)
   KWD-STRATEGIES-MOVE-DOWN))

;;; (DEFUN (TRY-FORWARD-GOALS-PROOF KEYWORD) ...)

(CL:DEFUN TRY-FORWARD-GOALS-PROOF (FRAME)
  (CL:LET*
   ((ITERATOR
     (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
      SYM-STRATEGIES-STELLA-ITERATOR NULL)))
   (CL:COND
    ((CL:EQ ITERATOR NULL)
     (CL:LET*
      ((BASEPROPOSITION
        (FIND-MATCHING-CONCEIVED-PROPOSITION (%PROPOSITION FRAME)))
       (FORWARDGOALS NULL))
      (CL:WHEN (CL:EQ BASEPROPOSITION NULL)
       (CL:RETURN-FROM TRY-FORWARD-GOALS-PROOF KWD-STRATEGIES-FAILURE))
      (CL:SETQ FORWARDGOALS (GET-FORWARD-GOALS BASEPROPOSITION))
      (CL:COND
       ((EMPTY? FORWARDGOALS)
        (CL:RETURN-FROM TRY-FORWARD-GOALS-PROOF
         KWD-STRATEGIES-FAILURE))
       ((CL:AND (CL:EQ (REST FORWARDGOALS) NIL)
         (TRUE? (%FORWARD-RULE (FIRST FORWARDGOALS))))
        (CREATE-SUBGOAL-FRAME FRAME
         (%FORWARD-GOAL (FIRST FORWARDGOALS)) NULL)
        (CL:RETURN-FROM TRY-FORWARD-GOALS-PROOF
         KWD-STRATEGIES-MOVE-DOWN))
       (CL:T (CL:SETQ ITERATOR (ALLOCATE-ITERATOR FORWARDGOALS))
        (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
         SYM-STRATEGIES-STELLA-ITERATOR ITERATOR NULL)))))
    (CL:T
     (CL:SETQ ITERATOR
      (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
       SYM-STRATEGIES-STELLA-ITERATOR NULL))))
   (CL:WHEN (NEXT? ITERATOR)
    (CL:LET* ((FWDGOALREC (%VALUE ITERATOR)))
     (CL:IF (TRUE? (%FORWARD-RULE FWDGOALREC))
      (CREATE-SUBGOAL-FRAME FRAME (%FORWARD-GOAL FWDGOALREC) NULL)
      (CREATE-CONDITIONAL-ANTECEDENT-SUBFRAME FRAME
       (%FORWARD-GOAL FWDGOALREC) (%FORWARD-RULE FWDGOALREC)))
     (CL:RETURN-FROM TRY-FORWARD-GOALS-PROOF
      KWD-STRATEGIES-MOVE-DOWN)))
   KWD-STRATEGIES-FAILURE))

;;; (DEFCLASS CONDITIONAL-ANTECEDENT-PROOF-ADJUNCT ...)

(CL:DEFCLASS CONDITIONAL-ANTECEDENT-PROOF-ADJUNCT (PROOF-ADJUNCT)
  ((PROVABLE-RULE :ALLOCATION :INSTANCE :ACCESSOR %PROVABLE-RULE)
   (GOAL :ALLOCATION :INSTANCE :ACCESSOR %GOAL)
   (PHASE :ALLOCATION :INSTANCE :ACCESSOR %PHASE)))

(CL:DEFUN NEW-CONDITIONAL-ANTECEDENT-PROOF-ADJUNCT ()
  (CL:LET* ((SELF NULL))
   (CL:SETQ SELF
    (CL:MAKE-INSTANCE (CL:QUOTE CONDITIONAL-ANTECEDENT-PROOF-ADJUNCT)))
   (CL:SETF (%PHASE SELF) KWD-STRATEGIES-FORWARD-RULE)
   (CL:SETF (%GOAL SELF) NULL) (CL:SETF (%PROVABLE-RULE SELF) NULL)
   SELF))

(CL:DEFMETHOD PRIMARY-TYPE ((SELF CONDITIONAL-ANTECEDENT-PROOF-ADJUNCT))
  SGT-STRATEGIES-LOGIC-CONDITIONAL-ANTECEDENT-PROOF-ADJUNCT)

(CL:DEFUN ACCESS-CONDITIONAL-ANTECEDENT-PROOF-ADJUNCT-SLOT-VALUE (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-STRATEGIES-LOGIC-PROVABLE-RULE)
    (CL:IF SETVALUE? (CL:SETF (%PROVABLE-RULE SELF) VALUE)
     (CL:SETQ VALUE (%PROVABLE-RULE SELF))))
   ((CL:EQ SLOTNAME SYM-STRATEGIES-LOGIC-GOAL)
    (CL:IF SETVALUE? (CL:SETF (%GOAL SELF) VALUE)
     (CL:SETQ VALUE (%GOAL SELF))))
   ((CL:EQ SLOTNAME SYM-STRATEGIES-STELLA-PHASE)
    (CL:IF SETVALUE? (CL:SETF (%PHASE SELF) VALUE)
     (CL:SETQ VALUE (%PHASE SELF))))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" SLOTNAME
      "' is not a valid case option")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
  VALUE)

;;; (DEFUN (CREATE-CONDITIONAL-ANTECEDENT-SUBFRAME CONTROL-FRAME) ...)

(CL:DEFUN CREATE-CONDITIONAL-ANTECEDENT-SUBFRAME (FRAME GOAL PROVABLERULE)
  (CL:LET*
   ((DOWNFRAME
     (CREATE-SUBGOAL-FRAME FRAME GOAL
      KWD-STRATEGIES-CONDITIONAL-ANTECEDENT))
    (PROOFADJUNCT (NEW-CONDITIONAL-ANTECEDENT-PROOF-ADJUNCT)))
   (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS DOWNFRAME)
    SYM-STRATEGIES-LOGIC-PROOF-ADJUNCT PROOFADJUNCT NULL)
   (CL:SETF (%PROVABLE-RULE PROOFADJUNCT) PROVABLERULE)
   (CL:SETF (%GOAL PROOFADJUNCT) GOAL) DOWNFRAME))

;;; (DEFUN (CONTINUE-CONDITIONAL-ANTECEDENT-PROOF KEYWORD) ...)

(CL:DEFUN CONTINUE-CONDITIONAL-ANTECEDENT-PROOF (FRAME LASTMOVE)
  (CL:LET*
   ((PROOFADJUNCT
     (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
      SYM-STRATEGIES-LOGIC-PROOF-ADJUNCT NULL))
    (PROVABLERULE (%PROVABLE-RULE PROOFADJUNCT)))
   (CL:COND
    ((CL:EQ LASTMOVE KWD-STRATEGIES-DOWN)
     (CREATE-SUBGOAL-FRAME FRAME PROVABLERULE
      KWD-STRATEGIES-FORWARD-GOALS)
     KWD-STRATEGIES-MOVE-DOWN)
    ((CL:EQ LASTMOVE KWD-STRATEGIES-UP-TRUE)
     (CL:WHEN
      (CL:EQ (%PHASE PROOFADJUNCT) KWD-STRATEGIES-ORIGINAL-GOAL)
      (CL:SETF (%TRUTH-VALUE FRAME)
       (WEAKEN-TRUTH-VALUE
        (PROPAGATE-FRAME-TRUTH-VALUE (%RESULT FRAME) FRAME)
        (ACCESS-IN-CONTEXT (%TRUTH-VALUE PROVABLERULE)
         (%HOME-CONTEXT PROVABLERULE) CL:NIL)))
      (CL:RETURN-FROM CONTINUE-CONDITIONAL-ANTECEDENT-PROOF
       (SELECT-PROOF-RESULT CL:T (CL:NOT (CL:EQ (%DOWN FRAME) NULL))
        CL:NIL)))
     (ASSIGN-TRUTH-VALUE PROVABLERULE (%TRUTH-VALUE (%RESULT FRAME)))
     (CL:LET*
      ((DOWNFRAME
        (CREATE-SUBGOAL-FRAME FRAME (%PROPOSITION FRAME)
         KWD-STRATEGIES-ANTECEDENTS)))
      (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS DOWNFRAME)
       SYM-STRATEGIES-STELLA-ITERATOR
       (ALLOCATE-ITERATOR (CONS-LIST PROVABLERULE)) NULL)
      (CL:SETF (%PHASE PROOFADJUNCT) KWD-STRATEGIES-ORIGINAL-GOAL)
      KWD-STRATEGIES-MOVE-DOWN))
    ((CL:EQ LASTMOVE KWD-STRATEGIES-UP-FAIL)
     (PROPAGATE-FRAME-TRUTH-VALUE (%RESULT FRAME) FRAME)
     KWD-STRATEGIES-FAILURE)
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" LASTMOVE
       "' is not a valid case option")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))

;;; (DEFUN (TRY-FULL-SUBQUERY-PROOF KEYWORD) ...)

(CL:DEFUN TRY-FULL-SUBQUERY-PROOF (FRAME)
  (CL:LET*
   ((DESCRIPTION
     (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
      SYM-STRATEGIES-LOGIC-DESCRIPTION NULL))
    (EXTERNALARGUMENTS (FIND-EXTERNAL-ARGUMENTS-FOR-SUBGOAL FRAME)))
   (CL:WHEN
    (OVERLAY-WITH-PATTERN-FRAME? FRAME DESCRIPTION EXTERNALARGUMENTS)
    (CL:RETURN-FROM TRY-FULL-SUBQUERY-PROOF
     KWD-STRATEGIES-MOVE-IN-PLACE))
   (CL:WHEN
    (CL:AND (CL:EQ (%PARTIAL-MATCH-FRAME FRAME) NULL)
     (CL:AND (CL:NOT (CL:EQ *QUERYITERATOR* NULL))
      (CL:NOT (CL:EQ (%PARTIAL-MATCH-STRATEGY *QUERYITERATOR*) NULL))))
    (CREATE-AND-LINK-PARTIAL-MATCH-FRAME FRAME
     KWD-STRATEGIES-ATOMIC-GOAL))
   KWD-STRATEGIES-FAILURE))

;;; (DEFUN (EXTRACT-COLLECTION-ARGUMENT NAMED-DESCRIPTION) ...)

(CL:DEFUN EXTRACT-COLLECTION-ARGUMENT (PROPOSITION)
  (CL:COND
   ((CL:EQ (%KIND PROPOSITION) KWD-STRATEGIES-ISA)
    (GET-DESCRIPTION (%OPERATOR PROPOSITION)))
   (CL:T
    (ARGUMENT-BOUND-TO
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
      1)))))

;;; (DEFUN (TRY-ISA-PROPOSITION-PROOF KEYWORD) ...)

(CL:DEFUN TRY-ISA-PROPOSITION-PROOF (FRAME)
  (CL:LET*
   ((PROPOSITION (%PROPOSITION FRAME))
    (ARGUMENTS (%ARGUMENTS PROPOSITION))
    (MEMBERARG
     (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY ARGUMENTS)) 0))
    (MEMBER (ARGUMENT-BOUND-TO MEMBERARG))
    (SCANISAPROPOSITIONS?
     (CL:OR *GENERATE-ALL-PROOFS?* *REVERSEPOLARITY?*)))
   (CL:WHEN *CYC-KLUDGES-ENABLED?*
    (CL:WHEN (CL:NOT *REVERSEPOLARITY?*)
     (CL:SETQ SCANISAPROPOSITIONS? CL:NIL)))
   (CL:WHEN (CL:EQ MEMBER NULL)
    (CL:RETURN-FROM TRY-ISA-PROPOSITION-PROOF
     (TRY-SCAN-COLLECTION-PROOF FRAME)))
   (CL:WHEN (ISA? MEMBER SGT-STRATEGIES-STELLA-LITERAL-WRAPPER)
    (CL:LET*
     ((SURROGATE (%OPERATOR PROPOSITION))
      (SUCCESS? (LOGICAL-SUBTYPE-OF? (LOGICAL-TYPE MEMBER) SURROGATE)))
     (CL:WHEN *REVERSEPOLARITY?* (CL:SETQ SUCCESS? (CL:NOT SUCCESS?)))
     (CL:WHEN SUCCESS?
      (CL:RETURN-FROM TRY-ISA-PROPOSITION-PROOF
       KWD-STRATEGIES-FINAL-SUCCESS))
     (CL:WHEN (CL:NOT (INSTANCE-HAS-BACKLINKS? MEMBER))
      (CL:RETURN-FROM TRY-ISA-PROPOSITION-PROOF
       KWD-STRATEGIES-FAILURE))))
   (CL:WHEN SCANISAPROPOSITIONS?
    (CL:RETURN-FROM TRY-ISA-PROPOSITION-PROOF
     (TRY-SCAN-PROPOSITIONS-PROOF FRAME)))
   (CL:LET* ((COLLECTION (EXTRACT-COLLECTION-ARGUMENT PROPOSITION)))
    (CL:IF (TEST-ISA? MEMBER (%SURROGATE-VALUE-INVERSE COLLECTION))
     KWD-STRATEGIES-FINAL-SUCCESS KWD-STRATEGIES-FAILURE))))

;;; (DEFUN (TRY-SCAN-COLLECTION-PROOF KEYWORD) ...)

(CL:DEFUN TRY-SCAN-COLLECTION-PROOF (FRAME)
  (CL:LET*
   ((PROPOSITION (%PROPOSITION FRAME))
    (ARGUMENTS (%ARGUMENTS PROPOSITION))
    (MEMBERARG
     (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY ARGUMENTS)) 0))
    (ITERATOR
     (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
      SYM-STRATEGIES-STELLA-ITERATOR NULL)))
   (CL:WHEN (CL:EQ ITERATOR NULL)
    (CL:LET*
     ((COLLECTION (EXTRACT-COLLECTION-ARGUMENT PROPOSITION))
      (MEMBERS NULL))
     (CL:LET* ((COLLECTDIRECTMEMBERSONLY? (INFERABLE? COLLECTION)))
      (CL:SETQ MEMBERS
       (ASSERTED-COLLECTION-MEMBERS COLLECTION
        COLLECTDIRECTMEMBERSONLY?))
      (CL:WHEN (CL:NOT COLLECTDIRECTMEMBERSONLY?)
       (UPDATE-OBSERVED-CARDINALITY COLLECTION (LENGTH MEMBERS))))
     (CL:WHEN (CL:EQ MEMBERS NULL)
      (CL:RETURN-FROM TRY-SCAN-COLLECTION-PROOF
       KWD-STRATEGIES-FAILURE))
     (CL:SETQ ITERATOR (ALLOCATE-ITERATOR MEMBERS))
     (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
      SYM-STRATEGIES-STELLA-ITERATOR ITERATOR NULL)))
   (CL:LOOP WHILE (NEXT? ITERATOR) DO
    (CL:WHEN
     (BIND-VARIABLE-TO-VALUE? MEMBERARG (VALUE-OF (%VALUE ITERATOR))
      CL:T)
     (CL:RETURN-FROM TRY-SCAN-COLLECTION-PROOF
      KWD-STRATEGIES-CONTINUING-SUCCESS)))
   KWD-STRATEGIES-FAILURE))

;;; (DEFUN (INFERABLE-DESCRIPTION? BOOLEAN) ...)

(CL:DEFUN INFERABLE-DESCRIPTION? (SELF)
  (CL:WHEN (CL:EQ SELF NULL)
   (CL:RETURN-FROM INFERABLE-DESCRIPTION? CL:NIL))
  (CL:COND
   ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE SELF)
     SGT-STRATEGIES-LOGIC-DESCRIPTION)
    (CL:PROGN
     (CL:WHEN
      (CL:AND *REVERSEPOLARITY?*
       (CL:NOT
        (CL:EQ (GET-INFERABLE-COMPLEMENT-DESCRIPTION SELF) NULL)))
      (CL:SETQ SELF
       (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS SELF)
        SYM-STRATEGIES-LOGIC-COMPLEMENT-DESCRIPTION NULL)))
     (INFERABLE? SELF)))
   (CL:T CL:NIL)))

;;; (DEFUN (TRY-IMPLIES-PROOF KEYWORD) ...)

(CL:DEFUN TRY-IMPLIES-PROOF (FRAME)
  (CL:LET*
   ((PROPOSITION (%PROPOSITION FRAME))
    (SUBCOLLECTIONARG
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
      0))
    (SUPERCOLLECTIONARG
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
      1))
    (SUBCOLLECTION (ARGUMENT-BOUND-TO SUBCOLLECTIONARG))
    (SUPERCOLLECTION (ARGUMENT-BOUND-TO SUPERCOLLECTIONARG)))
   (CL:WHEN
    (CL:OR (CL:EQ SUBCOLLECTION NULL) (CL:EQ SUPERCOLLECTION NULL))
    (CL:RETURN-FROM TRY-IMPLIES-PROOF KWD-STRATEGIES-FAILURE))
   (CL:WHEN
    (CL:AND (CL:NOT (INFERABLE-DESCRIPTION? SUBCOLLECTION))
     (CL:NOT (INFERABLE-DESCRIPTION? SUPERCOLLECTION))
     (CL:OR (CLOSED-TERM? SUBCOLLECTION) (%REVERSE-POLARITY? FRAME)))
    (CL:LET*
     ((TEST-VALUE-000
       (TRY-SIMPLE-CONTAINED-BY-PROOF SUBCOLLECTION SUPERCOLLECTION
        (%REVERSE-POLARITY? FRAME))))
     (CL:COND
      ((CL:EQ TEST-VALUE-000 KWD-STRATEGIES-FINAL-SUCCESS)
       (SET-FRAME-TRUTH-VALUE FRAME TRUE-TRUTH-VALUE)
       (CL:RETURN-FROM TRY-IMPLIES-PROOF KWD-STRATEGIES-FINAL-SUCCESS))
      ((CL:EQ TEST-VALUE-000 KWD-STRATEGIES-TERMINAL-FAILURE)
       (SET-FRAME-TRUTH-VALUE FRAME FALSE-TRUTH-VALUE)
       (CL:RETURN-FROM TRY-IMPLIES-PROOF
        KWD-STRATEGIES-TERMINAL-FAILURE))
      (CL:T))))
   (CL:WHEN
    (CL:AND (ISA? SUBCOLLECTION SGT-STRATEGIES-LOGIC-DESCRIPTION)
     (ISA? SUPERCOLLECTION SGT-STRATEGIES-LOGIC-DESCRIPTION))
    (PUSH-NEXT-STRATEGY FRAME KWD-STRATEGIES-SUBSUMPTION-TEST))
   (CL:WHEN (CLOSED-TERM? SUBCOLLECTION)
    (PUSH-NEXT-STRATEGY FRAME KWD-STRATEGIES-CONTAINED-BY))
   KWD-STRATEGIES-FAILURE))

;;; (DEFUN (TRY-SIMPLE-CONTAINED-BY-PROOF KEYWORD) ...)

(CL:DEFUN TRY-SIMPLE-CONTAINED-BY-PROOF (SUBCOLLECTION SUPERCOLLECTION REVERSEPOLARITY?)
  (CL:LET* ((*REVERSEPOLARITY?* CL:NIL))
   (CL:DECLARE (CL:SPECIAL *REVERSEPOLARITY?*))
   (CL:LET*
    ((MEMBERS (ASSERTED-COLLECTION-MEMBERS SUBCOLLECTION CL:NIL)))
    (CL:SETQ *REVERSEPOLARITY?* REVERSEPOLARITY?)
    (CL:WHEN (CL:NOT (CL:EQ MEMBERS NULL))
     (CL:IF REVERSEPOLARITY?
      (CL:LET* ((FOUND?-000 CL:NIL))
       (CL:LET* ((M NULL) (ITER-000 (%THE-CONS-LIST MEMBERS)))
        (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
         (CL:SETQ M (%%VALUE ITER-000))
         (CL:WHEN (MEMBER-OF-COLLECTION? (VALUE-OF M) SUPERCOLLECTION)
          (CL:SETQ FOUND?-000 CL:T) (CL:RETURN))
         (CL:SETQ ITER-000 (%%REST ITER-000))))
       (CL:IF FOUND?-000
        (CL:RETURN-FROM TRY-SIMPLE-CONTAINED-BY-PROOF
         KWD-STRATEGIES-FINAL-SUCCESS)
        (CL:WHEN (CLOSED-TERM? SUPERCOLLECTION)
         (CL:RETURN-FROM TRY-SIMPLE-CONTAINED-BY-PROOF
          KWD-STRATEGIES-TERMINAL-FAILURE))))
      (CL:LET* ((ALWAYS?-000 CL:T))
       (CL:LET* ((M NULL) (ITER-001 (%THE-CONS-LIST MEMBERS)))
        (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
         (CL:SETQ M (%%VALUE ITER-001))
         (CL:WHEN
          (CL:NOT (MEMBER-OF-COLLECTION? (VALUE-OF M) SUPERCOLLECTION))
          (CL:SETQ ALWAYS?-000 CL:NIL) (CL:RETURN))
         (CL:SETQ ITER-001 (%%REST ITER-001))))
       (CL:IF ALWAYS?-000
        (CL:RETURN-FROM TRY-SIMPLE-CONTAINED-BY-PROOF
         KWD-STRATEGIES-FINAL-SUCCESS)
        (CL:WHEN (CLOSED-TERM? SUPERCOLLECTION)
         (CL:RETURN-FROM TRY-SIMPLE-CONTAINED-BY-PROOF
          KWD-STRATEGIES-TERMINAL-FAILURE))))))
    KWD-STRATEGIES-FAILURE)))

;;; (DEFUN (TRY-CONTAINED-BY-PROOF KEYWORD) ...)

(CL:DEFUN TRY-CONTAINED-BY-PROOF (UPFRAME)
  (CL:LET*
   ((UPPROPOSITION (%PROPOSITION UPFRAME))
    (SUBCOLLECTION
     (ARGUMENT-BOUND-TO
      (CL:AREF
       (CL:THE CL:SIMPLE-VECTOR
        (%THE-ARRAY (%ARGUMENTS UPPROPOSITION)))
       0)))
    (SUPERCOLLECTION
     (ARGUMENT-BOUND-TO
      (CL:AREF
       (CL:THE CL:SIMPLE-VECTOR
        (%THE-ARRAY (%ARGUMENTS UPPROPOSITION)))
       1)))
    (CONTAINEDBYPROP
     (CREATE-PROPOSITION SYM-STRATEGIES-LOGIC-CONTAINED-BY 2))
    (DESCRIPTION
     (CL:IF (ISA? SUBCOLLECTION SGT-STRATEGIES-LOGIC-DESCRIPTION)
      SUBCOLLECTION SUPERCOLLECTION))
    (ARITY (ARITY DESCRIPTION)) (BRIDGEARGUMENTS (NEW-LIST))
    (CONTAINEDBYFRAME (CREATE-DOWN-FRAME UPFRAME CONTAINEDBYPROP)))
   (CL:DECLARE (CL:TYPE CL:FIXNUM ARITY))
   (CL:WHEN (%REVERSE-POLARITY? UPFRAME)
    (CL:RETURN-FROM TRY-CONTAINED-BY-PROOF KWD-STRATEGIES-FAILURE))
   (CL:LET*
    ((I NULL-INTEGER) (ITER-000 0) (VBL NULL)
     (VECTOR-000 (%IO-VARIABLES DESCRIPTION)) (INDEX-000 0)
     (LENGTH-000 (LENGTH VECTOR-000)))
    (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-000 INDEX-000 LENGTH-000))
    (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO (CL:SETQ I ITER-000)
     (CL:SETQ VBL
      (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-000))
       INDEX-000))
     (CL:LET* ((BRIDGEVBL (NEW-PATTERN-VARIABLE)))
      (CL:SETF (%BOUND-TO-OFFSET BRIDGEVBL) I)
      (CL:SETF (%SKOLEM-NAME BRIDGEVBL) (%SKOLEM-NAME VBL))
      (CL:SETF (%SKOLEM-TYPE BRIDGEVBL) (%SKOLEM-TYPE VBL))
      (INSERT-LAST BRIDGEARGUMENTS BRIDGEVBL))
     (CL:SETQ ITER-000 (CL:1+ ITER-000))
     (CL:SETQ INDEX-000 (CL:1+ INDEX-000))))
   (CL:SETF (%STATE CONTAINEDBYFRAME) KWD-STRATEGIES-CONTAINED-BY)
   (CL:SETF (%PROPOSITION CONTAINEDBYFRAME) CONTAINEDBYPROP)
   (CL:LET
    ((SELF (%THE-ARRAY (%ARGUMENTS CONTAINEDBYPROP)))
     (VALUE
      (CREATE-CONTAINED-BY-ARGUMENT SUBCOLLECTION BRIDGEARGUMENTS))
     (POSITION 0))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (CL:SETF (CL:AREF SELF POSITION) VALUE))
   (CL:LET
    ((SELF (%THE-ARRAY (%ARGUMENTS CONTAINEDBYPROP)))
     (VALUE
      (CREATE-CONTAINED-BY-ARGUMENT SUPERCOLLECTION BRIDGEARGUMENTS))
     (POSITION 1))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (CL:SETF (CL:AREF SELF POSITION) VALUE))
   (CREATE-PATTERN-RECORD CONTAINEDBYFRAME NULL NULL)
   (ACTIVATE-PATTERN-RECORD (%PATTERN-RECORD CONTAINEDBYFRAME) ARITY)
   KWD-STRATEGIES-MOVE-DOWN))

;;; (DEFUN (CREATE-CONTAINED-BY-ARGUMENT PROPOSITION) ...)

(CL:DEFUN CREATE-CONTAINED-BY-ARGUMENT (COLLECTION BRIDGEARGS)
  (CL:LET* ((PROPOSITION NULL) (THECOLLECTION COLLECTION) (ARITY 1))
   (CL:DECLARE (CL:TYPE CL:FIXNUM ARITY))
   (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE COLLECTION)))
    (CL:COND
     ((SUBTYPE-OF? TEST-VALUE-000
       SGT-STRATEGIES-LOGIC-NAMED-DESCRIPTION)
      (CL:PROGN
       (CL:COND
        ((CLASS? COLLECTION)
         (CL:SETQ PROPOSITION
          (CREATE-PROPOSITION SYM-STRATEGIES-STELLA-ISA 1))
         (CL:SETF (%OPERATOR PROPOSITION)
          (%SURROGATE-VALUE-INVERSE COLLECTION))
         (CL:LET
          ((SELF (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
           (VALUE (FIRST BRIDGEARGS)) (POSITION 0))
          (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
           (CL:TYPE CL:FIXNUM POSITION))
          (CL:SETF (CL:AREF SELF POSITION) VALUE))
         (CL:RETURN-FROM CREATE-CONTAINED-BY-ARGUMENT PROPOSITION))
        (CL:T
         (CL:SETQ PROPOSITION
          (CREATE-PROPOSITION SYM-STRATEGIES-STELLA-PREDICATE
           (ARITY COLLECTION)))
         (CL:SETF (%OPERATOR PROPOSITION)
          (%SURROGATE-VALUE-INVERSE COLLECTION))
         (CL:LET*
          ((ARG NULL) (ITER-000 (%THE-CONS-LIST BRIDGEARGS))
           (I NULL-INTEGER) (ITER-001 0))
          (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-001))
          (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
           (CL:SETQ ARG (%%VALUE ITER-000)) (CL:SETQ I ITER-001)
           (CL:LET
            ((SELF (%THE-ARRAY (%ARGUMENTS PROPOSITION))) (VALUE ARG)
             (POSITION I))
            (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
             (CL:TYPE CL:FIXNUM POSITION))
            (CL:SETF (CL:AREF SELF POSITION) VALUE))
           (CL:SETQ ITER-000 (%%REST ITER-000))
           (CL:SETQ ITER-001 (CL:1+ ITER-001))))
         (CL:RETURN-FROM CREATE-CONTAINED-BY-ARGUMENT PROPOSITION)))))
     ((SUBTYPE-OF? TEST-VALUE-000 SGT-STRATEGIES-LOGIC-DESCRIPTION)
      (CL:PROGN (CL:SETQ ARITY (ARITY COLLECTION))
       (CL:SETQ THECOLLECTION
        (INSTANTIATE-EXTERNAL-BINDINGS COLLECTION))))
     (CL:T)))
   (CL:SETQ PROPOSITION
    (CREATE-PROPOSITION SYM-STRATEGIES-STELLA-PREDICATE 2))
   (CL:SETF (%OPERATOR PROPOSITION)
    SGT-STRATEGIES-PL-KERNEL-KB-MEMBER-OF)
   (CL:LET
    ((SELF (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
     (VALUE (CL:IF (CL:> ARITY 1) BRIDGEARGS (FIRST BRIDGEARGS)))
     (POSITION 0))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (CL:SETF (CL:AREF SELF POSITION) VALUE))
   (CL:LET
    ((SELF (%THE-ARRAY (%ARGUMENTS PROPOSITION))) (VALUE THECOLLECTION)
     (POSITION 1))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (CL:SETF (CL:AREF SELF POSITION) VALUE))
   PROPOSITION))

;;; (DEFUN (CONTINUE-CONTAINED-BY-PROOF KEYWORD) ...)

(CL:DEFUN CONTINUE-CONTAINED-BY-PROOF (FRAME LASTMOVE)
  (CL:COND
   ((CL:EQ LASTMOVE KWD-STRATEGIES-DOWN)
    (CL:WHEN (CL:EQ (%STATE FRAME) KWD-STRATEGIES-CONTAINED-BY)
     (RESET-CURRENT-PATTERN-RECORD FRAME KWD-STRATEGIES-LOCAL))
    (CREATE-DOWN-FRAME FRAME
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR
       (%THE-ARRAY (%ARGUMENTS (%PROPOSITION FRAME))))
      0))
    (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
     SYM-STRATEGIES-LOGIC-BACK (%DOWN FRAME) NULL)
    KWD-STRATEGIES-MOVE-DOWN)
   ((CL:EQ LASTMOVE KWD-STRATEGIES-UP-TRUE)
    (CL:ECASE (%ARGUMENT-CURSOR FRAME)
     (0 (CL:SETF (%DOWN FRAME) NULL)
      (CL:SETF (%ARGUMENT-CURSOR FRAME) 1) KWD-STRATEGIES-MOVE-DOWN)
     (1
      (CL:WHEN (CL:NOT (CL:EQ (%DOWN FRAME) NULL))
       (POP-FRAMES-UP-TO (%DOWN FRAME)))
      (CL:IF
       (CL:EQ
        (%STATE
         (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
          SYM-STRATEGIES-LOGIC-BACK NULL))
        KWD-STRATEGIES-POPPED)
       (CL:PROGN (SET-FRAME-TRUTH-VALUE FRAME TRUE-TRUTH-VALUE)
        KWD-STRATEGIES-FINAL-SUCCESS)
       (CL:PROGN
        (CL:SETF (%DOWN FRAME)
         (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
          SYM-STRATEGIES-LOGIC-BACK NULL))
        (CL:SETF (%ARGUMENT-CURSOR FRAME) 0)
        KWD-STRATEGIES-MOVE-DOWN)))))
   ((CL:EQ LASTMOVE KWD-STRATEGIES-UP-FAIL)
    (CL:ECASE (%ARGUMENT-CURSOR FRAME)
     (0 (SET-FRAME-TRUTH-VALUE FRAME TRUE-TRUTH-VALUE)
      KWD-STRATEGIES-FINAL-SUCCESS)
     (1
      (CL:LET*
       ((PARENT (%UP FRAME)) (PARENTGOAL (%PROPOSITION PARENT)))
       (CL:WHEN
        (CL:AND (CL:EQ (%KIND PARENTGOAL) KWD-STRATEGIES-IMPLIES)
         (CLOSED-TERM?
          (CL:AREF
           (CL:THE CL:SIMPLE-VECTOR
            (%THE-ARRAY (%ARGUMENTS PARENTGOAL)))
           1)))
        (SET-FRAME-TRUTH-VALUE FRAME FALSE-TRUTH-VALUE)
        (CL:SETF (%NEXT-STRATEGIES PARENT) NIL))
       (CL:WHEN
        (CL:NOT
         (CL:EQ
          (%STATE
           (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
            SYM-STRATEGIES-LOGIC-BACK NULL))
          KWD-STRATEGIES-POPPED))
        (POP-FRAMES-UP-TO
         (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
          SYM-STRATEGIES-LOGIC-BACK NULL)))
       KWD-STRATEGIES-FAILURE))))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" LASTMOVE
      "' is not a valid case option")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))

;;; (DEFUN (TRY-SUBSUMPTION-TEST KEYWORD) ...)

(CL:DEFUN TRY-SUBSUMPTION-TEST (FRAME)
  (CL:LET*
   ((PROPOSITION (%PROPOSITION FRAME))
    (SUBCOLLECTIONARG
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
      0))
    (SUPERCOLLECTIONARG
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS PROPOSITION)))
      1))
    (SUBCOLLECTION (ARGUMENT-BOUND-TO SUBCOLLECTIONARG))
    (SUPERCOLLECTION (ARGUMENT-BOUND-TO SUPERCOLLECTIONARG)))
   (CL:WHEN (%REVERSE-POLARITY? FRAME)
    (CL:RETURN-FROM TRY-SUBSUMPTION-TEST KWD-STRATEGIES-FAILURE))
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ SUBCOLLECTION NULL))
     (CL:NOT
      (CL:EQ
       (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS SUBCOLLECTION)
        SYM-STRATEGIES-LOGIC-EXTERNAL-VARIABLES NULL)
       NULL)))
    (CL:LET* ((FOUND?-000 CL:NIL))
     (CL:LET*
      ((VAR NULL)
       (VECTOR-000
        (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS SUBCOLLECTION)
         SYM-STRATEGIES-LOGIC-EXTERNAL-VARIABLES NULL))
       (INDEX-000 0) (LENGTH-000 (LENGTH VECTOR-000)))
      (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
      (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
       (CL:SETQ VAR
        (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-000))
         INDEX-000))
       (CL:WHEN (CL:NOT (ARGUMENT-BOUND? VAR))
        (CL:SETQ FOUND?-000 CL:T) (CL:RETURN))
       (CL:SETQ INDEX-000 (CL:1+ INDEX-000))))
     (CL:IF FOUND?-000
      (CL:RETURN-FROM TRY-SUBSUMPTION-TEST KWD-STRATEGIES-FAILURE)
      (CL:SETQ SUBCOLLECTION
       (INSTANTIATE-EXTERNAL-BINDINGS SUBCOLLECTION)))))
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ SUPERCOLLECTION NULL))
     (CL:NOT
      (CL:EQ
       (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS SUPERCOLLECTION)
        SYM-STRATEGIES-LOGIC-EXTERNAL-VARIABLES NULL)
       NULL)))
    (CL:LET* ((FOUND?-001 CL:NIL))
     (CL:LET*
      ((VAR NULL)
       (VECTOR-001
        (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS SUPERCOLLECTION)
         SYM-STRATEGIES-LOGIC-EXTERNAL-VARIABLES NULL))
       (INDEX-001 0) (LENGTH-001 (LENGTH VECTOR-001)))
      (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-001 LENGTH-001))
      (CL:LOOP WHILE (CL:< INDEX-001 LENGTH-001) DO
       (CL:SETQ VAR
        (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-001))
         INDEX-001))
       (CL:WHEN (CL:NOT (ARGUMENT-BOUND? VAR))
        (CL:SETQ FOUND?-001 CL:T) (CL:RETURN))
       (CL:SETQ INDEX-001 (CL:1+ INDEX-001))))
     (CL:IF FOUND?-001
      (CL:RETURN-FROM TRY-SUBSUMPTION-TEST KWD-STRATEGIES-FAILURE)
      (CL:SETQ SUPERCOLLECTION
       (INSTANTIATE-EXTERNAL-BINDINGS SUPERCOLLECTION)))))
   (CL:LET*
    ((TRUTHVALUE
      (DESCRIPTION-SPECIALIZES-DESCRIPTION? SUBCOLLECTION
       SUPERCOLLECTION)))
    (SET-FRAME-TRUTH-VALUE FRAME TRUTHVALUE)
    (CL:IF
     (CL:OR (CL:EQ TRUTHVALUE TRUE-TRUTH-VALUE)
      (CL:EQ TRUTHVALUE DEFAULT-TRUE-TRUTH-VALUE))
     KWD-STRATEGIES-FINAL-SUCCESS KWD-STRATEGIES-FAILURE))))

;;; (DEFUN (TRY-EQUIVALENCE-PROOF KEYWORD) ...)

(CL:DEFUN TRY-EQUIVALENCE-PROOF (FRAME)
  (CL:LET*
   ((ARGUMENTS (%ARGUMENTS (%PROPOSITION FRAME)))
    (FIRSTARG
     (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY ARGUMENTS)) 0))
    (FIRSTVALUE (ARGUMENT-BOUND-TO FIRSTARG))
    (SECONDARG
     (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY ARGUMENTS)) 1))
    (SECONDVALUE (ARGUMENT-BOUND-TO SECONDARG)) (SUCCESS? CL:NIL))
   (CL:WHEN (%REVERSE-POLARITY? FRAME)
    (CL:COND
     ((CL:OR (CL:EQ FIRSTVALUE NULL) (CL:EQ SECONDVALUE NULL))
      (CL:RETURN-FROM TRY-EQUIVALENCE-PROOF KWD-STRATEGIES-FAILURE))
     ((CL:OR (SKOLEM? FIRSTVALUE) (SKOLEM? SECONDVALUE))
      (CL:RETURN-FROM TRY-EQUIVALENCE-PROOF KWD-STRATEGIES-FAILURE))
     ((EQL? FIRSTVALUE SECONDVALUE)
      (SET-FRAME-TRUTH-VALUE FRAME FALSE-TRUTH-VALUE)
      (CL:RETURN-FROM TRY-EQUIVALENCE-PROOF
       KWD-STRATEGIES-TERMINAL-FAILURE))
     (CL:T (SET-FRAME-TRUTH-VALUE FRAME TRUE-TRUTH-VALUE)
      (CL:RETURN-FROM TRY-EQUIVALENCE-PROOF
       KWD-STRATEGIES-FINAL-SUCCESS))))
   (CL:IF (CL:NOT (CL:EQ FIRSTVALUE NULL))
    (CL:IF (CL:NOT (CL:EQ SECONDVALUE NULL))
     (CL:SETQ SUCCESS? (EQL? FIRSTVALUE SECONDVALUE))
     (CL:SETQ SUCCESS?
      (BIND-VARIABLE-TO-VALUE? SECONDARG FIRSTVALUE CL:T)))
    (CL:IF (CL:NOT (CL:EQ SECONDVALUE NULL))
     (CL:SETQ SUCCESS?
      (BIND-VARIABLE-TO-VALUE? FIRSTARG SECONDVALUE CL:T))
     (CL:SETQ SUCCESS? CL:NIL)))
   (CL:IF SUCCESS? KWD-STRATEGIES-FINAL-SUCCESS KWD-STRATEGIES-FAILURE)))

;;; (DEFCLASS CLUSTERED-CONJUNCTION-PROOF-ADJUNCT ...)

(CL:DEFCLASS CLUSTERED-CONJUNCTION-PROOF-ADJUNCT (PROOF-ADJUNCT)
  ((CLUSTER-FRAMES :ALLOCATION :INSTANCE :ACCESSOR %CLUSTER-FRAMES)))

(CL:DEFUN NEW-CLUSTERED-CONJUNCTION-PROOF-ADJUNCT ()
  (CL:LET* ((SELF NULL))
   (CL:SETQ SELF
    (CL:MAKE-INSTANCE (CL:QUOTE CLUSTERED-CONJUNCTION-PROOF-ADJUNCT)))
   (CL:SETF (%CLUSTER-FRAMES SELF) NULL) SELF))

(CL:DEFMETHOD PRIMARY-TYPE ((SELF CLUSTERED-CONJUNCTION-PROOF-ADJUNCT))
  SGT-STRATEGIES-LOGIC-CLUSTERED-CONJUNCTION-PROOF-ADJUNCT)

(CL:DEFUN ACCESS-CLUSTERED-CONJUNCTION-PROOF-ADJUNCT-SLOT-VALUE (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-STRATEGIES-LOGIC-CLUSTER-FRAMES)
    (CL:IF SETVALUE? (CL:SETF (%CLUSTER-FRAMES SELF) VALUE)
     (CL:SETQ VALUE (%CLUSTER-FRAMES SELF))))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" SLOTNAME
      "' is not a valid case option")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
  VALUE)

;;; (DEFUN (CONTINUE-CLUSTERED-CONJUNCTION-PROOF KEYWORD) ...)

(CL:DEFUN CONTINUE-CLUSTERED-CONJUNCTION-PROOF (ANDFRAME LASTMOVE)
  (CL:LET*
   ((STATE (%STATE ANDFRAME))
    (ADJUNCT
     (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS ANDFRAME)
      SYM-STRATEGIES-LOGIC-PROOF-ADJUNCT NULL))
    (PROPOSITION (%PROPOSITION ANDFRAME))
    (ARGUMENTS (%ARGUMENTS PROPOSITION))
    (NOFARGUMENTS (LENGTH ARGUMENTS)) (DOWNFRAME NULL))
   (CL:DECLARE (CL:TYPE CL:FIXNUM NOFARGUMENTS))
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ *QUERYITERATOR* NULL))
     (CL:NOT (CL:EQ (%PARTIAL-MATCH-STRATEGY *QUERYITERATOR*) NULL)))
    (CL:SETF (%STATE ANDFRAME) KWD-STRATEGIES-AND)
    (CL:SETQ LASTMOVE (OLD-INTERPRET-AND-SCORES ANDFRAME LASTMOVE))
    (CL:SETF (%STATE ANDFRAME) STATE))
   (CL:COND
    ((CL:EQ LASTMOVE KWD-STRATEGIES-DOWN)
     (CL:WHEN (CL:EQ ADJUNCT NULL)
      (CL:LET* ((SELF-000 (NEW-CLUSTERED-CONJUNCTION-PROOF-ADJUNCT)))
       (CL:SETF (%CLUSTER-FRAMES SELF-000) (NEW-VECTOR NOFARGUMENTS))
       (CL:SETQ ADJUNCT SELF-000))
      (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS ANDFRAME)
       SYM-STRATEGIES-LOGIC-PROOF-ADJUNCT ADJUNCT NULL))
     (CL:SETQ DOWNFRAME
      (CL:AREF
       (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%CLUSTER-FRAMES ADJUNCT)))
       (CL:THE CL:FIXNUM (%ARGUMENT-CURSOR ANDFRAME))))
     (CL:IF (CL:EQ DOWNFRAME NULL)
      (CREATE-SUBGOAL-FRAME ANDFRAME
       (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY ARGUMENTS))
        (CL:THE CL:FIXNUM (%ARGUMENT-CURSOR ANDFRAME)))
       NULL)
      (CL:SETF (%DOWN ANDFRAME) DOWNFRAME))
     KWD-STRATEGIES-MOVE-DOWN)
    ((CL:EQ LASTMOVE KWD-STRATEGIES-UP-TRUE)
     (CL:SETF (%TRUTH-VALUE ANDFRAME)
      (CL:IF (CL:EQ (%TRUTH-VALUE ANDFRAME) NULL)
       (%TRUTH-VALUE (%RESULT ANDFRAME))
       (CONJOIN-TRUTH-VALUES (%TRUTH-VALUE ANDFRAME)
        (%TRUTH-VALUE (%RESULT ANDFRAME)))))
     (CL:WHEN *RECORD-JUSTIFICATIONS?*
      (RECORD-AND-INTRODUCTION-JUSTIFICATION ANDFRAME LASTMOVE))
     (CL:LET
      ((SELF (%THE-ARRAY (%CLUSTER-FRAMES ADJUNCT)))
       (VALUE (%DOWN ANDFRAME)) (POSITION (%ARGUMENT-CURSOR ANDFRAME)))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:SETF (CL:AREF SELF POSITION) VALUE))
     (CL:COND
      ((CL:= (CL:1+ (%ARGUMENT-CURSOR ANDFRAME)) NOFARGUMENTS)
       (CL:LET*
        ((I NULL-INTEGER) (ITER-000 1) (UPPER-BOUND-000 NOFARGUMENTS)
         (UNBOUNDED?-000 (NULL? UPPER-BOUND-000)))
        (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-000 UPPER-BOUND-000))
        (CL:LOOP WHILE
         (CL:OR UNBOUNDED?-000 (CL:<= ITER-000 UPPER-BOUND-000)) DO
         (CL:SETQ I ITER-000)
         (CL:WHEN
          (CL:NOT
           (CL:EQ
            (CL:AREF
             (CL:THE CL:SIMPLE-VECTOR
              (%THE-ARRAY (%CLUSTER-FRAMES ADJUNCT)))
             (CL:THE CL:FIXNUM (CL:- NOFARGUMENTS I)))
            NULL))
          (CL:SETF (%ARGUMENT-CURSOR ANDFRAME) (CL:- NOFARGUMENTS I))
          (CL:SETF (%DOWN ANDFRAME)
           (CL:AREF
            (CL:THE CL:SIMPLE-VECTOR
             (%THE-ARRAY (%CLUSTER-FRAMES ADJUNCT)))
            (CL:THE CL:FIXNUM (%ARGUMENT-CURSOR ANDFRAME))))
          (CL:RETURN-FROM CONTINUE-CLUSTERED-CONJUNCTION-PROOF
           KWD-STRATEGIES-CONTINUING-SUCCESS))
         (CL:SETQ ITER-000 (CL:1+ ITER-000))))
       (CL:SETF (%DOWN ANDFRAME) NULL) KWD-STRATEGIES-FINAL-SUCCESS)
      (CL:T
       (CL:SETF (%ARGUMENT-CURSOR ANDFRAME)
        (CL:1+ (%ARGUMENT-CURSOR ANDFRAME)))
       (CL:SETQ DOWNFRAME
        (CL:AREF
         (CL:THE CL:SIMPLE-VECTOR
          (%THE-ARRAY (%CLUSTER-FRAMES ADJUNCT)))
         (CL:THE CL:FIXNUM (%ARGUMENT-CURSOR ANDFRAME))))
       (CL:IF (CL:EQ DOWNFRAME NULL)
        (CREATE-SUBGOAL-FRAME ANDFRAME
         (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY ARGUMENTS))
          (CL:THE CL:FIXNUM (%ARGUMENT-CURSOR ANDFRAME)))
         NULL)
        (CL:SETF (%DOWN ANDFRAME) DOWNFRAME))
       KWD-STRATEGIES-MOVE-DOWN)))
    ((CL:EQ LASTMOVE KWD-STRATEGIES-UP-FAIL)
     (CL:WHEN
      (CL:AND (CL:NOT (CL:EQ *QUERYITERATOR* NULL))
       (CL:NOT (CL:EQ (%PARTIAL-MATCH-STRATEGY *QUERYITERATOR*) NULL)))
      (CL:SETF (%DOWN ANDFRAME) NULL)
      (SET-FRAME-TRUTH-VALUE ANDFRAME NULL)
      (CL:RETURN-FROM CONTINUE-CLUSTERED-CONJUNCTION-PROOF
       KWD-STRATEGIES-TERMINAL-FAILURE))
     (CL:WHEN
      (CL:EQ
       (CL:AREF
        (CL:THE CL:SIMPLE-VECTOR
         (%THE-ARRAY (%CLUSTER-FRAMES ADJUNCT)))
        (CL:THE CL:FIXNUM (%ARGUMENT-CURSOR ANDFRAME)))
       NULL)
      (CL:LET*
       ((TEST-VALUE-000
         (%KIND
          (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY ARGUMENTS))
           (CL:THE CL:FIXNUM (%ARGUMENT-CURSOR ANDFRAME))))))
       (CL:COND
        ((CL:OR (CL:EQ TEST-VALUE-000 KWD-STRATEGIES-AND)
          (CL:EQ TEST-VALUE-000 KWD-STRATEGIES-FUNCTION)
          (CL:EQ TEST-VALUE-000 KWD-STRATEGIES-PREDICATE)
          (CL:EQ TEST-VALUE-000 KWD-STRATEGIES-IMPLIES))
         (CL:SETF (%DOWN ANDFRAME) NULL)
         (SET-FRAME-TRUTH-VALUE ANDFRAME NULL)
         (CL:RETURN-FROM CONTINUE-CLUSTERED-CONJUNCTION-PROOF
          KWD-STRATEGIES-TERMINAL-FAILURE))
        (CL:T))))
     (CL:LET
      ((SELF (%THE-ARRAY (%CLUSTER-FRAMES ADJUNCT))) (VALUE NULL)
       (POSITION (%ARGUMENT-CURSOR ANDFRAME)))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:SETF (CL:AREF SELF POSITION) VALUE))
     (CL:LET*
      ((I NULL-INTEGER) (ITER-001 1)
       (UPPER-BOUND-001 (%ARGUMENT-CURSOR ANDFRAME))
       (UNBOUNDED?-001 (NULL? UPPER-BOUND-001)))
      (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-001 UPPER-BOUND-001))
      (CL:LOOP WHILE
       (CL:OR UNBOUNDED?-001 (CL:<= ITER-001 UPPER-BOUND-001)) DO
       (CL:SETQ I ITER-001)
       (CL:WHEN
        (CL:NOT
         (CL:EQ
          (CL:AREF
           (CL:THE CL:SIMPLE-VECTOR
            (%THE-ARRAY (%CLUSTER-FRAMES ADJUNCT)))
           (CL:THE CL:FIXNUM (CL:- (%ARGUMENT-CURSOR ANDFRAME) I)))
          NULL))
        (CL:SETF (%ARGUMENT-CURSOR ANDFRAME)
         (CL:- (%ARGUMENT-CURSOR ANDFRAME) I))
        (CL:SETF (%DOWN ANDFRAME)
         (CL:AREF
          (CL:THE CL:SIMPLE-VECTOR
           (%THE-ARRAY (%CLUSTER-FRAMES ADJUNCT)))
          (CL:THE CL:FIXNUM (%ARGUMENT-CURSOR ANDFRAME))))
        (CL:RETURN-FROM CONTINUE-CLUSTERED-CONJUNCTION-PROOF
         KWD-STRATEGIES-MOVE-DOWN))
       (CL:SETQ ITER-001 (CL:1+ ITER-001))))
     (CL:SETF (%DOWN ANDFRAME) NULL)
     (SET-FRAME-TRUTH-VALUE ANDFRAME NULL)
     KWD-STRATEGIES-TERMINAL-FAILURE)
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" LASTMOVE
       "' is not a valid case option")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))

;;; (DEFUN (PUSH-MONOTONIC-WORLD WORLD) ...)

(CL:DEFUN PUSH-MONOTONIC-WORLD ()
  (CL:LET* ((WORLD (PUSH-WORLD)))
   (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS WORLD)
    SYM-STRATEGIES-LOGIC-MONOTONIC?
    (CL:IF CL:T TRUE-WRAPPER FALSE-WRAPPER) FALSE-WRAPPER)
   WORLD))

;;; (DEFUN (TRY-DISJUNCTIVE-IMPLICATION-PROOF KEYWORD) ...)

(CL:DEFUN TRY-DISJUNCTIVE-IMPLICATION-PROOF (FRAME)
  (CL:LET*
   ((PARALLELTHREAD (%CURRENT-PARALLEL-THREAD *QUERYITERATOR*))
    (PARALLELFRAME (%UP (%TOP-CONTROL-FRAME PARALLELTHREAD))))
   (CL:LET*
    ((DISJUNCTIVEPROP (%PROPOSITION FRAME))
     (DISJUNCTS (%ARGUMENTS DISJUNCTIVEPROP))
     (SUBGOALDISJUNCT
      (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY DISJUNCTS)) 0)))
    (CL:IF (%UNBOUND-VARIABLES? PARALLELFRAME)
     (CL:PROGN (CL:SETQ SUBGOALDISJUNCT NULL)
      (CL:LET*
       ((D NULL) (VECTOR-000 DISJUNCTS) (INDEX-000 0)
        (LENGTH-000 (LENGTH VECTOR-000)))
       (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
       (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
        (CL:SETQ D
         (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-000))
          INDEX-000))
        (CL:WHEN (CL:NOT (ALL-ARGUMENTS-BOUND? D))
         (CL:WHEN (CL:NOT (CL:EQ SUBGOALDISJUNCT NULL))
          (CL:RETURN-FROM TRY-DISJUNCTIVE-IMPLICATION-PROOF
           KWD-STRATEGIES-FAILURE))
         (CL:SETQ SUBGOALDISJUNCT D))
        (CL:SETQ INDEX-000 (CL:1+ INDEX-000)))))
     (CL:LET*
      ((D NULL) (VECTOR-001 DISJUNCTS) (INDEX-001 0)
       (LENGTH-001 (LENGTH VECTOR-001)))
      (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-001 LENGTH-001))
      (CL:LOOP WHILE (CL:< INDEX-001 LENGTH-001) DO
       (CL:SETQ D
        (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-001))
         INDEX-001))
       (CL:WHEN (CL:NOT (CL:EQ (%KIND D) KWD-STRATEGIES-NOT))
        (CL:SETQ SUBGOALDISJUNCT D) (CL:RETURN))
       (CL:SETQ INDEX-001 (CL:1+ INDEX-001)))))
    (ENTER-HYPOTHETICAL-WORLD PARALLELFRAME)
    (CL:HANDLER-CASE
     (CL:LET*
      ((NEGATEDTRUTHVALUE? (%REVERSE-POLARITY? FRAME))
       (ASSUMPTION NULL))
      (CL:LET*
       ((DISJ NULL) (VECTOR-002 DISJUNCTS) (INDEX-002 0)
        (LENGTH-002 (LENGTH VECTOR-002)))
       (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-002 LENGTH-002))
       (CL:LOOP WHILE (CL:< INDEX-002 LENGTH-002) DO
        (CL:SETQ DISJ
         (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-002))
          INDEX-002))
        (CL:WHEN (CL:NOT (CL:EQ DISJ SUBGOALDISJUNCT))
         (CL:SETQ ASSUMPTION
          (RECURSIVELY-FASTEN-DOWN-PROPOSITIONS
           (CL:IF (CL:NOT NEGATEDTRUTHVALUE?)
            (INHERIT-PROPOSITION DISJ (NEW-KEY-VALUE-LIST))
            (CONJOIN-PROPOSITIONS
             (INHERIT-AS-TOP-LEVEL-PROPOSITION DISJ
              (NEW-KEY-VALUE-LIST))))
           CL:NIL))
         (CL:WHEN
          (CL:AND (CL:NOT (CL:EQ *TRACED-KEYWORDS* NULL))
           (MEMB? *TRACED-KEYWORDS* KWD-STRATEGIES-GOAL-TREE))
          (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) EOL
           "  Assume that " ASSUMPTION " is "
           (CL:IF NEGATEDTRUTHVALUE? "true" "false") "." EOL EOL))
         (ASSIGN-TRUTH-VALUE ASSUMPTION
          (CL:IF NEGATEDTRUTHVALUE? TRUE-WRAPPER FALSE-WRAPPER)))
        (CL:SETQ INDEX-002 (CL:1+ INDEX-002)))))
     (CLASH ()
      (CL:RETURN-FROM TRY-DISJUNCTIVE-IMPLICATION-PROOF
       KWD-STRATEGIES-FINAL-SUCCESS)))
    (CL:LET*
     ((D NULL) (VECTOR-003 DISJUNCTS) (INDEX-003 0)
      (LENGTH-003 (LENGTH VECTOR-003)) (I NULL-INTEGER) (ITER-000 0))
     (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-003 LENGTH-003 I ITER-000))
     (CL:LOOP WHILE (CL:< INDEX-003 LENGTH-003) DO
      (CL:SETQ D
       (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-003))
        INDEX-003))
      (CL:SETQ I ITER-000)
      (CL:WHEN (CL:EQ D SUBGOALDISJUNCT)
       (CL:SETF (%ARGUMENT-CURSOR FRAME) I) (CL:RETURN))
      (CL:SETQ INDEX-003 (CL:1+ INDEX-003))
      (CL:SETQ ITER-000 (CL:1+ ITER-000))))
    KWD-STRATEGIES-MOVE-DOWN)))

;;; (DEFGLOBAL *PL-ANONYMOUS-MODULE* ...)

(CL:DEFVAR *PL-ANONYMOUS-MODULE* NULL)

;;; (DEFUN (CREATE-ANONYMOUS-INSTANCE LOGIC-OBJECT) ...)

(CL:DEFUN CREATE-ANONYMOUS-INSTANCE (PREFIX SKOLEM?)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING PREFIX))
  #+MCL
  (CL:CHECK-TYPE PREFIX CL:SIMPLE-STRING)
  (CL:LET*
   ((INSTANCENAME
     (INTERN-SYMBOL-IN-MODULE
      (YIELD-UNIQUE-GENSYM-NAME PREFIX *PL-ANONYMOUS-MODULE*)
      *PL-ANONYMOUS-MODULE* CL:T))
    (INSTANCE
     (CL:IF SKOLEM? (CREATE-SKOLEM NULL INSTANCENAME)
      (CREATE-LOGIC-INSTANCE
       (INTERN-SURROGATE-IN-MODULE (%SYMBOL-NAME INSTANCENAME)
        (%HOME-CONTEXT INSTANCENAME) CL:T)
       NULL))))
   (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS INSTANCE)
    SYM-STRATEGIES-LOGIC-HYPOTHESIZED-INSTANCE?
    (CL:IF CL:T TRUE-WRAPPER FALSE-WRAPPER) FALSE-WRAPPER)
   INSTANCE))

;;; (DEFUN (CREATE-HYPOTHESIZED-INSTANCE LOGIC-OBJECT) ...)

(CL:DEFUN CREATE-HYPOTHESIZED-INSTANCE (PREFIX)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING PREFIX))
  #+MCL
  (CL:CHECK-TYPE PREFIX CL:SIMPLE-STRING)
  (CL:LET* ((INSTANCE (CREATE-ANONYMOUS-INSTANCE PREFIX CL:T)))
   (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS INSTANCE)
    SYM-STRATEGIES-LOGIC-HYPOTHESIZED-INSTANCE?
    (CL:IF CL:T TRUE-WRAPPER FALSE-WRAPPER) FALSE-WRAPPER)
   INSTANCE))

;;; (DEFUN (TRY-UNIVERSAL-INTRODUCTION-PROOF KEYWORD) ...)

(CL:DEFUN TRY-UNIVERSAL-INTRODUCTION-PROOF (FRAME)
  (CL:LET*
   ((PARALLELTHREAD (%CURRENT-PARALLEL-THREAD *QUERYITERATOR*))
    (PARALLELFRAME (%UP (%TOP-CONTROL-FRAME PARALLELTHREAD))))
   (ENTER-HYPOTHETICAL-WORLD PARALLELFRAME)
   (CL:LET*
    ((FORALLPROP (%PROPOSITION FRAME))
     (ANTECEDENT
      (CL:AREF
       (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS FORALLPROP)))
       0))
     (CONSEQUENT
      (CL:AREF
       (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY (%ARGUMENTS FORALLPROP)))
       1)))
    (CL:LET*
     ((V NULL)
      (VECTOR-000
       (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FORALLPROP)
        SYM-STRATEGIES-LOGIC-IO-VARIABLES NULL))
      (INDEX-000 0) (LENGTH-000 (LENGTH VECTOR-000)))
     (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
     (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
      (CL:SETQ V
       (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-000))
        INDEX-000))
      (CL:LET* ((SKOLEM (CREATE-HYPOTHESIZED-INSTANCE "anonymous")))
       (CL:WHEN (CL:NOT (CL:EQ (%SKOLEM-TYPE V) NULL))
        (ASSERT-MEMBER-OF-PROPOSITION SKOLEM
         (GET-DESCRIPTION (%SKOLEM-TYPE V))))
       (BIND-VARIABLE-TO-VALUE? V SKOLEM CL:NIL))
      (CL:SETQ INDEX-000 (CL:1+ INDEX-000))))
    (CL:HANDLER-CASE
     (CL:LET*
      ((PROP NULL)
       (ITER-000 (INHERIT-AS-TOP-LEVEL-PROPOSITION ANTECEDENT NULL)))
      (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
       (CL:SETQ PROP (%%VALUE ITER-000))
       (RECURSIVELY-FASTEN-DOWN-PROPOSITIONS PROP CL:NIL)
       (ASSIGN-TRUTH-VALUE PROP TRUE-WRAPPER)
       (CL:SETQ ITER-000 (%%REST ITER-000))))
     (CLASH ()
      (CL:RETURN-FROM TRY-UNIVERSAL-INTRODUCTION-PROOF
       KWD-STRATEGIES-FINAL-SUCCESS)))
    (CREATE-DOWN-FRAME FRAME CONSEQUENT) KWD-STRATEGIES-MOVE-DOWN)))

;;; (DEFUN (TRY-REFUTATION-PROOF KEYWORD) ...)

(CL:DEFUN TRY-REFUTATION-PROOF (FRAME)
  (CL:LET*
   ((PARALLELTHREAD (%CURRENT-PARALLEL-THREAD *QUERYITERATOR*))
    (PARALLELFRAME (%UP (%TOP-CONTROL-FRAME PARALLELTHREAD))))
   (CL:WHEN (%UNBOUND-VARIABLES? PARALLELFRAME)
    (CL:RETURN-FROM TRY-REFUTATION-PROOF KWD-STRATEGIES-FAILURE))
   (ENTER-HYPOTHETICAL-WORLD PARALLELFRAME)
   (CL:HANDLER-CASE
    (CL:LET* ((NEGATEDTRUTHVALUE? (%REVERSE-POLARITY? FRAME)))
     (CL:LET*
      ((PROP NULL)
       (ITER-000
        (INHERIT-AS-TOP-LEVEL-PROPOSITION (%PROPOSITION FRAME) NULL)))
      (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
       (CL:SETQ PROP (%%VALUE ITER-000))
       (CL:WHEN
        (CL:AND (CL:NOT (CL:EQ *TRACED-KEYWORDS* NULL))
         (MEMB? *TRACED-KEYWORDS* KWD-STRATEGIES-GOAL-TREE))
        (%%PRINT-STREAM (%NATIVE-STREAM STANDARD-OUTPUT) EOL
         "  Assume that " PROP " is "
         (CL:IF NEGATEDTRUTHVALUE? "true" "false") "." EOL))
       (RECURSIVELY-FASTEN-DOWN-PROPOSITIONS PROP CL:NIL)
       (ASSIGN-TRUTH-VALUE PROP
        (CL:IF NEGATEDTRUTHVALUE? TRUE-WRAPPER FALSE-WRAPPER))
       (CL:SETQ ITER-000 (%%REST ITER-000)))))
    (CLASH ()
     (CL:RETURN-FROM TRY-REFUTATION-PROOF
      KWD-STRATEGIES-FINAL-SUCCESS)))
   KWD-STRATEGIES-FAILURE))

;;; (DEFUN (CONTINUE-FORALL-PROOF KEYWORD) ...)

(CL:DEFUN CONTINUE-FORALL-PROOF (FRAME LASTMOVE)
  (CL:SETQ LASTMOVE LASTMOVE)
  (CL:LET* ((TEST-VALUE-000 CL:NIL))
   (CL:IF (%REVERSE-POLARITY? FRAME) (CL:SETQ TEST-VALUE-000 CL:T)
    (CL:LET* ((ALWAYS?-000 CL:T))
     (CL:LET*
      ((VAR NULL)
       (VECTOR-000
        (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS (%PROPOSITION FRAME))
         SYM-STRATEGIES-LOGIC-IO-VARIABLES NULL))
       (INDEX-000 0) (LENGTH-000 (LENGTH VECTOR-000)))
      (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
      (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
       (CL:SETQ VAR
        (CL:AREF (CL:THE CL:SIMPLE-VECTOR (%THE-ARRAY VECTOR-000))
         INDEX-000))
       (CL:WHEN
        (CL:NOT (CLOSED-TERM? (GET-DESCRIPTION (LOGICAL-TYPE VAR))))
        (CL:SETQ ALWAYS?-000 CL:NIL) (CL:RETURN))
       (CL:SETQ INDEX-000 (CL:1+ INDEX-000))))
     (CL:SETQ TEST-VALUE-000 ALWAYS?-000)))
   (CL:IF TEST-VALUE-000
    (CL:PROGN (CL:SETF (%STATE FRAME) KWD-STRATEGIES-ITERATIVE-FORALL)
     KWD-STRATEGIES-MOVE-IN-PLACE)
    (CL:PROGN
     (CL:LET* ((TEST-VALUE-001 (%KEYWORD (CURRENT-INFERENCE-LEVEL))))
      (CL:COND
       ((CL:OR (CL:EQ TEST-VALUE-001 KWD-STRATEGIES-NORMAL)
         (CL:EQ TEST-VALUE-001 KWD-STRATEGIES-REFUTATION))
        (OVERLAY-WITH-STRATEGY-FRAME FRAME
         KWD-STRATEGIES-UNIVERSAL-INTRODUCTION)
        KWD-STRATEGIES-MOVE-IN-PLACE)
       (CL:T KWD-STRATEGIES-FAILURE)))))))

;;; (DEFUN (CONTINUE-EXISTS-PROOF KEYWORD) ...)

(CL:DEFUN CONTINUE-EXISTS-PROOF (FRAME LASTMOVE)
  (CL:COND
   ((CL:EQ LASTMOVE KWD-STRATEGIES-DOWN) KWD-STRATEGIES-MOVE-DOWN)
   ((CL:EQ LASTMOVE KWD-STRATEGIES-UP-TRUE)
    (CL:LET* ((RESULT (%RESULT FRAME)))
     (CL:WHEN (CL:NOT (CL:EQ (%PARTIAL-MATCH-FRAME RESULT) NULL))
      (PROPAGATE-FRAME-PARTIAL-TRUTH (%PARTIAL-MATCH-FRAME RESULT)
       FRAME))
     (PROPAGATE-FRAME-TRUTH-VALUE RESULT FRAME)
     (CL:WHEN *RECORD-JUSTIFICATIONS?*
      (RECORD-EXISTENTIAL-INTRODUCTION-JUSTIFICATION FRAME LASTMOVE))
     (CL:IF (CL:EQ (%DOWN FRAME) NULL) KWD-STRATEGIES-FINAL-SUCCESS
      KWD-STRATEGIES-CONTINUING-SUCCESS)))
   ((CL:EQ LASTMOVE KWD-STRATEGIES-UP-FAIL)
    (CL:LET* ((RESULT (%RESULT FRAME)))
     (CL:WHEN (CL:NOT (CL:EQ (%PARTIAL-MATCH-FRAME RESULT) NULL))
      (PROPAGATE-FRAME-PARTIAL-TRUTH (%PARTIAL-MATCH-FRAME RESULT)
       FRAME))
     (PROPAGATE-FRAME-TRUTH-VALUE RESULT FRAME)
     (CL:IF (CL:EQ (%DOWN FRAME) NULL) KWD-STRATEGIES-FAILURE
      (CL:ERROR
       (NEW-STELLA-EXCEPTION
        "Failed subgoal of 'exists' didn't remove itself from stack.")))))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" LASTMOVE
      "' is not a valid case option")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))

;;; (DEFUN (CONTINUE-CONSTANT-PROOF KEYWORD) ...)

(CL:DEFUN CONTINUE-CONSTANT-PROOF (FRAME LASTMOVE)
  (CL:SETQ LASTMOVE LASTMOVE)
  (CL:LET* ((PROPOSITION (%PROPOSITION FRAME)))
   (CL:SETF (%TRUTH-VALUE FRAME)
    (ACCESS-IN-CONTEXT (%TRUTH-VALUE PROPOSITION)
     (%HOME-CONTEXT PROPOSITION) CL:NIL))
   (CL:WHEN
    (CL:AND *RECORD-JUSTIFICATIONS?*
     (CL:EQ
      (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
       SYM-STRATEGIES-LOGIC-JUSTIFICATION NULL)
      NULL))
    (CL:LET* ((SELF-000 (NEW-PRIMITIVE-STRATEGY)))
     (CL:SETF (%STRATEGY SELF-000) KWD-STRATEGIES-CONSTANT-PROPOSITION)
     (RECORD-GOAL-JUSTIFICATION FRAME SELF-000)))
   (CL:IF (%REVERSE-POLARITY? FRAME)
    (CL:IF (FALSE? PROPOSITION) KWD-STRATEGIES-FINAL-SUCCESS
     KWD-STRATEGIES-FAILURE)
    (CL:IF (TRUE? PROPOSITION) KWD-STRATEGIES-FINAL-SUCCESS
     KWD-STRATEGIES-FAILURE))))

;;; (DEFUN REGISTER-INFERENCE-CUTOFF ...)

(CL:DEFUN REGISTER-INFERENCE-CUTOFF (FRAME REASON)
  (CL:LOOP WHILE (CL:NOT (CL:EQ FRAME NULL)) DO
   (CL:COND
    ((CL:EQ (%STATE FRAME) KWD-STRATEGIES-FAIL)
     (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
      SYM-STRATEGIES-LOGIC-INFERENCE-CUTOFF-REASON REASON NULL))
    (CL:T))
   (CL:SETQ FRAME (%UP FRAME))))

;;; (DEFUN (CONTINUE-FAIL-PROOF KEYWORD) ...)

(CL:DEFUN CONTINUE-FAIL-PROOF (FRAME LASTMOVE)
  (CL:WHEN (%REVERSE-POLARITY? FRAME)
   (CL:ERROR
    (NEW-STELLA-EXCEPTION
     ":FAIL not implemented for negative polarity.")))
  (CL:COND
   ((CL:EQ LASTMOVE KWD-STRATEGIES-DOWN) (CREATE-CHOICE-POINT FRAME)
    (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
     SYM-STRATEGIES-LOGIC-INFERENCE-CUTOFF-REASON NULL NULL)
    KWD-STRATEGIES-MOVE-DOWN)
   ((CL:EQ LASTMOVE KWD-STRATEGIES-UP-TRUE)
    (SET-FRAME-TRUTH-VALUE FRAME FALSE-TRUTH-VALUE)
    (UNBIND-VARIABLES-BEGINNING-AT
     (%CURRENT-PATTERN-RECORD *QUERYITERATOR*)
     (%CHOICE-POINT-UNBINDING-OFFSET FRAME))
    (CL:WHEN (CL:NOT (CL:EQ (%DOWN FRAME) NULL))
     (POP-FRAMES-UP-TO (%DOWN FRAME)))
    KWD-STRATEGIES-FAILURE)
   ((CL:EQ LASTMOVE KWD-STRATEGIES-UP-FAIL)
    (CL:LET* ((RESULT KWD-STRATEGIES-FINAL-SUCCESS))
     (CL:COND
      ((CL:NOT
        (CL:EQ
         (DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FRAME)
          SYM-STRATEGIES-LOGIC-INFERENCE-CUTOFF-REASON NULL)
         NULL))
       (SET-FRAME-TRUTH-VALUE FRAME UNKNOWN-TRUTH-VALUE)
       (CL:SETQ RESULT KWD-STRATEGIES-FAILURE))
      (CL:T (SET-FRAME-TRUTH-VALUE FRAME TRUE-TRUTH-VALUE)
       (CL:WHEN *RECORD-JUSTIFICATIONS?*
        (CL:IF
         (CL:EQ (%KIND (%PROPOSITION (%UP FRAME))) KWD-STRATEGIES-NOT)
         (RECORD-CLOSED-NOT-JUSTIFICATION FRAME LASTMOVE)
         (RECORD-FAIL-JUSTIFICATION FRAME LASTMOVE)))))
     (UNBIND-VARIABLES-BEGINNING-AT
      (%CURRENT-PATTERN-RECORD *QUERYITERATOR*)
      (%CHOICE-POINT-UNBINDING-OFFSET FRAME))
     RESULT))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%NATIVE-STREAM STREAM-000) "`" LASTMOVE
      "' is not a valid case option")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))

;;; (DEFMETHOD (CONTINUE-PARTIAL-FAIL-PROOF KEYWORD) ...)

(CL:DEFMETHOD CONTINUE-PARTIAL-FAIL-PROOF ((SELF CONTROL-FRAME) LASTMOVE)
  (CL:LET* ((PMF (%PARTIAL-MATCH-FRAME SELF)))
   (CL:WHEN (CL:EQ PMF NULL)
    (CREATE-AND-LINK-PARTIAL-MATCH-FRAME SELF KWD-STRATEGIES-FAIL))
   (CONTINUE-PARTIAL-FAIL-PROOF (%PARTIAL-MATCH-FRAME SELF) LASTMOVE)))

(CL:DEFUN HELP-STARTUP-STRATEGIES1 ()
  (CL:PROGN
   (CL:SETQ KWD-STRATEGIES-DOWN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DOWN" NULL 2))
   (CL:SETQ KWD-STRATEGIES-MOVE-DOWN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MOVE-DOWN" NULL 2))
   (CL:SETQ KWD-STRATEGIES-UP-TRUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UP-TRUE" NULL 2))
   (CL:SETQ KWD-STRATEGIES-UP-FAIL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UP-FAIL" NULL 2))
   (CL:SETQ KWD-STRATEGIES-FAILURE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FAILURE" NULL 2))
   (CL:SETQ KWD-STRATEGIES-FINAL-SUCCESS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FINAL-SUCCESS" NULL 2))
   (CL:SETQ KWD-STRATEGIES-CONTINUING-SUCCESS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTINUING-SUCCESS" NULL 2))
   (CL:SETQ KWD-STRATEGIES-GOAL-TREE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GOAL-TREE" NULL 2))
   (CL:SETQ SYM-STRATEGIES-LOGIC-JUSTIFICATION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JUSTIFICATION" NULL 0))
   (CL:SETQ KWD-STRATEGIES-TERMINAL-FAILURE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TERMINAL-FAILURE" NULL 2))
   (CL:SETQ SYM-STRATEGIES-LOGIC-INFERENCE-CUTOFF-REASON
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INFERENCE-CUTOFF-REASON" NULL 0))
   (CL:SETQ SYM-STRATEGIES-STELLA-ITERATOR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ITERATOR"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-STRATEGIES-LOGIC-ANTECEDENTS-RULE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ANTECEDENTS-RULE" NULL 0))
   (CL:SETQ SYM-STRATEGIES-LOGIC-PROOF-ADJUNCT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PROOF-ADJUNCT" NULL 0))
   (CL:SETQ KWD-STRATEGIES-PARALLEL-STRATEGIES
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PARALLEL-STRATEGIES" NULL 2))
   (CL:SETQ KWD-STRATEGIES-SELECT-PARALLEL-THREAD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SELECT-PARALLEL-THREAD" NULL 2))
   (CL:SETQ KWD-STRATEGIES-FAIL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FAIL" NULL 2))
   (CL:SETQ KWD-STRATEGIES-TRUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TRUE" NULL 2))
   (CL:SETQ KWD-STRATEGIES-STRATEGIES
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STRATEGIES" NULL 2))
   (CL:SETQ SYM-STRATEGIES-LOGIC-DESCRIPTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DESCRIPTION" NULL 0))
   (CL:SETQ KWD-STRATEGIES-MOVE-IN-PLACE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MOVE-IN-PLACE" NULL 2))
   (CL:SETQ KWD-STRATEGIES-TIME-OUT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TIME-OUT" NULL 2))
   (CL:SETQ KWD-STRATEGIES-SPECIALIST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SPECIALIST" NULL 2))
   (CL:SETQ KWD-STRATEGIES-ANTECEDENTS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ANTECEDENTS" NULL 2))
   (CL:SETQ KWD-STRATEGIES-CLUSTERED-CONJUNCTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CLUSTERED-CONJUNCTION" NULL 2))
   (CL:SETQ KWD-STRATEGIES-CONDITIONAL-ANTECEDENT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONDITIONAL-ANTECEDENT" NULL 2))
   (CL:SETQ KWD-STRATEGIES-ATOMIC-GOAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ATOMIC-GOAL" NULL 2))
   (CL:SETQ KWD-STRATEGIES-DUMMY-JUSTIFICATION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DUMMY-JUSTIFICATION" NULL 2))
   (CL:SETQ KWD-STRATEGIES-LOOKUP-GOAL-CACHES
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LOOKUP-GOAL-CACHES" NULL 2))
   (CL:SETQ SYM-STRATEGIES-LOGIC-CHECK-FOR-CACHED-GOALS?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CHECK-FOR-CACHED-GOALS?" NULL 0))
   (CL:SETQ KWD-STRATEGIES-DUPLICATE-GOALS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DUPLICATE-GOALS" NULL 2))
   (CL:SETQ KWD-STRATEGIES-MANUFACTURE-SKOLEM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MANUFACTURE-SKOLEM" NULL 2))
   (CL:SETQ SGT-STRATEGIES-PL-KERNEL-KB-TOTAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TOTAL"
     (GET-STELLA-MODULE "/PL-KERNEL-KB" CL:T) 1))
   (CL:SETQ KWD-STRATEGIES-LOOKUP-ASSERTIONS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LOOKUP-ASSERTIONS" NULL 2))
   (CL:SETQ KWD-STRATEGIES-SCAN-PROPOSITIONS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SCAN-PROPOSITIONS" NULL 2))
   (CL:SETQ KWD-STRATEGIES-SCAN-PARTIAL-PROPOSITIONS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SCAN-PARTIAL-PROPOSITIONS" NULL
     2))
   (CL:SETQ KWD-STRATEGIES-SCAN-COLLECTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SCAN-COLLECTION" NULL 2))
   (CL:SETQ KWD-STRATEGIES-SHALLOW-DISPROOF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SHALLOW-DISPROOF" NULL 2))
   (CL:SETQ KWD-STRATEGIES-SCAN-FOR-VALUE-CLASH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SCAN-FOR-VALUE-CLASH" NULL 2))
   (CL:SETQ KWD-STRATEGIES-ALL-SUBGOAL-STRATEGIES
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ALL-SUBGOAL-STRATEGIES" NULL 2))
   (CL:SETQ KWD-STRATEGIES-FULL-SUBQUERY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FULL-SUBQUERY" NULL 2))
   (CL:SETQ KWD-STRATEGIES-GOAL-COMPLEMENT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GOAL-COMPLEMENT" NULL 2))
   (CL:SETQ KWD-STRATEGIES-FORWARD-GOALS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FORWARD-GOALS" NULL 2))
   (CL:SETQ KWD-STRATEGIES-IMPLIES
    (INTERN-RIGID-SYMBOL-WRT-MODULE "IMPLIES" NULL 2))
   (CL:SETQ KWD-STRATEGIES-CONTAINED-BY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTAINED-BY" NULL 2))
   (CL:SETQ KWD-STRATEGIES-EQUIVALENCE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "EQUIVALENCE" NULL 2))
   (CL:SETQ KWD-STRATEGIES-DISJUNCTIVE-IMPLICATION-INTRODUCTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE
     "DISJUNCTIVE-IMPLICATION-INTRODUCTION" NULL 2))
   (CL:SETQ KWD-STRATEGIES-UNIVERSAL-INTRODUCTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UNIVERSAL-INTRODUCTION" NULL 2))
   (CL:SETQ KWD-STRATEGIES-SUBSUMPTION-TEST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SUBSUMPTION-TEST" NULL 2))
   (CL:SETQ KWD-STRATEGIES-REFUTATION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "REFUTATION" NULL 2))
   (CL:SETQ KWD-STRATEGIES-STRATEGY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STRATEGY" NULL 2))
   (CL:SETQ KWD-STRATEGIES-SUCCESS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SUCCESS" NULL 2))
   (CL:SETQ SYM-STRATEGIES-LOGIC-LATEST-POSITIVE-SCORE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LATEST-POSITIVE-SCORE" NULL 0))
   (CL:SETQ KWD-STRATEGIES-GOAL-CACHES
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GOAL-CACHES" NULL 2))
   (CL:SETQ KWD-STRATEGIES-ISA
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ISA" NULL 2))
   (CL:SETQ SGT-STRATEGIES-LOGIC-WHYNOT-PARTIAL-MATCH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WHYNOT-PARTIAL-MATCH" NULL 1))
   (CL:SETQ KWD-STRATEGIES-FUNCTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FUNCTION" NULL 2))
   (CL:SETQ SYM-STRATEGIES-LOGIC-WEIGHT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WEIGHT" NULL 0))
   (CL:SETQ SGT-STRATEGIES-PL-KERNEL-KB-MEMBER-OF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MEMBER-OF"
     (GET-STELLA-MODULE "/PL-KERNEL-KB" CL:T) 1))
   (CL:SETQ SGT-STRATEGIES-STELLA-LIST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LIST"
     (GET-STELLA-MODULE "/STELLA" CL:T) 1))))

(CL:DEFUN HELP-STARTUP-STRATEGIES2 ()
  (CL:PROGN
   (CL:SETQ KWD-STRATEGIES-FORWARD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FORWARD" NULL 2))
   (CL:SETQ KWD-STRATEGIES-DUPLICATE-
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DUPLICATE-" NULL 2))
   (CL:SETQ KWD-STRATEGIES-BACKWARD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BACKWARD" NULL 2))
   (CL:SETQ SYM-STRATEGIES-LOGIC-BACKWARD-ONLY?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BACKWARD-ONLY?" NULL 0))
   (CL:SETQ SYM-STRATEGIES-LOGIC-FORWARD-ONLY?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FORWARD-ONLY?" NULL 0))
   (CL:SETQ SGT-STRATEGIES-LOGIC-DESCRIPTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DESCRIPTION" NULL 1))
   (CL:SETQ KWD-STRATEGIES-FORWARD-RULE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FORWARD-RULE" NULL 2))
   (CL:SETQ SGT-STRATEGIES-LOGIC-CONDITIONAL-ANTECEDENT-PROOF-ADJUNCT
    (INTERN-RIGID-SYMBOL-WRT-MODULE
     "CONDITIONAL-ANTECEDENT-PROOF-ADJUNCT" NULL 1))
   (CL:SETQ SYM-STRATEGIES-LOGIC-PROVABLE-RULE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PROVABLE-RULE" NULL 0))
   (CL:SETQ SYM-STRATEGIES-LOGIC-GOAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GOAL" NULL 0))
   (CL:SETQ SYM-STRATEGIES-STELLA-PHASE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PHASE"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ KWD-STRATEGIES-ORIGINAL-GOAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ORIGINAL-GOAL" NULL 2))
   (CL:SETQ SGT-STRATEGIES-STELLA-LITERAL-WRAPPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LITERAL-WRAPPER"
     (GET-STELLA-MODULE "/STELLA" CL:T) 1))
   (CL:SETQ SYM-STRATEGIES-LOGIC-COMPLEMENT-DESCRIPTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "COMPLEMENT-DESCRIPTION" NULL 0))
   (CL:SETQ SYM-STRATEGIES-LOGIC-CONTAINED-BY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTAINED-BY" NULL 0))
   (CL:SETQ SYM-STRATEGIES-STELLA-ISA
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ISA"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SYM-STRATEGIES-STELLA-PREDICATE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PREDICATE"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))
   (CL:SETQ SGT-STRATEGIES-LOGIC-NAMED-DESCRIPTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NAMED-DESCRIPTION" NULL 1))
   (CL:SETQ KWD-STRATEGIES-LOCAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LOCAL" NULL 2))
   (CL:SETQ SYM-STRATEGIES-LOGIC-BACK
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BACK" NULL 0))
   (CL:SETQ KWD-STRATEGIES-POPPED
    (INTERN-RIGID-SYMBOL-WRT-MODULE "POPPED" NULL 2))
   (CL:SETQ SYM-STRATEGIES-LOGIC-EXTERNAL-VARIABLES
    (INTERN-RIGID-SYMBOL-WRT-MODULE "EXTERNAL-VARIABLES" NULL 0))
   (CL:SETQ SGT-STRATEGIES-LOGIC-CLUSTERED-CONJUNCTION-PROOF-ADJUNCT
    (INTERN-RIGID-SYMBOL-WRT-MODULE
     "CLUSTERED-CONJUNCTION-PROOF-ADJUNCT" NULL 1))
   (CL:SETQ SYM-STRATEGIES-LOGIC-CLUSTER-FRAMES
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CLUSTER-FRAMES" NULL 0))
   (CL:SETQ KWD-STRATEGIES-AND
    (INTERN-RIGID-SYMBOL-WRT-MODULE "AND" NULL 2))
   (CL:SETQ KWD-STRATEGIES-PREDICATE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PREDICATE" NULL 2))
   (CL:SETQ SYM-STRATEGIES-LOGIC-MONOTONIC?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MONOTONIC?" NULL 0))
   (CL:SETQ KWD-STRATEGIES-NOT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NOT" NULL 2))
   (CL:SETQ SYM-STRATEGIES-LOGIC-HYPOTHESIZED-INSTANCE?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "HYPOTHESIZED-INSTANCE?" NULL 0))
   (CL:SETQ SYM-STRATEGIES-LOGIC-IO-VARIABLES
    (INTERN-RIGID-SYMBOL-WRT-MODULE "IO-VARIABLES" NULL 0))
   (CL:SETQ KWD-STRATEGIES-ITERATIVE-FORALL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ITERATIVE-FORALL" NULL 2))
   (CL:SETQ KWD-STRATEGIES-NORMAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NORMAL" NULL 2))
   (CL:SETQ KWD-STRATEGIES-CONSTANT-PROPOSITION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONSTANT-PROPOSITION" NULL 2))
   (CL:SETQ KWD-STRATEGIES-TECHNICAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TECHNICAL" NULL 2))
   (CL:SETQ KWD-STRATEGIES-LAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LAY" NULL 2))
   (CL:SETQ SYM-STRATEGIES-LOGIC-STARTUP-STRATEGIES
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-STRATEGIES" NULL 0))
   (CL:SETQ SYM-STRATEGIES-STELLA-METHOD-STARTUP-CLASSNAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME"
     (GET-STELLA-MODULE "/STELLA" CL:T) 0))))

(CL:DEFUN HELP-STARTUP-STRATEGIES3 ()
  (CL:PROGN
   (DEFINE-FUNCTION-OBJECT "CONTINUE-STRATEGIES-PROOFS"
    "(DEFUN (CONTINUE-STRATEGIES-PROOFS KEYWORD) ((FRAME CONTROL-FRAME) (LASTMOVE KEYWORD)))"
    (CL:FUNCTION CONTINUE-STRATEGIES-PROOFS) NULL)
   (DEFINE-FUNCTION-OBJECT "CLEAR-STRATEGY-SLOTS"
    "(DEFUN CLEAR-STRATEGY-SLOTS ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION CLEAR-STRATEGY-SLOTS) NULL)
   (DEFINE-FUNCTION-OBJECT "SELECT-NEXT-STRATEGY"
    "(DEFUN (SELECT-NEXT-STRATEGY CONTROL-FRAME) ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION SELECT-NEXT-STRATEGY) NULL)
   (DEFINE-FUNCTION-OBJECT "RECORD-BASE-PARTIAL-MATCH-TRUTH"
    "(DEFUN RECORD-BASE-PARTIAL-MATCH-TRUTH ((FRAME CONTROL-FRAME) (RESULT KEYWORD)))"
    (CL:FUNCTION RECORD-BASE-PARTIAL-MATCH-TRUTH) NULL)
   (DEFINE-FUNCTION-OBJECT "CONTINUE-CURRENT-OR-NEXT-STRATEGY"
    "(DEFUN (CONTINUE-CURRENT-OR-NEXT-STRATEGY KEYWORD) ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION CONTINUE-CURRENT-OR-NEXT-STRATEGY) NULL)
   (DEFINE-FUNCTION-OBJECT "RESUME-PROOF-STRATEGY-AFTER-SUBGOAL"
    "(DEFUN (RESUME-PROOF-STRATEGY-AFTER-SUBGOAL KEYWORD) ((FRAME CONTROL-FRAME) (LASTMOVE KEYWORD)))"
    (CL:FUNCTION RESUME-PROOF-STRATEGY-AFTER-SUBGOAL) NULL)
   (DEFINE-FUNCTION-OBJECT "FILTER-OUT-STRATEGY?"
    "(DEFUN (FILTER-OUT-STRATEGY? BOOLEAN) ((STRATEGY KEYWORD) (FRAME CONTROL-FRAME)))"
    (CL:FUNCTION FILTER-OUT-STRATEGY?) NULL)
   (DEFINE-FUNCTION-OBJECT "EXECUTE-PROOF-STRATEGY"
    "(DEFUN (EXECUTE-PROOF-STRATEGY KEYWORD) ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION EXECUTE-PROOF-STRATEGY) NULL)
   (DEFINE-FUNCTION-OBJECT "CONTINUE-PARALLEL-STRATEGIES-PROOFS"
    "(DEFUN (CONTINUE-PARALLEL-STRATEGIES-PROOFS KEYWORD) ((PFRAME PARALLEL-CONTROL-FRAME) (LASTMOVE KEYWORD)))"
    (CL:FUNCTION CONTINUE-PARALLEL-STRATEGIES-PROOFS) NULL)
   (DEFINE-FUNCTION-OBJECT "PARALLEL-STRATEGY?"
    "(DEFUN (PARALLEL-STRATEGY? BOOLEAN) ((STRATEGY KEYWORD)))"
    (CL:FUNCTION PARALLEL-STRATEGY?) NULL)
   (DEFINE-FUNCTION-OBJECT "SELECT-NEXT-CHILD-THREAD"
    "(DEFUN (SELECT-NEXT-CHILD-THREAD PARALLEL-THREAD) ((PFRAME PARALLEL-CONTROL-FRAME)))"
    (CL:FUNCTION SELECT-NEXT-CHILD-THREAD) NULL)
   (DEFINE-FUNCTION-OBJECT "CREATE-CHILD-THREAD"
    "(DEFUN (CREATE-CHILD-THREAD PARALLEL-THREAD) ((PFRAME PARALLEL-CONTROL-FRAME)))"
    (CL:FUNCTION CREATE-CHILD-THREAD) NULL)
   (DEFINE-FUNCTION-OBJECT "TRY-PARALLEL-THREAD-PROOF"
    "(DEFUN (TRY-PARALLEL-THREAD-PROOF KEYWORD) ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION TRY-PARALLEL-THREAD-PROOF) NULL)
   (DEFINE-FUNCTION-OBJECT "PUSH-NEXT-STRATEGY"
    "(DEFUN PUSH-NEXT-STRATEGY ((FRAME CONTROL-FRAME) (STRATEGY KEYWORD)))"
    (CL:FUNCTION PUSH-NEXT-STRATEGY) NULL)
   (DEFINE-FUNCTION-OBJECT "CREATE-SUBGOAL-FRAME"
    "(DEFUN (CREATE-SUBGOAL-FRAME CONTROL-FRAME) ((UPFRAME CONTROL-FRAME) (GOAL PROPOSITION) (STRATEGY KEYWORD)))"
    (CL:FUNCTION CREATE-SUBGOAL-FRAME) NULL)
   (DEFINE-FUNCTION-OBJECT "CONTINUE-SPECIALIST-PROOF"
    "(DEFUN (CONTINUE-SPECIALIST-PROOF KEYWORD) ((FRAME CONTROL-FRAME) (LASTMOVE KEYWORD)))"
    (CL:FUNCTION CONTINUE-SPECIALIST-PROOF) NULL)
   (DEFINE-FUNCTION-OBJECT "LOOKUP-CACHED-PROOF"
    "(DEFUN (LOOKUP-CACHED-PROOF KEYWORD) ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION LOOKUP-CACHED-PROOF) NULL)
   (DEFINE-FUNCTION-OBJECT "SCAN-CACHED-GOALS"
    "(DEFUN (SCAN-CACHED-GOALS KEYWORD) ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION SCAN-CACHED-GOALS) NULL)
   (DEFINE-FUNCTION-OBJECT "FINISH-CACHED-GOAL-PROCESSING"
    "(DEFUN (FINISH-CACHED-GOAL-PROCESSING KEYWORD) ((CACHEDGOAL ATOMIC-GOAL-CACHE) (FRAME CONTROL-FRAME) (SUCCESSORFAILURE KEYWORD) (CONTINUING? BOOLEAN)))"
    (CL:FUNCTION FINISH-CACHED-GOAL-PROCESSING) NULL)
   (DEFINE-FUNCTION-OBJECT "TRY-GOAL-CACHES-PROOF"
    "(DEFUN (TRY-GOAL-CACHES-PROOF KEYWORD) ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION TRY-GOAL-CACHES-PROOF) NULL)
   (DEFINE-FUNCTION-OBJECT "TRY-LOOKUP-GROUND-ASSERTIONS-PROOF"
    "(DEFUN (TRY-LOOKUP-GROUND-ASSERTIONS-PROOF KEYWORD) ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION TRY-LOOKUP-GROUND-ASSERTIONS-PROOF) NULL)
   (DEFINE-FUNCTION-OBJECT "TRY-SCAN-PROPOSITIONS-PROOF"
    "(DEFUN (TRY-SCAN-PROPOSITIONS-PROOF KEYWORD) ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION TRY-SCAN-PROPOSITIONS-PROOF) NULL)
   (DEFINE-FUNCTION-OBJECT "HAS-SHALLOW-DISPROOF?"
    "(DEFUN (HAS-SHALLOW-DISPROOF? BOOLEAN) ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION HAS-SHALLOW-DISPROOF?) NULL)
   (DEFINE-FUNCTION-OBJECT "TRY-SHALLOW-DISPROOF"
    "(DEFUN (TRY-SHALLOW-DISPROOF KEYWORD) ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION TRY-SHALLOW-DISPROOF) NULL)
   (DEFINE-FUNCTION-OBJECT "TRY-SCAN-FOR-VALUE-CLASH-PROOF"
    "(DEFUN (TRY-SCAN-FOR-VALUE-CLASH-PROOF KEYWORD) ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION TRY-SCAN-FOR-VALUE-CLASH-PROOF) NULL)
   (DEFINE-FUNCTION-OBJECT "TRY-MANUFACTURE-SKOLEM-PROOF"
    "(DEFUN (TRY-MANUFACTURE-SKOLEM-PROOF KEYWORD) ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION TRY-MANUFACTURE-SKOLEM-PROOF) NULL)
   (DEFINE-FUNCTION-OBJECT "EXTRACT-SUBGOAL-OF-FRAME"
    "(DEFUN (EXTRACT-SUBGOAL-OF-FRAME PROPOSITION) ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION EXTRACT-SUBGOAL-OF-FRAME) NULL)
   (DEFINE-FUNCTION-OBJECT "EXTRACT-SUBGOAL-DESCRIPTION-OF-FRAME"
    "(DEFUN (EXTRACT-SUBGOAL-DESCRIPTION-OF-FRAME DESCRIPTION) ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION EXTRACT-SUBGOAL-DESCRIPTION-OF-FRAME) NULL)
   (DEFINE-FUNCTION-OBJECT "FIND-EXTERNAL-ARGUMENTS-FOR-SUBGOAL"
    "(DEFUN (FIND-EXTERNAL-ARGUMENTS-FOR-SUBGOAL ARGUMENTS-VECTOR) ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION FIND-EXTERNAL-ARGUMENTS-FOR-SUBGOAL) NULL)
   (DEFINE-FUNCTION-OBJECT "TRY-SUBGOAL-STRATEGIES-PROOF"
    "(DEFUN (TRY-SUBGOAL-STRATEGIES-PROOF KEYWORD) ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION TRY-SUBGOAL-STRATEGIES-PROOF) NULL)
   (DEFINE-FUNCTION-OBJECT "ESTABLISH-GOAL-CACHE"
    "(DEFUN ESTABLISH-GOAL-CACHE ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION ESTABLISH-GOAL-CACHE) NULL)
   (DEFINE-FUNCTION-OBJECT "CHECK-FOR-DUPLICATE-RULE?"
    "(DEFUN (CHECK-FOR-DUPLICATE-RULE? BOOLEAN) ((FRAME CONTROL-FRAME) (IMPLIESPROPOSITION PROPOSITION)))"
    (CL:FUNCTION CHECK-FOR-DUPLICATE-RULE?) NULL)
   (DEFINE-FUNCTION-OBJECT "CONTINUE-ANTECEDENTS-PROOF"
    "(DEFUN (CONTINUE-ANTECEDENTS-PROOF KEYWORD) ((FRAME CONTROL-FRAME) (LASTMOVE KEYWORD)))"
    (CL:FUNCTION CONTINUE-ANTECEDENTS-PROOF) NULL)
   (DEFINE-FUNCTION-OBJECT "ALLOCATE-ANTECEDENTS-ITERATOR"
    "(DEFUN (ALLOCATE-ANTECEDENTS-ITERATOR (ITERATOR OF PROPOSITION)) ((GOALDESCRIPTION DESCRIPTION) (EXTERNALARGUMENTS ARGUMENTS-VECTOR) (REVERSEPOLARITY? BOOLEAN)))"
    (CL:FUNCTION ALLOCATE-ANTECEDENTS-ITERATOR) NULL)
   (DEFINE-FUNCTION-OBJECT "OPTIMIZE-ORDER-OF-APPLICABLE-RULES"
    "(DEFUN (OPTIMIZE-ORDER-OF-APPLICABLE-RULES (CONS OF PROPOSITION)) ((RULES (CONS OF PROPOSITION)) (TAIL? BOOLEAN)))"
    (CL:FUNCTION OPTIMIZE-ORDER-OF-APPLICABLE-RULES) NULL)
   (DEFINE-FUNCTION-OBJECT "TRY-GOAL-COMPLEMENT-PROOF"
    "(DEFUN (TRY-GOAL-COMPLEMENT-PROOF KEYWORD) ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION TRY-GOAL-COMPLEMENT-PROOF) NULL)
   (DEFINE-FUNCTION-OBJECT "TRY-FORWARD-GOALS-PROOF"
    "(DEFUN (TRY-FORWARD-GOALS-PROOF KEYWORD) ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION TRY-FORWARD-GOALS-PROOF) NULL)
   (DEFINE-FUNCTION-OBJECT "CREATE-CONDITIONAL-ANTECEDENT-SUBFRAME"
    "(DEFUN (CREATE-CONDITIONAL-ANTECEDENT-SUBFRAME CONTROL-FRAME) ((FRAME CONTROL-FRAME) (GOAL PROPOSITION) (PROVABLERULE PROPOSITION)))"
    (CL:FUNCTION CREATE-CONDITIONAL-ANTECEDENT-SUBFRAME) NULL)
   (DEFINE-FUNCTION-OBJECT "CONTINUE-CONDITIONAL-ANTECEDENT-PROOF"
    "(DEFUN (CONTINUE-CONDITIONAL-ANTECEDENT-PROOF KEYWORD) ((FRAME CONTROL-FRAME) (LASTMOVE KEYWORD)))"
    (CL:FUNCTION CONTINUE-CONDITIONAL-ANTECEDENT-PROOF) NULL)
   (DEFINE-FUNCTION-OBJECT "TRY-FULL-SUBQUERY-PROOF"
    "(DEFUN (TRY-FULL-SUBQUERY-PROOF KEYWORD) ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION TRY-FULL-SUBQUERY-PROOF) NULL)
   (DEFINE-FUNCTION-OBJECT "EXTRACT-COLLECTION-ARGUMENT"
    "(DEFUN (EXTRACT-COLLECTION-ARGUMENT NAMED-DESCRIPTION) ((PROPOSITION PROPOSITION)))"
    (CL:FUNCTION EXTRACT-COLLECTION-ARGUMENT) NULL)
   (DEFINE-FUNCTION-OBJECT "TRY-ISA-PROPOSITION-PROOF"
    "(DEFUN (TRY-ISA-PROPOSITION-PROOF KEYWORD) ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION TRY-ISA-PROPOSITION-PROOF) NULL)
   (DEFINE-FUNCTION-OBJECT "TRY-SCAN-COLLECTION-PROOF"
    "(DEFUN (TRY-SCAN-COLLECTION-PROOF KEYWORD) ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION TRY-SCAN-COLLECTION-PROOF) NULL)
   (DEFINE-FUNCTION-OBJECT "INFERABLE-DESCRIPTION?"
    "(DEFUN (INFERABLE-DESCRIPTION? BOOLEAN) ((SELF OBJECT)))"
    (CL:FUNCTION INFERABLE-DESCRIPTION?) NULL)
   (DEFINE-FUNCTION-OBJECT "TRY-IMPLIES-PROOF"
    "(DEFUN (TRY-IMPLIES-PROOF KEYWORD) ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION TRY-IMPLIES-PROOF) NULL)
   (DEFINE-FUNCTION-OBJECT "TRY-SIMPLE-CONTAINED-BY-PROOF"
    "(DEFUN (TRY-SIMPLE-CONTAINED-BY-PROOF KEYWORD) ((SUBCOLLECTION OBJECT) (SUPERCOLLECTION OBJECT) (REVERSEPOLARITY? BOOLEAN)))"
    (CL:FUNCTION TRY-SIMPLE-CONTAINED-BY-PROOF) NULL)
   (DEFINE-FUNCTION-OBJECT "TRY-CONTAINED-BY-PROOF"
    "(DEFUN (TRY-CONTAINED-BY-PROOF KEYWORD) ((UPFRAME CONTROL-FRAME)))"
    (CL:FUNCTION TRY-CONTAINED-BY-PROOF) NULL)
   (DEFINE-FUNCTION-OBJECT "CREATE-CONTAINED-BY-ARGUMENT"
    "(DEFUN (CREATE-CONTAINED-BY-ARGUMENT PROPOSITION) ((COLLECTION OBJECT) (BRIDGEARGS LIST)))"
    (CL:FUNCTION CREATE-CONTAINED-BY-ARGUMENT) NULL)
   (DEFINE-FUNCTION-OBJECT "CONTINUE-CONTAINED-BY-PROOF"
    "(DEFUN (CONTINUE-CONTAINED-BY-PROOF KEYWORD) ((FRAME CONTROL-FRAME) (LASTMOVE KEYWORD)))"
    (CL:FUNCTION CONTINUE-CONTAINED-BY-PROOF) NULL)
   (DEFINE-FUNCTION-OBJECT "TRY-SUBSUMPTION-TEST"
    "(DEFUN (TRY-SUBSUMPTION-TEST KEYWORD) ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION TRY-SUBSUMPTION-TEST) NULL)
   (DEFINE-FUNCTION-OBJECT "TRY-EQUIVALENCE-PROOF"
    "(DEFUN (TRY-EQUIVALENCE-PROOF KEYWORD) ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION TRY-EQUIVALENCE-PROOF) NULL)
   (DEFINE-FUNCTION-OBJECT "CONTINUE-CLUSTERED-CONJUNCTION-PROOF"
    "(DEFUN (CONTINUE-CLUSTERED-CONJUNCTION-PROOF KEYWORD) ((ANDFRAME CONTROL-FRAME) (LASTMOVE KEYWORD)))"
    (CL:FUNCTION CONTINUE-CLUSTERED-CONJUNCTION-PROOF) NULL)
   (DEFINE-FUNCTION-OBJECT "PUSH-MONOTONIC-WORLD"
    "(DEFUN (PUSH-MONOTONIC-WORLD WORLD) ())"
    (CL:FUNCTION PUSH-MONOTONIC-WORLD) NULL)
   (DEFINE-FUNCTION-OBJECT "TRY-DISJUNCTIVE-IMPLICATION-PROOF"
    "(DEFUN (TRY-DISJUNCTIVE-IMPLICATION-PROOF KEYWORD) ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION TRY-DISJUNCTIVE-IMPLICATION-PROOF) NULL)
   (DEFINE-FUNCTION-OBJECT "CREATE-ANONYMOUS-INSTANCE"
    "(DEFUN (CREATE-ANONYMOUS-INSTANCE LOGIC-OBJECT) ((PREFIX STRING) (SKOLEM? BOOLEAN)))"
    (CL:FUNCTION CREATE-ANONYMOUS-INSTANCE) NULL)
   (DEFINE-FUNCTION-OBJECT "CREATE-HYPOTHESIZED-INSTANCE"
    "(DEFUN (CREATE-HYPOTHESIZED-INSTANCE LOGIC-OBJECT) ((PREFIX STRING)))"
    (CL:FUNCTION CREATE-HYPOTHESIZED-INSTANCE) NULL)
   (DEFINE-FUNCTION-OBJECT "TRY-UNIVERSAL-INTRODUCTION-PROOF"
    "(DEFUN (TRY-UNIVERSAL-INTRODUCTION-PROOF KEYWORD) ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION TRY-UNIVERSAL-INTRODUCTION-PROOF) NULL)
   (DEFINE-FUNCTION-OBJECT "TRY-REFUTATION-PROOF"
    "(DEFUN (TRY-REFUTATION-PROOF KEYWORD) ((FRAME CONTROL-FRAME)))"
    (CL:FUNCTION TRY-REFUTATION-PROOF) NULL)
   (DEFINE-FUNCTION-OBJECT "CONTINUE-FORALL-PROOF"
    "(DEFUN (CONTINUE-FORALL-PROOF KEYWORD) ((FRAME CONTROL-FRAME) (LASTMOVE KEYWORD)))"
    (CL:FUNCTION CONTINUE-FORALL-PROOF) NULL)
   (DEFINE-FUNCTION-OBJECT "CONTINUE-EXISTS-PROOF"
    "(DEFUN (CONTINUE-EXISTS-PROOF KEYWORD) ((FRAME CONTROL-FRAME) (LASTMOVE KEYWORD)))"
    (CL:FUNCTION CONTINUE-EXISTS-PROOF) NULL)))

(CL:DEFUN STARTUP-STRATEGIES ()
  (CL:LET*
   ((*MODULE* (GET-STELLA-MODULE "/LOGIC" (> *STARTUP-TIME-PHASE* 1)))
    (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2) (HELP-STARTUP-STRATEGIES1)
    (HELP-STARTUP-STRATEGIES2))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 4)
    (CL:SETQ *PARALLEL-STRATEGIES*
     (LIST KWD-STRATEGIES-DISJUNCTIVE-IMPLICATION-INTRODUCTION
      KWD-STRATEGIES-UNIVERSAL-INTRODUCTION KWD-STRATEGIES-REFUTATION))
    (CL:SETQ *PL-ANONYMOUS-MODULE*
     (GET-STELLA-MODULE "PL-ANONYMOUS" CL:T)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 5)
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE
        "CONDITIONAL-ANTECEDENT-PROOF-ADJUNCT"
        "(DEFCLASS CONDITIONAL-ANTECEDENT-PROOF-ADJUNCT (PROOF-ADJUNCT) :SLOTS ((PROVABLE-RULE :TYPE PROPOSITION) (GOAL :TYPE PROPOSITION) (PHASE :TYPE KEYWORD :INITIALLY :FORWARD-RULE)))")))
     (CL:SETF (%CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-CONDITIONAL-ANTECEDENT-PROOF-ADJUNCT))
     (CL:SETF (%CLASS-SLOT-ACCESSOR-CODE CLASS)
      (CL:FUNCTION
       ACCESS-CONDITIONAL-ANTECEDENT-PROOF-ADJUNCT-SLOT-VALUE)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE
        "CLUSTERED-CONJUNCTION-PROOF-ADJUNCT"
        "(DEFCLASS CLUSTERED-CONJUNCTION-PROOF-ADJUNCT (PROOF-ADJUNCT) :SLOTS ((CLUSTER-FRAMES :TYPE (VECTOR OF CONTROL-FRAME))))")))
     (CL:SETF (%CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-CLUSTERED-CONJUNCTION-PROOF-ADJUNCT))
     (CL:SETF (%CLASS-SLOT-ACCESSOR-CODE CLASS)
      (CL:FUNCTION
       ACCESS-CLUSTERED-CONJUNCTION-PROOF-ADJUNCT-SLOT-VALUE))))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7) (HELP-STARTUP-STRATEGIES3)
    (DEFINE-FUNCTION-OBJECT "CONTINUE-CONSTANT-PROOF"
     "(DEFUN (CONTINUE-CONSTANT-PROOF KEYWORD) ((FRAME CONTROL-FRAME) (LASTMOVE KEYWORD)))"
     (CL:FUNCTION CONTINUE-CONSTANT-PROOF) NULL)
    (DEFINE-EXTERNAL-SLOT-FROM-STRINGIFIED-SOURCE
     "(DEFSLOT CONTROL-FRAME INFERENCE-CUTOFF-REASON :TYPE KEYWORD :ALLOCATION :DYNAMIC)")
    (DEFINE-FUNCTION-OBJECT "REGISTER-INFERENCE-CUTOFF"
     "(DEFUN REGISTER-INFERENCE-CUTOFF ((FRAME CONTROL-FRAME) (REASON KEYWORD)))"
     (CL:FUNCTION REGISTER-INFERENCE-CUTOFF) NULL)
    (DEFINE-FUNCTION-OBJECT "CONTINUE-FAIL-PROOF"
     "(DEFUN (CONTINUE-FAIL-PROOF KEYWORD) ((FRAME CONTROL-FRAME) (LASTMOVE KEYWORD)))"
     (CL:FUNCTION CONTINUE-FAIL-PROOF) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD (CONTINUE-PARTIAL-FAIL-PROOF KEYWORD) ((SELF CONTROL-FRAME) (LASTMOVE KEYWORD)))"
     (CL:FUNCTION CONTINUE-PARTIAL-FAIL-PROOF) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-STRATEGIES"
     "(DEFUN STARTUP-STRATEGIES () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-STRATEGIES) NULL)
    (CL:LET*
     ((FUNCTION
       (LOOKUP-FUNCTION SYM-STRATEGIES-LOGIC-STARTUP-STRATEGIES)))
     (SET-DYNAMIC-SLOT-VALUE (%DYNAMIC-SLOTS FUNCTION)
      SYM-STRATEGIES-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "_StartupStrategies") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *PARALLEL-STRATEGIES* (LIST OF KEYWORD) (LIST :DISJUNCTIVE-IMPLICATION-INTRODUCTION :UNIVERSAL-INTRODUCTION :REFUTATION) :DOCUMENTATION \"List of strategies (keywords) that fork a parallel
control stack before executing.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *FAILED-GOAL-CUTOFFS* INTEGER 0)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *SUCCEEDED-GOAL-CUTOFFS* INTEGER 0)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *PL-ANONYMOUS-MODULE* MODULE (GET-STELLA-MODULE \"PL-ANONYMOUS\" TRUE))")
    (DEFINE-EXPLANATION-PHRASE KWD-STRATEGIES-CONSTANT-PROPOSITION
     KWD-STRATEGIES-TECHNICAL "trivially")
    (DEFINE-EXPLANATION-PHRASE KWD-STRATEGIES-CONSTANT-PROPOSITION
     KWD-STRATEGIES-LAY "trivially"))))
