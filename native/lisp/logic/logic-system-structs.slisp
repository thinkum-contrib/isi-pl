;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; logic-system-structs.slisp

#|
 +---------------------------- BEGIN LICENSE BLOCK ---------------------------+
 |                                                                            |
 | Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
 |                                                                            |
 | The contents of this file are subject to the Mozilla Public License        |
 | Version 1.1 (the "License"); you may not use this file except in           |
 | compliance with the License. You may obtain a copy of the License at       |
 | http://www.mozilla.org/MPL/                                                |
 |                                                                            |
 | Software distributed under the License is distributed on an "AS IS" basis, |
 | WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
 | for the specific language governing rights and limitations under the       |
 | License.                                                                   |
 |                                                                            |
 | The Original Code is the PowerLoom KR&R System.                            |
 |                                                                            |
 | The Initial Developer of the Original Code is                              |
 | UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
 | 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
 |                                                                            |
 | Portions created by the Initial Developer are Copyright (C) 1997-2006      |
 | the Initial Developer. All Rights Reserved.                                |
 |                                                                            |
 | Contributor(s):                                                            |
 |                                                                            |
 | Alternatively, the contents of this file may be used under the terms of    |
 | either the GNU General Public License Version 2 or later (the "GPL"), or   |
 | the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
 | in which case the provisions of the GPL or the LGPL are applicable instead |
 | of those above. If you wish to allow use of your version of this file only |
 | under the terms of either the GPL or the LGPL, and not to allow others to  |
 | use your version of this file under the terms of the MPL, indicate your    |
 | decision by deleting the provisions above and replace them with the notice |
 | and other provisions required by the GPL or the LGPL. If you do not delete |
 | the provisions above, a recipient may use your version of this file under  |
 | the terms of any one of the MPL, the GPL or the LGPL.                      |
 |                                                                            |
 +----------------------------- END LICENSE BLOCK ----------------------------+
|#

(CL:IN-PACKAGE "STELLA")


(CL:DEFINE-CONDITION LOGIC-EXCEPTION (STELLA-EXCEPTION)
  ())

(CL:DEFINE-CONDITION QUERY-THREAD-LIMIT-VIOLATION (LOGIC-EXCEPTION)
  ())

(CL:DEFINE-CONDITION FAIL-EXCEPTION (LOGIC-EXCEPTION)
  ())

(CL:DEFINE-CONDITION CLASH (LOGIC-EXCEPTION)
  ())

(CL:DEFINE-CONDITION PARSING-ERROR (LOGIC-EXCEPTION)
  ())

(CL:DEFINE-CONDITION PROPOSITION-ERROR (LOGIC-EXCEPTION)
  ())

(CL:DEFINE-CONDITION TERM-GENERATION-EXCEPTION (LOGIC-EXCEPTION)
  ((OFFENDING-TERM :ALLOCATION :INSTANCE :ACCESSOR %OFFENDING-TERM)))

(CL:DEFINE-CONDITION EXPLAIN-EXCEPTION (LOGIC-EXCEPTION)
  ())

(CL:DEFINE-CONDITION EXPLAIN-QUERY-TRUE-EXCEPTION (EXPLAIN-EXCEPTION)
  ())

(CL:DEFINE-CONDITION EXPLAIN-NO-SUCH-LABEL-EXCEPTION (EXPLAIN-EXCEPTION)
  ())

(CL:DEFINE-CONDITION EXPLAIN-NOT-ENABLED-EXCEPTION (EXPLAIN-EXCEPTION)
  ())

(CL:DEFINE-CONDITION EXPLAIN-NO-MORE-SOLUTIONS-EXCEPTION (EXPLAIN-EXCEPTION)
  ())

(CL:DEFINE-CONDITION EXPLAIN-NO-SOLUTION-EXCEPTION (EXPLAIN-EXCEPTION)
  ())

(CL:DEFINE-CONDITION EXPLAIN-NO-QUERY-EXCEPTION (EXPLAIN-EXCEPTION)
  ())

(CL:DEFSTRUCT (SEQUENCE-INDEX (:CONC-NAME %SEQUENCE-INDEX.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-SEQUENCE-INDEX ()) (:COPIER ()) (:PREDICATE ())) "Abstract class for managing a sequence of objects."
  (THE-SEQUENCE NULL)
  (THE-SEQUENCE-LENGTH NULL-INTEGER :TYPE CL:FIXNUM))

(CL:DEFSTRUCT (PAGING-INDEX (:CONC-NAME %PAGING-INDEX.) (:INCLUDE SEQUENCE-INDEX) (:CONSTRUCTOR %MAKE-PAGING-INDEX ()) (:COPIER ()) (:PREDICATE ())) "Index that manages a sequence of objects retrievable from
persistent storage.  Needs to be appropriately subclassed by actual store
implementations and facilitated with a proper iterator class."
  (SELECTION-PATTERN NULL)
  (STORE NULL))

(CL:DEFSTRUCT (NON-PAGING-INDEX (:CONC-NAME %NON-PAGING-INDEX.) (:INCLUDE SEQUENCE-INDEX) (:CONSTRUCTOR %MAKE-NON-PAGING-INDEX ()) (:COPIER ()) (:PREDICATE ())) "Index that manages an always-in-memory data
strucure containing a sequence of objects.")

(CL:DEFSTRUCT (SEQUENCE-INDEX-ITERATOR (:CONC-NAME %SEQUENCE-INDEX-ITERATOR.) (:INCLUDE ITERATOR) (:CONSTRUCTOR %MAKE-SEQUENCE-INDEX-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "Iterator that generates successive members of a sequence index."
  (LIST-ITERATOR-CURSOR NULL))

(CL:DEFSTRUCT (PAGING-INDEX-ITERATOR (:CONC-NAME %PAGING-INDEX-ITERATOR.) (:INCLUDE SEQUENCE-INDEX-ITERATOR) (:CONSTRUCTOR %MAKE-PAGING-INDEX-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "Iterator that generates successive members of a paging index.")

(CL:DEFSTRUCT (OBJECT-STORE (:CONC-NAME %OBJECT-STORE.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-OBJECT-STORE ()) (:COPIER ()) (:PREDICATE ())) (MODULE NULL))

(CL:DEFSTRUCT (BACKLINKS-INDEX (:CONC-NAME %BACKLINKS-INDEX.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-BACKLINKS-INDEX ()) (:COPIER ()) (:PREDICATE ())) "Contains several types of indices pointing at dependent propositions."
  (DEPENDENT-PROPOSITIONS-LIST NULL)
  (DEPENDENT-ISA-PROPOSITIONS-LIST NULL)
  (PREDICATE-PROPOSITIONS-TABLE NULL))

(CL:DEFSTRUCT (LOGIC-OBJECT (:CONC-NAME %LOGIC-OBJECT.) (:INCLUDE CONTEXT-SENSITIVE-OBJECT) (:CONSTRUCTOR %MAKE-LOGIC-OBJECT ()) (:COPIER ()) (:PREDICATE ())) "Object with propositions, and possibly a variable value."
  (DYNAMIC-SLOTS NULL)
  (DEPENDENT-PROPOSITIONS-INDEX NULL)
  (VARIABLE-VALUE-INVERSE NULL)
  (SURROGATE-VALUE-INVERSE NULL))

(CL:DEFSTRUCT (TRUTH-VALUE (:CONC-NAME %TRUTH-VALUE.) (:INCLUDE LOGIC-OBJECT) (:CONSTRUCTOR %MAKE-TRUTH-VALUE ()) (:COPIER ()) (:PREDICATE ())) (POLARITY NULL)
  (STRENGTH NULL)
  (POSITIVE-SCORE NULL-FLOAT :TYPE CL:DOUBLE-FLOAT))

(CL:DEFSTRUCT (DESCRIPTION (:CONC-NAME %DESCRIPTION.) (:INCLUDE LOGIC-OBJECT) (:CONSTRUCTOR %MAKE-DESCRIPTION ()) (:COPIER ()) (:PREDICATE ())) (PROPOSITION NULL)
  (IO-VARIABLES NULL)
  (INTERNAL-VARIABLES NULL)
  (QUERY-PATTERNS NULL))

(CL:DEFSTRUCT (NAMED-DESCRIPTION (:CONC-NAME %NAMED-DESCRIPTION.) (:INCLUDE DESCRIPTION) (:CONSTRUCTOR %MAKE-NAMED-DESCRIPTION ()) (:COPIER ()) (:PREDICATE ())) (IO-VARIABLE-NAMES NULL)
  (IO-VARIABLE-TYPES NULL)
  (EXTENSION NULL)
  (OBJECT-STRINGIFIED-SOURCE STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (OBJECT-ORIGINATED-PROPOSITIONS NULL))

(CL:DEFSTRUCT (SKOLEM (:CONC-NAME %SKOLEM.) (:INCLUDE LOGIC-OBJECT) (:CONSTRUCTOR %MAKE-SKOLEM ()) (:COPIER ()) (:PREDICATE ())) "Object whose identity and type are not fixed at creation time.
Potentially unifiable with any other object."
  (SKOLEM-TYPE NULL)
  (SKOLEM-NAME NULL)
  (VARIABLE-VALUE NULL)
  (DEFINING-PROPOSITION NULL))

(CL:DEFSTRUCT (PATTERN-VARIABLE (:CONC-NAME %PATTERN-VARIABLE.) (:INCLUDE SKOLEM) (:CONSTRUCTOR %MAKE-PATTERN-VARIABLE ()) (:COPIER ()) (:PREDICATE ())) "A variable in a logical expression."
  (BOUND-TO-OFFSET NULL-INTEGER :TYPE CL:FIXNUM))

(CL:DEFSTRUCT (LOGIC-THING (:CONC-NAME %LOGIC-THING.) (:INCLUDE THING) (:CONSTRUCTOR %MAKE-LOGIC-THING ()) (:COPIER ()) (:PREDICATE ())) "A subclass of THING so we can add methods to it in
the PowerLoom LOGIC module.")

(CL:DEFSTRUCT (QUANTITY-LOGIC-WRAPPER (:CONC-NAME %QUANTITY-LOGIC-WRAPPER.) (:INCLUDE LOGIC-THING) (:CONSTRUCTOR %MAKE-QUANTITY-LOGIC-WRAPPER ()) (:COPIER ()) (:PREDICATE ())) (WRAPPER-VALUE NULL)
  (FUNCTION-TERM NULL))

(CL:DEFSTRUCT (FORWARD-CHAINING-INDEX (:CONC-NAME %FORWARD-CHAINING-INDEX.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-FORWARD-CHAINING-INDEX ()) (:COPIER ()) (:PREDICATE ())) (FORWARD-GOAL NULL)
  (MASTER-RULE NULL)
  (IO-VARIABLES NULL)
  (QUERY-BODY NULL)
  (INPUT-BINDINGS NULL)
  (CACHE-ID NULL)
  (CONSEQUENT NULL))

(CL:DEFSTRUCT (PARTIAL-SUPPORT (:CONC-NAME %PARTIAL-SUPPORT.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-PARTIAL-SUPPORT ()) (:COPIER ()) (:PREDICATE ())) (FACT NULL)
  (AXIOM NULL)
  (SCORE NULL-FLOAT :TYPE CL:DOUBLE-FLOAT)
  (ID NULL-INTEGER :TYPE CL:FIXNUM)
  (ARGUMENT-SCORES NULL))

(CL:DEFSTRUCT (PROPOSITION (:CONC-NAME %PROPOSITION.) (:INCLUDE CONTEXT-SENSITIVE-OBJECT) (:CONSTRUCTOR %MAKE-PROPOSITION ()) (:COPIER ()) (:PREDICATE ())) ""
  (DYNAMIC-SLOTS NULL)
  (KIND NULL)
  (TRUTH-VALUE NULL)
  (ARGUMENTS NULL)
  (OPERATOR NULL)
  (DEPENDENT-PROPOSITIONS NULL))

(CL:DEFSTRUCT (INTEGER-LOGIC-WRAPPER (:CONC-NAME %INTEGER-LOGIC-WRAPPER.) (:INCLUDE INTEGER-WRAPPER) (:CONSTRUCTOR %MAKE-INTEGER-LOGIC-WRAPPER ()) (:COPIER ()) (:PREDICATE ())) (DEPENDENT-PROPOSITIONS-INDEX NULL))

(CL:DEFSTRUCT (FLOAT-LOGIC-WRAPPER (:CONC-NAME %FLOAT-LOGIC-WRAPPER.) (:INCLUDE FLOAT-WRAPPER) (:CONSTRUCTOR %MAKE-FLOAT-LOGIC-WRAPPER ()) (:COPIER ()) (:PREDICATE ())) (DEPENDENT-PROPOSITIONS-INDEX NULL))

(CL:DEFSTRUCT (STRING-LOGIC-WRAPPER (:CONC-NAME %STRING-LOGIC-WRAPPER.) (:INCLUDE STRING-WRAPPER) (:CONSTRUCTOR %MAKE-STRING-LOGIC-WRAPPER ()) (:COPIER ()) (:PREDICATE ())) (DEPENDENT-PROPOSITIONS-INDEX NULL))

(CL:DEFINE-CONDITION OBJECT-ALREADY-EXISTS-EXCEPTION (STELLA-EXCEPTION)
  ((EXISTING-OBJECT :ALLOCATION :INSTANCE :ACCESSOR %EXISTING-OBJECT)))

(CL:DEFSTRUCT (CHECK-TYPES-RECORD (:CONC-NAME %CHECK-TYPES-RECORD.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-CHECK-TYPES-RECORD ()) (:COPIER ()) (:PREDICATE ())) (PARENT-PROPOSITION NULL)
  (PARENT-DESCRIPTION NULL)
  (MODULE NULL))

(CL:DEFSTRUCT (INFERENCE-LEVEL (:CONC-NAME %INFERENCE-LEVEL.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-INFERENCE-LEVEL ()) (:COPIER ()) (:PREDICATE ())) "This class hierarchy is used to choose the
level of inference applied when dispatching queries (canned
or ad hoc)."
  (KEYWORD NULL))

(CL:DEFSTRUCT (NORMAL-INFERENCE-LEVEL (:CONC-NAME %NORMAL-INFERENCE-LEVEL.) (:INCLUDE INFERENCE-LEVEL) (:CONSTRUCTOR %MAKE-NORMAL-INFERENCE-LEVEL ()) (:COPIER ()) (:PREDICATE ())) "The normal inference level employs all proof strategies
except disjunctive implication introduction and refutation.")

(CL:DEFSTRUCT (REFUTATION-INFERENCE-LEVEL (:CONC-NAME %REFUTATION-INFERENCE-LEVEL.) (:INCLUDE NORMAL-INFERENCE-LEVEL) (:CONSTRUCTOR %MAKE-REFUTATION-INFERENCE-LEVEL ()) (:COPIER ()) (:PREDICATE ())) "Normal inference augmented by refutation proof strategy.")

(CL:DEFSTRUCT (BACKTRACKING-INFERENCE-LEVEL (:CONC-NAME %BACKTRACKING-INFERENCE-LEVEL.) (:INCLUDE NORMAL-INFERENCE-LEVEL) (:CONSTRUCTOR %MAKE-BACKTRACKING-INFERENCE-LEVEL ()) (:COPIER ()) (:PREDICATE ())) "Specifies subsumption level inference plus backtracking.")

(CL:DEFSTRUCT (SUBSUMPTION-INFERENCE-LEVEL (:CONC-NAME %SUBSUMPTION-INFERENCE-LEVEL.) (:INCLUDE BACKTRACKING-INFERENCE-LEVEL) (:CONSTRUCTOR %MAKE-SUBSUMPTION-INFERENCE-LEVEL ()) (:COPIER ()) (:PREDICATE ())) "Specifies lookup augmented with cached
subsumption links and equality reasoning.")

(CL:DEFSTRUCT (ASSERTION-INFERENCE-LEVEL (:CONC-NAME %ASSERTION-INFERENCE-LEVEL.) (:INCLUDE SUBSUMPTION-INFERENCE-LEVEL) (:CONSTRUCTOR %MAKE-ASSERTION-INFERENCE-LEVEL ()) (:COPIER ()) (:PREDICATE ())) "Specifies lookup of assertions only.")

(CL:DEFSTRUCT (SHALLOW-INFERENCE-LEVEL (:CONC-NAME %SHALLOW-INFERENCE-LEVEL.) (:INCLUDE SUBSUMPTION-INFERENCE-LEVEL) (:CONSTRUCTOR %MAKE-SHALLOW-INFERENCE-LEVEL ()) (:COPIER ()) (:PREDICATE ())) "Specifies lookup of assertions plus simple frame computations.")

(CL:DEFSTRUCT (QUERY-ITERATOR (:CONC-NAME %QUERY-ITERATOR.) (:INCLUDE ITERATOR) (:CONSTRUCTOR %MAKE-QUERY-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "A query iterator points to a query environment
representing the initial or intermediate state of a query.  The iterator's
'value' is a vector representing a satisfying set bindings of the query's
output variables.  Each call to the iterator writes a new set of bindings
into the vector."
  (DYNAMIC-SLOTS NULL)
  (EXTERNAL-VARIABLES NULL)
  (EXHAUSTED? NULL)
  (OPTIONS NULL)
  (SOLUTIONS NULL)
  (QUERY-CONTEXT NULL)
  (BASE-CONTROL-FRAME NULL)
  (CURRENT-CONTROL-FRAME NULL)
  (CURRENT-PATTERN-RECORD NULL)
  (CURRENT-PARALLEL-THREAD NULL)
  (CONTROL-FRAME-PRIORITY-QUEUE NULL)
  (AUGMENTED-GOAL-CACHE? NULL)
  (ACTIVE-GOAL-CACHES NULL)
  (TRIGGERED-DEPTH-CUTOFF? NULL)
  (FAILED-TO-FIND-DUPLICATE-SUBGOAL? NULL)
  (FOUND-AT-LEAST-ONE-SOLUTION? NULL)
  (TIMESTAMP NULL-INTEGER :TYPE CL:FIXNUM)
  (PARTIAL-MATCH-STRATEGY NULL)
  (INFERENCE-LEVEL NULL)
  (CURRENT-DEPTH-CUTOFF NULL-INTEGER :TYPE CL:FIXNUM)
  (MAXIMUM-DEPTH NULL-INTEGER :TYPE CL:FIXNUM)
  (ALLOTTED-TIME NULL-FLOAT :TYPE CL:DOUBLE-FLOAT)
  (ALLOTTED-CLOCK-TICKS NULL-INTEGER :TYPE CL:FIXNUM)
  (CURRENT-CLOCK-TICKS NULL-INTEGER :TYPE CL:FIXNUM)
  (TIMEOUT? NULL))

(CL:DEFSTRUCT (CONTROL-FRAME (:CONC-NAME %CONTROL-FRAME.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-CONTROL-FRAME ()) (:COPIER ()) (:PREDICATE ())) (DYNAMIC-SLOTS NULL)
  (STATE NULL)
  (PROPOSITION NULL)
  (TRUTH-VALUE NULL)
  (REVERSE-POLARITY? NULL)
  (STARTING-CLOCK-TICKS NULL-INTEGER :TYPE CL:FIXNUM)
  (ALLOTTED-CLOCK-TICKS NULL-INTEGER :TYPE CL:FIXNUM)
  (UP NULL)
  (DOWN NULL)
  (RESULT NULL)
  (ARGUMENT-CURSOR NULL-INTEGER :TYPE CL:FIXNUM)
  (PATTERN-RECORD NULL)
  (INHERITED-PATTERN-RECORD NULL)
  (CHOICE-POINT-UNBINDING-OFFSET NULL-INTEGER :TYPE CL:FIXNUM)
  (CURRENT-STRATEGY NULL)
  (NEXT-STRATEGIES NULL)
  (PARTIAL-MATCH-FRAME NULL)
  (JUSTIFICATIONS NULL)
  (GOAL-BINDINGS NULL)
  (CACHED-GOAL-RESULT? NULL)
  (DONT-CACHE-GOAL-FAILURE? NULL))

(CL:DEFSTRUCT (PARALLEL-CONTROL-FRAME (:CONC-NAME %PARALLEL-CONTROL-FRAME.) (:INCLUDE CONTROL-FRAME) (:CONSTRUCTOR %MAKE-PARALLEL-CONTROL-FRAME ()) (:COPIER ()) (:PREDICATE ())) (CHILD-THREADS NULL)
  (UNBOUND-VARIABLES? NULL)
  (CURRENT-CHILD-THREAD NULL)
  (SAVED-PARENT-CONTEXT NULL)
  (SAVED-PARENT-PARALLEL-THREAD NULL))

(CL:DEFSTRUCT (PARALLEL-THREAD (:CONC-NAME %PARALLEL-THREAD.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-PARALLEL-THREAD ()) (:COPIER ()) (:PREDICATE ())) (TOP-CONTROL-FRAME NULL)
  (HYPOTHETICAL-WORLD NULL)
  (VARIABLE-BINDINGS NULL)
  (UNBINDING-STACK NULL)
  (TOP-UNBINDING-STACK-OFFSET NULL-INTEGER :TYPE CL:FIXNUM)
  (PRIORITY NULL-INTEGER :TYPE CL:FIXNUM)
  (STATUS NULL))

(CL:DEFSTRUCT (CONTROL-FRAME-PRIORITY-QUEUE (:CONC-NAME %CONTROL-FRAME-PRIORITY-QUEUE.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-CONTROL-FRAME-PRIORITY-QUEUE ()) (:COPIER ()) (:PREDICATE ())) (QUEUE NULL))

(CL:DEFSTRUCT (PROOF-ADJUNCT (:CONC-NAME %PROOF-ADJUNCT.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-PROOF-ADJUNCT ()) (:COPIER ()) (:PREDICATE ())) "Subclasses of 'PROOF-ADJUNCT' provide for specialized
slots (specialized for a particular strategy) to hold a record of
an ongoing proof thread.")

(CL:DEFSTRUCT (SAVED-CONTEXT-PROOF-ADJUNCT (:CONC-NAME %SAVED-CONTEXT-PROOF-ADJUNCT.) (:INCLUDE PROOF-ADJUNCT) (:CONSTRUCTOR %MAKE-SAVED-CONTEXT-PROOF-ADJUNCT ()) (:COPIER ()) (:PREDICATE ())) (SAVED-CONTEXT NULL))

(CL:DEFSTRUCT (CLUSTERED-CONJUNCTION-PROOF-ADJUNCT (:CONC-NAME %CLUSTERED-CONJUNCTION-PROOF-ADJUNCT.) (:INCLUDE PROOF-ADJUNCT) (:CONSTRUCTOR %MAKE-CLUSTERED-CONJUNCTION-PROOF-ADJUNCT ()) (:COPIER ()) (:PREDICATE ())) (CLUSTER-FRAMES NULL))

(CL:DEFSTRUCT (CONDITIONAL-ANTECEDENT-PROOF-ADJUNCT (:CONC-NAME %CONDITIONAL-ANTECEDENT-PROOF-ADJUNCT.) (:INCLUDE PROOF-ADJUNCT) (:CONSTRUCTOR %MAKE-CONDITIONAL-ANTECEDENT-PROOF-ADJUNCT ()) (:COPIER ()) (:PREDICATE ())) (PROVABLE-RULE NULL)
  (GOAL NULL)
  (PHASE NULL))

(CL:DEFSTRUCT (PATTERN-RECORD (:CONC-NAME %PATTERN-RECORD.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-PATTERN-RECORD ()) (:COPIER ()) (:PREDICATE ())) "A pattern record records bookkeeping data used during
the processing of a description."
  (CONTROL-FRAME NULL)
  (VARIABLE-BINDINGS NULL)
  (UNBINDING-STACK NULL)
  (TOP-UNBINDING-STACK-OFFSET NULL-INTEGER :TYPE CL:FIXNUM)
  (DESCRIPTION NULL)
  (EXTERNAL-ARGUMENTS NULL)
  (BOOLEAN-VECTOR NULL)
  (OPTIMAL-PATTERN NULL)
  (COLLECTION-LIST NULL))

(CL:DEFSTRUCT (BOOLEAN-VECTOR-INDEX-NODE (:CONC-NAME %BOOLEAN-VECTOR-INDEX-NODE.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-BOOLEAN-VECTOR-INDEX-NODE ()) (:COPIER ()) (:PREDICATE ())) (TRUE-LINK NULL)
  (FALSE-LINK NULL)
  (THE-VECTOR NULL))

(CL:DEFSTRUCT (DESCRIPTION-EXTENSION-ITERATOR (:CONC-NAME %DESCRIPTION-EXTENSION-ITERATOR.) (:INCLUDE ITERATOR) (:CONSTRUCTOR %MAKE-DESCRIPTION-EXTENSION-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "Iterates over the extension of a description and
its subdescriptions, returning those propositions that are currently true."
  (ROOT-DESCRIPTION NULL)
  (SUBCOLLECTIONS NULL)
  (EXTENSION-ITERATOR NULL)
  (REFERENCE-PROPOSITION NULL)
  (ALREADY-GENERATED-LIST NULL)
  (ALREADY-GENERATED-TABLE NULL)
  (REMOVING-DUPLICATES? NULL)
  (TRUTH-VALUE NULL))

(CL:DEFSTRUCT (QUERY-SOLUTION-TABLE (:CONC-NAME %QUERY-SOLUTION-TABLE.) (:INCLUDE DICTIONARY) (:CONSTRUCTOR %MAKE-QUERY-SOLUTION-TABLE ()) (:COPIER ()) (:PREDICATE ())) "Special key/value map for query solutions indexed by output
variable binding vectors that also preserves the order of solution generation."
  (THE-MAP NULL)
  (QUERY NULL)
  (FIRST NULL)
  (LAST NULL))

(CL:DEFSTRUCT (QUERY-SOLUTION (:CONC-NAME %QUERY-SOLUTION.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-QUERY-SOLUTION ()) (:COPIER ()) (:PREDICATE ())) (BINDINGS NULL)
  (TRUTH-VALUE NULL)
  (MATCH-SCORE NULL-FLOAT :TYPE CL:DOUBLE-FLOAT)
  (JUSTIFICATION NULL)
  (ALL-JUSTIFICATIONS NULL)
  (NEXT NULL))

(CL:DEFSTRUCT (QUERY-SOLUTION-TABLE-ITERATOR (:CONC-NAME %QUERY-SOLUTION-TABLE-ITERATOR.) (:INCLUDE DICTIONARY-ITERATOR) (:CONSTRUCTOR %MAKE-QUERY-SOLUTION-TABLE-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) (THE-TABLE NULL)
  (CURSOR NULL))

(CL:DEFSTRUCT (PARTIAL-MATCH-FRAME (:CONC-NAME %PARTIAL-MATCH-FRAME.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-PARTIAL-MATCH-FRAME ()) (:COPIER ()) (:PREDICATE ())) "Abstract class acting as placeholder for system and
user-defined partial match implementations."
  (KIND NULL)
  (CONTROL-FRAME NULL)
  (PARENT NULL)
  (CHILD NULL)
  (POSITIVE-SCORE NULL-FLOAT :TYPE CL:DOUBLE-FLOAT)
  (NEGATIVE-SCORE NULL-FLOAT :TYPE CL:DOUBLE-FLOAT)
  (DYNAMIC-CUTOFF NULL-FLOAT :TYPE CL:DOUBLE-FLOAT)
  (ARGUMENT-SCORES NULL)
  (ARGUMENT-WEIGHTS NULL)
  (UNBOUND-VARS NULL)
  (SUCCESS? NULL))

(CL:DEFSTRUCT (INCREMENTAL-PARTIAL-MATCH (:CONC-NAME %INCREMENTAL-PARTIAL-MATCH.) (:INCLUDE PARTIAL-MATCH-FRAME) (:CONSTRUCTOR %MAKE-INCREMENTAL-PARTIAL-MATCH ()) (:COPIER ()) (:PREDICATE ())) (ACCUMULATED-SCORE NULL-FLOAT :TYPE CL:DOUBLE-FLOAT)
  (ACCUMULATED-WEIGHT NULL-FLOAT :TYPE CL:DOUBLE-FLOAT)
  (TOTAL-WEIGHT NULL-FLOAT :TYPE CL:DOUBLE-FLOAT)
  (MAXIMUM-SCORE NULL-FLOAT :TYPE CL:DOUBLE-FLOAT))

(CL:DEFSTRUCT (WHYNOT-PARTIAL-MATCH (:CONC-NAME %WHYNOT-PARTIAL-MATCH.) (:INCLUDE INCREMENTAL-PARTIAL-MATCH) (:CONSTRUCTOR %MAKE-WHYNOT-PARTIAL-MATCH ()) (:COPIER ()) (:PREDICATE ())) "Variant of :BASIC partial match strategy to support WHYNOT queries."
  (UNKNOWN-GOAL-CUTOFF NULL-INTEGER :TYPE CL:FIXNUM))

(CL:DEFSTRUCT (WHYNOT-DEEP-PARTIAL-MATCH (:CONC-NAME %WHYNOT-DEEP-PARTIAL-MATCH.) (:INCLUDE WHYNOT-PARTIAL-MATCH) (:CONSTRUCTOR %MAKE-WHYNOT-DEEP-PARTIAL-MATCH ()) (:COPIER ()) (:PREDICATE ())) "Variant of WhyNot partial match geared towards deep proofs.")

(CL:DEFSTRUCT (NN-PARTIAL-MATCH (:CONC-NAME %NN-PARTIAL-MATCH.) (:INCLUDE PARTIAL-MATCH-FRAME) (:CONSTRUCTOR %MAKE-NN-PARTIAL-MATCH ()) (:COPIER ()) (:PREDICATE ())) (ACCUMULATED-SCORE NULL-FLOAT :TYPE CL:DOUBLE-FLOAT)
  (MAXIMUM-SCORE NULL-FLOAT :TYPE CL:DOUBLE-FLOAT)
  (RULES NULL)
  (ARITY NULL-INTEGER :TYPE CL:FIXNUM))

(CL:DEFSTRUCT (TRAINING-EXAMPLE (:CONC-NAME %TRAINING-EXAMPLE.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-TRAINING-EXAMPLE ()) (:COPIER ()) (:PREDICATE ())) "A single example of a proposition paired with the score
  that should be returned and the module it should be evaluated in."
  (QUERY NULL)
  (CONCEPT NULL)
  (NAME NULL)
  (SCORE NULL-FLOAT :TYPE CL:DOUBLE-FLOAT)
  (MODULE NULL)
  (INPUT-FEATURES NULL)
  (INPUT NULL)
  (FACTS NULL)
  (NN-HIDDEN NULL)
  (OUTPUT NULL)
  (TEMP NULL-FLOAT :TYPE CL:DOUBLE-FLOAT)
  (CACHED-SOLUTION NULL)
  (TIMESTAMP NULL-INTEGER :TYPE CL:FIXNUM))

(CL:DEFSTRUCT (DECISION-TREE (:CONC-NAME %DECISION-TREE.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-DECISION-TREE ()) (:COPIER ()) (:PREDICATE ())) (FEATURE NULL)
  (FEATURE-INDEX NULL-INTEGER :TYPE CL:FIXNUM)
  (PROPOSITION NULL)
  (TRUTH-VALUE NULL)
  (CONCEPT NULL)
  (TRUE-BRANCH NULL)
  (FALSE-BRANCH NULL))

(CL:DEFSTRUCT (PROPOSITION-NEURAL-NETWORK (:CONC-NAME %PROPOSITION-NEURAL-NETWORK.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-PROPOSITION-NEURAL-NETWORK ()) (:COPIER ()) (:PREDICATE ())) (PROPOSITION NULL)
  (INPUT NULL)
  (HIDDEN NULL)
  (OUTPUT NULL-FLOAT :TYPE CL:DOUBLE-FLOAT)
  (INPUT-ERROR NULL)
  (HIDDEN-ERROR NULL)
  (IH NULL)
  (IH-DELTA NULL)
  (HO NULL)
  (HO-DELTA NULL)
  (IH-SLOPE NULL)
  (IH-PREV-SLOPE NULL)
  (HO-SLOPE NULL)
  (HO-PREV-SLOPE NULL))

(CL:DEFSTRUCT
 (MULTI-DIMENSIONAL-ARRAY (:CONC-NAME %MULTI-DIMENSIONAL-ARRAY.)
  (:INCLUDE ABSTRACT-COLLECTION)
  (:CONSTRUCTOR %MAKE-MULTI-DIMENSIONAL-ARRAY ()) (:COPIER ())
  (:PREDICATE ())))

(CL:DEFSTRUCT (2-D-FLOAT-ARRAY (:CONC-NAME %2-D-FLOAT-ARRAY.) (:INCLUDE MULTI-DIMENSIONAL-ARRAY) (:CONSTRUCTOR %MAKE-2-D-FLOAT-ARRAY ()) (:COPIER ()) (:PREDICATE ())) "Two-dimensional arrays with elements of type FLOAT."
  (NOF-ROWS NULL-INTEGER :TYPE CL:FIXNUM)
  (NOF-COLUMNS NULL-INTEGER :TYPE CL:FIXNUM)
  (THE-ARRAY STELLA::NULL-NATIVE-VECTOR :TYPE CL:SIMPLE-VECTOR))

(CL:DEFSTRUCT (2-D-ARRAY (:CONC-NAME %2-D-ARRAY.) (:INCLUDE MULTI-DIMENSIONAL-ARRAY) (:CONSTRUCTOR %MAKE-2-D-ARRAY ()) (:COPIER ()) (:PREDICATE ())) "Two-dimensional arrays with elements of type OBJECT."
  (NOF-ROWS NULL-INTEGER :TYPE CL:FIXNUM)
  (NOF-COLUMNS NULL-INTEGER :TYPE CL:FIXNUM)
  (THE-ARRAY STELLA::NULL-NATIVE-VECTOR :TYPE CL:SIMPLE-VECTOR))

(CL:DEFSTRUCT (FLOAT-VECTOR (:CONC-NAME %FLOAT-VECTOR.) (:INCLUDE ABSTRACT-COLLECTION) (:CONSTRUCTOR %MAKE-FLOAT-VECTOR ()) (:COPIER ()) (:PREDICATE ())) (ARRAY-SIZE NULL-INTEGER :TYPE CL:FIXNUM)
  (THE-ARRAY STELLA::NULL-NATIVE-VECTOR :TYPE CL:SIMPLE-VECTOR))

(CL:DEFSTRUCT (GOAL-CACHE (:CONC-NAME %GOAL-CACHE.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-GOAL-CACHE ()) (:COPIER ()) (:PREDICATE ())) "Cache of output bindings derived for a particular goal
and set of input bindings."
  (CACHED-BINDINGS NULL)
  (TIMESTAMP NULL-INTEGER :TYPE CL:FIXNUM)
  (PROPOSITION NULL)
  (REVERSE-POLARITY? NULL)
  (CACHE-CONTEXT NULL))

(CL:DEFSTRUCT (ATOMIC-GOAL-CACHE (:CONC-NAME %ATOMIC-GOAL-CACHE.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-ATOMIC-GOAL-CACHE ()) (:COPIER ()) (:PREDICATE ())) "Cache data structure to store the result of proving an atomic
and possibly open `proposition' relative to a set of variable `bindings'."
  (GOAL-CONTEXT NULL)
  (TIMESTAMP NULL-INTEGER :TYPE CL:FIXNUM)
  (TRUTH-VALUE NULL)
  (REVERSE-POLARITY? NULL)
  (PROPOSITION NULL)
  (BINDINGS NULL)
  (JUSTIFICATION NULL)
  (POSITIVE-SCORE NULL-FLOAT :TYPE CL:DOUBLE-FLOAT)
  (NEGATIVE-SCORE NULL-FLOAT :TYPE CL:DOUBLE-FLOAT)
  (PREVIOUS NULL)
  (NEXT NULL))

(CL:DEFSTRUCT (ATOMIC-GOAL-CACHE-ITERATOR (:CONC-NAME %ATOMIC-GOAL-CACHE-ITERATOR.) (:INCLUDE ITERATOR) (:CONSTRUCTOR %MAKE-ATOMIC-GOAL-CACHE-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) (GOAL NULL)
  (CACHE-LIST NULL))

(CL:DEFSTRUCT (JUSTIFICATION (:CONC-NAME %JUSTIFICATION.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-JUSTIFICATION ()) (:COPIER ()) (:PREDICATE ())) (INFERENCE-RULE NULL)
  (PROPOSITION NULL)
  (ANTECEDENTS NULL)
  (PATTERN-JUSTIFICATION NULL)
  (SUBSTITUTION NULL)
  (REVERSE-POLARITY? NULL)
  (TRUTH-VALUE NULL)
  (POSITIVE-SCORE NULL-FLOAT :TYPE CL:DOUBLE-FLOAT)
  (NEGATIVE-SCORE NULL-FLOAT :TYPE CL:DOUBLE-FLOAT))

(CL:DEFSTRUCT (PRIMITIVE-STRATEGY (:CONC-NAME %PRIMITIVE-STRATEGY.) (:INCLUDE JUSTIFICATION) (:CONSTRUCTOR %MAKE-PRIMITIVE-STRATEGY ()) (:COPIER ()) (:PREDICATE ())) (STRATEGY NULL))

(CL:DEFSTRUCT (FORWARD-GOAL-RECORD (:CONC-NAME %FORWARD-GOAL-RECORD.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-FORWARD-GOAL-RECORD ()) (:COPIER ()) (:PREDICATE ())) (FORWARD-GOAL NULL)
  (FORWARD-RULE NULL))

(CL:DEFSTRUCT (FORWARD-JUSTIFICATION (:CONC-NAME %FORWARD-JUSTIFICATION.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-FORWARD-JUSTIFICATION ()) (:COPIER ()) (:PREDICATE ())) "Connects a proposition to other propositions
that collectively implied its truth."
  (CONSEQUENT NULL)
  (FORWARD-RULE NULL)
  (ANTECEDENTS NULL))

(CL:DEFSTRUCT (EXPLANATION-INFO (:CONC-NAME %EXPLANATION-INFO.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-EXPLANATION-INFO ()) (:COPIER ()) (:PREDICATE ())) (LABEL STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (DEPTH NULL-INTEGER :TYPE CL:FIXNUM)
  (EXPLAINED? NULL))

(CL:DEFSTRUCT (WHYNOT-PROOF-CLASS (:CONC-NAME %WHYNOT-PROOF-CLASS.) (:INCLUDE SET) (:CONSTRUCTOR %MAKE-WHYNOT-PROOF-CLASS ()) (:COPIER ()) (:PREDICATE ())) "Set of equivalent WhyNot proofs that differ in at most one
variable binding all on the same `deviating-variable'."
  (REPRESENTATIVE NULL)
  (DEVIATING-PATTERN NULL)
  (DEVIATING-VARIABLE NULL)
  (DEVIATING-INSTANCES NULL))

(CL:DEFSTRUCT (ALTERNATIVE-BINDINGS-SET (:CONC-NAME %ALTERNATIVE-BINDINGS-SET.) (:INCLUDE THING) (:CONSTRUCTOR %MAKE-ALTERNATIVE-BINDINGS-SET ()) (:COPIER ()) (:PREDICATE ())) "Represents a set of alternative bindings collected for the pattern
variable `(the-variable self)'."
  (THE-VARIABLE NULL)
  (BINDINGS NULL))

(CL:DEFSTRUCT (COMPUTED-PROCEDURE (:CONC-NAME %COMPUTED-PROCEDURE.) (:INCLUDE THING) (:CONSTRUCTOR %MAKE-COMPUTED-PROCEDURE ()) (:COPIER ()) (:PREDICATE ())) "Each instance denotes a programming language 
function that computes some procedure.  The slot 'procedure-name'
provides the name of the procedure.  The slot 'procedure-code'
points directly to the procedure itself.  Both slots are optional;
if neither is supplied, the procedure will be invoked by extracting
its name from the name of the instance."
  (PROCEDURE-NAME NULL)
  (PROCEDURE-CODE NULL))

(CL:DEFSTRUCT (SUBSTRING-POSITION-ITERATOR (:CONC-NAME %SUBSTRING-POSITION-ITERATOR.) (:INCLUDE ITERATOR) (:CONSTRUCTOR %MAKE-SUBSTRING-POSITION-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) (SUPER-STRING STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (SUB-STRING STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (START NULL-INTEGER :TYPE CL:FIXNUM)
  (SUB-LENGTH NULL-INTEGER :TYPE CL:FIXNUM))

(CL:DEFSTRUCT (ABSTRACT-PROPOSITIONS-ITERATOR (:CONC-NAME %ABSTRACT-PROPOSITIONS-ITERATOR.) (:INCLUDE ITERATOR) (:CONSTRUCTOR %MAKE-ABSTRACT-PROPOSITIONS-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "Iterator class that can generate sets of propositions matching
its `selection-pattern'."
  (SELECTION-PATTERN NULL)
  (PROPOSITION-CURSOR NULL)
  (EQUIVALENTS-STACK NULL))

(CL:DEFSTRUCT (TRUE-PROPOSITIONS-ITERATOR (:CONC-NAME %TRUE-PROPOSITIONS-ITERATOR.) (:INCLUDE ABSTRACT-PROPOSITIONS-ITERATOR) (:CONSTRUCTOR %MAKE-TRUE-PROPOSITIONS-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "Iterator class that can generate sets of true propositions
matching its `selection-pattern'."
  (TRUTH-VALUE NULL))

(CL:DEFSTRUCT (CLASHING-PROPOSITIONS-ITERATOR (:CONC-NAME %CLASHING-PROPOSITIONS-ITERATOR.) (:INCLUDE TRUE-PROPOSITIONS-ITERATOR) (:CONSTRUCTOR %MAKE-CLASHING-PROPOSITIONS-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) (REFERENCE-PROPOSITION NULL))

(CL:DEFSTRUCT (DIRECTLY-LINKED-OBJECTS-ITERATOR (:CONC-NAME %DIRECTLY-LINKED-OBJECTS-ITERATOR.) (:INCLUDE TRUE-PROPOSITIONS-ITERATOR) (:CONSTRUCTOR %MAKE-DIRECTLY-LINKED-OBJECTS-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) (INVERSE? NULL)
  (ROOT-TRUTH-VALUE NULL))

(CL:DEFSTRUCT (SPECIALIZING-PROPOSITIONS-ITERATOR (:CONC-NAME %SPECIALIZING-PROPOSITIONS-ITERATOR.) (:INCLUDE TRUE-PROPOSITIONS-ITERATOR) (:CONSTRUCTOR %MAKE-SPECIALIZING-PROPOSITIONS-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "Iterator class that can generate sets of true propositions
matching its `selection-pattern' or a more specific pattern that substitutes
one of the relations in `specializing-relations'."
  (SPECIALIZING-RELATIONS NULL))

(CL:DEFSTRUCT (TRANSITIVE-CLOSURE-ITERATOR (:CONC-NAME %TRANSITIVE-CLOSURE-ITERATOR.) (:INCLUDE ITERATOR) (:CONSTRUCTOR %MAKE-TRANSITIVE-CLOSURE-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "Iterator that visits all nodes reachable using an
embedded adjacency function."
  (ALLOCATE-ADJACENCY-ITERATOR-FUNCTION NULL)
  (FILTER? NULL)
  (ADJACENCY-ITERATOR-STACK NULL)
  (BEEN-THERE-LIST NULL))

(CL:DEFSTRUCT (SUPPORTED-CLOSURE-ITERATOR (:CONC-NAME %SUPPORTED-CLOSURE-ITERATOR.) (:INCLUDE TRANSITIVE-CLOSURE-ITERATOR) (:CONSTRUCTOR %MAKE-SUPPORTED-CLOSURE-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "Iterator that visits all objects reachable via true link propositions
generated by an embedded link proposition iterator.  Each new object reached
is represented as an `(<object> <truth-value>)' pair, where <truth-value> is
the cumulative truth value of the links followed from the start to reach it.
The embedded `allocate-adjacency-iterator-function' needs to be able to take
an `(<object> <truth-value>)' pair as an argument which is different than the
requirement for TRANSITIVE-CLOSURE-ITERATOR's.")

(CL:DEFSTRUCT (GOAL-RECORD (:CONC-NAME %GOAL-RECORD.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-GOAL-RECORD ()) (:COPIER ()) (:PREDICATE ())) (GENERATOR-GOALS NULL)
  (OTHER-GOALS NULL))

(CL:DEFSTRUCT (MARKER-TABLE (:CONC-NAME %MARKER-TABLE.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-MARKER-TABLE ()) (:COPIER ()) (:PREDICATE ())) "Used to record (mark) a set of objects.
Can be optimized for testing only, or also for recall."
  (TEST-TABLE NULL)
  (RECALL-TABLE NULL)
  (SUPPORTS-RECALL? NULL))

(CL:DEFSTRUCT (CLASSIFICATION-CACHE (:CONC-NAME %CLASSIFICATION-CACHE.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-CLASSIFICATION-CACHE ()) (:COPIER ()) (:PREDICATE ())) "Records various kinds of data about a description
during a classification session."
  (INFERABLE-DIRECT-SUBDESCRIPTIONS NULL)
  (CACHE-UPCLASSIFICATION-TIMESTAMP NULL-INTEGER :TYPE CL:FIXNUM)
  (CACHE-DOWNCLASSIFICATION-TIMESTAMP NULL-INTEGER :TYPE CL:FIXNUM)
  (INTRODUCTION-TIMESTAMP NULL-INTEGER :TYPE CL:FIXNUM))

(CL:DEFSTRUCT (CLASSIFICATION-SESSION (:CONC-NAME %CLASSIFICATION-SESSION.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-CLASSIFICATION-SESSION ()) (:COPIER ()) (:PREDICATE ())) (CLASSIFICATION-WORLD NULL)
  (CLASSIFICATION-CACHE-TABLE NULL)
  (CLASSIFICATION-TIMECLOCK NULL-INTEGER :TYPE CL:FIXNUM)
  (INTRODUCTION-TIMESTAMP-STACK NULL)
  (EVERYTHING-CLASSIFIED? NULL)
  (LAST-CACHE-TABLE-KEY NULL)
  (LAST-CACHE-TABLE-VALUE NULL))

(CL:EVAL-WHEN (CL:COMPILE CL:LOAD CL:EVAL)
  (CL:UNLESS (CL:FIND-PACKAGE "STELLA")
     (CL:DEFPACKAGE "STELLA" (:USE))))

(CL:IN-PACKAGE "STELLA")

(CL:DEFSTRUCT (|/PL-KERNEL-KB/INTEGER-INTERVAL| (:CONC-NAME |/PL-KERNEL-KB/%INTEGER-INTERVAL.|) (:INCLUDE THING) (:CONSTRUCTOR |/PL-KERNEL-KB/%MAKE-INTEGER-INTERVAL| ()) (:COPIER ()) (:PREDICATE ())) "An interval of integers"
  (INTERVAL-LOWER-BOUND NULL-INTEGER :TYPE CL:FIXNUM)
  (INTERVAL-UPPER-BOUND NULL-INTEGER :TYPE CL:FIXNUM))

(CL:DEFSTRUCT (|/PL-KERNEL-KB/INTERVAL-CACHE| (:CONC-NAME |/PL-KERNEL-KB/%INTERVAL-CACHE.|) (:INCLUDE THING) (:CONSTRUCTOR |/PL-KERNEL-KB/%MAKE-INTERVAL-CACHE| ()) (:COPIER ()) (:PREDICATE ())) (HOME-CONTEXT NULL)
  (INTERVAL-MEMBER NULL)
  (LOWER-BOUND NULL)
  (UPPER-BOUND NULL)
  (STRICT-LOWER-BOUND? NULL)
  (STRICT-UPPER-BOUND? NULL))

(CL:EVAL-WHEN (CL:COMPILE CL:LOAD CL:EVAL)
  (CL:UNLESS (CL:FIND-PACKAGE "LOOM-API")
     (CL:DEFPACKAGE "LOOM-API" (:USE))))

(CL:IN-PACKAGE "LOOM-API")

(CL:DEFSTRUCT (LOOM-ROLE (:CONC-NAME %LOOM-ROLE.) (:INCLUDE STELLA::THING) (:CONSTRUCTOR %MAKE-LOOM-ROLE ()) (:COPIER ()) (:PREDICATE ())) "")

(CL:EVAL-WHEN (CL:COMPILE CL:LOAD CL:EVAL)
  (CL:UNLESS (CL:FIND-PACKAGE "PLI")
     (CL:DEFPACKAGE "PLI" (:USE))))

(CL:IN-PACKAGE "PLI")

(CL:DEFSTRUCT (ENVIRONMENT (:CONC-NAME %ENVIRONMENT.) (:INCLUDE STELLA::STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-ENVIRONMENT ()) (:COPIER ()) (:PREDICATE ())) (LEVEL STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING))

(CL:DEFSTRUCT (PL-ITERATOR (:CONC-NAME %PL-ITERATOR.) (:INCLUDE STELLA::ITERATOR) (:CONSTRUCTOR %MAKE-PL-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) (CURSOR STELLA::NULL))
