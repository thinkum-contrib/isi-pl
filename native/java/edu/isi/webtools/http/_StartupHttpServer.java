//  -*- Mode: Java -*-
//
// _StartupHttpServer.java

/*
+---------------------------- BEGIN LICENSE BLOCK ---------------------------+
|                                                                            |
| Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
|                                                                            |
| The contents of this file are subject to the Mozilla Public License        |
| Version 1.1 (the "License"); you may not use this file except in           |
| compliance with the License. You may obtain a copy of the License at       |
| http://www.mozilla.org/MPL/                                                |
|                                                                            |
| Software distributed under the License is distributed on an "AS IS" basis, |
| WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
| for the specific language governing rights and limitations under the       |
| License.                                                                   |
|                                                                            |
| The Original Code is the STELLA Programming Language.                      |
|                                                                            |
| The Initial Developer of the Original Code is                              |
| UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
| 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
|                                                                            |
| Portions created by the Initial Developer are Copyright (C) 2003-2014      |
| the Initial Developer. All Rights Reserved.                                |
|                                                                            |
| Contributor(s):                                                            |
|                                                                            |
| Alternatively, the contents of this file may be used under the terms of    |
| either the GNU General Public License Version 2 or later (the "GPL"), or   |
| the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
| in which case the provisions of the GPL or the LGPL are applicable instead |
| of those above. If you wish to allow use of your version of this file only |
| under the terms of either the GPL or the LGPL, and not to allow others to  |
| use your version of this file under the terms of the MPL, indicate your    |
| decision by deleting the provisions above and replace them with the notice |
| and other provisions required by the GPL or the LGPL. If you do not delete |
| the provisions above, a recipient may use your version of this file under  |
| the terms of any one of the MPL, the GPL or the LGPL.                      |
|                                                                            |
+---------------------------- END LICENSE BLOCK -----------------------------+
*/

package edu.isi.webtools.http;

import edu.isi.stella.javalib.Native;
import edu.isi.stella.javalib.StellaSpecialVariable;
import edu.isi.stella.*;

public class _StartupHttpServer {
  static void helpStartupHttpServer1() {
    {
      Http.SYM_HTTP_HTTP_SERVER_EXIT_HOOK = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("HTTP-SERVER-EXIT-HOOK", null, 0)));
      Http.KWD_OK = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("OK", null, 2)));
      Http.KWD_REDIRECT = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("REDIRECT", null, 2)));
      Http.KWD_FORBIDDEN = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("FORBIDDEN", null, 2)));
      Http.KWD_NOT_FOUND = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("NOT-FOUND", null, 2)));
      Http.KWD_BAD_REQUEST = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("BAD-REQUEST", null, 2)));
      Http.KWD_INTERNAL_ERROR = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("INTERNAL-ERROR", null, 2)));
      Http.KWD_NOT_IMPLEMENTED = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("NOT-IMPLEMENTED", null, 2)));
      Http.KWD_PLAIN_TEXT = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("PLAIN-TEXT", null, 2)));
      Http.KWD_HTML = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("HTML", null, 2)));
      Http.KWD_XML = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("XML", null, 2)));
      Http.KWD_BINARY = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("BINARY", null, 2)));
      Http.KWD_IMAGE_GIF = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("IMAGE-GIF", null, 2)));
      Http.KWD_IMAGE_JPG = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("IMAGE-JPG", null, 2)));
      Http.KWD_IMAGE_PNG = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("IMAGE-PNG", null, 2)));
      Http.KWD_AUDIO_MPEG = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("AUDIO-MPEG", null, 2)));
      Http.KWD_PDF = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("PDF", null, 2)));
      Http.KWD_MSWORD = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("MSWORD", null, 2)));
      Http.KWD_HANDLER_TYPE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("HANDLER-TYPE", null, 2)));
      Http.KWD_FILE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("FILE", null, 2)));
      Http.KWD_DIRECTORY = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("DIRECTORY", null, 2)));
      Http.KWD_HANDLER = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("HANDLER", null, 2)));
      Http.KWD_CONTENT_TYPE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("CONTENT-TYPE", null, 2)));
      Http.KWD_PATH = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("PATH", null, 2)));
      Http.KWD_DOCUMENTATION = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("DOCUMENTATION", null, 2)));
      Http.SYM_STELLA_LOAD_SYSTEM = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("LOAD-SYSTEM", Stella.getStellaModule("/STELLA", true), 0)));
      Http.SYM_HTTP_STARTUP_HTTP_SERVER = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("STARTUP-HTTP-SERVER", null, 0)));
    }
  }

  static void helpStartupHttpServer2() {
    {
      Stella.defineFunctionObject("GET-DEFAULT-HTTP-SERVER-IMPL", "(DEFUN (GET-DEFAULT-HTTP-SERVER-IMPL STRING) ((ERROR? BOOLEAN)) :DOCUMENTATION \"Return a default HTTP server implementation system for the case\nwhere none has been loaded yet.  If `error?' is TRUE, raise an error if none\nis defined for the current native language environment.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.webtools.http.Http", "getDefaultHttpServerImpl", new java.lang.Class [] {java.lang.Boolean.TYPE}), null);
      Stella.defineFunctionObject("START-HTTP-SERVER", "(DEFUN (START-HTTP-SERVER STRING) ((PORT INTEGER)) :DOCUMENTATION \"Start an HTTP server running at `port'.  If there is already\na server instance running, it will be stopped first.  If `port' is <= 0 or\nNULL, use the value of `*default-http-server-port*'.  Returns the listening\naddress of the started server instance.\" :PUBLIC? TRUE :COMMAND? TRUE)", Native.find_java_method("edu.isi.webtools.http.Http", "startHttpServer", new java.lang.Class [] {java.lang.Integer.TYPE}), Native.find_java_method("edu.isi.webtools.http.Http", "startHttpServerEvaluatorWrapper", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}));
      Stella.defineMethodObject("(DEFMETHOD (START-HTTP-SERVER-IMPL STRING) ((SERVER HTTP-SERVER) (PORT INTEGER)))", Native.find_java_method("edu.isi.webtools.http.HttpServer", "startHttpServerImpl", new java.lang.Class [] {java.lang.Integer.TYPE}), ((java.lang.reflect.Method)(null)));
      Stella.defineFunctionObject("STOP-HTTP-SERVER", "(DEFUN STOP-HTTP-SERVER () :DOCUMENTATION \"Stop any currently running HTTP server.  If there is no\nserver instance running, this is a no-op.\" :PUBLIC? TRUE :COMMAND? TRUE)", Native.find_java_method("edu.isi.webtools.http.Http", "stopHttpServer", new java.lang.Class [] {}), null);
      Stella.defineMethodObject("(DEFMETHOD STOP-HTTP-SERVER-IMPL ((SERVER HTTP-SERVER)))", Native.find_java_method("edu.isi.webtools.http.HttpServer", "stopHttpServerImpl", new java.lang.Class [] {}), ((java.lang.reflect.Method)(null)));
      Stella.defineFunctionObject("HTTP-SERVER-EXIT-HOOK", "(DEFUN HTTP-SERVER-EXIT-HOOK ((ARGUMENT OBJECT)) :DOCUMENTATION \"Hook function that will be called upon PowerLoom exit.\nThis is a no-op if no server is running or if the server is not supported.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.webtools.http.Http", "httpServerExitHook", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("GET-HEADER-VALUE", "(DEFUN (GET-HEADER-VALUE STRING) ((XCHG HTTP-EXCHANGE) (KEY KEYWORD)) :DOCUMENTATION \"Returns the value associated with `key' in `xchg's request\nheaders represented as a string.  If no value is found, NULL will be returned.\nIf there are multiple values, an arbitrary one will be returned.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.webtools.http.HttpExchange", "getHeaderValue", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange"), Native.find_java_class("edu.isi.stella.Keyword")}), null);
      Stella.defineMethodObject("(DEFMETHOD (GET-HEADER-VALUE-IMPL STRING) ((SERVER HTTP-SERVER) (XCHG HTTP-EXCHANGE) (KEY KEYWORD)))", Native.find_java_method("edu.isi.webtools.http.HttpServer", "getHeaderValueImpl", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange"), Native.find_java_class("edu.isi.stella.Keyword")}), ((java.lang.reflect.Method)(null)));
      Stella.defineFunctionObject("SET-REPLY-HEADER-VALUE", "(DEFUN SET-REPLY-HEADER-VALUE ((XCHG HTTP-EXCHANGE) (KEY KEYWORD) (VALUE STRING)) :DOCUMENTATION \"Set the value associated with `key' in `xchg's reply headers to `value'.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.webtools.http.HttpExchange", "setReplyHeaderValue", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange"), Native.find_java_class("edu.isi.stella.Keyword"), Native.find_java_class("java.lang.String")}), null);
      Stella.defineMethodObject("(DEFMETHOD SET-REPLY-HEADER-VALUE-IMPL ((SERVER HTTP-SERVER) (XCHG HTTP-EXCHANGE) (KEY KEYWORD) (VALUE STRING)))", Native.find_java_method("edu.isi.webtools.http.HttpServer", "setReplyHeaderValueImpl", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange"), Native.find_java_class("edu.isi.stella.Keyword"), Native.find_java_class("java.lang.String")}), ((java.lang.reflect.Method)(null)));
      Stella.defineFunctionObject("GET-REQUEST-URI", "(DEFUN (GET-REQUEST-URI STRING) ((XCHG HTTP-EXCHANGE)) :DOCUMENTATION \"Return the raw URI associated with `xchg' as a string.  It is ensured\nthat any URI-encoded characters are not yet decoded to facilitate further parsing.\nThis does not include any protocol/scheme and host/port information.  For example, if\nthe user typed http://a.b.c:42/foo/bar.html#frag?a+b+c into the client, this function\nwill return /foo/bar.html#frag?a+b+c .\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.webtools.http.HttpExchange", "getRequestUri", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange")}), null);
      Stella.defineMethodObject("(DEFMETHOD (GET-REQUEST-URI-IMPL STRING) ((SERVER HTTP-SERVER) (XCHG HTTP-EXCHANGE)))", Native.find_java_method("edu.isi.webtools.http.HttpServer", "getRequestUriImpl", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange")}), ((java.lang.reflect.Method)(null)));
      Stella.defineFunctionObject("GET-REQUEST-URI-QUERY", "(DEFUN (GET-REQUEST-URI-QUERY STRING) ((XCHG HTTP-EXCHANGE)) :DOCUMENTATION \"Return the raw query portion of the URI associated with `xchg'.  It is ensured\nthat any URI-encoded characters are not yet decoded to facilitate further parsing.  For example,\nif the user typed http://a.b.c:42/foo/bar.html#frag?a+b+c into the client, this function will\nreturn a+b+c .\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.webtools.http.HttpExchange", "getRequestUriQuery", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange")}), null);
      Stella.defineMethodObject("(DEFMETHOD (GET-REQUEST-URI-QUERY-IMPL STRING) ((SERVER HTTP-SERVER) (XCHG HTTP-EXCHANGE)))", Native.find_java_method("edu.isi.webtools.http.HttpServer", "getRequestUriQueryImpl", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange")}), ((java.lang.reflect.Method)(null)));
      Stella.defineFunctionObject("GET-REQUEST-URI-PATH", "(DEFUN (GET-REQUEST-URI-PATH STRING) ((XCHG HTTP-EXCHANGE)) :DOCUMENTATION \"Return the raw path portion of the URI associated with `xchg'.  It is ensured\nthat any URI-encoded characters are not yet decoded to facilitate further parsing.  For example,\nif the user typed http://a.b.c:42/foo/bar.html#frag?a+b+c into the client, this function will\nreturn /foo/bar.html.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.webtools.http.HttpExchange", "getRequestUriPath", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange")}), null);
      Stella.defineMethodObject("(DEFMETHOD (GET-REQUEST-URI-PATH-IMPL STRING) ((SERVER HTTP-SERVER) (XCHG HTTP-EXCHANGE)))", Native.find_java_method("edu.isi.webtools.http.HttpServer", "getRequestUriPathImpl", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange")}), ((java.lang.reflect.Method)(null)));
      Stella.defineFunctionObject("GET-REQUEST-METHOD", "(DEFUN (GET-REQUEST-METHOD KEYWORD) ((XCHG HTTP-EXCHANGE)) :DOCUMENTATION \"Return the method associated with `xchg' (:get, :put or :post).\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.webtools.http.HttpExchange", "getRequestMethod", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange")}), null);
      Stella.defineMethodObject("(DEFMETHOD (GET-REQUEST-METHOD-IMPL KEYWORD) ((SERVER HTTP-SERVER) (XCHG HTTP-EXCHANGE)))", Native.find_java_method("edu.isi.webtools.http.HttpServer", "getRequestMethodImpl", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange")}), ((java.lang.reflect.Method)(null)));
      Stella.defineFunctionObject("GET-REQUEST-BODY", "(DEFUN (GET-REQUEST-BODY STRING) ((XCHG HTTP-EXCHANGE)) :DOCUMENTATION \"Returns the body of `xchg' as a string.  If there was no body (e.g.,\nif this was a GET), the result will be the empty string.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.webtools.http.HttpExchange", "getRequestBody", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange")}), null);
      Stella.defineMethodObject("(DEFMETHOD (GET-REQUEST-BODY-IMPL STRING) ((SERVER HTTP-SERVER) (XCHG HTTP-EXCHANGE)))", Native.find_java_method("edu.isi.webtools.http.HttpServer", "getRequestBodyImpl", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange")}), ((java.lang.reflect.Method)(null)));
      Stella.defineFunctionObject("GET-REQUEST-LOCAL-ADDRESS", "(DEFUN (GET-REQUEST-LOCAL-ADDRESS STRING) ((XCHG HTTP-EXCHANGE)) :DOCUMENTATION \"Returns the local-address that received `xchg' as a string.\nConcatenates the hostname with a port in standard : notation.  If the hostname\ncan be resolved it will be, otherwise a numeric representation will be returned.\nNote that different implementations have slightly different behavior.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.webtools.http.HttpExchange", "getRequestLocalAddress", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange")}), null);
      Stella.defineMethodObject("(DEFMETHOD (GET-REQUEST-LOCAL-ADDRESS-IMPL STRING) ((SERVER HTTP-SERVER) (XCHG HTTP-EXCHANGE)))", Native.find_java_method("edu.isi.webtools.http.HttpServer", "getRequestLocalAddressImpl", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange")}), ((java.lang.reflect.Method)(null)));
      Stella.defineFunctionObject("GET-REQUEST-REMOTE-ADDRESS", "(DEFUN (GET-REQUEST-REMOTE-ADDRESS STRING) ((XCHG HTTP-EXCHANGE)) :DOCUMENTATION \"Returns the remote-address that sent `xchg' as a string.\nConcatenates the hostname with a port in standard : notation.  If the hostname\ncan be resolved it will be, otherwise a numeric representation will be returned.\nNote that different implementations have slightly different behavior.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.webtools.http.HttpExchange", "getRequestRemoteAddress", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange")}), null);
      Stella.defineMethodObject("(DEFMETHOD (GET-REQUEST-REMOTE-ADDRESS-IMPL STRING) ((SERVER HTTP-SERVER) (XCHG HTTP-EXCHANGE)))", Native.find_java_method("edu.isi.webtools.http.HttpServer", "getRequestRemoteAddressImpl", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange")}), ((java.lang.reflect.Method)(null)));
      Stella.defineFunctionObject("GET-REPLY-STREAM", "(DEFUN (GET-REPLY-STREAM NATIVE-OUTPUT-STREAM) ((XCHG HTTP-EXCHANGE)) :DOCUMENTATION \"Return the stream to which response methods have to write their output.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.webtools.http.HttpExchange", "getReplyStream", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange")}), null);
      Stella.defineMethodObject("(DEFMETHOD (GET-REPLY-STREAM-IMPL NATIVE-OUTPUT-STREAM) ((SERVER HTTP-SERVER) (XCHG HTTP-EXCHANGE)))", Native.find_java_method("edu.isi.webtools.http.HttpServer", "getReplyStreamImpl", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange")}), ((java.lang.reflect.Method)(null)));
      Stella.defineFunctionObject("SET-RESPONSE-CODE", "(DEFUN SET-RESPONSE-CODE ((XCHG HTTP-EXCHANGE) (CODE KEYWORD)) :DOCUMENTATION \"Set the response code of the generated reply to `code'.  By default\n:OK (code 200) is used.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.webtools.http.HttpExchange", "setResponseCode", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange"), Native.find_java_class("edu.isi.stella.Keyword")}), null);
      Stella.defineMethodObject("(DEFMETHOD SET-RESPONSE-CODE-IMPL ((SERVER HTTP-SERVER) (XCHG HTTP-EXCHANGE) (CODE KEYWORD)))", Native.find_java_method("edu.isi.webtools.http.HttpServer", "setResponseCodeImpl", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange"), Native.find_java_class("edu.isi.stella.Keyword")}), ((java.lang.reflect.Method)(null)));
      Stella.defineFunctionObject("GET-HTTP-RESPONSE-CODE", "(DEFUN (GET-HTTP-RESPONSE-CODE INTEGER) ((CODENAME KEYWORD) (DEFAULT KEYWORD)))", Native.find_java_method("edu.isi.webtools.http.Http", "getHttpResponseCode", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Keyword"), Native.find_java_class("edu.isi.stella.Keyword")}), null);
      Stella.defineFunctionObject("GET-HTTP-RESPONSE-DESC", "(DEFUN (GET-HTTP-RESPONSE-DESC STRING) ((CODENAME KEYWORD) (DEFAULT KEYWORD)))", Native.find_java_method("edu.isi.webtools.http.Http", "getHttpResponseDesc", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Keyword"), Native.find_java_class("edu.isi.stella.Keyword")}), null);
      Stella.defineFunctionObject("HTTP-SUCCESS-RESPONSE-CODE?", "(DEFUN (HTTP-SUCCESS-RESPONSE-CODE? BOOLEAN) ((CODE INTEGER)))", Native.find_java_method("edu.isi.webtools.http.Http", "httpSuccessResponseCodeP", new java.lang.Class [] {java.lang.Integer.TYPE}), null);
      Stella.defineFunctionObject("GET-HTTP-MIME-TYPE", "(DEFUN (GET-HTTP-MIME-TYPE STRING) ((TYPENAME KEYWORD) (DEFAULT KEYWORD)))", Native.find_java_method("edu.isi.webtools.http.Http", "getHttpMimeType", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Keyword"), Native.find_java_class("edu.isi.stella.Keyword")}), null);
      Stella.defineFunctionObject("GET-HTTP-MIME-TYPE-FROM-EXTENSION", "(DEFUN (GET-HTTP-MIME-TYPE-FROM-EXTENSION STRING) ((EXTENSION STRING)))", Native.find_java_method("edu.isi.webtools.http.Http", "getHttpMimeTypeFromExtension", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("GUESS-FILE-CONTENT-TYPE", "(DEFUN (GUESS-FILE-CONTENT-TYPE STRING) ((FILE STRING)))", Native.find_java_method("edu.isi.webtools.http.Http", "guessFileContentType", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("PARSE-AND-DECODE-URL-ARGUMENTS", "(DEFUN (PARSE-AND-DECODE-URL-ARGUMENTS (CONS OF STRING-WRAPPER)) ((ARGUMENTS STRING) (SEPARATOR CHARACTER)) :DOCUMENTATION \"Given the `arguments' following the `?' character in a URL, split them at\n`separator' and return them as a list of properly decoded strings.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.webtools.http.Http", "parseAndDecodeUrlArguments", new java.lang.Class [] {Native.find_java_class("java.lang.String"), java.lang.Character.TYPE}), null);
      Stella.defineFunctionObject("PARSE-AND-DECODE-FORM-VALUES", "(DEFUN (PARSE-AND-DECODE-FORM-VALUES (KEY-VALUE-LIST OF STRING-WRAPPER STRING-WRAPPER)) ((VALUES STRING)) :DOCUMENTATION \"Given the `values' returned by a form, parse and decode them and return them as\na key-value-list.  NOTE: values will not be trimmed and empty values will be represented by the empty\nstring rather than NULL.  Also, if the same input name occurs more than once, only the value of the\nlast input will be recorded in the resulting key-value-list.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.webtools.http.Http", "parseAndDecodeFormValues", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("PARSE-AND-DECODE-NON-UNIQUE-FORM-VALUES", "(DEFUN (PARSE-AND-DECODE-NON-UNIQUE-FORM-VALUES (PROPERTY-LIST OF STRING-WRAPPER STRING-WRAPPER)) ((VALUES STRING)) :DOCUMENTATION \"Given the `values' returned by a form, parse and decode them and return them as\na property-list.  NOTE: values will not be trimmed and empty values will be represented by the empty\nstring rather than NULL.  Keys will be inserted into the result in the order they appear in the form.\nIf they are non-unique, multiple entries per key will result which can be iterated over, however,\nstandard `lookup' calls will return the value of the first key only.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.webtools.http.Http", "parseAndDecodeNonUniqueFormValues", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("GET-HTTP-DOCUMENT-ROOT", "(DEFUN (GET-HTTP-DOCUMENT-ROOT STRING) () :PUBLIC? TRUE)", Native.find_java_method("edu.isi.webtools.http.Http", "getHttpDocumentRoot", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("SET-HTTP-DOCUMENT-ROOT", "(DEFUN SET-HTTP-DOCUMENT-ROOT ((ROOT STRING)) :DOCUMENTATION \"Set the document root to `root'.  Important: this needs to be\ncalled before any handlers are published, otherwise it won't be effective.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.webtools.http.Http", "setHttpDocumentRoot", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineMethodObject("(DEFMETHOD (LOOKUP-HANDLER PROPERTY-LIST) ((SERVER HTTP-SERVER) (PATH STRING)) :DOCUMENTATION \"Simple default handler lookup implementation.  Return the registered\nhandler whose path is identical to `path' or is the longest prefix of `path'.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.webtools.http.HttpServer", "lookupHandler", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), ((java.lang.reflect.Method)(null)));
      Stella.defineFunctionObject("PUBLISH-REGISTERED-HTTP-HANDLERS", "(DEFUN PUBLISH-REGISTERED-HTTP-HANDLERS () :DOCUMENTATION \"Publish all currently registered HTTP handler with the current HTTP server.\nThis is run every time a server is started with `start-http-server'.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.webtools.http.Http", "publishRegisteredHttpHandlers", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("PRINT-REGISTERED-HTTP-HANDLERS", "(DEFUN PRINT-REGISTERED-HTTP-HANDLERS () :PUBLIC? TRUE :COMMAND? TRUE)", Native.find_java_method("edu.isi.webtools.http.Http", "printRegisteredHttpHandlers", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("PUBLISH-FILE", "(DEFUN PUBLISH-FILE ((PATH STRING) (FILE STRING) |&REST| (OPTIONS OBJECT)) :DOCUMENTATION \"Publish `path' to be served with `file' which must exist and be readable.\nIf :content-type is supplied, it will be used when serving `file', otherwise, a content\ntype is guessed from `file's extension.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.webtools.http.Http", "publishFile", new java.lang.Class [] {Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String"), Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineMethodObject("(DEFMETHOD PUBLISH-FILE-IMPL ((SERVER HTTP-SERVER) (PATH STRING) (FILE STRING) (OPTIONS PROPERTY-LIST)))", Native.find_java_method("edu.isi.webtools.http.HttpServer", "publishFileImpl", new java.lang.Class [] {Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String"), Native.find_java_class("edu.isi.stella.PropertyList")}), ((java.lang.reflect.Method)(null)));
      Stella.defineFunctionObject("PUBLISH-DIRECTORY", "(DEFUN PUBLISH-DIRECTORY ((PATH STRING) (DIRECTORY STRING) |&REST| (OPTIONS OBJECT)) :DOCUMENTATION \"Make all files descending from `directory' available on the server.\n`path' will be coerced to end in a delimiter and `directory' must exist.\nThis is very rudimentary right now and does not provide any sophisticated access\ncontrol.  It recurses into subdirectories of `directory', prevents escape via `..'\nand does not (yet) support directory listings.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.webtools.http.Http", "publishDirectory", new java.lang.Class [] {Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String"), Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineMethodObject("(DEFMETHOD PUBLISH-DIRECTORY-IMPL ((SERVER HTTP-SERVER) (PATH STRING) (DIRECTORY STRING) (OPTIONS PROPERTY-LIST)))", Native.find_java_method("edu.isi.webtools.http.HttpServer", "publishDirectoryImpl", new java.lang.Class [] {Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String"), Native.find_java_class("edu.isi.stella.PropertyList")}), ((java.lang.reflect.Method)(null)));
      Stella.defineFunctionObject("PUBLISH-HANDLER", "(DEFUN PUBLISH-HANDLER ((PATH STRING) (HANDLER FUNCTION-CODE) |&REST| (OPTIONS OBJECT)) :DOCUMENTATION \"Publish `path' to be handled by the handler function `handler' which must\ntake a single argument of type HTTP-EXCHANGE and use the API functions to read request\ninformation and generate a result page.  If :content-type is supplied, it will be used as\nthe content type of the resulting page, otherwise, text/html will be used by default.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.webtools.http.Http", "publishHandler", new java.lang.Class [] {Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.reflect.Method"), Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineMethodObject("(DEFMETHOD PUBLISH-HANDLER-IMPL ((SERVER HTTP-SERVER) (PATH STRING) (HANDLER FUNCTION-CODE) (OPTIONS PROPERTY-LIST)))", Native.find_java_method("edu.isi.webtools.http.HttpServer", "publishHandlerImpl", new java.lang.Class [] {Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.reflect.Method"), Native.find_java_class("edu.isi.stella.PropertyList")}), ((java.lang.reflect.Method)(null)));
      Stella.defineFunctionObject("GET-HANDLER-OPTIONS", "(DEFUN (GET-HANDLER-OPTIONS PROPERTY-LIST) ((XCHG HTTP-EXCHANGE)) :DOCUMENTATION \"Return the options supplied when the handler for this exchange was published.\nThis includes required as well as optional arguments.  This will never return NULL.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.webtools.http.HttpExchange", "getHandlerOptions", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange")}), null);
      Stella.defineMethodObject("(DEFMETHOD (GET-HANDLER-OPTIONS-IMPL PROPERTY-LIST) ((SERVER HTTP-SERVER) (XCHG HTTP-EXCHANGE)))", Native.find_java_method("edu.isi.webtools.http.HttpServer", "getHandlerOptionsImpl", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange")}), ((java.lang.reflect.Method)(null)));
      Stella.defineFunctionObject("GENERATE-ERROR-RESPONSE", "(DEFUN GENERATE-ERROR-RESPONSE ((XCHG HTTP-EXCHANGE) (CODE KEYWORD) (MESSAGE STRING)))", Native.find_java_method("edu.isi.webtools.http.HttpExchange", "generateErrorResponse", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange"), Native.find_java_class("edu.isi.stella.Keyword"), Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("FILE-HANDLER", "(DEFUN FILE-HANDLER ((XCHG HTTP-EXCHANGE)) :DOCUMENTATION \"Serve the specific file specified when the associated handler was published.\nSimple default implementation for minimal servers such as the Sun JRE HttpServer.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.webtools.http.HttpExchange", "fileHandler", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange")}), null);
      Stella.defineFunctionObject("DIRECTORY-HANDLER", "(DEFUN DIRECTORY-HANDLER ((XCHG HTTP-EXCHANGE)) :DOCUMENTATION \"Serve files located anywhere in the directory specified when the associated\nhandler was published (including subdirectories).  Simple default implementation for minimal\nservers such as the Sun JRE HttpServer.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.webtools.http.HttpExchange", "directoryHandler", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange")}), null);
      Stella.defineFunctionObject("UNKNOWN-URL-HANDLER", "(DEFUN UNKNOWN-URL-HANDLER ((XCHG HTTP-EXCHANGE)) :DOCUMENTATION \"Simple default handler for unknown/unhandled URLs.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.webtools.http.HttpExchange", "unknownUrlHandler", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange")}), null);
      Stella.defineFunctionObject("LOAD-SYSTEM-HANDLER", "(DEFUN LOAD-SYSTEM-HANDLER ((XCHG HTTP-EXCHANGE)) :DOCUMENTATION \"Load the STELLA system with options identified by the URL parameters.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.webtools.http.HttpExchange", "loadSystemHandler", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange")}), null);
      Stella.defineFunctionObject("TEST-HTTP-API-HANDLER-SERVE-FORM", "(DEFUN TEST-HTTP-API-HANDLER-SERVE-FORM ((XCHG HTTP-EXCHANGE)))", Native.find_java_method("edu.isi.webtools.http.HttpExchange", "testHttpApiHandlerServeForm", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange")}), null);
      Stella.defineFunctionObject("TEST-HTTP-API-HANDLER", "(DEFUN TEST-HTTP-API-HANDLER ((XCHG HTTP-EXCHANGE)))", Native.find_java_method("edu.isi.webtools.http.HttpExchange", "testHttpApiHandler", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange")}), null);
      Stella.defineFunctionObject("STARTUP-HTTP-SERVER", "(DEFUN STARTUP-HTTP-SERVER () :PUBLIC? TRUE)", Native.find_java_method("edu.isi.webtools.http._StartupHttpServer", "startupHttpServer", new java.lang.Class [] {}), null);
      { MethodSlot function = Symbol.lookupFunction(Http.SYM_HTTP_STARTUP_HTTP_SERVER);

        KeyValueList.setDynamicSlotValue(function.dynamicSlots, Http.SYM_STELLA_METHOD_STARTUP_CLASSNAME, StringWrapper.wrapString("_StartupHttpServer"), Stella.NULL_STRING_WRAPPER);
      }
    }
  }

  public static void startupHttpServer() {
    { Object old$Module$000 = Stella.$MODULE$.get();
      Object old$Context$000 = Stella.$CONTEXT$.get();

      try {
        Native.setSpecial(Stella.$MODULE$, Stella.getStellaModule("/HTTP", Stella.$STARTUP_TIME_PHASE$ > 1));
        Native.setSpecial(Stella.$CONTEXT$, ((Module)(Stella.$MODULE$.get())));
        if (Stella.currentStartupTimePhaseP(2)) {
          _StartupHttpServer.helpStartupHttpServer1();
        }
        if (Stella.currentStartupTimePhaseP(4)) {
          Http.$HTTP_RESPONSE_CODES$ = Cons.list$(Cons.cons(Cons.list$(Cons.cons(Http.KWD_OK, Cons.cons(IntegerWrapper.wrapInteger(200), Cons.cons(StringWrapper.wrapString("OK"), Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Http.KWD_REDIRECT, Cons.cons(IntegerWrapper.wrapInteger(301), Cons.cons(StringWrapper.wrapString("Moved Permanently"), Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Http.KWD_FORBIDDEN, Cons.cons(IntegerWrapper.wrapInteger(403), Cons.cons(StringWrapper.wrapString("Forbidden"), Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Http.KWD_NOT_FOUND, Cons.cons(IntegerWrapper.wrapInteger(404), Cons.cons(StringWrapper.wrapString("Not Found"), Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Http.KWD_BAD_REQUEST, Cons.cons(IntegerWrapper.wrapInteger(400), Cons.cons(StringWrapper.wrapString("Bad Request"), Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Http.KWD_INTERNAL_ERROR, Cons.cons(IntegerWrapper.wrapInteger(500), Cons.cons(StringWrapper.wrapString("Internal Server Error"), Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Http.KWD_NOT_IMPLEMENTED, Cons.cons(IntegerWrapper.wrapInteger(501), Cons.cons(StringWrapper.wrapString("Not Implemented"), Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Stella.NIL, Stella.NIL)))))))));
          Http.$HTTP_MIME_TYPES$ = Cons.list$(Cons.cons(Cons.list$(Cons.cons(Http.KWD_PLAIN_TEXT, Cons.cons(StringWrapper.wrapString("text/plain"), Cons.cons(StringWrapper.wrapString("txt"), Cons.cons(StringWrapper.wrapString("text"), Cons.cons(StringWrapper.wrapString("asc"), Cons.cons(Stella.NIL, Stella.NIL))))))), Cons.cons(Cons.list$(Cons.cons(Http.KWD_HTML, Cons.cons(StringWrapper.wrapString("text/html"), Cons.cons(StringWrapper.wrapString("htm"), Cons.cons(StringWrapper.wrapString("html"), Cons.cons(Stella.NIL, Stella.NIL)))))), Cons.cons(Cons.list$(Cons.cons(Http.KWD_XML, Cons.cons(StringWrapper.wrapString("text/xml"), Cons.cons(StringWrapper.wrapString("xml"), Cons.cons(StringWrapper.wrapString("rdf"), Cons.cons(StringWrapper.wrapString("owl"), Cons.cons(Stella.NIL, Stella.NIL))))))), Cons.cons(Cons.list$(Cons.cons(Http.KWD_BINARY, Cons.cons(StringWrapper.wrapString("application/octet-stream"), Cons.cons(StringWrapper.wrapString("zip"), Cons.cons(StringWrapper.wrapString("exe"), Cons.cons(StringWrapper.wrapString("class"), Cons.cons(Stella.NIL, Stella.NIL))))))), Cons.cons(Cons.list$(Cons.cons(Http.KWD_IMAGE_GIF, Cons.cons(StringWrapper.wrapString("image/gif"), Cons.cons(StringWrapper.wrapString("gif"), Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Http.KWD_IMAGE_JPG, Cons.cons(StringWrapper.wrapString("image/jpeg"), Cons.cons(StringWrapper.wrapString("jpg"), Cons.cons(StringWrapper.wrapString("jpeg"), Cons.cons(Stella.NIL, Stella.NIL)))))), Cons.cons(Cons.list$(Cons.cons(Http.KWD_IMAGE_PNG, Cons.cons(StringWrapper.wrapString("image/png"), Cons.cons(StringWrapper.wrapString("png"), Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Http.KWD_AUDIO_MPEG, Cons.cons(StringWrapper.wrapString("audio/mpeg"), Cons.cons(StringWrapper.wrapString("mp3"), Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Http.KWD_PDF, Cons.cons(StringWrapper.wrapString("application/pdf"), Cons.cons(StringWrapper.wrapString("pdf"), Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Http.KWD_MSWORD, Cons.cons(StringWrapper.wrapString("application/msword"), Cons.cons(StringWrapper.wrapString("doc"), Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Stella.NIL, Stella.NIL))))))))))));
          Http.$HTTP_DOCUMENT_ROOT$ = ((Http.$HTTP_DOCUMENT_ROOT$ != null) ? Http.$HTTP_DOCUMENT_ROOT$ : ((Stella.probeFileP("PL:htdocs;powerloom.html") ? Stella.translateLogicalPathname("PL:htdocs;") : Stella.translateLogicalPathname("PL:"))));
          Http.$HTTP_HANDLER_REGISTRY$ = KeyValueMap.newKeyValueMap();
          Http.$HTTP_SERVER_COPYRIGHT_TRAILER$ = Stella.$STELLA_VERSION_STRING$ + " HTTP Server" + "<BR>" + "Copyright 1996-" + Native.integerToString(((long)(CalendarDate.makeCurrentDateTime().getCalendarDate(Stella.getLocalTimeZone(), new Object[3])))) + " University of Southern California Information Sciences Institute";
        }
        if (Stella.currentStartupTimePhaseP(5)) {
          Stella.defineClassFromStringifiedSource("HTTP-SERVER", "(DEFCLASS HTTP-SERVER (STANDARD-OBJECT) :DOCUMENTATION \"Abstract class that will be implemented by specific server implementations\nand instantiated with a single instance used to dispatch all API methods.\" :ABSTRACT? TRUE :PUBLIC? TRUE)");
          Stella.defineClassFromStringifiedSource("HTTP-EXCHANGE", "(DEFCLASS HTTP-EXCHANGE (STANDARD-OBJECT) :DOCUMENTATION \"Abstract class that represents exchange objects that encapsulate all necessary\nstate needed by a http handler function to understand the request and generate the\nappropriate response.  This is mirrored somewhat after Sun's basic HTTP server\nimplementation in com.sun.net.httpserver.\" :ABSTRACT? TRUE :PUBLIC? TRUE)");
        }
        if (Stella.currentStartupTimePhaseP(6)) {
          Stella.finalizeClasses();
        }
        if (Stella.currentStartupTimePhaseP(7)) {
          _StartupHttpServer.helpStartupHttpServer2();
        }
        if (Stella.currentStartupTimePhaseP(8)) {
          Stella.finalizeSlots();
          Stella.cleanupUnfinalizedClasses();
        }
        if (Stella.currentStartupTimePhaseP(9)) {
          Stella_Object.inModule(((StringWrapper)(Stella_Object.copyConsTree(StringWrapper.wrapString("HTTP")))));
          Stella.defineStellaGlobalVariableFromStringifiedSource("(DEFGLOBAL *HTTP-SERVER-IMPLEMENTATION* HTTP-SERVER NULL :DOCUMENTATION \"Server instance used for method dispatch - not to be confused\nwith an actual native server object.\")");
          Stella.defineStellaGlobalVariableFromStringifiedSource("(DEFGLOBAL *DEFAULT-HTTP-SERVER-PORT* INTEGER 9090)");
          Stella.defineStellaGlobalVariableFromStringifiedSource("(DEFGLOBAL *HTTP-RESPONSE-CODES* (CONS OF CONS) (BQUOTE ((:OK 200 \"OK\") (:REDIRECT 301 \"Moved Permanently\") (:FORBIDDEN 403 \"Forbidden\") (:NOT-FOUND 404 \"Not Found\") (:BAD-REQUEST 400 \"Bad Request\") (:INTERNAL-ERROR 500 \"Internal Server Error\") (:NOT-IMPLEMENTED 501 \"Not Implemented\"))))");
          Stella.defineStellaGlobalVariableFromStringifiedSource("(DEFGLOBAL *HTTP-MIME-TYPES* (CONS OF CONS) (BQUOTE ((:PLAIN-TEXT \"text/plain\" \"txt\" \"text\" \"asc\") (:HTML \"text/html\" \"htm\" \"html\") (:XML \"text/xml\" \"xml\" \"rdf\" \"owl\") (:BINARY \"application/octet-stream\" \"zip\" \"exe\" \"class\") (:IMAGE-GIF \"image/gif\" \"gif\") (:IMAGE-JPG \"image/jpeg\" \"jpg\" \"jpeg\") (:IMAGE-PNG \"image/png\" \"png\") (:AUDIO-MPEG \"audio/mpeg\" \"mp3\") (:PDF \"application/pdf\" \"pdf\") (:MSWORD \"application/msword\" \"doc\"))))");
          Stella.defineStellaGlobalVariableFromStringifiedSource("(DEFGLOBAL *HTTP-DOCUMENT-ROOT* STRING (FIRST-DEFINED *HTTP-DOCUMENT-ROOT* (CHOOSE (PROBE-FILE? \"PL:htdocs;powerloom.html\") (TRANSLATE-LOGICAL-PATHNAME \"PL:htdocs;\") (TRANSLATE-LOGICAL-PATHNAME \"PL:\"))))");
          Stella.defineStellaGlobalVariableFromStringifiedSource("(DEFGLOBAL *HTTP-HANDLER-REGISTRY* (KEY-VALUE-MAP OF STRING-WRAPPER PROPERTY-LIST) (NEW KEY-VALUE-MAP))");
          Stella.defineStellaGlobalVariableFromStringifiedSource("(DEFGLOBAL *HTTP-SERVER-COPYRIGHT-TRAILER* STRING (CONCATENATE *STELLA-VERSION-STRING* \" HTTP Server\" \"<BR>\" \"Copyright 1996-\" (INTEGER-TO-STRING (GET-CALENDAR-DATE (MAKE-CURRENT-DATE-TIME) (GET-LOCAL-TIME-ZONE))) \" University of Southern California Information Sciences Institute\"))");
          Http.publishDirectory("/ploom/", Http.getHttpDocumentRoot(), Cons.cons(Http.KWD_DOCUMENTATION, Cons.cons(StringWrapper.wrapString("Top-level htdocs directory."), Stella.NIL)));
          Http.publishHandler("/ploom/load-system", Native.find_java_method("edu.isi.webtools.http.HttpExchange", "loadSystemHandler", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange")}), Cons.cons(Http.KWD_CONTENT_TYPE, Cons.cons(StringWrapper.wrapString(Http.getHttpMimeType(Http.KWD_HTML, null)), Cons.cons(Http.KWD_DOCUMENTATION, Cons.cons(StringWrapper.wrapString("Triggers a load-system operation at the server for the argument system."), Stella.NIL)))));
          Stella.defineStellaGlobalVariableFromStringifiedSource("(DEFGLOBAL *TEST-HTTP-API-HANDLER-LAST-XCHG* HTTP-EXCHANGE NULL)");
          Http.publishHandler("/ploom/test-http-api", Native.find_java_method("edu.isi.webtools.http.HttpExchange", "testHttpApiHandler", new java.lang.Class [] {Native.find_java_class("edu.isi.webtools.http.HttpExchange")}), Cons.cons(Http.KWD_CONTENT_TYPE, Cons.cons(StringWrapper.wrapString(Http.getHttpMimeType(Http.KWD_HTML, null)), Cons.cons(Http.KWD_DOCUMENTATION, Cons.cons(StringWrapper.wrapString("Useful for comparing different HTTP API implementations."), Stella.NIL)))));
        }

      } finally {
        Stella.$CONTEXT$.set(old$Context$000);
        Stella.$MODULE$.set(old$Module$000);
      }
    }
  }

}
