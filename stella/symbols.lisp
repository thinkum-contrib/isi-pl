;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

#|--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1996, 1997             | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied "AS IS",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SYM-SYMBOLS-*SYMBOL-ARRAY* NULL)
(CL:DEFVAR SYM-SYMBOLS-*SURROGATE-ARRAY* NULL)
(CL:DEFVAR SYM-SYMBOLS-*KEYWORD-ARRAY* NULL)
(CL:DEFVAR SYM-SYMBOLS-*INDEXICAL-ARRAY* NULL)
(CL:DEFVAR SYM-SYMBOLS-*KEYWORD-OFFSET-TABLE* NULL)
(CL:DEFVAR SYM-SYMBOLS-*FIXED-SYMBOL-ARRAY* NULL)
(CL:DEFVAR SYM-SYMBOLS-*FIXED-SURROGATE-ARRAY* NULL)
(CL:DEFVAR SYM-SYMBOLS-*FIXED-KEYWORD-ARRAY* NULL)
(CL:DEFVAR SYM-SYMBOLS-*FIXED-INDEXICAL-ARRAY* NULL)
(CL:DEFVAR SYM-SYMBOLS-*CONTEXT* NULL)
(CL:DEFVAR SYM-SYMBOLS-*MODULE* NULL)
(CL:DEFVAR KWD-SYMBOLS-OTHER NULL)
(CL:DEFVAR KWD-SYMBOLS-DIGIT NULL)
(CL:DEFVAR KWD-SYMBOLS-LETTER NULL)
(CL:DEFVAR KWD-SYMBOLS-SYMBOL-CONSTITUENT NULL)
(CL:DEFVAR KWD-SYMBOLS-SYMBOL-QUALIFIER NULL)
(CL:DEFVAR KWD-SYMBOLS-ESCAPE NULL)
(CL:DEFVAR KWD-SYMBOLS-OPEN-DELIMITER NULL)
(CL:DEFVAR KWD-SYMBOLS-CLOSE-DELIMITER NULL)
(CL:DEFVAR KWD-SYMBOLS-PAIRED-DELIMITER NULL)
(CL:DEFVAR KWD-SYMBOLS-WHITE-SPACE NULL)
(CL:DEFVAR SYM-SYMBOLS-NAME NULL)
(CL:DEFVAR SYM-SYMBOLS-SYMBOL-ARRAY NULL)
(CL:DEFVAR SYM-SYMBOLS-SURROGATE-ARRAY NULL)
(CL:DEFVAR SYM-SYMBOLS-KEYWORD-ARRAY NULL)
(CL:DEFVAR SYM-SYMBOLS-KEYWORD-OFFSET-TABLE NULL)
(CL:DEFVAR SYM-SYMBOLS-INDEXICAL-ARRAY NULL)
(CL:DEFVAR SYM-SYMBOLS-CARDINAL-MODULES NULL)
(CL:DEFVAR SYM-SYMBOLS-CURRENT-CONTEXT NULL)
(CL:DEFVAR SGT-SYMBOLS-SYMBOL-PROCESSING-ENVIRONMENT NULL)

;;; Forward declarations:

(CL:DECLAIM (CL:SPECIAL *PRINTREADABLY?* *TRANSIENTOBJECTS?*))

;;; (DEFUN (NEXT-FREE-OFFSET INTEGER) ...)

(CL:DEFUN NEXT-FREE-OFFSET (SELF)
  (CL:LET*
   ((TOPOFFSET (CLSYS-SVAL EXTENSIBLE-SYMBOL-ARRAY TOP-SYMBOL-OFFSET SELF))
    (FREEOFFSET (CL:1+ TOPOFFSET)))
   (CL:LET*
    ((I NULL)
     (ITER-001
      (CLSYS-SVAL EXTENSIBLE-SYMBOL-ARRAY POTENTIAL-FREE-SYMBOL-OFFSET SELF))
     (UPPER-BOUND-001 TOPOFFSET)
     (UNBOUNDED?-001 (NULL? UPPER-BOUND-001)))
    (CL:LOOP
     WHILE
     (CL:OR (CL:EQ UNBOUNDED?-001 1) (CL:<= ITER-001 UPPER-BOUND-001))
     DO
     (CL:PROGN (CL:SETQ I ITER-001) (CL:SETQ ITER-001 (CL:1+ ITER-001)))
     (CL:WHEN
      (CL:EQ (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY SELF) I) NULL)
      (CL:SETQ FREEOFFSET I)
      (CL:RETURN))))
   (CL:SETF
    (CLSYS-SVAL EXTENSIBLE-SYMBOL-ARRAY POTENTIAL-FREE-SYMBOL-OFFSET SELF)
    (CL:1+ FREEOFFSET))
   (CL:RETURN-FROM NEXT-FREE-OFFSET FREEOFFSET))
  :VOID)

;;; (DEFUN FREE-SYMBOL-OFFSET ...)

(CL:DEFUN FREE-SYMBOL-OFFSET (SELF OFFSET)
  (CL:SETF (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY SELF) OFFSET) NULL)
  (CL:WHEN
   (CL:<
    OFFSET
    (CLSYS-SVAL EXTENSIBLE-SYMBOL-ARRAY POTENTIAL-FREE-SYMBOL-OFFSET SELF))
   (CL:SETF
    (CLSYS-SVAL EXTENSIBLE-SYMBOL-ARRAY POTENTIAL-FREE-SYMBOL-OFFSET SELF)
    OFFSET))
  :VOID)

;;; (DEFUN ADD-TO-SYMBOL-ARRAY-AT ...)

(CL:DEFUN ADD-TO-SYMBOL-ARRAY-AT (ARRAY OFFSET SYMBOL)
  (INSERT-AT ARRAY OFFSET SYMBOL)
  (CL:SETF (CLSYS-SVAL GENERALIZED-SYMBOL SYMBOL-ID SYMBOL) OFFSET)
  :VOID)

;;; (DEFUN (ADD-TO-SYMBOL-ARRAY INTEGER) ...)

(CL:DEFUN ADD-TO-SYMBOL-ARRAY (ARRAY SYMBOL)
  (CL:LET*
   ((OFFSET (NEXT-FREE-OFFSET ARRAY)))
   (ADD-TO-SYMBOL-ARRAY-AT ARRAY OFFSET SYMBOL)
   (CL:RETURN-FROM ADD-TO-SYMBOL-ARRAY OFFSET))
  :VOID)

;;; (DEFUN (LEGAL-SYMBOL-ARRAY-OFFSET? BOOLEAN) ...)

(CL:DEFUN LEGAL-SYMBOL-ARRAY-OFFSET? (ARRAY OFFSET)
  (CL:RETURN-FROM
   LEGAL-SYMBOL-ARRAY-OFFSET?
   (<= OFFSET (CLSYS-SVAL EXTENSIBLE-SYMBOL-ARRAY TOP-SYMBOL-OFFSET ARRAY)))
  :VOID)

;;; (DEFSPECIAL *SYMBOL-ARRAY* ...)

(CL:DEFVAR *SYMBOL-ARRAY* NULL)

(CL:DEFUN READ-*SYMBOL-ARRAY* ()
  (CL:RETURN-FROM READ-*SYMBOL-ARRAY* *SYMBOL-ARRAY*)
  :VOID)

(CL:DEFUN WRITE-*SYMBOL-ARRAY* (VALUE)
  (CL:SETQ *SYMBOL-ARRAY* VALUE)
  (CL:RETURN-FROM WRITE-*SYMBOL-ARRAY* VALUE)
  :VOID)

;;; (DEFSPECIAL *SURROGATE-ARRAY* ...)

(CL:DEFVAR *SURROGATE-ARRAY* NULL)

(CL:DEFUN READ-*SURROGATE-ARRAY* ()
  (CL:RETURN-FROM READ-*SURROGATE-ARRAY* *SURROGATE-ARRAY*)
  :VOID)

(CL:DEFUN WRITE-*SURROGATE-ARRAY* (VALUE)
  (CL:SETQ *SURROGATE-ARRAY* VALUE)
  (CL:RETURN-FROM WRITE-*SURROGATE-ARRAY* VALUE)
  :VOID)

;;; (DEFSPECIAL *KEYWORD-ARRAY* ...)

(CL:DEFVAR *KEYWORD-ARRAY* NULL)

(CL:DEFUN READ-*KEYWORD-ARRAY* ()
  (CL:RETURN-FROM READ-*KEYWORD-ARRAY* *KEYWORD-ARRAY*)
  :VOID)

(CL:DEFUN WRITE-*KEYWORD-ARRAY* (VALUE)
  (CL:SETQ *KEYWORD-ARRAY* VALUE)
  (CL:RETURN-FROM WRITE-*KEYWORD-ARRAY* VALUE)
  :VOID)

;;; (DEFSPECIAL *INDEXICAL-ARRAY* ...)

(CL:DEFVAR *INDEXICAL-ARRAY* NULL)

(CL:DEFUN READ-*INDEXICAL-ARRAY* ()
  (CL:RETURN-FROM READ-*INDEXICAL-ARRAY* *INDEXICAL-ARRAY*)
  :VOID)

(CL:DEFUN WRITE-*INDEXICAL-ARRAY* (VALUE)
  (CL:SETQ *INDEXICAL-ARRAY* VALUE)
  (CL:RETURN-FROM WRITE-*INDEXICAL-ARRAY* VALUE)
  :VOID)

;;; (DEFSPECIAL *KEYWORD-OFFSET-TABLE* ...)

(CL:DEFVAR *KEYWORD-OFFSET-TABLE* NULL)

(CL:DEFUN READ-*KEYWORD-OFFSET-TABLE* ()
  (CL:RETURN-FROM READ-*KEYWORD-OFFSET-TABLE* *KEYWORD-OFFSET-TABLE*)
  :VOID)

(CL:DEFUN WRITE-*KEYWORD-OFFSET-TABLE* (VALUE)
  (CL:SETQ *KEYWORD-OFFSET-TABLE* VALUE)
  (CL:RETURN-FROM WRITE-*KEYWORD-OFFSET-TABLE* VALUE)
  :VOID)

;;; (DEFSPECIAL *FIXED-SYMBOL-ARRAY* ...)

(CL:DEFVAR *FIXED-SYMBOL-ARRAY* NULL)

(CL:DEFUN READ-*FIXED-SYMBOL-ARRAY* ()
  (CL:RETURN-FROM READ-*FIXED-SYMBOL-ARRAY* *FIXED-SYMBOL-ARRAY*)
  :VOID)

(CL:DEFUN WRITE-*FIXED-SYMBOL-ARRAY* (VALUE)
  (CL:SETQ *FIXED-SYMBOL-ARRAY* VALUE)
  (CL:RETURN-FROM WRITE-*FIXED-SYMBOL-ARRAY* VALUE)
  :VOID)

;;; (DEFSPECIAL *FIXED-SURROGATE-ARRAY* ...)

(CL:DEFVAR *FIXED-SURROGATE-ARRAY* NULL)

(CL:DEFUN READ-*FIXED-SURROGATE-ARRAY* ()
  (CL:RETURN-FROM READ-*FIXED-SURROGATE-ARRAY* *FIXED-SURROGATE-ARRAY*)
  :VOID)

(CL:DEFUN WRITE-*FIXED-SURROGATE-ARRAY* (VALUE)
  (CL:SETQ *FIXED-SURROGATE-ARRAY* VALUE)
  (CL:RETURN-FROM WRITE-*FIXED-SURROGATE-ARRAY* VALUE)
  :VOID)

;;; (DEFSPECIAL *FIXED-KEYWORD-ARRAY* ...)

(CL:DEFVAR *FIXED-KEYWORD-ARRAY* NULL)

(CL:DEFUN READ-*FIXED-KEYWORD-ARRAY* ()
  (CL:RETURN-FROM READ-*FIXED-KEYWORD-ARRAY* *FIXED-KEYWORD-ARRAY*)
  :VOID)

(CL:DEFUN WRITE-*FIXED-KEYWORD-ARRAY* (VALUE)
  (CL:SETQ *FIXED-KEYWORD-ARRAY* VALUE)
  (CL:RETURN-FROM WRITE-*FIXED-KEYWORD-ARRAY* VALUE)
  :VOID)

;;; (DEFSPECIAL *FIXED-INDEXICAL-ARRAY* ...)

(CL:DEFVAR *FIXED-INDEXICAL-ARRAY* NULL)

(CL:DEFUN READ-*FIXED-INDEXICAL-ARRAY* ()
  (CL:RETURN-FROM READ-*FIXED-INDEXICAL-ARRAY* *FIXED-INDEXICAL-ARRAY*)
  :VOID)

(CL:DEFUN WRITE-*FIXED-INDEXICAL-ARRAY* (VALUE)
  (CL:SETQ *FIXED-INDEXICAL-ARRAY* VALUE)
  (CL:RETURN-FROM WRITE-*FIXED-INDEXICAL-ARRAY* VALUE)
  :VOID)

;;; (DEFGLOBAL *TRANSIENT-SYMBOL-LOOKUP-TABLE* ...)

(CL:DEFVAR *TRANSIENT-SYMBOL-LOOKUP-TABLE* NULL)

;;; (DEFGLOBAL *COMMON-LISP-SYMBOL-LOOKUP-TABLE* ...)

(CL:DEFVAR *COMMON-LISP-SYMBOL-LOOKUP-TABLE* NULL)

;;; (DEFGLOBAL *TRANSIENT-KEYWORD-LOOKUP-TABLE* ...)

(CL:DEFVAR *TRANSIENT-KEYWORD-LOOKUP-TABLE* NULL)

;;; (DEFCONSTANT SYMBOL-SYM ...)

(CL:DEFVAR SYMBOL-SYM 0)

;;; (DEFCONSTANT SURROGATE-SYM ...)

(CL:DEFVAR SURROGATE-SYM 1)

;;; (DEFCONSTANT KEYWORD-SYM ...)

(CL:DEFVAR KEYWORD-SYM 2)

;;; (DEFCONSTANT INDEXICAL-SYM ...)

(CL:DEFVAR INDEXICAL-SYM 3)

;;; (DEFGLOBAL *ROOT-MODULE* ...)

(CL:DEFVAR *ROOT-MODULE* NULL
  "Pointer to the top-most module ROOT-MODULE.")

;;; (DEFGLOBAL *STELLA-MODULE* ...)

(CL:DEFVAR *STELLA-MODULE* NULL
  "Pointer to the module STELLA containing definitions of 
STELLA classes and methods.")

;;; (DEFGLOBAL *COMMON-LISP-MODULE* ...)

(CL:DEFVAR *COMMON-LISP-MODULE* NULL
  "Pointer to the module COMMON-LISP containing Common
Lisp symbols (and maybe other things).")

;;; (DEFGLOBAL *ALTERNATE-STELLA-MODULE* ...)

(CL:DEFVAR *ALTERNATE-STELLA-MODULE* NULL
  "Pointer to the module ALTERNATE-STELLA containing
definitions of STELLA classes and methods generated during the
translation of STELLA files.")

;;; (DEFSPECIAL *CONTEXT* ...)

(CL:DEFVAR *CONTEXT* NULL
  "Points to the current context (either a module or a
world).  Set by calls to 'change-world' and 'change-module'.")

(CL:DEFUN READ-*CONTEXT* ()
  (CL:RETURN-FROM READ-*CONTEXT* *CONTEXT*)
  :VOID)

(CL:DEFUN WRITE-*CONTEXT* (VALUE)
  (CL:SETQ *CONTEXT* VALUE)
  (CL:RETURN-FROM WRITE-*CONTEXT* VALUE)
  :VOID)

;;; (DEFSPECIAL *MODULE* ...)

(CL:DEFVAR *MODULE* NULL
  "Points to the current module.  Set by calls to
'change-context' and 'change-module'.")

(CL:DEFUN READ-*MODULE* ()
  (CL:RETURN-FROM READ-*MODULE* *MODULE*)
  :VOID)

(CL:DEFUN WRITE-*MODULE* (VALUE)
  (CL:SETQ *MODULE* VALUE)
  (CL:RETURN-FROM WRITE-*MODULE* VALUE)
  :VOID)

;;; (DEFCONSTANT SURROGATE-PREFIX-CHARACTER ...)

(CL:DEFVAR SURROGATE-PREFIX-CHARACTER #\@
  "Character used to prefix the name of a surrogate.")

;;; (DEFCONSTANT MODULE-SEPARATOR-CHARACTER ...)

(CL:DEFVAR MODULE-SEPARATOR-CHARACTER #\/
  "Character used to concatenate a module name
to a symbol or surrogate name to form a qualified name.")

;;; (DEFCONSTANT MODULE-SEPARATOR-STRING ...)

(CL:DEFVAR MODULE-SEPARATOR-STRING "/"
  "String containing character used to concatenate a module name
to a symbol or surrogate name to form a qualified name.")

;;; (DEFUN (GET-SYM SYMBOL) ...)

(CL:DEFUN GET-SYM (OFFSET)
  (CL:RETURN-FROM
   GET-SYM
   (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY *FIXED-SYMBOL-ARRAY*) OFFSET))
  :VOID)

;;; (DEFUN (GET-SGT SURROGATE) ...)

(CL:DEFUN GET-SGT (OFFSET)
  (CL:RETURN-FROM
   GET-SGT
   (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY *FIXED-SURROGATE-ARRAY*) OFFSET))
  :VOID)

;;; (DEFUN (GET-KWD KEYWORD) ...)

(CL:DEFUN GET-KWD (OFFSET)
  (CL:RETURN-FROM
   GET-KWD
   (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY *FIXED-KEYWORD-ARRAY*) OFFSET))
  :VOID)

;;; (DEFUN (GET-IDX INDEXICAL) ...)

(CL:DEFUN GET-IDX (OFFSET)
  (CL:RETURN-FROM
   GET-IDX
   (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY *FIXED-INDEXICAL-ARRAY*) OFFSET))
  :VOID)

;;; (DEFUN (GET-GENERALIZED-SYMBOL-FROM-OFFSET GENERALIZED-SYMBOL) ...)

(CL:DEFUN GET-GENERALIZED-SYMBOL-FROM-OFFSET (SYMBOLARRAY OFFSET)
  (CL:RETURN-FROM
   GET-GENERALIZED-SYMBOL-FROM-OFFSET
   (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY SYMBOLARRAY) OFFSET))
  :VOID)

;;; (DEFUN (GET-SYM-FROM-OFFSET SYMBOL) ...)

(CL:DEFUN GET-SYM-FROM-OFFSET (OFFSET)
  (CL:RETURN-FROM
   GET-SYM-FROM-OFFSET
   (GET-GENERALIZED-SYMBOL-FROM-OFFSET *SYMBOL-ARRAY* OFFSET))
  :VOID)

;;; (DEFUN (GET-SGT-FROM-OFFSET SURROGATE) ...)

(CL:DEFUN GET-SGT-FROM-OFFSET (OFFSET)
  (CL:RETURN-FROM
   GET-SGT-FROM-OFFSET
   (GET-GENERALIZED-SYMBOL-FROM-OFFSET *SURROGATE-ARRAY* OFFSET))
  :VOID)

;;; (DEFUN (GET-KWD-FROM-OFFSET KEYWORD) ...)

(CL:DEFUN GET-KWD-FROM-OFFSET (OFFSET)
  (CL:RETURN-FROM
   GET-KWD-FROM-OFFSET
   (GET-GENERALIZED-SYMBOL-FROM-OFFSET *KEYWORD-ARRAY* OFFSET))
  :VOID)

;;; (DEFUN (GET-IDX-FROM-OFFSET INDEXICAL) ...)

(CL:DEFUN GET-IDX-FROM-OFFSET (OFFSET)
  (CL:RETURN-FROM
   GET-IDX-FROM-OFFSET
   (GET-GENERALIZED-SYMBOL-FROM-OFFSET *INDEXICAL-ARRAY* OFFSET))
  :VOID)

;;; (DEFUN (SELECT-SYMBOL-OFFSET-TABLE STRING-TO-INTEGER-HASH-TABLE) ...)

(CL:DEFUN SELECT-SYMBOL-OFFSET-TABLE (MODULE KINDOFSYM)
  (CL:ECASE
   KINDOFSYM
   (0
    (CL:RETURN-FROM
     SELECT-SYMBOL-OFFSET-TABLE
     (CLSYS-SVAL MODULE SYMBOL-OFFSET-TABLE MODULE)))
   (1
    (CL:RETURN-FROM
     SELECT-SYMBOL-OFFSET-TABLE
     (CLSYS-SVAL MODULE SURROGATE-OFFSET-TABLE MODULE)))
   (2 (CL:RETURN-FROM SELECT-SYMBOL-OFFSET-TABLE *KEYWORD-OFFSET-TABLE*))
   (3
    (CL:RETURN-FROM
     SELECT-SYMBOL-OFFSET-TABLE
     (CLSYS-SVAL
      MODULE
      INDEXICAL-OFFSET-TABLE
      (CLSYS-SVAL MODULE CARDINAL-MODULE MODULE)))))
  :VOID)

;;; (DEFUN (SELECT-SYMBOL-ARRAY EXTENSIBLE-SYMBOL-ARRAY) ...)

(CL:DEFUN SELECT-SYMBOL-ARRAY (KINDOFSYM)
  (CL:ECASE
   KINDOFSYM
   (0 (CL:RETURN-FROM SELECT-SYMBOL-ARRAY *SYMBOL-ARRAY*))
   (1 (CL:RETURN-FROM SELECT-SYMBOL-ARRAY *SURROGATE-ARRAY*))
   (2 (CL:RETURN-FROM SELECT-SYMBOL-ARRAY *KEYWORD-ARRAY*))
   (3 (CL:RETURN-FROM SELECT-SYMBOL-ARRAY *INDEXICAL-ARRAY*)))
  :VOID)

;;; (DEFUN (LOOKUP-RIGID-SYMBOL-LOCALLY GENERALIZED-SYMBOL) ...)

(CL:DEFUN LOOKUP-RIGID-SYMBOL-LOCALLY (NAME MODULE KINDOFSYM)
  (CL:LET*
   ((OFFSETTABLE (SELECT-SYMBOL-OFFSET-TABLE MODULE KINDOFSYM))
    (OFFSET (LOOKUP OFFSETTABLE NAME)))
   (CL:WHEN
    (CL:EQ (DEFINED? OFFSET) 1)
    (CL:ECASE
     KINDOFSYM
     (0
      (CL:RETURN-FROM
       LOOKUP-RIGID-SYMBOL-LOCALLY
       (GET-SYM-FROM-OFFSET OFFSET)))
     (1
      (CL:RETURN-FROM
       LOOKUP-RIGID-SYMBOL-LOCALLY
       (GET-SGT-FROM-OFFSET OFFSET)))
     (2
      (CL:RETURN-FROM
       LOOKUP-RIGID-SYMBOL-LOCALLY
       (GET-KWD-FROM-OFFSET OFFSET)))))
   (CL:RETURN-FROM LOOKUP-RIGID-SYMBOL-LOCALLY NULL))
  :VOID)

;;; (DEFUN (YIELD-VISIBLE-RIGID-SYMBOLS-WRT-MODULE (CONS OF GENERALIZED-SYMBOL)) ...)

(CL:DEFUN YIELD-VISIBLE-RIGID-SYMBOLS-WRT-MODULE (NAME MODULE KINDOFSYM)
  (CL:LET*
   ((LISTOFSYMBOLS NIL) (SYMBOL NULL))
   (CL:LET*
    ((VISIBLEMODULE NULL) (ITER-001 (VISIBLE-MODULES MODULE)))
    (CL:LOOP
     WHILE
     (CL:EQ (NEXT? ITER-001) 1)
     DO
     (CL:PROGN (CL:SETQ VISIBLEMODULE (CLSYS-SVAL ITERATOR VALUE ITER-001)))
     (CL:LET*
      ()
      (CL:SETQ
       SYMBOL
       (LOOKUP-RIGID-SYMBOL-LOCALLY NAME VISIBLEMODULE KINDOFSYM))
      (CL:WHEN
       (CL:NOT (CL:EQ SYMBOL NULL))
       (CL:SETQ LISTOFSYMBOLS (CONS SYMBOL LISTOFSYMBOLS))))))
   (CL:RETURN-FROM
    YIELD-VISIBLE-RIGID-SYMBOLS-WRT-MODULE
    (REVERSE LISTOFSYMBOLS)))
  :VOID)

;;; (DEFUN (VISIBLE-RIGID-SYMBOLS-WRT-MODULE (ITERATOR OF GENERALIZED-SYMBOL)) ...)

(CL:DEFUN VISIBLE-RIGID-SYMBOLS-WRT-MODULE (NAME MODULE KINDOFSYM)
  (CL:RETURN-FROM
   VISIBLE-RIGID-SYMBOLS-WRT-MODULE
   (ALLOCATE-DESTRUCTIVE-LIST-ITERATOR
    (YIELD-VISIBLE-RIGID-SYMBOLS-WRT-MODULE NAME MODULE KINDOFSYM)))
  :VOID)

;;; (DEFUN (LOOKUP-RIGID-SYMBOL-OFFSET-WRT-MODULE INTEGER) ...)

(CL:DEFUN LOOKUP-RIGID-SYMBOL-OFFSET-WRT-MODULE (NAME MODULE KINDOFSYM)
  (CL:LET*
   ((OFFSETTABLE (SELECT-SYMBOL-OFFSET-TABLE MODULE KINDOFSYM))
    (OFFSET (LOOKUP OFFSETTABLE NAME)))
   (CL:WHEN
    (CL:EQ (DEFINED? OFFSET) 1)
    (CL:RETURN-FROM LOOKUP-RIGID-SYMBOL-OFFSET-WRT-MODULE OFFSET))
   (CL:LET*
    ((SUPER NULL) (ITER-001 (ADVANCE (VISIBLE-MODULES MODULE) 1)))
    (CL:LOOP
     WHILE
     (CL:EQ (NEXT? ITER-001) 1)
     DO
     (CL:PROGN (CL:SETQ SUPER (CLSYS-SVAL ITERATOR VALUE ITER-001)))
     (CL:SETQ
      OFFSET
      (LOOKUP (SELECT-SYMBOL-OFFSET-TABLE SUPER KINDOFSYM) NAME))
     (CL:WHEN
      (CL:EQ (DEFINED? OFFSET) 1)
      (CL:RETURN-FROM LOOKUP-RIGID-SYMBOL-OFFSET-WRT-MODULE OFFSET))))
   (CL:RETURN-FROM LOOKUP-RIGID-SYMBOL-OFFSET-WRT-MODULE NULL-INTEGER))
  :VOID)

;;; (DEFUN (LOOKUP-RIGID-SYMBOL-WRT-MODULE GENERALIZED-SYMBOL) ...)

(CL:DEFUN LOOKUP-RIGID-SYMBOL-WRT-MODULE (NAME MODULE KINDOFSYM)
  (CL:LET*
   ((OFFSET (LOOKUP-RIGID-SYMBOL-OFFSET-WRT-MODULE NAME MODULE KINDOFSYM)))
   (CL:IF
    (CL:EQ (DEFINED? OFFSET) 1)
    (CL:ECASE
     KINDOFSYM
     (0
      (CL:RETURN-FROM
       LOOKUP-RIGID-SYMBOL-WRT-MODULE
       (GET-SYM-FROM-OFFSET OFFSET)))
     (1
      (CL:RETURN-FROM
       LOOKUP-RIGID-SYMBOL-WRT-MODULE
       (GET-SGT-FROM-OFFSET OFFSET)))
     (2
      (CL:RETURN-FROM
       LOOKUP-RIGID-SYMBOL-WRT-MODULE
       (GET-KWD-FROM-OFFSET OFFSET))))
    (CL:RETURN-FROM LOOKUP-RIGID-SYMBOL-WRT-MODULE NULL)))
  :VOID)

;;; (DEFUN (LOOKUP-RIGID-SYMBOL GENERALIZED-SYMBOL) ...)

(CL:DEFUN LOOKUP-RIGID-SYMBOL (NAME KINDOFSYM)
  "Return the symbol named 'name'.  Case sensitive."
  (CL:LET*
   ((MODULE *MODULE*))
   (CL:WHEN
    (CL:EQ (QUALIFIED-NAME? NAME) 1)
    (CL:MULTIPLE-VALUE-SETQ
     (MODULE NAME)
     (COMPUTE-MODULE-AND-BARE-NAME NAME)))
   (CL:IF
    (CL:NOT (CL:EQ MODULE NULL))
    (CL:RETURN-FROM
     LOOKUP-RIGID-SYMBOL
     (LOOKUP-RIGID-SYMBOL-WRT-MODULE NAME MODULE KINDOFSYM))
    (CL:RETURN-FROM LOOKUP-RIGID-SYMBOL NULL)))
  :VOID)

;;; (DEFUN (LOOKUP-INDEXICAL-SYMBOL-OFFSET-WRT-MODULE INTEGER) ...)

(CL:DEFUN LOOKUP-INDEXICAL-SYMBOL-OFFSET-WRT-MODULE (NAME MODULE KINDOFSYM)
  (CL:LET*
   ((CARDINALMODULE (CLSYS-SVAL MODULE CARDINAL-MODULE MODULE))
    (TABLE (SELECT-SYMBOL-OFFSET-TABLE CARDINALMODULE KINDOFSYM))
    (OFFSET NULL-INTEGER))
   (CL:SETQ OFFSET (LOOKUP TABLE NAME))
   (CL:WHEN
    (CL:EQ (DEFINED? OFFSET) 1)
    (CL:RETURN-FROM LOOKUP-INDEXICAL-SYMBOL-OFFSET-WRT-MODULE OFFSET))
   (CL:LET*
    ((USEE NULL)
     (ITER-001
      (CLSYS-SVAL LIST THE-CONS-LIST (CLSYS-SVAL MODULE USES MODULE))))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ USEE (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:SETQ CARDINALMODULE (CLSYS-SVAL MODULE CARDINAL-MODULE USEE))
     (CL:SETQ TABLE (SELECT-SYMBOL-OFFSET-TABLE CARDINALMODULE KINDOFSYM))
     (CL:SETQ OFFSET (LOOKUP TABLE NAME))
     (CL:WHEN
      (CL:EQ (DEFINED? OFFSET) 1)
      (CL:RETURN-FROM LOOKUP-INDEXICAL-SYMBOL-OFFSET-WRT-MODULE OFFSET))))
   (CL:RETURN-FROM LOOKUP-INDEXICAL-SYMBOL-OFFSET-WRT-MODULE NULL-INTEGER))
  :VOID)

;;; (DEFUN (LOOKUP-INDEXICAL-SYMBOL-WRT-MODULE GENERALIZED-SYMBOL) ...)

(CL:DEFUN LOOKUP-INDEXICAL-SYMBOL-WRT-MODULE (NAME MODULE KINDOFSYM)
  (CL:LET*
   ((OFFSET
     (LOOKUP-INDEXICAL-SYMBOL-OFFSET-WRT-MODULE NAME MODULE KINDOFSYM)))
   (CL:IF
    (CL:EQ (DEFINED? OFFSET) 1)
    (CL:ECASE
     KINDOFSYM
     (3
      (CL:RETURN-FROM
       LOOKUP-INDEXICAL-SYMBOL-WRT-MODULE
       (GET-IDX-FROM-OFFSET OFFSET))))
    (CL:RETURN-FROM LOOKUP-INDEXICAL-SYMBOL-WRT-MODULE NULL)))
  :VOID)

;;; (DEFUN (LOOKUP-INDEXICAL-SYMBOL GENERALIZED-SYMBOL) ...)

(CL:DEFUN LOOKUP-INDEXICAL-SYMBOL (NAME KINDOFSYM)
  "Return the indexical named 'name'."
  (CL:LET*
   ((OFFSET
     (LOOKUP-INDEXICAL-SYMBOL-OFFSET-WRT-MODULE NAME *MODULE* KINDOFSYM)))
   (CL:WHEN
    (CL:EQ (DEFINED? OFFSET) 1)
    (CL:ECASE
     KINDOFSYM
     (3 (CL:RETURN-FROM LOOKUP-INDEXICAL-SYMBOL (GET-IDX OFFSET)))))
   (CL:RETURN-FROM LOOKUP-INDEXICAL-SYMBOL NULL))
  :VOID)

;;; (DEFUN (LOOKUP-SYMBOL SYMBOL) ...)

(CL:DEFUN LOOKUP-SYMBOL (NAME)
  (CL:RETURN-FROM LOOKUP-SYMBOL (LOOKUP-RIGID-SYMBOL NAME SYMBOL-SYM))
  :VOID)

;;; (DEFUN (LOOKUP-SYMBOL-IN-MODULE SYMBOL) ...)

(CL:DEFUN LOOKUP-SYMBOL-IN-MODULE (NAME MODULE LOCAL?)
  (CL:WHEN (CL:EQ MODULE NULL) (CL:SETQ MODULE *MODULE*))
  (CL:IF
   (CL:EQ LOCAL? 1)
   (CL:RETURN-FROM
    LOOKUP-SYMBOL-IN-MODULE
    (LOOKUP-RIGID-SYMBOL-LOCALLY NAME MODULE SYMBOL-SYM))
   (CL:RETURN-FROM
    LOOKUP-SYMBOL-IN-MODULE
    (LOOKUP-RIGID-SYMBOL-WRT-MODULE NAME MODULE SYMBOL-SYM)))
  :VOID)

;;; (DEFUN (LOOKUP-SURROGATE SURROGATE) ...)

(CL:DEFUN LOOKUP-SURROGATE (NAME)
  (CL:RETURN-FROM LOOKUP-SURROGATE (LOOKUP-RIGID-SYMBOL NAME SURROGATE-SYM))
  :VOID)

;;; (DEFUN (LOOKUP-SURROGATE-IN-MODULE SURROGATE) ...)

(CL:DEFUN LOOKUP-SURROGATE-IN-MODULE (NAME MODULE LOCAL?)
  (CL:WHEN (CL:EQ MODULE NULL) (CL:SETQ MODULE *MODULE*))
  (CL:IF
   (CL:EQ LOCAL? 1)
   (CL:RETURN-FROM
    LOOKUP-SURROGATE-IN-MODULE
    (LOOKUP-RIGID-SYMBOL-LOCALLY NAME MODULE SURROGATE-SYM))
   (CL:RETURN-FROM
    LOOKUP-SURROGATE-IN-MODULE
    (LOOKUP-RIGID-SYMBOL-WRT-MODULE NAME MODULE SURROGATE-SYM)))
  :VOID)

;;; (DEFUN (LOOKUP-KEYWORD KEYWORD) ...)

(CL:DEFUN LOOKUP-KEYWORD (NAME)
  (CL:RETURN-FROM LOOKUP-KEYWORD (LOOKUP-RIGID-SYMBOL NAME KEYWORD-SYM))
  :VOID)

;;; (DEFUN (LOOKUP-INDEXICAL INDEXICAL) ...)

(CL:DEFUN LOOKUP-INDEXICAL (NAME)
  (CL:RETURN-FROM LOOKUP-INDEXICAL (LOOKUP-INDEXICAL-SYMBOL NAME INDEXICAL-SYM))
  :VOID)

;;; (DEFUN (HELP-INTERN-GENERALIZED-SYMBOL GENERALIZED-SYMBOL) ...)

(CL:DEFUN HELP-INTERN-GENERALIZED-SYMBOL (NAME KINDOFSYM ARRAY OFFSET MODULE)
  (CL:LET*
   ((SYMBOL NULL) (TABLE (SELECT-SYMBOL-OFFSET-TABLE MODULE KINDOFSYM)))
   (CL:ECASE
    KINDOFSYM
    (0 (CL:SETQ SYMBOL (NEW-SYMBOL NAME)) (INSERT-AT TABLE NAME OFFSET))
    (1 (CL:SETQ SYMBOL (NEW-SURROGATE NAME)) (INSERT-AT TABLE NAME OFFSET))
    (2 (CL:SETQ SYMBOL (NEW-KEYWORD NAME)) (INSERT-AT TABLE NAME OFFSET))
    (3
     (CL:SETQ SYMBOL (NEW-INDEXICAL NAME))
     (CL:SETQ MODULE (CLSYS-SVAL MODULE CARDINAL-MODULE MODULE))
     (INSERT-AT TABLE NAME OFFSET)))
   (ADD-TO-SYMBOL-ARRAY-AT ARRAY OFFSET SYMBOL)
   (CL:SETF (CLSYS-SVAL GENERALIZED-SYMBOL HOME-CONTEXT SYMBOL) MODULE)
   (CL:RETURN-FROM HELP-INTERN-GENERALIZED-SYMBOL SYMBOL))
  :VOID)

;;; (DEFUN (INTERN-RIGID-SYMBOL-WRT-MODULE GENERALIZED-SYMBOL) ...)

(CL:DEFUN INTERN-RIGID-SYMBOL-WRT-MODULE (NAME MODULE KINDOFSYM)
  "Return a newly-created or existing rigid symbol with
name 'name'."
  (CL:WHEN (CL:EQ MODULE NULL) (CL:SETQ MODULE *MODULE*))
  (CL:LET*
   ((OFFSET (LOOKUP-RIGID-SYMBOL-OFFSET-WRT-MODULE NAME MODULE KINDOFSYM)))
   (CL:WHEN
    (CL:EQ (DEFINED? OFFSET) 1)
    (CL:ECASE
     KINDOFSYM
     (0
      (CL:RETURN-FROM
       INTERN-RIGID-SYMBOL-WRT-MODULE
       (GET-SYM-FROM-OFFSET OFFSET)))
     (1
      (CL:RETURN-FROM
       INTERN-RIGID-SYMBOL-WRT-MODULE
       (GET-SGT-FROM-OFFSET OFFSET)))
     (2
      (CL:RETURN-FROM
       INTERN-RIGID-SYMBOL-WRT-MODULE
       (GET-KWD-FROM-OFFSET OFFSET)))))
   (CL:LET*
    ((ARRAY (SELECT-SYMBOL-ARRAY KINDOFSYM)))
    (CL:SETQ OFFSET (NEXT-FREE-OFFSET ARRAY))
    (CL:RETURN-FROM
     INTERN-RIGID-SYMBOL-WRT-MODULE
     (HELP-INTERN-GENERALIZED-SYMBOL NAME KINDOFSYM ARRAY OFFSET MODULE))))
  :VOID)

;;; (DEFUN (INTERN-RIGID-SYMBOL-LOCALLY GENERALIZED-SYMBOL) ...)

(CL:DEFUN INTERN-RIGID-SYMBOL-LOCALLY (NAME MODULE KINDOFSYM)
  "Return a newly-created or existing rigid symbol
interned into the module 'module' with name 'name'."
  (CL:WHEN (CL:EQ MODULE NULL) (CL:SETQ MODULE *MODULE*))
  (CL:LET*
   ((SYMBOL (LOOKUP-RIGID-SYMBOL-LOCALLY NAME MODULE KINDOFSYM)))
   (CL:WHEN
    (CL:NOT (CL:EQ SYMBOL NULL))
    (CL:RETURN-FROM INTERN-RIGID-SYMBOL-LOCALLY SYMBOL))
   (CL:LET*
    ((ARRAY (SELECT-SYMBOL-ARRAY KINDOFSYM)))
    (CL:RETURN-FROM
     INTERN-RIGID-SYMBOL-LOCALLY
     (HELP-INTERN-GENERALIZED-SYMBOL
      NAME
      KINDOFSYM
      ARRAY
      (NEXT-FREE-OFFSET ARRAY)
      MODULE))))
  :VOID)

;;; (DEFUN (INTERN-INDEXICAL-SYMBOL-WRT-MODULE GENERALIZED-SYMBOL) ...)

(CL:DEFUN INTERN-INDEXICAL-SYMBOL-WRT-MODULE (NAME MODULE KINDOFSYM)
  "Return a newly-created or existing indexical with
name 'name'."
  (CL:WHEN (CL:EQ MODULE NULL) (CL:SETQ MODULE *MODULE*))
  (CL:LET*
   ((SYMBOL (LOOKUP-INDEXICAL-SYMBOL-WRT-MODULE NAME MODULE KINDOFSYM)))
   (CL:SETQ MODULE (CLSYS-SVAL MODULE CARDINAL-MODULE MODULE))
   (CL:WHEN
    (CL:AND
     (CL:NOT (CL:EQ SYMBOL NULL))
     (CL:EQ (CLSYS-SVAL GENERALIZED-SYMBOL HOME-CONTEXT SYMBOL) MODULE))
    (CL:RETURN-FROM INTERN-INDEXICAL-SYMBOL-WRT-MODULE SYMBOL))
   (CL:LET*
    ((ARRAY (SELECT-SYMBOL-ARRAY KINDOFSYM))
     (OFFSET (NEXT-FREE-OFFSET ARRAY)))
    (CL:RETURN-FROM
     INTERN-INDEXICAL-SYMBOL-WRT-MODULE
     (HELP-INTERN-GENERALIZED-SYMBOL NAME KINDOFSYM ARRAY OFFSET MODULE))))
  :VOID)

;;; (DEFUN (INTERN-RIGID-SYMBOL-CASE-SENSITIVELY GENERALIZED-SYMBOL) ...)

(CL:DEFUN INTERN-RIGID-SYMBOL-CASE-SENSITIVELY (NAME KINDOFSYM)
  (CL:LET*
   ((SYMBOL NULL) (NAMECOPY NULL))
   (CL:SETQ SYMBOL (LOOKUP-RIGID-SYMBOL NAME KINDOFSYM))
   (CL:WHEN
    (CL:NOT (CL:EQ SYMBOL NULL))
    (CL:RETURN-FROM INTERN-RIGID-SYMBOL-CASE-SENSITIVELY SYMBOL))
   (CL:ECASE
    KINDOFSYM
    (0
     (CL:WHEN
      (CL:EQ *TRANSIENTOBJECTS?* 1)
      (CL:SETQ SYMBOL (LOOKUP-TRANSIENT-SYMBOL NAME)))
     (CL:WHEN
      (CL:NOT (CL:EQ SYMBOL NULL))
      (CL:RETURN-FROM INTERN-RIGID-SYMBOL-CASE-SENSITIVELY SYMBOL))
     (CL:IF
      (CL:EQ *TRANSIENTOBJECTS?* 1)
      (CL:SETQ NAMECOPY (STRING-UPCASE NAME))
      (CL:SETQ NAMECOPY (PERMANENT-STRING-UPCASE NAME))))
    (1 (CL:SETQ NAMECOPY (PERMANENT-STRING-UPCASE NAME))))
   (CL:LET*
    ((I NULL) (ITER-001 0) (UPPER-BOUND-001 (CL:1- (LENGTH NAME))))
    (CL:LOOP
     WHILE
     (CL:<= ITER-001 UPPER-BOUND-001)
     DO
     (CL:PROGN (CL:SETQ I ITER-001) (CL:SETQ ITER-001 (CL:1+ ITER-001)))
     (CL:SETF (CL:CHAR NAMECOPY I) (CL:CHAR NAME I))))
   (CL:ECASE
    KINDOFSYM
    (0
     (CL:IF
      (CL:EQ *TRANSIENTOBJECTS?* 1)
      (CL:RETURN-FROM
       INTERN-RIGID-SYMBOL-CASE-SENSITIVELY
       (INTERN-TRANSIENT-SYMBOL NAMECOPY))
      (CL:RETURN-FROM
       INTERN-RIGID-SYMBOL-CASE-SENSITIVELY
       (INTERN-PERMANENT-SYMBOL NAMECOPY))))
    (1
     (CL:RETURN-FROM
      INTERN-RIGID-SYMBOL-CASE-SENSITIVELY
      (INTERN-RIGID-SYMBOL-WRT-MODULE NAMECOPY *MODULE* SURROGATE-SYM)))))
  :VOID)

;;; (DEFUN (INTERN-PERMANENT-SYMBOL SYMBOL) ...)

(CL:DEFUN INTERN-PERMANENT-SYMBOL (NAME)
  "Return a newly-created or existing permanent symbol with
name 'name'."
  (CL:RETURN-FROM
   INTERN-PERMANENT-SYMBOL
   (INTERN-RIGID-SYMBOL-WRT-MODULE NAME *MODULE* SYMBOL-SYM))
  :VOID)

;;; (DEFUN (INTERN-SYMBOL SYMBOL) ...)

(CL:DEFUN INTERN-SYMBOL (NAME)
  "Return a newly-created or existing symbol with name
'name'.  Storage note: a COPY of 'name' is stored in the symbol."
  (CL:IF
   (CL:EQ (CLSYS-SVAL MODULE CASE-SENSITIVE? *MODULE*) 1)
   (CL:RETURN-FROM
    INTERN-SYMBOL
    (INTERN-RIGID-SYMBOL-CASE-SENSITIVELY NAME SYMBOL-SYM))
   (CL:IF
    (CL:EQ *TRANSIENTOBJECTS?* 1)
    (CL:RETURN-FROM
     INTERN-SYMBOL
     (INTERN-TRANSIENT-SYMBOL (STRING-UPCASE NAME)))
    (CL:RETURN-FROM
     INTERN-SYMBOL
     (INTERN-PERMANENT-SYMBOL (PERMANENT-STRING-UPCASE NAME)))))
  :VOID)

;;; (DEFUN (INTERN-DERIVED-SYMBOL SYMBOL) ...)

(CL:DEFUN INTERN-DERIVED-SYMBOL (BASESYMBOL NEWNAME)
  "Return a newly-created or existing symbol with name
'newName' which is interned in the same module as 'baseSymbol'."
  (CL:LET*
   ((CURRENTMODULE *MODULE*))
   (CL:LET*
    ((*MODULE* (CLSYS-SVAL GENERALIZED-SYMBOL HOME-CONTEXT BASESYMBOL)))
    (CL:DECLARE (CL:SPECIAL *MODULE*))
    (CL:WHEN
     (CL:NOT (CL:EQ *MODULE* NULL))
     (CL:RETURN-FROM
      INTERN-DERIVED-SYMBOL
      (INTERN-RIGID-SYMBOL-LOCALLY
       (CL:IF
        (CL:EQ (CLSYS-SVAL MODULE CASE-SENSITIVE? *MODULE*) 1)
        NEWNAME
        (PERMANENT-STRING-UPCASE NEWNAME))
       *MODULE*
       SYMBOL-SYM)))
    (CL:SETQ *MODULE* CURRENTMODULE)
    (CL:RETURN-FROM INTERN-DERIVED-SYMBOL (INTERN-SYMBOL NEWNAME))))
  :VOID)

;;; (DEFUN (INTERN-SURROGATE SURROGATE) ...)

(CL:DEFUN INTERN-SURROGATE (NAME)
  "Return a newly-created or existing surrogate with
name 'name'."
  (CL:IF
   (CL:EQ (CLSYS-SVAL MODULE CASE-SENSITIVE? *MODULE*) 1)
   (CL:RETURN-FROM
    INTERN-SURROGATE
    (INTERN-RIGID-SYMBOL-CASE-SENSITIVELY NAME SURROGATE-SYM))
   (CL:RETURN-FROM
    INTERN-SURROGATE
    (INTERN-RIGID-SYMBOL-WRT-MODULE
     (PERMANENT-STRING-UPCASE NAME)
     *MODULE*
     SURROGATE-SYM)))
  :VOID)

;;; (DEFUN (INTERN-INDEXICAL INDEXICAL) ...)

(CL:DEFUN INTERN-INDEXICAL (NAME)
  "Return a newly-created or existing indexical with
name 'name', interned in '(cardinal-module *module*)'."
  (CL:WHEN
   (CL:EQ (CLSYS-SVAL MODULE CASE-SENSITIVE? *MODULE*) 0)
   (CL:SETQ NAME (PERMANENT-STRING-UPCASE NAME)))
  (CL:RETURN-FROM
   INTERN-INDEXICAL
   (INTERN-INDEXICAL-SYMBOL-WRT-MODULE NAME *MODULE* INDEXICAL-SYM))
  :VOID)

;;; (DEFUN (INTERN-PERMANENT-KEYWORD KEYWORD) ...)

(CL:DEFUN INTERN-PERMANENT-KEYWORD (NAME)
  "Return a newly-created or existing permanent keyword with
name 'name'."
  (CL:RETURN-FROM
   INTERN-PERMANENT-KEYWORD
   (INTERN-RIGID-SYMBOL-WRT-MODULE NAME *MODULE* KEYWORD-SYM))
  :VOID)

;;; (DEFUN (INTERN-KEYWORD KEYWORD) ...)

(CL:DEFUN INTERN-KEYWORD (NAME)
  "Return a newly-created or existing keyword with name
'name'.  Storage note: a COPY of 'name' is stored in the keyword"
  (CL:IF
   (CL:EQ *TRANSIENTOBJECTS?* 1)
   (CL:RETURN-FROM
    INTERN-KEYWORD
    (INTERN-TRANSIENT-KEYWORD (STRING-UPCASE NAME)))
   (CL:RETURN-FROM
    INTERN-KEYWORD
    (INTERN-PERMANENT-KEYWORD (PERMANENT-STRING-UPCASE NAME))))
  :VOID)

;;; (DEFUN UNINTERN-SYMBOL ...)

(CL:DEFUN UNINTERN-SYMBOL (SELF)
  "Remove `self' from its home module and the symbol table."
  (CL:LET*
   ((SYMBOLARRAY (SELECT-SYMBOL-ARRAY SYMBOL-SYM))
    (OFFSETTABLE
     (CL:IF
      (CL:NOT (CL:EQ (CLSYS-SVAL SYMBOL HOME-CONTEXT SELF) NULL))
      (SELECT-SYMBOL-OFFSET-TABLE
       (CLSYS-SVAL SYMBOL HOME-CONTEXT SELF)
       SYMBOL-SYM)
      NULL))
    (SYMBOLID (CLSYS-SVAL SYMBOL SYMBOL-ID SELF))
    (REALSYMBOL (GET-SYM-FROM-OFFSET SYMBOLID)))
   (CL:WHEN (CL:EQ SELF REALSYMBOL) (FREE-SYMBOL-OFFSET SYMBOLARRAY SYMBOLID))
   (CL:WHEN
    (CL:AND
     (CL:NOT (CL:EQ OFFSETTABLE NULL))
     (CL:=
      SYMBOLID
      (LOOKUP OFFSETTABLE (CLSYS-SVAL SYMBOL SYMBOL-NAME SELF))))
    (REMOVE-AT OFFSETTABLE (CLSYS-SVAL SYMBOL SYMBOL-NAME SELF)))
   (CL:SETF (CLSYS-SVAL SYMBOL SYMBOL-VALUE-AND-PLIST SELF) NULL))
  :VOID)

;;; (DEFUN UNINTERN-SURROGATE ...)

(CL:DEFUN UNINTERN-SURROGATE (SELF)
  "Remove `self' from its home module and the surrogate table."
  (CL:LET*
   ((SURROGATEARRAY (SELECT-SYMBOL-ARRAY SURROGATE-SYM))
    (OFFSETTABLE
     (CL:IF
      (CL:NOT (CL:EQ (CLSYS-SVAL SURROGATE HOME-CONTEXT SELF) NULL))
      (SELECT-SYMBOL-OFFSET-TABLE
       (CLSYS-SVAL SURROGATE HOME-CONTEXT SELF)
       SURROGATE-SYM)
      NULL))
    (SURROGATEID (CLSYS-SVAL SURROGATE SYMBOL-ID SELF))
    (REALSURROGATE (GET-SGT-FROM-OFFSET SURROGATEID)))
   (CL:WHEN
    (CL:EQ SELF REALSURROGATE)
    (FREE-SYMBOL-OFFSET SURROGATEARRAY SURROGATEID))
   (CL:WHEN
    (CL:AND
     (CL:NOT (CL:EQ OFFSETTABLE NULL))
     (CL:=
      SURROGATEID
      (LOOKUP OFFSETTABLE (CLSYS-SVAL SURROGATE SYMBOL-NAME SELF))))
    (REMOVE-AT OFFSETTABLE (CLSYS-SVAL SURROGATE SYMBOL-NAME SELF)))
   (CL:SETF (CLSYS-SVAL SURROGATE SURROGATE-VALUE SELF) NULL))
  :VOID)

;;; (DEFUN (INTERN-BOOTSTRAP-SYMBOL-AT GENERALIZED-SYMBOL) ...)

(CL:DEFUN INTERN-BOOTSTRAP-SYMBOL-AT (NAME OFFSET KINDOFSYM)
  "Interns a symbol, or keyword with
name' and symbol-id 'offset'.
If a symbol with that ID already existed, an error is signaled.  This
function is used to recreate the symbol table in a way where symbol IDs
which got hardwired into translated code will refer to the correct objects."
  (CL:LET*
   ((SYMBOLARRAY NULL) (SYMBOL NULL))
   (CL:ECASE
    KINDOFSYM
    (0 (CL:SETQ SYMBOL (LOOKUP-SYMBOL NAME)))
    (1 (CL:SETQ SYMBOL (LOOKUP-SURROGATE NAME)))
    (2 (CL:SETQ SYMBOL (LOOKUP-KEYWORD NAME)))
    (3 (CL:SETQ SYMBOL (LOOKUP-INDEXICAL NAME))))
   (CL:WHEN
    (CL:NOT (CL:EQ SYMBOL NULL))
    (CL:WHEN
     (CL:NOT (CL:= (CLSYS-SVAL GENERALIZED-SYMBOL SYMBOL-ID SYMBOL) OFFSET))
     (CL:WARN
      "intern-bootstrap-symbol-at: `~A' is already interned at offset `~A'"
      SYMBOL
      (CLSYS-SVAL GENERALIZED-SYMBOL SYMBOL-ID SYMBOL)))
    (CL:RETURN-FROM INTERN-BOOTSTRAP-SYMBOL-AT SYMBOL))
   (CL:SETQ SYMBOLARRAY (SELECT-SYMBOL-ARRAY KINDOFSYM))
   (CL:WHEN
    (CL:AND
     (CL:EQ (LEGAL-SYMBOL-ARRAY-OFFSET? SYMBOLARRAY OFFSET) 1)
     (CL:NOT
      (CL:EQ (GET-GENERALIZED-SYMBOL-FROM-OFFSET SYMBOLARRAY OFFSET) NULL)))
    (CL:SETQ SYMBOL (GET-GENERALIZED-SYMBOL-FROM-OFFSET SYMBOLARRAY OFFSET))
    (CL:WARN
     "intern-bootstrap-symbol-at: `~A' is already interned at offset `~A'"
     SYMBOL
     OFFSET)
    (CL:RETURN-FROM INTERN-BOOTSTRAP-SYMBOL-AT SYMBOL))
   (CL:LET*
    ((ARRAY (SELECT-SYMBOL-ARRAY KINDOFSYM)))
    (CL:RETURN-FROM
     INTERN-BOOTSTRAP-SYMBOL-AT
     (HELP-INTERN-GENERALIZED-SYMBOL NAME KINDOFSYM ARRAY OFFSET *MODULE*))))
  :VOID)

;;; (DEFUN (INTERN-SYMBOL-AT SYMBOL) ...)

(CL:DEFUN INTERN-SYMBOL-AT (NAME OFFSET)
  (CL:RETURN-FROM
   INTERN-SYMBOL-AT
   (INTERN-BOOTSTRAP-SYMBOL-AT NAME OFFSET SYMBOL-SYM))
  :VOID)

;;; (DEFUN (INTERN-SURROGATE-AT SURROGATE) ...)

(CL:DEFUN INTERN-SURROGATE-AT (NAME OFFSET)
  (CL:RETURN-FROM
   INTERN-SURROGATE-AT
   (INTERN-BOOTSTRAP-SYMBOL-AT NAME OFFSET SURROGATE-SYM))
  :VOID)

;;; (DEFUN (INTERN-KEYWORD-AT KEYWORD) ...)

(CL:DEFUN INTERN-KEYWORD-AT (NAME OFFSET)
  (CL:RETURN-FROM
   INTERN-KEYWORD-AT
   (INTERN-BOOTSTRAP-SYMBOL-AT NAME OFFSET KEYWORD-SYM))
  :VOID)

;;; (DEFUN (INTERN-INDEXICAL-AT INDEXICAL) ...)

(CL:DEFUN INTERN-INDEXICAL-AT (NAME OFFSET)
  (CL:RETURN-FROM
   INTERN-INDEXICAL-AT
   (INTERN-BOOTSTRAP-SYMBOL-AT NAME OFFSET INDEXICAL-SYM))
  :VOID)

;;; (DEFGLOBAL *CONTEXT-NUMBER-COUNTER* ...)

(CL:DEFVAR *CONTEXT-NUMBER-COUNTER* -2
  "Contains the number of the last-created
context (all 'live' contexts are even-numbered).")

;;; (DEFUN INITIALIZE-KERNEL-MODULE ...)

(CL:DEFUN INITIALIZE-KERNEL-MODULE (MODULE NAME FULLNAME PARENT)
  (CL:SETF (CLSYS-SVAL MODULE MODULE-NAME MODULE) NAME)
  (CL:SETF (CLSYS-SVAL MODULE MODULE-FULL-NAME MODULE) FULLNAME)
  (CL:WHEN
   (CL:NOT (CL:EQ PARENT NULL))
   (INSERT (CLSYS-SVAL MODULE CHILD-CONTEXTS PARENT) MODULE)
   (CL:SETF (CLSYS-SVAL MODULE CARDINAL-MODULE MODULE) MODULE))
  (CL:SETF
   (CLSYS-SVAL MODULE SYMBOL-OFFSET-TABLE MODULE)
   (NEW-STRING-TO-INTEGER-HASH-TABLE))
  (CL:SETF
   (CLSYS-SVAL MODULE SURROGATE-OFFSET-TABLE MODULE)
   (NEW-STRING-TO-INTEGER-HASH-TABLE))
  (CL:SETF
   (CLSYS-SVAL MODULE INDEXICAL-OFFSET-TABLE MODULE)
   (NEW-STRING-TO-INTEGER-HASH-TABLE))
  (CL:SETF (CLSYS-SVAL MODULE ALL-SUPER-CONTEXTS MODULE) NIL)
  (CL:SETF (CLSYS-SVAL MODULE BASE-MODULE MODULE) MODULE)
  (CL:SETQ *CONTEXT-NUMBER-COUNTER* (CL:+ *CONTEXT-NUMBER-COUNTER* 2))
  (CL:SETF (CLSYS-SVAL MODULE CONTEXT-NUMBER MODULE) *CONTEXT-NUMBER-COUNTER*)
  (CL:SETF (CLSYS-SVAL MODULE STRINGIFIED-OPTIONS MODULE) "")
  :VOID)

;;; (DEFUN INITIALIZE-MODULES ...)

(CL:DEFUN INITIALIZE-MODULES ()
  (CL:SETQ *ROOT-MODULE* (NEW-MODULE))
  (INITIALIZE-KERNEL-MODULE *ROOT-MODULE* "ROOT-MODULE" "/" NULL)
  (CL:SETQ *STELLA-MODULE* (NEW-MODULE))
  (INITIALIZE-KERNEL-MODULE *STELLA-MODULE* "STELLA" "/STELLA" *ROOT-MODULE*)
  (CL:SETF (CLSYS-SVAL MODULE MODULE-NATIVE-PACKAGE *STELLA-MODULE*) "STELLA")
  (CL:SETQ *COMMON-LISP-MODULE* (NEW-MODULE))
  (INITIALIZE-KERNEL-MODULE
   *COMMON-LISP-MODULE*
   "COMMON-LISP"
   "/COMMON-LISP"
   *ROOT-MODULE*)
  (CL:SETF (CLSYS-SVAL MODULE MODULE-NATIVE-PACKAGE *COMMON-LISP-MODULE*) "CL")
  (CL:SETF (CLSYS-SVAL MODULE CARDINAL-MODULE *ROOT-MODULE*) *STELLA-MODULE*)
  (CL:SETQ *MODULE* *STELLA-MODULE*)
  (CL:SETQ *CONTEXT* *MODULE*)
  :VOID)

;;; (DEFUN INITIALIZE-SYMBOLS-AND-MODULES ...)

(CL:DEFUN INITIALIZE-SYMBOLS-AND-MODULES ()
  (CL:SETQ *FIXED-SYMBOL-ARRAY* (NEW-EXTENSIBLE-SYMBOL-ARRAY 100))
  (CL:SETQ *FIXED-SURROGATE-ARRAY* (NEW-EXTENSIBLE-SYMBOL-ARRAY 100))
  (CL:SETQ *FIXED-KEYWORD-ARRAY* (NEW-EXTENSIBLE-SYMBOL-ARRAY 100))
  (CL:SETQ *KEYWORD-OFFSET-TABLE* (NEW-STRING-TO-INTEGER-HASH-TABLE))
  (CL:SETQ *FIXED-INDEXICAL-ARRAY* (NEW-EXTENSIBLE-SYMBOL-ARRAY 100))
  (CL:SETQ *SYMBOL-ARRAY* *FIXED-SYMBOL-ARRAY*)
  (CL:SETQ *SURROGATE-ARRAY* *FIXED-SURROGATE-ARRAY*)
  (CL:SETQ *KEYWORD-ARRAY* *FIXED-KEYWORD-ARRAY*)
  (CL:SETQ *INDEXICAL-ARRAY* *FIXED-INDEXICAL-ARRAY*)
  (INITIALIZE-MODULES)
  :VOID)

;;; (DEFUN (LOOKUP-TRANSIENT-SYMBOL SYMBOL) ...)

(CL:DEFUN LOOKUP-TRANSIENT-SYMBOL (NAME)
  (CL:IF
   (CL:NOT (CL:EQ *TRANSIENT-SYMBOL-LOOKUP-TABLE* NULL))
   (CL:RETURN-FROM
    LOOKUP-TRANSIENT-SYMBOL
    (LOOKUP *TRANSIENT-SYMBOL-LOOKUP-TABLE* NAME))
   (CL:PROGN
    (CL:WARN
     "Looking for a transient symbol when the parsing tables have
not been initialized.")
    (CL:RETURN-FROM LOOKUP-TRANSIENT-SYMBOL NULL)))
  :VOID)

;;; (DEFUN (LOOKUP-TRANSIENT-KEYWORD KEYWORD) ...)

(CL:DEFUN LOOKUP-TRANSIENT-KEYWORD (NAME)
  (CL:IF
   (CL:NOT (CL:EQ *TRANSIENT-KEYWORD-LOOKUP-TABLE* NULL))
   (CL:RETURN-FROM
    LOOKUP-TRANSIENT-KEYWORD
    (LOOKUP *TRANSIENT-KEYWORD-LOOKUP-TABLE* NAME))
   (CL:PROGN
    (CL:WARN
     "Looking for a transient keyword when the parsing tables have
not been initialized.")
    (CL:RETURN-FROM LOOKUP-TRANSIENT-KEYWORD NULL)))
  :VOID)

;;; (DEFUN (INTERN-TRANSIENT-SYMBOL SYMBOL) ...)

(CL:DEFUN INTERN-TRANSIENT-SYMBOL (NAME)
  (CL:LET*
   ((SYMBOL (LOOKUP-SYMBOL NAME)))
   (CL:WHEN
    (CL:NOT (CL:EQ SYMBOL NULL))
    (CL:RETURN-FROM INTERN-TRANSIENT-SYMBOL SYMBOL))
   (CL:SETQ SYMBOL (LOOKUP-TRANSIENT-SYMBOL NAME))
   (CL:WHEN
    (CL:NOT (CL:EQ SYMBOL NULL))
    (CL:RETURN-FROM INTERN-TRANSIENT-SYMBOL SYMBOL))
   (CL:SETQ SYMBOL (NEW-TRANSIENT-SYMBOL NAME))
   (CL:SETF (CLSYS-SVAL SYMBOL HOME-CONTEXT SYMBOL) NULL)
   (INSERT-AT *TRANSIENT-SYMBOL-LOOKUP-TABLE* NAME SYMBOL)
   (CL:RETURN-FROM INTERN-TRANSIENT-SYMBOL SYMBOL))
  :VOID)

;;; (DEFUN (INTERN-TRANSIENT-KEYWORD KEYWORD) ...)

(CL:DEFUN INTERN-TRANSIENT-KEYWORD (NAME)
  (CL:LET*
   ((KEYWORD (LOOKUP-KEYWORD NAME)))
   (CL:WHEN
    (CL:NOT (CL:EQ KEYWORD NULL))
    (CL:RETURN-FROM INTERN-TRANSIENT-KEYWORD KEYWORD))
   (CL:SETQ KEYWORD (LOOKUP-TRANSIENT-KEYWORD NAME))
   (CL:WHEN
    (CL:NOT (CL:EQ KEYWORD NULL))
    (CL:RETURN-FROM INTERN-TRANSIENT-KEYWORD KEYWORD))
   (CL:SETQ KEYWORD (NEW-TRANSIENT-KEYWORD NAME))
   (INSERT-AT *TRANSIENT-KEYWORD-LOOKUP-TABLE* NAME KEYWORD)
   (CL:RETURN-FROM INTERN-TRANSIENT-KEYWORD KEYWORD))
  :VOID)

;;; (DEFUN FREE-TRANSIENT-SYMBOLS ...)

(CL:DEFUN FREE-TRANSIENT-SYMBOLS ()
  (FREE-HASH-TABLE-VALUES *TRANSIENT-SYMBOL-LOOKUP-TABLE*)
  :VOID)

;;; (DEFUN FREE-TRANSIENT-KEYWORDS ...)

(CL:DEFUN FREE-TRANSIENT-KEYWORDS ()
  (FREE-HASH-TABLE-VALUES *TRANSIENT-KEYWORD-LOOKUP-TABLE*)
  :VOID)

;;; (DEFUN (INTERN-COMMON-LISP-SYMBOL SYMBOL) ...)

(CL:DEFUN INTERN-COMMON-LISP-SYMBOL (NAME)
  (CL:LET*
   ((SYMBOL
     (LOOKUP-RIGID-SYMBOL-WRT-MODULE NAME *COMMON-LISP-MODULE* SYMBOL-SYM)))
   (CL:WHEN
    (CL:NOT (CL:EQ SYMBOL NULL))
    (CL:RETURN-FROM INTERN-COMMON-LISP-SYMBOL SYMBOL))
   (CL:SETQ
    SYMBOL
    (INTERN-RIGID-SYMBOL-WRT-MODULE NAME *COMMON-LISP-MODULE* SYMBOL-SYM))
   (CL:RETURN-FROM INTERN-COMMON-LISP-SYMBOL SYMBOL))
  :VOID)

;;; (DEFUN (SYMBOL-COMMON-LISP? BOOLEAN) ...)

(CL:DEFUN SYMBOL-COMMON-LISP? (SELF)
  (CL:RETURN-FROM
   SYMBOL-COMMON-LISP?
   (EQ? (CLSYS-SVAL SYMBOL HOME-CONTEXT SELF) *COMMON-LISP-MODULE*))
  :VOID)

;;; (DEFUN (COMMON-LISP-SYMBOL? BOOLEAN) ...)

(CL:DEFUN COMMON-LISP-SYMBOL? (SELF)
  (CL:RETURN-FROM
   COMMON-LISP-SYMBOL?
   (CL:IF
    (CL:AND (CL:EQ (SYMBOL? SELF) 1) (CL:EQ (SYMBOL-COMMON-LISP? SELF) 1))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN INITIALIZE-PARSING-TABLES ...)

(CL:DEFUN INITIALIZE-PARSING-TABLES ()
  "Create indices for recording transient symbols and
Common Lisp symbols while parsing."
  (CL:SETQ *TRANSIENT-SYMBOL-LOOKUP-TABLE* (NEW-STRING-HASH-TABLE))
  (CL:SETQ *COMMON-LISP-SYMBOL-LOOKUP-TABLE* (NEW-STRING-HASH-TABLE))
  (CL:SETQ *TRANSIENT-KEYWORD-LOOKUP-TABLE* (NEW-STRING-HASH-TABLE))
  :VOID)

;;; (DEFGLOBAL *GENSYM-COUNTER* ...)

(CL:DEFVAR *GENSYM-COUNTER* 0
  "Incremented once for each gensym call.")

;;; (DEFUN (YIELD-GENSYM-NAME STRING) ...)

(CL:DEFUN YIELD-GENSYM-NAME (PREFIX COUNTER)
  (CL:LET*
   ((MASK "-000")
    (SUFFIX (INTEGER-TO-STRING COUNTER))
    (MASKEND (CL:- 4 (LENGTH SUFFIX))))
   (CL:WHEN (CL:< MASKEND 1) (CL:SETQ MASKEND 1))
   (CL:RETURN-FROM
    YIELD-GENSYM-NAME
    (CONCATENATE PREFIX (CONCATENATE (SUBSEQUENCE MASK 0 MASKEND) SUFFIX))))
  :VOID)

;;; (DEFUN (GENSYM SYMBOL) ...)

(CL:DEFUN GENSYM (PREFIX)
  "Return a transient symbol with a name beginning with
'prefix' and ending with a globally gensym'd integer."
  (CL:RETURN-FROM
   GENSYM
   (INTERN-TRANSIENT-SYMBOL
    (YIELD-GENSYM-NAME
     PREFIX
     (CL:SETQ *GENSYM-COUNTER* (CL:1+ *GENSYM-COUNTER*)))))
  :VOID)

;;; (DEFMETHOD (SURROGATIFY SURROGATE) ...)

(CL:DEFMETHOD SURROGATIFY ((SELF SURROGATE))
  (CL:RETURN-FROM SURROGATIFY SELF)
  :VOID)

;;; (DEFMETHOD (SURROGATIFY SURROGATE) ...)

(CL:DEFMETHOD SURROGATIFY ((SELF SYMBOL))
  (CL:RETURN-FROM
   SURROGATIFY
   (INTERN-RIGID-SYMBOL-LOCALLY
    (CLSYS-SVAL SYMBOL SYMBOL-NAME SELF)
    (CLSYS-SVAL SYMBOL HOME-CONTEXT SELF)
    SURROGATE-SYM))
  :VOID)

;;; (DEFMETHOD (SURROGATIFY SURROGATE) ...)

(CL:DEFMETHOD SURROGATIFY ((SELF CL:STRING))
  (CL:RETURN-FROM SURROGATIFY (INTERN-SURROGATE SELF))
  :VOID)

;;; (DEFMETHOD (SURROGATIFY SURROGATE) ...)

(CL:DEFMETHOD SURROGATIFY ((SELF CONS))
  (CL:IF
   (CL:EQ SELF NIL)
   (CL:RETURN-FROM SURROGATIFY (INTERN-SURROGATE "NIL"))
   (CL:ERROR "Cons passed to 'surrogatify'"))
  :VOID)

;;; (DEFMETHOD (SURROGATIFY SURROGATE) ...)

(CL:DEFMETHOD SURROGATIFY ((SELF OBJECT))
  (CL:ERROR "OBJECT passed to 'surrogatify'")
  (CL:RETURN-FROM SURROGATIFY NULL)
  :VOID)

;;; (DEFUN (TYPIFY TYPE) ...)

(CL:DEFUN TYPIFY (SELF)
  (CL:RETURN-FROM TYPIFY (SURROGATIFY SELF))
  :VOID)

;;; (DEFMETHOD (KEYWORDIFY KEYWORD) ...)

(CL:DEFMETHOD KEYWORDIFY ((SELF KEYWORD))
  (CL:RETURN-FROM KEYWORDIFY SELF)
  :VOID)

;;; (DEFMETHOD (KEYWORDIFY KEYWORD) ...)

(CL:DEFMETHOD KEYWORDIFY ((SELF TRANSIENT-KEYWORD))
  (CL:RETURN-FROM
   KEYWORDIFY
   (INTERN-PERMANENT-KEYWORD (CLSYS-SVAL TRANSIENT-KEYWORD SYMBOL-NAME SELF)))
  :VOID)

;;; (DEFMETHOD (KEYWORDIFY KEYWORD) ...)

(CL:DEFMETHOD KEYWORDIFY ((SELF SYMBOL))
  (CL:RETURN-FROM
   KEYWORDIFY
   (INTERN-PERMANENT-KEYWORD (CLSYS-SVAL SYMBOL SYMBOL-NAME SELF)))
  :VOID)

;;; (DEFMETHOD (KEYWORDIFY KEYWORD) ...)

(CL:DEFMETHOD KEYWORDIFY ((SELF CL:STRING))
  (CL:RETURN-FROM KEYWORDIFY (INTERN-PERMANENT-KEYWORD SELF))
  :VOID)

;;; (DEFUN IN-PLACE-OBJECTS-TO-SYMBOLS ...)

(CL:DEFUN IN-PLACE-OBJECTS-TO-SYMBOLS (CONSLIST)
  (CL:LET*
   ((CURSOR CONSLIST))
   (CL:LOOP
    WHILE
    (CL:NOT (CL:EQ CURSOR NIL))
    DO
    (CL:SETF
     (CLSYS-SVAL CONS VALUE CURSOR)
     (PERMANENTIFY (CLSYS-SVAL CONS VALUE CURSOR)))
    (CL:SETQ CURSOR (CLSYS-SVAL CONS REST CURSOR))))
  :VOID)

;;; (DEFUN IN-PLACE-OBJECTS-TO-TYPES ...)

(CL:DEFUN IN-PLACE-OBJECTS-TO-TYPES (CONSLIST)
  (CL:LET*
   ((CURSOR CONSLIST))
   (CL:LOOP
    WHILE
    (CL:NOT (CL:EQ CURSOR NIL))
    DO
    (CL:SETF
     (CLSYS-SVAL CONS VALUE CURSOR)
     (TYPIFY (CLSYS-SVAL CONS VALUE CURSOR)))
    (CL:SETQ CURSOR (CLSYS-SVAL CONS REST CURSOR))))
  :VOID)

;;; (DEFUN (SURROGATE-NAME? BOOLEAN) ...)

(CL:DEFUN SURROGATE-NAME? (NAME)
  (CL:RETURN-FROM
   SURROGATE-NAME?
   (EQ? (CL:CHAR NAME 0) SURROGATE-PREFIX-CHARACTER))
  :VOID)

;;; (DEFUN (QUALIFIED-NAME? BOOLEAN) ...)

(CL:DEFUN QUALIFIED-NAME? (NAME)
  (CL:RETURN-FROM
   QUALIFIED-NAME?
   (CL:IF
    (CL:OR
     (CL:AND
      (CL:EQ (MEMBER? NAME MODULE-SEPARATOR-CHARACTER) 1)
      (CL:> (LENGTH NAME) 1))
     (CL:EQL (CL:CHAR NAME 0) #\.))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN (KEYWORD-NAME? BOOLEAN) ...)

(CL:DEFUN KEYWORD-NAME? (NAME)
  (CL:RETURN-FROM KEYWORD-NAME? (EQ? (CL:CHAR NAME 0) #\:))
  :VOID)

;;; (DEFUN (INTERN-GENERALIZED-SYMBOL GENERALIZED-SYMBOL) ...)

(CL:DEFUN INTERN-GENERALIZED-SYMBOL (NAME)
  (CL:COND
   ((CL:EQ (QUALIFIED-NAME? NAME) 1)
    (CL:RETURN-FROM INTERN-GENERALIZED-SYMBOL (INTERN-QUALIFIED-NAME NAME)))
   ((CL:EQ (KEYWORD-NAME? NAME) 1)
    (CL:RETURN-FROM INTERN-GENERALIZED-SYMBOL (INTERN-KEYWORD (REST NAME))))
   ((CL:EQ (SURROGATE-NAME? NAME) 1)
    (CL:RETURN-FROM INTERN-GENERALIZED-SYMBOL (INTERN-SURROGATE (REST NAME))))
   (CL:T (CL:RETURN-FROM INTERN-GENERALIZED-SYMBOL (INTERN-SYMBOL NAME))))
  :VOID)

;;; (DEFUN (COMPUTE-FULL-NAME STRING) ...)

(CL:DEFUN COMPUTE-FULL-NAME (NAME MODULE)
  (CL:WHEN (CL:EQ MODULE NULL) (CL:RETURN-FROM COMPUTE-FULL-NAME NAME))
  (CL:LET*
   ((PATHNAME NAME))
   (CL:LOOP
    WHILE
    (CL:NOT (CL:EQ MODULE NULL))
    DO
    (CL:IF
     (CL:EQ (STRING-EQL? PATHNAME "") 1)
     (CL:SETQ PATHNAME (CLSYS-SVAL MODULE MODULE-NAME MODULE))
     (CL:SETQ
      PATHNAME
      (CONCATENATE
       (CLSYS-SVAL MODULE MODULE-NAME MODULE)
       (CONCATENATE MODULE-SEPARATOR-STRING PATHNAME))))
    (CL:SETQ MODULE (FIRST (CLSYS-SVAL MODULE PARENT-MODULES MODULE))))
   (CL:SETQ PATHNAME (CONCATENATE MODULE-SEPARATOR-STRING PATHNAME))
   (CL:RETURN-FROM COMPUTE-FULL-NAME PATHNAME))
  :VOID)

;;; (DEFMETHOD (LOCAL-PRINT-NAME STRING) ...)

(CL:DEFMETHOD LOCAL-PRINT-NAME ((SELF GENERALIZED-SYMBOL))
  (CL:RETURN-FROM
   LOCAL-PRINT-NAME
   (CLSYS-SVAL GENERALIZED-SYMBOL SYMBOL-NAME SELF))
  :VOID)

;;; (DEFMETHOD (LOCAL-PRINT-NAME STRING) ...)

(CL:DEFMETHOD LOCAL-PRINT-NAME ((SELF SURROGATE))
  (CL:RETURN-FROM
   LOCAL-PRINT-NAME
   (CONCATENATE "@" (CLSYS-SVAL SURROGATE SYMBOL-NAME SELF)))
  :VOID)

;;; (DEFMETHOD (RELATIVE-NAME STRING) ...)

(CL:DEFMETHOD RELATIVE-NAME ((SELF GENERALIZED-SYMBOL))
  (CL:IF
   (CL:EQ (CLSYS-SVAL GENERALIZED-SYMBOL HOME-CONTEXT SELF) *MODULE*)
   (CL:RETURN-FROM RELATIVE-NAME (LOCAL-PRINT-NAME SELF))
   (CL:RETURN-FROM
    RELATIVE-NAME
    (COMPUTE-FULL-NAME
     (LOCAL-PRINT-NAME SELF)
     (CLSYS-SVAL GENERALIZED-SYMBOL HOME-CONTEXT SELF))))
  :VOID)

;;; (DEFMETHOD (VISIBLE-NAME STRING) ...)

(CL:DEFMETHOD VISIBLE-NAME ((SELF GENERALIZED-SYMBOL))
  (CL:IF
   (CL:EQ
    (VISIBLE-FROM? (CLSYS-SVAL GENERALIZED-SYMBOL HOME-CONTEXT SELF) *MODULE*)
    1)
   (CL:RETURN-FROM VISIBLE-NAME (LOCAL-PRINT-NAME SELF))
   (CL:RETURN-FROM
    VISIBLE-NAME
    (COMPUTE-FULL-NAME
     (LOCAL-PRINT-NAME SELF)
     (CLSYS-SVAL GENERALIZED-SYMBOL HOME-CONTEXT SELF))))
  :VOID)

;;; (DEFCONSTANT ESCAPE-CHARACTER ...)

(CL:DEFVAR ESCAPE-CHARACTER #\!)

;;; (DEFUN (ESCAPED-CHARACTER? BOOLEAN) ...)

(CL:DEFUN ESCAPED-CHARACTER? (STRING POSITION)
  (CL:LET*
   ((NOFESCAPES 0))
   (CL:SETQ POSITION (CL:1- POSITION))
   (CL:LOOP
    WHILE
    (CL:AND
     (CL:>= POSITION 0)
     (CL:EQL ESCAPE-CHARACTER (CL:CHAR STRING POSITION)))
    DO
    (CL:SETQ NOFESCAPES (CL:1+ NOFESCAPES))
    (CL:SETQ POSITION (CL:1- POSITION)))
   (CL:RETURN-FROM ESCAPED-CHARACTER? (ODD? NOFESCAPES)))
  :VOID)

;;; (DEFUN (UNESCAPE-CHARACTER STRING) ...)

(CL:DEFUN UNESCAPE-CHARACTER (STRING CHARACTER)
  (CL:LET*
   ((ESCAPEPOSITION (POSITION STRING ESCAPE-CHARACTER 0)))
   (CL:COND
    ((CL:EQ (DEFINED? ESCAPEPOSITION) 1)
     (CL:LET*
      ((STRINGLENGTH (LENGTH STRING))
       (UNESCAPEDSTRING (SUBSEQUENCE STRING 0 ESCAPEPOSITION)))
      (CL:WHEN
       (CL:< ESCAPEPOSITION (CL:1- STRINGLENGTH))
       (CL:SETQ
        UNESCAPEDSTRING
        (CONCATENATE
         UNESCAPEDSTRING
         (SUBSEQUENCE
          STRING
          (CL:IF
           (CL:OR
            (CL:EQ (NULL? CHARACTER) 1)
            (CL:EQL CHARACTER (CL:CHAR STRING (CL:1+ ESCAPEPOSITION))))
           (CL:1+ ESCAPEPOSITION)
           ESCAPEPOSITION)
          (CL:+ ESCAPEPOSITION 2)))))
      (CL:WHEN
       (CL:< ESCAPEPOSITION (CL:- STRINGLENGTH 2))
       (CL:SETQ
        UNESCAPEDSTRING
        (CONCATENATE
         UNESCAPEDSTRING
         (UNESCAPE-CHARACTER
          (SUBSEQUENCE STRING (CL:+ ESCAPEPOSITION 2) NULL-INTEGER)
          CHARACTER))))
      (CL:RETURN-FROM UNESCAPE-CHARACTER UNESCAPEDSTRING)))
    (CL:T (CL:RETURN-FROM UNESCAPE-CHARACTER STRING))))
  :VOID)

;;; (DEFUN (SYMBOL-VALUE OBJECT) ...)

(CL:DEFUN SYMBOL-VALUE (SYMBOL)
  "Return the value of 'symbol'.  Note, that this value is not
visible to code that references a variable with the same name as 'symbol'.
The 'symbol-value' is simply a special property that can always be accessed
in constant time.  The 'symbol-value' of a symbol can be changed with 'setf'."
  (CL:RETURN-FROM
   SYMBOL-VALUE
   (CLSYS-SVAL CONS VALUE (CLSYS-SVAL SYMBOL SYMBOL-VALUE-AND-PLIST SYMBOL)))
  :VOID)

;;; (DEFUN (SYMBOL-VALUE-SETTER OBJECT) ...)

(CL:DEFUN SYMBOL-VALUE-SETTER (SYMBOL VALUE)
  (CL:LET*
   ((VPLIST (CLSYS-SVAL SYMBOL SYMBOL-VALUE-AND-PLIST SYMBOL)))
   (CL:WHEN
    (CL:EQ VPLIST NIL)
    (CL:SETQ VPLIST (PERMANENT-CONS NULL NIL))
    (CL:SETF (CLSYS-SVAL SYMBOL SYMBOL-VALUE-AND-PLIST SYMBOL) VPLIST))
   (CL:RETURN-FROM
    SYMBOL-VALUE-SETTER
    (CL:SETF (CLSYS-SVAL CONS VALUE VPLIST) VALUE)))
  :VOID)

;;; (DEFUN (SYMBOL-PLIST CONS) ...)

(CL:DEFUN SYMBOL-PLIST (SYMBOL)
  "Return the property list of 'symbol'.  The 'symbol-plist'
of a symbol can be set with 'setf'.  IMPORTANT: Property list are modified 
destructively, hence, if you supply it as a whole make sure to always supply
a modfiable copy, e.g., by using 'bquote'."
  (CL:RETURN-FROM
   SYMBOL-PLIST
   (CLSYS-SVAL CONS REST (CLSYS-SVAL SYMBOL SYMBOL-VALUE-AND-PLIST SYMBOL)))
  :VOID)

;;; (DEFUN (SYMBOL-PLIST-SETTER CONS) ...)

(CL:DEFUN SYMBOL-PLIST-SETTER (SYMBOL PLIST)
  ()
  (CL:LET*
   ((VPLIST (CLSYS-SVAL SYMBOL SYMBOL-VALUE-AND-PLIST SYMBOL)))
   (CL:WHEN
    (CL:EQ VPLIST NIL)
    (CL:SETQ VPLIST (PERMANENT-CONS NULL NIL))
    (CL:SETF (CLSYS-SVAL SYMBOL SYMBOL-VALUE-AND-PLIST SYMBOL) VPLIST))
   (CL:RETURN-FROM
    SYMBOL-PLIST-SETTER
    (CL:SETF (CLSYS-SVAL CONS REST VPLIST) PLIST)))
  :VOID)

;;; (DEFUN (SYMBOL-PROPERTY OBJECT) ...)

(CL:DEFUN SYMBOL-PROPERTY (SYMBOL KEY)
  "Return the property of 'symbol' whose key is 'eq?' to 'key'.
Symbol properties can be set with 'setf'."
  (CL:LET*
   ((PLIST
     (CLSYS-SVAL
      CONS
      REST
      (CLSYS-SVAL SYMBOL SYMBOL-VALUE-AND-PLIST SYMBOL))))
   (CL:LOOP
    WHILE
    (CL:NOT (CL:EQ PLIST NIL))
    DO
    (CL:WHEN
     (CL:EQ (CLSYS-SVAL CONS VALUE PLIST) KEY)
     (CL:RETURN-FROM
      SYMBOL-PROPERTY
      (CLSYS-SVAL CONS VALUE (CLSYS-SVAL CONS REST PLIST))))
    (CL:SETQ PLIST (CLSYS-SVAL CONS REST (CLSYS-SVAL CONS REST PLIST))))
   (CL:RETURN-FROM SYMBOL-PROPERTY NULL))
  :VOID)

;;; (DEFUN (SYMBOL-PROPERTY-SETTER OBJECT) ...)

(CL:DEFUN SYMBOL-PROPERTY-SETTER (SYMBOL VALUE KEY)
  (CL:LET*
   ((VPLIST (CLSYS-SVAL SYMBOL SYMBOL-VALUE-AND-PLIST SYMBOL))
    (PLIST (CLSYS-SVAL CONS REST VPLIST)))
   (CL:LOOP
    WHILE
    (CL:NOT (CL:EQ PLIST NIL))
    DO
    (CL:WHEN
     (CL:EQ (CLSYS-SVAL CONS VALUE PLIST) KEY)
     (CL:COND
      ((CL:NOT (CL:EQ VALUE NULL))
       (CL:SETF (CLSYS-SVAL CONS VALUE (CLSYS-SVAL CONS REST PLIST)) VALUE))
      ((CL:NOT
        (CL:EQ (CLSYS-SVAL CONS REST (CLSYS-SVAL CONS REST PLIST)) NIL))
       (CL:LET*
        ((RESTPLIST (CLSYS-SVAL CONS REST PLIST)))
        (CL:SETF
         (CLSYS-SVAL CONS VALUE PLIST)
         (CLSYS-SVAL CONS VALUE (CLSYS-SVAL CONS REST RESTPLIST)))
        (CL:SETF
         (CLSYS-SVAL CONS REST PLIST)
         (CLSYS-SVAL CONS REST (CLSYS-SVAL CONS REST RESTPLIST)))
        (FREE-CONS (CLSYS-SVAL CONS REST RESTPLIST))
        (FREE-CONS RESTPLIST)))
      ((CL:EQ PLIST (CLSYS-SVAL CONS REST VPLIST))
       (FREE-CONS (CLSYS-SVAL CONS REST PLIST))
       (FREE-CONS PLIST)
       (CL:SETF (CLSYS-SVAL CONS REST VPLIST) NIL))
      (CL:T
       (CL:SETF (CLSYS-SVAL CONS VALUE (CLSYS-SVAL CONS REST PLIST)) VALUE)))
     (CL:RETURN-FROM SYMBOL-PROPERTY-SETTER VALUE))
    (CL:SETQ PLIST (CLSYS-SVAL CONS REST (CLSYS-SVAL CONS REST PLIST))))
   (CL:WHEN
    (CL:NOT (CL:EQ VALUE NULL))
    (CL:WHEN
     (CL:EQ VPLIST NIL)
     (CL:SETQ VPLIST (PERMANENT-CONS NULL NIL))
     (CL:SETF (CLSYS-SVAL SYMBOL SYMBOL-VALUE-AND-PLIST SYMBOL) VPLIST))
    (CL:SETF
     (CLSYS-SVAL CONS REST VPLIST)
     (PERMANENT-CONS
      KEY
      (PERMANENT-CONS VALUE (CLSYS-SVAL CONS REST VPLIST)))))
   (CL:RETURN-FROM SYMBOL-PROPERTY-SETTER VALUE))
  :VOID)

;;; (DEFUN (CREATE-CHARACTER-TYPE-TABLE (VECTOR OF KEYWORD)) ...)

(CL:DEFUN CREATE-CHARACTER-TYPE-TABLE ()
  (CL:LET*
   ((TABLE (NEW-VECTOR 256)))
   (CL:LET*
    ((CODE NULL) (ITER-001 0) (UPPER-BOUND-001 255))
    (CL:LOOP
     WHILE
     (CL:<= ITER-001 UPPER-BOUND-001)
     DO
     (CL:PROGN (CL:SETQ CODE ITER-001) (CL:SETQ ITER-001 (CL:1+ ITER-001)))
     (CL:SETF
      (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) CODE)
      KWD-SYMBOLS-OTHER)))
   (CL:LET*
    ((CODE NULL)
     (ITER-002 (CHARACTER-CODE #\0))
     (UPPER-BOUND-002 (CHARACTER-CODE #\9))
     (UNBOUNDED?-001 (NULL? UPPER-BOUND-002)))
    (CL:LOOP
     WHILE
     (CL:OR (CL:EQ UNBOUNDED?-001 1) (CL:<= ITER-002 UPPER-BOUND-002))
     DO
     (CL:PROGN (CL:SETQ CODE ITER-002) (CL:SETQ ITER-002 (CL:1+ ITER-002)))
     (CL:SETF
      (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) CODE)
      KWD-SYMBOLS-DIGIT)))
   (CL:LET*
    ((CODE NULL)
     (ITER-003 (CHARACTER-CODE #\A))
     (UPPER-BOUND-003 (CHARACTER-CODE #\Z))
     (UNBOUNDED?-002 (NULL? UPPER-BOUND-003)))
    (CL:LOOP
     WHILE
     (CL:OR (CL:EQ UNBOUNDED?-002 1) (CL:<= ITER-003 UPPER-BOUND-003))
     DO
     (CL:PROGN (CL:SETQ CODE ITER-003) (CL:SETQ ITER-003 (CL:1+ ITER-003)))
     (CL:SETF
      (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) CODE)
      KWD-SYMBOLS-LETTER)))
   (CL:LET*
    ((CODE NULL)
     (ITER-004 (CHARACTER-CODE #\a))
     (UPPER-BOUND-004 (CHARACTER-CODE #\z))
     (UNBOUNDED?-003 (NULL? UPPER-BOUND-004)))
    (CL:LOOP
     WHILE
     (CL:OR (CL:EQ UNBOUNDED?-003 1) (CL:<= ITER-004 UPPER-BOUND-004))
     DO
     (CL:PROGN (CL:SETQ CODE ITER-004) (CL:SETQ ITER-004 (CL:1+ ITER-004)))
     (CL:SETF
      (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) CODE)
      KWD-SYMBOLS-LETTER)))
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\$))
    KWD-SYMBOLS-SYMBOL-CONSTITUENT)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\%))
    KWD-SYMBOLS-SYMBOL-CONSTITUENT)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\<))
    KWD-SYMBOLS-SYMBOL-CONSTITUENT)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\>))
    KWD-SYMBOLS-SYMBOL-CONSTITUENT)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\=))
    KWD-SYMBOLS-SYMBOL-CONSTITUENT)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\?))
    KWD-SYMBOLS-SYMBOL-CONSTITUENT)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\[))
    KWD-SYMBOLS-SYMBOL-CONSTITUENT)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\]))
    KWD-SYMBOLS-SYMBOL-CONSTITUENT)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\^))
    KWD-SYMBOLS-SYMBOL-CONSTITUENT)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\_))
    KWD-SYMBOLS-SYMBOL-CONSTITUENT)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\{))
    KWD-SYMBOLS-SYMBOL-CONSTITUENT)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\}))
    KWD-SYMBOLS-SYMBOL-CONSTITUENT)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\~))
    KWD-SYMBOLS-SYMBOL-CONSTITUENT)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\.))
    KWD-SYMBOLS-SYMBOL-CONSTITUENT)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\+))
    KWD-SYMBOLS-SYMBOL-CONSTITUENT)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\-))
    KWD-SYMBOLS-SYMBOL-CONSTITUENT)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\*))
    KWD-SYMBOLS-SYMBOL-CONSTITUENT)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\:))
    KWD-SYMBOLS-SYMBOL-QUALIFIER)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\/))
    KWD-SYMBOLS-SYMBOL-QUALIFIER)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\@))
    KWD-SYMBOLS-SYMBOL-QUALIFIER)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\!))
    KWD-SYMBOLS-ESCAPE)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\\))
    KWD-SYMBOLS-ESCAPE)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\())
    KWD-SYMBOLS-OPEN-DELIMITER)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\)))
    KWD-SYMBOLS-CLOSE-DELIMITER)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\"))
    KWD-SYMBOLS-PAIRED-DELIMITER)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\|))
    KWD-SYMBOLS-PAIRED-DELIMITER)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\ ))
    KWD-SYMBOLS-WHITE-SPACE)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\Tab))
    KWD-SYMBOLS-WHITE-SPACE)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\Newline))
    KWD-SYMBOLS-WHITE-SPACE)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\Return))
    KWD-SYMBOLS-WHITE-SPACE)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\Newline))
    KWD-SYMBOLS-WHITE-SPACE)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) (CHARACTER-CODE #\Page))
    KWD-SYMBOLS-WHITE-SPACE)
   (CL:RETURN-FROM CREATE-CHARACTER-TYPE-TABLE TABLE))
  :VOID)

;;; (DEFGLOBAL *CHARACTER-TYPE-TABLE* ...)

(CL:DEFVAR *CHARACTER-TYPE-TABLE* NULL
  "Table of character types.  Entry 'i' represents the type
of the character whose 'char-code' equals 'i'.  Each character is classified 
by one of the following keywords: :DIGIT, :LETTER, :SYMBOL-CONSTITUENT, 
:SYMBOL-QUALIFIER, :ESCAPE, :OPEN-DELIMITER, :CLOSE-DELIMITER, 
:PAIRED-DELIMITER, :WHITE-SPACE, or :OTHER.")

;;; (DEFUN (SYMBOL-CONSTITUENT-CHARACTER? BOOLEAN) ...)

(CL:DEFUN SYMBOL-CONSTITUENT-CHARACTER? (CHARACTER)
  (CL:LET*
   ((TEST-VALUE-001
     (CL:AREF
      (CLSYS-SVAL VECTOR THE-ARRAY *CHARACTER-TYPE-TABLE*)
      (CHARACTER-CODE CHARACTER))))
   (CL:COND
    ((CL:OR
      (CL:EQ TEST-VALUE-001 KWD-SYMBOLS-LETTER)
      (CL:EQ TEST-VALUE-001 KWD-SYMBOLS-DIGIT)
      (CL:EQ TEST-VALUE-001 KWD-SYMBOLS-SYMBOL-CONSTITUENT))
     (CL:RETURN-FROM SYMBOL-CONSTITUENT-CHARACTER? TRUE))
    (CL:T (CL:RETURN-FROM SYMBOL-CONSTITUENT-CHARACTER? FALSE))))
  :VOID)

;;; (DEFUN PRINT-SYMBOL ...)

(CL:DEFUN PRINT-SYMBOL (SELF STREAM)
  (CL:IF
   (CL:AND (CL:EQ *PRINTREADABLY?* 1) (CL:EQ (SYMBOL-COMMON-LISP? SELF) 1))
   (CL:PROGN
    (CL:WRITE-STRING "CL:" STREAM)
    (CL:WRITE-STRING (CLSYS-SVAL SYMBOL SYMBOL-NAME SELF) STREAM))
   (CL:LET*
    ((MODULE
      (CL:IF
       (CL:EQ (CLSYS-SVAL SYMBOL HOME-CONTEXT SELF) NULL)
       *MODULE*
       (CLSYS-SVAL SYMBOL HOME-CONTEXT SELF)))
     (NAME
      (CL:IF
       (CL:EQ MODULE *MODULE*)
       (CLSYS-SVAL SYMBOL SYMBOL-NAME SELF)
       (VISIBLE-NAME SELF))))
    (CL:LET*
     ((TEST-VALUE-001 FALSE))
     (CL:SETQ TEST-VALUE-001 *PRINTREADABLY?*)
     (CL:WHEN
      (CL:EQ TEST-VALUE-001 1)
      (CL:IF
       (CL:AND
        (CL:NOT (CL:EQ MODULE *MODULE*))
        (CL:EQ (CLSYS-SVAL MODULE CASE-SENSITIVE? MODULE) 1))
       (CL:SETQ TEST-VALUE-001 TRUE)
       (CL:LET*
        ((FOUND?-001 FALSE))
        (CL:LET*
         ((CHAR NULL)
          (VECTOR-001 NAME)
          (INDEX-001 0)
          (LENGTH-001 (LENGTH VECTOR-001)))
         (CL:LOOP
          WHILE
          (CL:< INDEX-001 LENGTH-001)
          DO
          (CL:PROGN
           (CL:SETQ CHAR (CL:CHAR VECTOR-001 INDEX-001))
           (CL:SETQ INDEX-001 (CL:1+ INDEX-001)))
          (CL:WHEN
           (CL:EQ (SYMBOL-CONSTITUENT-CHARACTER? CHAR) 0)
           (CL:SETQ FOUND?-001 TRUE)
           (CL:RETURN))))
        (CL:SETQ TEST-VALUE-001 FOUND?-001))))
     (CL:IF
      (CL:EQ TEST-VALUE-001 1)
      (CL:PROGN
       (CL:WRITE-STRING "|" STREAM)
       (CL:WRITE-STRING NAME STREAM)
       (CL:WRITE-STRING "|" STREAM))
      (CL:WRITE-STRING NAME STREAM)))))
  :VOID)

;;; (DEFGLOBAL *INITIAL-SYMBOL-ARRAY-SIZE* ...)

(CL:DEFVAR *INITIAL-SYMBOL-ARRAY-SIZE* 100
  "Determines the default inital size of an
EXTENSIBLE-SYMBOL-ARRAY")

;;; (DEFCLASS SYMBOL-PROCESSING-ENVIRONMENT ...)

(CL:DEFCLASS SYMBOL-PROCESSING-ENVIRONMENT (STANDARD-OBJECT)
  ((NAME :ALLOCATION :INSTANCE :ACCESSOR NAME...OF)
   (SYMBOL-ARRAY :ALLOCATION :INSTANCE :ACCESSOR SYMBOL-ARRAY...OF)
   (SURROGATE-ARRAY :ALLOCATION :INSTANCE :ACCESSOR SURROGATE-ARRAY...OF)
   (KEYWORD-ARRAY :ALLOCATION :INSTANCE :ACCESSOR KEYWORD-ARRAY...OF)
   (KEYWORD-OFFSET-TABLE
    :ALLOCATION
    :INSTANCE
    :ACCESSOR
    KEYWORD-OFFSET-TABLE...OF)
   (INDEXICAL-ARRAY :ALLOCATION :INSTANCE :ACCESSOR INDEXICAL-ARRAY...OF)
   (CARDINAL-MODULES :ALLOCATION :INSTANCE :ACCESSOR CARDINAL-MODULES...OF)
   (CURRENT-CONTEXT :ALLOCATION :INSTANCE :ACCESSOR CURRENT-CONTEXT...OF))
  (:DOCUMENTATION
   "Contains symbol arrays and other environment pointers
sufficient to save the state of a Stella symbolic process."))

(CL:DEFUN NEW-SYMBOL-PROCESSING-ENVIRONMENT ()
  (CL:LET*
   ((SELF NULL))
   (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE SYMBOL-PROCESSING-ENVIRONMENT)))
   (CL:SETF
    (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT CURRENT-CONTEXT SELF)
    NULL)
   (CL:SETF
    (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT CARDINAL-MODULES SELF)
    (NEW-LIST))
   (CL:SETF
    (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT INDEXICAL-ARRAY SELF)
    NULL)
   (CL:SETF
    (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT KEYWORD-OFFSET-TABLE SELF)
    (NEW-STRING-TO-INTEGER-HASH-TABLE))
   (CL:SETF
    (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT KEYWORD-ARRAY SELF)
    NULL)
   (CL:SETF
    (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT SURROGATE-ARRAY SELF)
    NULL)
   (CL:SETF (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT SYMBOL-ARRAY SELF) NULL)
   (CL:SETF (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT NAME SELF) NULL)
   (INITIALIZE-SYMBOL-PROCESSING-ENVIRONMENT SELF)
   (CL:RETURN-FROM NEW-SYMBOL-PROCESSING-ENVIRONMENT SELF))
  :VOID)

(CL:DEFUN ACCESS-SYMBOL-PROCESSING-ENVIRONMENT-SLOT-VALUE (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-SYMBOLS-NAME)
    (CL:IF
     (CL:EQ SETVALUE? 1)
     (CL:SETF
      (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT NAME SELF)
      (CLSYS-SVAL STRING-WRAPPER WRAPPER-VALUE VALUE))
     (CL:RETURN-FROM
      ACCESS-SYMBOL-PROCESSING-ENVIRONMENT-SLOT-VALUE
      (WRAP-LITERAL (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT NAME SELF)))))
   ((CL:EQ SLOTNAME SYM-SYMBOLS-SYMBOL-ARRAY)
    (CL:IF
     (CL:EQ SETVALUE? 1)
     (CL:SETF
      (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT SYMBOL-ARRAY SELF)
      VALUE)
     (CL:RETURN-FROM
      ACCESS-SYMBOL-PROCESSING-ENVIRONMENT-SLOT-VALUE
      (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT SYMBOL-ARRAY SELF))))
   ((CL:EQ SLOTNAME SYM-SYMBOLS-SURROGATE-ARRAY)
    (CL:IF
     (CL:EQ SETVALUE? 1)
     (CL:SETF
      (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT SURROGATE-ARRAY SELF)
      VALUE)
     (CL:RETURN-FROM
      ACCESS-SYMBOL-PROCESSING-ENVIRONMENT-SLOT-VALUE
      (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT SURROGATE-ARRAY SELF))))
   ((CL:EQ SLOTNAME SYM-SYMBOLS-KEYWORD-ARRAY)
    (CL:IF
     (CL:EQ SETVALUE? 1)
     (CL:SETF
      (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT KEYWORD-ARRAY SELF)
      VALUE)
     (CL:RETURN-FROM
      ACCESS-SYMBOL-PROCESSING-ENVIRONMENT-SLOT-VALUE
      (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT KEYWORD-ARRAY SELF))))
   ((CL:EQ SLOTNAME SYM-SYMBOLS-KEYWORD-OFFSET-TABLE)
    (CL:IF
     (CL:EQ SETVALUE? 1)
     (CL:SETF
      (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT KEYWORD-OFFSET-TABLE SELF)
      VALUE)
     (CL:RETURN-FROM
      ACCESS-SYMBOL-PROCESSING-ENVIRONMENT-SLOT-VALUE
      (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT KEYWORD-OFFSET-TABLE SELF))))
   ((CL:EQ SLOTNAME SYM-SYMBOLS-INDEXICAL-ARRAY)
    (CL:IF
     (CL:EQ SETVALUE? 1)
     (CL:SETF
      (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT INDEXICAL-ARRAY SELF)
      VALUE)
     (CL:RETURN-FROM
      ACCESS-SYMBOL-PROCESSING-ENVIRONMENT-SLOT-VALUE
      (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT INDEXICAL-ARRAY SELF))))
   ((CL:EQ SLOTNAME SYM-SYMBOLS-CARDINAL-MODULES)
    (CL:IF
     (CL:EQ SETVALUE? 1)
     (CL:SETF
      (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT CARDINAL-MODULES SELF)
      VALUE)
     (CL:RETURN-FROM
      ACCESS-SYMBOL-PROCESSING-ENVIRONMENT-SLOT-VALUE
      (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT CARDINAL-MODULES SELF))))
   ((CL:EQ SLOTNAME SYM-SYMBOLS-CURRENT-CONTEXT)
    (CL:IF
     (CL:EQ SETVALUE? 1)
     (CL:SETF
      (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT CURRENT-CONTEXT SELF)
      VALUE)
     (CL:RETURN-FROM
      ACCESS-SYMBOL-PROCESSING-ENVIRONMENT-SLOT-VALUE
      (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT CURRENT-CONTEXT SELF))))
   (CL:T (CL:ERROR "`~A' is not a valid case option" SLOTNAME)))
  (CL:WHEN
   (CL:EQ SETVALUE? 1)
   (CL:RETURN-FROM ACCESS-SYMBOL-PROCESSING-ENVIRONMENT-SLOT-VALUE VALUE))
  :VOID)

(CL:DEFMETHOD PRIMARY-TYPE ((SELF SYMBOL-PROCESSING-ENVIRONMENT))
  (CL:RETURN-FROM PRIMARY-TYPE SGT-SYMBOLS-SYMBOL-PROCESSING-ENVIRONMENT)
  :VOID)

;;; (DEFUN INITIALIZE-SYMBOL-PROCESSING-ENVIRONMENT ...)

(CL:DEFUN INITIALIZE-SYMBOL-PROCESSING-ENVIRONMENT (SELF)
  (CL:SETF
   (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT SYMBOL-ARRAY SELF)
   (NEW-EXTENSIBLE-SYMBOL-ARRAY *INITIAL-SYMBOL-ARRAY-SIZE*))
  (CL:SETF
   (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT SURROGATE-ARRAY SELF)
   (NEW-EXTENSIBLE-SYMBOL-ARRAY *INITIAL-SYMBOL-ARRAY-SIZE*))
  (CL:SETF
   (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT KEYWORD-ARRAY SELF)
   (NEW-EXTENSIBLE-SYMBOL-ARRAY *INITIAL-SYMBOL-ARRAY-SIZE*))
  (CL:SETF
   (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT INDEXICAL-ARRAY SELF)
   (NEW-EXTENSIBLE-SYMBOL-ARRAY *INITIAL-SYMBOL-ARRAY-SIZE*))
  :VOID)

;;; (DEFGLOBAL *SYMBOL-PROCESSING-ENVIRONMENT* ...)

(CL:DEFVAR *SYMBOL-PROCESSING-ENVIRONMENT* NULL
  "Points to the current symbol processing environment.")

;;; (DEFUN SWITCH-TO-SYMBOL-PROCESSING-ENVIRONMENT ...)

(CL:DEFUN SWITCH-TO-SYMBOL-PROCESSING-ENVIRONMENT (ENV)
  (CL:SETF
   (CLSYS-SVAL
    SYMBOL-PROCESSING-ENVIRONMENT
    CURRENT-CONTEXT
    *SYMBOL-PROCESSING-ENVIRONMENT*)
   *CONTEXT*)
  (CL:SETQ
   *SYMBOL-ARRAY*
   (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT SYMBOL-ARRAY ENV))
  (CL:SETQ
   *SURROGATE-ARRAY*
   (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT SURROGATE-ARRAY ENV))
  (CL:SETQ
   *KEYWORD-ARRAY*
   (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT KEYWORD-ARRAY ENV))
  (CL:SETQ
   *KEYWORD-OFFSET-TABLE*
   (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT KEYWORD-OFFSET-TABLE ENV))
  (CL:SETQ
   *INDEXICAL-ARRAY*
   (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT INDEXICAL-ARRAY ENV))
  (CHANGE-CONTEXT
   (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT CURRENT-CONTEXT ENV))
  (CL:SETQ *SYMBOL-PROCESSING-ENVIRONMENT* ENV)
  :VOID)

;;; (DEFMETHOD FREE ...)

(CL:DEFMETHOD FREE ((TABLE EXTENSIBLE-SYMBOL-ARRAY))
  (CL:LET*
   ((ENTRY NULL))
   (CL:LET*
    ((I NULL)
     (ITER-001 0)
     (UPPER-BOUND-001
      (CLSYS-SVAL EXTENSIBLE-SYMBOL-ARRAY TOP-SYMBOL-OFFSET TABLE))
     (UNBOUNDED?-001 (NULL? UPPER-BOUND-001)))
    (CL:LOOP
     WHILE
     (CL:OR (CL:EQ UNBOUNDED?-001 1) (CL:<= ITER-001 UPPER-BOUND-001))
     DO
     (CL:PROGN (CL:SETQ I ITER-001) (CL:SETQ ITER-001 (CL:1+ ITER-001)))
     (CL:SETQ ENTRY (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY TABLE) I))
     (CL:WHEN (CL:NOT (CL:EQ ENTRY NULL)) (FREE ENTRY))))
   (UNMAKE TABLE))
  :VOID)

;;; (DEFMETHOD FREE ...)

(CL:DEFMETHOD FREE ((ENV SYMBOL-PROCESSING-ENVIRONMENT))
  (FREE (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT SYMBOL-ARRAY ENV))
  (FREE (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT SURROGATE-ARRAY ENV))
  (FREE (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT KEYWORD-ARRAY ENV))
  (FREE (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT KEYWORD-OFFSET-TABLE ENV))
  (FREE (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT INDEXICAL-ARRAY ENV))
  (UNMAKE ENV)
  :VOID)

;;; (DEFGLOBAL *STELLA-TRANSLATION-ENVIRONMENT* ...)

(CL:DEFVAR *STELLA-TRANSLATION-ENVIRONMENT* NULL
  "Points to the symbol processing environment
used to translate the Stella system.")

;;; (DEFUN (CREATE-STELLA-TRANSLATION-ENVIRONMENT SYMBOL-PROCESSING-ENVIRONMENT) ...)

(CL:DEFUN CREATE-STELLA-TRANSLATION-ENVIRONMENT ()
  (CL:LET*
   ((ENV (NEW-SYMBOL-PROCESSING-ENVIRONMENT)))
   (CL:SETF
    (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT NAME ENV)
    "Stella system translation environment")
   (CL:SETQ
    *ALTERNATE-STELLA-MODULE*
    (DEFINE-MODULE "/ALTERNATE-STELLA" (UNSTRINGIFY "(:uses ())")))
   (INSERT
    (CLSYS-SVAL SYMBOL-PROCESSING-ENVIRONMENT CARDINAL-MODULES ENV)
    *ALTERNATE-STELLA-MODULE*)
   (CL:SETQ *STELLA-TRANSLATION-ENVIRONMENT* ENV)
   (CL:RETURN-FROM CREATE-STELLA-TRANSLATION-ENVIRONMENT ENV))
  :VOID)

;;; (DEFUN DESTROY-STELLA-TRANSLATION-ENVIRONMENT ...)

(CL:DEFUN DESTROY-STELLA-TRANSLATION-ENVIRONMENT ()
  (DESTROY-MODULE
   (FIRST
    (CLSYS-SVAL
     SYMBOL-PROCESSING-ENVIRONMENT
     CARDINAL-MODULES
     *STELLA-TRANSLATION-ENVIRONMENT*)))
  (FREE *STELLA-TRANSLATION-ENVIRONMENT*)
  :VOID)

(CL:DEFUN STARTUP-SYMBOLS ()
  (CL:WHEN
   (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 0) 1)
   (CL:WHEN
    (CL:EQ *FIXED-SYMBOL-ARRAY* NULL)
    (INITIALIZE-SYMBOLS-AND-MODULES))
   (INITIALIZE-PARSING-TABLES))
  (CL:LET*
   ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 2) 1)
    (CL:SETQ
     SYM-SYMBOLS-*SYMBOL-ARRAY*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "*SYMBOL-ARRAY*" NULL 0))
    (CL:SETQ
     SYM-SYMBOLS-*SURROGATE-ARRAY*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "*SURROGATE-ARRAY*" NULL 0))
    (CL:SETQ
     SYM-SYMBOLS-*KEYWORD-ARRAY*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "*KEYWORD-ARRAY*" NULL 0))
    (CL:SETQ
     SYM-SYMBOLS-*INDEXICAL-ARRAY*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "*INDEXICAL-ARRAY*" NULL 0))
    (CL:SETQ
     SYM-SYMBOLS-*KEYWORD-OFFSET-TABLE*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "*KEYWORD-OFFSET-TABLE*" NULL 0))
    (CL:SETQ
     SYM-SYMBOLS-*FIXED-SYMBOL-ARRAY*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "*FIXED-SYMBOL-ARRAY*" NULL 0))
    (CL:SETQ
     SYM-SYMBOLS-*FIXED-SURROGATE-ARRAY*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "*FIXED-SURROGATE-ARRAY*" NULL 0))
    (CL:SETQ
     SYM-SYMBOLS-*FIXED-KEYWORD-ARRAY*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "*FIXED-KEYWORD-ARRAY*" NULL 0))
    (CL:SETQ
     SYM-SYMBOLS-*FIXED-INDEXICAL-ARRAY*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "*FIXED-INDEXICAL-ARRAY*" NULL 0))
    (CL:SETQ
     SYM-SYMBOLS-*CONTEXT*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "*CONTEXT*" NULL 0))
    (CL:SETQ
     SYM-SYMBOLS-*MODULE*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "*MODULE*" NULL 0))
    (CL:SETQ
     KWD-SYMBOLS-OTHER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "OTHER" NULL 2))
    (CL:SETQ
     KWD-SYMBOLS-DIGIT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DIGIT" NULL 2))
    (CL:SETQ
     KWD-SYMBOLS-LETTER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "LETTER" NULL 2))
    (CL:SETQ
     KWD-SYMBOLS-SYMBOL-CONSTITUENT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SYMBOL-CONSTITUENT" NULL 2))
    (CL:SETQ
     KWD-SYMBOLS-SYMBOL-QUALIFIER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SYMBOL-QUALIFIER" NULL 2))
    (CL:SETQ
     KWD-SYMBOLS-ESCAPE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "ESCAPE" NULL 2))
    (CL:SETQ
     KWD-SYMBOLS-OPEN-DELIMITER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "OPEN-DELIMITER" NULL 2))
    (CL:SETQ
     KWD-SYMBOLS-CLOSE-DELIMITER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CLOSE-DELIMITER" NULL 2))
    (CL:SETQ
     KWD-SYMBOLS-PAIRED-DELIMITER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PAIRED-DELIMITER" NULL 2))
    (CL:SETQ
     KWD-SYMBOLS-WHITE-SPACE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WHITE-SPACE" NULL 2))
    (CL:SETQ SYM-SYMBOLS-NAME (INTERN-RIGID-SYMBOL-WRT-MODULE "NAME" NULL 0))
    (CL:SETQ
     SYM-SYMBOLS-SYMBOL-ARRAY
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SYMBOL-ARRAY" NULL 0))
    (CL:SETQ
     SYM-SYMBOLS-SURROGATE-ARRAY
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SURROGATE-ARRAY" NULL 0))
    (CL:SETQ
     SYM-SYMBOLS-KEYWORD-ARRAY
     (INTERN-RIGID-SYMBOL-WRT-MODULE "KEYWORD-ARRAY" NULL 0))
    (CL:SETQ
     SYM-SYMBOLS-KEYWORD-OFFSET-TABLE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "KEYWORD-OFFSET-TABLE" NULL 0))
    (CL:SETQ
     SYM-SYMBOLS-INDEXICAL-ARRAY
     (INTERN-RIGID-SYMBOL-WRT-MODULE "INDEXICAL-ARRAY" NULL 0))
    (CL:SETQ
     SYM-SYMBOLS-CARDINAL-MODULES
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CARDINAL-MODULES" NULL 0))
    (CL:SETQ
     SYM-SYMBOLS-CURRENT-CONTEXT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CURRENT-CONTEXT" NULL 0))
    (CL:SETQ
     SGT-SYMBOLS-SYMBOL-PROCESSING-ENVIRONMENT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SYMBOL-PROCESSING-ENVIRONMENT" NULL 1)))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 4) 1)
    (CL:SETQ *CHARACTER-TYPE-TABLE* (CREATE-CHARACTER-TYPE-TABLE)))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 5) 1)
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE
        "SYMBOL-PROCESSING-ENVIRONMENT"
        "(DEFCLASS SYMBOL-PROCESSING-ENVIRONMENT (STANDARD-OBJECT) :DOCUMENTATION \"Contains symbol arrays and other environment pointers
sufficient to save the state of a Stella symbolic process.\" :SLOTS ((NAME :TYPE STRING) (SYMBOL-ARRAY :TYPE (EXTENSIBLE-SYMBOL-ARRAY OF SYMBOL)) (SURROGATE-ARRAY :TYPE (EXTENSIBLE-SYMBOL-ARRAY OF SURROGATE)) (KEYWORD-ARRAY :TYPE (EXTENSIBLE-SYMBOL-ARRAY OF KEYWORD)) (KEYWORD-OFFSET-TABLE :TYPE STRING-TO-INTEGER-HASH-TABLE :ALLOCATION :EMBEDDED) (INDEXICAL-ARRAY :TYPE (EXTENSIBLE-SYMBOL-ARRAY OF INDEXICAL)) (CARDINAL-MODULES :TYPE (LIST OF MODULE) :ALLOCATION :EMBEDDED) (CURRENT-CONTEXT :TYPE CONTEXT)) :INITIALIZER INITIALIZE-SYMBOL-PROCESSING-ENVIRONMENT)")))
     (CL:SETF
      (CLSYS-SVAL CLASS CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-SYMBOL-PROCESSING-ENVIRONMENT))
     (CL:SETF
      (CLSYS-SVAL CLASS CLASS-SLOT-ACCESSOR-CODE CLASS)
      (CL:FUNCTION ACCESS-SYMBOL-PROCESSING-ENVIRONMENT-SLOT-VALUE))))
   (CL:WHEN (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 6) 1) (FINALIZE-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 7) 1)
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "NEXT-FREE-OFFSET"
        "EXTENSIBLE-SYMBOL-ARRAY"
        "(DEFUN (NEXT-FREE-OFFSET INTEGER) ((SELF EXTENSIBLE-SYMBOL-ARRAY)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION NEXT-FREE-OFFSET)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "FREE-SYMBOL-OFFSET"
        "EXTENSIBLE-SYMBOL-ARRAY"
        "(DEFUN FREE-SYMBOL-OFFSET ((SELF EXTENSIBLE-SYMBOL-ARRAY) (OFFSET INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION FREE-SYMBOL-OFFSET)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "ADD-TO-SYMBOL-ARRAY-AT"
        "EXTENSIBLE-SYMBOL-ARRAY"
        "(DEFUN ADD-TO-SYMBOL-ARRAY-AT ((ARRAY EXTENSIBLE-SYMBOL-ARRAY) (OFFSET INTEGER) (SYMBOL GENERALIZED-SYMBOL)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION ADD-TO-SYMBOL-ARRAY-AT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "ADD-TO-SYMBOL-ARRAY"
        "EXTENSIBLE-SYMBOL-ARRAY"
        "(DEFUN (ADD-TO-SYMBOL-ARRAY INTEGER) ((ARRAY EXTENSIBLE-SYMBOL-ARRAY) (SYMBOL GENERALIZED-SYMBOL)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION ADD-TO-SYMBOL-ARRAY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "LEGAL-SYMBOL-ARRAY-OFFSET?"
        "EXTENSIBLE-SYMBOL-ARRAY"
        "(DEFUN (LEGAL-SYMBOL-ARRAY-OFFSET? BOOLEAN) ((ARRAY EXTENSIBLE-SYMBOL-ARRAY) (OFFSET INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION LEGAL-SYMBOL-ARRAY-OFFSET?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "GET-SYM"
        "INTEGER"
        "(DEFUN (GET-SYM SYMBOL) ((OFFSET INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION GET-SYM)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "GET-SGT"
        "INTEGER"
        "(DEFUN (GET-SGT SURROGATE) ((OFFSET INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION GET-SGT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "GET-KWD"
        "INTEGER"
        "(DEFUN (GET-KWD KEYWORD) ((OFFSET INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION GET-KWD)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "GET-IDX"
        "INTEGER"
        "(DEFUN (GET-IDX INDEXICAL) ((OFFSET INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION GET-IDX)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "GET-GENERALIZED-SYMBOL-FROM-OFFSET"
        "EXTENSIBLE-SYMBOL-ARRAY"
        "(DEFUN (GET-GENERALIZED-SYMBOL-FROM-OFFSET GENERALIZED-SYMBOL) ((SYMBOLARRAY EXTENSIBLE-SYMBOL-ARRAY) (OFFSET INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION GET-GENERALIZED-SYMBOL-FROM-OFFSET)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "GET-SYM-FROM-OFFSET"
        "INTEGER"
        "(DEFUN (GET-SYM-FROM-OFFSET SYMBOL) ((OFFSET INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION GET-SYM-FROM-OFFSET)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "GET-SGT-FROM-OFFSET"
        "INTEGER"
        "(DEFUN (GET-SGT-FROM-OFFSET SURROGATE) ((OFFSET INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION GET-SGT-FROM-OFFSET)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "GET-KWD-FROM-OFFSET"
        "INTEGER"
        "(DEFUN (GET-KWD-FROM-OFFSET KEYWORD) ((OFFSET INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION GET-KWD-FROM-OFFSET)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "GET-IDX-FROM-OFFSET"
        "INTEGER"
        "(DEFUN (GET-IDX-FROM-OFFSET INDEXICAL) ((OFFSET INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION GET-IDX-FROM-OFFSET)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SELECT-SYMBOL-OFFSET-TABLE"
        "MODULE"
        "(DEFUN (SELECT-SYMBOL-OFFSET-TABLE STRING-TO-INTEGER-HASH-TABLE) ((MODULE MODULE) (KINDOFSYM INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SELECT-SYMBOL-OFFSET-TABLE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SELECT-SYMBOL-ARRAY"
        "INTEGER"
        "(DEFUN (SELECT-SYMBOL-ARRAY EXTENSIBLE-SYMBOL-ARRAY) ((KINDOFSYM INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SELECT-SYMBOL-ARRAY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "LOOKUP-RIGID-SYMBOL-LOCALLY"
        "STRING"
        "(DEFUN (LOOKUP-RIGID-SYMBOL-LOCALLY GENERALIZED-SYMBOL) ((NAME STRING) (MODULE MODULE) (KINDOFSYM INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION LOOKUP-RIGID-SYMBOL-LOCALLY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-VISIBLE-RIGID-SYMBOLS-WRT-MODULE"
        "STRING"
        "(DEFUN (YIELD-VISIBLE-RIGID-SYMBOLS-WRT-MODULE (CONS OF GENERALIZED-SYMBOL)) ((NAME STRING) (MODULE MODULE) (KINDOFSYM INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-VISIBLE-RIGID-SYMBOLS-WRT-MODULE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "VISIBLE-RIGID-SYMBOLS-WRT-MODULE"
        "STRING"
        "(DEFUN (VISIBLE-RIGID-SYMBOLS-WRT-MODULE (ITERATOR OF GENERALIZED-SYMBOL)) ((NAME STRING) (MODULE MODULE) (KINDOFSYM INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION VISIBLE-RIGID-SYMBOLS-WRT-MODULE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "LOOKUP-RIGID-SYMBOL-OFFSET-WRT-MODULE"
        "STRING"
        "(DEFUN (LOOKUP-RIGID-SYMBOL-OFFSET-WRT-MODULE INTEGER) ((NAME STRING) (MODULE MODULE) (KINDOFSYM INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION LOOKUP-RIGID-SYMBOL-OFFSET-WRT-MODULE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "LOOKUP-RIGID-SYMBOL-WRT-MODULE"
        "STRING"
        "(DEFUN (LOOKUP-RIGID-SYMBOL-WRT-MODULE GENERALIZED-SYMBOL) ((NAME STRING) (MODULE MODULE) (KINDOFSYM INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION LOOKUP-RIGID-SYMBOL-WRT-MODULE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "LOOKUP-RIGID-SYMBOL"
        "STRING"
        "(DEFUN (LOOKUP-RIGID-SYMBOL GENERALIZED-SYMBOL) ((NAME STRING) (KINDOFSYM INTEGER)) :DOCUMENTATION \"Return the symbol named 'name'.  Case sensitive.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION LOOKUP-RIGID-SYMBOL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "LOOKUP-INDEXICAL-SYMBOL-OFFSET-WRT-MODULE"
        "STRING"
        "(DEFUN (LOOKUP-INDEXICAL-SYMBOL-OFFSET-WRT-MODULE INTEGER) ((NAME STRING) (MODULE MODULE) (KINDOFSYM INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION LOOKUP-INDEXICAL-SYMBOL-OFFSET-WRT-MODULE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "LOOKUP-INDEXICAL-SYMBOL-WRT-MODULE"
        "STRING"
        "(DEFUN (LOOKUP-INDEXICAL-SYMBOL-WRT-MODULE GENERALIZED-SYMBOL) ((NAME STRING) (MODULE MODULE) (KINDOFSYM INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION LOOKUP-INDEXICAL-SYMBOL-WRT-MODULE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "LOOKUP-INDEXICAL-SYMBOL"
        "STRING"
        "(DEFUN (LOOKUP-INDEXICAL-SYMBOL GENERALIZED-SYMBOL) ((NAME STRING) (KINDOFSYM INTEGER)) :DOCUMENTATION \"Return the indexical named 'name'.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION LOOKUP-INDEXICAL-SYMBOL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "LOOKUP-SYMBOL"
        "STRING"
        "(DEFUN (LOOKUP-SYMBOL SYMBOL) ((NAME STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION LOOKUP-SYMBOL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "LOOKUP-SYMBOL-IN-MODULE"
        "STRING"
        "(DEFUN (LOOKUP-SYMBOL-IN-MODULE SYMBOL) ((NAME STRING) (MODULE MODULE) (LOCAL? BOOLEAN)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION LOOKUP-SYMBOL-IN-MODULE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "LOOKUP-SURROGATE"
        "STRING"
        "(DEFUN (LOOKUP-SURROGATE SURROGATE) ((NAME STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION LOOKUP-SURROGATE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "LOOKUP-SURROGATE-IN-MODULE"
        "STRING"
        "(DEFUN (LOOKUP-SURROGATE-IN-MODULE SURROGATE) ((NAME STRING) (MODULE MODULE) (LOCAL? BOOLEAN)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION LOOKUP-SURROGATE-IN-MODULE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "LOOKUP-KEYWORD"
        "STRING"
        "(DEFUN (LOOKUP-KEYWORD KEYWORD) ((NAME STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION LOOKUP-KEYWORD)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "LOOKUP-INDEXICAL"
        "STRING"
        "(DEFUN (LOOKUP-INDEXICAL INDEXICAL) ((NAME STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION LOOKUP-INDEXICAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "HELP-INTERN-GENERALIZED-SYMBOL"
        "STRING"
        "(DEFUN (HELP-INTERN-GENERALIZED-SYMBOL GENERALIZED-SYMBOL) ((NAME STRING) (KINDOFSYM INTEGER) (ARRAY EXTENSIBLE-SYMBOL-ARRAY) (OFFSET INTEGER) (MODULE MODULE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION HELP-INTERN-GENERALIZED-SYMBOL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INTERN-RIGID-SYMBOL-WRT-MODULE"
        "STRING"
        "(DEFUN (INTERN-RIGID-SYMBOL-WRT-MODULE GENERALIZED-SYMBOL) ((NAME STRING) (MODULE MODULE) (KINDOFSYM INTEGER)) :DOCUMENTATION \"Return a newly-created or existing rigid symbol with
name 'name'.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INTERN-RIGID-SYMBOL-WRT-MODULE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INTERN-RIGID-SYMBOL-LOCALLY"
        "STRING"
        "(DEFUN (INTERN-RIGID-SYMBOL-LOCALLY GENERALIZED-SYMBOL) ((NAME STRING) (MODULE MODULE) (KINDOFSYM INTEGER)) :DOCUMENTATION \"Return a newly-created or existing rigid symbol
interned into the module 'module' with name 'name'.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INTERN-RIGID-SYMBOL-LOCALLY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INTERN-INDEXICAL-SYMBOL-WRT-MODULE"
        "STRING"
        "(DEFUN (INTERN-INDEXICAL-SYMBOL-WRT-MODULE GENERALIZED-SYMBOL) ((NAME STRING) (MODULE MODULE) (KINDOFSYM INTEGER)) :DOCUMENTATION \"Return a newly-created or existing indexical with
name 'name'.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INTERN-INDEXICAL-SYMBOL-WRT-MODULE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INTERN-RIGID-SYMBOL-CASE-SENSITIVELY"
        "STRING"
        "(DEFUN (INTERN-RIGID-SYMBOL-CASE-SENSITIVELY GENERALIZED-SYMBOL) ((NAME STRING) (KINDOFSYM INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INTERN-RIGID-SYMBOL-CASE-SENSITIVELY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INTERN-PERMANENT-SYMBOL"
        "STRING"
        "(DEFUN (INTERN-PERMANENT-SYMBOL SYMBOL) ((NAME STRING)) :DOCUMENTATION \"Return a newly-created or existing permanent symbol with
name 'name'.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INTERN-PERMANENT-SYMBOL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INTERN-SYMBOL"
        "STRING"
        "(DEFUN (INTERN-SYMBOL SYMBOL) ((NAME STRING)) :DOCUMENTATION \"Return a newly-created or existing symbol with name
'name'.  Storage note: a COPY of 'name' is stored in the symbol.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INTERN-SYMBOL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INTERN-DERIVED-SYMBOL"
        "GENERALIZED-SYMBOL"
        "(DEFUN (INTERN-DERIVED-SYMBOL SYMBOL) ((BASESYMBOL GENERALIZED-SYMBOL) (NEWNAME STRING)) :DOCUMENTATION \"Return a newly-created or existing symbol with name
'newName' which is interned in the same module as 'baseSymbol'.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INTERN-DERIVED-SYMBOL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INTERN-SURROGATE"
        "STRING"
        "(DEFUN (INTERN-SURROGATE SURROGATE) ((NAME STRING)) :DOCUMENTATION \"Return a newly-created or existing surrogate with
name 'name'.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INTERN-SURROGATE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INTERN-INDEXICAL"
        "STRING"
        "(DEFUN (INTERN-INDEXICAL INDEXICAL) ((NAME STRING)) :DOCUMENTATION \"Return a newly-created or existing indexical with
name 'name', interned in '(cardinal-module *module*)'.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INTERN-INDEXICAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INTERN-PERMANENT-KEYWORD"
        "STRING"
        "(DEFUN (INTERN-PERMANENT-KEYWORD KEYWORD) ((NAME STRING)) :DOCUMENTATION \"Return a newly-created or existing permanent keyword with
name 'name'.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INTERN-PERMANENT-KEYWORD)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INTERN-KEYWORD"
        "STRING"
        "(DEFUN (INTERN-KEYWORD KEYWORD) ((NAME STRING)) :DOCUMENTATION \"Return a newly-created or existing keyword with name
'name'.  Storage note: a COPY of 'name' is stored in the keyword\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INTERN-KEYWORD)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "UNINTERN-SYMBOL"
        "SYMBOL"
        "(DEFUN UNINTERN-SYMBOL ((SELF SYMBOL)) :DOCUMENTATION \"Remove `self' from its home module and the symbol table.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION UNINTERN-SYMBOL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "UNINTERN-SURROGATE"
        "SURROGATE"
        "(DEFUN UNINTERN-SURROGATE ((SELF SURROGATE)) :DOCUMENTATION \"Remove `self' from its home module and the surrogate table.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION UNINTERN-SURROGATE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INTERN-BOOTSTRAP-SYMBOL-AT"
        "STRING"
        "(DEFUN (INTERN-BOOTSTRAP-SYMBOL-AT GENERALIZED-SYMBOL) ((NAME STRING) (OFFSET INTEGER) (KINDOFSYM INTEGER)) :DOCUMENTATION \"Interns a symbol, or keyword with
name' and symbol-id 'offset'.
If a symbol with that ID already existed, an error is signaled.  This
function is used to recreate the symbol table in a way where symbol IDs
which got hardwired into translated code will refer to the correct objects.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INTERN-BOOTSTRAP-SYMBOL-AT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INTERN-SYMBOL-AT"
        "STRING"
        "(DEFUN (INTERN-SYMBOL-AT SYMBOL) ((NAME STRING) (OFFSET INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INTERN-SYMBOL-AT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INTERN-SURROGATE-AT"
        "STRING"
        "(DEFUN (INTERN-SURROGATE-AT SURROGATE) ((NAME STRING) (OFFSET INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INTERN-SURROGATE-AT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INTERN-KEYWORD-AT"
        "STRING"
        "(DEFUN (INTERN-KEYWORD-AT KEYWORD) ((NAME STRING) (OFFSET INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INTERN-KEYWORD-AT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INTERN-INDEXICAL-AT"
        "STRING"
        "(DEFUN (INTERN-INDEXICAL-AT INDEXICAL) ((NAME STRING) (OFFSET INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INTERN-INDEXICAL-AT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INITIALIZE-KERNEL-MODULE"
        "MODULE"
        "(DEFUN INITIALIZE-KERNEL-MODULE ((MODULE MODULE) (NAME STRING) (FULLNAME STRING) (PARENT MODULE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INITIALIZE-KERNEL-MODULE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INITIALIZE-MODULES"
        NULL
        "(DEFUN INITIALIZE-MODULES ())")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INITIALIZE-MODULES)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INITIALIZE-SYMBOLS-AND-MODULES"
        NULL
        "(DEFUN INITIALIZE-SYMBOLS-AND-MODULES ())")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INITIALIZE-SYMBOLS-AND-MODULES)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "LOOKUP-TRANSIENT-SYMBOL"
        "STRING"
        "(DEFUN (LOOKUP-TRANSIENT-SYMBOL SYMBOL) ((NAME STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION LOOKUP-TRANSIENT-SYMBOL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "LOOKUP-TRANSIENT-KEYWORD"
        "STRING"
        "(DEFUN (LOOKUP-TRANSIENT-KEYWORD KEYWORD) ((NAME STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION LOOKUP-TRANSIENT-KEYWORD)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INTERN-TRANSIENT-SYMBOL"
        "STRING"
        "(DEFUN (INTERN-TRANSIENT-SYMBOL SYMBOL) ((NAME STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INTERN-TRANSIENT-SYMBOL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INTERN-TRANSIENT-KEYWORD"
        "STRING"
        "(DEFUN (INTERN-TRANSIENT-KEYWORD KEYWORD) ((NAME STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INTERN-TRANSIENT-KEYWORD)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "FREE-TRANSIENT-SYMBOLS"
        NULL
        "(DEFUN FREE-TRANSIENT-SYMBOLS ())")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION FREE-TRANSIENT-SYMBOLS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "FREE-TRANSIENT-KEYWORDS"
        NULL
        "(DEFUN FREE-TRANSIENT-KEYWORDS ())")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION FREE-TRANSIENT-KEYWORDS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INTERN-COMMON-LISP-SYMBOL"
        "STRING"
        "(DEFUN (INTERN-COMMON-LISP-SYMBOL SYMBOL) ((NAME STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INTERN-COMMON-LISP-SYMBOL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SYMBOL-COMMON-LISP?"
        "SYMBOL"
        "(DEFUN (SYMBOL-COMMON-LISP? BOOLEAN) ((SELF SYMBOL)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SYMBOL-COMMON-LISP?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "COMMON-LISP-SYMBOL?"
        "OBJECT"
        "(DEFUN (COMMON-LISP-SYMBOL? BOOLEAN) ((SELF OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION COMMON-LISP-SYMBOL?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INITIALIZE-PARSING-TABLES"
        NULL
        "(DEFUN INITIALIZE-PARSING-TABLES () :DOCUMENTATION \"Create indices for recording transient symbols and
Common Lisp symbols while parsing.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INITIALIZE-PARSING-TABLES)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-GENSYM-NAME"
        "STRING"
        "(DEFUN (YIELD-GENSYM-NAME STRING) ((PREFIX STRING) (COUNTER INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-GENSYM-NAME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "GENSYM"
        "STRING"
        "(DEFUN (GENSYM SYMBOL) ((PREFIX STRING)) :DOCUMENTATION \"Return a transient symbol with a name beginning with
'prefix' and ending with a globally gensym'd integer.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION GENSYM)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SURROGATIFY"
        "SURROGATE"
        "(DEFMETHOD (SURROGATIFY SURROGATE) ((SELF SURROGATE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION SURROGATIFY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SURROGATIFY"
        "SYMBOL"
        "(DEFMETHOD (SURROGATIFY SURROGATE) ((SELF SYMBOL)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION SURROGATIFY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SURROGATIFY"
        "STRING"
        "(DEFMETHOD (SURROGATIFY SURROGATE) ((SELF STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION SURROGATIFY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SURROGATIFY"
        "CONS"
        "(DEFMETHOD (SURROGATIFY SURROGATE) ((SELF CONS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION SURROGATIFY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SURROGATIFY"
        "OBJECT"
        "(DEFMETHOD (SURROGATIFY SURROGATE) ((SELF OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION SURROGATIFY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "TYPIFY"
        "OBJECT"
        "(DEFUN (TYPIFY TYPE) ((SELF OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION TYPIFY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "KEYWORDIFY"
        "KEYWORD"
        "(DEFMETHOD (KEYWORDIFY KEYWORD) ((SELF KEYWORD)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION KEYWORDIFY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "KEYWORDIFY"
        "TRANSIENT-KEYWORD"
        "(DEFMETHOD (KEYWORDIFY KEYWORD) ((SELF TRANSIENT-KEYWORD)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION KEYWORDIFY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "KEYWORDIFY"
        "SYMBOL"
        "(DEFMETHOD (KEYWORDIFY KEYWORD) ((SELF SYMBOL)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION KEYWORDIFY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "KEYWORDIFY"
        "STRING"
        "(DEFMETHOD (KEYWORDIFY KEYWORD) ((SELF STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION KEYWORDIFY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "IN-PLACE-OBJECTS-TO-SYMBOLS"
        "CONS"
        "(DEFUN IN-PLACE-OBJECTS-TO-SYMBOLS ((CONSLIST CONS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION IN-PLACE-OBJECTS-TO-SYMBOLS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "IN-PLACE-OBJECTS-TO-TYPES"
        "CONS"
        "(DEFUN IN-PLACE-OBJECTS-TO-TYPES ((CONSLIST CONS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION IN-PLACE-OBJECTS-TO-TYPES)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SURROGATE-NAME?"
        "STRING"
        "(DEFUN (SURROGATE-NAME? BOOLEAN) ((NAME STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SURROGATE-NAME?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "QUALIFIED-NAME?"
        "STRING"
        "(DEFUN (QUALIFIED-NAME? BOOLEAN) ((NAME STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION QUALIFIED-NAME?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "KEYWORD-NAME?"
        "STRING"
        "(DEFUN (KEYWORD-NAME? BOOLEAN) ((NAME STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION KEYWORD-NAME?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INTERN-GENERALIZED-SYMBOL"
        "STRING"
        "(DEFUN (INTERN-GENERALIZED-SYMBOL GENERALIZED-SYMBOL) ((NAME STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INTERN-GENERALIZED-SYMBOL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "COMPUTE-FULL-NAME"
        "STRING"
        "(DEFUN (COMPUTE-FULL-NAME STRING) ((NAME STRING) (MODULE MODULE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION COMPUTE-FULL-NAME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "LOCAL-PRINT-NAME"
        "GENERALIZED-SYMBOL"
        "(DEFMETHOD (LOCAL-PRINT-NAME STRING) ((SELF GENERALIZED-SYMBOL)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION LOCAL-PRINT-NAME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "LOCAL-PRINT-NAME"
        "SURROGATE"
        "(DEFMETHOD (LOCAL-PRINT-NAME STRING) ((SELF SURROGATE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION LOCAL-PRINT-NAME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "RELATIVE-NAME"
        "GENERALIZED-SYMBOL"
        "(DEFMETHOD (RELATIVE-NAME STRING) ((SELF GENERALIZED-SYMBOL)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION RELATIVE-NAME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "VISIBLE-NAME"
        "GENERALIZED-SYMBOL"
        "(DEFMETHOD (VISIBLE-NAME STRING) ((SELF GENERALIZED-SYMBOL)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION VISIBLE-NAME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "ESCAPED-CHARACTER?"
        "STRING"
        "(DEFUN (ESCAPED-CHARACTER? BOOLEAN) ((STRING STRING) (POSITION INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION ESCAPED-CHARACTER?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "UNESCAPE-CHARACTER"
        "STRING"
        "(DEFUN (UNESCAPE-CHARACTER STRING) ((STRING STRING) (CHARACTER CHARACTER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION UNESCAPE-CHARACTER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SYMBOL-VALUE"
        "SYMBOL"
        "(DEFUN (SYMBOL-VALUE OBJECT) ((SYMBOL SYMBOL)) :DOCUMENTATION \"Return the value of 'symbol'.  Note, that this value is not
visible to code that references a variable with the same name as 'symbol'.
The 'symbol-value' is simply a special property that can always be accessed
in constant time.  The 'symbol-value' of a symbol can be changed with 'setf'.\" :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE)")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SYMBOL-VALUE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SYMBOL-VALUE-SETTER"
        "SYMBOL"
        "(DEFUN (SYMBOL-VALUE-SETTER OBJECT) ((SYMBOL SYMBOL) (VALUE OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SYMBOL-VALUE-SETTER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SYMBOL-PLIST"
        "SYMBOL"
        "(DEFUN (SYMBOL-PLIST CONS) ((SYMBOL SYMBOL)) :DOCUMENTATION \"Return the property list of 'symbol'.  The 'symbol-plist'
of a symbol can be set with 'setf'.  IMPORTANT: Property list are modified 
destructively, hence, if you supply it as a whole make sure to always supply
a modfiable copy, e.g., by using 'bquote'.\" :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE)")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SYMBOL-PLIST)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SYMBOL-PLIST-SETTER"
        "SYMBOL"
        "(DEFUN (SYMBOL-PLIST-SETTER CONS) ((SYMBOL SYMBOL) (PLIST CONS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SYMBOL-PLIST-SETTER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SYMBOL-PROPERTY"
        "SYMBOL"
        "(DEFUN (SYMBOL-PROPERTY OBJECT) ((SYMBOL SYMBOL) (KEY STANDARD-OBJECT)) :DOCUMENTATION \"Return the property of 'symbol' whose key is 'eq?' to 'key'.
Symbol properties can be set with 'setf'.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SYMBOL-PROPERTY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SYMBOL-PROPERTY-SETTER"
        "SYMBOL"
        "(DEFUN (SYMBOL-PROPERTY-SETTER OBJECT) ((SYMBOL SYMBOL) (VALUE OBJECT) (KEY STANDARD-OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SYMBOL-PROPERTY-SETTER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CREATE-CHARACTER-TYPE-TABLE"
        NULL
        "(DEFUN (CREATE-CHARACTER-TYPE-TABLE (VECTOR OF KEYWORD)) ())")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CREATE-CHARACTER-TYPE-TABLE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SYMBOL-CONSTITUENT-CHARACTER?"
        "CHARACTER"
        "(DEFUN (SYMBOL-CONSTITUENT-CHARACTER? BOOLEAN) ((CHARACTER CHARACTER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SYMBOL-CONSTITUENT-CHARACTER?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PRINT-SYMBOL"
        "SYMBOL"
        "(DEFUN PRINT-SYMBOL ((SELF SYMBOL) (STREAM NATIVE-OUTPUT-STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION PRINT-SYMBOL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INITIALIZE-SYMBOL-PROCESSING-ENVIRONMENT"
        "SYMBOL-PROCESSING-ENVIRONMENT"
        "(DEFUN INITIALIZE-SYMBOL-PROCESSING-ENVIRONMENT ((SELF SYMBOL-PROCESSING-ENVIRONMENT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INITIALIZE-SYMBOL-PROCESSING-ENVIRONMENT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SWITCH-TO-SYMBOL-PROCESSING-ENVIRONMENT"
        "SYMBOL-PROCESSING-ENVIRONMENT"
        "(DEFUN SWITCH-TO-SYMBOL-PROCESSING-ENVIRONMENT ((ENV SYMBOL-PROCESSING-ENVIRONMENT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SWITCH-TO-SYMBOL-PROCESSING-ENVIRONMENT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "FREE"
        "EXTENSIBLE-SYMBOL-ARRAY"
        "(DEFMETHOD FREE ((TABLE EXTENSIBLE-SYMBOL-ARRAY)))")))
     (CL:SETF (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD) (CL:FUNCTION FREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "FREE"
        "SYMBOL-PROCESSING-ENVIRONMENT"
        "(DEFMETHOD FREE ((ENV SYMBOL-PROCESSING-ENVIRONMENT)))")))
     (CL:SETF (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD) (CL:FUNCTION FREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CREATE-STELLA-TRANSLATION-ENVIRONMENT"
        NULL
        "(DEFUN (CREATE-STELLA-TRANSLATION-ENVIRONMENT SYMBOL-PROCESSING-ENVIRONMENT) ())")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CREATE-STELLA-TRANSLATION-ENVIRONMENT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DESTROY-STELLA-TRANSLATION-ENVIRONMENT"
        NULL
        "(DEFUN DESTROY-STELLA-TRANSLATION-ENVIRONMENT ())")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION DESTROY-STELLA-TRANSLATION-ENVIRONMENT)))
    (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
     "STARTUP-SYMBOLS"
     NULL
     "(DEFUN STARTUP-SYMBOLS ())"))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 8) 1)
    (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 9) 1)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *SYMBOL-ARRAY* (EXTENSIBLE-SYMBOL-ARRAY OF SYMBOL) NULL)")
    (CL:LET*
     ((GLOBAL (LOOKUP-GLOBAL-VARIABLE SYM-SYMBOLS-*SYMBOL-ARRAY*)))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-GET-VALUE-CODE GLOBAL)
      (CL:FUNCTION READ-*SYMBOL-ARRAY*))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-SET-VALUE-CODE GLOBAL)
      (CL:FUNCTION WRITE-*SYMBOL-ARRAY*)))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *SURROGATE-ARRAY* (EXTENSIBLE-SYMBOL-ARRAY OF SURROGATE) NULL)")
    (CL:LET*
     ((GLOBAL (LOOKUP-GLOBAL-VARIABLE SYM-SYMBOLS-*SURROGATE-ARRAY*)))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-GET-VALUE-CODE GLOBAL)
      (CL:FUNCTION READ-*SURROGATE-ARRAY*))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-SET-VALUE-CODE GLOBAL)
      (CL:FUNCTION WRITE-*SURROGATE-ARRAY*)))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *KEYWORD-ARRAY* (EXTENSIBLE-SYMBOL-ARRAY OF KEYWORD) NULL)")
    (CL:LET*
     ((GLOBAL (LOOKUP-GLOBAL-VARIABLE SYM-SYMBOLS-*KEYWORD-ARRAY*)))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-GET-VALUE-CODE GLOBAL)
      (CL:FUNCTION READ-*KEYWORD-ARRAY*))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-SET-VALUE-CODE GLOBAL)
      (CL:FUNCTION WRITE-*KEYWORD-ARRAY*)))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *INDEXICAL-ARRAY* (EXTENSIBLE-SYMBOL-ARRAY OF INDEXICAL) NULL)")
    (CL:LET*
     ((GLOBAL (LOOKUP-GLOBAL-VARIABLE SYM-SYMBOLS-*INDEXICAL-ARRAY*)))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-GET-VALUE-CODE GLOBAL)
      (CL:FUNCTION READ-*INDEXICAL-ARRAY*))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-SET-VALUE-CODE GLOBAL)
      (CL:FUNCTION WRITE-*INDEXICAL-ARRAY*)))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *KEYWORD-OFFSET-TABLE* STRING-TO-INTEGER-HASH-TABLE NULL)")
    (CL:LET*
     ((GLOBAL (LOOKUP-GLOBAL-VARIABLE SYM-SYMBOLS-*KEYWORD-OFFSET-TABLE*)))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-GET-VALUE-CODE GLOBAL)
      (CL:FUNCTION READ-*KEYWORD-OFFSET-TABLE*))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-SET-VALUE-CODE GLOBAL)
      (CL:FUNCTION WRITE-*KEYWORD-OFFSET-TABLE*)))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *FIXED-SYMBOL-ARRAY* (EXTENSIBLE-SYMBOL-ARRAY OF SYMBOL) NULL)")
    (CL:LET*
     ((GLOBAL (LOOKUP-GLOBAL-VARIABLE SYM-SYMBOLS-*FIXED-SYMBOL-ARRAY*)))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-GET-VALUE-CODE GLOBAL)
      (CL:FUNCTION READ-*FIXED-SYMBOL-ARRAY*))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-SET-VALUE-CODE GLOBAL)
      (CL:FUNCTION WRITE-*FIXED-SYMBOL-ARRAY*)))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *FIXED-SURROGATE-ARRAY* (EXTENSIBLE-SYMBOL-ARRAY OF SURROGATE) NULL)")
    (CL:LET*
     ((GLOBAL (LOOKUP-GLOBAL-VARIABLE SYM-SYMBOLS-*FIXED-SURROGATE-ARRAY*)))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-GET-VALUE-CODE GLOBAL)
      (CL:FUNCTION READ-*FIXED-SURROGATE-ARRAY*))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-SET-VALUE-CODE GLOBAL)
      (CL:FUNCTION WRITE-*FIXED-SURROGATE-ARRAY*)))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *FIXED-KEYWORD-ARRAY* (EXTENSIBLE-SYMBOL-ARRAY OF KEYWORD) NULL)")
    (CL:LET*
     ((GLOBAL (LOOKUP-GLOBAL-VARIABLE SYM-SYMBOLS-*FIXED-KEYWORD-ARRAY*)))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-GET-VALUE-CODE GLOBAL)
      (CL:FUNCTION READ-*FIXED-KEYWORD-ARRAY*))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-SET-VALUE-CODE GLOBAL)
      (CL:FUNCTION WRITE-*FIXED-KEYWORD-ARRAY*)))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *FIXED-INDEXICAL-ARRAY* (EXTENSIBLE-SYMBOL-ARRAY OF INDEXICAL) NULL)")
    (CL:LET*
     ((GLOBAL (LOOKUP-GLOBAL-VARIABLE SYM-SYMBOLS-*FIXED-INDEXICAL-ARRAY*)))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-GET-VALUE-CODE GLOBAL)
      (CL:FUNCTION READ-*FIXED-INDEXICAL-ARRAY*))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-SET-VALUE-CODE GLOBAL)
      (CL:FUNCTION WRITE-*FIXED-INDEXICAL-ARRAY*)))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *TRANSIENT-SYMBOL-LOOKUP-TABLE* STRING-HASH-TABLE NULL)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *COMMON-LISP-SYMBOL-LOOKUP-TABLE* STRING-HASH-TABLE NULL)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *TRANSIENT-KEYWORD-LOOKUP-TABLE* STRING-HASH-TABLE NULL)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFCONSTANT SYMBOL-SYM INTEGER 0)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFCONSTANT SURROGATE-SYM INTEGER 1)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFCONSTANT KEYWORD-SYM INTEGER 2)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFCONSTANT INDEXICAL-SYM INTEGER 3)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *ROOT-MODULE* MODULE NULL :DOCUMENTATION \"Pointer to the top-most module ROOT-MODULE.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *STELLA-MODULE* MODULE NULL :DOCUMENTATION \"Pointer to the module STELLA containing definitions of 
STELLA classes and methods.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *COMMON-LISP-MODULE* MODULE NULL :DOCUMENTATION \"Pointer to the module COMMON-LISP containing Common
Lisp symbols (and maybe other things).\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *ALTERNATE-STELLA-MODULE* MODULE NULL :DOCUMENTATION \"Pointer to the module ALTERNATE-STELLA containing
definitions of STELLA classes and methods generated during the
translation of STELLA files.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *CONTEXT* CONTEXT NULL :DOCUMENTATION \"Points to the current context (either a module or a
world).  Set by calls to 'change-world' and 'change-module'.\")")
    (CL:LET*
     ((GLOBAL (LOOKUP-GLOBAL-VARIABLE SYM-SYMBOLS-*CONTEXT*)))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-GET-VALUE-CODE GLOBAL)
      (CL:FUNCTION READ-*CONTEXT*))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-SET-VALUE-CODE GLOBAL)
      (CL:FUNCTION WRITE-*CONTEXT*)))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *MODULE* MODULE NULL :DOCUMENTATION \"Points to the current module.  Set by calls to
'change-context' and 'change-module'.\" :PUBLIC? TRUE)")
    (CL:LET*
     ((GLOBAL (LOOKUP-GLOBAL-VARIABLE SYM-SYMBOLS-*MODULE*)))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-GET-VALUE-CODE GLOBAL)
      (CL:FUNCTION READ-*MODULE*))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-SET-VALUE-CODE GLOBAL)
      (CL:FUNCTION WRITE-*MODULE*)))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFCONSTANT SURROGATE-PREFIX-CHARACTER CHARACTER #\\@ :DOCUMENTATION \"Character used to prefix the name of a surrogate.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFCONSTANT MODULE-SEPARATOR-CHARACTER CHARACTER #\\/ :DOCUMENTATION \"Character used to concatenate a module name
to a symbol or surrogate name to form a qualified name.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFCONSTANT MODULE-SEPARATOR-STRING STRING \"/\" :DOCUMENTATION \"String containing character used to concatenate a module name
to a symbol or surrogate name to form a qualified name.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *CONTEXT-NUMBER-COUNTER* INTEGER -2 :DOCUMENTATION \"Contains the number of the last-created
context (all 'live' contexts are even-numbered).\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *GENSYM-COUNTER* INTEGER 0 :DOCUMENTATION \"Incremented once for each gensym call.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFCONSTANT ESCAPE-CHARACTER CHARACTER #\\!)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *CHARACTER-TYPE-TABLE* (VECTOR OF KEYWORD) (CREATE-CHARACTER-TYPE-TABLE) :DOCUMENTATION \"Table of character types.  Entry 'i' represents the type
of the character whose 'char-code' equals 'i'.  Each character is classified 
by one of the following keywords: :DIGIT, :LETTER, :SYMBOL-CONSTITUENT, 
:SYMBOL-QUALIFIER, :ESCAPE, :OPEN-DELIMITER, :CLOSE-DELIMITER, 
:PAIRED-DELIMITER, :WHITE-SPACE, or :OTHER.\" :PUBLIC? TRUE)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *INITIAL-SYMBOL-ARRAY-SIZE* INTEGER 100 :DOCUMENTATION \"Determines the default inital size of an
EXTENSIBLE-SYMBOL-ARRAY\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *SYMBOL-PROCESSING-ENVIRONMENT* SYMBOL-PROCESSING-ENVIRONMENT NULL :DOCUMENTATION \"Points to the current symbol processing environment.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *STELLA-TRANSLATION-ENVIRONMENT* SYMBOL-PROCESSING-ENVIRONMENT NULL :DOCUMENTATION \"Points to the symbol processing environment
used to translate the Stella system.\")")))
  :VOID)
