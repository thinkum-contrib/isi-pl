;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

#|--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1996, 1997             | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied "AS IS",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SYM-STELLA-IN-TRUE NULL)
(CL:DEFVAR SYM-STELLA-IN-FALSE NULL)
(CL:DEFVAR SGT-STELLA-IN-GENERALIZED-SYMBOL NULL)
(CL:DEFVAR SYM-STELLA-IN-DEFMETHOD NULL)
(CL:DEFVAR KWD-STELLA-IN-PUBLIC-SLOTS NULL)
(CL:DEFVAR KWD-STELLA-IN-SLOTS NULL)
(CL:DEFVAR KWD-STELLA-IN-PUBLIC-METHODS NULL)
(CL:DEFVAR KWD-STELLA-IN-METHODS NULL)
(CL:DEFVAR KWD-STELLA-IN-PARAMETERS NULL)
(CL:DEFVAR KWD-STELLA-IN-KEY NULL)
(CL:DEFVAR KWD-STELLA-IN-SYNONYMS NULL)
(CL:DEFVAR KWD-STELLA-IN-DOCUMENTATION NULL)
(CL:DEFVAR KWD-STELLA-IN-CL-NATIVE-TYPE NULL)
(CL:DEFVAR KWD-STELLA-IN-CPP-NATIVE-TYPE NULL)
(CL:DEFVAR KWD-STELLA-IN-JAVA-NATIVE-TYPE NULL)
(CL:DEFVAR KWD-STELLA-IN-IDL-NATIVE-TYPE NULL)
(CL:DEFVAR KWD-STELLA-IN-ABSTRACT? NULL)
(CL:DEFVAR KWD-STELLA-IN-ACTIVE? NULL)
(CL:DEFVAR KWD-STELLA-IN-PUBLIC? NULL)
(CL:DEFVAR KWD-STELLA-IN-CL-STRUCT? NULL)
(CL:DEFVAR KWD-STELLA-IN-MIXIN? NULL)
(CL:DEFVAR KWD-STELLA-IN-RECYCLE-METHOD NULL)
(CL:DEFVAR SYM-STELLA-IN-NEXT-SWEEP-LIST-OBJECT NULL)
(CL:DEFVAR KWD-STELLA-IN-TYPE NULL)
(CL:DEFVAR KWD-STELLA-IN-EXTENSION NULL)
(CL:DEFVAR KWD-STELLA-IN-CREATOR NULL)
(CL:DEFVAR KWD-STELLA-IN-DESTRUCTOR NULL)
(CL:DEFVAR KWD-STELLA-IN-INITIALIZER NULL)
(CL:DEFVAR KWD-STELLA-IN-TERMINATOR NULL)
(CL:DEFVAR KWD-STELLA-IN-EQUALITY-TEST NULL)
(CL:DEFVAR KWD-STELLA-IN-INITIAL-VALUE NULL)
(CL:DEFVAR KWD-STELLA-IN-PRINT-FORM NULL)
(CL:DEFVAR KWD-STELLA-IN-PROPERTIES NULL)
(CL:DEFVAR KWD-STELLA-IN-META-ATTRIBUTES NULL)
(CL:DEFVAR KWD-STELLA-IN-CHILDREN NULL)
(CL:DEFVAR KWD-STELLA-IN-INITIALLY NULL)
(CL:DEFVAR KWD-STELLA-IN-DEFAULT NULL)
(CL:DEFVAR SYM-STELLA-IN-LIKE NULL)
(CL:DEFVAR KWD-STELLA-IN-ALLOCATION NULL)
(CL:DEFVAR KWD-STELLA-IN-READER NULL)
(CL:DEFVAR KWD-STELLA-IN-WRITER NULL)
(CL:DEFVAR KWD-STELLA-IN-INVERSE NULL)
(CL:DEFVAR KWD-STELLA-IN-RENAMES NULL)
(CL:DEFVAR KWD-STELLA-IN-REQUIRED? NULL)
(CL:DEFVAR KWD-STELLA-IN-COMPONENT? NULL)
(CL:DEFVAR KWD-STELLA-IN-READ-ONLY? NULL)
(CL:DEFVAR KWD-STELLA-IN-CONTEXT-SENSITIVE? NULL)
(CL:DEFVAR KWD-STELLA-IN-HARDWIRED? NULL)
(CL:DEFVAR KWD-STELLA-IN-OPTION-KEYWORD NULL)
(CL:DEFVAR KWD-STELLA-IN-OPTION-HANDLER NULL)
(CL:DEFVAR SYM-STELLA-IN-SETTER NULL)
(CL:DEFVAR KWD-STELLA-IN-RETURN-TYPES NULL)
(CL:DEFVAR KWD-STELLA-IN-STORAGE-SLOT NULL)
(CL:DEFVAR KWD-STELLA-IN-INHERITS-THROUGH NULL)
(CL:DEFVAR KWD-STELLA-IN-SETTER? NULL)
(CL:DEFVAR KWD-STELLA-IN-NATIVE? NULL)
(CL:DEFVAR KWD-STELLA-IN-AUXILIARY? NULL)
(CL:DEFVAR KWD-STELLA-IN-GLOBALLY-INLINE? NULL)
(CL:DEFVAR KWD-STELLA-IN-COMMAND? NULL)
(CL:DEFVAR KWD-STELLA-IN-LISP-MACRO? NULL)
(CL:DEFVAR KWD-STELLA-IN-EVALUATE-ARGUMENTS? NULL)
(CL:DEFVAR KWD-STELLA-IN-INLINE NULL)
(CL:DEFVAR SYM-STELLA-IN-DEFUN NULL)
(CL:DEFVAR KWD-STELLA-IN-DYNAMIC NULL)
(CL:DEFVAR SGT-STELLA-IN-DYNAMIC-SLOTS-MIXIN NULL)
(CL:DEFVAR SYM-STELLA-IN-SLOT-OPTION-KEYWORD NULL)
(CL:DEFVAR SYM-STELLA-IN-DEFAULT-OPTION-HANDLER NULL)
(CL:DEFVAR SYM-STELLA-IN-SLOT-OPTION-HANDLER NULL)
(CL:DEFVAR SGT-STELLA-IN-BOOLEAN NULL)
(CL:DEFVAR SGT-STELLA-IN-MAPPABLE-OBJECT NULL)
(CL:DEFVAR SGT-STELLA-IN-CONTEXT NULL)

;;; Forward declarations:

(CL:DECLAIM (CL:SPECIAL *STELLA-MODULE* *SAFETY* *MODULE* STANDARD-OUTPUT EOL))

;;; (DEFGLOBAL *REDEFINE-IDENTICAL-CLASSES?* ...)

(CL:DEFVAR *REDEFINE-IDENTICAL-CLASSES?* FALSE
  "If TRUE, always redefine classes, even if an
                  identical class exists")

;;; (DEFUN (PERMANENTIFY-FORM OBJECT) ...)

(CL:DEFUN PERMANENTIFY-FORM (FORM)
  (CL:LET*
   ((FORM-001 FORM))
   (CL:COND
    ((CL:EQ (SYMBOL? FORM) 1)
     (CL:LET*
      ((FORM NULL))
      (CL:SETQ FORM FORM-001)
      (CL:COND
       ((CL:EQ FORM SYM-STELLA-IN-TRUE)
        (CL:RETURN-FROM PERMANENTIFY-FORM FORM))
       ((CL:EQ FORM SYM-STELLA-IN-FALSE)
        (CL:RETURN-FROM PERMANENTIFY-FORM FORM))
       (CL:T (CL:RETURN-FROM PERMANENTIFY-FORM (PERMANENTIFY FORM))))))
    ((CL:EQ (CONS? FORM) 1)
     (CL:LET*
      ((FORM NULL))
      (CL:SETQ FORM FORM-001)
      (CL:RETURN-FROM PERMANENTIFY-FORM (PERMANENT-COPY FORM))))
    (CL:T (CL:RETURN-FROM PERMANENTIFY-FORM (PERMANENTIFY FORM)))))
  :VOID)

;;; (DEFUN (TRANSIENTIFY-FORM OBJECT) ...)

(CL:DEFUN TRANSIENTIFY-FORM (FORM)
  (CL:IF
   (CL:NOT (CL:EQ FORM NULL))
   (CL:LET*
    ((*TRANSIENTOBJECTS?* TRUE))
    (CL:DECLARE (CL:SPECIAL *TRANSIENTOBJECTS?*))
    (CL:RETURN-FROM TRANSIENTIFY-FORM (COPY-CONS-TREE FORM)))
   (CL:RETURN-FROM TRANSIENTIFY-FORM NULL))
  :VOID)

;;; (DEFUN (COLLECT-FEATURE-LIST (LIST OF GENERALIZED-SYMBOL)) ...)

(CL:DEFUN COLLECT-FEATURE-LIST (TREE)
  (CL:LET*
   ((TREE-001 TREE))
   (CL:COND
    ((CL:EQ (CONS? TREE) 1)
     (CL:LET*
      ((TREE NULL))
      (CL:SETQ TREE TREE-001)
      (CL:LET*
       ((RESULT NULL))
       (CL:WHEN (CL:> (LENGTH TREE) 0) (CL:SETQ RESULT (NEW-LIST)))
       (CL:LET*
        ((FEATURE NULL) (ITER-001 TREE) (COLLECT-001 NULL))
        (CL:LOOP
         WHILE
         (CL:NOT (CL:EQ ITER-001 NIL))
         DO
         (CL:PROGN
          (CL:SETQ FEATURE (CLSYS-SVAL CONS VALUE ITER-001))
          (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
         (CL:TAGBODY
          (CL:WHEN
           (CL:EQ (ISA? FEATURE SGT-STELLA-IN-GENERALIZED-SYMBOL) 0)
           (CL:LET*
            ((*PRINTREADABLY?* TRUE))
            (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
            (SIGNAL-TRANSLATION-ERROR)
            (CL:WHEN
             (CL:EQ (SUPPRESS-WARNINGS?) 0)
             (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-OUTPUT)
             (CL:LET
              ((%%STREAM
                (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
              (CL:TERPRI %%STREAM)
              (CL:FORCE-OUTPUT %%STREAM)
              (CL:WRITE-STRING " Ignoring illegal feature `" %%STREAM)
              (PRINT-OBJECT (DE-UGLIFY-PARSE-TREE FEATURE) %%STREAM)
              (CL:WRITE-STRING "' in feature list: `" %%STREAM)
              (PRINT-OBJECT (DE-UGLIFY-PARSE-TREE TREE) %%STREAM)
              (CL:WRITE-STRING "'." %%STREAM)
              (CL:TERPRI %%STREAM)
              (CL:FORCE-OUTPUT %%STREAM))))
           (CL:GO :CONTINUE))
          (CL:IF
           (CL:EQ COLLECT-001 NULL)
           (CL:PROGN
            (CL:SETQ COLLECT-001 (PERMANENT-CONS (PERMANENTIFY FEATURE) NIL))
            (CL:IF
             (CL:EQ (CLSYS-SVAL LIST THE-CONS-LIST RESULT) NIL)
             (CL:SETF (CLSYS-SVAL LIST THE-CONS-LIST RESULT) COLLECT-001)
             (ADD-CONS-TO-END-OF-CONS-LIST
              (CLSYS-SVAL LIST THE-CONS-LIST RESULT)
              COLLECT-001)))
           (CL:PROGN
            (CL:SETF
             (CLSYS-SVAL CONS REST COLLECT-001)
             (PERMANENT-CONS (PERMANENTIFY FEATURE) NIL))
            (CL:SETQ COLLECT-001 (CLSYS-SVAL CONS REST COLLECT-001))))
          :CONTINUE)))
       (CL:RETURN-FROM COLLECT-FEATURE-LIST RESULT))))
    (CL:T
     (CL:LET*
      ((*PRINTREADABLY?* TRUE))
      (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
      (SIGNAL-TRANSLATION-ERROR)
      (CL:WHEN
       (CL:EQ (SUPPRESS-WARNINGS?) 0)
       (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-OUTPUT)
       (CL:LET
        ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
        (CL:TERPRI %%STREAM)
        (CL:FORCE-OUTPUT %%STREAM)
        (CL:WRITE-STRING " Illegal atomic feature list: `" %%STREAM)
        (PRINT-OBJECT (DE-UGLIFY-PARSE-TREE TREE) %%STREAM)
        (CL:WRITE-STRING "'." %%STREAM)
        (CL:TERPRI %%STREAM)
        (CL:FORCE-OUTPUT %%STREAM))))
     (CL:RETURN-FROM COLLECT-FEATURE-LIST NULL))))
  :VOID)

;;; (DEFUN (COLLECT-KEY-VALUE-LIST (KEY-VALUE-LIST OF GENERALIZED-SYMBOL OBJECT)) ...)

(CL:DEFUN COLLECT-KEY-VALUE-LIST (TREE)
  (CL:LET*
   ((TREE-001 TREE))
   (CL:COND
    ((CL:EQ (CONS? TREE) 1)
     (CL:LET*
      ((TREE NULL))
      (CL:SETQ TREE TREE-001)
      (CL:LET*
       ((LENGTH (LENGTH TREE))
        (CURSOR TREE)
        (KEY NULL)
        (VALUE NULL)
        (RESULT NULL))
       (CL:WHEN (CL:= LENGTH 0) (CL:RETURN-FROM COLLECT-KEY-VALUE-LIST NULL))
       (CL:WHEN
        (CL:EQ (ODD? LENGTH) 1)
        (CL:LET*
         ((*PRINTREADABLY?* TRUE))
         (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
         (SIGNAL-TRANSLATION-ERROR)
         (CL:WHEN
          (CL:EQ (SUPPRESS-WARNINGS?) 0)
          (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-OUTPUT)
          (CL:LET
           ((%%STREAM
             (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
           (CL:TERPRI %%STREAM)
           (CL:FORCE-OUTPUT %%STREAM)
           (CL:WRITE-STRING
            " Unbalanced keys and values in key-value list: `"
            %%STREAM)
           (PRINT-OBJECT (DE-UGLIFY-PARSE-TREE TREE) %%STREAM)
           (CL:WRITE-STRING "'." %%STREAM)
           (CL:TERPRI %%STREAM)
           (CL:FORCE-OUTPUT %%STREAM))))
        (CL:RETURN-FROM COLLECT-KEY-VALUE-LIST NULL))
       (CL:SETQ RESULT (NEW-KEY-VALUE-LIST))
       (CL:LOOP
        WHILE
        (CL:NOT (CL:EQ CURSOR NIL))
        DO
        (CL:TAGBODY
         (CL:SETQ KEY (FIRST CURSOR))
         (CL:SETQ VALUE (SECOND CURSOR))
         (CL:SETQ CURSOR (CLSYS-SVAL CONS REST (CLSYS-SVAL CONS REST CURSOR)))
         (CL:WHEN
          (CL:EQ (ISA? KEY SGT-STELLA-IN-GENERALIZED-SYMBOL) 0)
          (CL:LET*
           ((*PRINTREADABLY?* TRUE))
           (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
           (SIGNAL-TRANSLATION-ERROR)
           (CL:WHEN
            (CL:EQ (SUPPRESS-WARNINGS?) 0)
            (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-OUTPUT)
            (CL:LET
             ((%%STREAM
               (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
             (CL:TERPRI %%STREAM)
             (CL:FORCE-OUTPUT %%STREAM)
             (CL:WRITE-STRING " Ignoring illegal key `" %%STREAM)
             (PRINT-OBJECT (DE-UGLIFY-PARSE-TREE KEY) %%STREAM)
             (CL:WRITE-STRING "' in key-value list: `" %%STREAM)
             (PRINT-OBJECT (DE-UGLIFY-PARSE-TREE TREE) %%STREAM)
             (CL:WRITE-STRING "'." %%STREAM)
             (CL:TERPRI %%STREAM)
             (CL:FORCE-OUTPUT %%STREAM))))
          (CL:GO :CONTINUE))
         (CL:IF
          (CL:OR
           (CL:EQ VALUE SYM-STELLA-IN-TRUE)
           (CL:EQ VALUE SYM-STELLA-IN-FALSE))
          (CL:SETQ VALUE (SYMBOL-TO-WRAPPED-BOOLEAN VALUE))
          (CL:SETQ VALUE (PERMANENT-COPY VALUE)))
         (INSERT-AT RESULT (PERMANENTIFY KEY) VALUE)
         :CONTINUE))
       (CL:RETURN-FROM COLLECT-KEY-VALUE-LIST RESULT))))
    (CL:T
     (CL:LET*
      ((*PRINTREADABLY?* TRUE))
      (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
      (SIGNAL-TRANSLATION-ERROR)
      (CL:WHEN
       (CL:EQ (SUPPRESS-WARNINGS?) 0)
       (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-OUTPUT)
       (CL:LET
        ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
        (CL:TERPRI %%STREAM)
        (CL:FORCE-OUTPUT %%STREAM)
        (CL:WRITE-STRING " Illegal atomic key-value list: `" %%STREAM)
        (PRINT-OBJECT (DE-UGLIFY-PARSE-TREE TREE) %%STREAM)
        (CL:WRITE-STRING "'." %%STREAM)
        (CL:TERPRI %%STREAM)
        (CL:FORCE-OUTPUT %%STREAM))))
     (CL:RETURN-FROM COLLECT-KEY-VALUE-LIST NULL))))
  :VOID)

;;; (DEFUN (DEFINE-INLINE-METHOD METHOD-SLOT) ...)

(CL:DEFUN DEFINE-INLINE-METHOD (NAME PARAMETERSANDBODY)
  (CL:LET*
   ((PARSETREE NULL) (METHOD NULL))
   (CL:LET*
    ((*TRANSIENTOBJECTS?* TRUE))
    (CL:DECLARE (CL:SPECIAL *TRANSIENTOBJECTS?*))
    (CL:SETQ
     PARSETREE
     (LIST*
      SYM-STELLA-IN-DEFMETHOD
      NAME
      (CONCATENATE PARAMETERSANDBODY NIL))))
   (CL:SETQ METHOD (HELP-DEFINE-METHOD-FROM-PARSE-TREE PARSETREE ""))
   (CL:SETF
    (CLSYS-SVAL METHOD-SLOT METHOD-STRINGIFIED-SOURCE METHOD)
    (STRINGIFY (NTH-REST PARSETREE 3)))
   (CL:RETURN-FROM DEFINE-INLINE-METHOD METHOD))
  :VOID)

;;; (DEFUN (HELP-DEFINE-CLASS-FROM-PARSE-TREE CLASS) ...)

(CL:DEFUN HELP-DEFINE-CLASS-FROM-PARSE-TREE (PARSETREE STRINGIFIEDSOURCE)
  (CL:LET*
   ((TREEDEFINITION (CLSYS-SVAL CONS REST PARSETREE))
    (THESUPERS (SECOND TREEDEFINITION))
    (THEOPTIONS (NEW-PROPERTY-LIST))
    (CLASSTYPE (TYPIFY (FIRST TREEDEFINITION)))
    (DIRECTSUPERS (NEW-LIST))
    (SLOTS (NEW-LIST))
    (CLASSOPTIONS (NEW-KEYWORD-KEY-VALUE-LIST))
    (KEY NULL)
    (PARAMETERS NULL)
    (SLOTTREE NULL))
   (CL:SETF
    (CLSYS-SVAL PROPERTY-LIST THE-PLIST THEOPTIONS)
    (CLSYS-SVAL CONS REST (CLSYS-SVAL CONS REST TREEDEFINITION)))
   (CL:LET*
    ((S NULL) (ITER-001 THESUPERS) (COLLECT-001 NULL))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ S (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:IF
      (CL:EQ COLLECT-001 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-001 (PERMANENT-CONS (TYPIFY S) NIL))
       (CL:IF
        (CL:EQ (CLSYS-SVAL LIST THE-CONS-LIST DIRECTSUPERS) NIL)
        (CL:SETF (CLSYS-SVAL LIST THE-CONS-LIST DIRECTSUPERS) COLLECT-001)
        (ADD-CONS-TO-END-OF-CONS-LIST
         (CLSYS-SVAL LIST THE-CONS-LIST DIRECTSUPERS)
         COLLECT-001)))
      (CL:PROGN
       (CL:SETF
        (CLSYS-SVAL CONS REST COLLECT-001)
        (PERMANENT-CONS (TYPIFY S) NIL))
       (CL:SETQ COLLECT-001 (CLSYS-SVAL CONS REST COLLECT-001))))))
   (CL:LET*
    ((THEVALUE NULL)
     (THEKEY NULL)
     (ITER-002 (CLSYS-SVAL PROPERTY-LIST THE-PLIST THEOPTIONS)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-002 NIL))
     DO
     (CL:SETQ THEKEY (CLSYS-SVAL CONS VALUE ITER-002))
     (CL:PROGN
      (CL:SETQ
       THEVALUE
       (CLSYS-SVAL CONS VALUE (CLSYS-SVAL CONS REST ITER-002)))
      (CL:SETQ
       ITER-002
       (CLSYS-SVAL CONS REST (CLSYS-SVAL CONS REST ITER-002))))
     (CL:TAGBODY
      (CL:SETQ KEY (PERMANENTIFY THEKEY))
      (CL:COND
       ((CL:OR
         (CL:EQ KEY KWD-STELLA-IN-PUBLIC-SLOTS)
         (CL:EQ KEY KWD-STELLA-IN-SLOTS))
        (CL:LET*
         ((LOCALSLOT NULL))
         (CL:LET*
          ((SLOTDEF NULL) (ITER-003 THEVALUE) (COLLECT-002 NULL))
          (CL:LOOP
           WHILE
           (CL:NOT (CL:EQ ITER-003 NIL))
           DO
           (CL:PROGN
            (CL:SETQ SLOTDEF (CLSYS-SVAL CONS VALUE ITER-003))
            (CL:SETQ ITER-003 (CLSYS-SVAL CONS REST ITER-003)))
           (CL:TAGBODY
            (CL:WHEN
             (CL:EQ (CONS? SLOTDEF) 0)
             (CL:LET*
              ((*PRINTREADABLY?* TRUE))
              (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
              (SIGNAL-TRANSLATION-WARNING)
              (CL:WHEN
               (CL:EQ (SUPPRESS-WARNINGS?) 0)
               (PRINT-ERROR-CONTEXT ">> WARNING: " STANDARD-OUTPUT)
               (CL:LET
                ((%%STREAM
                  (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
                (CL:TERPRI %%STREAM)
                (CL:FORCE-OUTPUT %%STREAM)
                (CL:WRITE-STRING " Illegal slot definition:" %%STREAM)
                (CL:TERPRI %%STREAM)
                (CL:FORCE-OUTPUT %%STREAM)
                (CL:WRITE-STRING "   `" %%STREAM)
                (PRINT-OBJECT (DE-UGLIFY-PARSE-TREE SLOTDEF) %%STREAM)
                (CL:WRITE-STRING "'" %%STREAM)
                (CL:TERPRI %%STREAM)
                (CL:FORCE-OUTPUT %%STREAM)
                (CL:WRITE-STRING "." %%STREAM)
                (CL:TERPRI %%STREAM)
                (CL:FORCE-OUTPUT %%STREAM))))
             (CL:GO :CONTINUE))
            (CL:SETQ
             LOCALSLOT
             (DEFINE-STORAGE-SLOT-FROM-PARSE-TREE SLOTDEF CLASSTYPE))
            (CL:WHEN
             (CL:EQ KEY KWD-STELLA-IN-PUBLIC-SLOTS)
             (CL:SETF (CLSYS-SVAL SLOT SLOT-PUBLIC? LOCALSLOT) TRUE))
            (CL:IF
             (CL:EQ COLLECT-002 NULL)
             (CL:PROGN
              (CL:SETQ COLLECT-002 (PERMANENT-CONS LOCALSLOT NIL))
              (CL:IF
               (CL:EQ (CLSYS-SVAL LIST THE-CONS-LIST SLOTS) NIL)
               (CL:SETF (CLSYS-SVAL LIST THE-CONS-LIST SLOTS) COLLECT-002)
               (ADD-CONS-TO-END-OF-CONS-LIST
                (CLSYS-SVAL LIST THE-CONS-LIST SLOTS)
                COLLECT-002)))
             (CL:PROGN
              (CL:SETF
               (CLSYS-SVAL CONS REST COLLECT-002)
               (PERMANENT-CONS LOCALSLOT NIL))
              (CL:SETQ COLLECT-002 (CLSYS-SVAL CONS REST COLLECT-002))))
            :CONTINUE)))))
       ((CL:OR
         (CL:EQ KEY KWD-STELLA-IN-PUBLIC-METHODS)
         (CL:EQ KEY KWD-STELLA-IN-METHODS))
        (CL:LET*
         ((LOCALSLOT NULL))
         (CL:LET*
          ((METHODDEF NULL) (ITER-004 THEVALUE) (COLLECT-003 NULL))
          (CL:LOOP
           WHILE
           (CL:NOT (CL:EQ ITER-004 NIL))
           DO
           (CL:PROGN
            (CL:SETQ METHODDEF (CLSYS-SVAL CONS VALUE ITER-004))
            (CL:SETQ ITER-004 (CLSYS-SVAL CONS REST ITER-004)))
           (CL:TAGBODY
            (CL:WHEN
             (CL:EQ (CONS? METHODDEF) 0)
             (CL:LET*
              ((*PRINTREADABLY?* TRUE))
              (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
              (SIGNAL-TRANSLATION-WARNING)
              (CL:WHEN
               (CL:EQ (SUPPRESS-WARNINGS?) 0)
               (PRINT-ERROR-CONTEXT ">> WARNING: " STANDARD-OUTPUT)
               (CL:LET
                ((%%STREAM
                  (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
                (CL:TERPRI %%STREAM)
                (CL:FORCE-OUTPUT %%STREAM)
                (CL:WRITE-STRING
                 " Illegal inline method definition:"
                 %%STREAM)
                (CL:TERPRI %%STREAM)
                (CL:FORCE-OUTPUT %%STREAM)
                (CL:WRITE-STRING "   `" %%STREAM)
                (PRINT-OBJECT (DE-UGLIFY-PARSE-TREE METHODDEF) %%STREAM)
                (CL:WRITE-STRING "'" %%STREAM)
                (CL:TERPRI %%STREAM)
                (CL:FORCE-OUTPUT %%STREAM)
                (CL:WRITE-STRING "." %%STREAM)
                (CL:TERPRI %%STREAM)
                (CL:FORCE-OUTPUT %%STREAM))))
             (CL:GO :CONTINUE))
            (CL:SETQ
             LOCALSLOT
             (DEFINE-INLINE-METHOD
              (FIRST METHODDEF)
              (CLSYS-SVAL CONS REST METHODDEF)))
            (CL:WHEN
             (CL:EQ KEY KWD-STELLA-IN-PUBLIC-METHODS)
             (CL:SETF (CLSYS-SVAL SLOT SLOT-PUBLIC? LOCALSLOT) TRUE))
            (CL:WHEN
             (CL:NOT (CL:EQ (CLSYS-SVAL SLOT SLOT-OWNER LOCALSLOT) CLASSTYPE))
             (CL:LET*
              ((*PRINTREADABLY?* TRUE))
              (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
              (SIGNAL-TRANSLATION-ERROR)
              (CL:WHEN
               (CL:EQ (SUPPRESS-WARNINGS?) 0)
               (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-OUTPUT)
               (CL:LET
                ((%%STREAM
                  (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
                (CL:TERPRI %%STREAM)
                (CL:FORCE-OUTPUT %%STREAM)
                (CL:WRITE-STRING
                 " Defining a method for the class `"
                 %%STREAM)
                (PRINT-OBJECT (CLSYS-SVAL SLOT SLOT-OWNER LOCALSLOT) %%STREAM)
                (CL:WRITE-STRING "' inside of the class `" %%STREAM)
                (PRINT-OBJECT (DE-UGLIFY-PARSE-TREE CLASSTYPE) %%STREAM)
                (CL:WRITE-STRING "'." %%STREAM)
                (CL:TERPRI %%STREAM)
                (CL:FORCE-OUTPUT %%STREAM)))))
            (CL:IF
             (CL:EQ COLLECT-003 NULL)
             (CL:PROGN
              (CL:SETQ COLLECT-003 (PERMANENT-CONS LOCALSLOT NIL))
              (CL:IF
               (CL:EQ (CLSYS-SVAL LIST THE-CONS-LIST SLOTS) NIL)
               (CL:SETF (CLSYS-SVAL LIST THE-CONS-LIST SLOTS) COLLECT-003)
               (ADD-CONS-TO-END-OF-CONS-LIST
                (CLSYS-SVAL LIST THE-CONS-LIST SLOTS)
                COLLECT-003)))
             (CL:PROGN
              (CL:SETF
               (CLSYS-SVAL CONS REST COLLECT-003)
               (PERMANENT-CONS LOCALSLOT NIL))
              (CL:SETQ COLLECT-003 (CLSYS-SVAL CONS REST COLLECT-003))))
            :CONTINUE)))))
       ((CL:EQ KEY KWD-STELLA-IN-PARAMETERS)
        (CL:SETQ PARAMETERS (NEW-LIST))
        (CL:LET*
         ((SLOTDEF NULL) (ITER-005 THEVALUE) (COLLECT-004 NULL))
         (CL:LOOP
          WHILE
          (CL:NOT (CL:EQ ITER-005 NIL))
          DO
          (CL:PROGN
           (CL:SETQ SLOTDEF (CLSYS-SVAL CONS VALUE ITER-005))
           (CL:SETQ ITER-005 (CLSYS-SVAL CONS REST ITER-005)))
          (CL:IF
           (CL:EQ COLLECT-004 NULL)
           (CL:PROGN
            (CL:SETQ
             COLLECT-004
             (PERMANENT-CONS
              (DEFINE-STORAGE-SLOT-FROM-PARSE-TREE SLOTDEF CLASSTYPE)
              NIL))
            (CL:IF
             (CL:EQ (CLSYS-SVAL LIST THE-CONS-LIST PARAMETERS) NIL)
             (CL:SETF (CLSYS-SVAL LIST THE-CONS-LIST PARAMETERS) COLLECT-004)
             (ADD-CONS-TO-END-OF-CONS-LIST
              (CLSYS-SVAL LIST THE-CONS-LIST PARAMETERS)
              COLLECT-004)))
           (CL:PROGN
            (CL:SETF
             (CLSYS-SVAL CONS REST COLLECT-004)
             (PERMANENT-CONS
              (DEFINE-STORAGE-SLOT-FROM-PARSE-TREE SLOTDEF CLASSTYPE)
              NIL))
            (CL:SETQ COLLECT-004 (CLSYS-SVAL CONS REST COLLECT-004))))))
        (INSERT-AT CLASSOPTIONS KEY PARAMETERS))
       ((CL:EQ KEY KWD-STELLA-IN-KEY)
        (CL:WHEN
         (CL:EQ (CONS? THEVALUE) 0)
         (CL:SETQ THEVALUE (LOCAL-CONS THEKEY NIL)))
        (IN-PLACE-OBJECTS-TO-SYMBOLS THEVALUE)
        (INSERT-AT CLASSOPTIONS KEY THEVALUE))
       ((CL:EQ KEY KWD-STELLA-IN-SYNONYMS)
        (CL:WHEN
         (CL:EQ (CONS? THEVALUE) 0)
         (CL:SETQ THEVALUE (LOCAL-CONS THEKEY NIL)))
        (IN-PLACE-OBJECTS-TO-TYPES THEVALUE)
        (INSERT-AT CLASSOPTIONS KEY THEVALUE))
       ((CL:OR
         (CL:EQ KEY KWD-STELLA-IN-DOCUMENTATION)
         (CL:EQ KEY KWD-STELLA-IN-CL-NATIVE-TYPE)
         (CL:EQ KEY KWD-STELLA-IN-CPP-NATIVE-TYPE)
         (CL:EQ KEY KWD-STELLA-IN-JAVA-NATIVE-TYPE)
         (CL:EQ KEY KWD-STELLA-IN-IDL-NATIVE-TYPE))
        (INSERT-AT CLASSOPTIONS KEY THEVALUE))
       ((CL:OR
         (CL:EQ KEY KWD-STELLA-IN-ABSTRACT?)
         (CL:EQ KEY KWD-STELLA-IN-ACTIVE?)
         (CL:EQ KEY KWD-STELLA-IN-PUBLIC?)
         (CL:EQ KEY KWD-STELLA-IN-CL-STRUCT?)
         (CL:EQ KEY KWD-STELLA-IN-MIXIN?))
        (INSERT-AT CLASSOPTIONS KEY (SYMBOL-TO-WRAPPED-BOOLEAN THEVALUE)))
       ((CL:EQ KEY KWD-STELLA-IN-RECYCLE-METHOD)
        (CL:SETQ THEVALUE (PERMANENTIFY THEVALUE))
        (INSERT-AT CLASSOPTIONS KEY THEVALUE)
        (CL:WHEN
         (CL:EQ
          (MEMBER?
           (GET-QUOTED-TREE
            "((:SWEEP-LIST :FREE-AND-SWEEP-LIST) \"/STELLA\")"
            "/STELLA")
           THEVALUE)
          1)
         (CL:LET*
          ((*TRANSIENTOBJECTS?* TRUE))
          (CL:DECLARE (CL:SPECIAL *TRANSIENTOBJECTS?*))
          (CL:SETQ
           SLOTTREE
           (LIST*
            SYM-STELLA-IN-NEXT-SWEEP-LIST-OBJECT
            KWD-STELLA-IN-TYPE
            (FIRST TREEDEFINITION)
            NIL)))
         (PUSH
          SLOTS
          (DEFINE-STORAGE-SLOT-FROM-PARSE-TREE SLOTTREE CLASSTYPE))))
       ((CL:OR
         (CL:EQ KEY KWD-STELLA-IN-EXTENSION)
         (CL:EQ KEY KWD-STELLA-IN-CREATOR)
         (CL:EQ KEY KWD-STELLA-IN-DESTRUCTOR)
         (CL:EQ KEY KWD-STELLA-IN-INITIALIZER)
         (CL:EQ KEY KWD-STELLA-IN-TERMINATOR)
         (CL:EQ KEY KWD-STELLA-IN-EQUALITY-TEST))
        (INSERT-AT CLASSOPTIONS KEY (PERMANENTIFY THEVALUE)))
       ((CL:OR
         (CL:EQ KEY KWD-STELLA-IN-INITIAL-VALUE)
         (CL:EQ KEY KWD-STELLA-IN-PRINT-FORM))
        (INSERT-AT CLASSOPTIONS KEY (PERMANENTIFY-FORM THEVALUE)))
       ((CL:EQ KEY KWD-STELLA-IN-PROPERTIES)
        (INSERT-AT CLASSOPTIONS KEY (COLLECT-FEATURE-LIST THEVALUE)))
       ((CL:EQ KEY KWD-STELLA-IN-META-ATTRIBUTES)
        (INSERT-AT CLASSOPTIONS KEY (COLLECT-KEY-VALUE-LIST THEVALUE)))
       ((CL:EQ KEY KWD-STELLA-IN-CHILDREN)
        (CL:LET*
         ((THEVALUE-001 THEVALUE))
         (CL:COND
          ((CL:EQ (CONS? THEVALUE) 1)
           (CL:LET*
            ((THEVALUE NULL))
            (CL:SETQ THEVALUE THEVALUE-001)
            (CL:LET*
             ((CHILDREN (NEW-LIST)))
             (CL:LET*
              ((CHILD NULL) (ITER-006 THEVALUE) (COLLECT-005 NULL))
              (CL:LOOP
               WHILE
               (CL:NOT (CL:EQ ITER-006 NIL))
               DO
               (CL:PROGN
                (CL:SETQ CHILD (CLSYS-SVAL CONS VALUE ITER-006))
                (CL:SETQ ITER-006 (CLSYS-SVAL CONS REST ITER-006)))
               (CL:WHEN
                (CL:EQ (SYMBOL? CHILD) 1)
                (CL:IF
                 (CL:EQ COLLECT-005 NULL)
                 (CL:PROGN
                  (CL:SETQ COLLECT-005 (PERMANENT-CONS (TYPIFY CHILD) NIL))
                  (CL:IF
                   (CL:EQ (CLSYS-SVAL LIST THE-CONS-LIST CHILDREN) NIL)
                   (CL:SETF
                    (CLSYS-SVAL LIST THE-CONS-LIST CHILDREN)
                    COLLECT-005)
                   (ADD-CONS-TO-END-OF-CONS-LIST
                    (CLSYS-SVAL LIST THE-CONS-LIST CHILDREN)
                    COLLECT-005)))
                 (CL:PROGN
                  (CL:SETF
                   (CLSYS-SVAL CONS REST COLLECT-005)
                   (PERMANENT-CONS (TYPIFY CHILD) NIL))
                  (CL:SETQ
                   COLLECT-005
                   (CLSYS-SVAL CONS REST COLLECT-005)))))))
             (INSERT-AT CLASSOPTIONS KEY CHILDREN))))
          (CL:T
           (CL:LET*
            ((*PRINTREADABLY?* TRUE))
            (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
            (SIGNAL-TRANSLATION-ERROR)
            (CL:WHEN
             (CL:EQ (SUPPRESS-WARNINGS?) 0)
             (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-OUTPUT)
             (CL:LET
              ((%%STREAM
                (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
              (CL:TERPRI %%STREAM)
              (CL:FORCE-OUTPUT %%STREAM)
              (CL:WRITE-STRING " Illegal :children specification: `" %%STREAM)
              (PRINT-OBJECT (DE-UGLIFY-PARSE-TREE THEVALUE) %%STREAM)
              (CL:WRITE-STRING "'." %%STREAM)
              (CL:TERPRI %%STREAM)
              (CL:FORCE-OUTPUT %%STREAM))))))))
       (CL:T (INSERT-AT CLASSOPTIONS KEY THEVALUE)))
      :CONTINUE)))
   (CL:SETF (CLSYS-SVAL PROPERTY-LIST THE-PLIST THEOPTIONS) NULL)
   (CL:LET*
    ((CLASS
      (DEFINE-STELLA-CLASS
       CLASSTYPE
       DIRECTSUPERS
       SLOTS
       (REVERSE CLASSOPTIONS))))
    (CL:WHEN
     (CL:NOT (CL:EQ CLASS NULL))
     (CL:SETF
      (CLSYS-SVAL CLASS CLASS-STRINGIFIED-SOURCE CLASS)
      STRINGIFIEDSOURCE))
    (CL:RETURN-FROM HELP-DEFINE-CLASS-FROM-PARSE-TREE CLASS)))
  :VOID)

;;; (DEFUN (DEFINE-STORAGE-SLOT-FROM-PARSE-TREE STORAGE-SLOT) ...)

(CL:DEFUN DEFINE-STORAGE-SLOT-FROM-PARSE-TREE (SLOTDEF OWNER)
  (CL:LET*
   ((NAME (PERMANENTIFY (FIRST SLOTDEF)))
    (BASETYPE NULL)
    (TYPEEXPRESSION NIL)
    (THEOPTIONS (NEW-PROPERTY-LIST))
    (SLOTOPTIONS (NEW-KEYWORD-KEY-VALUE-LIST))
    (KEY NULL)
    (SLOT NULL))
   (CL:SETF
    (CLSYS-SVAL PROPERTY-LIST THE-PLIST THEOPTIONS)
    (CLSYS-SVAL CONS REST SLOTDEF))
   (CL:LET*
    ((THEVALUE NULL)
     (THEKEY NULL)
     (ITER-001 (CLSYS-SVAL PROPERTY-LIST THE-PLIST THEOPTIONS)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:SETQ THEKEY (CLSYS-SVAL CONS VALUE ITER-001))
     (CL:PROGN
      (CL:SETQ
       THEVALUE
       (CLSYS-SVAL CONS VALUE (CLSYS-SVAL CONS REST ITER-001)))
      (CL:SETQ
       ITER-001
       (CLSYS-SVAL CONS REST (CLSYS-SVAL CONS REST ITER-001))))
     (CL:SETQ KEY (PERMANENTIFY THEKEY))
     (CL:COND
      ((CL:OR
        (CL:EQ KEY KWD-STELLA-IN-INITIALLY)
        (CL:EQ KEY KWD-STELLA-IN-DEFAULT))
       (INSERT-AT SLOTOPTIONS KEY (PERMANENTIFY-FORM THEVALUE)))
      ((CL:EQ KEY KWD-STELLA-IN-TYPE)
       (CL:LET*
        ((THEVALUE-001 THEVALUE))
        (CL:COND
         ((CL:EQ (CONS? THEVALUE) 1)
          (CL:LET*
           ((THEVALUE NULL))
           (CL:SETQ THEVALUE THEVALUE-001)
           (CL:SETQ TYPEEXPRESSION THEVALUE)
           (CL:IF
            (CL:EQ (FIRST THEVALUE) SYM-STELLA-IN-LIKE)
            (CL:SETQ BASETYPE NULL)
            (CL:SETQ BASETYPE (TYPIFY (FIRST THEVALUE))))))
         (CL:T
          (CL:SETQ BASETYPE (TYPIFY THEVALUE))
          (CL:WHEN
           (CL:EQ (DEFINED-TYPE? BASETYPE) 1)
           (CL:LET*
            ((REALTYPE (YIELD-TYPE-SPECIFIER THEVALUE)))
            (CL:SETQ BASETYPE (TYPE-SPEC-TO-BASE-TYPE REALTYPE))
            (CL:WHEN
             (CL:EQ (TYPE? REALTYPE) 0)
             (CL:LET*
              ((*TRANSIENTOBJECTS?* TRUE))
              (CL:DECLARE (CL:SPECIAL *TRANSIENTOBJECTS?*))
              (CL:SETQ TYPEEXPRESSION (YIELD-TYPE-SPEC-TREE REALTYPE))))))))))
      ((CL:EQ KEY KWD-STELLA-IN-ALLOCATION)
       (INSERT-AT SLOTOPTIONS KEY (PERMANENTIFY THEVALUE)))
      ((CL:EQ KEY KWD-STELLA-IN-READER)
       (INSERT-AT SLOTOPTIONS KEY (PERMANENTIFY THEVALUE)))
      ((CL:EQ KEY KWD-STELLA-IN-WRITER)
       (INSERT-AT SLOTOPTIONS KEY (PERMANENTIFY THEVALUE)))
      ((CL:OR
        (CL:EQ KEY KWD-STELLA-IN-INVERSE)
        (CL:EQ KEY KWD-STELLA-IN-RENAMES))
       (INSERT-AT SLOTOPTIONS KEY (PERMANENTIFY THEVALUE)))
      ((CL:OR
        (CL:EQ KEY KWD-STELLA-IN-PUBLIC?)
        (CL:EQ KEY KWD-STELLA-IN-REQUIRED?)
        (CL:EQ KEY KWD-STELLA-IN-COMPONENT?)
        (CL:EQ KEY KWD-STELLA-IN-READ-ONLY?)
        (CL:EQ KEY KWD-STELLA-IN-ACTIVE?)
        (CL:EQ KEY KWD-STELLA-IN-CONTEXT-SENSITIVE?)
        (CL:EQ KEY KWD-STELLA-IN-HARDWIRED?)
        (CL:EQ KEY KWD-STELLA-IN-ABSTRACT?))
       (INSERT-AT SLOTOPTIONS KEY (SYMBOL-TO-WRAPPED-BOOLEAN THEVALUE)))
      ((CL:EQ KEY KWD-STELLA-IN-DOCUMENTATION)
       (INSERT-AT SLOTOPTIONS KEY THEVALUE))
      ((CL:EQ KEY KWD-STELLA-IN-PROPERTIES)
       (INSERT-AT SLOTOPTIONS KEY (COLLECT-FEATURE-LIST THEVALUE)))
      ((CL:EQ KEY KWD-STELLA-IN-META-ATTRIBUTES)
       (INSERT-AT SLOTOPTIONS KEY (COLLECT-KEY-VALUE-LIST THEVALUE)))
      ((CL:OR
        (CL:EQ KEY KWD-STELLA-IN-OPTION-KEYWORD)
        (CL:EQ KEY KWD-STELLA-IN-OPTION-HANDLER))
       (INSERT-AT SLOTOPTIONS KEY (PERMANENTIFY THEVALUE)))
      (CL:T (INSERT-AT SLOTOPTIONS KEY THEVALUE)))))
   (CL:SETF (CLSYS-SVAL PROPERTY-LIST THE-PLIST THEOPTIONS) NULL)
   (CL:SETQ
    SLOT
    (DEFINE-STELLA-SLOT
     NAME
     OWNER
     BASETYPE
     TYPEEXPRESSION
     (REVERSE SLOTOPTIONS)))
   (CL:RETURN-FROM DEFINE-STORAGE-SLOT-FROM-PARSE-TREE SLOT))
  :VOID)

;;; (DEFUN (GET-IDENTICAL-CLASS CLASS) ...)

(CL:DEFUN GET-IDENTICAL-CLASS (CLASSNAME STRINGIFIEDSOURCE)
  (CL:LET*
   ((SURROGATE (LOOKUP-SURROGATE CLASSNAME))
    (OLDVALUE
     (CL:IF
      (CL:NOT (CL:EQ SURROGATE NULL))
      (CLSYS-SVAL SURROGATE SURROGATE-VALUE SURROGATE)
      NULL)))
   (CL:WHEN
    (CL:NOT (CL:EQ OLDVALUE NULL))
    (CL:LET*
     ((OLDVALUE-001 OLDVALUE))
     (CL:COND
      ((CL:EQ (CLASS? OLDVALUE) 1)
       (CL:LET*
        ((OLDVALUE NULL))
        (CL:SETQ OLDVALUE OLDVALUE-001)
        (CL:WHEN
         (CL:AND
          (CL:NOT
           (CL:EQ (CLSYS-SVAL CLASS CLASS-STRINGIFIED-SOURCE OLDVALUE) NULL))
          (CL:EQ
           (STRING-EQL?
            (CLSYS-SVAL CLASS CLASS-STRINGIFIED-SOURCE OLDVALUE)
            STRINGIFIEDSOURCE)
           1)
          (CL:EQ (CLSYS-SVAL SURROGATE HOME-CONTEXT SURROGATE) *MODULE*))
         (CL:RETURN-FROM GET-IDENTICAL-CLASS OLDVALUE))))
      (CL:T NULL))))
   (CL:RETURN-FROM GET-IDENTICAL-CLASS NULL))
  :VOID)

;;; (DEFUN (DEFINE-CLASS-FROM-PARSE-TREE CLASS) ...)

(CL:DEFUN DEFINE-CLASS-FROM-PARSE-TREE (PARSETREE)
  (CL:WHEN
   (CL:EQ (BAD-ARGUMENT-RANGE? PARSETREE 2 NULL-INTEGER) 1)
   (CL:RETURN-FROM DEFINE-CLASS-FROM-PARSE-TREE NULL))
  (CL:WHEN
   (CL:NOT
    (CL:AND
     (CL:EQ (SYMBOL? (SECOND PARSETREE)) 1)
     (CL:EQ (CONS? (THIRD PARSETREE)) 1)))
   (CL:LET*
    ((*PRINTREADABLY?* TRUE))
    (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
    (SIGNAL-TRANSLATION-ERROR)
    (CL:WHEN
     (CL:EQ (SUPPRESS-WARNINGS?) 0)
     (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-OUTPUT)
     (CL:LET
      ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
      (CL:TERPRI %%STREAM)
      (CL:FORCE-OUTPUT %%STREAM)
      (CL:WRITE-STRING " Illegal class definition: `" %%STREAM)
      (PRINT-OBJECT (DE-UGLIFY-PARSE-TREE PARSETREE) %%STREAM)
      (CL:WRITE-STRING "'." %%STREAM)
      (CL:TERPRI %%STREAM)
      (CL:FORCE-OUTPUT %%STREAM))))
   (CL:RETURN-FROM DEFINE-CLASS-FROM-PARSE-TREE NULL))
  (CL:LET*
   ((CLASSNAME (SECOND PARSETREE))
    (STRINGIFIEDSOURCE (STRINGIFY PARSETREE))
    (OLDCLASS
     (GET-IDENTICAL-CLASS
      (CLSYS-SVAL SYMBOL SYMBOL-NAME CLASSNAME)
      STRINGIFIEDSOURCE)))
   (CL:WHEN
    (CL:AND
     (CL:NOT (CL:EQ OLDCLASS NULL))
     (CL:EQ *REDEFINE-IDENTICAL-CLASSES?* 0))
    (CL:RETURN-FROM DEFINE-CLASS-FROM-PARSE-TREE OLDCLASS))
   (CL:RETURN-FROM
    DEFINE-CLASS-FROM-PARSE-TREE
    (HELP-DEFINE-CLASS-FROM-PARSE-TREE PARSETREE STRINGIFIEDSOURCE)))
  :VOID)

;;; (DEFUN (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE CLASS) ...)

(CL:DEFUN DEFINE-CLASS-FROM-STRINGIFIED-SOURCE (CLASSNAME STRINGIFIEDSOURCE)
  (CL:LET*
   ((OLDCLASS (GET-IDENTICAL-CLASS CLASSNAME STRINGIFIEDSOURCE))
    (PARSETREE NULL)
    (NEWCLASS NULL))
   (CL:WHEN
    (CL:AND
     (CL:NOT (CL:EQ OLDCLASS NULL))
     (CL:EQ *REDEFINE-IDENTICAL-CLASSES?* 0))
    (CL:RETURN-FROM DEFINE-CLASS-FROM-STRINGIFIED-SOURCE OLDCLASS))
   (CL:LET*
    ((*TRANSIENTOBJECTS?* TRUE))
    (CL:DECLARE (CL:SPECIAL *TRANSIENTOBJECTS?*))
    (CL:SETQ PARSETREE (UNSTRINGIFY STRINGIFIEDSOURCE)))
   (CL:SETQ
    NEWCLASS
    (HELP-DEFINE-CLASS-FROM-PARSE-TREE PARSETREE STRINGIFIEDSOURCE))
   (FREE-PARSE-TREE PARSETREE)
   (CL:RETURN-FROM DEFINE-CLASS-FROM-STRINGIFIED-SOURCE NEWCLASS))
  :VOID)

;;; (DEFUN (EXTRACT-OPTIONS CONS) ...)

(CL:DEFUN EXTRACT-OPTIONS (TREE OPTIONSTABLE)
  (CL:LET*
   ((OPTIONS NULL) (TAIL NULL))
   (CL:LOOP
    WHILE
    (CL:AND
     (CL:NOT (CL:EQ (CLSYS-SVAL CONS REST TREE) NIL))
     (CL:EQ (KEYWORD? (CLSYS-SVAL CONS VALUE (CLSYS-SVAL CONS REST TREE))) 0))
    DO
    (CL:SETQ TREE (CLSYS-SVAL CONS REST TREE)))
   (CL:WHEN
    (CL:OR
     (CL:EQ (CLSYS-SVAL CONS REST TREE) NIL)
     (CL:EQ (CLSYS-SVAL CONS REST (CLSYS-SVAL CONS REST TREE)) NIL))
    (CL:RETURN-FROM EXTRACT-OPTIONS NIL))
   (CL:WHEN
    (CL:NOT (CL:EQ OPTIONSTABLE NULL))
    (INSERT-AT
     OPTIONSTABLE
     (CLSYS-SVAL CONS VALUE (CLSYS-SVAL CONS REST TREE))
     (CLSYS-SVAL
      CONS
      VALUE
      (CLSYS-SVAL CONS REST (CLSYS-SVAL CONS REST TREE)))))
   (CL:SETQ OPTIONS (CLSYS-SVAL CONS REST TREE))
   (CL:SETQ TAIL (CLSYS-SVAL CONS REST (CLSYS-SVAL CONS REST TREE)))
   (CL:LOOP
    WHILE
    (CL:AND
     (CL:NOT (CL:EQ (CLSYS-SVAL CONS REST (CLSYS-SVAL CONS REST TAIL)) NIL))
     (CL:EQ (KEYWORD? (CLSYS-SVAL CONS VALUE (CLSYS-SVAL CONS REST TAIL))) 1))
    DO
    (CL:WHEN
     (CL:NOT (CL:EQ OPTIONSTABLE NULL))
     (INSERT-AT
      OPTIONSTABLE
      (CLSYS-SVAL CONS VALUE (CLSYS-SVAL CONS REST TAIL))
      (CLSYS-SVAL
       CONS
       VALUE
       (CLSYS-SVAL CONS REST (CLSYS-SVAL CONS REST TAIL)))))
    (CL:SETQ TAIL (CLSYS-SVAL CONS REST (CLSYS-SVAL CONS REST TAIL))))
   (CL:SETF (CLSYS-SVAL CONS REST TREE) (CLSYS-SVAL CONS REST TAIL))
   (CL:SETF (CLSYS-SVAL CONS REST TAIL) NIL)
   (CL:RETURN-FROM EXTRACT-OPTIONS OPTIONS))
  :VOID)

;;; (DEFUN (DESTRUCTURE-DEFMETHOD-TREE OBJECT CONS CONS) ...)

(CL:DEFUN DESTRUCTURE-DEFMETHOD-TREE (METHODTREE OPTIONSTABLE)
  "Return three parse trees representing the name,
parameters, and code body of the parse tree 'methodTree'.  Fill
'optionsTable' with a dictionary of method options.
Storage note:  Options are treated specially because the other return
values are subtrees of 'methodTree', while 'optionsTable' is a newly-created
cons tree.  Note also, the parameter and body trees are destructively
removed from 'methodTree'."
  (CL:LET*
   ((NAMETREE (SECOND METHODTREE)) (PARAMETERSTREE (THIRD METHODTREE)))
   (CL:WHEN
    (CL:EQ (CONS? PARAMETERSTREE) 0)
    (CL:LET*
     ((*PRINTREADABLY?* TRUE))
     (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
     (SIGNAL-TRANSLATION-ERROR)
     (CL:WHEN
      (CL:EQ (SUPPRESS-WARNINGS?) 0)
      (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-OUTPUT)
      (CL:LET
       ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
       (CL:TERPRI %%STREAM)
       (CL:FORCE-OUTPUT %%STREAM)
       (CL:WRITE-STRING " Illegal parameter list: `" %%STREAM)
       (PRINT-OBJECT (DE-UGLIFY-PARSE-TREE PARAMETERSTREE) %%STREAM)
       (CL:WRITE-STRING "'." %%STREAM)
       (CL:TERPRI %%STREAM)
       (CL:FORCE-OUTPUT %%STREAM))))
    (CL:SETQ PARAMETERSTREE NIL))
   (FREE-CONS-LIST (EXTRACT-OPTIONS METHODTREE OPTIONSTABLE))
   (CL:RETURN-FROM
    DESTRUCTURE-DEFMETHOD-TREE
    (CL:VALUES NAMETREE PARAMETERSTREE (NTH-REST METHODTREE 3))))
  :VOID)

;;; (DEFUN (YIELD-SETTER-METHOD-NAME SYMBOL) ...)

(CL:DEFUN YIELD-SETTER-METHOD-NAME (METHODNAME)
  (CL:RETURN-FROM
   YIELD-SETTER-METHOD-NAME
   (INTERN-DERIVED-SYMBOL
    METHODNAME
    (CONCATENATE (CLSYS-SVAL SYMBOL SYMBOL-NAME METHODNAME) "-SETTER")))
  :VOID)

;;; (DEFUN (DESTRUCTURE-METHOD-NAME-TREE SYMBOL CONS) ...)

(CL:DEFUN DESTRUCTURE-METHOD-NAME-TREE (NAMETREE)
  (CL:LET*
   ((NAMETREE-001 NAMETREE))
   (CL:COND
    ((CL:EQ (CONS? NAMETREE) 1)
     (CL:LET*
      ((NAMETREE NULL))
      (CL:SETQ NAMETREE NAMETREE-001)
      (CL:WHEN
       (CL:EQ (SYMBOL? (FIRST NAMETREE)) 0)
       (CL:LET*
        ((*PRINTREADABLY?* TRUE))
        (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
        (SIGNAL-TRANSLATION-ERROR)
        (CL:WHEN
         (CL:EQ (SUPPRESS-WARNINGS?) 0)
         (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-OUTPUT)
         (CL:LET
          ((%%STREAM
            (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
          (CL:TERPRI %%STREAM)
          (CL:FORCE-OUTPUT %%STREAM)
          (CL:WRITE-STRING " Illegal method name: `" %%STREAM)
          (PRINT-OBJECT (DE-UGLIFY-PARSE-TREE NAMETREE) %%STREAM)
          (CL:WRITE-STRING "'." %%STREAM)
          (CL:TERPRI %%STREAM)
          (CL:FORCE-OUTPUT %%STREAM))))
       (CL:RETURN-FROM DESTRUCTURE-METHOD-NAME-TREE (CL:VALUES NULL NULL)))
      (CL:IF
       (CL:EQ (SECOND NAMETREE) SYM-STELLA-IN-SETTER)
       (CL:RETURN-FROM
        DESTRUCTURE-METHOD-NAME-TREE
        (CL:VALUES (YIELD-SETTER-METHOD-NAME (FIRST NAMETREE)) NIL))
       (CL:RETURN-FROM
        DESTRUCTURE-METHOD-NAME-TREE
        (CL:VALUES (FIRST NAMETREE) (CLSYS-SVAL CONS REST NAMETREE))))))
    ((CL:EQ (SYMBOL? NAMETREE) 1)
     (CL:LET*
      ((NAMETREE NULL))
      (CL:SETQ NAMETREE NAMETREE-001)
      (CL:RETURN-FROM DESTRUCTURE-METHOD-NAME-TREE (CL:VALUES NAMETREE NIL))))
    (CL:T
     (CL:LET*
      ((*PRINTREADABLY?* TRUE))
      (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
      (SIGNAL-TRANSLATION-ERROR)
      (CL:WHEN
       (CL:EQ (SUPPRESS-WARNINGS?) 0)
       (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-OUTPUT)
       (CL:LET
        ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
        (CL:TERPRI %%STREAM)
        (CL:FORCE-OUTPUT %%STREAM)
        (CL:WRITE-STRING " Illegal method name: `" %%STREAM)
        (PRINT-OBJECT (DE-UGLIFY-PARSE-TREE NAMETREE) %%STREAM)
        (CL:WRITE-STRING "'." %%STREAM)
        (CL:TERPRI %%STREAM)
        (CL:FORCE-OUTPUT %%STREAM))))
     (CL:RETURN-FROM DESTRUCTURE-METHOD-NAME-TREE (CL:VALUES NULL NULL)))))
  :VOID)

;;; (DEFUN IN-PLACE-NORMALIZE-METHOD-OPTIONS ...)

(CL:DEFUN IN-PLACE-NORMALIZE-METHOD-OPTIONS (METHODOPTIONS METHODNAME)
  (CL:SETQ METHODNAME METHODNAME)
  (CL:LET*
   ((VALUE NULL) (KEY NULL) (ITER-001 (ALLOCATE-ITERATOR METHODOPTIONS)))
   (CL:LOOP
    WHILE
    (CL:EQ (NEXT? ITER-001) 1)
    DO
    (CL:SETQ KEY (CLSYS-SVAL KV-LIST-ITERATOR KEY ITER-001))
    (CL:PROGN (CL:SETQ VALUE (CLSYS-SVAL KV-LIST-ITERATOR VALUE ITER-001)))
    (CL:COND
     ((CL:OR
       (CL:EQ KEY KWD-STELLA-IN-TYPE)
       (CL:EQ KEY KWD-STELLA-IN-RETURN-TYPES))
      NULL)
     ((CL:OR
       (CL:EQ KEY KWD-STELLA-IN-RENAMES)
       (CL:EQ KEY KWD-STELLA-IN-STORAGE-SLOT)
       (CL:EQ KEY KWD-STELLA-IN-INHERITS-THROUGH))
      (INSERT-AT METHODOPTIONS KEY (PERMANENTIFY VALUE)))
     ((CL:OR
       (CL:EQ KEY KWD-STELLA-IN-PUBLIC?)
       (CL:EQ KEY KWD-STELLA-IN-SETTER?)
       (CL:EQ KEY KWD-STELLA-IN-NATIVE?)
       (CL:EQ KEY KWD-STELLA-IN-AUXILIARY?)
       (CL:EQ KEY KWD-STELLA-IN-GLOBALLY-INLINE?)
       (CL:EQ KEY KWD-STELLA-IN-COMMAND?)
       (CL:EQ KEY KWD-STELLA-IN-LISP-MACRO?)
       (CL:EQ KEY KWD-STELLA-IN-EVALUATE-ARGUMENTS?))
      (INSERT-AT METHODOPTIONS KEY (SYMBOL-TO-WRAPPED-BOOLEAN VALUE)))
     ((CL:EQ KEY KWD-STELLA-IN-DOCUMENTATION)
      (INSERT-AT METHODOPTIONS KEY VALUE))
     ((CL:EQ KEY KWD-STELLA-IN-INLINE)
      (CL:LET*
       ((VALUE-001 VALUE))
       (CL:COND
        ((CL:EQ (SYMBOL? VALUE) 1)
         (CL:LET*
          ((VALUE NULL))
          (CL:SETQ VALUE VALUE-001)
          (INSERT-AT METHODOPTIONS KEY (PERMANENTIFY VALUE))))
        ((CL:EQ (CONS? VALUE) 1)
         (CL:LET*
          ((VALUE NULL))
          (CL:SETQ VALUE VALUE-001)
          (CL:LET*
           ((*TRANSIENTOBJECTS?* FALSE))
           (CL:DECLARE (CL:SPECIAL *TRANSIENTOBJECTS?*))
           (CL:LET*
            ((SYMBOLSLIST NIL))
            (CL:LET*
             ((SYMBOL NULL) (ITER-002 VALUE) (COLLECT-001 NULL))
             (CL:LOOP
              WHILE
              (CL:NOT (CL:EQ ITER-002 NIL))
              DO
              (CL:PROGN
               (CL:SETQ SYMBOL (CLSYS-SVAL CONS VALUE ITER-002))
               (CL:SETQ ITER-002 (CLSYS-SVAL CONS REST ITER-002)))
              (CL:IF
               (CL:EQ COLLECT-001 NULL)
               (CL:PROGN
                (CL:SETQ COLLECT-001 (CONS (PERMANENTIFY SYMBOL) NIL))
                (CL:IF
                 (CL:EQ SYMBOLSLIST NIL)
                 (CL:SETQ SYMBOLSLIST COLLECT-001)
                 (ADD-CONS-TO-END-OF-CONS-LIST SYMBOLSLIST COLLECT-001)))
               (CL:PROGN
                (CL:SETF
                 (CLSYS-SVAL CONS REST COLLECT-001)
                 (CONS (PERMANENTIFY SYMBOL) NIL))
                (CL:SETQ COLLECT-001 (CLSYS-SVAL CONS REST COLLECT-001))))))
            (INSERT-AT METHODOPTIONS KEY SYMBOLSLIST)))))
        (CL:T (CL:ERROR "`~A' is not a valid case option" VALUE)))))
     ((CL:EQ KEY KWD-STELLA-IN-PROPERTIES)
      (INSERT-AT METHODOPTIONS KEY (COLLECT-FEATURE-LIST VALUE)))
     ((CL:EQ KEY KWD-STELLA-IN-META-ATTRIBUTES)
      (INSERT-AT METHODOPTIONS KEY (COLLECT-KEY-VALUE-LIST VALUE)))
     (CL:T (INSERT-AT METHODOPTIONS KEY (PERMANENTIFY VALUE))))))
  (REVERSE METHODOPTIONS)
  :VOID)

;;; (DEFUN (GET-FUNCTION-WITH-IDENTICAL-SIGNATURE METHOD-SLOT) ...)

(CL:DEFUN GET-FUNCTION-WITH-IDENTICAL-SIGNATURE (NAME STRINGIFIEDSOURCE)
  (CL:LET*
   ((OLDMETHOD (LOOKUP-FUNCTION-OR-STELLA-FUNCTION NAME)))
   (CL:WHEN
    (CL:AND
     (CL:NOT (CL:EQ OLDMETHOD NULL))
     (CL:EQ
      (STRING-EQL?
       (CLSYS-SVAL METHOD-SLOT METHOD-STRINGIFIED-SOURCE OLDMETHOD)
       STRINGIFIEDSOURCE)
      1))
    (CL:RETURN-FROM GET-FUNCTION-WITH-IDENTICAL-SIGNATURE OLDMETHOD))
   (CL:RETURN-FROM GET-FUNCTION-WITH-IDENTICAL-SIGNATURE NULL))
  :VOID)

;;; (DEFUN (GET-METHOD-WITH-IDENTICAL-SIGNATURE METHOD-SLOT) ...)

(CL:DEFUN GET-METHOD-WITH-IDENTICAL-SIGNATURE (NAME PARAMETERSTREE STRINGIFIEDSOURCE)
  (CL:LET*
   ((EXISTINGSLOT NULL))
   (CL:WHEN
    (CL:EQ (CONS? (FIRST PARAMETERSTREE)) 1)
    (CL:SETQ PARAMETERSTREE (FIRST PARAMETERSTREE))
    (CL:WHEN
     (CL:EQ (SYMBOL? (LAST PARAMETERSTREE)) 1)
     (CL:SETQ
      EXISTINGSLOT
      (SAFE-LOOKUP-SLOT (TYPE-TO-CLASS (TYPIFY (LAST PARAMETERSTREE))) NAME))
     (CL:WHEN
      (CL:NOT (CL:EQ EXISTINGSLOT NULL))
      (CL:LET*
       ((EXISTINGSLOT-001 EXISTINGSLOT))
       (CL:COND
        ((CL:EQ (METHOD-SLOT? EXISTINGSLOT) 1)
         (CL:LET*
          ((EXISTINGSLOT NULL))
          (CL:SETQ EXISTINGSLOT EXISTINGSLOT-001)
          (CL:WHEN
           (CL:EQ
            (STRING-EQL?
             (CLSYS-SVAL METHOD-SLOT METHOD-STRINGIFIED-SOURCE EXISTINGSLOT)
             STRINGIFIEDSOURCE)
            1)
           (CL:RETURN-FROM
            GET-METHOD-WITH-IDENTICAL-SIGNATURE
            EXISTINGSLOT))))
        (CL:T NULL))))))
   (CL:RETURN-FROM GET-METHOD-WITH-IDENTICAL-SIGNATURE NULL))
  :VOID)

;;; (DEFUN (HELP-DEFINE-METHOD-FROM-PARSE-TREE METHOD-SLOT BOOLEAN) ...)

(CL:DEFUN HELP-DEFINE-METHOD-FROM-PARSE-TREE (INPUTTREE STRINGIFIEDSOURCE)
  (CL:LET*
   ((NAMETREE NULL)
    (PARAMETERSTREE NULL)
    (METHODOPTIONS (NEW-KEYWORD-KEY-VALUE-LIST))
    (BODYTREE NULL)
    (NAME NULL)
    (RETURNTYPESTREE NULL)
    (FUNCTION? (EQ? (FIRST INPUTTREE) SYM-STELLA-IN-DEFUN))
    (OLDMETHOD NULL))
   (CL:MULTIPLE-VALUE-SETQ
    (NAMETREE PARAMETERSTREE BODYTREE)
    (DESTRUCTURE-DEFMETHOD-TREE INPUTTREE METHODOPTIONS))
   (CL:MULTIPLE-VALUE-SETQ
    (NAME RETURNTYPESTREE)
    (DESTRUCTURE-METHOD-NAME-TREE NAMETREE))
   (CL:WHEN
    (CL:EQ NAME NULL)
    (CL:RETURN-FROM
     HELP-DEFINE-METHOD-FROM-PARSE-TREE
     (CL:VALUES NULL FALSE)))
   (CL:SETQ
    OLDMETHOD
    (CL:IF
     (CL:EQ FUNCTION? 1)
     (GET-FUNCTION-WITH-IDENTICAL-SIGNATURE NAME STRINGIFIEDSOURCE)
     (GET-METHOD-WITH-IDENTICAL-SIGNATURE
      NAME
      PARAMETERSTREE
      STRINGIFIEDSOURCE)))
   (CL:WHEN
    (CL:NOT (CL:EQ OLDMETHOD NULL))
    (CL:RETURN-FROM
     HELP-DEFINE-METHOD-FROM-PARSE-TREE
     (CL:VALUES OLDMETHOD TRUE)))
   (IN-PLACE-NORMALIZE-METHOD-OPTIONS METHODOPTIONS NAME)
   (CL:LET*
    ((METHOD
      (DEFINE-STELLA-METHOD-SLOT
       NAME
       RETURNTYPESTREE
       FUNCTION?
       PARAMETERSTREE
       METHODOPTIONS
       BODYTREE)))
    (CL:SETF
     (CLSYS-SVAL METHOD-SLOT METHOD-STRINGIFIED-SOURCE METHOD)
     STRINGIFIEDSOURCE)
    (CL:RETURN-FROM
     HELP-DEFINE-METHOD-FROM-PARSE-TREE
     (CL:VALUES METHOD FALSE))))
  :VOID)

;;; (DEFUN (DEFINE-METHOD-FROM-PARSE-TREE METHOD-SLOT) ...)

(CL:DEFUN DEFINE-METHOD-FROM-PARSE-TREE (PARSETREE)
  (CL:WHEN
   (CL:EQ (BAD-ARGUMENT-RANGE? PARSETREE 2 NULL-INTEGER) 1)
   (CL:RETURN-FROM DEFINE-METHOD-FROM-PARSE-TREE NULL))
  (CL:LET*
   ((METHOD NULL) (IDENTICALMETHOD? FALSE))
   (CL:MULTIPLE-VALUE-SETQ
    (METHOD IDENTICALMETHOD?)
    (HELP-DEFINE-METHOD-FROM-PARSE-TREE
     PARSETREE
     (STRINGIFY-METHOD-DEFINITION-TREE PARSETREE)))
   (CL:WHEN
    (CL:NOT
     (CL:OR
      (CL:EQ IDENTICALMETHOD? 1)
      (CL:EQ METHOD NULL)
      (CL:EQ (METHOD-AUXILIARY? METHOD) 1)))
    (ATTACH-METHOD-SLOT-TO-OWNER METHOD))
   (CL:RETURN-FROM DEFINE-METHOD-FROM-PARSE-TREE METHOD))
  :VOID)

;;; (DEFUN (STRINGIFY-METHOD-DEFINITION-TREE STRING) ...)

(CL:DEFUN STRINGIFY-METHOD-DEFINITION-TREE (PARSETREE)
  (CL:LET*
   ((SIGNATURE NIL)
    (SIGNATURESTRING NULL)
    (OPTIONSTREE (NTH-REST PARSETREE 3)))
   (CL:LET*
    ((*TRANSIENTOBJECTS?* TRUE))
    (CL:DECLARE (CL:SPECIAL *TRANSIENTOBJECTS?*))
    (CL:SETQ SIGNATURE (CONS (FIRST PARSETREE) SIGNATURE))
    (CL:SETQ SIGNATURE (CONS (SECOND PARSETREE) SIGNATURE))
    (CL:SETQ SIGNATURE (CONS (THIRD PARSETREE) SIGNATURE))
    (CL:LOOP
     WHILE
     (CL:EQ (KEYWORD? (FIRST OPTIONSTREE)) 1)
     DO
     (CL:SETQ SIGNATURE (CONS (FIRST OPTIONSTREE) SIGNATURE))
     (CL:SETQ SIGNATURE (CONS (SECOND OPTIONSTREE) SIGNATURE))
     (CL:SETQ
      OPTIONSTREE
      (CLSYS-SVAL CONS REST (CLSYS-SVAL CONS REST OPTIONSTREE)))))
   (CL:SETQ SIGNATURESTRING (STRINGIFY (REVERSE SIGNATURE)))
   (FREE-CONS-LIST SIGNATURE)
   (CL:RETURN-FROM STRINGIFY-METHOD-DEFINITION-TREE SIGNATURESTRING))
  :VOID)

;;; (DEFUN (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE METHOD-SLOT) ...)

(CL:DEFUN DEFINE-METHOD-FROM-STRINGIFIED-SOURCE (METHODNAME CLASSNAME STRINGIFIEDSOURCE)
  (CL:PROGN (CL:SETQ METHODNAME METHODNAME) (CL:SETQ CLASSNAME CLASSNAME))
  (CL:LET*
   ((PARSETREE NULL))
   (CL:LET*
    ((*TRANSIENTOBJECTS?* TRUE))
    (CL:DECLARE (CL:SPECIAL *TRANSIENTOBJECTS?*))
    (CL:SETQ PARSETREE (UNSTRINGIFY STRINGIFIEDSOURCE)))
   (CL:LET*
    ((METHOD NULL) (IDENTICALMETHOD? FALSE))
    (CL:MULTIPLE-VALUE-SETQ
     (METHOD IDENTICALMETHOD?)
     (HELP-DEFINE-METHOD-FROM-PARSE-TREE PARSETREE STRINGIFIEDSOURCE))
    (FREE-PARSE-TREE PARSETREE)
    (CL:WHEN
     (CL:NOT
      (CL:OR (CL:EQ IDENTICALMETHOD? 1) (CL:EQ (METHOD-AUXILIARY? METHOD) 1)))
     (ATTACH-METHOD-SLOT-TO-OWNER METHOD))
    (CL:RETURN-FROM DEFINE-METHOD-FROM-STRINGIFIED-SOURCE METHOD)))
  :VOID)

;;; (DEFGLOBAL *UNSUPPORTED-EXTERNAL-SLOT-OPTIONS* ...)

(CL:DEFVAR *UNSUPPORTED-EXTERNAL-SLOT-OPTIONS* NULL)

;;; (DEFUN (DEFINE-EXTERNAL-SLOT-FROM-PARSE-TREE STORAGE-SLOT) ...)

(CL:DEFUN DEFINE-EXTERNAL-SLOT-FROM-PARSE-TREE (PARSETREE)
  (CL:WHEN
   (CL:EQ (BAD-ARGUMENT-RANGE? PARSETREE 2 NULL-INTEGER) 1)
   (CL:RETURN-FROM DEFINE-EXTERNAL-SLOT-FROM-PARSE-TREE NULL))
  (CL:WHEN
   (CL:OR
    (CL:EQ (SYMBOL? (SECOND PARSETREE)) 0)
    (CL:EQ (SYMBOL? (THIRD PARSETREE)) 0)
    (CL:EQ (EVEN? (LENGTH (NTH-REST PARSETREE 3))) 0))
   (CL:LET*
    ((*PRINTREADABLY?* TRUE))
    (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
    (SIGNAL-TRANSLATION-ERROR)
    (CL:WHEN
     (CL:EQ (SUPPRESS-WARNINGS?) 0)
     (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-OUTPUT)
     (CL:LET
      ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
      (CL:TERPRI %%STREAM)
      (CL:FORCE-OUTPUT %%STREAM)
      (CL:WRITE-STRING " Illegal external slot definition: `" %%STREAM)
      (PRINT-OBJECT (DE-UGLIFY-PARSE-TREE PARSETREE) %%STREAM)
      (CL:WRITE-STRING "'." %%STREAM)
      (CL:TERPRI %%STREAM)
      (CL:FORCE-OUTPUT %%STREAM))))
   (CL:RETURN-FROM DEFINE-EXTERNAL-SLOT-FROM-PARSE-TREE NULL))
  (CL:LET*
   ((CLASSNAME (SECOND PARSETREE))
    (OWNER (TYPIFY CLASSNAME))
    (OWNERCLASS (CLSYS-SVAL SURROGATE SURROGATE-VALUE OWNER))
    (SLOT NULL)
    (OPTIONS (NTH-REST PARSETREE 3))
    (MARKER (GET-CLASS "SLOT" TRUE))
    (ABSTRACT? FALSE))
   (CL:WHEN
    (CL:EQ OWNERCLASS NULL)
    (CL:LET*
     ((*PRINTREADABLY?* TRUE))
     (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
     (SIGNAL-TRANSLATION-ERROR)
     (CL:WHEN
      (CL:EQ (SUPPRESS-WARNINGS?) 0)
      (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-OUTPUT)
      (CL:LET
       ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
       (CL:TERPRI %%STREAM)
       (CL:FORCE-OUTPUT %%STREAM)
       (CL:WRITE-STRING
        " Can't define a slot on the non-existent class `"
        %%STREAM)
       (PRINT-OBJECT (DE-UGLIFY-PARSE-TREE CLASSNAME) %%STREAM)
       (CL:WRITE-STRING "'." %%STREAM)
       (CL:TERPRI %%STREAM)
       (CL:FORCE-OUTPUT %%STREAM))))
    (CL:RETURN-FROM DEFINE-EXTERNAL-SLOT-FROM-PARSE-TREE NULL))
   (CL:LOOP
    WHILE
    (CL:NOT (CL:EQ OPTIONS NIL))
    DO
    (CL:LET*
     ((OPTION (FIRST OPTIONS)) (VALUE (SECOND OPTIONS)))
     (CL:WHEN
      (CL:EQ (MEMBER? *UNSUPPORTED-EXTERNAL-SLOT-OPTIONS* OPTION) 1)
      (CL:WHEN
       (CL:OR
        (CL:NOT (CL:EQ OPTION KWD-STELLA-IN-ALLOCATION))
        (CL:NOT (CL:EQ VALUE KWD-STELLA-IN-DYNAMIC)))
       (CL:LET*
        ((*PRINTREADABLY?* TRUE))
        (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
        (SIGNAL-TRANSLATION-WARNING)
        (CL:WHEN
         (CL:EQ (SUPPRESS-WARNINGS?) 0)
         (PRINT-ERROR-CONTEXT ">> WARNING: " STANDARD-OUTPUT)
         (CL:LET
          ((%%STREAM
            (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
          (CL:TERPRI %%STREAM)
          (CL:FORCE-OUTPUT %%STREAM)
          (CL:WRITE-STRING " Skipping slot option `" %%STREAM)
          (PRINT-OBJECT (DE-UGLIFY-PARSE-TREE OPTION) %%STREAM)
          (CL:WRITE-STRING
           "' which is unsupported on external slots."
           %%STREAM)
          (CL:TERPRI %%STREAM)
          (CL:FORCE-OUTPUT %%STREAM)))))
      (FIRST-SETTER OPTIONS MARKER)
      (CL:WHEN (CL:NOT (CL:EQ VALUE NULL)) (SECOND-SETTER OPTIONS MARKER)))
     (CL:WHEN
      (CL:OR
       (CL:AND
        (CL:EQ OPTION KWD-STELLA-IN-ABSTRACT?)
        (CL:EQ VALUE SYM-STELLA-IN-TRUE))
       (CL:EQ OPTION KWD-STELLA-IN-RENAMES))
      (CL:SETQ ABSTRACT? TRUE)))
    (CL:SETQ OPTIONS (CLSYS-SVAL CONS REST (CLSYS-SVAL CONS REST OPTIONS))))
   (CL:WHEN
    (CL:AND
     (CL:EQ ABSTRACT? 0)
     (CL:EQ (CLSYS-SVAL CLASS CLASS-FINALIZED? OWNERCLASS) 1)
     (CL:EQ (SUBTYPE-OF? OWNER SGT-STELLA-IN-DYNAMIC-SLOTS-MIXIN) 0))
    (CL:LET*
     ((*PRINTREADABLY?* TRUE))
     (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
     (SIGNAL-TRANSLATION-ERROR)
     (CL:WHEN
      (CL:EQ (SUPPRESS-WARNINGS?) 0)
      (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-OUTPUT)
      (CL:LET
       ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
       (CL:TERPRI %%STREAM)
       (CL:FORCE-OUTPUT %%STREAM)
       (CL:WRITE-STRING
        " Can't define a non-abstract external slot on class `"
        %%STREAM)
       (PRINT-OBJECT (DE-UGLIFY-PARSE-TREE CLASSNAME) %%STREAM)
       (CL:WRITE-STRING "'," %%STREAM)
       (CL:TERPRI %%STREAM)
       (CL:FORCE-OUTPUT %%STREAM)
       (CL:WRITE-STRING
        " since it does not inherit DYNAMIC-SLOTS-MIXIN."
        %%STREAM)
       (CL:TERPRI %%STREAM)
       (CL:FORCE-OUTPUT %%STREAM))))
    (CL:RETURN-FROM DEFINE-EXTERNAL-SLOT-FROM-PARSE-TREE NULL))
   (CL:SETQ PARSETREE (REMOVE PARSETREE MARKER))
   (CL:WHEN
    (CL:EQ ABSTRACT? 0)
    (CL:SETQ
     PARSETREE
     (CONCATENATE
      PARSETREE
      (LIST* KWD-STELLA-IN-ALLOCATION KWD-STELLA-IN-DYNAMIC NIL))))
   (CL:SETQ
    SLOT
    (DEFINE-STORAGE-SLOT-FROM-PARSE-TREE
     (CLSYS-SVAL CONS REST (CLSYS-SVAL CONS REST PARSETREE))
     OWNER))
   (CL:WHEN (CL:NOT (CL:EQ SLOT NULL)) (ATTACH-SLOT-TO-OWNER SLOT))
   (CL:RETURN-FROM DEFINE-EXTERNAL-SLOT-FROM-PARSE-TREE SLOT))
  :VOID)

;;; (DEFUN (DEFINE-EXTERNAL-SLOT-FROM-STRINGIFIED-SOURCE STORAGE-SLOT) ...)

(CL:DEFUN DEFINE-EXTERNAL-SLOT-FROM-STRINGIFIED-SOURCE (STRINGIFIEDSOURCE)
  (CL:RETURN-FROM
   DEFINE-EXTERNAL-SLOT-FROM-STRINGIFIED-SOURCE
   (DEFINE-EXTERNAL-SLOT-FROM-PARSE-TREE (UNSTRINGIFY STRINGIFIEDSOURCE)))
  :VOID)

;;; (DEFUN (LOOKUP-SLOT-FROM-OPTION-KEYWORD STORAGE-SLOT) ...)

(CL:DEFUN LOOKUP-SLOT-FROM-OPTION-KEYWORD (OWNER KEYWORD)
  (CL:LET*
   ((OWNERCLASS (CLSYS-SVAL SURROGATE SURROGATE-VALUE OWNER)))
   (CL:WHEN
    (CL:NOT (CL:EQ OWNERCLASS NULL))
    (CL:LET*
     ((SLOT NULL) (ITER-001 (CLASS-SLOTS OWNERCLASS)))
     (CL:LOOP
      WHILE
      (CL:EQ (NEXT? ITER-001) 1)
      DO
      (CL:PROGN (CL:SETQ SLOT (CLSYS-SVAL ITERATOR VALUE ITER-001)))
      (CL:WHEN
       (CL:AND
        (CL:EQ (STORAGE-SLOT? SLOT) 1)
        (CL:EQ
         (DYNAMIC-SLOT-VALUE SLOT SYM-STELLA-IN-SLOT-OPTION-KEYWORD NULL)
         KEYWORD))
       (CL:RETURN-FROM LOOKUP-SLOT-FROM-OPTION-KEYWORD SLOT)))))
   (CL:RETURN-FROM LOOKUP-SLOT-FROM-OPTION-KEYWORD NULL))
  :VOID)

;;; (DEFGLOBAL *DEFAULT-OPTION-HANDLER* ...)

(CL:DEFVAR *DEFAULT-OPTION-HANDLER* NULL)

;;; (DEFUN (LOOKUP-OPTION-HANDLER METHOD-SLOT) ...)

(CL:DEFUN LOOKUP-OPTION-HANDLER (SLOT)
  (CL:LET*
   ((HANDLERNAME
     (DYNAMIC-SLOT-VALUE SLOT SYM-STELLA-IN-SLOT-OPTION-HANDLER NULL))
    (HANDLER NULL))
   (CL:WHEN
    (CL:EQ HANDLERNAME NULL)
    (CL:IF
     (CL:NOT (CL:EQ *DEFAULT-OPTION-HANDLER* NULL))
     (CL:RETURN-FROM LOOKUP-OPTION-HANDLER *DEFAULT-OPTION-HANDLER*)
     (CL:RETURN-FROM
      LOOKUP-OPTION-HANDLER
      (LOOKUP-FUNCTION SYM-STELLA-IN-DEFAULT-OPTION-HANDLER))))
   (CL:SETQ HANDLER (LOOKUP-FUNCTION HANDLERNAME))
   (CL:WHEN
    (CL:AND
     (CL:>= *SAFETY* 2)
     (CL:NOT (CL:EQ HANDLER NULL))
     (CL:NOT (CL:EQ HANDLERNAME SYM-STELLA-IN-DEFAULT-OPTION-HANDLER))
     (CL:EQ (CONFORMING-SIGNATURES? HANDLER *DEFAULT-OPTION-HANDLER*) 0))
    (CL:ERROR
     "The signature of slot option handler `~A' does not conform to that of 'default-option-handler'."
     HANDLERNAME))
   (CL:RETURN-FROM LOOKUP-OPTION-HANDLER HANDLER))
  :VOID)

;;; (DEFUN (RUN-OPTION-HANDLER? BOOLEAN) ...)

(CL:DEFUN RUN-OPTION-HANDLER? (OBJECT OPTION VALUETREE)
  (CL:LET*
   ((SLOT (LOOKUP-SLOT-FROM-OPTION-KEYWORD (PRIMARY-TYPE OBJECT) OPTION))
    (HANDLER
     (CL:IF (CL:NOT (CL:EQ SLOT NULL)) (LOOKUP-OPTION-HANDLER SLOT) NULL)))
   (CL:WHEN
    (CL:NOT (CL:EQ HANDLER NULL))
    (CL:FUNCALL
     (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE HANDLER)
     OBJECT
     SLOT
     VALUETREE)
    (CL:RETURN-FROM RUN-OPTION-HANDLER? TRUE))
   (CL:RETURN-FROM RUN-OPTION-HANDLER? FALSE))
  :VOID)

;;; (DEFUN DEFAULT-OPTION-HANDLER ...)

(CL:DEFUN DEFAULT-OPTION-HANDLER (SELF SLOT TREE)
  (CL:LET*
   ((PARSEDVALUE (PERMANENTIFY TREE)))
   (CL:LET*
    ((TEST-VALUE-001 (TYPE SLOT)))
    (CL:COND
     ((CL:EQ TEST-VALUE-001 SGT-STELLA-IN-BOOLEAN)
      (CL:SETQ PARSEDVALUE (SYMBOL-TO-WRAPPED-BOOLEAN TREE)))
     (CL:T NULL)))
   (CL:WHEN
    (CL:>= *SAFETY* 2)
    (CL:WHEN
     (CL:EQ (ISA? PARSEDVALUE (TYPE-TO-WRAPPED-TYPE (TYPE SLOT))) 0)
     (CL:LET*
      ((*PRINTREADABLY?* TRUE))
      (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
      (SIGNAL-TRANSLATION-ERROR)
      (CL:WHEN
       (CL:EQ (SUPPRESS-WARNINGS?) 0)
       (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-OUTPUT)
       (CL:LET
        ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
        (CL:TERPRI %%STREAM)
        (CL:FORCE-OUTPUT %%STREAM)
        (CL:WRITE-STRING " Illegal value for `" %%STREAM)
        (PRINT-OBJECT
         (DYNAMIC-SLOT-VALUE SLOT SYM-STELLA-IN-SLOT-OPTION-KEYWORD NULL)
         %%STREAM)
        (CL:WRITE-STRING "' option: `" %%STREAM)
        (PRINT-OBJECT (DE-UGLIFY-PARSE-TREE TREE) %%STREAM)
        (CL:WRITE-STRING "'." %%STREAM)
        (CL:TERPRI %%STREAM)
        (CL:FORCE-OUTPUT %%STREAM))))
     (CL:RETURN-FROM DEFAULT-OPTION-HANDLER))
    (CL:WHEN
     (CL:EQ (ISA? SELF SGT-STELLA-IN-DYNAMIC-SLOTS-MIXIN) 0)
     (CL:LET*
      ((*PRINTREADABLY?* TRUE))
      (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
      (SIGNAL-TRANSLATION-ERROR)
      (CL:WHEN
       (CL:EQ (SUPPRESS-WARNINGS?) 0)
       (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-OUTPUT)
       (CL:LET
        ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
        (CL:TERPRI %%STREAM)
        (CL:FORCE-OUTPUT %%STREAM)
        (CL:WRITE-STRING " Cannot set option `" %%STREAM)
        (PRINT-OBJECT
         (DYNAMIC-SLOT-VALUE SLOT SYM-STELLA-IN-SLOT-OPTION-KEYWORD NULL)
         %%STREAM)
        (CL:WRITE-STRING "' on `" %%STREAM)
        (PRINT-OBJECT (DE-UGLIFY-PARSE-TREE SELF) %%STREAM)
        (CL:WRITE-STRING "'," %%STREAM)
        (CL:TERPRI %%STREAM)
        (CL:FORCE-OUTPUT %%STREAM)
        (CL:WRITE-STRING
         " since that object does not support dynamic slots."
         %%STREAM)
        (CL:TERPRI %%STREAM)
        (CL:FORCE-OUTPUT %%STREAM))))
     (CL:RETURN-FROM DEFAULT-OPTION-HANDLER))
    (CL:WHEN
     (CL:NOT (CL:EQ (ALLOCATION SLOT) KWD-STELLA-IN-DYNAMIC))
     (CL:LET*
      ((*PRINTREADABLY?* TRUE))
      (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
      (SIGNAL-TRANSLATION-ERROR)
      (CL:WHEN
       (CL:EQ (SUPPRESS-WARNINGS?) 0)
       (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-OUTPUT)
       (CL:LET
        ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
        (CL:TERPRI %%STREAM)
        (CL:FORCE-OUTPUT %%STREAM)
        (CL:WRITE-STRING
         " default-option-handler: Don't know how to handle option `"
         %%STREAM)
        (PRINT-OBJECT
         (DYNAMIC-SLOT-VALUE SLOT SYM-STELLA-IN-SLOT-OPTION-KEYWORD NULL)
         %%STREAM)
        (CL:WRITE-STRING "'" %%STREAM)
        (CL:TERPRI %%STREAM)
        (CL:FORCE-OUTPUT %%STREAM)
        (CL:WRITE-STRING " for the non-dynamic slot `" %%STREAM)
        (PRINT-OBJECT
         (TYPE-TO-SYMBOL (CLSYS-SVAL STORAGE-SLOT SLOT-OWNER SLOT))
         %%STREAM)
        (CL:WRITE-STRING "'.`" %%STREAM)
        (PRINT-OBJECT (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT) %%STREAM)
        (CL:WRITE-STRING "'." %%STREAM)
        (CL:TERPRI %%STREAM)
        (CL:FORCE-OUTPUT %%STREAM))))
     (CL:RETURN-FROM DEFAULT-OPTION-HANDLER)))
   (CL:LET*
    ((SELF-001 SELF))
    (CL:COND
     ((CL:EQ (TAXONOMY-ISA? SELF SGT-STELLA-IN-MAPPABLE-OBJECT) 1)
      (CL:LET*
       ((SELF NULL))
       (CL:SETQ SELF SELF-001)
       (SET-DYNAMIC-SLOT-VALUE
        SELF
        (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT)
        PARSEDVALUE
        NULL)))
     ((CL:EQ (TAXONOMY-ISA? SELF SGT-STELLA-IN-CONTEXT) 1)
      (CL:LET*
       ((SELF NULL))
       (CL:SETQ SELF SELF-001)
       (SET-DYNAMIC-SLOT-VALUE
        SELF
        (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT)
        PARSEDVALUE
        NULL)))
     (CL:T
      (CL:ERROR
       "default-option-handler: Don't know how to set slot `~A'~% on object `~A' of type `~A'."
       (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT)
       SELF
       (PRIMARY-TYPE SELF))))))
  :VOID)

(CL:DEFUN STARTUP-STELLA-IN ()
  (CL:LET*
   ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 2) 1)
    (CL:SETQ
     SYM-STELLA-IN-TRUE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "TRUE" NULL 0))
    (CL:SETQ
     SYM-STELLA-IN-FALSE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FALSE" NULL 0))
    (CL:SETQ
     SGT-STELLA-IN-GENERALIZED-SYMBOL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "GENERALIZED-SYMBOL" NULL 1))
    (CL:SETQ
     SYM-STELLA-IN-DEFMETHOD
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFMETHOD" NULL 0))
    (CL:SETQ
     KWD-STELLA-IN-PUBLIC-SLOTS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PUBLIC-SLOTS" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-SLOTS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SLOTS" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-PUBLIC-METHODS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PUBLIC-METHODS" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-METHODS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHODS" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-PARAMETERS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PARAMETERS" NULL 2))
    (CL:SETQ KWD-STELLA-IN-KEY (INTERN-RIGID-SYMBOL-WRT-MODULE "KEY" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-SYNONYMS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SYNONYMS" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-DOCUMENTATION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DOCUMENTATION" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-CL-NATIVE-TYPE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CL-NATIVE-TYPE" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-CPP-NATIVE-TYPE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP-NATIVE-TYPE" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-JAVA-NATIVE-TYPE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA-NATIVE-TYPE" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-IDL-NATIVE-TYPE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "IDL-NATIVE-TYPE" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-ABSTRACT?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "ABSTRACT?" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-ACTIVE?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "ACTIVE?" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-PUBLIC?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PUBLIC?" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-CL-STRUCT?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CL-STRUCT?" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-MIXIN?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MIXIN?" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-RECYCLE-METHOD
     (INTERN-RIGID-SYMBOL-WRT-MODULE "RECYCLE-METHOD" NULL 2))
    (CL:SETQ
     SYM-STELLA-IN-NEXT-SWEEP-LIST-OBJECT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NEXT-SWEEP-LIST-OBJECT" NULL 0))
    (CL:SETQ
     KWD-STELLA-IN-TYPE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "TYPE" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-EXTENSION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "EXTENSION" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-CREATOR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CREATOR" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-DESTRUCTOR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DESTRUCTOR" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-INITIALIZER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "INITIALIZER" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-TERMINATOR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "TERMINATOR" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-EQUALITY-TEST
     (INTERN-RIGID-SYMBOL-WRT-MODULE "EQUALITY-TEST" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-INITIAL-VALUE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "INITIAL-VALUE" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-PRINT-FORM
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT-FORM" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-PROPERTIES
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PROPERTIES" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-META-ATTRIBUTES
     (INTERN-RIGID-SYMBOL-WRT-MODULE "META-ATTRIBUTES" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-CHILDREN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CHILDREN" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-INITIALLY
     (INTERN-RIGID-SYMBOL-WRT-MODULE "INITIALLY" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-DEFAULT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFAULT" NULL 2))
    (CL:SETQ
     SYM-STELLA-IN-LIKE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "LIKE" NULL 0))
    (CL:SETQ
     KWD-STELLA-IN-ALLOCATION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "ALLOCATION" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-READER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "READER" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-WRITER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WRITER" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-INVERSE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "INVERSE" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-RENAMES
     (INTERN-RIGID-SYMBOL-WRT-MODULE "RENAMES" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-REQUIRED?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "REQUIRED?" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-COMPONENT?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "COMPONENT?" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-READ-ONLY?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "READ-ONLY?" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-CONTEXT-SENSITIVE?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTEXT-SENSITIVE?" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-HARDWIRED?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "HARDWIRED?" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-OPTION-KEYWORD
     (INTERN-RIGID-SYMBOL-WRT-MODULE "OPTION-KEYWORD" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-OPTION-HANDLER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "OPTION-HANDLER" NULL 2))
    (CL:SETQ
     SYM-STELLA-IN-SETTER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SETTER" NULL 0))
    (CL:SETQ
     KWD-STELLA-IN-RETURN-TYPES
     (INTERN-RIGID-SYMBOL-WRT-MODULE "RETURN-TYPES" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-STORAGE-SLOT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STORAGE-SLOT" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-INHERITS-THROUGH
     (INTERN-RIGID-SYMBOL-WRT-MODULE "INHERITS-THROUGH" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-SETTER?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SETTER?" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-NATIVE?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NATIVE?" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-AUXILIARY?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "AUXILIARY?" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-GLOBALLY-INLINE?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "GLOBALLY-INLINE?" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-COMMAND?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "COMMAND?" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-LISP-MACRO?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "LISP-MACRO?" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-EVALUATE-ARGUMENTS?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "EVALUATE-ARGUMENTS?" NULL 2))
    (CL:SETQ
     KWD-STELLA-IN-INLINE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "INLINE" NULL 2))
    (CL:SETQ
     SYM-STELLA-IN-DEFUN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFUN" NULL 0))
    (CL:SETQ
     KWD-STELLA-IN-DYNAMIC
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DYNAMIC" NULL 2))
    (CL:SETQ
     SGT-STELLA-IN-DYNAMIC-SLOTS-MIXIN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DYNAMIC-SLOTS-MIXIN" NULL 1))
    (CL:SETQ
     SYM-STELLA-IN-SLOT-OPTION-KEYWORD
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SLOT-OPTION-KEYWORD" NULL 0))
    (CL:SETQ
     SYM-STELLA-IN-DEFAULT-OPTION-HANDLER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFAULT-OPTION-HANDLER" NULL 0))
    (CL:SETQ
     SYM-STELLA-IN-SLOT-OPTION-HANDLER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SLOT-OPTION-HANDLER" NULL 0))
    (CL:SETQ
     SGT-STELLA-IN-BOOLEAN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "BOOLEAN" NULL 1))
    (CL:SETQ
     SGT-STELLA-IN-MAPPABLE-OBJECT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MAPPABLE-OBJECT" NULL 1))
    (CL:SETQ
     SGT-STELLA-IN-CONTEXT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTEXT" NULL 1)))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 4) 1)
    (CL:SETQ
     *UNSUPPORTED-EXTERNAL-SLOT-OPTIONS*
     (LIST
      KWD-STELLA-IN-ALLOCATION
      KWD-STELLA-IN-INITIALLY
      KWD-STELLA-IN-CONTEXT-SENSITIVE?
      KWD-STELLA-IN-HARDWIRED?)))
   (CL:WHEN (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 6) 1) (FINALIZE-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 7) 1)
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PERMANENTIFY-FORM"
        "OBJECT"
        "(DEFUN (PERMANENTIFY-FORM OBJECT) ((FORM OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION PERMANENTIFY-FORM)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "TRANSIENTIFY-FORM"
        "OBJECT"
        "(DEFUN (TRANSIENTIFY-FORM OBJECT) ((FORM OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION TRANSIENTIFY-FORM)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "COLLECT-FEATURE-LIST"
        "OBJECT"
        "(DEFUN (COLLECT-FEATURE-LIST (LIST OF GENERALIZED-SYMBOL)) ((TREE OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION COLLECT-FEATURE-LIST)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "COLLECT-KEY-VALUE-LIST"
        "OBJECT"
        "(DEFUN (COLLECT-KEY-VALUE-LIST (KEY-VALUE-LIST OF GENERALIZED-SYMBOL OBJECT)) ((TREE OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION COLLECT-KEY-VALUE-LIST)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DEFINE-INLINE-METHOD"
        "SYMBOL"
        "(DEFUN (DEFINE-INLINE-METHOD METHOD-SLOT) ((NAME SYMBOL) (PARAMETERSANDBODY CONS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION DEFINE-INLINE-METHOD)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "HELP-DEFINE-CLASS-FROM-PARSE-TREE"
        "CONS"
        "(DEFUN (HELP-DEFINE-CLASS-FROM-PARSE-TREE CLASS) ((PARSETREE CONS) (STRINGIFIEDSOURCE STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION HELP-DEFINE-CLASS-FROM-PARSE-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DEFINE-STORAGE-SLOT-FROM-PARSE-TREE"
        "CONS"
        "(DEFUN (DEFINE-STORAGE-SLOT-FROM-PARSE-TREE STORAGE-SLOT) ((SLOTDEF CONS) (OWNER TYPE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION DEFINE-STORAGE-SLOT-FROM-PARSE-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "GET-IDENTICAL-CLASS"
        "STRING"
        "(DEFUN (GET-IDENTICAL-CLASS CLASS) ((CLASSNAME STRING) (STRINGIFIEDSOURCE STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION GET-IDENTICAL-CLASS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DEFINE-CLASS-FROM-PARSE-TREE"
        "CONS"
        "(DEFUN (DEFINE-CLASS-FROM-PARSE-TREE CLASS) ((PARSETREE CONS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION DEFINE-CLASS-FROM-PARSE-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DEFINE-CLASS-FROM-STRINGIFIED-SOURCE"
        "STRING"
        "(DEFUN (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE CLASS) ((CLASSNAME STRING) (STRINGIFIEDSOURCE STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION DEFINE-CLASS-FROM-STRINGIFIED-SOURCE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "EXTRACT-OPTIONS"
        "CONS"
        "(DEFUN (EXTRACT-OPTIONS CONS) ((TREE CONS) (OPTIONSTABLE KEY-VALUE-LIST)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION EXTRACT-OPTIONS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DESTRUCTURE-DEFMETHOD-TREE"
        "CONS"
        "(DEFUN (DESTRUCTURE-DEFMETHOD-TREE OBJECT CONS CONS) ((METHODTREE CONS) (OPTIONSTABLE KEY-VALUE-LIST)) :DOCUMENTATION \"Return three parse trees representing the name,
parameters, and code body of the parse tree 'methodTree'.  Fill
'optionsTable' with a dictionary of method options.
Storage note:  Options are treated specially because the other return
values are subtrees of 'methodTree', while 'optionsTable' is a newly-created
cons tree.  Note also, the parameter and body trees are destructively
removed from 'methodTree'.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION DESTRUCTURE-DEFMETHOD-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-SETTER-METHOD-NAME"
        "SYMBOL"
        "(DEFUN (YIELD-SETTER-METHOD-NAME SYMBOL) ((METHODNAME SYMBOL)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-SETTER-METHOD-NAME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DESTRUCTURE-METHOD-NAME-TREE"
        "OBJECT"
        "(DEFUN (DESTRUCTURE-METHOD-NAME-TREE SYMBOL CONS) ((NAMETREE OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION DESTRUCTURE-METHOD-NAME-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "IN-PLACE-NORMALIZE-METHOD-OPTIONS"
        "KEYWORD-KEY-VALUE-LIST"
        "(DEFUN IN-PLACE-NORMALIZE-METHOD-OPTIONS ((METHODOPTIONS KEYWORD-KEY-VALUE-LIST) (METHODNAME SYMBOL)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION IN-PLACE-NORMALIZE-METHOD-OPTIONS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "GET-FUNCTION-WITH-IDENTICAL-SIGNATURE"
        "SYMBOL"
        "(DEFUN (GET-FUNCTION-WITH-IDENTICAL-SIGNATURE METHOD-SLOT) ((NAME SYMBOL) (STRINGIFIEDSOURCE STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION GET-FUNCTION-WITH-IDENTICAL-SIGNATURE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "GET-METHOD-WITH-IDENTICAL-SIGNATURE"
        "SYMBOL"
        "(DEFUN (GET-METHOD-WITH-IDENTICAL-SIGNATURE METHOD-SLOT) ((NAME SYMBOL) (PARAMETERSTREE CONS) (STRINGIFIEDSOURCE STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION GET-METHOD-WITH-IDENTICAL-SIGNATURE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "HELP-DEFINE-METHOD-FROM-PARSE-TREE"
        "CONS"
        "(DEFUN (HELP-DEFINE-METHOD-FROM-PARSE-TREE METHOD-SLOT BOOLEAN) ((INPUTTREE CONS) (STRINGIFIEDSOURCE STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION HELP-DEFINE-METHOD-FROM-PARSE-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DEFINE-METHOD-FROM-PARSE-TREE"
        "CONS"
        "(DEFUN (DEFINE-METHOD-FROM-PARSE-TREE METHOD-SLOT) ((PARSETREE CONS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION DEFINE-METHOD-FROM-PARSE-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "STRINGIFY-METHOD-DEFINITION-TREE"
        "CONS"
        "(DEFUN (STRINGIFY-METHOD-DEFINITION-TREE STRING) ((PARSETREE CONS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION STRINGIFY-METHOD-DEFINITION-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DEFINE-METHOD-FROM-STRINGIFIED-SOURCE"
        "STRING"
        "(DEFUN (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE METHOD-SLOT) ((METHODNAME STRING) (CLASSNAME STRING) (STRINGIFIEDSOURCE STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION DEFINE-METHOD-FROM-STRINGIFIED-SOURCE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DEFINE-EXTERNAL-SLOT-FROM-PARSE-TREE"
        "CONS"
        "(DEFUN (DEFINE-EXTERNAL-SLOT-FROM-PARSE-TREE STORAGE-SLOT) ((PARSETREE CONS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION DEFINE-EXTERNAL-SLOT-FROM-PARSE-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DEFINE-EXTERNAL-SLOT-FROM-STRINGIFIED-SOURCE"
        "STRING"
        "(DEFUN (DEFINE-EXTERNAL-SLOT-FROM-STRINGIFIED-SOURCE STORAGE-SLOT) ((STRINGIFIEDSOURCE STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION DEFINE-EXTERNAL-SLOT-FROM-STRINGIFIED-SOURCE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "LOOKUP-SLOT-FROM-OPTION-KEYWORD"
        "TYPE"
        "(DEFUN (LOOKUP-SLOT-FROM-OPTION-KEYWORD STORAGE-SLOT) ((OWNER TYPE) (KEYWORD KEYWORD)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION LOOKUP-SLOT-FROM-OPTION-KEYWORD)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "LOOKUP-OPTION-HANDLER"
        "STORAGE-SLOT"
        "(DEFUN (LOOKUP-OPTION-HANDLER METHOD-SLOT) ((SLOT STORAGE-SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION LOOKUP-OPTION-HANDLER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "RUN-OPTION-HANDLER?"
        "OBJECT"
        "(DEFUN (RUN-OPTION-HANDLER? BOOLEAN) ((OBJECT OBJECT) (OPTION KEYWORD) (VALUETREE OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION RUN-OPTION-HANDLER?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DEFAULT-OPTION-HANDLER"
        "OBJECT"
        "(DEFUN DEFAULT-OPTION-HANDLER ((SELF OBJECT) (SLOT STORAGE-SLOT) (TREE OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION DEFAULT-OPTION-HANDLER)))
    (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
     "STARTUP-STELLA-IN"
     NULL
     "(DEFUN STARTUP-STELLA-IN ())"))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 8) 1)
    (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 9) 1)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *REDEFINE-IDENTICAL-CLASSES?* BOOLEAN FALSE :DOCUMENTATION \"If TRUE, always redefine classes, even if an
                  identical class exists\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *UNSUPPORTED-EXTERNAL-SLOT-OPTIONS* (LIST OF KEYWORD) (LIST :ALLOCATION :INITIALLY :CONTEXT-SENSITIVE? :HARDWIRED?))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *DEFAULT-OPTION-HANDLER* METHOD-SLOT NULL)")
    (CL:SETQ
     *DEFAULT-OPTION-HANDLER*
     (LOOKUP-FUNCTION SYM-STELLA-IN-DEFAULT-OPTION-HANDLER))))
  :VOID)
