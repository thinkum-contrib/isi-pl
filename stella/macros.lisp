;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

#|--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1996, 1997             | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied "AS IS",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SYM-MACROS-SETQ NULL)
(CL:DEFVAR SYM-MACROS-CONS NULL)
(CL:DEFVAR SYM-MACROS-PUSHQ NULL)
(CL:DEFVAR SYM-MACROS-PUSHQ-EXPANDER NULL)
(CL:DEFVAR SYM-MACROS-VRLET NULL)
(CL:DEFVAR SYM-MACROS-VALUE NULL)
(CL:DEFVAR SYM-MACROS-REST NULL)
(CL:DEFVAR SYM-MACROS-POPQ NULL)
(CL:DEFVAR SYM-MACROS-POPQ-EXPANDER NULL)
(CL:DEFVAR SYM-MACROS-SETF NULL)
(CL:DEFVAR SYM-MACROS-PUSHF NULL)
(CL:DEFVAR SYM-MACROS-PUSHF-EXPANDER NULL)
(CL:DEFVAR SYM-MACROS-UNSTRINGIFY NULL)
(CL:DEFVAR SYM-MACROS-STRING-QUOTE NULL)
(CL:DEFVAR SYM-MACROS-STRING-QUOTE-EXPANDER NULL)
(CL:DEFVAR SYM-MACROS-+ NULL)
(CL:DEFVAR SYM-MACROS-++ NULL)
(CL:DEFVAR SYM-MACROS-++-EXPANDER NULL)
(CL:DEFVAR SYM-MACROS-- NULL)
(CL:DEFVAR SYM-MACROS--- NULL)
(CL:DEFVAR SYM-MACROS----EXPANDER NULL)
(CL:DEFVAR SYM-MACROS-1+ NULL)
(CL:DEFVAR SYM-MACROS-1+-EXPANDER NULL)
(CL:DEFVAR SYM-MACROS-1- NULL)
(CL:DEFVAR SYM-MACROS-1--EXPANDER NULL)
(CL:DEFVAR SYM-MACROS-DEFINED? NULL)
(CL:DEFVAR SYM-MACROS-SETQ? NULL)
(CL:DEFVAR SYM-MACROS-SETQ?-EXPANDER NULL)
(CL:DEFVAR SYM-MACROS-SPECIAL NULL)
(CL:DEFVAR SYM-MACROS-*TRANSIENTOBJECTS?* NULL)
(CL:DEFVAR SYM-MACROS-FALSE NULL)
(CL:DEFVAR SYM-MACROS-WITH-PERMANENT-OBJECTS NULL)
(CL:DEFVAR SYM-MACROS-WITH-PERMANENT-OBJECTS-EXPANDER NULL)
(CL:DEFVAR SYM-MACROS-TRUE NULL)
(CL:DEFVAR SYM-MACROS-WITH-TRANSIENT-OBJECTS NULL)
(CL:DEFVAR SYM-MACROS-WITH-TRANSIENT-OBJECTS-EXPANDER NULL)
(CL:DEFVAR SYM-MACROS-IGNORE NULL)
(CL:DEFVAR SYM-MACROS-IGNORE-EXPANDER NULL)
(CL:DEFVAR SYM-MACROS-CHOOSE NULL)
(CL:DEFVAR SYM-MACROS-NULL NULL)
(CL:DEFVAR SYM-MACROS-ONLY-IF NULL)
(CL:DEFVAR SYM-MACROS-ONLY-IF-EXPANDER NULL)
(CL:DEFVAR SYM-MACROS-PHASE-TO-INTEGER NULL)
(CL:DEFVAR SYM-MACROS-PHASE-TO-INTEGER-EXPANDER NULL)
(CL:DEFVAR SYM-MACROS-IF-OUTPUT-LANGUAGE NULL)
(CL:DEFVAR SYM-MACROS-IF-OUTPUT-LANGUAGE-EXPANDER NULL)
(CL:DEFVAR SYM-MACROS-*CONTEXT* NULL)
(CL:DEFVAR SYM-MACROS-SAFETY NULL)
(CL:DEFVAR SYM-MACROS-EQL? NULL)
(CL:DEFVAR SYM-MACROS-BASE-MODULE NULL)
(CL:DEFVAR SYM-MACROS-CAST NULL)
(CL:DEFVAR SYM-MACROS-WORLD NULL)
(CL:DEFVAR SYM-MACROS-*MODULE* NULL)
(CL:DEFVAR SYM-MACROS-WITHIN-WORLD NULL)
(CL:DEFVAR SYM-MACROS-WITHIN-WORLD-EXPANDER NULL)
(CL:DEFVAR SYM-MACROS-LET NULL)
(CL:DEFVAR SYM-MACROS-WITHIN-MODULE NULL)
(CL:DEFVAR SYM-MACROS-WITHIN-MODULE-EXPANDER NULL)
(CL:DEFVAR SYM-MACROS-IN NULL)
(CL:DEFVAR SYM-MACROS-AS NULL)
(CL:DEFVAR SYM-MACROS-COMMA NULL)

;;; Forward declarations:

(CL:DECLAIM (CL:SPECIAL *STELLA-MODULE* *MODULE*))

;;; (DEFMACRO PUSHQ ...)

(CL:DEFUN PUSHQ-EXPANDER (VARIABLE VALUE)
  "Push 'value' onto the cons list 'variable'."
  (CL:RETURN-FROM
   PUSHQ-EXPANDER
   (LIST*
    SYM-MACROS-SETQ
    VARIABLE
    (CONS (LIST* SYM-MACROS-CONS VALUE (CONS VARIABLE NIL)) NIL)))
  :VOID)

;;; (DEFMACRO POPQ ...)

(CL:DEFUN POPQ-EXPANDER (VARIABLE)
  "Pops a value from the cons list 'variable'."
  (CL:LET*
   ((VALUEVAR (LOCAL-GENSYM "CONS")))
   (CL:RETURN-FROM
    POPQ-EXPANDER
    (LIST*
     SYM-MACROS-VRLET
     (CONS
      (CONS VALUEVAR (CONS (LIST* SYM-MACROS-VALUE VARIABLE NIL) NIL))
      NIL)
     (LIST*
      SYM-MACROS-SETQ
      VARIABLE
      (CONS (LIST* SYM-MACROS-REST VARIABLE NIL) NIL))
     VALUEVAR
     NIL)))
  :VOID)

;;; (DEFMACRO PUSHF ...)

(CL:DEFUN PUSHF-EXPANDER (PLACE VALUE)
  "Push 'value' onto the cons list 'place'."
  (CL:LET*
   ((PLACECOPY (COPY-CONS-TREE PLACE)))
   (CL:RETURN-FROM
    PUSHF-EXPANDER
    (LIST*
     SYM-MACROS-SETF
     PLACE
     (CONS (LIST* SYM-MACROS-CONS VALUE (CONS PLACECOPY NIL)) NIL))))
  :VOID)

;;; (DEFMACRO STRING-QUOTE ...)

(CL:DEFUN STRING-QUOTE-EXPANDER (TREE)
  "Return a parse tree that evaluates to 'tree' at
run-time.  'tree' is encoded as a string within the parse tree."
  (CL:RETURN-FROM
   STRING-QUOTE-EXPANDER
   (LIST* SYM-MACROS-UNSTRINGIFY (WRAP-LITERAL (STRINGIFY TREE)) NIL))
  :VOID)

;;; (DEFMACRO ++ ...)

(CL:DEFUN ++-EXPANDER (PLACE)
  "Increment the value of 'place' and return the result."
  (CL:RETURN-FROM
   ++-EXPANDER
   (CL:IF
    (CL:EQ (SYMBOL? PLACE) 1)
    (LIST*
     SYM-MACROS-SETQ
     PLACE
     (CONS (LIST* SYM-MACROS-+ PLACE (CONS (WRAP-LITERAL 1) NIL)) NIL))
    (LIST*
     SYM-MACROS-SETF
     PLACE
     (CONS
      (LIST* SYM-MACROS-+ (COPY-CONS-TREE PLACE) (CONS (WRAP-LITERAL 1) NIL))
      NIL))))
  :VOID)

;;; (DEFMACRO -- ...)

(CL:DEFUN ---EXPANDER (PLACE)
  "Decrement the value of 'place' and return the result."
  (CL:RETURN-FROM
   ---EXPANDER
   (CL:IF
    (CL:EQ (SYMBOL? PLACE) 1)
    (LIST*
     SYM-MACROS-SETQ
     PLACE
     (CONS (LIST* SYM-MACROS-- PLACE (CONS (WRAP-LITERAL 1) NIL)) NIL))
    (LIST*
     SYM-MACROS-SETF
     PLACE
     (CONS
      (LIST* SYM-MACROS-- (COPY-CONS-TREE PLACE) (CONS (WRAP-LITERAL 1) NIL))
      NIL))))
  :VOID)

;;; (DEFMACRO 1+ ...)

(CL:DEFUN 1+-EXPANDER (EXPRESSION)
  "Add 1 to 'expression' and return the result."
  (CL:RETURN-FROM
   1+-EXPANDER
   (LIST* SYM-MACROS-+ EXPRESSION (CONS (WRAP-LITERAL 1) NIL)))
  :VOID)

;;; (DEFMACRO 1- ...)

(CL:DEFUN 1--EXPANDER (EXPRESSION)
  "Subtract 1 from 'expression' and return the result."
  (CL:RETURN-FROM
   1--EXPANDER
   (LIST* SYM-MACROS-- EXPRESSION (CONS (WRAP-LITERAL 1) NIL)))
  :VOID)

;;; (DEFMACRO SETQ? ...)

(CL:DEFUN SETQ?-EXPANDER (VARIABLE EXPRESSION)
  "Assign 'variable' the result of evaluating 'expression', 
and return TRUE if 'expression' is not NULL else return FALSE."
  (CL:RETURN-FROM
   SETQ?-EXPANDER
   (LIST*
    SYM-MACROS-VRLET
    NIL
    (LIST* SYM-MACROS-SETQ VARIABLE (CONS EXPRESSION NIL))
    (LIST* SYM-MACROS-DEFINED? VARIABLE NIL)
    NIL))
  :VOID)

;;; (DEFMACRO WITH-PERMANENT-OBJECTS ...)

(CL:DEFUN WITH-PERMANENT-OBJECTS-EXPANDER (BODY)
  "Allocate 'permanent' (as opposed to 'transient')
objects within the scope of this declaration."
  (CL:RETURN-FROM
   WITH-PERMANENT-OBJECTS-EXPANDER
   (LIST*
    SYM-MACROS-SPECIAL
    (CONS (LIST* SYM-MACROS-*TRANSIENTOBJECTS?* SYM-MACROS-FALSE NIL) NIL)
    (CONCATENATE BODY NIL)))
  :VOID)

;;; (DEFMACRO WITH-TRANSIENT-OBJECTS ...)

(CL:DEFUN WITH-TRANSIENT-OBJECTS-EXPANDER (BODY)
  "Allocate 'transient' (as opposed to 'permanent')
objects within the scope of this declaration."
  (CL:RETURN-FROM
   WITH-TRANSIENT-OBJECTS-EXPANDER
   (LIST*
    SYM-MACROS-SPECIAL
    (CONS (LIST* SYM-MACROS-*TRANSIENTOBJECTS?* SYM-MACROS-TRUE NIL) NIL)
    (CONCATENATE BODY NIL)))
  :VOID)

;;; (DEFMACRO IGNORE ...)

(CL:DEFUN IGNORE-EXPANDER (VARIABLES)
  "Ignore unused 'variables' with NoOp 'setq' statements."
  (CL:LET*
   ((IGNORETREES NIL))
   (CL:LET*
    ((VARIABLE NULL) (ITER-001 VARIABLES) (COLLECT-001 NULL))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ VARIABLE (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:IF
      (CL:EQ COLLECT-001 NULL)
      (CL:PROGN
       (CL:SETQ
        COLLECT-001
        (CONS (LIST* SYM-MACROS-SETQ VARIABLE (CONS VARIABLE NIL)) NIL))
       (CL:IF
        (CL:EQ IGNORETREES NIL)
        (CL:SETQ IGNORETREES COLLECT-001)
        (ADD-CONS-TO-END-OF-CONS-LIST IGNORETREES COLLECT-001)))
      (CL:PROGN
       (CL:SETF
        (CLSYS-SVAL CONS REST COLLECT-001)
        (CONS (LIST* SYM-MACROS-SETQ VARIABLE (CONS VARIABLE NIL)) NIL))
       (CL:SETQ COLLECT-001 (CLSYS-SVAL CONS REST COLLECT-001))))))
   (CL:RETURN-FROM IGNORE-EXPANDER (PROGNIFY IGNORETREES)))
  :VOID)

;;; (DEFMACRO ONLY-IF ...)

(CL:DEFUN ONLY-IF-EXPANDER (TEST EXPRESSION)
  "If 'test' is TRUE, return the result of evaluating 
'expression'."
  (CL:RETURN-FROM
   ONLY-IF-EXPANDER
   (LIST* SYM-MACROS-CHOOSE TEST (CONS EXPRESSION (CONS SYM-MACROS-NULL NIL))))
  :VOID)

;;; (DEFMACRO PHASE-TO-INTEGER ...)

(CL:DEFUN PHASE-TO-INTEGER-EXPANDER (STARTUPTIMEPHASE)
  "Expands into the integer representing 'startupTimePhase'."
  (CL:RETURN-FROM
   PHASE-TO-INTEGER-EXPANDER
   (WRAP-LITERAL (ENCODE-STARTUP-TIME-PHASE STARTUPTIMEPHASE)))
  :VOID)

;;; (DEFMACRO IF-OUTPUT-LANGUAGE ...)

(CL:DEFUN IF-OUTPUT-LANGUAGE-EXPANDER (LANGUAGE THENFORM ELSEFORM)
  "Expand to 'thenForm' if the current translator output
language equals 'language'.  Otherwise, expand to 'elseForm'.  This can
be used to conditionally translate Stella code."
  (CL:IF
   (CL:EQ LANGUAGE (TRANSLATOR-OUTPUT-LANGUAGE))
   (CL:RETURN-FROM
    IF-OUTPUT-LANGUAGE-EXPANDER
    (CL:IF (CL:EQ THENFORM SYM-MACROS-NULL) NULL THENFORM))
   (CL:RETURN-FROM
    IF-OUTPUT-LANGUAGE-EXPANDER
    (CL:IF (CL:EQ ELSEFORM SYM-MACROS-NULL) NULL ELSEFORM)))
  :VOID)

;;; (DEFMACRO WITHIN-WORLD ...)

(CL:DEFUN WITHIN-WORLD-EXPANDER (WORLDFORM BODY)
  "Execute `body' within the world resulting from `worldForm'."
  (CL:RETURN-FROM
   WITHIN-WORLD-EXPANDER
   (LIST*
    SYM-MACROS-SPECIAL
    (CONS (LIST* SYM-MACROS-*CONTEXT* WORLDFORM NIL) NIL)
    (LIST*
     SYM-MACROS-SAFETY
     (WRAP-LITERAL 3)
     (LIST*
      SYM-MACROS-EQL?
      (LIST*
       SYM-MACROS-BASE-MODULE
       (LIST* SYM-MACROS-CAST SYM-MACROS-*CONTEXT* SYM-MACROS-WORLD NIL)
       NIL)
      SYM-MACROS-*MODULE*
      NIL)
     (WRAP-LITERAL "within-world: world ")
     SYM-MACROS-*CONTEXT*
     (WRAP-LITERAL " does not have a base module")
     NIL)
    (CONCATENATE BODY NIL)))
  :VOID)

;;; (DEFMACRO WITHIN-MODULE ...)

(CL:DEFUN WITHIN-MODULE-EXPANDER (MODULEFORM BODY)
  "Execute `body' within the module resulting from `moduleForm'.
`*module*' is an acceptable `moduleForm'.  It will locally rebind 
`*module*' and `*context*' and shield the outer bindings from changes."
  (CL:IF
   (CL:EQ MODULEFORM SYM-MACROS-*MODULE*)
   (CL:LET*
    ((TEMPVAR (LOCAL-GENSYM "MODULE")))
    (CL:RETURN-FROM
     WITHIN-MODULE-EXPANDER
     (LIST*
      SYM-MACROS-LET
      (CONS (CONS TEMPVAR (CONS SYM-MACROS-*MODULE* NIL)) NIL)
      (LIST*
       SYM-MACROS-SPECIAL
       (LIST*
        (LIST* SYM-MACROS-*MODULE* TEMPVAR NIL)
        (LIST* SYM-MACROS-*CONTEXT* SYM-MACROS-*MODULE* NIL)
        NIL)
       (CONCATENATE BODY NIL))
      NIL)))
   (CL:RETURN-FROM
    WITHIN-MODULE-EXPANDER
    (LIST*
     SYM-MACROS-SPECIAL
     (LIST*
      (LIST* SYM-MACROS-*MODULE* MODULEFORM NIL)
      (LIST* SYM-MACROS-*CONTEXT* SYM-MACROS-*MODULE* NIL)
      NIL)
     (CONCATENATE BODY NIL))))
  :VOID)

;;; (DEFUN (EXTRACT-OUTPUT-EXPRESSIONS-FROM-SELECT CONS) ...)

(CL:DEFUN EXTRACT-OUTPUT-EXPRESSIONS-FROM-SELECT (SELECTBODY)
  (CL:LET*
   ((OUTPUTS NULL) (TAIL SELECTBODY))
   (CL:LOOP
    WHILE
    (CL:NOT (CL:EQ TAIL NULL))
    DO
    (CL:WHEN
     (CL:EQ
      (MEMBER?
       (GET-QUOTED-TREE "((WHERE FROM) \"/STELLA\")" "/STELLA")
       (CLSYS-SVAL CONS VALUE TAIL))
      1)
     (CL:RETURN))
    (CL:SETQ OUTPUTS (CONS (CLSYS-SVAL CONS VALUE TAIL) OUTPUTS))
    (CL:SETQ TAIL (CLSYS-SVAL CONS REST TAIL))
    (CL:LET*
     ((TEST-VALUE-001 (FIRST TAIL)))
     (CL:COND
      ((CL:EQ TEST-VALUE-001 SYM-MACROS-IN)
       (CL:SETQ TAIL (CLSYS-SVAL CONS REST (CLSYS-SVAL CONS REST TAIL))))
      ((CL:OR
        (CL:EQ TEST-VALUE-001 SYM-MACROS-AS)
        (CL:EQ TEST-VALUE-001 SYM-MACROS-COMMA))
       (CL:SETQ TAIL (CLSYS-SVAL CONS REST TAIL)))
      (CL:T NULL))))
   (CL:RETURN-FROM EXTRACT-OUTPUT-EXPRESSIONS-FROM-SELECT (REVERSE OUTPUTS)))
  :VOID)

(CL:DEFUN STARTUP-MACROS ()
  (CL:LET*
   ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 2) 1)
    (CL:SETQ SYM-MACROS-SETQ (INTERN-RIGID-SYMBOL-WRT-MODULE "SETQ" NULL 0))
    (CL:SETQ SYM-MACROS-CONS (INTERN-RIGID-SYMBOL-WRT-MODULE "CONS" NULL 0))
    (CL:SETQ SYM-MACROS-PUSHQ (INTERN-RIGID-SYMBOL-WRT-MODULE "PUSHQ" NULL 0))
    (CL:SETQ
     SYM-MACROS-PUSHQ-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PUSHQ-EXPANDER" NULL 0))
    (CL:SETQ SYM-MACROS-VRLET (INTERN-RIGID-SYMBOL-WRT-MODULE "VRLET" NULL 0))
    (CL:SETQ SYM-MACROS-VALUE (INTERN-RIGID-SYMBOL-WRT-MODULE "VALUE" NULL 0))
    (CL:SETQ SYM-MACROS-REST (INTERN-RIGID-SYMBOL-WRT-MODULE "REST" NULL 0))
    (CL:SETQ SYM-MACROS-POPQ (INTERN-RIGID-SYMBOL-WRT-MODULE "POPQ" NULL 0))
    (CL:SETQ
     SYM-MACROS-POPQ-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "POPQ-EXPANDER" NULL 0))
    (CL:SETQ SYM-MACROS-SETF (INTERN-RIGID-SYMBOL-WRT-MODULE "SETF" NULL 0))
    (CL:SETQ SYM-MACROS-PUSHF (INTERN-RIGID-SYMBOL-WRT-MODULE "PUSHF" NULL 0))
    (CL:SETQ
     SYM-MACROS-PUSHF-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PUSHF-EXPANDER" NULL 0))
    (CL:SETQ
     SYM-MACROS-UNSTRINGIFY
     (INTERN-RIGID-SYMBOL-WRT-MODULE "UNSTRINGIFY" NULL 0))
    (CL:SETQ
     SYM-MACROS-STRING-QUOTE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STRING-QUOTE" NULL 0))
    (CL:SETQ
     SYM-MACROS-STRING-QUOTE-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STRING-QUOTE-EXPANDER" NULL 0))
    (CL:SETQ SYM-MACROS-+ (INTERN-RIGID-SYMBOL-WRT-MODULE "+" NULL 0))
    (CL:SETQ SYM-MACROS-++ (INTERN-RIGID-SYMBOL-WRT-MODULE "++" NULL 0))
    (CL:SETQ
     SYM-MACROS-++-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "++-EXPANDER" NULL 0))
    (CL:SETQ SYM-MACROS-- (INTERN-RIGID-SYMBOL-WRT-MODULE "-" NULL 0))
    (CL:SETQ SYM-MACROS--- (INTERN-RIGID-SYMBOL-WRT-MODULE "--" NULL 0))
    (CL:SETQ
     SYM-MACROS----EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "---EXPANDER" NULL 0))
    (CL:SETQ SYM-MACROS-1+ (INTERN-RIGID-SYMBOL-WRT-MODULE "1+" NULL 0))
    (CL:SETQ
     SYM-MACROS-1+-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "1+-EXPANDER" NULL 0))
    (CL:SETQ SYM-MACROS-1- (INTERN-RIGID-SYMBOL-WRT-MODULE "1-" NULL 0))
    (CL:SETQ
     SYM-MACROS-1--EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "1--EXPANDER" NULL 0))
    (CL:SETQ
     SYM-MACROS-DEFINED?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFINED?" NULL 0))
    (CL:SETQ SYM-MACROS-SETQ? (INTERN-RIGID-SYMBOL-WRT-MODULE "SETQ?" NULL 0))
    (CL:SETQ
     SYM-MACROS-SETQ?-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SETQ?-EXPANDER" NULL 0))
    (CL:SETQ
     SYM-MACROS-SPECIAL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SPECIAL" NULL 0))
    (CL:SETQ
     SYM-MACROS-*TRANSIENTOBJECTS?*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "*TRANSIENTOBJECTS?*" NULL 0))
    (CL:SETQ SYM-MACROS-FALSE (INTERN-RIGID-SYMBOL-WRT-MODULE "FALSE" NULL 0))
    (CL:SETQ
     SYM-MACROS-WITH-PERMANENT-OBJECTS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WITH-PERMANENT-OBJECTS" NULL 0))
    (CL:SETQ
     SYM-MACROS-WITH-PERMANENT-OBJECTS-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE
      "WITH-PERMANENT-OBJECTS-EXPANDER"
      NULL
      0))
    (CL:SETQ SYM-MACROS-TRUE (INTERN-RIGID-SYMBOL-WRT-MODULE "TRUE" NULL 0))
    (CL:SETQ
     SYM-MACROS-WITH-TRANSIENT-OBJECTS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WITH-TRANSIENT-OBJECTS" NULL 0))
    (CL:SETQ
     SYM-MACROS-WITH-TRANSIENT-OBJECTS-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE
      "WITH-TRANSIENT-OBJECTS-EXPANDER"
      NULL
      0))
    (CL:SETQ
     SYM-MACROS-IGNORE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "IGNORE" NULL 0))
    (CL:SETQ
     SYM-MACROS-IGNORE-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "IGNORE-EXPANDER" NULL 0))
    (CL:SETQ
     SYM-MACROS-CHOOSE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CHOOSE" NULL 0))
    (CL:SETQ SYM-MACROS-NULL (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL" NULL 0))
    (CL:SETQ
     SYM-MACROS-ONLY-IF
     (INTERN-RIGID-SYMBOL-WRT-MODULE "ONLY-IF" NULL 0))
    (CL:SETQ
     SYM-MACROS-ONLY-IF-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "ONLY-IF-EXPANDER" NULL 0))
    (CL:SETQ
     SYM-MACROS-PHASE-TO-INTEGER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PHASE-TO-INTEGER" NULL 0))
    (CL:SETQ
     SYM-MACROS-PHASE-TO-INTEGER-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PHASE-TO-INTEGER-EXPANDER" NULL 0))
    (CL:SETQ
     SYM-MACROS-IF-OUTPUT-LANGUAGE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "IF-OUTPUT-LANGUAGE" NULL 0))
    (CL:SETQ
     SYM-MACROS-IF-OUTPUT-LANGUAGE-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "IF-OUTPUT-LANGUAGE-EXPANDER" NULL 0))
    (CL:SETQ
     SYM-MACROS-*CONTEXT*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "*CONTEXT*" NULL 0))
    (CL:SETQ
     SYM-MACROS-SAFETY
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SAFETY" NULL 0))
    (CL:SETQ SYM-MACROS-EQL? (INTERN-RIGID-SYMBOL-WRT-MODULE "EQL?" NULL 0))
    (CL:SETQ
     SYM-MACROS-BASE-MODULE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "BASE-MODULE" NULL 0))
    (CL:SETQ SYM-MACROS-CAST (INTERN-RIGID-SYMBOL-WRT-MODULE "CAST" NULL 0))
    (CL:SETQ SYM-MACROS-WORLD (INTERN-RIGID-SYMBOL-WRT-MODULE "WORLD" NULL 0))
    (CL:SETQ
     SYM-MACROS-*MODULE*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "*MODULE*" NULL 0))
    (CL:SETQ
     SYM-MACROS-WITHIN-WORLD
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WITHIN-WORLD" NULL 0))
    (CL:SETQ
     SYM-MACROS-WITHIN-WORLD-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WITHIN-WORLD-EXPANDER" NULL 0))
    (CL:SETQ SYM-MACROS-LET (INTERN-RIGID-SYMBOL-WRT-MODULE "LET" NULL 0))
    (CL:SETQ
     SYM-MACROS-WITHIN-MODULE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WITHIN-MODULE" NULL 0))
    (CL:SETQ
     SYM-MACROS-WITHIN-MODULE-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WITHIN-MODULE-EXPANDER" NULL 0))
    (CL:SETQ SYM-MACROS-IN (INTERN-RIGID-SYMBOL-WRT-MODULE "IN" NULL 0))
    (CL:SETQ SYM-MACROS-AS (INTERN-RIGID-SYMBOL-WRT-MODULE "AS" NULL 0))
    (CL:SETQ
     SYM-MACROS-COMMA
     (INTERN-RIGID-SYMBOL-WRT-MODULE "COMMA" NULL 0)))
   (CL:WHEN (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 6) 1) (FINALIZE-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 7) 1)
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PUSHQ-EXPANDER"
        "CONS"
        "(DEFUN (PUSHQ-EXPANDER OBJECT) ((VARIABLE CONS) (VALUE OBJECT)) :DOCUMENTATION \"Push 'value' onto the cons list 'variable'.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION PUSHQ-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "POPQ-EXPANDER"
        "CONS"
        "(DEFUN (POPQ-EXPANDER OBJECT) ((VARIABLE CONS)) :DOCUMENTATION \"Pops a value from the cons list 'variable'.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION POPQ-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PUSHF-EXPANDER"
        "CONS"
        "(DEFUN (PUSHF-EXPANDER OBJECT) ((PLACE CONS) (VALUE OBJECT)) :DOCUMENTATION \"Push 'value' onto the cons list 'place'.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION PUSHF-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "STRING-QUOTE-EXPANDER"
        "OBJECT"
        "(DEFUN (STRING-QUOTE-EXPANDER OBJECT) ((TREE OBJECT)) :DOCUMENTATION \"Return a parse tree that evaluates to 'tree' at
run-time.  'tree' is encoded as a string within the parse tree.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION STRING-QUOTE-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "++-EXPANDER"
        "OBJECT"
        "(DEFUN (++-EXPANDER OBJECT) ((PLACE OBJECT)) :DOCUMENTATION \"Increment the value of 'place' and return the result.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION ++-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "---EXPANDER"
        "OBJECT"
        "(DEFUN (---EXPANDER OBJECT) ((PLACE OBJECT)) :DOCUMENTATION \"Decrement the value of 'place' and return the result.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION ---EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "1+-EXPANDER"
        "OBJECT"
        "(DEFUN (1+-EXPANDER OBJECT) ((EXPRESSION OBJECT)) :DOCUMENTATION \"Add 1 to 'expression' and return the result.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION 1+-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "1--EXPANDER"
        "OBJECT"
        "(DEFUN (1--EXPANDER OBJECT) ((EXPRESSION OBJECT)) :DOCUMENTATION \"Subtract 1 from 'expression' and return the result.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION 1--EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SETQ?-EXPANDER"
        "SYMBOL"
        "(DEFUN (SETQ?-EXPANDER OBJECT) ((VARIABLE SYMBOL) (EXPRESSION CONS)) :DOCUMENTATION \"Assign 'variable' the result of evaluating 'expression', 
and return TRUE if 'expression' is not NULL else return FALSE.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SETQ?-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "WITH-PERMANENT-OBJECTS-EXPANDER"
        "CONS"
        "(DEFUN (WITH-PERMANENT-OBJECTS-EXPANDER OBJECT) (|&BODY| (BODY CONS)) :DOCUMENTATION \"Allocate 'permanent' (as opposed to 'transient')
objects within the scope of this declaration.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION WITH-PERMANENT-OBJECTS-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "WITH-TRANSIENT-OBJECTS-EXPANDER"
        "CONS"
        "(DEFUN (WITH-TRANSIENT-OBJECTS-EXPANDER OBJECT) (|&BODY| (BODY CONS)) :DOCUMENTATION \"Allocate 'transient' (as opposed to 'permanent')
objects within the scope of this declaration.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION WITH-TRANSIENT-OBJECTS-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "IGNORE-EXPANDER"
        "CONS"
        "(DEFUN (IGNORE-EXPANDER OBJECT) (|&BODY| (VARIABLES CONS)) :DOCUMENTATION \"Ignore unused 'variables' with NoOp 'setq' statements.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION IGNORE-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "ONLY-IF-EXPANDER"
        "OBJECT"
        "(DEFUN (ONLY-IF-EXPANDER OBJECT) ((TEST OBJECT) (EXPRESSION OBJECT)) :DOCUMENTATION \"If 'test' is TRUE, return the result of evaluating 
'expression'.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION ONLY-IF-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PHASE-TO-INTEGER-EXPANDER"
        "KEYWORD"
        "(DEFUN (PHASE-TO-INTEGER-EXPANDER OBJECT) ((STARTUPTIMEPHASE KEYWORD)) :DOCUMENTATION \"Expands into the integer representing 'startupTimePhase'.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION PHASE-TO-INTEGER-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "IF-OUTPUT-LANGUAGE-EXPANDER"
        "KEYWORD"
        "(DEFUN (IF-OUTPUT-LANGUAGE-EXPANDER OBJECT) ((LANGUAGE KEYWORD) (THENFORM OBJECT) (ELSEFORM OBJECT)) :DOCUMENTATION \"Expand to 'thenForm' if the current translator output
language equals 'language'.  Otherwise, expand to 'elseForm'.  This can
be used to conditionally translate Stella code.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION IF-OUTPUT-LANGUAGE-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "WITHIN-WORLD-EXPANDER"
        "OBJECT"
        "(DEFUN (WITHIN-WORLD-EXPANDER OBJECT) ((WORLDFORM OBJECT) |&BODY| (BODY CONS)) :DOCUMENTATION \"Execute `body' within the world resulting from `worldForm'.\" :PUBLIC? TRUE)")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION WITHIN-WORLD-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "WITHIN-MODULE-EXPANDER"
        "OBJECT"
        "(DEFUN (WITHIN-MODULE-EXPANDER OBJECT) ((MODULEFORM OBJECT) |&BODY| (BODY CONS)) :DOCUMENTATION \"Execute `body' within the module resulting from `moduleForm'.
`*module*' is an acceptable `moduleForm'.  It will locally rebind 
`*module*' and `*context*' and shield the outer bindings from changes.\" :PUBLIC? TRUE)")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION WITHIN-MODULE-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "EXTRACT-OUTPUT-EXPRESSIONS-FROM-SELECT"
        "CONS"
        "(DEFUN (EXTRACT-OUTPUT-EXPRESSIONS-FROM-SELECT CONS) ((SELECTBODY CONS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION EXTRACT-OUTPUT-EXPRESSIONS-FROM-SELECT)))
    (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
     "STARTUP-MACROS"
     NULL
     "(DEFUN STARTUP-MACROS ())"))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 8) 1)
    (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 9) 1)
    (STORE-MACRO
     SYM-MACROS-PUSHQ
     SYM-MACROS-PUSHQ-EXPANDER
     (CL:FUNCTION PUSHQ-EXPANDER))
    (STORE-MACRO
     SYM-MACROS-POPQ
     SYM-MACROS-POPQ-EXPANDER
     (CL:FUNCTION POPQ-EXPANDER))
    (STORE-MACRO
     SYM-MACROS-PUSHF
     SYM-MACROS-PUSHF-EXPANDER
     (CL:FUNCTION PUSHF-EXPANDER))
    (STORE-MACRO
     SYM-MACROS-STRING-QUOTE
     SYM-MACROS-STRING-QUOTE-EXPANDER
     (CL:FUNCTION STRING-QUOTE-EXPANDER))
    (STORE-MACRO
     SYM-MACROS-++
     SYM-MACROS-++-EXPANDER
     (CL:FUNCTION ++-EXPANDER))
    (STORE-MACRO
     SYM-MACROS---
     SYM-MACROS----EXPANDER
     (CL:FUNCTION ---EXPANDER))
    (STORE-MACRO
     SYM-MACROS-1+
     SYM-MACROS-1+-EXPANDER
     (CL:FUNCTION 1+-EXPANDER))
    (STORE-MACRO
     SYM-MACROS-1-
     SYM-MACROS-1--EXPANDER
     (CL:FUNCTION 1--EXPANDER))
    (STORE-MACRO
     SYM-MACROS-SETQ?
     SYM-MACROS-SETQ?-EXPANDER
     (CL:FUNCTION SETQ?-EXPANDER))
    (STORE-MACRO
     SYM-MACROS-WITH-PERMANENT-OBJECTS
     SYM-MACROS-WITH-PERMANENT-OBJECTS-EXPANDER
     (CL:FUNCTION WITH-PERMANENT-OBJECTS-EXPANDER))
    (STORE-MACRO
     SYM-MACROS-WITH-TRANSIENT-OBJECTS
     SYM-MACROS-WITH-TRANSIENT-OBJECTS-EXPANDER
     (CL:FUNCTION WITH-TRANSIENT-OBJECTS-EXPANDER))
    (STORE-MACRO
     SYM-MACROS-IGNORE
     SYM-MACROS-IGNORE-EXPANDER
     (CL:FUNCTION IGNORE-EXPANDER))
    (STORE-MACRO
     SYM-MACROS-ONLY-IF
     SYM-MACROS-ONLY-IF-EXPANDER
     (CL:FUNCTION ONLY-IF-EXPANDER))
    (STORE-MACRO
     SYM-MACROS-PHASE-TO-INTEGER
     SYM-MACROS-PHASE-TO-INTEGER-EXPANDER
     (CL:FUNCTION PHASE-TO-INTEGER-EXPANDER))
    (STORE-MACRO
     SYM-MACROS-IF-OUTPUT-LANGUAGE
     SYM-MACROS-IF-OUTPUT-LANGUAGE-EXPANDER
     (CL:FUNCTION IF-OUTPUT-LANGUAGE-EXPANDER))
    (STORE-MACRO
     SYM-MACROS-WITHIN-WORLD
     SYM-MACROS-WITHIN-WORLD-EXPANDER
     (CL:FUNCTION WITHIN-WORLD-EXPANDER))
    (STORE-MACRO
     SYM-MACROS-WITHIN-MODULE
     SYM-MACROS-WITHIN-MODULE-EXPANDER
     (CL:FUNCTION WITHIN-MODULE-EXPANDER))))
  :VOID)
