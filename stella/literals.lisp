;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

#|--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1996, 1997             | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied "AS IS",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SGT-LITERALS-BOOLEAN NULL)
(CL:DEFVAR KWD-LITERALS-NULL-WRAPPER NULL)
(CL:DEFVAR SYM-LITERALS-NULL-BOOLEAN-WRAPPER NULL)
(CL:DEFVAR SGT-LITERALS-INTEGER NULL)
(CL:DEFVAR SYM-LITERALS-NULL-INTEGER-WRAPPER NULL)
(CL:DEFVAR SGT-LITERALS-FLOAT NULL)
(CL:DEFVAR SYM-LITERALS-NULL-FLOAT-WRAPPER NULL)
(CL:DEFVAR SGT-LITERALS-STRING NULL)
(CL:DEFVAR SYM-LITERALS-NULL-STRING-WRAPPER NULL)
(CL:DEFVAR SGT-LITERALS-CHARACTER NULL)
(CL:DEFVAR SYM-LITERALS-NULL-CHARACTER-WRAPPER NULL)
(CL:DEFVAR SGT-LITERALS-FUNCTION-CODE NULL)
(CL:DEFVAR SYM-LITERALS-NULL-FUNCTION-CODE-WRAPPER NULL)
(CL:DEFVAR SGT-LITERALS-METHOD-CODE NULL)
(CL:DEFVAR SYM-LITERALS-NULL-METHOD-CODE-WRAPPER NULL)
(CL:DEFVAR KWD-LITERALS-WRAP-FUNCTION NULL)
(CL:DEFVAR SYM-LITERALS-WRAP-BOOLEAN NULL)
(CL:DEFVAR SYM-LITERALS-WRAP-INTEGER NULL)
(CL:DEFVAR SYM-LITERALS-WRAP-FLOAT NULL)
(CL:DEFVAR SYM-LITERALS-WRAP-STRING NULL)
(CL:DEFVAR SYM-LITERALS-WRAP-CHARACTER NULL)
(CL:DEFVAR SYM-LITERALS-WRAP-FUNCTION-CODE NULL)
(CL:DEFVAR SYM-LITERALS-WRAP-METHOD-CODE NULL)
(CL:DEFVAR SYM-LITERALS-NULL NULL)
(CL:DEFVAR SYM-LITERALS-NIL NULL)
(CL:DEFVAR SYM-LITERALS-CONS NULL)
(CL:DEFVAR SYM-LITERALS-WRAP-LITERAL NULL)
(CL:DEFVAR SYM-LITERALS-GET-KWD NULL)
(CL:DEFVAR SYM-LITERALS-TYPED-SYS NULL)
(CL:DEFVAR SGT-LITERALS-SYMBOL NULL)
(CL:DEFVAR SYM-LITERALS-GET-SGT NULL)
(CL:DEFVAR SYM-LITERALS-INTERN-COMMON-LISP-SYMBOL NULL)
(CL:DEFVAR SYM-LITERALS-GET-SYM NULL)
(CL:DEFVAR SYM-LITERALS-LIST* NULL)
(CL:DEFVAR SYM-LITERALS-& NULL)
(CL:DEFVAR SYM-LITERALS-&& NULL)
(CL:DEFVAR SYM-LITERALS-CONCATENATE NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL
  *STELLA-MODULE*
  *MODULE*
  SYMBOL-SYM
  STANDARD-OUTPUT
  EOL
  *TRANSIENTOBJECTS?*))

;;; (DEFGLOBAL ZERO-WRAPPER ...)

(CL:DEFVAR ZERO-WRAPPER NULL)

;;; (DEFGLOBAL ONE-WRAPPER ...)

(CL:DEFVAR ONE-WRAPPER NULL)

;;; (DEFGLOBAL FALSE-WRAPPER ...)

(CL:DEFVAR FALSE-WRAPPER NULL)

;;; (DEFGLOBAL TRUE-WRAPPER ...)

(CL:DEFVAR TRUE-WRAPPER NULL)

;;; (DEFGLOBAL NULL-BOOLEAN-WRAPPER ...)

(CL:DEFVAR NULL-BOOLEAN-WRAPPER NULL)

;;; (DEFGLOBAL NULL-INTEGER-WRAPPER ...)

(CL:DEFVAR NULL-INTEGER-WRAPPER NULL)

;;; (DEFGLOBAL NULL-FLOAT-WRAPPER ...)

(CL:DEFVAR NULL-FLOAT-WRAPPER NULL)

;;; (DEFGLOBAL NULL-STRING-WRAPPER ...)

(CL:DEFVAR NULL-STRING-WRAPPER NULL)

;;; (DEFGLOBAL NULL-CHARACTER-WRAPPER ...)

(CL:DEFVAR NULL-CHARACTER-WRAPPER NULL)

;;; (DEFGLOBAL NULL-FUNCTION-CODE-WRAPPER ...)

(CL:DEFVAR NULL-FUNCTION-CODE-WRAPPER NULL)

;;; (DEFGLOBAL NULL-METHOD-CODE-WRAPPER ...)

(CL:DEFVAR NULL-METHOD-CODE-WRAPPER NULL)

;;; (DEFMETHOD (TERMINATE-WRAPPER? BOOLEAN) ...)

(CL:DEFMETHOD TERMINATE-WRAPPER? ((SELF WRAPPER))
  (CL:IF
   (CL:OR
    (CL:EQ SELF NULL-FLOAT-WRAPPER)
    (CL:EQ SELF NULL-STRING-WRAPPER)
    (CL:EQ SELF NULL-CHARACTER-WRAPPER)
    (CL:EQ SELF NULL-FUNCTION-CODE-WRAPPER)
    (CL:EQ SELF NULL-METHOD-CODE-WRAPPER))
   (CL:RETURN-FROM TERMINATE-WRAPPER? FALSE)
   (CL:RETURN-FROM TERMINATE-WRAPPER? TRUE))
  :VOID)

;;; (DEFMETHOD (TERMINATE-WRAPPER? BOOLEAN) ...)

(CL:DEFMETHOD TERMINATE-WRAPPER? ((SELF INTEGER-WRAPPER))
  (CL:IF
   (CL:OR
    (CL:EQ SELF ZERO-WRAPPER)
    (CL:EQ SELF ONE-WRAPPER)
    (CL:EQ SELF NULL-INTEGER-WRAPPER))
   (CL:RETURN-FROM TERMINATE-WRAPPER? FALSE)
   (CL:RETURN-FROM TERMINATE-WRAPPER? TRUE))
  :VOID)

;;; (DEFGLOBAL *LITERAL-TYPE-INFO-TABLE* ...)

(CL:DEFVAR *LITERAL-TYPE-INFO-TABLE* NULL
  "Table that holds a variety of information about literal
types, e.g., the name of their null-wrapper, wrap-function, etc.")

;;; (DEFGLOBAL *LITERAL-TYPES* ...)

(CL:DEFVAR *LITERAL-TYPES* NULL
  "List of literal types stored in '*literal-type-info-table*'.
Maintained for iteration purposes.")

;;; (DEFUN (LOOKUP-LITERAL-TYPE-INFO OBJECT) ...)

(CL:DEFUN LOOKUP-LITERAL-TYPE-INFO (TYPE KEY)
  (CL:LET*
   ((ENTRY (LOOKUP *LITERAL-TYPE-INFO-TABLE* TYPE)))
   (CL:IF
    (CL:NOT (CL:EQ ENTRY NULL))
    (CL:RETURN-FROM LOOKUP-LITERAL-TYPE-INFO (LOOKUP ENTRY KEY))
    (CL:RETURN-FROM LOOKUP-LITERAL-TYPE-INFO NULL)))
  :VOID)

;;; (DEFUN SET-LITERAL-TYPE-INFO ...)

(CL:DEFUN SET-LITERAL-TYPE-INFO (TYPE KEY VALUE)
  (CL:LET*
   ((ENTRY (LOOKUP *LITERAL-TYPE-INFO-TABLE* TYPE)))
   (CL:WHEN
    (CL:EQ ENTRY NULL)
    (CL:SETQ ENTRY (NEW-KEY-VALUE-LIST))
    (INSERT-AT *LITERAL-TYPE-INFO-TABLE* TYPE ENTRY)
    (INSERT-LAST *LITERAL-TYPES* TYPE))
   (INSERT-AT ENTRY KEY VALUE))
  :VOID)

;;; (DEFUN (WRAP-BOOLEAN BOOLEAN-WRAPPER) ...)

(CL:DEFUN WRAP-BOOLEAN (VALUE)
  (CL:IF
   (CL:EQ (NULL? VALUE) 1)
   (CL:RETURN-FROM WRAP-BOOLEAN NULL-BOOLEAN-WRAPPER)
   (CL:IF
    (CL:EQ VALUE 1)
    (CL:RETURN-FROM WRAP-BOOLEAN TRUE-WRAPPER)
    (CL:RETURN-FROM WRAP-BOOLEAN FALSE-WRAPPER)))
  :VOID)

;;; (DEFUN (WRAP-INTEGER INTEGER-WRAPPER) ...)

(CL:DEFUN WRAP-INTEGER (VALUE)
  (CL:IF
   (CL:EQ (NULL? VALUE) 1)
   (CL:RETURN-FROM WRAP-INTEGER NULL-INTEGER-WRAPPER)
   (CL:CASE
    VALUE
    (0 (CL:RETURN-FROM WRAP-INTEGER ZERO-WRAPPER))
    (1 (CL:RETURN-FROM WRAP-INTEGER ONE-WRAPPER))
    (CL:OTHERWISE
     (CL:IF
      (CL:EQ *TRANSIENTOBJECTS?* 1)
      (CL:RETURN-FROM WRAP-INTEGER (NEW-TRANSIENT-INTEGER-WRAPPER VALUE))
      (CL:RETURN-FROM WRAP-INTEGER (NEW-INTEGER-WRAPPER VALUE))))))
  :VOID)

;;; (DEFUN (WRAP-FLOAT FLOAT-WRAPPER) ...)

(CL:DEFUN WRAP-FLOAT (VALUE)
  (CL:IF
   (CL:EQ (NULL? VALUE) 1)
   (CL:RETURN-FROM WRAP-FLOAT NULL-FLOAT-WRAPPER)
   (CL:IF
    (CL:EQ *TRANSIENTOBJECTS?* 1)
    (CL:RETURN-FROM WRAP-FLOAT (NEW-TRANSIENT-FLOAT-WRAPPER VALUE))
    (CL:RETURN-FROM WRAP-FLOAT (NEW-FLOAT-WRAPPER VALUE))))
  :VOID)

;;; (DEFUN (WRAP-STRING STRING-WRAPPER) ...)

(CL:DEFUN WRAP-STRING (VALUE)
  (CL:IF
   (CL:EQ VALUE NULL)
   (CL:RETURN-FROM WRAP-STRING NULL-STRING-WRAPPER)
   (CL:IF
    (CL:EQ *TRANSIENTOBJECTS?* 1)
    (CL:RETURN-FROM WRAP-STRING (NEW-TRANSIENT-STRING-WRAPPER VALUE))
    (CL:RETURN-FROM WRAP-STRING (NEW-STRING-WRAPPER VALUE))))
  :VOID)

;;; (DEFUN (WRAP-CHARACTER CHARACTER-WRAPPER) ...)

(CL:DEFUN WRAP-CHARACTER (VALUE)
  (CL:IF
   (CL:EQ (NULL? VALUE) 1)
   (CL:RETURN-FROM WRAP-CHARACTER NULL-CHARACTER-WRAPPER)
   (CL:IF
    (CL:EQ *TRANSIENTOBJECTS?* 1)
    (CL:RETURN-FROM WRAP-CHARACTER (NEW-TRANSIENT-CHARACTER-WRAPPER VALUE))
    (CL:RETURN-FROM WRAP-CHARACTER (NEW-CHARACTER-WRAPPER VALUE))))
  :VOID)

;;; (DEFUN (WRAP-FUNCTION-CODE FUNCTION-CODE-WRAPPER) ...)

(CL:DEFUN WRAP-FUNCTION-CODE (VALUE)
  (CL:IF
   (CL:EQ VALUE NULL)
   (CL:RETURN-FROM WRAP-FUNCTION-CODE NULL-FUNCTION-CODE-WRAPPER)
   (CL:IF
    (CL:EQ *TRANSIENTOBJECTS?* 1)
    (CL:RETURN-FROM
     WRAP-FUNCTION-CODE
     (NEW-TRANSIENT-FUNCTION-CODE-WRAPPER VALUE))
    (CL:RETURN-FROM WRAP-FUNCTION-CODE (NEW-FUNCTION-CODE-WRAPPER VALUE))))
  :VOID)

;;; (DEFUN (WRAP-METHOD-CODE METHOD-CODE-WRAPPER) ...)

(CL:DEFUN WRAP-METHOD-CODE (VALUE)
  (CL:IF
   (CL:EQ VALUE NULL)
   (CL:RETURN-FROM WRAP-METHOD-CODE NULL-METHOD-CODE-WRAPPER)
   (CL:IF
    (CL:EQ *TRANSIENTOBJECTS?* 1)
    (CL:RETURN-FROM
     WRAP-METHOD-CODE
     (NEW-TRANSIENT-METHOD-CODE-WRAPPER VALUE))
    (CL:RETURN-FROM WRAP-METHOD-CODE (NEW-METHOD-CODE-WRAPPER VALUE))))
  :VOID)

;;; (DEFMETHOD (WRAP-LITERAL INTEGER-WRAPPER) ...)

(CL:DEFMETHOD WRAP-LITERAL ((VALUE CL:INTEGER))
  (CL:RETURN-FROM WRAP-LITERAL (WRAP-INTEGER VALUE))
  :VOID)

;;; (DEFMETHOD (WRAP-LITERAL FLOAT-WRAPPER) ...)

(CL:DEFMETHOD WRAP-LITERAL ((VALUE CL:FLOAT))
  (CL:RETURN-FROM WRAP-LITERAL (WRAP-FLOAT VALUE))
  :VOID)

;;; (DEFMETHOD (WRAP-LITERAL STRING-WRAPPER) ...)

(CL:DEFMETHOD WRAP-LITERAL ((VALUE CL:STRING))
  (CL:RETURN-FROM WRAP-LITERAL (WRAP-STRING VALUE))
  :VOID)

;;; (DEFMETHOD (WRAP-LITERAL CHARACTER-WRAPPER) ...)

(CL:DEFMETHOD WRAP-LITERAL ((VALUE CL:CHARACTER))
  (CL:RETURN-FROM WRAP-LITERAL (WRAP-CHARACTER VALUE))
  :VOID)

;;; (DEFMETHOD (WRAP-LITERAL FUNCTION-CODE-WRAPPER) ...)

(CL:DEFMETHOD WRAP-LITERAL ((VALUE CL:FUNCTION))
  (CL:RETURN-FROM WRAP-LITERAL (WRAP-FUNCTION-CODE VALUE))
  :VOID)

;;; (DEFMETHOD (WRAP-LITERAL METHOD-CODE-WRAPPER) ...)

(CL:DEFMETHOD WRAP-LITERAL ((VALUE CL:STANDARD-GENERIC-FUNCTION))
  (CL:RETURN-FROM WRAP-LITERAL (WRAP-METHOD-CODE VALUE))
  :VOID)

;;; (DEFMETHOD (COPY-WRAPPED-LITERAL OBJECT) ...)

(CL:DEFMETHOD COPY-WRAPPED-LITERAL ((SELF STANDARD-OBJECT))
  (CL:RETURN-FROM COPY-WRAPPED-LITERAL SELF)
  :VOID)

;;; (DEFMETHOD (COPY-WRAPPED-LITERAL OBJECT) ...)

(CL:DEFMETHOD COPY-WRAPPED-LITERAL ((SELF INTEGER-WRAPPER))
  (CL:RETURN-FROM
   COPY-WRAPPED-LITERAL
   (WRAP-LITERAL (CLSYS-SVAL INTEGER-WRAPPER WRAPPER-VALUE SELF)))
  :VOID)

;;; (DEFMETHOD (COPY-WRAPPED-LITERAL OBJECT) ...)

(CL:DEFMETHOD COPY-WRAPPED-LITERAL ((SELF FLOAT-WRAPPER))
  (CL:RETURN-FROM
   COPY-WRAPPED-LITERAL
   (WRAP-LITERAL (CLSYS-SVAL FLOAT-WRAPPER WRAPPER-VALUE SELF)))
  :VOID)

;;; (DEFMETHOD (COPY-WRAPPED-LITERAL OBJECT) ...)

(CL:DEFMETHOD COPY-WRAPPED-LITERAL ((SELF STRING-WRAPPER))
  (CL:RETURN-FROM
   COPY-WRAPPED-LITERAL
   (WRAP-LITERAL (CLSYS-SVAL STRING-WRAPPER WRAPPER-VALUE SELF)))
  :VOID)

;;; (DEFMETHOD (COPY-WRAPPED-LITERAL OBJECT) ...)

(CL:DEFMETHOD COPY-WRAPPED-LITERAL ((SELF CHARACTER-WRAPPER))
  (CL:RETURN-FROM
   COPY-WRAPPED-LITERAL
   (WRAP-LITERAL (CLSYS-SVAL CHARACTER-WRAPPER WRAPPER-VALUE SELF)))
  :VOID)

;;; (DEFMETHOD (COPY-WRAPPED-LITERAL OBJECT) ...)

(CL:DEFMETHOD COPY-WRAPPED-LITERAL ((SELF FUNCTION-CODE-WRAPPER))
  (CL:RETURN-FROM
   COPY-WRAPPED-LITERAL
   (WRAP-LITERAL (CLSYS-SVAL FUNCTION-CODE-WRAPPER WRAPPER-VALUE SELF)))
  :VOID)

;;; (DEFMETHOD (COPY-WRAPPED-LITERAL OBJECT) ...)

(CL:DEFMETHOD COPY-WRAPPED-LITERAL ((SELF METHOD-CODE-WRAPPER))
  (CL:RETURN-FROM
   COPY-WRAPPED-LITERAL
   (WRAP-LITERAL (CLSYS-SVAL METHOD-CODE-WRAPPER WRAPPER-VALUE SELF)))
  :VOID)

;;; (DEFMETHOD (OBJECT-EQL? BOOLEAN) ...)

(CL:DEFMETHOD OBJECT-EQL? ((X OBJECT) Y)
  (CL:ERROR "object-eql?: Don't know how to compare `~A' with `~A'" X Y)
  (CL:RETURN-FROM OBJECT-EQL? FALSE)
  :VOID)

;;; (DEFMETHOD (OBJECT-EQL? BOOLEAN) ...)

(CL:DEFMETHOD OBJECT-EQL? ((X STANDARD-OBJECT) Y)
  (CL:RETURN-FROM OBJECT-EQL? (EQ? X Y))
  :VOID)

;;; (DEFMETHOD (OBJECT-EQL? BOOLEAN) ...)

(CL:DEFMETHOD OBJECT-EQL? ((X INTEGER-WRAPPER) Y)
  (CL:RETURN-FROM
   OBJECT-EQL?
   (CL:IF
    (CL:AND
     (CL:EQ (INTEGER? Y) 1)
     (CL:=
      (CLSYS-SVAL INTEGER-WRAPPER WRAPPER-VALUE X)
      (CLSYS-SVAL INTEGER-WRAPPER WRAPPER-VALUE Y)))
    TRUE
    FALSE))
  :VOID)

;;; (DEFMETHOD (OBJECT-EQL? BOOLEAN) ...)

(CL:DEFMETHOD OBJECT-EQL? ((X FLOAT-WRAPPER) Y)
  (CL:RETURN-FROM
   OBJECT-EQL?
   (CL:IF
    (CL:AND
     (CL:EQ (FLOAT? Y) 1)
     (CL:=
      (CLSYS-SVAL FLOAT-WRAPPER WRAPPER-VALUE X)
      (CLSYS-SVAL FLOAT-WRAPPER WRAPPER-VALUE Y)))
    TRUE
    FALSE))
  :VOID)

;;; (DEFMETHOD (OBJECT-EQL? BOOLEAN) ...)

(CL:DEFMETHOD OBJECT-EQL? ((X BOOLEAN-WRAPPER) Y)
  (CL:RETURN-FROM OBJECT-EQL? (EQ? X Y))
  :VOID)

;;; (DEFMETHOD (OBJECT-EQL? BOOLEAN) ...)

(CL:DEFMETHOD OBJECT-EQL? ((X STRING-WRAPPER) Y)
  (CL:RETURN-FROM
   OBJECT-EQL?
   (CL:IF
    (CL:AND
     (CL:EQ (STRING? Y) 1)
     (CL:EQ
      (STRING-EQL?
       (CLSYS-SVAL STRING-WRAPPER WRAPPER-VALUE X)
       (CLSYS-SVAL STRING-WRAPPER WRAPPER-VALUE Y))
      1))
    TRUE
    FALSE))
  :VOID)

;;; (DEFMETHOD (OBJECT-EQL? BOOLEAN) ...)

(CL:DEFMETHOD OBJECT-EQL? ((X CHARACTER-WRAPPER) Y)
  (CL:RETURN-FROM
   OBJECT-EQL?
   (CL:IF
    (CL:AND
     (CL:EQ (CHARACTER? Y) 1)
     (CL:EQL
      (CLSYS-SVAL CHARACTER-WRAPPER WRAPPER-VALUE X)
      (CLSYS-SVAL CHARACTER-WRAPPER WRAPPER-VALUE Y)))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN (EQL? BOOLEAN) ...)

(CL:DEFUN EQL? (X Y)
  "'eql?' translates into the C++ '==' except that 
   (1) it tests for string equivalence when its first argument is a string,
   and (2) it understands wrapped literals."
  (CL:RETURN-FROM EQL? (CL:IF (CL:EQ X NULL) (NULL? Y) (OBJECT-EQL? X Y)))
  :VOID)

;;; (DEFUN (EQL-TO-BOOLEAN? BOOLEAN) ...)

(CL:DEFUN EQL-TO-BOOLEAN? (Y X)
  (CL:RETURN-FROM
   EQL-TO-BOOLEAN?
   (CL:IF
    (CL:AND
     (CL:EQ (BOOLEAN? Y) 1)
     (CL:= (CLSYS-SVAL BOOLEAN-WRAPPER WRAPPER-VALUE Y) X))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN (EQL-TO-INTEGER? BOOLEAN) ...)

(CL:DEFUN EQL-TO-INTEGER? (Y X)
  (CL:RETURN-FROM
   EQL-TO-INTEGER?
   (CL:IF
    (CL:AND
     (CL:EQ (INTEGER? Y) 1)
     (CL:= (CLSYS-SVAL INTEGER-WRAPPER WRAPPER-VALUE Y) X))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN (EQL-TO-FLOAT? BOOLEAN) ...)

(CL:DEFUN EQL-TO-FLOAT? (Y X)
  (CL:RETURN-FROM
   EQL-TO-FLOAT?
   (CL:IF
    (CL:AND
     (CL:EQ (FLOAT? Y) 1)
     (CL:= (CLSYS-SVAL FLOAT-WRAPPER WRAPPER-VALUE Y) X))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN (EQL-TO-STRING? BOOLEAN) ...)

(CL:DEFUN EQL-TO-STRING? (Y X)
  (CL:RETURN-FROM
   EQL-TO-STRING?
   (CL:IF
    (CL:AND
     (CL:EQ (STRING? Y) 1)
     (CL:EQ (STRING-EQL? (CLSYS-SVAL STRING-WRAPPER WRAPPER-VALUE Y) X) 1))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN (EQL-TO-CHARACTER? BOOLEAN) ...)

(CL:DEFUN EQL-TO-CHARACTER? (Y X)
  (CL:RETURN-FROM
   EQL-TO-CHARACTER?
   (CL:IF
    (CL:AND
     (CL:EQ (CHARACTER? Y) 1)
     (CL:EQL (CLSYS-SVAL CHARACTER-WRAPPER WRAPPER-VALUE Y) X))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN (HELP-BQUOTIFY OBJECT) ...)

(CL:DEFUN HELP-BQUOTIFY (TREE)
  (CL:WHEN (CL:EQ TREE NULL) (CL:RETURN-FROM HELP-BQUOTIFY SYM-LITERALS-NULL))
  (CL:LET*
   ((TREE-001 TREE))
   (CL:COND
    ((CL:EQ (CONS? TREE) 1)
     (CL:LET*
      ((TREE NULL))
      (CL:SETQ TREE TREE-001)
      (CL:IF
       (CL:EQ TREE NIL)
       (CL:RETURN-FROM HELP-BQUOTIFY SYM-LITERALS-NIL)
       (CL:RETURN-FROM
        HELP-BQUOTIFY
        (CONS-LIST
         SYM-LITERALS-CONS
         (HELP-BQUOTIFY (CLSYS-SVAL CONS VALUE TREE))
         (HELP-BQUOTIFY (CLSYS-SVAL CONS REST TREE)))))))
    ((CL:EQ (INTEGER? TREE) 1)
     (CL:LET*
      ((TREE NULL))
      (CL:SETQ TREE TREE-001)
      (CL:RETURN-FROM
       HELP-BQUOTIFY
       (CONS-LIST SYM-LITERALS-WRAP-LITERAL TREE))))
    ((CL:EQ (STRING? TREE) 1)
     (CL:LET*
      ((TREE NULL))
      (CL:SETQ TREE TREE-001)
      (CL:RETURN-FROM
       HELP-BQUOTIFY
       (CONS-LIST SYM-LITERALS-WRAP-LITERAL TREE))))
    ((CL:EQ (FLOAT? TREE) 1)
     (CL:LET*
      ((TREE NULL))
      (CL:SETQ TREE TREE-001)
      (CL:RETURN-FROM
       HELP-BQUOTIFY
       (CONS-LIST SYM-LITERALS-WRAP-LITERAL TREE))))
    ((CL:EQ (CHARACTER? TREE) 1)
     (CL:LET*
      ((TREE NULL))
      (CL:SETQ TREE TREE-001)
      (CL:RETURN-FROM
       HELP-BQUOTIFY
       (CONS-LIST SYM-LITERALS-WRAP-LITERAL TREE))))
    ((CL:EQ (KEYWORD? TREE) 1)
     (CL:LET*
      ((TREE NULL))
      (CL:SETQ TREE TREE-001)
      (CL:IF
       (CL:EQ (USE-HARDCODED-SYMBOLS?) 1)
       (CL:RETURN-FROM
        HELP-BQUOTIFY
        (CONS-LIST
         SYM-LITERALS-GET-KWD
         (WRAP-LITERAL (CLSYS-SVAL KEYWORD SYMBOL-ID (PERMANENTIFY TREE)))))
       (CL:PROGN
        (REGISTER-SYMBOL TREE)
        (CL:RETURN-FROM
         HELP-BQUOTIFY
         (CONS-LIST
          SYM-LITERALS-TYPED-SYS
          (YIELD-SYMBOL-CONSTANT-NAME TREE)
          SGT-LITERALS-SYMBOL))))))
    ((CL:EQ (SURROGATE? TREE) 1)
     (CL:LET*
      ((TREE NULL))
      (CL:SETQ TREE TREE-001)
      (CL:IF
       (CL:EQ (USE-HARDCODED-SYMBOLS?) 1)
       (CL:RETURN-FROM
        HELP-BQUOTIFY
        (CONS-LIST
         SYM-LITERALS-GET-SGT
         (WRAP-LITERAL (CLSYS-SVAL SURROGATE SYMBOL-ID TREE))))
       (CL:PROGN
        (REGISTER-SYMBOL TREE)
        (CL:RETURN-FROM
         HELP-BQUOTIFY
         (CONS-LIST
          SYM-LITERALS-TYPED-SYS
          (YIELD-SYMBOL-CONSTANT-NAME TREE)
          SGT-LITERALS-SYMBOL))))))
    ((CL:EQ (SYMBOL? TREE) 1)
     (CL:LET*
      ((TREE NULL))
      (CL:SETQ TREE TREE-001)
      (CL:IF
       (CL:EQ (SYMBOL-COMMON-LISP? TREE) 1)
       (CL:RETURN-FROM
        HELP-BQUOTIFY
        (CONS-LIST
         SYM-LITERALS-INTERN-COMMON-LISP-SYMBOL
         (WRAP-LITERAL (CLSYS-SVAL SYMBOL SYMBOL-NAME TREE))))
       (CL:IF
        (CL:EQ (USE-HARDCODED-SYMBOLS?) 1)
        (CL:RETURN-FROM
         HELP-BQUOTIFY
         (CONS-LIST
          SYM-LITERALS-GET-SYM
          (WRAP-LITERAL (CLSYS-SVAL SYMBOL SYMBOL-ID (PERMANENTIFY TREE)))))
        (CL:PROGN
         (REGISTER-SYMBOL TREE)
         (CL:RETURN-FROM
          HELP-BQUOTIFY
          (CONS-LIST
           SYM-LITERALS-TYPED-SYS
           (YIELD-SYMBOL-CONSTANT-NAME TREE)
           SGT-LITERALS-SYMBOL)))))))
    (CL:T
     (CL:LET*
      ((*PRINTREADABLY?* TRUE))
      (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
      (SIGNAL-TRANSLATION-ERROR)
      (CL:WHEN
       (CL:EQ (SUPPRESS-WARNINGS?) 0)
       (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-OUTPUT)
       (CL:LET
        ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
        (CL:TERPRI %%STREAM)
        (CL:FORCE-OUTPUT %%STREAM)
        (CL:WRITE-STRING " Illegal argument to quote: `" %%STREAM)
        (PRINT-OBJECT (DE-UGLIFY-PARSE-TREE TREE) %%STREAM)
        (CL:WRITE-STRING "'." %%STREAM)
        (CL:TERPRI %%STREAM)
        (CL:FORCE-OUTPUT %%STREAM))))
     (CL:RETURN-FROM HELP-BQUOTIFY NULL))))
  :VOID)

;;; (DEFUN (BQUOTIFY OBJECT) ...)

(CL:DEFUN BQUOTIFY (TREE)
  (CL:RETURN-FROM BQUOTIFY (HELP-BQUOTIFY TREE))
  :VOID)

;;; (DEFUN (EXPAND-BQUOTE-TREE OBJECT) ...)

(CL:DEFUN EXPAND-BQUOTE-TREE (TREE)
  (CL:LET*
   ((TREE-001 TREE))
   (CL:COND
    ((CL:EQ (CONS? TREE) 1)
     (CL:LET*
      ((TREE NULL))
      (CL:SETQ TREE TREE-001)
      (CL:LET*
       ((EXPANDEDTREE (CONS SYM-LITERALS-LIST* NIL))
        (CURSOR TREE)
        (TERM (CLSYS-SVAL CONS VALUE CURSOR)))
       (CL:LOOP
        WHILE
        (CL:AND
         (CL:NOT (CL:EQ CURSOR NIL))
         (CL:NOT
          (CL:OR (CL:EQ TERM SYM-LITERALS-&) (CL:EQ TERM SYM-LITERALS-&&))))
        DO
        (CL:SETQ EXPANDEDTREE (CONS (EXPAND-BQUOTE-TREE TERM) EXPANDEDTREE))
        (CL:SETQ CURSOR (CLSYS-SVAL CONS REST CURSOR))
        (CL:SETQ TERM (FIRST CURSOR)))
       (CL:COND
        ((CL:EQ CURSOR NIL)
         (CL:RETURN-FROM
          EXPAND-BQUOTE-TREE
          (REVERSE (CONS SYM-LITERALS-NIL EXPANDEDTREE))))
        ((CL:EQ TERM SYM-LITERALS-&)
         (CL:SETQ CURSOR (CLSYS-SVAL CONS REST CURSOR))
         (CL:WHEN
          (CL:EQ CURSOR NIL)
          (CL:LET*
           ((*PRINTREADABLY?* TRUE))
           (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
           (SIGNAL-TRANSLATION-ERROR)
           (CL:WHEN
            (CL:EQ (SUPPRESS-WARNINGS?) 0)
            (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-OUTPUT)
            (CL:LET
             ((%%STREAM
               (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
             (CL:TERPRI %%STREAM)
             (CL:FORCE-OUTPUT %%STREAM)
             (CL:WRITE-STRING
              " Illegal bquote tree -- missing term after '&'.."
              %%STREAM)
             (CL:TERPRI %%STREAM)
             (CL:FORCE-OUTPUT %%STREAM)))))
         (CL:RETURN-FROM
          EXPAND-BQUOTE-TREE
          (REVERSE
           (CONS
            (EXPAND-BQUOTE-TREE (CLSYS-SVAL CONS REST CURSOR))
            (CONS (CLSYS-SVAL CONS VALUE CURSOR) EXPANDEDTREE)))))
        (CL:T
         (CL:SETQ CURSOR (CLSYS-SVAL CONS REST CURSOR))
         (CL:WHEN
          (CL:EQ CURSOR NIL)
          (CL:LET*
           ((*PRINTREADABLY?* TRUE))
           (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
           (SIGNAL-TRANSLATION-ERROR)
           (CL:WHEN
            (CL:EQ (SUPPRESS-WARNINGS?) 0)
            (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-OUTPUT)
            (CL:LET
             ((%%STREAM
               (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
             (CL:TERPRI %%STREAM)
             (CL:FORCE-OUTPUT %%STREAM)
             (CL:WRITE-STRING
              " Illegal bquote tree -- missing term after '&&'."
              %%STREAM)
             (CL:TERPRI %%STREAM)
             (CL:FORCE-OUTPUT %%STREAM)))))
         (CL:RETURN-FROM
          EXPAND-BQUOTE-TREE
          (REVERSE
           (CONS
            (CONS-LIST
             SYM-LITERALS-CONCATENATE
             (CLSYS-SVAL CONS VALUE CURSOR)
             (EXPAND-BQUOTE-TREE (CLSYS-SVAL CONS REST CURSOR)))
            EXPANDEDTREE))))))))
    (CL:T (CL:RETURN-FROM EXPAND-BQUOTE-TREE (BQUOTIFY TREE)))))
  :VOID)

;;; (DEFUN (SIMPLIFY-BQUOTE-TREE OBJECT) ...)

(CL:DEFUN SIMPLIFY-BQUOTE-TREE (TREE)
  (CL:LET*
   ((TREE-001 TREE))
   (CL:COND
    ((CL:EQ (CONS? TREE) 1)
     (CL:LET*
      ((TREE NULL))
      (CL:SETQ TREE TREE-001)
      (CL:LET*
       ((CURSOR (CLSYS-SVAL CONS REST TREE)))
       (CL:LOOP
        WHILE
        (CL:NOT (CL:EQ CURSOR NIL))
        DO
        (CL:SETF
         (CLSYS-SVAL CONS VALUE CURSOR)
         (SIMPLIFY-BQUOTE-TREE (CLSYS-SVAL CONS VALUE CURSOR)))
        (CL:SETQ CURSOR (CLSYS-SVAL CONS REST CURSOR)))
       (CL:WHEN
        (CL:NOT (CL:EQ (CLSYS-SVAL CONS VALUE TREE) SYM-LITERALS-LIST*))
        (CL:RETURN-FROM SIMPLIFY-BQUOTE-TREE TREE))
       (CL:CASE
        (LENGTH (CLSYS-SVAL CONS REST TREE))
        (1
         (CL:LET*
          ((ARG (CLSYS-SVAL CONS VALUE (CLSYS-SVAL CONS REST TREE))))
          (FREE-CONS (CLSYS-SVAL CONS REST TREE))
          (FREE-CONS TREE)
          (CL:RETURN-FROM SIMPLIFY-BQUOTE-TREE ARG)))
        (2
         (CL:SETF (CLSYS-SVAL CONS VALUE TREE) SYM-LITERALS-CONS)
         (CL:RETURN-FROM SIMPLIFY-BQUOTE-TREE TREE))
        (CL:OTHERWISE (CL:RETURN-FROM SIMPLIFY-BQUOTE-TREE TREE))))))
    (CL:T (CL:RETURN-FROM SIMPLIFY-BQUOTE-TREE TREE))))
  :VOID)

;;; (DEFMETHOD (PERMANENTIFY OBJECT) ...)

(CL:DEFMETHOD PERMANENTIFY ((SELF OBJECT))
  (CL:RETURN-FROM PERMANENTIFY SELF)
  :VOID)

;;; (DEFMETHOD (PERMANENTIFY SYMBOL) ...)

(CL:DEFMETHOD PERMANENTIFY ((SELF SYMBOL))
  (CL:RETURN-FROM PERMANENTIFY SELF)
  :VOID)

;;; (DEFMETHOD (PERMANENTIFY KEYWORD) ...)

(CL:DEFMETHOD PERMANENTIFY ((SELF KEYWORD))
  (CL:RETURN-FROM PERMANENTIFY SELF)
  :VOID)

;;; (DEFMETHOD (PERMANENTIFY SYMBOL) ...)

(CL:DEFMETHOD PERMANENTIFY ((SELF TRANSIENT-SYMBOL))
  (CL:RETURN-FROM
   PERMANENTIFY
   (INTERN-PERMANENT-SYMBOL (CLSYS-SVAL TRANSIENT-SYMBOL SYMBOL-NAME SELF)))
  :VOID)

;;; (DEFMETHOD (PERMANENTIFY KEYWORD) ...)

(CL:DEFMETHOD PERMANENTIFY ((SELF TRANSIENT-KEYWORD))
  (CL:RETURN-FROM
   PERMANENTIFY
   (INTERN-PERMANENT-KEYWORD (CLSYS-SVAL TRANSIENT-KEYWORD SYMBOL-NAME SELF)))
  :VOID)

;;; (DEFMETHOD (PERMANENTIFY-LITERAL LITERAL-WRAPPER) ...)

(CL:DEFMETHOD PERMANENTIFY-LITERAL ((SELF LITERAL-WRAPPER))
  (CL:ERROR "permanentify-literal: Not implemented for `~A'" SELF)
  (CL:RETURN-FROM PERMANENTIFY-LITERAL NULL)
  :VOID)

;;; (DEFMETHOD (PERMANENTIFY-LITERAL INTEGER-WRAPPER) ...)

(CL:DEFMETHOD PERMANENTIFY-LITERAL ((SELF INTEGER-WRAPPER))
  (CL:RETURN-FROM
   PERMANENTIFY-LITERAL
   (WRAP-LITERAL (CLSYS-SVAL INTEGER-WRAPPER WRAPPER-VALUE SELF)))
  :VOID)

;;; (DEFMETHOD (PERMANENTIFY-LITERAL FLOAT-WRAPPER) ...)

(CL:DEFMETHOD PERMANENTIFY-LITERAL ((SELF FLOAT-WRAPPER))
  (CL:RETURN-FROM
   PERMANENTIFY-LITERAL
   (WRAP-LITERAL (CLSYS-SVAL FLOAT-WRAPPER WRAPPER-VALUE SELF)))
  :VOID)

;;; (DEFMETHOD (PERMANENTIFY-LITERAL STRING-WRAPPER) ...)

(CL:DEFMETHOD PERMANENTIFY-LITERAL ((SELF STRING-WRAPPER))
  (CL:RETURN-FROM
   PERMANENTIFY-LITERAL
   (WRAP-LITERAL (CLSYS-SVAL STRING-WRAPPER WRAPPER-VALUE SELF)))
  :VOID)

;;; (DEFMETHOD (PERMANENTIFY-LITERAL CHARACTER-WRAPPER) ...)

(CL:DEFMETHOD PERMANENTIFY-LITERAL ((SELF CHARACTER-WRAPPER))
  (CL:RETURN-FROM
   PERMANENTIFY-LITERAL
   (WRAP-LITERAL (CLSYS-SVAL CHARACTER-WRAPPER WRAPPER-VALUE SELF)))
  :VOID)

;;; (DEFMETHOD (PERMANENTIFY-LITERAL FUNCTION-CODE-WRAPPER) ...)

(CL:DEFMETHOD PERMANENTIFY-LITERAL ((SELF FUNCTION-CODE-WRAPPER))
  (CL:RETURN-FROM
   PERMANENTIFY-LITERAL
   (WRAP-LITERAL (CLSYS-SVAL FUNCTION-CODE-WRAPPER WRAPPER-VALUE SELF)))
  :VOID)

;;; (DEFMETHOD (PERMANENTIFY-LITERAL METHOD-CODE-WRAPPER) ...)

(CL:DEFMETHOD PERMANENTIFY-LITERAL ((SELF METHOD-CODE-WRAPPER))
  (CL:RETURN-FROM
   PERMANENTIFY-LITERAL
   (WRAP-LITERAL (CLSYS-SVAL METHOD-CODE-WRAPPER WRAPPER-VALUE SELF)))
  :VOID)

;;; (DEFMETHOD (PERMANENTIFY LITERAL-WRAPPER) ...)

(CL:DEFMETHOD PERMANENTIFY ((SELF LITERAL-WRAPPER))
  (CL:IF
   (CL:EQ *TRANSIENTOBJECTS?* 1)
   (CL:LET*
    ((*TRANSIENTOBJECTS?* FALSE))
    (CL:DECLARE (CL:SPECIAL *TRANSIENTOBJECTS?*))
    (CL:RETURN-FROM PERMANENTIFY (PERMANENTIFY-LITERAL SELF)))
   (CL:RETURN-FROM PERMANENTIFY (PERMANENTIFY-LITERAL SELF)))
  :VOID)

;;; (DEFUN (PERMANENT-COPY OBJECT) ...)

(CL:DEFUN PERMANENT-COPY (TREE)
  (CL:LET*
   ((TREE-001 TREE))
   (CL:COND
    ((CL:EQ (CONS? TREE) 1)
     (CL:LET*
      ((TREE NULL))
      (CL:SETQ TREE TREE-001)
      (CL:IF
       (CL:EQ TREE NIL)
       (CL:RETURN-FROM PERMANENT-COPY TREE)
       (CL:LET*
        ((CONS (NEW-CONS)))
        (CL:SETF
         (CLSYS-SVAL CONS VALUE CONS)
         (PERMANENT-COPY (CLSYS-SVAL CONS VALUE TREE)))
        (CL:SETF
         (CLSYS-SVAL CONS REST CONS)
         (PERMANENT-COPY (CLSYS-SVAL CONS REST TREE)))
        (CL:RETURN-FROM PERMANENT-COPY CONS)))))
    (CL:T (CL:RETURN-FROM PERMANENT-COPY (PERMANENTIFY TREE)))))
  :VOID)

;;; (DEFMETHOD (SOFT-PERMANENTIFY SYMBOL) ...)

(CL:DEFMETHOD SOFT-PERMANENTIFY ((SYMBOL SYMBOL))
  (CL:RETURN-FROM SOFT-PERMANENTIFY SYMBOL)
  :VOID)

;;; (DEFMETHOD (SOFT-PERMANENTIFY SYMBOL) ...)

(CL:DEFMETHOD SOFT-PERMANENTIFY ((SYMBOL TRANSIENT-SYMBOL))
  (CL:LET*
   ((PERMANENTSYMBOL
     (LOOKUP-RIGID-SYMBOL-WRT-MODULE
      (CLSYS-SVAL TRANSIENT-SYMBOL SYMBOL-NAME SYMBOL)
      (CL:IF
       (CL:NOT (CL:EQ (CLSYS-SVAL TRANSIENT-SYMBOL HOME-CONTEXT SYMBOL) NULL))
       (CLSYS-SVAL TRANSIENT-SYMBOL HOME-CONTEXT SYMBOL)
       *MODULE*)
      SYMBOL-SYM)))
   (CL:IF
    (CL:NOT (CL:EQ PERMANENTSYMBOL NULL))
    (CL:RETURN-FROM SOFT-PERMANENTIFY PERMANENTSYMBOL)
    (CL:RETURN-FROM SOFT-PERMANENTIFY SYMBOL)))
  :VOID)

;;; (DEFUN PRINT-CHARACTER ...)

(CL:DEFUN PRINT-CHARACTER (CHAR STREAM)
  (CL:WRITE-STRING "#\\" STREAM)
  (CL:CASE
   CHAR
   (#\Newline (CL:WRITE-STRING "Newline" STREAM))
   (#\Backspace (CL:WRITE-STRING "Backspace" STREAM))
   (#\Tab (CL:WRITE-STRING "Tab" STREAM))
   (#\Return (CL:WRITE-STRING "Return" STREAM))
   (#\Page (CL:WRITE-STRING "Page" STREAM))
   (CL:OTHERWISE (CL:PRINC CHAR STREAM)))
  :VOID)

;;; (DEFUN (UPCASE-CHARACTER CHARACTER) ...)

(CL:DEFUN UPCASE-CHARACTER (CHAR)
  (CL:LET*
   ((CHARCODE (CHARACTER-CODE CHAR)))
   (CL:IF
    (CL:AND
     (CL:>= CHARCODE (CHARACTER-CODE #\a))
     (CL:<= CHARCODE (CHARACTER-CODE #\z)))
    (CL:RETURN-FROM
     UPCASE-CHARACTER
     (CODE-CHARACTER
      (CL:+ (CHARACTER-CODE #\A) (CL:- CHARCODE (CHARACTER-CODE #\a)))))
    (CL:RETURN-FROM UPCASE-CHARACTER CHAR)))
  :VOID)

;;; (DEFUN (DOWNCASE-CHARACTER CHARACTER) ...)

(CL:DEFUN DOWNCASE-CHARACTER (CHAR)
  (CL:LET*
   ((CHARCODE (CHARACTER-CODE CHAR)))
   (CL:IF
    (CL:AND
     (CL:>= CHARCODE (CHARACTER-CODE #\A))
     (CL:<= CHARCODE (CHARACTER-CODE #\Z)))
    (CL:RETURN-FROM
     DOWNCASE-CHARACTER
     (CODE-CHARACTER
      (CL:+ (CHARACTER-CODE #\a) (CL:- CHARCODE (CHARACTER-CODE #\A)))))
    (CL:RETURN-FROM DOWNCASE-CHARACTER CHAR)))
  :VOID)

;;; (DEFUN PRINT-STRING-READABLY ...)

(CL:DEFUN PRINT-STRING-READABLY (STRING STREAM)
  (CL:PROGN (CL:PRIN1 STRING STREAM) (CL:RETURN-FROM PRINT-STRING-READABLY))
  (CL:WRITE-STRING "\"" STREAM)
  (CL:LET*
   ((I NULL) (ITER-001 0) (UPPER-BOUND-001 (CL:1- (LENGTH STRING))))
   (CL:LOOP
    WHILE
    (CL:<= ITER-001 UPPER-BOUND-001)
    DO
    (CL:PROGN (CL:SETQ I ITER-001) (CL:SETQ ITER-001 (CL:1+ ITER-001)))
    (CL:LET*
     ((CHAR (CL:CHAR STRING I)))
     (CL:IF
      (CL:OR (CL:EQL CHAR #\") (CL:EQL CHAR #\\))
      (CL:PROGN (CL:WRITE-STRING "\\" STREAM) (CL:PRINC CHAR STREAM))
      (CL:PRINC CHAR STREAM)))))
  (CL:WRITE-STRING "\"" STREAM)
  :VOID)

(CL:DEFUN STARTUP-LITERALS ()
  (CL:LET*
   ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 2) 1)
    (CL:SETQ
     SGT-LITERALS-BOOLEAN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "BOOLEAN" NULL 1))
    (CL:SETQ
     KWD-LITERALS-NULL-WRAPPER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL-WRAPPER" NULL 2))
    (CL:SETQ
     SYM-LITERALS-NULL-BOOLEAN-WRAPPER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL-BOOLEAN-WRAPPER" NULL 0))
    (CL:SETQ
     SGT-LITERALS-INTEGER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "INTEGER" NULL 1))
    (CL:SETQ
     SYM-LITERALS-NULL-INTEGER-WRAPPER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL-INTEGER-WRAPPER" NULL 0))
    (CL:SETQ
     SGT-LITERALS-FLOAT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FLOAT" NULL 1))
    (CL:SETQ
     SYM-LITERALS-NULL-FLOAT-WRAPPER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL-FLOAT-WRAPPER" NULL 0))
    (CL:SETQ
     SGT-LITERALS-STRING
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STRING" NULL 1))
    (CL:SETQ
     SYM-LITERALS-NULL-STRING-WRAPPER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL-STRING-WRAPPER" NULL 0))
    (CL:SETQ
     SGT-LITERALS-CHARACTER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CHARACTER" NULL 1))
    (CL:SETQ
     SYM-LITERALS-NULL-CHARACTER-WRAPPER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL-CHARACTER-WRAPPER" NULL 0))
    (CL:SETQ
     SGT-LITERALS-FUNCTION-CODE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FUNCTION-CODE" NULL 1))
    (CL:SETQ
     SYM-LITERALS-NULL-FUNCTION-CODE-WRAPPER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL-FUNCTION-CODE-WRAPPER" NULL 0))
    (CL:SETQ
     SGT-LITERALS-METHOD-CODE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-CODE" NULL 1))
    (CL:SETQ
     SYM-LITERALS-NULL-METHOD-CODE-WRAPPER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL-METHOD-CODE-WRAPPER" NULL 0))
    (CL:SETQ
     KWD-LITERALS-WRAP-FUNCTION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WRAP-FUNCTION" NULL 2))
    (CL:SETQ
     SYM-LITERALS-WRAP-BOOLEAN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WRAP-BOOLEAN" NULL 0))
    (CL:SETQ
     SYM-LITERALS-WRAP-INTEGER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WRAP-INTEGER" NULL 0))
    (CL:SETQ
     SYM-LITERALS-WRAP-FLOAT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WRAP-FLOAT" NULL 0))
    (CL:SETQ
     SYM-LITERALS-WRAP-STRING
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WRAP-STRING" NULL 0))
    (CL:SETQ
     SYM-LITERALS-WRAP-CHARACTER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WRAP-CHARACTER" NULL 0))
    (CL:SETQ
     SYM-LITERALS-WRAP-FUNCTION-CODE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WRAP-FUNCTION-CODE" NULL 0))
    (CL:SETQ
     SYM-LITERALS-WRAP-METHOD-CODE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WRAP-METHOD-CODE" NULL 0))
    (CL:SETQ SYM-LITERALS-NULL (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL" NULL 0))
    (CL:SETQ SYM-LITERALS-NIL (INTERN-RIGID-SYMBOL-WRT-MODULE "NIL" NULL 0))
    (CL:SETQ SYM-LITERALS-CONS (INTERN-RIGID-SYMBOL-WRT-MODULE "CONS" NULL 0))
    (CL:SETQ
     SYM-LITERALS-WRAP-LITERAL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WRAP-LITERAL" NULL 0))
    (CL:SETQ
     SYM-LITERALS-GET-KWD
     (INTERN-RIGID-SYMBOL-WRT-MODULE "GET-KWD" NULL 0))
    (CL:SETQ
     SYM-LITERALS-TYPED-SYS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "TYPED-SYS" NULL 0))
    (CL:SETQ
     SGT-LITERALS-SYMBOL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SYMBOL" NULL 1))
    (CL:SETQ
     SYM-LITERALS-GET-SGT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "GET-SGT" NULL 0))
    (CL:SETQ
     SYM-LITERALS-INTERN-COMMON-LISP-SYMBOL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "INTERN-COMMON-LISP-SYMBOL" NULL 0))
    (CL:SETQ
     SYM-LITERALS-GET-SYM
     (INTERN-RIGID-SYMBOL-WRT-MODULE "GET-SYM" NULL 0))
    (CL:SETQ
     SYM-LITERALS-LIST*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "LIST*" NULL 0))
    (CL:SETQ SYM-LITERALS-& (INTERN-RIGID-SYMBOL-WRT-MODULE "&" NULL 0))
    (CL:SETQ SYM-LITERALS-&& (INTERN-RIGID-SYMBOL-WRT-MODULE "&&" NULL 0))
    (CL:SETQ
     SYM-LITERALS-CONCATENATE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CONCATENATE" NULL 0)))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 4) 1)
    (CL:SETQ ZERO-WRAPPER (NEW-INTEGER-WRAPPER 0))
    (CL:SETQ ONE-WRAPPER (NEW-INTEGER-WRAPPER 1))
    (CL:SETQ FALSE-WRAPPER (NEW-BOOLEAN-WRAPPER FALSE))
    (CL:SETQ TRUE-WRAPPER (NEW-BOOLEAN-WRAPPER TRUE))
    (CL:SETQ NULL-BOOLEAN-WRAPPER (NEW-BOOLEAN-WRAPPER NULL-BOOLEAN))
    (CL:SETQ NULL-INTEGER-WRAPPER (NEW-INTEGER-WRAPPER NULL-INTEGER))
    (CL:SETQ NULL-FLOAT-WRAPPER (NEW-FLOAT-WRAPPER NULL-FLOAT))
    (CL:SETQ NULL-STRING-WRAPPER (NEW-STRING-WRAPPER NULL))
    (CL:SETQ NULL-CHARACTER-WRAPPER (NEW-CHARACTER-WRAPPER NULL-CHARACTER))
    (CL:SETQ NULL-FUNCTION-CODE-WRAPPER (NEW-FUNCTION-CODE-WRAPPER NULL))
    (CL:SETQ NULL-METHOD-CODE-WRAPPER (NEW-METHOD-CODE-WRAPPER NULL))
    (CL:SETQ *LITERAL-TYPE-INFO-TABLE* (NEW-HASH-TABLE))
    (CL:SETQ *LITERAL-TYPES* (NEW-LIST))
    (SET-LITERAL-TYPE-INFO
     SGT-LITERALS-BOOLEAN
     KWD-LITERALS-NULL-WRAPPER
     SYM-LITERALS-NULL-BOOLEAN-WRAPPER)
    (SET-LITERAL-TYPE-INFO
     SGT-LITERALS-INTEGER
     KWD-LITERALS-NULL-WRAPPER
     SYM-LITERALS-NULL-INTEGER-WRAPPER)
    (SET-LITERAL-TYPE-INFO
     SGT-LITERALS-FLOAT
     KWD-LITERALS-NULL-WRAPPER
     SYM-LITERALS-NULL-FLOAT-WRAPPER)
    (SET-LITERAL-TYPE-INFO
     SGT-LITERALS-STRING
     KWD-LITERALS-NULL-WRAPPER
     SYM-LITERALS-NULL-STRING-WRAPPER)
    (SET-LITERAL-TYPE-INFO
     SGT-LITERALS-CHARACTER
     KWD-LITERALS-NULL-WRAPPER
     SYM-LITERALS-NULL-CHARACTER-WRAPPER)
    (SET-LITERAL-TYPE-INFO
     SGT-LITERALS-FUNCTION-CODE
     KWD-LITERALS-NULL-WRAPPER
     SYM-LITERALS-NULL-FUNCTION-CODE-WRAPPER)
    (SET-LITERAL-TYPE-INFO
     SGT-LITERALS-METHOD-CODE
     KWD-LITERALS-NULL-WRAPPER
     SYM-LITERALS-NULL-METHOD-CODE-WRAPPER)
    (SET-LITERAL-TYPE-INFO
     SGT-LITERALS-BOOLEAN
     KWD-LITERALS-WRAP-FUNCTION
     SYM-LITERALS-WRAP-BOOLEAN)
    (SET-LITERAL-TYPE-INFO
     SGT-LITERALS-INTEGER
     KWD-LITERALS-WRAP-FUNCTION
     SYM-LITERALS-WRAP-INTEGER)
    (SET-LITERAL-TYPE-INFO
     SGT-LITERALS-FLOAT
     KWD-LITERALS-WRAP-FUNCTION
     SYM-LITERALS-WRAP-FLOAT)
    (SET-LITERAL-TYPE-INFO
     SGT-LITERALS-STRING
     KWD-LITERALS-WRAP-FUNCTION
     SYM-LITERALS-WRAP-STRING)
    (SET-LITERAL-TYPE-INFO
     SGT-LITERALS-CHARACTER
     KWD-LITERALS-WRAP-FUNCTION
     SYM-LITERALS-WRAP-CHARACTER)
    (SET-LITERAL-TYPE-INFO
     SGT-LITERALS-FUNCTION-CODE
     KWD-LITERALS-WRAP-FUNCTION
     SYM-LITERALS-WRAP-FUNCTION-CODE)
    (SET-LITERAL-TYPE-INFO
     SGT-LITERALS-METHOD-CODE
     KWD-LITERALS-WRAP-FUNCTION
     SYM-LITERALS-WRAP-METHOD-CODE))
   (CL:WHEN (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 6) 1) (FINALIZE-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 7) 1)
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "TERMINATE-WRAPPER?"
        "WRAPPER"
        "(DEFMETHOD (TERMINATE-WRAPPER? BOOLEAN) ((SELF WRAPPER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION TERMINATE-WRAPPER?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "TERMINATE-WRAPPER?"
        "INTEGER-WRAPPER"
        "(DEFMETHOD (TERMINATE-WRAPPER? BOOLEAN) ((SELF INTEGER-WRAPPER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION TERMINATE-WRAPPER?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "LOOKUP-LITERAL-TYPE-INFO"
        "TYPE"
        "(DEFUN (LOOKUP-LITERAL-TYPE-INFO OBJECT) ((TYPE TYPE) (KEY KEYWORD)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION LOOKUP-LITERAL-TYPE-INFO)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SET-LITERAL-TYPE-INFO"
        "TYPE"
        "(DEFUN SET-LITERAL-TYPE-INFO ((TYPE TYPE) (KEY KEYWORD) (VALUE OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SET-LITERAL-TYPE-INFO)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "WRAP-BOOLEAN"
        "BOOLEAN"
        "(DEFUN (WRAP-BOOLEAN BOOLEAN-WRAPPER) ((VALUE BOOLEAN)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION WRAP-BOOLEAN)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "WRAP-INTEGER"
        "INTEGER"
        "(DEFUN (WRAP-INTEGER INTEGER-WRAPPER) ((VALUE INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION WRAP-INTEGER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "WRAP-FLOAT"
        "FLOAT"
        "(DEFUN (WRAP-FLOAT FLOAT-WRAPPER) ((VALUE FLOAT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION WRAP-FLOAT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "WRAP-STRING"
        "STRING"
        "(DEFUN (WRAP-STRING STRING-WRAPPER) ((VALUE STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION WRAP-STRING)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "WRAP-CHARACTER"
        "CHARACTER"
        "(DEFUN (WRAP-CHARACTER CHARACTER-WRAPPER) ((VALUE CHARACTER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION WRAP-CHARACTER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "WRAP-FUNCTION-CODE"
        "FUNCTION-CODE"
        "(DEFUN (WRAP-FUNCTION-CODE FUNCTION-CODE-WRAPPER) ((VALUE FUNCTION-CODE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION WRAP-FUNCTION-CODE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "WRAP-METHOD-CODE"
        "METHOD-CODE"
        "(DEFUN (WRAP-METHOD-CODE METHOD-CODE-WRAPPER) ((VALUE METHOD-CODE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION WRAP-METHOD-CODE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "WRAP-LITERAL"
        "INTEGER"
        "(DEFMETHOD (WRAP-LITERAL INTEGER-WRAPPER) ((VALUE INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION WRAP-LITERAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "WRAP-LITERAL"
        "FLOAT"
        "(DEFMETHOD (WRAP-LITERAL FLOAT-WRAPPER) ((VALUE FLOAT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION WRAP-LITERAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "WRAP-LITERAL"
        "STRING"
        "(DEFMETHOD (WRAP-LITERAL STRING-WRAPPER) ((VALUE STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION WRAP-LITERAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "WRAP-LITERAL"
        "CHARACTER"
        "(DEFMETHOD (WRAP-LITERAL CHARACTER-WRAPPER) ((VALUE CHARACTER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION WRAP-LITERAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "WRAP-LITERAL"
        "FUNCTION-CODE"
        "(DEFMETHOD (WRAP-LITERAL FUNCTION-CODE-WRAPPER) ((VALUE FUNCTION-CODE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION WRAP-LITERAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "WRAP-LITERAL"
        "METHOD-CODE"
        "(DEFMETHOD (WRAP-LITERAL METHOD-CODE-WRAPPER) ((VALUE METHOD-CODE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION WRAP-LITERAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "COPY-WRAPPED-LITERAL"
        "STANDARD-OBJECT"
        "(DEFMETHOD (COPY-WRAPPED-LITERAL OBJECT) ((SELF STANDARD-OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION COPY-WRAPPED-LITERAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "COPY-WRAPPED-LITERAL"
        "INTEGER-WRAPPER"
        "(DEFMETHOD (COPY-WRAPPED-LITERAL OBJECT) ((SELF INTEGER-WRAPPER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION COPY-WRAPPED-LITERAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "COPY-WRAPPED-LITERAL"
        "FLOAT-WRAPPER"
        "(DEFMETHOD (COPY-WRAPPED-LITERAL OBJECT) ((SELF FLOAT-WRAPPER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION COPY-WRAPPED-LITERAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "COPY-WRAPPED-LITERAL"
        "STRING-WRAPPER"
        "(DEFMETHOD (COPY-WRAPPED-LITERAL OBJECT) ((SELF STRING-WRAPPER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION COPY-WRAPPED-LITERAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "COPY-WRAPPED-LITERAL"
        "CHARACTER-WRAPPER"
        "(DEFMETHOD (COPY-WRAPPED-LITERAL OBJECT) ((SELF CHARACTER-WRAPPER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION COPY-WRAPPED-LITERAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "COPY-WRAPPED-LITERAL"
        "FUNCTION-CODE-WRAPPER"
        "(DEFMETHOD (COPY-WRAPPED-LITERAL OBJECT) ((SELF FUNCTION-CODE-WRAPPER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION COPY-WRAPPED-LITERAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "COPY-WRAPPED-LITERAL"
        "METHOD-CODE-WRAPPER"
        "(DEFMETHOD (COPY-WRAPPED-LITERAL OBJECT) ((SELF METHOD-CODE-WRAPPER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION COPY-WRAPPED-LITERAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "OBJECT-EQL?"
        "OBJECT"
        "(DEFMETHOD (OBJECT-EQL? BOOLEAN) ((X OBJECT) (Y OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION OBJECT-EQL?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "OBJECT-EQL?"
        "STANDARD-OBJECT"
        "(DEFMETHOD (OBJECT-EQL? BOOLEAN) ((X STANDARD-OBJECT) (Y OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION OBJECT-EQL?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "OBJECT-EQL?"
        "INTEGER-WRAPPER"
        "(DEFMETHOD (OBJECT-EQL? BOOLEAN) ((X INTEGER-WRAPPER) (Y OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION OBJECT-EQL?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "OBJECT-EQL?"
        "FLOAT-WRAPPER"
        "(DEFMETHOD (OBJECT-EQL? BOOLEAN) ((X FLOAT-WRAPPER) (Y OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION OBJECT-EQL?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "OBJECT-EQL?"
        "BOOLEAN-WRAPPER"
        "(DEFMETHOD (OBJECT-EQL? BOOLEAN) ((X BOOLEAN-WRAPPER) (Y OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION OBJECT-EQL?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "OBJECT-EQL?"
        "STRING-WRAPPER"
        "(DEFMETHOD (OBJECT-EQL? BOOLEAN) ((X STRING-WRAPPER) (Y OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION OBJECT-EQL?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "OBJECT-EQL?"
        "CHARACTER-WRAPPER"
        "(DEFMETHOD (OBJECT-EQL? BOOLEAN) ((X CHARACTER-WRAPPER) (Y OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION OBJECT-EQL?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "EQL?"
        "OBJECT"
        "(DEFUN (EQL? BOOLEAN) ((X OBJECT) (Y OBJECT)) :DOCUMENTATION \"'eql?' translates into the C++ '==' except that 
   (1) it tests for string equivalence when its first argument is a string,
   and (2) it understands wrapped literals.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION EQL?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "EQL-TO-BOOLEAN?"
        "OBJECT"
        "(DEFUN (EQL-TO-BOOLEAN? BOOLEAN) ((Y OBJECT) (X BOOLEAN)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION EQL-TO-BOOLEAN?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "EQL-TO-INTEGER?"
        "OBJECT"
        "(DEFUN (EQL-TO-INTEGER? BOOLEAN) ((Y OBJECT) (X INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION EQL-TO-INTEGER?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "EQL-TO-FLOAT?"
        "OBJECT"
        "(DEFUN (EQL-TO-FLOAT? BOOLEAN) ((Y OBJECT) (X FLOAT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION EQL-TO-FLOAT?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "EQL-TO-STRING?"
        "OBJECT"
        "(DEFUN (EQL-TO-STRING? BOOLEAN) ((Y OBJECT) (X STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION EQL-TO-STRING?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "EQL-TO-CHARACTER?"
        "OBJECT"
        "(DEFUN (EQL-TO-CHARACTER? BOOLEAN) ((Y OBJECT) (X CHARACTER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION EQL-TO-CHARACTER?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "HELP-BQUOTIFY"
        "OBJECT"
        "(DEFUN (HELP-BQUOTIFY OBJECT) ((TREE OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION HELP-BQUOTIFY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "BQUOTIFY"
        "OBJECT"
        "(DEFUN (BQUOTIFY OBJECT) ((TREE OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION BQUOTIFY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "EXPAND-BQUOTE-TREE"
        "OBJECT"
        "(DEFUN (EXPAND-BQUOTE-TREE OBJECT) ((TREE OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION EXPAND-BQUOTE-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SIMPLIFY-BQUOTE-TREE"
        "OBJECT"
        "(DEFUN (SIMPLIFY-BQUOTE-TREE OBJECT) ((TREE OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SIMPLIFY-BQUOTE-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PERMANENTIFY"
        "OBJECT"
        "(DEFMETHOD (PERMANENTIFY OBJECT) ((SELF OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION PERMANENTIFY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PERMANENTIFY"
        "SYMBOL"
        "(DEFMETHOD (PERMANENTIFY SYMBOL) ((SELF SYMBOL)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION PERMANENTIFY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PERMANENTIFY"
        "KEYWORD"
        "(DEFMETHOD (PERMANENTIFY KEYWORD) ((SELF KEYWORD)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION PERMANENTIFY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PERMANENTIFY"
        "TRANSIENT-SYMBOL"
        "(DEFMETHOD (PERMANENTIFY SYMBOL) ((SELF TRANSIENT-SYMBOL)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION PERMANENTIFY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PERMANENTIFY"
        "TRANSIENT-KEYWORD"
        "(DEFMETHOD (PERMANENTIFY KEYWORD) ((SELF TRANSIENT-KEYWORD)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION PERMANENTIFY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PERMANENTIFY-LITERAL"
        "LITERAL-WRAPPER"
        "(DEFMETHOD (PERMANENTIFY-LITERAL LITERAL-WRAPPER) ((SELF LITERAL-WRAPPER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION PERMANENTIFY-LITERAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PERMANENTIFY-LITERAL"
        "INTEGER-WRAPPER"
        "(DEFMETHOD (PERMANENTIFY-LITERAL INTEGER-WRAPPER) ((SELF INTEGER-WRAPPER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION PERMANENTIFY-LITERAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PERMANENTIFY-LITERAL"
        "FLOAT-WRAPPER"
        "(DEFMETHOD (PERMANENTIFY-LITERAL FLOAT-WRAPPER) ((SELF FLOAT-WRAPPER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION PERMANENTIFY-LITERAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PERMANENTIFY-LITERAL"
        "STRING-WRAPPER"
        "(DEFMETHOD (PERMANENTIFY-LITERAL STRING-WRAPPER) ((SELF STRING-WRAPPER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION PERMANENTIFY-LITERAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PERMANENTIFY-LITERAL"
        "CHARACTER-WRAPPER"
        "(DEFMETHOD (PERMANENTIFY-LITERAL CHARACTER-WRAPPER) ((SELF CHARACTER-WRAPPER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION PERMANENTIFY-LITERAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PERMANENTIFY-LITERAL"
        "FUNCTION-CODE-WRAPPER"
        "(DEFMETHOD (PERMANENTIFY-LITERAL FUNCTION-CODE-WRAPPER) ((SELF FUNCTION-CODE-WRAPPER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION PERMANENTIFY-LITERAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PERMANENTIFY-LITERAL"
        "METHOD-CODE-WRAPPER"
        "(DEFMETHOD (PERMANENTIFY-LITERAL METHOD-CODE-WRAPPER) ((SELF METHOD-CODE-WRAPPER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION PERMANENTIFY-LITERAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PERMANENTIFY"
        "LITERAL-WRAPPER"
        "(DEFMETHOD (PERMANENTIFY LITERAL-WRAPPER) ((SELF LITERAL-WRAPPER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION PERMANENTIFY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PERMANENT-COPY"
        "OBJECT"
        "(DEFUN (PERMANENT-COPY OBJECT) ((TREE OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION PERMANENT-COPY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SOFT-PERMANENTIFY"
        "SYMBOL"
        "(DEFMETHOD (SOFT-PERMANENTIFY SYMBOL) ((SYMBOL SYMBOL)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION SOFT-PERMANENTIFY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SOFT-PERMANENTIFY"
        "TRANSIENT-SYMBOL"
        "(DEFMETHOD (SOFT-PERMANENTIFY SYMBOL) ((SYMBOL TRANSIENT-SYMBOL)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION SOFT-PERMANENTIFY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PRINT-CHARACTER"
        "CHARACTER"
        "(DEFUN PRINT-CHARACTER ((CHAR CHARACTER) (STREAM NATIVE-OUTPUT-STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION PRINT-CHARACTER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "UPCASE-CHARACTER"
        "CHARACTER"
        "(DEFUN (UPCASE-CHARACTER CHARACTER) ((CHAR CHARACTER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION UPCASE-CHARACTER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DOWNCASE-CHARACTER"
        "CHARACTER"
        "(DEFUN (DOWNCASE-CHARACTER CHARACTER) ((CHAR CHARACTER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION DOWNCASE-CHARACTER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PRINT-STRING-READABLY"
        "STRING"
        "(DEFUN PRINT-STRING-READABLY ((STRING STRING) (STREAM NATIVE-OUTPUT-STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION PRINT-STRING-READABLY)))
    (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
     "STARTUP-LITERALS"
     NULL
     "(DEFUN STARTUP-LITERALS ())"))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 8) 1)
    (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 9) 1)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL ZERO-WRAPPER INTEGER-WRAPPER (NEW INTEGER-WRAPPER :WRAPPER-VALUE 0))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL ONE-WRAPPER INTEGER-WRAPPER (NEW INTEGER-WRAPPER :WRAPPER-VALUE 1))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL FALSE-WRAPPER BOOLEAN-WRAPPER (NEW BOOLEAN-WRAPPER :WRAPPER-VALUE FALSE))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL TRUE-WRAPPER BOOLEAN-WRAPPER (NEW BOOLEAN-WRAPPER :WRAPPER-VALUE TRUE))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL NULL-BOOLEAN-WRAPPER BOOLEAN-WRAPPER (NEW BOOLEAN-WRAPPER :WRAPPER-VALUE NULL-BOOLEAN))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL NULL-INTEGER-WRAPPER INTEGER-WRAPPER (NEW INTEGER-WRAPPER :WRAPPER-VALUE NULL))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL NULL-FLOAT-WRAPPER FLOAT-WRAPPER (NEW FLOAT-WRAPPER :WRAPPER-VALUE NULL))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL NULL-STRING-WRAPPER STRING-WRAPPER (NEW STRING-WRAPPER :WRAPPER-VALUE NULL))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL NULL-CHARACTER-WRAPPER CHARACTER-WRAPPER (NEW CHARACTER-WRAPPER :WRAPPER-VALUE NULL))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL NULL-FUNCTION-CODE-WRAPPER FUNCTION-CODE-WRAPPER (NEW FUNCTION-CODE-WRAPPER :WRAPPER-VALUE NULL))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL NULL-METHOD-CODE-WRAPPER METHOD-CODE-WRAPPER (NEW METHOD-CODE-WRAPPER :WRAPPER-VALUE NULL))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *LITERAL-TYPE-INFO-TABLE* (HASH-TABLE OF TYPE (KEY-VALUE-LIST OF KEYWORD OBJECT)) (NEW HASH-TABLE) :DOCUMENTATION \"Table that holds a variety of information about literal
types, e.g., the name of their null-wrapper, wrap-function, etc.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *LITERAL-TYPES* (LIST OF TYPE) (NEW LIST) :DOCUMENTATION \"List of literal types stored in '*literal-type-info-table*'.
Maintained for iteration purposes.\")")))
  :VOID)
