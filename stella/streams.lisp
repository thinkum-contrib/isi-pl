;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

#|--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1996, 1997             | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied "AS IS",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SYM-STREAMS-EOL NULL)
(CL:DEFVAR SYM-STREAMS-PRINT-STREAM NULL)
(CL:DEFVAR SYM-STREAMS-STANDARD-OUTPUT NULL)
(CL:DEFVAR SYM-STREAMS-PRINT NULL)
(CL:DEFVAR SYM-STREAMS-PRINT-EXPANDER NULL)
(CL:DEFVAR SYM-STREAMS-INFORM NULL)
(CL:DEFVAR SYM-STREAMS-INFORM-EXPANDER NULL)
(CL:DEFVAR KWD-STREAMS-WARN NULL)
(CL:DEFVAR SYM-STREAMS-WARN NULL)
(CL:DEFVAR SYM-STREAMS-WARN-EXPANDER NULL)
(CL:DEFVAR KWD-STREAMS-ERROR NULL)
(CL:DEFVAR SYM-STREAMS-ERROR NULL)
(CL:DEFVAR SYM-STREAMS-ERROR-EXPANDER NULL)
(CL:DEFVAR KWD-STREAMS-CONTINUABLE-ERROR NULL)
(CL:DEFVAR SYM-STREAMS-CONTINUABLE-ERROR NULL)
(CL:DEFVAR SYM-STREAMS-CONTINUABLE-ERROR-EXPANDER NULL)
(CL:DEFVAR SYM-STREAMS-DE-UGLIFY-PARSE-TREE NULL)
(CL:DEFVAR SYM-STREAMS-SPECIAL NULL)
(CL:DEFVAR SYM-STREAMS-*PRINTREADABLY?* NULL)
(CL:DEFVAR SYM-STREAMS-TRUE NULL)
(CL:DEFVAR SYM-STREAMS-SIGNAL-TRANSLATION-ERROR NULL)
(CL:DEFVAR SYM-STREAMS-UNLESS NULL)
(CL:DEFVAR SYM-STREAMS-SUPPRESS-WARNINGS? NULL)
(CL:DEFVAR SYM-STREAMS-PRINT-ERROR-CONTEXT NULL)
(CL:DEFVAR SYM-STREAMS-WALK-ERROR NULL)
(CL:DEFVAR SYM-STREAMS-WALK-ERROR-EXPANDER NULL)
(CL:DEFVAR SYM-STREAMS-SIGNAL-TRANSLATION-WARNING NULL)
(CL:DEFVAR SYM-STREAMS-WALK-INFORM NULL)
(CL:DEFVAR SYM-STREAMS-WALK-INFORM-EXPANDER NULL)
(CL:DEFVAR SYM-STREAMS-WALK-WARN NULL)
(CL:DEFVAR SYM-STREAMS-WALK-WARN-EXPANDER NULL)
(CL:DEFVAR SYM-STREAMS-*SAFETY* NULL)
(CL:DEFVAR SYM-STREAMS-WHEN NULL)
(CL:DEFVAR SYM-STREAMS-NOT NULL)
(CL:DEFVAR SYM-STREAMS-SAFETY NULL)
(CL:DEFVAR SYM-STREAMS-SAFETY-EXPANDER NULL)
(CL:DEFVAR SYM-STREAMS-SIGNAL-EVALUATION-ERROR NULL)
(CL:DEFVAR SYM-STREAMS-PRINT-EVALUATION-ERROR-CONTEXT NULL)
(CL:DEFVAR SYM-STREAMS-EVAL-ERROR NULL)
(CL:DEFVAR SYM-STREAMS-EVAL-ERROR-EXPANDER NULL)
(CL:DEFVAR KWD-STREAMS-OPEN NULL)
(CL:DEFVAR KWD-STREAMS-CLOSED NULL)
(CL:DEFVAR SGT-STREAMS-INPUT-FILE-STREAM NULL)
(CL:DEFVAR SGT-STREAMS-OUTPUT-FILE-STREAM NULL)
(CL:DEFVAR SYM-STREAMS-THE-STREAM NULL)
(CL:DEFVAR SGT-STREAMS-S-EXPRESSION-ITERATOR NULL)
(CL:DEFVAR SGT-STREAMS-LINE-ITERATOR NULL)
(CL:DEFVAR SGT-STREAMS-CHARACTER-ITERATOR NULL)

;;; Forward declarations:

(CL:DECLAIM (CL:SPECIAL *STELLA-MODULE* *MODULE*))

;;; (DEFGLOBAL EOL ...)

(CL:DEFVAR EOL NULL
  "Generates a newline character when passed to a stream.")

;;; (DEFGLOBAL STANDARD-INPUT ...)

(CL:DEFVAR STANDARD-INPUT NULL
  "Denotes the standard input stream for the host language.")

;;; (DEFGLOBAL STANDARD-OUTPUT ...)

(CL:DEFVAR STANDARD-OUTPUT NULL
  "Denotes the standard output stream for the host language.")

;;; (DEFGLOBAL STANDARD-WARNING ...)

(CL:DEFVAR STANDARD-WARNING NULL
  "Denotes the standard warning stream for the host language.")

;;; (DEFGLOBAL STANDARD-ERROR ...)

(CL:DEFVAR STANDARD-ERROR NULL
  "Denotes the standard error stream for the host language.")

;;; (DEFGLOBAL SINGLE-QUOTE-STRING ...)

(CL:DEFVAR SINGLE-QUOTE-STRING NULL
  "Holds a string containing the single quote character.")

;;; (DEFGLOBAL SINGLE-BQUOTE-STRING ...)

(CL:DEFVAR SINGLE-BQUOTE-STRING NULL
  "Holds a string containing the single backquote character.")

;;; (DEFUN (FORMAT-MESSAGE-ARGUMENTS CONS) ...)

(CL:DEFUN FORMAT-MESSAGE-ARGUMENTS (MESSAGEARGUMENTSTREE TRAILINGEOL?)
  (CL:LET*
   ((AUGMENTEDARGUMENTS NIL))
   (CL:LET*
    ((ITEM NULL) (ITER-001 MESSAGEARGUMENTSTREE))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ ITEM (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:COND
      ((CL:OR (CL:EQ (STRING? ITEM) 1) (CL:EQ ITEM EOL))
       (CL:SETQ AUGMENTEDARGUMENTS (CONS ITEM AUGMENTEDARGUMENTS)))
      (CL:T
       (CL:SETQ
        AUGMENTEDARGUMENTS
        (CONS SINGLE-BQUOTE-STRING AUGMENTEDARGUMENTS))
       (CL:SETQ AUGMENTEDARGUMENTS (CONS ITEM AUGMENTEDARGUMENTS))
       (CL:SETQ
        AUGMENTEDARGUMENTS
        (CONS SINGLE-QUOTE-STRING AUGMENTEDARGUMENTS))))))
   (CL:WHEN
    (CL:EQ TRAILINGEOL? 1)
    (CL:SETQ AUGMENTEDARGUMENTS (CONS EOL AUGMENTEDARGUMENTS)))
   (FREE-CONS-LIST MESSAGEARGUMENTSTREE)
   (CL:RETURN-FROM FORMAT-MESSAGE-ARGUMENTS (REVERSE AUGMENTEDARGUMENTS)))
  :VOID)

;;; (DEFMACRO PRINT ...)

(CL:DEFUN PRINT-EXPANDER (BODY)
  "Print arguments to the standard output stream."
  (CL:RETURN-FROM
   PRINT-EXPANDER
   (LIST*
    SYM-STREAMS-PRINT-STREAM
    SYM-STREAMS-STANDARD-OUTPUT
    (CONCATENATE BODY NIL)))
  :VOID)

;;; (DEFMACRO INFORM ...)

(CL:DEFUN INFORM-EXPANDER (BODY)
  "Print informative message, placing non-string arguments in quotes,
and terminating with a newline."
  (CL:SETQ BODY (FORMAT-MESSAGE-ARGUMENTS BODY TRUE))
  (CL:RETURN-FROM
   INFORM-EXPANDER
   (LIST*
    SYM-STREAMS-PRINT-STREAM
    SYM-STREAMS-STANDARD-OUTPUT
    (CONCATENATE BODY NIL)))
  :VOID)

;;; (DEFMACRO WARN ...)

(CL:DEFUN WARN-EXPANDER (BODY)
  "Signal warning message, placing non-string arguments in quotes."
  (CL:SETQ BODY (FORMAT-MESSAGE-ARGUMENTS BODY FALSE))
  (CL:RETURN-FROM
   WARN-EXPANDER
   (LIST* SYM-STREAMS-PRINT-STREAM KWD-STREAMS-WARN (CONCATENATE BODY NIL)))
  :VOID)

;;; (DEFMACRO ERROR ...)

(CL:DEFUN ERROR-EXPANDER (BODY)
  "Signal error message, placing non-string arguments in quotes."
  (CL:SETQ BODY (FORMAT-MESSAGE-ARGUMENTS BODY FALSE))
  (CL:RETURN-FROM
   ERROR-EXPANDER
   (LIST* SYM-STREAMS-PRINT-STREAM KWD-STREAMS-ERROR (CONCATENATE BODY NIL)))
  :VOID)

;;; (DEFMACRO CONTINUABLE-ERROR ...)

(CL:DEFUN CONTINUABLE-ERROR-EXPANDER (BODY)
  "Signal error message, placing non-string arguments in quotes."
  (CL:SETQ BODY (FORMAT-MESSAGE-ARGUMENTS BODY FALSE))
  (CL:RETURN-FROM
   CONTINUABLE-ERROR-EXPANDER
   (LIST*
    SYM-STREAMS-PRINT-STREAM
    KWD-STREAMS-CONTINUABLE-ERROR
    (CONCATENATE BODY NIL)))
  :VOID)

;;; (DEFUN (FORMAT-WALK-MESSAGE-ARGUMENTS CONS) ...)

(CL:DEFUN FORMAT-WALK-MESSAGE-ARGUMENTS (MESSAGEARGUMENTSTREE)
  (CL:LET*
   ((IT (ALLOCATE-ITERATOR MESSAGEARGUMENTSTREE)))
   (CL:LOOP
    WHILE
    (CL:EQ (NEXT? IT) 1)
    DO
    (CL:LET*
     ((ITEM (CLSYS-SVAL CONS-ITERATOR VALUE IT)))
     (CL:LET*
      ((ITEM-001 ITEM))
      (CL:COND
       ((CL:EQ (SYMBOL? ITEM) 1)
        (CL:LET*
         ((ITEM NULL))
         (CL:SETQ ITEM ITEM-001)
         (CL:WHEN
          (CL:NOT (CL:EQ ITEM EOL))
          (VALUE-SETTER
           IT
           (LIST* SYM-STREAMS-DE-UGLIFY-PARSE-TREE ITEM NIL)))))
       (CL:T NULL))))))
  (CL:RETURN-FROM FORMAT-WALK-MESSAGE-ARGUMENTS MESSAGEARGUMENTSTREE)
  :VOID)

;;; (DEFMACRO WALK-ERROR ...)

(CL:DEFUN WALK-ERROR-EXPANDER (BODY)
  (CL:LET*
   ((MESSAGEARGUMENTS (FORMAT-WALK-MESSAGE-ARGUMENTS BODY)))
   (CL:RETURN-FROM
    WALK-ERROR-EXPANDER
    (LIST*
     SYM-STREAMS-SPECIAL
     (CONS (LIST* SYM-STREAMS-*PRINTREADABLY?* SYM-STREAMS-TRUE NIL) NIL)
     (CONS SYM-STREAMS-SIGNAL-TRANSLATION-ERROR NIL)
     (LIST*
      SYM-STREAMS-UNLESS
      (CONS SYM-STREAMS-SUPPRESS-WARNINGS? NIL)
      (LIST*
       SYM-STREAMS-PRINT-ERROR-CONTEXT
       (WRAP-LITERAL ">> ERROR: ")
       SYM-STREAMS-STANDARD-OUTPUT
       NIL)
      (LIST*
       SYM-STREAMS-INFORM
       SYM-STREAMS-EOL
       (WRAP-LITERAL " ")
       (CONCATENATE MESSAGEARGUMENTS (CONS (WRAP-LITERAL ".") NIL)))
      NIL)
     NIL)))
  :VOID)

;;; (DEFMACRO WALK-INFORM ...)

(CL:DEFUN WALK-INFORM-EXPANDER (BODY)
  (CL:LET*
   ((MESSAGEARGUMENTS (FORMAT-WALK-MESSAGE-ARGUMENTS BODY)))
   (CL:RETURN-FROM
    WALK-INFORM-EXPANDER
    (LIST*
     SYM-STREAMS-SPECIAL
     (CONS (LIST* SYM-STREAMS-*PRINTREADABLY?* SYM-STREAMS-TRUE NIL) NIL)
     (CONS SYM-STREAMS-SIGNAL-TRANSLATION-WARNING NIL)
     (LIST*
      SYM-STREAMS-UNLESS
      (CONS SYM-STREAMS-SUPPRESS-WARNINGS? NIL)
      (LIST*
       SYM-STREAMS-PRINT-ERROR-CONTEXT
       (WRAP-LITERAL ">> WARNING: ")
       SYM-STREAMS-STANDARD-OUTPUT
       NIL)
      (LIST*
       SYM-STREAMS-INFORM
       SYM-STREAMS-EOL
       (WRAP-LITERAL " ")
       (CONCATENATE MESSAGEARGUMENTS (CONS (WRAP-LITERAL ".") NIL)))
      NIL)
     NIL)))
  :VOID)

;;; (DEFMACRO WALK-WARN ...)

(CL:DEFUN WALK-WARN-EXPANDER (BODY)
  (CL:LET*
   ((MESSAGEARGUMENTS (FORMAT-WALK-MESSAGE-ARGUMENTS BODY)))
   (CL:RETURN-FROM
    WALK-WARN-EXPANDER
    (LIST*
     SYM-STREAMS-SPECIAL
     (CONS (LIST* SYM-STREAMS-*PRINTREADABLY?* SYM-STREAMS-TRUE NIL) NIL)
     (CONS SYM-STREAMS-SIGNAL-TRANSLATION-WARNING NIL)
     (LIST*
      SYM-STREAMS-UNLESS
      (CONS SYM-STREAMS-SUPPRESS-WARNINGS? NIL)
      (LIST*
       SYM-STREAMS-PRINT-ERROR-CONTEXT
       (WRAP-LITERAL ">> WARNING: ")
       SYM-STREAMS-STANDARD-OUTPUT
       NIL)
      (LIST*
       SYM-STREAMS-INFORM
       SYM-STREAMS-EOL
       (WRAP-LITERAL " ")
       (CONCATENATE MESSAGEARGUMENTS (CONS (WRAP-LITERAL ".") NIL)))
      NIL)
     NIL)))
  :VOID)

;;; (DEFSPECIAL *SAFETY* ...)

(CL:DEFVAR *SAFETY* 3
  "Integer between 0 and 3.  Higher levels call more
safety checks.")

(CL:DEFUN READ-*SAFETY* ()
  (CL:RETURN-FROM READ-*SAFETY* *SAFETY*)
  :VOID)

(CL:DEFUN WRITE-*SAFETY* (VALUE)
  (CL:SETQ *SAFETY* VALUE)
  (CL:RETURN-FROM WRITE-*SAFETY* VALUE)
  :VOID)

;;; (DEFMACRO SAFETY ...)

(CL:DEFUN SAFETY-EXPANDER (LEVEL TEST BODY)
  "Signal warning message, placing non-string arguments in quotes."
  (CL:WHEN
   (CL:> (CLSYS-SVAL INTEGER-WRAPPER WRAPPER-VALUE LEVEL) *SAFETY*)
   (FREE-CONS-TREE TEST)
   (FREE-CONS-TREE BODY)
   (CL:RETURN-FROM SAFETY-EXPANDER NIL))
  (CL:SETQ BODY (FORMAT-MESSAGE-ARGUMENTS BODY FALSE))
  (CL:RETURN-FROM
   SAFETY-EXPANDER
   (LIST*
    SYM-STREAMS-WHEN
    (LIST* SYM-STREAMS-NOT TEST NIL)
    (LIST*
     SYM-STREAMS-PRINT-STREAM
     KWD-STREAMS-ERROR
     (WRAP-LITERAL "Safety violation: ")
     (CONCATENATE BODY NIL))
    NIL))
  :VOID)

;;; (DEFMACRO EVAL-ERROR ...)

(CL:DEFUN EVAL-ERROR-EXPANDER (BODY)
  (CL:LET*
   ((MESSAGEARGUMENTS (FORMAT-WALK-MESSAGE-ARGUMENTS BODY)))
   (CL:RETURN-FROM
    EVAL-ERROR-EXPANDER
    (LIST*
     SYM-STREAMS-SPECIAL
     (CONS (LIST* SYM-STREAMS-*PRINTREADABLY?* SYM-STREAMS-TRUE NIL) NIL)
     (CONS SYM-STREAMS-SIGNAL-EVALUATION-ERROR NIL)
     (LIST*
      SYM-STREAMS-PRINT-EVALUATION-ERROR-CONTEXT
      (WRAP-LITERAL ">> ERROR: ")
      SYM-STREAMS-STANDARD-OUTPUT
      NIL)
     (LIST*
      SYM-STREAMS-INFORM
      SYM-STREAMS-EOL
      (WRAP-LITERAL "   ")
      (CONCATENATE MESSAGEARGUMENTS (CONS (WRAP-LITERAL ".") NIL)))
     NIL)))
  :VOID)

;;; (DEFGLOBAL *OPEN-FILE-STREAMS* ...)

(CL:DEFVAR *OPEN-FILE-STREAMS* NULL
  "List of file streams that are currently open.")

;;; (DEFUN INITIALIZE-FILE-STREAM ...)

(CL:DEFUN INITIALIZE-FILE-STREAM (SELF)
  (OPEN-STREAM SELF)
  (CL:WHEN
   (CL:NOT (CL:EQ (CLSYS-SVAL STREAM STATE SELF) KWD-STREAMS-OPEN))
   (CL:ERROR "initialize-file-stream: Could not open `~A'" SELF))
  :VOID)

;;; (DEFUN (TERMINATE-FILE-STREAM? BOOLEAN) ...)

(CL:DEFUN TERMINATE-FILE-STREAM? (SELF)
  (CLOSE-STREAM SELF)
  (CL:RETURN-FROM
   TERMINATE-FILE-STREAM?
   (EQ? (CLSYS-SVAL STREAM STATE SELF) KWD-STREAMS-CLOSED))
  :VOID)

;;; (DEFUN OPEN-STREAM ...)

(CL:DEFUN OPEN-STREAM (SELF)
  (CL:LET*
   ((SUCCESS? (OPEN-NATIVE-STREAM? SELF)))
   (CL:WHEN
    (CL:EQ SUCCESS? 1)
    (CL:SETF (CLSYS-SVAL STREAM STATE SELF) KWD-STREAMS-OPEN)
    (CL:LET*
     ((SELF-001 SELF))
     (CL:COND
      ((CL:EQ (TAXONOMY-ISA? SELF SGT-STREAMS-INPUT-FILE-STREAM) 1)
       (CL:LET*
        ((SELF NULL))
        (CL:SETQ SELF SELF-001)
        (PUSH *OPEN-FILE-STREAMS* SELF)))
      ((CL:EQ (TAXONOMY-ISA? SELF SGT-STREAMS-OUTPUT-FILE-STREAM) 1)
       (CL:LET*
        ((SELF NULL))
        (CL:SETQ SELF SELF-001)
        (PUSH *OPEN-FILE-STREAMS* SELF)))
      (CL:T NULL)))
    (CL:RETURN-FROM OPEN-STREAM)))
  :VOID)

;;; (DEFUN CLOSE-STREAM ...)

(CL:DEFUN CLOSE-STREAM (SELF)
  (CL:LET*
   ((SUCCESS? (CLOSE-NATIVE-STREAM? SELF)))
   (CL:WHEN
    (CL:EQ SUCCESS? 1)
    (CL:SETF (CLSYS-SVAL STREAM STATE SELF) KWD-STREAMS-CLOSED)
    (CL:LET*
     ((SELF-001 SELF))
     (CL:COND
      ((CL:EQ (TAXONOMY-ISA? SELF SGT-STREAMS-INPUT-FILE-STREAM) 1)
       (CL:LET*
        ((SELF NULL))
        (CL:SETQ SELF SELF-001)
        (REMOVE *OPEN-FILE-STREAMS* SELF)))
      ((CL:EQ (TAXONOMY-ISA? SELF SGT-STREAMS-OUTPUT-FILE-STREAM) 1)
       (CL:LET*
        ((SELF NULL))
        (CL:SETQ SELF SELF-001)
        (REMOVE *OPEN-FILE-STREAMS* SELF)))
      (CL:T NULL)))
    (CL:RETURN-FROM CLOSE-STREAM)))
  :VOID)

;;; (DEFUN CLOSE-ALL-FILES ...)

(CL:DEFUN CLOSE-ALL-FILES ()
  (CL:LET*
   ((OPENSTREAMS (COPY *OPEN-FILE-STREAMS*)))
   (CL:LET*
    ((STREAM NULL) (ITER-001 (CLSYS-SVAL LIST THE-CONS-LIST OPENSTREAMS)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ STREAM (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CLOSE-STREAM STREAM)))
   (FREE OPENSTREAMS))
  :VOID)

;;; (DEFCLASS STREAM-ITERATOR ...)

(CL:DEFCLASS STREAM-ITERATOR (ABSTRACT-ITERATOR)
  ((THE-STREAM :ALLOCATION :INSTANCE :ACCESSOR THE-STREAM...OF))
  (:DOCUMENTATION "Iterator that yields tokens from an input stream."))

(CL:DEFUN ACCESS-STREAM-ITERATOR-SLOT-VALUE (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-STREAMS-THE-STREAM)
    (CL:IF
     (CL:EQ SETVALUE? 1)
     (CL:SETF (CLSYS-SVAL STREAM-ITERATOR THE-STREAM SELF) VALUE)
     (CL:RETURN-FROM
      ACCESS-STREAM-ITERATOR-SLOT-VALUE
      (CLSYS-SVAL STREAM-ITERATOR THE-STREAM SELF))))
   (CL:T (CL:ERROR "`~A' is not a valid case option" SLOTNAME)))
  (CL:WHEN
   (CL:EQ SETVALUE? 1)
   (CL:RETURN-FROM ACCESS-STREAM-ITERATOR-SLOT-VALUE VALUE))
  :VOID)

;;; (DEFCLASS S-EXPRESSION-ITERATOR ...)

(CL:DEFCLASS S-EXPRESSION-ITERATOR (STREAM-ITERATOR)
  ((VALUE :ALLOCATION :INSTANCE :ACCESSOR VALUE...OF))
  (:DOCUMENTATION "Iterator that yields s-expressions from an input stream."))

(CL:DEFUN NEW-S-EXPRESSION-ITERATOR ()
  (CL:LET*
   ((SELF NULL))
   (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE S-EXPRESSION-ITERATOR)))
   (CL:SETF (CLSYS-SVAL S-EXPRESSION-ITERATOR FIRST-ITERATION? SELF) TRUE)
   (CL:SETF (CLSYS-SVAL S-EXPRESSION-ITERATOR VALUE SELF) NULL)
   (CL:SETF (CLSYS-SVAL S-EXPRESSION-ITERATOR THE-STREAM SELF) NULL)
   (CL:RETURN-FROM NEW-S-EXPRESSION-ITERATOR SELF))
  :VOID)

(CL:DEFMETHOD FREE ((SELF S-EXPRESSION-ITERATOR))
  (CL:WHEN (CL:EQ (TERMINATE-STREAM-ITERATOR? SELF) 1) (UNMAKE SELF))
  :VOID)

(CL:DEFMETHOD PRIMARY-TYPE ((SELF S-EXPRESSION-ITERATOR))
  (CL:RETURN-FROM PRIMARY-TYPE SGT-STREAMS-S-EXPRESSION-ITERATOR)
  :VOID)

;;; (DEFCLASS LINE-ITERATOR ...)

(CL:DEFCLASS LINE-ITERATOR (STREAM-ITERATOR)
  ((VALUE :ALLOCATION :INSTANCE :ACCESSOR VALUE...OF))
  (:DOCUMENTATION "Iterator that yields lines from an input stream."))

(CL:DEFUN NEW-LINE-ITERATOR ()
  (CL:LET*
   ((SELF NULL))
   (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE LINE-ITERATOR)))
   (CL:SETF (CLSYS-SVAL LINE-ITERATOR FIRST-ITERATION? SELF) TRUE)
   (CL:SETF (CLSYS-SVAL LINE-ITERATOR VALUE SELF) NULL)
   (CL:SETF (CLSYS-SVAL LINE-ITERATOR THE-STREAM SELF) NULL)
   (CL:RETURN-FROM NEW-LINE-ITERATOR SELF))
  :VOID)

(CL:DEFMETHOD FREE ((SELF LINE-ITERATOR))
  (CL:WHEN (CL:EQ (TERMINATE-STREAM-ITERATOR? SELF) 1) (UNMAKE SELF))
  :VOID)

(CL:DEFMETHOD PRIMARY-TYPE ((SELF LINE-ITERATOR))
  (CL:RETURN-FROM PRIMARY-TYPE SGT-STREAMS-LINE-ITERATOR)
  :VOID)

;;; (DEFCLASS CHARACTER-ITERATOR ...)

(CL:DEFCLASS CHARACTER-ITERATOR (STREAM-ITERATOR)
  ((VALUE :ALLOCATION :INSTANCE :ACCESSOR VALUE...OF))
  (:DOCUMENTATION "Iterator that yields characters from an input stream."))

(CL:DEFUN NEW-CHARACTER-ITERATOR ()
  (CL:LET*
   ((SELF NULL))
   (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE CHARACTER-ITERATOR)))
   (CL:SETF (CLSYS-SVAL CHARACTER-ITERATOR FIRST-ITERATION? SELF) TRUE)
   (CL:SETF (CLSYS-SVAL CHARACTER-ITERATOR VALUE SELF) NULL-CHARACTER)
   (CL:SETF (CLSYS-SVAL CHARACTER-ITERATOR THE-STREAM SELF) NULL)
   (CL:RETURN-FROM NEW-CHARACTER-ITERATOR SELF))
  :VOID)

(CL:DEFMETHOD FREE ((SELF CHARACTER-ITERATOR))
  (CL:WHEN (CL:EQ (TERMINATE-STREAM-ITERATOR? SELF) 1) (UNMAKE SELF))
  :VOID)

(CL:DEFMETHOD PRIMARY-TYPE ((SELF CHARACTER-ITERATOR))
  (CL:RETURN-FROM PRIMARY-TYPE SGT-STREAMS-CHARACTER-ITERATOR)
  :VOID)

;;; (DEFUN (TERMINATE-STREAM-ITERATOR? BOOLEAN) ...)

(CL:DEFUN TERMINATE-STREAM-ITERATOR? (SELF)
  (CL:WHEN
   (CL:NOT (CL:EQ (CLSYS-SVAL STREAM-ITERATOR THE-STREAM SELF) NULL))
   (FREE (CLSYS-SVAL STREAM-ITERATOR THE-STREAM SELF)))
  (CL:RETURN-FROM TERMINATE-STREAM-ITERATOR? TRUE)
  :VOID)

;;; (DEFUN (S-EXPRESSIONS S-EXPRESSION-ITERATOR) ...)

(CL:DEFUN S-EXPRESSIONS (STREAM)
  (CL:LET*
   ((SELF-001 (NEW-S-EXPRESSION-ITERATOR)))
   (CL:SETF (CLSYS-SVAL S-EXPRESSION-ITERATOR THE-STREAM SELF-001) STREAM)
   (CL:LET* ((VALUE-001 SELF-001)) (CL:RETURN-FROM S-EXPRESSIONS VALUE-001)))
  :VOID)

;;; (DEFMETHOD (NEXT? BOOLEAN) ...)

(CL:DEFMETHOD NEXT? ((SELF S-EXPRESSION-ITERATOR))
  (CL:SETF (CLSYS-SVAL S-EXPRESSION-ITERATOR FIRST-ITERATION? SELF) FALSE)
  (CL:LET*
   ((OBJECT NULL) (EOF? FALSE))
   (CL:MULTIPLE-VALUE-SETQ
    (OBJECT EOF?)
    (READ-S-EXPRESSION
     (CLSYS-SVAL
      INPUT-STREAM
      NATIVE-STREAM
      (CLSYS-SVAL S-EXPRESSION-ITERATOR THE-STREAM SELF))))
   (CL:COND
    ((CL:EQ EOF? 1)
     (CLOSE-STREAM (CLSYS-SVAL S-EXPRESSION-ITERATOR THE-STREAM SELF))
     (CL:RETURN-FROM NEXT? FALSE))
    (CL:T
     (CL:SETF (CLSYS-SVAL S-EXPRESSION-ITERATOR VALUE SELF) OBJECT)
     (CL:RETURN-FROM NEXT? TRUE))))
  :VOID)

;;; (DEFUN (LINES LINE-ITERATOR) ...)

(CL:DEFUN LINES (STREAM)
  (CL:LET*
   ((SELF-001 (NEW-LINE-ITERATOR)))
   (CL:SETF (CLSYS-SVAL LINE-ITERATOR THE-STREAM SELF-001) STREAM)
   (CL:LET* ((VALUE-001 SELF-001)) (CL:RETURN-FROM LINES VALUE-001)))
  :VOID)

;;; (DEFMETHOD (NEXT? BOOLEAN) ...)

(CL:DEFMETHOD NEXT? ((SELF LINE-ITERATOR))
  (CL:SETF (CLSYS-SVAL LINE-ITERATOR FIRST-ITERATION? SELF) FALSE)
  (CL:LET*
   ((LINE NULL) (EOF? FALSE))
   (CL:MULTIPLE-VALUE-SETQ
    (LINE EOF?)
    (READ-LINE
     (CLSYS-SVAL
      INPUT-STREAM
      NATIVE-STREAM
      (CLSYS-SVAL LINE-ITERATOR THE-STREAM SELF))))
   (CL:COND
    ((CL:EQ EOF? 1)
     (CLOSE-STREAM (CLSYS-SVAL LINE-ITERATOR THE-STREAM SELF))
     (CL:RETURN-FROM NEXT? FALSE))
    (CL:T
     (CL:SETF (CLSYS-SVAL LINE-ITERATOR VALUE SELF) LINE)
     (CL:RETURN-FROM NEXT? TRUE))))
  :VOID)

;;; (DEFUN (CHARACTERS CHARACTER-ITERATOR) ...)

(CL:DEFUN CHARACTERS (STREAM)
  (CL:LET*
   ((SELF-001 (NEW-CHARACTER-ITERATOR)))
   (CL:SETF (CLSYS-SVAL CHARACTER-ITERATOR THE-STREAM SELF-001) STREAM)
   (CL:LET* ((VALUE-001 SELF-001)) (CL:RETURN-FROM CHARACTERS VALUE-001)))
  :VOID)

;;; (DEFMETHOD (NEXT? BOOLEAN) ...)

(CL:DEFMETHOD NEXT? ((SELF CHARACTER-ITERATOR))
  (CL:SETF (CLSYS-SVAL CHARACTER-ITERATOR FIRST-ITERATION? SELF) FALSE)
  (CL:LET*
   ((CHAR NULL-CHARACTER) (EOF? FALSE))
   (CL:MULTIPLE-VALUE-SETQ
    (CHAR EOF?)
    (READ-CHARACTER
     (CLSYS-SVAL
      INPUT-STREAM
      NATIVE-STREAM
      (CLSYS-SVAL CHARACTER-ITERATOR THE-STREAM SELF))))
   (CL:COND
    ((CL:EQ EOF? 1)
     (CLOSE-STREAM (CLSYS-SVAL CHARACTER-ITERATOR THE-STREAM SELF))
     (CL:RETURN-FROM NEXT? FALSE))
    (CL:T
     (CL:SETF (CLSYS-SVAL CHARACTER-ITERATOR VALUE SELF) CHAR)
     (CL:RETURN-FROM NEXT? TRUE))))
  :VOID)

(CL:DEFUN STARTUP-STREAMS ()
  (CL:WHEN
   (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 0) 1)
   (CL:WHEN
    (CL:EQ STANDARD-INPUT NULL)
    (CL:LET*
     ((SELF-000 (NEW-INPUT-STREAM)))
     (CL:SETF
      (CLSYS-SVAL INPUT-STREAM NATIVE-STREAM SELF-000)
      CL:*STANDARD-INPUT*)
     (CL:SETQ STANDARD-INPUT SELF-000)))
   (CL:WHEN
    (CL:EQ STANDARD-OUTPUT NULL)
    (CL:LET*
     ((SELF-001 (NEW-OUTPUT-STREAM)))
     (CL:SETF
      (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM SELF-001)
      CL:*STANDARD-OUTPUT*)
     (CL:SETQ STANDARD-OUTPUT SELF-001)))
   (CL:WHEN
    (CL:EQ STANDARD-WARNING NULL)
    (CL:LET*
     ((SELF-002 (NEW-OUTPUT-STREAM)))
     (CL:SETF
      (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM SELF-002)
      CL:*ERROR-OUTPUT*)
     (CL:SETQ STANDARD-WARNING SELF-002)))
   (CL:WHEN
    (CL:EQ STANDARD-ERROR NULL)
    (CL:LET*
     ((SELF-003 (NEW-OUTPUT-STREAM)))
     (CL:SETF
      (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM SELF-003)
      CL:*ERROR-OUTPUT*)
     (CL:SETQ STANDARD-ERROR SELF-003))))
  (CL:LET*
   ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 2) 1)
    (CL:SETQ SYM-STREAMS-EOL (INTERN-RIGID-SYMBOL-WRT-MODULE "EOL" NULL 0))
    (CL:SETQ
     SYM-STREAMS-PRINT-STREAM
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT-STREAM" NULL 0))
    (CL:SETQ
     SYM-STREAMS-STANDARD-OUTPUT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STANDARD-OUTPUT" NULL 0))
    (CL:SETQ
     SYM-STREAMS-PRINT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT" NULL 0))
    (CL:SETQ
     SYM-STREAMS-PRINT-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT-EXPANDER" NULL 0))
    (CL:SETQ
     SYM-STREAMS-INFORM
     (INTERN-RIGID-SYMBOL-WRT-MODULE "INFORM" NULL 0))
    (CL:SETQ
     SYM-STREAMS-INFORM-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "INFORM-EXPANDER" NULL 0))
    (CL:SETQ KWD-STREAMS-WARN (INTERN-RIGID-SYMBOL-WRT-MODULE "WARN" NULL 2))
    (CL:SETQ SYM-STREAMS-WARN (INTERN-RIGID-SYMBOL-WRT-MODULE "WARN" NULL 0))
    (CL:SETQ
     SYM-STREAMS-WARN-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WARN-EXPANDER" NULL 0))
    (CL:SETQ
     KWD-STREAMS-ERROR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "ERROR" NULL 2))
    (CL:SETQ
     SYM-STREAMS-ERROR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "ERROR" NULL 0))
    (CL:SETQ
     SYM-STREAMS-ERROR-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "ERROR-EXPANDER" NULL 0))
    (CL:SETQ
     KWD-STREAMS-CONTINUABLE-ERROR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTINUABLE-ERROR" NULL 2))
    (CL:SETQ
     SYM-STREAMS-CONTINUABLE-ERROR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTINUABLE-ERROR" NULL 0))
    (CL:SETQ
     SYM-STREAMS-CONTINUABLE-ERROR-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTINUABLE-ERROR-EXPANDER" NULL 0))
    (CL:SETQ
     SYM-STREAMS-DE-UGLIFY-PARSE-TREE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DE-UGLIFY-PARSE-TREE" NULL 0))
    (CL:SETQ
     SYM-STREAMS-SPECIAL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SPECIAL" NULL 0))
    (CL:SETQ
     SYM-STREAMS-*PRINTREADABLY?*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "*PRINTREADABLY?*" NULL 0))
    (CL:SETQ SYM-STREAMS-TRUE (INTERN-RIGID-SYMBOL-WRT-MODULE "TRUE" NULL 0))
    (CL:SETQ
     SYM-STREAMS-SIGNAL-TRANSLATION-ERROR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SIGNAL-TRANSLATION-ERROR" NULL 0))
    (CL:SETQ
     SYM-STREAMS-UNLESS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "UNLESS" NULL 0))
    (CL:SETQ
     SYM-STREAMS-SUPPRESS-WARNINGS?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SUPPRESS-WARNINGS?" NULL 0))
    (CL:SETQ
     SYM-STREAMS-PRINT-ERROR-CONTEXT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT-ERROR-CONTEXT" NULL 0))
    (CL:SETQ
     SYM-STREAMS-WALK-ERROR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WALK-ERROR" NULL 0))
    (CL:SETQ
     SYM-STREAMS-WALK-ERROR-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WALK-ERROR-EXPANDER" NULL 0))
    (CL:SETQ
     SYM-STREAMS-SIGNAL-TRANSLATION-WARNING
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SIGNAL-TRANSLATION-WARNING" NULL 0))
    (CL:SETQ
     SYM-STREAMS-WALK-INFORM
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WALK-INFORM" NULL 0))
    (CL:SETQ
     SYM-STREAMS-WALK-INFORM-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WALK-INFORM-EXPANDER" NULL 0))
    (CL:SETQ
     SYM-STREAMS-WALK-WARN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WALK-WARN" NULL 0))
    (CL:SETQ
     SYM-STREAMS-WALK-WARN-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WALK-WARN-EXPANDER" NULL 0))
    (CL:SETQ
     SYM-STREAMS-*SAFETY*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "*SAFETY*" NULL 0))
    (CL:SETQ SYM-STREAMS-WHEN (INTERN-RIGID-SYMBOL-WRT-MODULE "WHEN" NULL 0))
    (CL:SETQ SYM-STREAMS-NOT (INTERN-RIGID-SYMBOL-WRT-MODULE "NOT" NULL 0))
    (CL:SETQ
     SYM-STREAMS-SAFETY
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SAFETY" NULL 0))
    (CL:SETQ
     SYM-STREAMS-SAFETY-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SAFETY-EXPANDER" NULL 0))
    (CL:SETQ
     SYM-STREAMS-SIGNAL-EVALUATION-ERROR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SIGNAL-EVALUATION-ERROR" NULL 0))
    (CL:SETQ
     SYM-STREAMS-PRINT-EVALUATION-ERROR-CONTEXT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT-EVALUATION-ERROR-CONTEXT" NULL 0))
    (CL:SETQ
     SYM-STREAMS-EVAL-ERROR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "EVAL-ERROR" NULL 0))
    (CL:SETQ
     SYM-STREAMS-EVAL-ERROR-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "EVAL-ERROR-EXPANDER" NULL 0))
    (CL:SETQ KWD-STREAMS-OPEN (INTERN-RIGID-SYMBOL-WRT-MODULE "OPEN" NULL 2))
    (CL:SETQ
     KWD-STREAMS-CLOSED
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CLOSED" NULL 2))
    (CL:SETQ
     SGT-STREAMS-INPUT-FILE-STREAM
     (INTERN-RIGID-SYMBOL-WRT-MODULE "INPUT-FILE-STREAM" NULL 1))
    (CL:SETQ
     SGT-STREAMS-OUTPUT-FILE-STREAM
     (INTERN-RIGID-SYMBOL-WRT-MODULE "OUTPUT-FILE-STREAM" NULL 1))
    (CL:SETQ
     SYM-STREAMS-THE-STREAM
     (INTERN-RIGID-SYMBOL-WRT-MODULE "THE-STREAM" NULL 0))
    (CL:SETQ
     SGT-STREAMS-S-EXPRESSION-ITERATOR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "S-EXPRESSION-ITERATOR" NULL 1))
    (CL:SETQ
     SGT-STREAMS-LINE-ITERATOR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "LINE-ITERATOR" NULL 1))
    (CL:SETQ
     SGT-STREAMS-CHARACTER-ITERATOR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CHARACTER-ITERATOR" NULL 1)))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 4) 1)
    (CL:SETQ EOL SYM-STREAMS-EOL)
    (CL:SETQ SINGLE-QUOTE-STRING (WRAP-LITERAL "'"))
    (CL:SETQ SINGLE-BQUOTE-STRING (WRAP-LITERAL "`"))
    (CL:SETQ *OPEN-FILE-STREAMS* (NEW-LIST)))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 5) 1)
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE
        "STREAM-ITERATOR"
        "(DEFCLASS STREAM-ITERATOR (ABSTRACT-ITERATOR) :ABSTRACT? TRUE :DOCUMENTATION \"Iterator that yields tokens from an input stream.\" :SLOTS ((THE-STREAM :TYPE INPUT-STREAM)) :TERMINATOR TERMINATE-STREAM-ITERATOR?)")))
     (CL:SETF
      (CLSYS-SVAL CLASS CLASS-SLOT-ACCESSOR-CODE CLASS)
      (CL:FUNCTION ACCESS-STREAM-ITERATOR-SLOT-VALUE)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE
        "S-EXPRESSION-ITERATOR"
        "(DEFCLASS S-EXPRESSION-ITERATOR (STREAM-ITERATOR) :DOCUMENTATION \"Iterator that yields s-expressions from an input stream.\" :PARAMETERS ((ANY-VALUE :TYPE OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL CLASS CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-S-EXPRESSION-ITERATOR)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE
        "LINE-ITERATOR"
        "(DEFCLASS LINE-ITERATOR (STREAM-ITERATOR) :DOCUMENTATION \"Iterator that yields lines from an input stream.\" :PARAMETERS ((ANY-VALUE :TYPE STRING)))")))
     (CL:SETF
      (CLSYS-SVAL CLASS CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-LINE-ITERATOR)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE
        "CHARACTER-ITERATOR"
        "(DEFCLASS CHARACTER-ITERATOR (STREAM-ITERATOR) :DOCUMENTATION \"Iterator that yields characters from an input stream.\" :PARAMETERS ((ANY-VALUE :TYPE CHARACTER)))")))
     (CL:SETF
      (CLSYS-SVAL CLASS CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-CHARACTER-ITERATOR))))
   (CL:WHEN (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 6) 1) (FINALIZE-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 7) 1)
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "FORMAT-MESSAGE-ARGUMENTS"
        "CONS"
        "(DEFUN (FORMAT-MESSAGE-ARGUMENTS CONS) ((MESSAGEARGUMENTSTREE CONS) (TRAILINGEOL? BOOLEAN)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION FORMAT-MESSAGE-ARGUMENTS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PRINT-EXPANDER"
        "CONS"
        "(DEFUN (PRINT-EXPANDER OBJECT) (|&BODY| (BODY CONS)) :DOCUMENTATION \"Print arguments to the standard output stream.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION PRINT-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INFORM-EXPANDER"
        "CONS"
        "(DEFUN (INFORM-EXPANDER OBJECT) (|&BODY| (BODY CONS)) :DOCUMENTATION \"Print informative message, placing non-string arguments in quotes,
and terminating with a newline.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INFORM-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "WARN-EXPANDER"
        "CONS"
        "(DEFUN (WARN-EXPANDER OBJECT) (|&BODY| (BODY CONS)) :DOCUMENTATION \"Signal warning message, placing non-string arguments in quotes.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION WARN-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "ERROR-EXPANDER"
        "CONS"
        "(DEFUN (ERROR-EXPANDER OBJECT) (|&BODY| (BODY CONS)) :DOCUMENTATION \"Signal error message, placing non-string arguments in quotes.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION ERROR-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CONTINUABLE-ERROR-EXPANDER"
        "CONS"
        "(DEFUN (CONTINUABLE-ERROR-EXPANDER OBJECT) (|&BODY| (BODY CONS)) :DOCUMENTATION \"Signal error message, placing non-string arguments in quotes.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CONTINUABLE-ERROR-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "FORMAT-WALK-MESSAGE-ARGUMENTS"
        "CONS"
        "(DEFUN (FORMAT-WALK-MESSAGE-ARGUMENTS CONS) ((MESSAGEARGUMENTSTREE CONS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION FORMAT-WALK-MESSAGE-ARGUMENTS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "WALK-ERROR-EXPANDER"
        "CONS"
        "(DEFUN (WALK-ERROR-EXPANDER OBJECT) (|&BODY| (BODY CONS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION WALK-ERROR-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "WALK-INFORM-EXPANDER"
        "CONS"
        "(DEFUN (WALK-INFORM-EXPANDER OBJECT) (|&BODY| (BODY CONS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION WALK-INFORM-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "WALK-WARN-EXPANDER"
        "CONS"
        "(DEFUN (WALK-WARN-EXPANDER OBJECT) (|&BODY| (BODY CONS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION WALK-WARN-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SAFETY-EXPANDER"
        "INTEGER-WRAPPER"
        "(DEFUN (SAFETY-EXPANDER OBJECT) ((LEVEL INTEGER-WRAPPER) (TEST OBJECT) |&BODY| (BODY CONS)) :DOCUMENTATION \"Signal warning message, placing non-string arguments in quotes.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SAFETY-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "EVAL-ERROR-EXPANDER"
        "CONS"
        "(DEFUN (EVAL-ERROR-EXPANDER OBJECT) (|&BODY| (BODY CONS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION EVAL-ERROR-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INITIALIZE-FILE-STREAM"
        "STREAM"
        "(DEFUN INITIALIZE-FILE-STREAM ((SELF STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INITIALIZE-FILE-STREAM)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "TERMINATE-FILE-STREAM?"
        "STREAM"
        "(DEFUN (TERMINATE-FILE-STREAM? BOOLEAN) ((SELF STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION TERMINATE-FILE-STREAM?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "OPEN-STREAM"
        "STREAM"
        "(DEFUN OPEN-STREAM ((SELF STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION OPEN-STREAM)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CLOSE-STREAM"
        "STREAM"
        "(DEFUN CLOSE-STREAM ((SELF STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CLOSE-STREAM)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CLOSE-ALL-FILES"
        NULL
        "(DEFUN CLOSE-ALL-FILES ())")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CLOSE-ALL-FILES)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "TERMINATE-STREAM-ITERATOR?"
        "STREAM-ITERATOR"
        "(DEFUN (TERMINATE-STREAM-ITERATOR? BOOLEAN) ((SELF STREAM-ITERATOR)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION TERMINATE-STREAM-ITERATOR?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "S-EXPRESSIONS"
        "INPUT-STREAM"
        "(DEFUN (S-EXPRESSIONS S-EXPRESSION-ITERATOR) ((STREAM INPUT-STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION S-EXPRESSIONS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "NEXT?"
        "S-EXPRESSION-ITERATOR"
        "(DEFMETHOD (NEXT? BOOLEAN) ((SELF S-EXPRESSION-ITERATOR)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION NEXT?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "LINES"
        "INPUT-STREAM"
        "(DEFUN (LINES LINE-ITERATOR) ((STREAM INPUT-STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION LINES)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "NEXT?"
        "LINE-ITERATOR"
        "(DEFMETHOD (NEXT? BOOLEAN) ((SELF LINE-ITERATOR)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION NEXT?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CHARACTERS"
        "INPUT-STREAM"
        "(DEFUN (CHARACTERS CHARACTER-ITERATOR) ((STREAM INPUT-STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CHARACTERS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "NEXT?"
        "CHARACTER-ITERATOR"
        "(DEFMETHOD (NEXT? BOOLEAN) ((SELF CHARACTER-ITERATOR)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION NEXT?)))
    (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
     "STARTUP-STREAMS"
     NULL
     "(DEFUN STARTUP-STREAMS ())"))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 8) 1)
    (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 9) 1)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL EOL SYMBOL (QUOTE EOL) :DOCUMENTATION \"Generates a newline character when passed to a stream.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL STANDARD-INPUT INPUT-STREAM NULL :DOCUMENTATION \"Denotes the standard input stream for the host language.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL STANDARD-OUTPUT OUTPUT-STREAM NULL :DOCUMENTATION \"Denotes the standard output stream for the host language.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL STANDARD-WARNING OUTPUT-STREAM NULL :DOCUMENTATION \"Denotes the standard warning stream for the host language.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL STANDARD-ERROR OUTPUT-STREAM NULL :DOCUMENTATION \"Denotes the standard error stream for the host language.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL SINGLE-QUOTE-STRING STRING-WRAPPER (WRAP-LITERAL \"'\") :DOCUMENTATION \"Holds a string containing the single quote character.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL SINGLE-BQUOTE-STRING STRING-WRAPPER (WRAP-LITERAL \"`\") :DOCUMENTATION \"Holds a string containing the single backquote character.\")")
    (STORE-MACRO
     SYM-STREAMS-PRINT
     SYM-STREAMS-PRINT-EXPANDER
     (CL:FUNCTION PRINT-EXPANDER))
    (STORE-MACRO
     SYM-STREAMS-INFORM
     SYM-STREAMS-INFORM-EXPANDER
     (CL:FUNCTION INFORM-EXPANDER))
    (STORE-MACRO
     SYM-STREAMS-WARN
     SYM-STREAMS-WARN-EXPANDER
     (CL:FUNCTION WARN-EXPANDER))
    (STORE-MACRO
     SYM-STREAMS-ERROR
     SYM-STREAMS-ERROR-EXPANDER
     (CL:FUNCTION ERROR-EXPANDER))
    (STORE-MACRO
     SYM-STREAMS-CONTINUABLE-ERROR
     SYM-STREAMS-CONTINUABLE-ERROR-EXPANDER
     (CL:FUNCTION CONTINUABLE-ERROR-EXPANDER))
    (STORE-MACRO
     SYM-STREAMS-WALK-ERROR
     SYM-STREAMS-WALK-ERROR-EXPANDER
     (CL:FUNCTION WALK-ERROR-EXPANDER))
    (STORE-MACRO
     SYM-STREAMS-WALK-INFORM
     SYM-STREAMS-WALK-INFORM-EXPANDER
     (CL:FUNCTION WALK-INFORM-EXPANDER))
    (STORE-MACRO
     SYM-STREAMS-WALK-WARN
     SYM-STREAMS-WALK-WARN-EXPANDER
     (CL:FUNCTION WALK-WARN-EXPANDER))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *SAFETY* INTEGER 3 :DOCUMENTATION \"Integer between 0 and 3.  Higher levels call more
safety checks.\")")
    (CL:LET*
     ((GLOBAL (LOOKUP-GLOBAL-VARIABLE SYM-STREAMS-*SAFETY*)))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-GET-VALUE-CODE GLOBAL)
      (CL:FUNCTION READ-*SAFETY*))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-SET-VALUE-CODE GLOBAL)
      (CL:FUNCTION WRITE-*SAFETY*)))
    (STORE-MACRO
     SYM-STREAMS-SAFETY
     SYM-STREAMS-SAFETY-EXPANDER
     (CL:FUNCTION SAFETY-EXPANDER))
    (STORE-MACRO
     SYM-STREAMS-EVAL-ERROR
     SYM-STREAMS-EVAL-ERROR-EXPANDER
     (CL:FUNCTION EVAL-ERROR-EXPANDER))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *OPEN-FILE-STREAMS* (LIST OF STREAM) (NEW (LIST OF STREAM)) :DOCUMENTATION \"List of file streams that are currently open.\")")))
  :VOID)
