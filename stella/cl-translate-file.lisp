;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

#|--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1996, 1997             | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied "AS IS",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SYM-CL-TRANSLATE-FILE-GLOBAL-VARIABLE NULL)
(CL:DEFVAR SYM-CL-TRANSLATE-FILE-CLASS NULL)
(CL:DEFVAR KWD-CL-TRANSLATE-FILE-COMMON-LISP NULL)
(CL:DEFVAR KWD-CL-TRANSLATE-FILE-TRANSLATE NULL)
(CL:DEFVAR KWD-CL-TRANSLATE-FILE-TRANSLATE-WITH-COPYRIGHT-HEADER NULL)
(CL:DEFVAR KWD-CL-TRANSLATE-FILE-WARN-ABOUT-MISSING-METHODS NULL)
(CL:DEFVAR KWD-CL-TRANSLATE-FILE-WARN-ABOUT-UNDEFINED-METHODS NULL)
(CL:DEFVAR KWD-CL-TRANSLATE-FILE-USE-HARDCODED-SYMBOLS NULL)
(CL:DEFVAR SYM-CL-TRANSLATE-FILE-STARTUP NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL
  *STELLA-MODULE*
  FALSE-WRAPPER
  *GENSYM-COUNTER*
  *MODULE*
  *TRANSLATIONUNITS*
  EOL))

;;; (DEFGLOBAL *CL-TRANSLATED-FILE-SUFFIX* ...)

(CL:DEFVAR *CL-TRANSLATED-FILE-SUFFIX* ".lisp")

;;; (DEFGLOBAL *STELLA-TRANSLATED-FILE-SUFFIX* ...)

(CL:DEFVAR *STELLA-TRANSLATED-FILE-SUFFIX* ".ste")

;;; (DEFUN (CL-MAKE-OUTPUT-FILE-NAME FILE-NAME) ...)

(CL:DEFUN CL-MAKE-OUTPUT-FILE-NAME (SOURCEFILE)
  (CL:RETURN-FROM
   CL-MAKE-OUTPUT-FILE-NAME
   (CONCATENATE
    (FILE-NAME-WITHOUT-TYPE SOURCEFILE)
    *CL-TRANSLATED-FILE-SUFFIX*))
  :VOID)

;;; (DEFUN (STELLA-MAKE-OUTPUT-FILE-NAME FILE-NAME) ...)

(CL:DEFUN STELLA-MAKE-OUTPUT-FILE-NAME (SOURCEFILE)
  (CL:RETURN-FROM
   STELLA-MAKE-OUTPUT-FILE-NAME
   (CONCATENATE
    (FILE-NAME-WITHOUT-TYPE SOURCEFILE)
    *STELLA-TRANSLATED-FILE-SUFFIX*))
  :VOID)

;;; (DEFUN (AUXILIARY-VARIABLE-UNIT? BOOLEAN) ...)

(CL:DEFUN AUXILIARY-VARIABLE-UNIT? (UNIT)
  (CL:RETURN-FROM
   AUXILIARY-VARIABLE-UNIT?
   (CL:IF
    (CL:AND
     (CL:EQ (CLSYS-SVAL TRANSLATION-UNIT AUXILIARY? UNIT) 1)
     (CL:EQ
      (CLSYS-SVAL TRANSLATION-UNIT CATEGORY UNIT)
      SYM-CL-TRANSLATE-FILE-GLOBAL-VARIABLE))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN CL-OUTPUT-ONE-UNIT ...)

(CL:DEFUN CL-OUTPUT-ONE-UNIT (UNIT STREAM)
  (CL:WHEN
   (CL:NOT (CL:EQ (CLSYS-SVAL TRANSLATION-UNIT CATEGORY UNIT) NULL))
   (CL:WHEN
    (CL:EQ (AUXILIARY-VARIABLE-UNIT? UNIT) 0)
    (CL:PROGN (CL:TERPRI STREAM) (CL:FORCE-OUTPUT STREAM)))
   (CL:WHEN
    (CL:NOT (CL:EQ (CLSYS-SVAL TRANSLATION-UNIT ANNOTATION UNIT) NULL))
    (CL:PROGN
     (CL:WRITE-STRING ";;; " STREAM)
     (CL:WRITE-STRING (CLSYS-SVAL TRANSLATION-UNIT ANNOTATION UNIT) STREAM)
     (CL:TERPRI STREAM)
     (CL:FORCE-OUTPUT STREAM)
     (CL:TERPRI STREAM)
     (CL:FORCE-OUTPUT STREAM)))
   (PRINT-STELLA-DEFINITION
    (CLSYS-SVAL TRANSLATION-UNIT TRANSLATION UNIT)
    STREAM)
   (CL:SETF (CLSYS-SVAL TRANSLATION-UNIT CATEGORY UNIT) NULL))
  :VOID)

;;; (DEFUN CL-OUTPUT-ALL-UNITS-TO-FILE ...)

(CL:DEFUN CL-OUTPUT-ALL-UNITS-TO-FILE (SOURCEFILE)
  (CL:LET*
   ((OUTPUTFILE (CL-MAKE-OUTPUT-FILE-NAME SOURCEFILE))
    (OUTPUTSTREAM (NEW-OUTPUT-FILE-STREAM OUTPUTFILE))
    (NATIVEOUTPUTSTREAM
     (CLSYS-SVAL OUTPUT-FILE-STREAM NATIVE-STREAM OUTPUTSTREAM)))
   (CL-OUTPUT-FILE-HEADER
    OUTPUTSTREAM
    (NATIVE-PACKAGE *MODULE*)
    (TRANSLATE-WITH-COPYRIGHT-HEADER?)
    TRUE)
   (CL:PROGN
    (CL:WRITE-STRING ";;; Auxiliary variables:" NATIVEOUTPUTSTREAM)
    (CL:TERPRI NATIVEOUTPUTSTREAM)
    (CL:FORCE-OUTPUT NATIVEOUTPUTSTREAM)
    (CL:TERPRI NATIVEOUTPUTSTREAM)
    (CL:FORCE-OUTPUT NATIVEOUTPUTSTREAM))
   (CL:LET*
    ((UNIT NULL)
     (ITER-001 (CLSYS-SVAL LIST THE-CONS-LIST *TRANSLATIONUNITS*)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ UNIT (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:WHEN
      (CL:EQ (AUXILIARY-VARIABLE-UNIT? UNIT) 1)
      (CL-OUTPUT-ONE-UNIT UNIT NATIVEOUTPUTSTREAM))))
   (CL-OUTPUT-FORWARD-DECLARATIONS NATIVEOUTPUTSTREAM)
   (CL:WHEN
    (CL:AND (CL:EQ (USE-CL-STRUCTS?) 1) (CL:EQ (USE-VECTOR-STRUCTS?) 0))
    (CL:LET*
     ((UNIT NULL)
      (ITER-002 (CLSYS-SVAL LIST THE-CONS-LIST *TRANSLATIONUNITS*)))
     (CL:LOOP
      WHILE
      (CL:NOT (CL:EQ ITER-002 NIL))
      DO
      (CL:PROGN
       (CL:SETQ UNIT (CLSYS-SVAL CONS VALUE ITER-002))
       (CL:SETQ ITER-002 (CLSYS-SVAL CONS REST ITER-002)))
      (CL:WHEN
       (CL:EQ
        (CLSYS-SVAL TRANSLATION-UNIT CATEGORY UNIT)
        SYM-CL-TRANSLATE-FILE-CLASS)
       (CL-OUTPUT-ONE-UNIT UNIT NATIVEOUTPUTSTREAM)))))
   (CL:LET*
    ((UNIT NULL)
     (ITER-003 (CLSYS-SVAL LIST THE-CONS-LIST *TRANSLATIONUNITS*)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-003 NIL))
     DO
     (CL:PROGN
      (CL:SETQ UNIT (CLSYS-SVAL CONS VALUE ITER-003))
      (CL:SETQ ITER-003 (CLSYS-SVAL CONS REST ITER-003)))
     (CL:WHEN
      (CL:EQ (AUXILIARY-VARIABLE-UNIT? UNIT) 0)
      (CL-OUTPUT-ONE-UNIT UNIT NATIVEOUTPUTSTREAM))))
   (FREE OUTPUTSTREAM))
  :VOID)

;;; (DEFUN CL-OUTPUT-FILE-HEADER ...)

(CL:DEFUN CL-OUTPUT-FILE-HEADER (STREAM PACKAGE COPYRIGHT? ENSUREPACKAGE?)
  (CL:LET
   ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
   (CL:WRITE-STRING ";;; -*- Mode: Lisp; Package: " %%STREAM)
   (CL:WRITE-STRING PACKAGE %%STREAM)
   (CL:WRITE-STRING "; Syntax: COMMON-LISP; Base: 10 -*-" %%STREAM)
   (CL:TERPRI %%STREAM)
   (CL:FORCE-OUTPUT %%STREAM)
   (CL:TERPRI %%STREAM)
   (CL:FORCE-OUTPUT %%STREAM))
  (CL:WHEN (CL:EQ COPYRIGHT? 1) (OUTPUT-COPYRIGHT-HEADER STREAM))
  (CL:WHEN
   (CL:NOT
    (CL:OR (CL:EQ (STRING-EQL? PACKAGE "STELLA") 1) (CL:EQ ENSUREPACKAGE? 0)))
   (CL:LET
    ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
    (CL:WRITE-STRING "#.(CL:UNLESS (CL:FIND-PACKAGE \"" %%STREAM)
    (CL:WRITE-STRING PACKAGE %%STREAM)
    (CL:WRITE-STRING "\")" %%STREAM)
    (CL:TERPRI %%STREAM)
    (CL:FORCE-OUTPUT %%STREAM)
    (CL:WRITE-STRING "     '(CL:DEFPACKAGE \"" %%STREAM)
    (CL:WRITE-STRING PACKAGE %%STREAM)
    (CL:WRITE-STRING "\"))" %%STREAM)
    (CL:TERPRI %%STREAM)
    (CL:FORCE-OUTPUT %%STREAM)
    (CL:TERPRI %%STREAM)
    (CL:FORCE-OUTPUT %%STREAM)))
  (CL:LET
   ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
   (CL:WRITE-STRING "(CL:IN-PACKAGE \"" %%STREAM)
   (CL:WRITE-STRING PACKAGE %%STREAM)
   (CL:WRITE-STRING "\")" %%STREAM)
   (CL:TERPRI %%STREAM)
   (CL:FORCE-OUTPUT %%STREAM)
   (CL:TERPRI %%STREAM)
   (CL:FORCE-OUTPUT %%STREAM))
  :VOID)

;;; (DEFUN CL-OUTPUT-FORWARD-DECLARATIONS ...)

(CL:DEFUN CL-OUTPUT-FORWARD-DECLARATIONS (STREAM)
  (CL:LET*
   ((DEFINEDVARIABLES (NEW-LIST)) (FORWARDREFERENCEDVARIABLES (NEW-LIST)))
   (CL:LET*
    ((UNIT NULL)
     (ITER-001 (CLSYS-SVAL LIST THE-CONS-LIST *TRANSLATIONUNITS*)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ UNIT (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:WHEN
      (CL:EQ (AUXILIARY-VARIABLE-UNIT? UNIT) 1)
      (PUSH DEFINEDVARIABLES (CLSYS-SVAL TRANSLATION-UNIT THE-OBJECT UNIT)))))
   (CL:LET*
    ((UNIT NULL)
     (ITER-002 (CLSYS-SVAL LIST THE-CONS-LIST *TRANSLATIONUNITS*)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-002 NIL))
     DO
     (CL:PROGN
      (CL:SETQ UNIT (CLSYS-SVAL CONS VALUE ITER-002))
      (CL:SETQ ITER-002 (CLSYS-SVAL CONS REST ITER-002)))
     (CL:WHEN
      (CL:EQ (AUXILIARY-VARIABLE-UNIT? UNIT) 0)
      (CL:WHEN
       (CL:EQ
        (CLSYS-SVAL TRANSLATION-UNIT CATEGORY UNIT)
        SYM-CL-TRANSLATE-FILE-GLOBAL-VARIABLE)
       (PUSH DEFINEDVARIABLES (CLSYS-SVAL TRANSLATION-UNIT THE-OBJECT UNIT)))
      (CL:LET*
       ((VARIABLE NULL)
        (ITER-003
         (CLSYS-SVAL
          LIST
          THE-CONS-LIST
          (CLSYS-SVAL TRANSLATION-UNIT REFERENCED-GLOBALS UNIT))))
       (CL:LOOP
        WHILE
        (CL:NOT (CL:EQ ITER-003 NIL))
        DO
        (CL:PROGN
         (CL:SETQ VARIABLE (CLSYS-SVAL CONS VALUE ITER-003))
         (CL:SETQ ITER-003 (CLSYS-SVAL CONS REST ITER-003)))
        (CL:WHEN
         (CL:AND
          (CL:EQ (MEMBER? DEFINEDVARIABLES VARIABLE) 0)
          (CL:EQ (MEMBER? FORWARDREFERENCEDVARIABLES VARIABLE) 0))
         (PUSH FORWARDREFERENCEDVARIABLES VARIABLE)))))))
   (CL:LET*
    ((IT (ALLOCATE-ITERATOR FORWARDREFERENCEDVARIABLES)))
    (CL:LOOP
     WHILE
     (CL:EQ (NEXT? IT) 1)
     DO
     (VALUE-SETTER
      IT
      (CLSYS-SVAL
       GLOBAL-VARIABLE
       VARIABLE-NAME
       (CLSYS-SVAL LIST-ITERATOR VALUE IT)))))
   (CL:WHEN
    (CL:EQ (NON-EMPTY? FORWARDREFERENCEDVARIABLES) 1)
    (CL:PROGN
     (CL:TERPRI STREAM)
     (CL:FORCE-OUTPUT STREAM)
     (CL:WRITE-STRING ";;; Forward declarations:" STREAM)
     (CL:TERPRI STREAM)
     (CL:FORCE-OUTPUT STREAM)
     (CL:TERPRI STREAM)
     (CL:FORCE-OUTPUT STREAM))
    (PRINT-STELLA-DEFINITION
     (LIST*
      (INTERN-COMMON-LISP-SYMBOL "DECLAIM")
      (CONS
       (INTERN-COMMON-LISP-SYMBOL "SPECIAL")
       (CONCATENATE
        (CL-TRANSLATE-LIST-OF-TREES
         (CLSYS-SVAL LIST THE-CONS-LIST FORWARDREFERENCEDVARIABLES))
        NIL))
      NIL)
     STREAM))
   (FREE DEFINEDVARIABLES)
   (FREE FORWARDREFERENCEDVARIABLES))
  :VOID)

;;; (DEFUN CL-TRANSLATE-FILE ...)

(CL:DEFUN CL-TRANSLATE-FILE (FILE)
  "Translate a Stella 'file' to Common-Lisp."
  (CL:LET*
   ((OLDOUTPUTLANGUAGE (TRANSLATOR-OUTPUT-LANGUAGE)))
   (SET-TRANSLATOR-OUTPUT-LANGUAGE KWD-CL-TRANSLATE-FILE-COMMON-LISP)
   (OPERATE-ON-FILE FILE KWD-CL-TRANSLATE-FILE-TRANSLATE)
   (SET-TRANSLATOR-OUTPUT-LANGUAGE OLDOUTPUTLANGUAGE))
  :VOID)

;;; (DEFUN CL-TRANSLATE-STELLA ...)

(CL:DEFUN CL-TRANSLATE-STELLA ()
  (CL:SETQ *GENSYM-COUNTER* -1)
  (ENABLE-ENVIRONMENT-FEATURE
   KWD-CL-TRANSLATE-FILE-TRANSLATE-WITH-COPYRIGHT-HEADER
   KWD-CL-TRANSLATE-FILE-WARN-ABOUT-MISSING-METHODS
   KWD-CL-TRANSLATE-FILE-WARN-ABOUT-UNDEFINED-METHODS)
  (DISABLE-ENVIRONMENT-FEATURE KWD-CL-TRANSLATE-FILE-USE-HARDCODED-SYMBOLS)
  (CL:LET*
   ((OLDOUTPUTLANGUAGE (TRANSLATOR-OUTPUT-LANGUAGE))
    (BOOTSYMBOLSFILE
     (CL:IF
      (CL:EQL (DIRECTORY-SEPARATOR) #\;)
      "PL:sources;stella;boot-symbols.ste"
      "boot-symbols.ste")))
   (SET-TRANSLATOR-OUTPUT-LANGUAGE KWD-CL-TRANSLATE-FILE-COMMON-LISP)
   (CL:LET*
    ((*SAFETY* 1))
    (CL:DECLARE (CL:SPECIAL *SAFETY*))
    (SIMPLE-TRANSLATE-SYSTEM
     (STELLA-FILES KWD-CL-TRANSLATE-FILE-COMMON-LISP)
     (NULL? (LOOKUP-FUNCTION SYM-CL-TRANSLATE-FILE-STARTUP))
     TRUE)
    (CREATE-SYMBOL-STARTUP-FILE BOOTSYMBOLSFILE)
    (CL-TRANSLATE-FILE BOOTSYMBOLSFILE))
   (SET-TRANSLATOR-OUTPUT-LANGUAGE OLDOUTPUTLANGUAGE)
   (DISABLE-ENVIRONMENT-FEATURE
    KWD-CL-TRANSLATE-FILE-TRANSLATE-WITH-COPYRIGHT-HEADER))
  :VOID)

;;; (DEFUN CL-COMPILE-AND-LOAD-FILE ...)

(CL:DEFUN CL-COMPILE-AND-LOAD-FILE (FILE CL:&REST ARGS)
  (CL:LET*
   ((CALLSTARTUPFUNCTION? TRUE))
   (CL:LET*
    ((ARG NULL) (ITER-001 (ALLOCATE-ITERATOR ARGS)))
    (CL:LOOP
     WHILE
     (CL:EQ (NEXT? ITER-001) 1)
     DO
     (CL:PROGN (CL:SETQ ARG (CLSYS-SVAL LISP-CONS-ITERATOR VALUE ITER-001)))
     (CL:WHEN
      (CL:OR
       (CL:EQ (EQL? FALSE-WRAPPER ARG) 1)
       (CL:EQ (NOT-CL-NIL? (CL:EQL ARG FALSE)) 1))
      (CL:SETQ CALLSTARTUPFUNCTION? FALSE))))
   (CL:let* ((pathName
                 (CL:pathname
                  (reroot-file-name
                   file *systemSourceDirectory* *systemSourceDirectory*)))
                (translatedFile
                 ;; Ignore any type-suffix supplied in 'file':
                 (CL:merge-pathnames
                  (CL:format CL:nil "~a~a"
                             (CL:pathname-name pathName)
                             *cl-translated-file-suffix*)
                  pathName))
                (binaryFile
                 (CL:merge-pathnames
                  (CL:format CL:nil "~a~a"
                             (CL:pathname-name pathName)
                             CL-USER::*stella-binary-extension*)
                  (CL:pathname
                   (reroot-file-name
                    file *systemSourceDirectory* *systemBinaryDirectory*)))))
        (CL:when (CL-USER::stella-need-to-compile? translatedFile binaryFile)
          (CL:proclaim CL-USER::*stella-compiler-optimization*)
          (CL:compile-file translatedFile :output-file binaryFile))
        (CL:load binaryFile)
        (CL:when (true-p callStartupFunction?)
          (CL:funcall
           (CL:intern (stringify (startup-function-name file)) "STELLA")))))
  :VOID)

(CL:DEFUN STARTUP-CL-TRANSLATE-FILE ()
  (CL:LET*
   ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 2) 1)
    (CL:SETQ
     SYM-CL-TRANSLATE-FILE-GLOBAL-VARIABLE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "GLOBAL-VARIABLE" NULL 0))
    (CL:SETQ
     SYM-CL-TRANSLATE-FILE-CLASS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS" NULL 0))
    (CL:SETQ
     KWD-CL-TRANSLATE-FILE-COMMON-LISP
     (INTERN-RIGID-SYMBOL-WRT-MODULE "COMMON-LISP" NULL 2))
    (CL:SETQ
     KWD-CL-TRANSLATE-FILE-TRANSLATE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "TRANSLATE" NULL 2))
    (CL:SETQ
     KWD-CL-TRANSLATE-FILE-TRANSLATE-WITH-COPYRIGHT-HEADER
     (INTERN-RIGID-SYMBOL-WRT-MODULE
      "TRANSLATE-WITH-COPYRIGHT-HEADER"
      NULL
      2))
    (CL:SETQ
     KWD-CL-TRANSLATE-FILE-WARN-ABOUT-MISSING-METHODS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WARN-ABOUT-MISSING-METHODS" NULL 2))
    (CL:SETQ
     KWD-CL-TRANSLATE-FILE-WARN-ABOUT-UNDEFINED-METHODS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WARN-ABOUT-UNDEFINED-METHODS" NULL 2))
    (CL:SETQ
     KWD-CL-TRANSLATE-FILE-USE-HARDCODED-SYMBOLS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "USE-HARDCODED-SYMBOLS" NULL 2))
    (CL:SETQ
     SYM-CL-TRANSLATE-FILE-STARTUP
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP" NULL 0)))
   (CL:WHEN (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 6) 1) (FINALIZE-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 7) 1)
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CL-MAKE-OUTPUT-FILE-NAME"
        "FILE-NAME"
        "(DEFUN (CL-MAKE-OUTPUT-FILE-NAME FILE-NAME) ((SOURCEFILE FILE-NAME)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CL-MAKE-OUTPUT-FILE-NAME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "STELLA-MAKE-OUTPUT-FILE-NAME"
        "FILE-NAME"
        "(DEFUN (STELLA-MAKE-OUTPUT-FILE-NAME FILE-NAME) ((SOURCEFILE FILE-NAME)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION STELLA-MAKE-OUTPUT-FILE-NAME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "AUXILIARY-VARIABLE-UNIT?"
        "TRANSLATION-UNIT"
        "(DEFUN (AUXILIARY-VARIABLE-UNIT? BOOLEAN) ((UNIT TRANSLATION-UNIT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION AUXILIARY-VARIABLE-UNIT?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CL-OUTPUT-ONE-UNIT"
        "TRANSLATION-UNIT"
        "(DEFUN CL-OUTPUT-ONE-UNIT ((UNIT TRANSLATION-UNIT) (STREAM NATIVE-OUTPUT-STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CL-OUTPUT-ONE-UNIT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CL-OUTPUT-ALL-UNITS-TO-FILE"
        "FILE-NAME"
        "(DEFUN CL-OUTPUT-ALL-UNITS-TO-FILE ((SOURCEFILE FILE-NAME)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CL-OUTPUT-ALL-UNITS-TO-FILE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CL-OUTPUT-FILE-HEADER"
        "OUTPUT-STREAM"
        "(DEFUN CL-OUTPUT-FILE-HEADER ((STREAM OUTPUT-STREAM) (PACKAGE STRING) (COPYRIGHT? BOOLEAN) (ENSUREPACKAGE? BOOLEAN)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CL-OUTPUT-FILE-HEADER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CL-OUTPUT-FORWARD-DECLARATIONS"
        "NATIVE-OUTPUT-STREAM"
        "(DEFUN CL-OUTPUT-FORWARD-DECLARATIONS ((STREAM NATIVE-OUTPUT-STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CL-OUTPUT-FORWARD-DECLARATIONS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CL-TRANSLATE-FILE"
        "FILE-NAME"
        "(DEFUN CL-TRANSLATE-FILE ((FILE FILE-NAME)) :DOCUMENTATION \"Translate a Stella 'file' to Common-Lisp.\" :PUBLIC? TRUE)")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CL-TRANSLATE-FILE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CL-TRANSLATE-STELLA"
        NULL
        "(DEFUN CL-TRANSLATE-STELLA ())")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CL-TRANSLATE-STELLA)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CL-COMPILE-AND-LOAD-FILE"
        "STRING"
        "(DEFUN CL-COMPILE-AND-LOAD-FILE ((FILE STRING) |&REST| (ARGS OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CL-COMPILE-AND-LOAD-FILE)))
    (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
     "STARTUP-CL-TRANSLATE-FILE"
     NULL
     "(DEFUN STARTUP-CL-TRANSLATE-FILE ())"))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 8) 1)
    (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 9) 1)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *CL-TRANSLATED-FILE-SUFFIX* STRING \".lisp\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *STELLA-TRANSLATED-FILE-SUFFIX* STRING \".ste\")")))
  :VOID)
