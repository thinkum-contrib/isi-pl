;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

#|--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1996, 1997             | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied "AS IS",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SYM-DESCRIBE-BQUOTE NULL)
(CL:DEFVAR SYM-DESCRIBE-GET-OBJECT NULL)
(CL:DEFVAR SYM-DESCRIBE-GET NULL)
(CL:DEFVAR SYM-DESCRIBE-GET-EXPANDER NULL)
(CL:DEFVAR SGT-DESCRIBE-CLASS NULL)
(CL:DEFVAR SGT-DESCRIBE-FUNCTION-CODE-WRAPPER NULL)
(CL:DEFVAR SGT-DESCRIBE-OBJECT NULL)
(CL:DEFVAR SGT-DESCRIBE-CONTEXT NULL)
(CL:DEFVAR SGT-DESCRIBE-METHOD-SLOT NULL)
(CL:DEFVAR SGT-DESCRIBE-SLOT NULL)
(CL:DEFVAR SGT-DESCRIBE-DEMON NULL)
(CL:DEFVAR KWD-DESCRIBE-VERBOSE NULL)
(CL:DEFVAR KWD-DESCRIBE-TERSE NULL)
(CL:DEFVAR KWD-DESCRIBE-SOURCE NULL)
(CL:DEFVAR SYM-DESCRIBE-VERBOSE NULL)
(CL:DEFVAR SYM-DESCRIBE-TERSE NULL)
(CL:DEFVAR SYM-DESCRIBE-SOURCE NULL)
(CL:DEFVAR SYM-DESCRIBE-LET NULL)
(CL:DEFVAR SYM-DESCRIBE-NAMEEXPRESSION NULL)
(CL:DEFVAR SYM-DESCRIBE-OBJECT NULL)
(CL:DEFVAR SYM-DESCRIBE-ONLY-IF NULL)
(CL:DEFVAR SYM-DESCRIBE-DEFINED? NULL)
(CL:DEFVAR SYM-DESCRIBE-NULL NULL)
(CL:DEFVAR SYM-DESCRIBE-IF NULL)
(CL:DEFVAR SYM-DESCRIBE-NULL? NULL)
(CL:DEFVAR SYM-DESCRIBE-PRINT NULL)
(CL:DEFVAR SYM-DESCRIBE-DESCRIBE-OBJECT NULL)
(CL:DEFVAR SYM-DESCRIBE-STANDARD-OUTPUT NULL)
(CL:DEFVAR SYM-DESCRIBE-DESCRIBE NULL)
(CL:DEFVAR SYM-DESCRIBE-DESCRIBE-EXPANDER NULL)
(CL:DEFVAR KWD-DESCRIBE-VOID NULL)
(CL:DEFVAR SGT-DESCRIBE-LIST NULL)
(CL:DEFVAR SGT-DESCRIBE-ITERATOR NULL)
(CL:DEFVAR SYM-DESCRIBE-*SLOTOPTIONSLOTS* NULL)
(CL:DEFVAR SYM-DESCRIBE-*CLASSOPTIONSLOTS* NULL)
(CL:DEFVAR SYM-DESCRIBE-*CLASSUNSTRINGIFIEDOPTIONS* NULL)
(CL:DEFVAR SYM-DESCRIBE-SLOT-OPTION-KEYWORD NULL)
(CL:DEFVAR SGT-DESCRIBE-RELATION NULL)
(CL:DEFVAR SGT-DESCRIBE-STORAGE-SLOT NULL)
(CL:DEFVAR SGT-DESCRIBE-BOOLEAN-WRAPPER NULL)
(CL:DEFVAR SGT-DESCRIBE-LITERAL-WRAPPER NULL)
(CL:DEFVAR SYM-DESCRIBE-TRUE NULL)
(CL:DEFVAR SYM-DESCRIBE-FALSE NULL)
(CL:DEFVAR SYM-DESCRIBE-NULL-BOOLEAN NULL)
(CL:DEFVAR SYM-DESCRIBE-SLOT-INITIAL-VALUE NULL)
(CL:DEFVAR SYM-DESCRIBE-SLOT-TYPE-SPECIFIER NULL)
(CL:DEFVAR SYM-DESCRIBE-SLOT NULL)
(CL:DEFVAR KWD-DESCRIBE-OWNER NULL)
(CL:DEFVAR KWD-DESCRIBE-TYPE NULL)
(CL:DEFVAR KWD-DESCRIBE-INITIALLY NULL)
(CL:DEFVAR SYM-DESCRIBE-DEFMODULE NULL)
(CL:DEFVAR KWD-DESCRIBE-INCLUDES NULL)
(CL:DEFVAR KWD-DESCRIBE-USES NULL)
(CL:DEFVAR KWD-DESCRIBE-SHADOWS NULL)
(CL:DEFVAR SYM-DESCRIBE->>_INFERRED_SLOTS NULL)
(CL:DEFVAR KWD-DESCRIBE-CHILDREN NULL)
(CL:DEFVAR KWD-DESCRIBE-USED-BY NULL)
(CL:DEFVAR KWD-DESCRIBE-CARDINAL-MODULE NULL)
(CL:DEFVAR SYM-DESCRIBE-DOCUMENTATION NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL
  *STELLA-MODULE*
  *MODULE*
  NULL-STRING-WRAPPER
  FALSE-WRAPPER
  NULL-BOOLEAN-WRAPPER
  TRUE-WRAPPER
  ELIPSIS
  STANDARD-OUTPUT
  EOL))

;;; (DEFMACRO GET ...)

(CL:DEFUN GET-EXPANDER (NAME BODY)
  (CL:LET*
   ((TYPE (FIRST BODY)))
   (CL:WHEN
    (CL:EQ (SYMBOL? NAME) 1)
    (CL:SETQ NAME (LIST* SYM-DESCRIBE-BQUOTE NAME NIL)))
   (CL:WHEN
    (CL:EQ (SYMBOL? TYPE) 1)
    (CL:SETQ TYPE (LIST* SYM-DESCRIBE-BQUOTE TYPE NIL)))
   (CL:RETURN-FROM
    GET-EXPANDER
    (LIST* SYM-DESCRIBE-GET-OBJECT NAME (CONS TYPE NIL))))
  :VOID)

;;; (VERBATIM :COMMON-LISP ...)

(CL:DEFMACRO GET (NAME CL:&BODY BODY)
  (SAFELY-EXPAND-MACRO (CL:LIST* (CL:QUOTE GET) NAME BODY)))

;;; (DEFMETHOD (GET-OBJECT OBJECT) ...)

(CL:DEFMETHOD GET-OBJECT ((SELF OBJECT) TYPE)
  (CL:RETURN-FROM GET-OBJECT (SEARCH-FOR-OBJECT SELF TYPE))
  :VOID)

;;; (DEFMETHOD (GET-OBJECT OBJECT) ...)

(CL:DEFMETHOD GET-OBJECT ((SELF CL:STRING) TYPE)
  (CL:LET*
   ((WRAPPEDSTRING (WRAP-LITERAL SELF))
    (OBJECT (SEARCH-FOR-OBJECT WRAPPEDSTRING TYPE)))
   (FREE WRAPPEDSTRING)
   (CL:RETURN-FROM GET-OBJECT OBJECT))
  :VOID)

;;; (DEFMETHOD (GET-OBJECT OBJECT) ...)

(CL:DEFMETHOD GET-OBJECT ((SELF CL:INTEGER) TYPE)
  (CL:LET*
   ((WRAPPEDINTEGER (WRAP-LITERAL SELF))
    (OBJECT (SEARCH-FOR-OBJECT WRAPPEDINTEGER TYPE)))
   (FREE WRAPPEDINTEGER)
   (CL:RETURN-FROM GET-OBJECT OBJECT))
  :VOID)

;;; (DEFGLOBAL *STRING-TO-OBJECT-FUNCTIONS* ...)

(CL:DEFVAR *STRING-TO-OBJECT-FUNCTIONS* NULL
  "Table of functions (keyed by type of object returned) that can
be called to search for an object identified by a string.")

;;; (DEFGLOBAL *INTEGER-TO-OBJECT-FUNCTIONS* ...)

(CL:DEFVAR *INTEGER-TO-OBJECT-FUNCTIONS* NULL
  "List of functions that can be called to search for
an object identified by an integer.")

;;; (DEFUN (SEARCH-FOR-OBJECT OBJECT) ...)

(CL:DEFUN SEARCH-FOR-OBJECT (SELF TYPEREF)
  "If 'self' is a string or a symbol, search for an object named
'self' of type 'type'.  Otherwise, if 'self' is an object, return it."
  (CL:LET*
   ((CLASSTYPE NULL))
   (CL:WHEN
    (CL:NOT (CL:EQ TYPEREF NULL))
    (CL:LET*
     ((TYPEREF-001 TYPEREF))
     (CL:COND
      ((CL:EQ (SYMBOL? TYPEREF) 1)
       (CL:LET*
        ((TYPEREF NULL))
        (CL:SETQ TYPEREF TYPEREF-001)
        (CL:SETQ
         CLASSTYPE
         (LOOKUP-SURROGATE (CLSYS-SVAL SYMBOL SYMBOL-NAME TYPEREF)))))
      ((CL:EQ (SURROGATE? TYPEREF) 1)
       (CL:LET*
        ((TYPEREF NULL))
        (CL:SETQ TYPEREF TYPEREF-001)
        (CL:SETQ CLASSTYPE TYPEREF)))
      ((CL:EQ (STRING? TYPEREF) 1)
       (CL:LET*
        ((TYPEREF NULL))
        (CL:SETQ TYPEREF TYPEREF-001)
        (CL:SETQ
         CLASSTYPE
         (LOOKUP-SURROGATE
          (CLSYS-SVAL STRING-WRAPPER WRAPPER-VALUE TYPEREF)))))
      ((CL:EQ (CLASS? TYPEREF) 1)
       (CL:LET*
        ((TYPEREF NULL))
        (CL:SETQ TYPEREF TYPEREF-001)
        (CL:SETQ CLASSTYPE (CLSYS-SVAL CLASS CLASS-TYPE TYPEREF))))
      (CL:T
       (CL:LET
        ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
        (CL:WRITE-STRING "Invalid type reference: `" %%STREAM)
        (PRINT-OBJECT TYPEREF %%STREAM)
        (CL:WRITE-STRING "'" %%STREAM)
        (CL:TERPRI %%STREAM)
        (CL:FORCE-OUTPUT %%STREAM)))))
    (CL:WHEN
     (CL:AND
      (CL:NOT (CL:EQ CLASSTYPE NULL))
      (CL:OR
       (CL:EQ (CLSYS-SVAL SURROGATE SURROGATE-VALUE CLASSTYPE) NULL)
       (CL:EQ
        (ISA?
         (CLSYS-SVAL SURROGATE SURROGATE-VALUE CLASSTYPE)
         SGT-DESCRIBE-CLASS)
        0)))
     (CL:LET
      ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
      (CL:WRITE-STRING "No class exists with name: `" %%STREAM)
      (CL:WRITE-STRING (CLSYS-SVAL SURROGATE SYMBOL-NAME CLASSTYPE) %%STREAM)
      (CL:WRITE-STRING "'" %%STREAM)
      (CL:TERPRI %%STREAM)
      (CL:FORCE-OUTPUT %%STREAM))
     (CL:SETQ CLASSTYPE NULL)))
   (CL:LET*
    ((SELF-001 SELF))
    (CL:COND
     ((CL:EQ (STRING? SELF) 1)
      (CL:LET*
       ((SELF NULL))
       (CL:SETQ SELF SELF-001)
       (CL:LET*
        ((STRING (CLSYS-SVAL STRING-WRAPPER WRAPPER-VALUE SELF))
         (OBJECT NULL))
        (CL:LET*
         ((FN NULL)
          (TYPE NULL)
          (ITER-001
           (CLSYS-SVAL
            KEY-VALUE-LIST
            THE-KV-LIST
            *STRING-TO-OBJECT-FUNCTIONS*)))
         (CL:LOOP
          WHILE
          (CL:NOT (CL:EQ ITER-001 NULL))
          DO
          (CL:SETQ TYPE (CLSYS-SVAL KV-CONS KEY ITER-001))
          (CL:PROGN
           (CL:SETQ FN (CLSYS-SVAL KV-CONS VALUE ITER-001))
           (CL:SETQ ITER-001 (CLSYS-SVAL KV-CONS REST ITER-001)))
          (CL:WHEN
           (CL:OR
            (CL:EQ CLASSTYPE NULL)
            (CL:EQ (SUBTYPE-OF? CLASSTYPE TYPE) 1))
           (CL:LET*
            ((FN-001 FN))
            (CL:COND
             ((CL:EQ (TAXONOMY-ISA? FN SGT-DESCRIBE-FUNCTION-CODE-WRAPPER) 1)
              (CL:LET*
               ((FN NULL))
               (CL:SETQ FN FN-001)
               (CL:SETQ
                OBJECT
                (CL:FUNCALL
                 (CLSYS-SVAL FUNCTION-CODE-WRAPPER WRAPPER-VALUE FN)
                 STRING))))
             (CL:T (CL:ERROR "`~A' is not a valid case option" FN))))
           (CL:WHEN
            (CL:NOT (CL:EQ OBJECT NULL))
            (CL:RETURN-FROM SEARCH-FOR-OBJECT OBJECT)))))
        (CL:RETURN-FROM SEARCH-FOR-OBJECT NULL))))
     ((CL:EQ (SYMBOL? SELF) 1)
      (CL:LET*
       ((SELF NULL))
       (CL:SETQ SELF SELF-001)
       (CL:RETURN-FROM
        SEARCH-FOR-OBJECT
        (SEARCH-FOR-OBJECT
         (WRAP-LITERAL (CLSYS-SVAL SYMBOL SYMBOL-NAME SELF))
         CLASSTYPE))))
     ((CL:EQ (INTEGER? SELF) 1)
      (CL:LET*
       ((SELF NULL))
       (CL:SETQ SELF SELF-001)
       (CL:LET*
        ((INTEGER (CLSYS-SVAL INTEGER-WRAPPER WRAPPER-VALUE SELF))
         (OBJECT NULL))
        (CL:LET*
         ((FN NULL)
          (ITER-002
           (CLSYS-SVAL LIST THE-CONS-LIST *INTEGER-TO-OBJECT-FUNCTIONS*)))
         (CL:LOOP
          WHILE
          (CL:NOT (CL:EQ ITER-002 NIL))
          DO
          (CL:PROGN
           (CL:SETQ FN (CLSYS-SVAL CONS VALUE ITER-002))
           (CL:SETQ ITER-002 (CLSYS-SVAL CONS REST ITER-002)))
          (CL:LET*
           ((FN-002 FN))
           (CL:COND
            ((CL:EQ (TAXONOMY-ISA? FN SGT-DESCRIBE-FUNCTION-CODE-WRAPPER) 1)
             (CL:LET*
              ((FN NULL))
              (CL:SETQ FN FN-002)
              (CL:SETQ
               OBJECT
               (CL:FUNCALL
                (CLSYS-SVAL FUNCTION-CODE-WRAPPER WRAPPER-VALUE FN)
                INTEGER))))
            (CL:T (CL:ERROR "`~A' is not a valid case option" FN))))
          (CL:WHEN
           (CL:NOT (CL:EQ OBJECT NULL))
           (CL:RETURN-FROM SEARCH-FOR-OBJECT OBJECT))))
        (CL:RETURN-FROM SEARCH-FOR-OBJECT NULL))))
     ((CL:EQ (TAXONOMY-ISA? SELF SGT-DESCRIBE-OBJECT) 1)
      (CL:LET*
       ((SELF NULL))
       (CL:SETQ SELF SELF-001)
       (CL:RETURN-FROM SEARCH-FOR-OBJECT SELF)))
     (CL:T (CL:RETURN-FROM SEARCH-FOR-OBJECT NULL)))))
  :VOID)

;;; (DEFUN (FILTER-STRING-TO-CLASS? BOOLEAN) ...)

(CL:DEFUN FILTER-STRING-TO-CLASS? (SELF ITERATOR)
  (CL:IF
   (CL:= (CLSYS-SVAL ALL-PURPOSE-ITERATOR ITERATOR-INTEGER ITERATOR) 1)
   (CL:RETURN-FROM
    FILTER-STRING-TO-CLASS?
    (STRING-EQL?
     (CLASS-NAME SELF)
     (CLSYS-SVAL
      STRING-WRAPPER
      WRAPPER-VALUE
      (CLSYS-SVAL ALL-PURPOSE-ITERATOR ITERATOR-OBJECT ITERATOR))))
   (CL:RETURN-FROM
    FILTER-STRING-TO-CLASS?
    (DEFINED?
     (STRING-SEARCH
      (CLASS-NAME SELF)
      (CLSYS-SVAL
       STRING-WRAPPER
       WRAPPER-VALUE
       (CLSYS-SVAL ALL-PURPOSE-ITERATOR ITERATOR-OBJECT ITERATOR))
      0))))
  :VOID)

;;; (DEFUN (STRING-TO-CLASSES (ITERATOR OF CLASS)) ...)

(CL:DEFUN STRING-TO-CLASSES (STRING EXACT?)
  (CL:LET*
   ((ITERATOR (NEW-ALL-PURPOSE-ITERATOR)))
   (CL:SETF
    (CLSYS-SVAL ALL-PURPOSE-ITERATOR ITERATOR-NESTED-ITERATOR ITERATOR)
    (ALL-CLASSES NULL FALSE))
   (CL:SETF
    (CLSYS-SVAL ALL-PURPOSE-ITERATOR ITERATOR-FILTER-CODE ITERATOR)
    (CL:FUNCTION FILTER-STRING-TO-CLASS?))
   (CL:SETF
    (CLSYS-SVAL ALL-PURPOSE-ITERATOR ITERATOR-NEXT-CODE ITERATOR)
    (CL:FUNCTION FILTERED-NESTED-ITERATOR-NEXT?))
   (CL:SETF
    (CLSYS-SVAL ALL-PURPOSE-ITERATOR ITERATOR-OBJECT ITERATOR)
    (WRAP-LITERAL STRING))
   (CL:SETF
    (CLSYS-SVAL ALL-PURPOSE-ITERATOR ITERATOR-INTEGER ITERATOR)
    (CL:IF (CL:EQ EXACT? 1) 1 0))
   (CL:RETURN-FROM STRING-TO-CLASSES ITERATOR))
  :VOID)

;;; (DEFUN (STRING-TO-CLASS OBJECT) ...)

(CL:DEFUN STRING-TO-CLASS (STRING)
  (CL:RETURN-FROM STRING-TO-CLASS (GET-CLASS STRING FALSE))
  :VOID)

;;; (DEFUN (STRING-TO-CONTEXT OBJECT) ...)

(CL:DEFUN STRING-TO-CONTEXT (STRING)
  (CL:RETURN-FROM STRING-TO-CONTEXT (SLOWLY-GET-CONTEXT STRING))
  :VOID)

;;; (DEFUN (STRING-TO-FUNCTION OBJECT) ...)

(CL:DEFUN STRING-TO-FUNCTION (STRING)
  (CL:RETURN-FROM STRING-TO-FUNCTION (LOOKUP-FUNCTION STRING))
  :VOID)

;;; (DEFUN (DOTTED-STRING? BOOLEAN) ...)

(CL:DEFUN DOTTED-STRING? (STRING)
  (CL:RETURN-FROM DOTTED-STRING? (DEFINED? (POSITION STRING #\. 0)))
  :VOID)

;;; (DEFUN (YIELD-EXPLODED-METHOD-NAME STRING STRING) ...)

(CL:DEFUN YIELD-EXPLODED-METHOD-NAME (DOTTEDSTRING)
  (CL:LET*
   ((DOTPOSITION (POSITION DOTTEDSTRING #\. 0))
    (FIRSTSTRING NULL)
    (SECONDSTRING NULL))
   (CL:WHEN
    (CL:EQ (DEFINED? DOTPOSITION) 1)
    (CL:SETQ FIRSTSTRING (SUBSEQUENCE DOTTEDSTRING 0 DOTPOSITION))
    (CL:SETQ
     SECONDSTRING
     (SUBSEQUENCE DOTTEDSTRING (CL:1+ DOTPOSITION) NULL-INTEGER)))
   (CL:RETURN-FROM
    YIELD-EXPLODED-METHOD-NAME
    (CL:VALUES FIRSTSTRING SECONDSTRING)))
  :VOID)

;;; (DEFUN (STRING-TO-SLOT OBJECT) ...)

(CL:DEFUN STRING-TO-SLOT (STRING)
  (CL:IF
   (CL:EQ (DOTTED-STRING? STRING) 1)
   (CL:LET*
    ((CLASSSTRING NULL) (SLOTSTRING NULL))
    (CL:MULTIPLE-VALUE-SETQ
     (CLASSSTRING SLOTSTRING)
     (YIELD-EXPLODED-METHOD-NAME STRING))
    (CL:LET*
     ((CLASS (GET-CLASS CLASSSTRING FALSE)) (SLOTNAME NULL))
     (CL:WHEN
      (CL:NOT (CL:EQ CLASS NULL))
      (CL:SETQ SLOTNAME (LOOKUP-SYMBOL SLOTSTRING))
      (CL:WHEN
       (CL:NOT (CL:EQ SLOTNAME NULL))
       (CL:RETURN-FROM STRING-TO-SLOT (SAFE-LOOKUP-SLOT CLASS SLOTNAME))))))
   (CL:LET*
    ((SYMBOL (LOOKUP-SYMBOL STRING)))
    (CL:WHEN
     (CL:NOT (CL:EQ SYMBOL NULL))
     (CL:RETURN-FROM
      STRING-TO-SLOT
      (LOOKUP-FUNCTION-OR-STELLA-FUNCTION SYMBOL)))))
  (CL:RETURN-FROM STRING-TO-SLOT NULL)
  :VOID)

;;; (DEFUN (STRING-TO-DEMON OBJECT) ...)

(CL:DEFUN STRING-TO-DEMON (STRING)
  (CL:RETURN-FROM STRING-TO-DEMON (LOOKUP-DEMON STRING))
  :VOID)

;;; (DEFUN (INTEGER-TO-CONTEXT OBJECT) ...)

(CL:DEFUN INTEGER-TO-CONTEXT (INTEGER)
  (CL:RETURN-FROM INTEGER-TO-CONTEXT (SLOWLY-GET-CONTEXT INTEGER))
  :VOID)

;;; (DEFGLOBAL *DEFAULT-DESCRIBE-MODE* ...)

(CL:DEFVAR *DEFAULT-DESCRIBE-MODE* NULL
  "Specifies the print mode for 'describe' when no second
argument is given.")

;;; (DEFMACRO DESCRIBE ...)

(CL:DEFUN DESCRIBE-EXPANDER (NAME BODY)
  "Print a description of an object in :verbose, :terse,
or :source modes."
  (CL:LET*
   ((MODE (FIRST BODY)) (VALIDMODE NULL))
   (CL:WHEN
    (CL:EQ (SYMBOL? NAME) 1)
    (CL:SETQ NAME (LIST* SYM-DESCRIBE-BQUOTE NAME NIL)))
   (CL:WHEN (CL:EQ MODE NULL) (CL:SETQ MODE *DEFAULT-DESCRIBE-MODE*))
   (CL:LET*
    ((MODE-001 MODE))
    (CL:COND
     ((CL:EQ (KEYWORD? MODE) 1)
      (CL:LET*
       ((MODE NULL))
       (CL:SETQ MODE MODE-001)
       (CL:COND
        ((CL:OR
          (CL:EQ MODE KWD-DESCRIBE-VERBOSE)
          (CL:EQ MODE KWD-DESCRIBE-TERSE)
          (CL:EQ MODE KWD-DESCRIBE-SOURCE))
         (CL:SETQ VALIDMODE MODE))
        (CL:T NULL))))
     ((CL:EQ (SYMBOL? MODE) 1)
      (CL:LET*
       ((MODE NULL))
       (CL:SETQ MODE MODE-001)
       (CL:COND
        ((CL:EQ MODE SYM-DESCRIBE-VERBOSE)
         (CL:SETQ VALIDMODE KWD-DESCRIBE-VERBOSE))
        ((CL:EQ MODE SYM-DESCRIBE-TERSE)
         (CL:SETQ VALIDMODE KWD-DESCRIBE-TERSE))
        ((CL:EQ MODE SYM-DESCRIBE-SOURCE)
         (CL:SETQ VALIDMODE KWD-DESCRIBE-SOURCE))
        (CL:T NULL))))
     (CL:T NULL)))
   (CL:WHEN
    (CL:EQ VALIDMODE NULL)
    (CL:LET
     ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
     (CL:WRITE-STRING
      "Valid modes (the second argument to 'describe') are "
      %%STREAM)
     (CL:TERPRI %%STREAM)
     (CL:FORCE-OUTPUT %%STREAM)
     (CL:WRITE-STRING "   :VERBOSE, :TERSE, and :SOURCE" %%STREAM)
     (CL:TERPRI %%STREAM)
     (CL:FORCE-OUTPUT %%STREAM))
    (CL:SETQ VALIDMODE *DEFAULT-DESCRIBE-MODE*))
   (CL:RETURN-FROM
    DESCRIBE-EXPANDER
    (LIST*
     SYM-DESCRIBE-LET
     (LIST*
      (LIST* SYM-DESCRIBE-NAMEEXPRESSION NAME NIL)
      (LIST*
       SYM-DESCRIBE-OBJECT
       (LIST*
        SYM-DESCRIBE-ONLY-IF
        (LIST* SYM-DESCRIBE-DEFINED? SYM-DESCRIBE-NAMEEXPRESSION NIL)
        (LIST*
         SYM-DESCRIBE-GET-OBJECT
         SYM-DESCRIBE-NAMEEXPRESSION
         SYM-DESCRIBE-NULL
         NIL)
        NIL)
       NIL)
      NIL)
     (LIST*
      SYM-DESCRIBE-IF
      (LIST* SYM-DESCRIBE-NULL? SYM-DESCRIBE-OBJECT NIL)
      (LIST* SYM-DESCRIBE-PRINT SYM-DESCRIBE-NULL NIL)
      (LIST*
       SYM-DESCRIBE-DESCRIBE-OBJECT
       SYM-DESCRIBE-OBJECT
       SYM-DESCRIBE-STANDARD-OUTPUT
       MODE
       NIL)
      NIL)
     NIL)))
  :VOID)

;;; (VERBATIM :COMMON-LISP ...)

(CL:DEFMACRO DESCRIBE (NAME CL:&BODY BODY)
  (SAFELY-EXPAND-MACRO (CL:LIST* (CL:QUOTE DESCRIBE) NAME BODY)))

;;; (DEFUN DESCRIBE-TERSELY ...)

(CL:DEFUN DESCRIBE-TERSELY (SELF STREAM)
  (CL:LET*
   ((NATIVESTREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM))
    (RESULT KWD-DESCRIBE-VOID))
   (CL:PROGN
    (PRINT-OBJECT SELF NATIVESTREAM)
    (CL:RETURN-FROM DESCRIBE-TERSELY RESULT))
   (CL:WRITE-STRING
    ":TERSE MODE NOT YET IMPLEMENTED"
    (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
  :VOID)

;;; (DEFUN PRETTY-PRINT-STELLA-TREE ...)

(CL:DEFUN PRETTY-PRINT-STELLA-TREE (TREE STREAM)
  (CL:SETQ TREE (CONSIFY-LISTS-AND-ITERATORS TREE))
  (CL:LET*
   ((*PRINTPRETTYCODE?* TRUE))
   (CL:DECLARE (CL:SPECIAL *PRINTPRETTYCODE?*))
   (PRINT-STELLA-CODE TREE (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
  (FREE-CONS-TREE TREE)
  :VOID)

;;; (DEFUN PRETTY-PRINT-DEFINITION-TREE ...)

(CL:DEFUN PRETTY-PRINT-DEFINITION-TREE (TREE STREAM)
  (CL:SETQ TREE (CONSIFY-LISTS-AND-ITERATORS TREE))
  (CL:LET*
   ((*PRINTPRETTYCODE?* TRUE))
   (CL:DECLARE (CL:SPECIAL *PRINTPRETTYCODE?*))
   (PRINT-STELLA-DEFINITION
    TREE
    (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
  (FREE-CONS-TREE TREE)
  :VOID)

;;; (DEFGLOBAL *PRETTY-PRINT-LIST-CUTOFF* ...)

(CL:DEFVAR *PRETTY-PRINT-LIST-CUTOFF* 5
  "Lists longer than the cutoff are truncated during
pretty printing.")

;;; (DEFUN (CONSIFY-LISTS-AND-ITERATORS OBJECT) ...)

(CL:DEFUN CONSIFY-LISTS-AND-ITERATORS (TREE)
  (CL:WHEN (CL:EQ TREE NULL) (CL:RETURN-FROM CONSIFY-LISTS-AND-ITERATORS TREE))
  (CL:LET*
   ((TREE-001 TREE))
   (CL:COND
    ((CL:EQ (CONS? TREE) 1)
     (CL:LET*
      ((TREE NULL))
      (CL:SETQ TREE TREE-001)
      (CL:LET*
       ((CONS (ALLOCATE-ITERATOR TREE)))
       (CL:LOOP
        WHILE
        (CL:EQ (NEXT? CONS) 1)
        DO
        (VALUE-SETTER
         CONS
         (CONSIFY-LISTS-AND-ITERATORS
          (CLSYS-SVAL CONS-ITERATOR VALUE CONS)))))
      (CL:RETURN-FROM CONSIFY-LISTS-AND-ITERATORS TREE)))
    ((CL:EQ (TAXONOMY-ISA? TREE SGT-DESCRIBE-LIST) 1)
     (CL:LET*
      ((TREE NULL))
      (CL:SETQ TREE TREE-001)
      (CL:LET*
       ((CONSLIST NIL))
       (CL:LET*
        ((I NULL)
         (ITEM NULL)
         (ITER-001 (CLSYS-SVAL LIST THE-CONS-LIST TREE))
         (ITER-002 0)
         (UPPER-BOUND-001 *PRETTY-PRINT-LIST-CUTOFF*)
         (UNBOUNDED?-001 (NULL? UPPER-BOUND-001))
         (COLLECT-001 NULL))
        (CL:LOOP
         WHILE
         (CL:AND
          (CL:NOT (CL:EQ ITER-001 NIL))
          (CL:OR (CL:EQ UNBOUNDED?-001 1) (CL:<= ITER-002 UPPER-BOUND-001)))
         DO
         (CL:PROGN
          (CL:SETQ ITEM (CLSYS-SVAL CONS VALUE ITER-001))
          (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
         (CL:PROGN (CL:SETQ I ITER-002) (CL:SETQ ITER-002 (CL:1+ ITER-002)))
         (CL:IF
          (CL:EQ COLLECT-001 NULL)
          (CL:PROGN
           (CL:SETQ
            COLLECT-001
            (CONS
             (CL:IF (CL:= I *PRETTY-PRINT-LIST-CUTOFF*) ELIPSIS ITEM)
             NIL))
           (CL:IF
            (CL:EQ CONSLIST NIL)
            (CL:SETQ CONSLIST COLLECT-001)
            (ADD-CONS-TO-END-OF-CONS-LIST CONSLIST COLLECT-001)))
          (CL:PROGN
           (CL:SETF
            (CLSYS-SVAL CONS REST COLLECT-001)
            (CONS
             (CL:IF (CL:= I *PRETTY-PRINT-LIST-CUTOFF*) ELIPSIS ITEM)
             NIL))
           (CL:SETQ COLLECT-001 (CLSYS-SVAL CONS REST COLLECT-001))))))
       (CL:RETURN-FROM CONSIFY-LISTS-AND-ITERATORS CONSLIST))))
    ((CL:EQ (TAXONOMY-ISA? TREE SGT-DESCRIBE-ITERATOR) 1)
     (CL:LET*
      ((TREE NULL))
      (CL:SETQ TREE TREE-001)
      (CL:LET*
       ((CONSLIST NIL))
       (CL:LET*
        ((I NULL)
         (ITEM NULL)
         (ITER-003 TREE)
         (ITER-004 0)
         (UPPER-BOUND-002 *PRETTY-PRINT-LIST-CUTOFF*)
         (UNBOUNDED?-002 (NULL? UPPER-BOUND-002))
         (COLLECT-002 NULL))
        (CL:LOOP
         WHILE
         (CL:AND
          (CL:EQ (NEXT? ITER-003) 1)
          (CL:OR (CL:EQ UNBOUNDED?-002 1) (CL:<= ITER-004 UPPER-BOUND-002)))
         DO
         (CL:PROGN (CL:SETQ ITEM (CLSYS-SVAL ITERATOR VALUE ITER-003)))
         (CL:PROGN (CL:SETQ I ITER-004) (CL:SETQ ITER-004 (CL:1+ ITER-004)))
         (CL:IF
          (CL:EQ COLLECT-002 NULL)
          (CL:PROGN
           (CL:SETQ
            COLLECT-002
            (CONS
             (CL:IF (CL:= I *PRETTY-PRINT-LIST-CUTOFF*) ELIPSIS ITEM)
             NIL))
           (CL:IF
            (CL:EQ CONSLIST NIL)
            (CL:SETQ CONSLIST COLLECT-002)
            (ADD-CONS-TO-END-OF-CONS-LIST CONSLIST COLLECT-002)))
          (CL:PROGN
           (CL:SETF
            (CLSYS-SVAL CONS REST COLLECT-002)
            (CONS
             (CL:IF (CL:= I *PRETTY-PRINT-LIST-CUTOFF*) ELIPSIS ITEM)
             NIL))
           (CL:SETQ COLLECT-002 (CLSYS-SVAL CONS REST COLLECT-002))))))
       (CL:RETURN-FROM CONSIFY-LISTS-AND-ITERATORS CONSLIST))))
    (CL:T (CL:RETURN-FROM CONSIFY-LISTS-AND-ITERATORS TREE))))
  :VOID)

;;; (DEFMETHOD PRINT-DEFINITION ...)

(CL:DEFMETHOD PRINT-DEFINITION ((SELF MODULE) STREAM)
  (CL:LET*
   ((OPTIONS (UNSTRINGIFY (CLSYS-SVAL MODULE STRINGIFIED-OPTIONS SELF))))
   (CL:LET*
    ((*PRINTREADABLY?* TRUE))
    (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
    (CL:LET
     ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
     (CL:WRITE-STRING "(defmodule \"" %%STREAM)
     (CL:WRITE-STRING (CLSYS-SVAL MODULE MODULE-FULL-NAME SELF) %%STREAM)
     (CL:WRITE-STRING "\"" %%STREAM))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ OPTIONS NIL))
     DO
     (CL:LET
      ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
      (CL:TERPRI %%STREAM)
      (CL:FORCE-OUTPUT %%STREAM)
      (CL:WRITE-STRING "  " %%STREAM)
      (PRINT-OBJECT (FIRST OPTIONS) %%STREAM)
      (CL:WRITE-STRING " " %%STREAM)
      (PRINT-OBJECT (SECOND OPTIONS) %%STREAM))
     (CL:SETQ OPTIONS (NTH-REST OPTIONS 2)))
    (CL:LET
     ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
     (CL:WRITE-STRING ")" %%STREAM)
     (CL:TERPRI %%STREAM)
     (CL:FORCE-OUTPUT %%STREAM))))
  :VOID)

;;; (DEFUN PRINT-CLASS-LIST ...)

(CL:DEFUN PRINT-CLASS-LIST (SELF STREAM)
  (CL:WRITE-STRING "(" (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM))
  (CL:WHEN
   (CL:EQ (NEXT? SELF) 1)
   (CL:WRITE-STRING
    (CLSYS-SVAL
     SURROGATE
     SYMBOL-NAME
     (CLSYS-SVAL CLASS CLASS-TYPE (CLSYS-SVAL ITERATOR VALUE SELF)))
    (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
  (CL:LOOP
   WHILE
   (CL:EQ (NEXT? SELF) 1)
   DO
   (CL:LET
    ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
    (CL:WRITE-STRING " " %%STREAM)
    (CL:WRITE-STRING
     (CLSYS-SVAL
      SURROGATE
      SYMBOL-NAME
      (CLSYS-SVAL CLASS CLASS-TYPE (CLSYS-SVAL ITERATOR VALUE SELF)))
     %%STREAM)))
  (CL:WRITE-STRING ")" (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM))
  :VOID)

;;; (DEFMETHOD PRETTY-PRINT-OBJECT ...)

(CL:DEFMETHOD PRETTY-PRINT-OBJECT ((SELF SLOT) STREAM)
  (CL:SETQ STREAM STREAM)
  NULL
  :VOID)

;;; (DEFSPECIAL *SLOTOPTIONSLOTS* ...)

(CL:DEFVAR *SLOTOPTIONSLOTS* NULL
  "List of slots containing storage-slot options")

(CL:DEFUN READ-*SLOTOPTIONSLOTS* ()
  (CL:RETURN-FROM READ-*SLOTOPTIONSLOTS* *SLOTOPTIONSLOTS*)
  :VOID)

(CL:DEFUN WRITE-*SLOTOPTIONSLOTS* (VALUE)
  (CL:SETQ *SLOTOPTIONSLOTS* VALUE)
  (CL:RETURN-FROM WRITE-*SLOTOPTIONSLOTS* VALUE)
  :VOID)

;;; (DEFSPECIAL *CLASSOPTIONSLOTS* ...)

(CL:DEFVAR *CLASSOPTIONSLOTS* NULL
  "List of slots containing class options")

(CL:DEFUN READ-*CLASSOPTIONSLOTS* ()
  (CL:RETURN-FROM READ-*CLASSOPTIONSLOTS* *CLASSOPTIONSLOTS*)
  :VOID)

(CL:DEFUN WRITE-*CLASSOPTIONSLOTS* (VALUE)
  (CL:SETQ *CLASSOPTIONSLOTS* VALUE)
  (CL:RETURN-FROM WRITE-*CLASSOPTIONSLOTS* VALUE)
  :VOID)

;;; (DEFSPECIAL *CLASSUNSTRINGIFIEDOPTIONS* ...)

(CL:DEFVAR *CLASSUNSTRINGIFIEDOPTIONS* NULL
  "Plist of unstringifed class options")

(CL:DEFUN READ-*CLASSUNSTRINGIFIEDOPTIONS* ()
  (CL:RETURN-FROM READ-*CLASSUNSTRINGIFIEDOPTIONS* *CLASSUNSTRINGIFIEDOPTIONS*)
  :VOID)

(CL:DEFUN WRITE-*CLASSUNSTRINGIFIEDOPTIONS* (VALUE)
  (CL:SETQ *CLASSUNSTRINGIFIEDOPTIONS* VALUE)
  (CL:RETURN-FROM WRITE-*CLASSUNSTRINGIFIEDOPTIONS* VALUE)
  :VOID)

;;; (DEFUN (GET-CLASS-OPTIONS (CONS OF STORAGE-SLOT)) ...)

(CL:DEFUN GET-CLASS-OPTIONS ()
  (CL:LET*
   ((RESULT NIL))
   (CL:LET*
    ((SLOT NULL)
     (ITER-001
      (PRIVATE-CLASS-STORAGE-SLOTS
       (CLSYS-SVAL SURROGATE SURROGATE-VALUE SGT-DESCRIBE-CLASS)))
     (COLLECT-001 NULL))
    (CL:LOOP
     WHILE
     (CL:EQ (NEXT? ITER-001) 1)
     DO
     (CL:PROGN (CL:SETQ SLOT (CLSYS-SVAL ITERATOR VALUE ITER-001)))
     (CL:WHEN
      (CL:NOT
       (CL:EQ
        (DYNAMIC-SLOT-VALUE SLOT SYM-DESCRIBE-SLOT-OPTION-KEYWORD NULL)
        NULL))
      (CL:IF
       (CL:EQ COLLECT-001 NULL)
       (CL:PROGN
        (CL:SETQ COLLECT-001 (CONS SLOT NIL))
        (CL:IF
         (CL:EQ RESULT NIL)
         (CL:SETQ RESULT COLLECT-001)
         (ADD-CONS-TO-END-OF-CONS-LIST RESULT COLLECT-001)))
       (CL:PROGN
        (CL:SETF (CLSYS-SVAL CONS REST COLLECT-001) (CONS SLOT NIL))
        (CL:SETQ COLLECT-001 (CLSYS-SVAL CONS REST COLLECT-001)))))))
   (CL:LET*
    ((SLOT NULL)
     (ITER-002
      (PUBLIC-CLASS-STORAGE-SLOTS
       (CLSYS-SVAL SURROGATE SURROGATE-VALUE SGT-DESCRIBE-CLASS)))
     (COLLECT-002 NULL))
    (CL:LOOP
     WHILE
     (CL:EQ (NEXT? ITER-002) 1)
     DO
     (CL:PROGN (CL:SETQ SLOT (CLSYS-SVAL ITERATOR VALUE ITER-002)))
     (CL:WHEN
      (CL:NOT
       (CL:EQ
        (DYNAMIC-SLOT-VALUE SLOT SYM-DESCRIBE-SLOT-OPTION-KEYWORD NULL)
        NULL))
      (CL:IF
       (CL:EQ COLLECT-002 NULL)
       (CL:PROGN
        (CL:SETQ COLLECT-002 (CONS SLOT NIL))
        (CL:IF
         (CL:EQ RESULT NIL)
         (CL:SETQ RESULT COLLECT-002)
         (ADD-CONS-TO-END-OF-CONS-LIST RESULT COLLECT-002)))
       (CL:PROGN
        (CL:SETF (CLSYS-SVAL CONS REST COLLECT-002) (CONS SLOT NIL))
        (CL:SETQ COLLECT-002 (CLSYS-SVAL CONS REST COLLECT-002)))))))
   (CL:LET*
    ((SLOT NULL)
     (ITER-003
      (PRIVATE-CLASS-STORAGE-SLOTS
       (CLSYS-SVAL SURROGATE SURROGATE-VALUE SGT-DESCRIBE-RELATION)))
     (COLLECT-003 NULL))
    (CL:LOOP
     WHILE
     (CL:EQ (NEXT? ITER-003) 1)
     DO
     (CL:PROGN (CL:SETQ SLOT (CLSYS-SVAL ITERATOR VALUE ITER-003)))
     (CL:WHEN
      (CL:NOT
       (CL:EQ
        (DYNAMIC-SLOT-VALUE SLOT SYM-DESCRIBE-SLOT-OPTION-KEYWORD NULL)
        NULL))
      (CL:IF
       (CL:EQ COLLECT-003 NULL)
       (CL:PROGN
        (CL:SETQ COLLECT-003 (CONS SLOT NIL))
        (CL:IF
         (CL:EQ RESULT NIL)
         (CL:SETQ RESULT COLLECT-003)
         (ADD-CONS-TO-END-OF-CONS-LIST RESULT COLLECT-003)))
       (CL:PROGN
        (CL:SETF (CLSYS-SVAL CONS REST COLLECT-003) (CONS SLOT NIL))
        (CL:SETQ COLLECT-003 (CLSYS-SVAL CONS REST COLLECT-003)))))))
   (CL:LET*
    ((SLOT NULL)
     (ITER-004
      (PUBLIC-CLASS-STORAGE-SLOTS
       (CLSYS-SVAL SURROGATE SURROGATE-VALUE SGT-DESCRIBE-RELATION)))
     (COLLECT-004 NULL))
    (CL:LOOP
     WHILE
     (CL:EQ (NEXT? ITER-004) 1)
     DO
     (CL:PROGN (CL:SETQ SLOT (CLSYS-SVAL ITERATOR VALUE ITER-004)))
     (CL:WHEN
      (CL:NOT
       (CL:EQ
        (DYNAMIC-SLOT-VALUE SLOT SYM-DESCRIBE-SLOT-OPTION-KEYWORD NULL)
        NULL))
      (CL:IF
       (CL:EQ COLLECT-004 NULL)
       (CL:PROGN
        (CL:SETQ COLLECT-004 (CONS SLOT NIL))
        (CL:IF
         (CL:EQ RESULT NIL)
         (CL:SETQ RESULT COLLECT-004)
         (ADD-CONS-TO-END-OF-CONS-LIST RESULT COLLECT-004)))
       (CL:PROGN
        (CL:SETF (CLSYS-SVAL CONS REST COLLECT-004) (CONS SLOT NIL))
        (CL:SETQ COLLECT-004 (CLSYS-SVAL CONS REST COLLECT-004)))))))
   (CL:RETURN-FROM GET-CLASS-OPTIONS RESULT))
  :VOID)

;;; (DEFUN (GET-UNSTRINGIFIED-CLASS-OPTIONS PROPERTY-LIST) ...)

(CL:DEFUN GET-UNSTRINGIFIED-CLASS-OPTIONS (CLASS)
  (CL:LET*
   ((THEOPTIONS (NEW-PROPERTY-LIST)))
   (CL:SETF
    (CLSYS-SVAL PROPERTY-LIST THE-PLIST THEOPTIONS)
    (CLSYS-SVAL
     CONS
     REST
     (CLSYS-SVAL
      CONS
      REST
      (CLSYS-SVAL
       CONS
       REST
       (UNSTRINGIFY (CLSYS-SVAL CLASS CLASS-STRINGIFIED-SOURCE CLASS))))))
   (CL:RETURN-FROM GET-UNSTRINGIFIED-CLASS-OPTIONS THEOPTIONS))
  :VOID)

;;; (DEFUN (GET-SLOT-OPTIONS (CONS OF STORAGE-SLOT)) ...)

(CL:DEFUN GET-SLOT-OPTIONS ()
  (CL:LET*
   ((RESULT NIL))
   (CL:LET*
    ((SLOT NULL)
     (ITER-001
      (PRIVATE-CLASS-STORAGE-SLOTS
       (CLSYS-SVAL SURROGATE SURROGATE-VALUE SGT-DESCRIBE-STORAGE-SLOT)))
     (COLLECT-001 NULL))
    (CL:LOOP
     WHILE
     (CL:EQ (NEXT? ITER-001) 1)
     DO
     (CL:PROGN (CL:SETQ SLOT (CLSYS-SVAL ITERATOR VALUE ITER-001)))
     (CL:WHEN
      (CL:NOT
       (CL:EQ
        (DYNAMIC-SLOT-VALUE SLOT SYM-DESCRIBE-SLOT-OPTION-KEYWORD NULL)
        NULL))
      (CL:IF
       (CL:EQ COLLECT-001 NULL)
       (CL:PROGN
        (CL:SETQ COLLECT-001 (CONS SLOT NIL))
        (CL:IF
         (CL:EQ RESULT NIL)
         (CL:SETQ RESULT COLLECT-001)
         (ADD-CONS-TO-END-OF-CONS-LIST RESULT COLLECT-001)))
       (CL:PROGN
        (CL:SETF (CLSYS-SVAL CONS REST COLLECT-001) (CONS SLOT NIL))
        (CL:SETQ COLLECT-001 (CLSYS-SVAL CONS REST COLLECT-001)))))))
   (CL:RETURN-FROM GET-SLOT-OPTIONS RESULT))
  :VOID)

;;; (DEFUN PRETTY-PRINT-LITERAL ...)

(CL:DEFUN PRETTY-PRINT-LITERAL (LITERAL STREAM)
  (CL:LET*
   ((LITERAL-001 LITERAL))
   (CL:COND
    ((CL:EQ (BOOLEAN? LITERAL) 1)
     (CL:LET*
      ((LITERAL NULL))
      (CL:SETQ LITERAL LITERAL-001)
      (CL:IF
       (CL:EQ (EQL? LITERAL TRUE-WRAPPER) 1)
       (CL:WRITE-STRING
        "TRUE"
        (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM))
       (CL:WRITE-STRING
        "FALSE"
        (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))))
    (CL:T
     (CL:LET*
      ((*PRINTREADABLY?* TRUE))
      (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
      (PRINT-OBJECT LITERAL (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM))))))
  :VOID)

;;; (DEFUN (LITERAL-EQL? BOOLEAN) ...)

(CL:DEFUN LITERAL-EQL? (X Y)
  (CL:WHEN
   (CL:OR
    (CL:AND
     (CL:NOT (CL:EQ X NULL))
     (CL:EQ (ISA? X SGT-DESCRIBE-BOOLEAN-WRAPPER) 1))
    (CL:AND
     (CL:NOT (CL:EQ Y NULL))
     (CL:EQ (ISA? Y SGT-DESCRIBE-BOOLEAN-WRAPPER) 1)))
   (CL:RETURN-FROM
    LITERAL-EQL?
    (CL:IF
     (CL:OR
      (CL:AND
       (CL:EQ X NULL)
       (CL:EQ (CLSYS-SVAL BOOLEAN-WRAPPER WRAPPER-VALUE Y) 0))
      (CL:AND
       (CL:EQ Y NULL)
       (CL:EQ (CLSYS-SVAL BOOLEAN-WRAPPER WRAPPER-VALUE X) 0))
      (CL:EQ (EQL? X Y) 1))
     TRUE
     FALSE)))
  (CL:RETURN-FROM LITERAL-EQL? (EQL? X Y))
  :VOID)

;;; (DEFUN (CONVERT-TO-LITERAL OBJECT) ...)

(CL:DEFUN CONVERT-TO-LITERAL (OBJECT)
  (CL:WHEN (CL:EQ OBJECT NULL) (CL:RETURN-FROM CONVERT-TO-LITERAL OBJECT))
  (CL:LET*
   ((OBJECT-001 OBJECT))
   (CL:COND
    ((CL:EQ (TAXONOMY-ISA? OBJECT SGT-DESCRIBE-LITERAL-WRAPPER) 1)
     (CL:LET*
      ((OBJECT NULL))
      (CL:SETQ OBJECT OBJECT-001)
      (CL:RETURN-FROM CONVERT-TO-LITERAL OBJECT)))
    ((CL:EQ (SYMBOL? OBJECT) 1)
     (CL:LET*
      ((OBJECT NULL))
      (CL:SETQ OBJECT OBJECT-001)
      (CL:WHEN
       (CL:EQ OBJECT SYM-DESCRIBE-TRUE)
       (CL:RETURN-FROM CONVERT-TO-LITERAL TRUE-WRAPPER))
      (CL:WHEN
       (CL:EQ OBJECT SYM-DESCRIBE-FALSE)
       (CL:RETURN-FROM CONVERT-TO-LITERAL FALSE-WRAPPER))
      (CL:WHEN
       (CL:EQ OBJECT SYM-DESCRIBE-NULL-BOOLEAN)
       (CL:RETURN-FROM CONVERT-TO-LITERAL NULL-BOOLEAN-WRAPPER))
      (CL:RETURN-FROM CONVERT-TO-LITERAL OBJECT)))
    ((CL:EQ (KEYWORD? OBJECT) 1)
     (CL:LET*
      ((OBJECT NULL))
      (CL:SETQ OBJECT OBJECT-001)
      (CL:RETURN-FROM CONVERT-TO-LITERAL OBJECT)))
    ((CL:EQ (SURROGATE? OBJECT) 1)
     (CL:LET*
      ((OBJECT NULL))
      (CL:SETQ OBJECT OBJECT-001)
      (CL:RETURN-FROM CONVERT-TO-LITERAL OBJECT)))
    (CL:T
     (CL:WARN "`convert-to-literal': Can't handle non-boolean literals")
     (CL:RETURN-FROM CONVERT-TO-LITERAL NULL))))
  :VOID)

;;; (DEFUN PRETTY-PRINT-CLASS-OPTIONS ...)

(CL:DEFUN PRETTY-PRINT-CLASS-OPTIONS (CLASS STREAM)
  (CL:LET*
   ((OPTIONVALUE NULL))
   (CL:LET*
    ((OPTIONSLOT NULL) (ITER-001 *CLASSOPTIONSLOTS*))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ OPTIONSLOT (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:TAGBODY
      (CL:SETQ OPTIONVALUE (READ-SLOT-VALUE CLASS OPTIONSLOT))
      (CL:WHEN (CL:EQ OPTIONVALUE NULL) (CL:GO :CONTINUE))
      (CL:LET*
       ((OPTIONVALUE-001 OPTIONVALUE))
       (CL:COND
        ((CL:EQ (TAXONOMY-ISA? OPTIONVALUE SGT-DESCRIBE-LITERAL-WRAPPER) 1)
         (CL:LET*
          ((OPTIONVALUE NULL))
          (CL:SETQ OPTIONVALUE OPTIONVALUE-001)
          (CL:WHEN
           (CL:NOT
            (CL:OR
             (CL:EQ
              (LITERAL-EQL?
               (CONVERT-TO-LITERAL
                (DYNAMIC-SLOT-VALUE
                 OPTIONSLOT
                 SYM-DESCRIBE-SLOT-INITIAL-VALUE
                 NULL))
               OPTIONVALUE)
              1)
             (CL:EQ
              (LITERAL-EQL?
               (CONVERT-TO-LITERAL (DEFAULT-FORM OPTIONSLOT))
               OPTIONVALUE)
              1)))
           (CL:LET
            ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
            (CL:TERPRI %%STREAM)
            (CL:FORCE-OUTPUT %%STREAM)
            (CL:WRITE-STRING "  :" %%STREAM)
            (CL:WRITE-STRING
             (STRING-DOWNCASE
              (CLSYS-SVAL
               KEYWORD
               SYMBOL-NAME
               (DYNAMIC-SLOT-VALUE
                OPTIONSLOT
                SYM-DESCRIBE-SLOT-OPTION-KEYWORD
                NULL)))
             %%STREAM)
            (CL:WRITE-STRING " " %%STREAM))
           (PRETTY-PRINT-LITERAL OPTIONVALUE STREAM))))
        ((CL:EQ (SYMBOL? OPTIONVALUE) 1)
         (CL:LET*
          ((OPTIONVALUE NULL))
          (CL:SETQ OPTIONVALUE OPTIONVALUE-001)
          (CL:WHEN
           (CL:NOT
            (CL:OR
             (CL:EQ
              (LITERAL-EQL?
               (CONVERT-TO-LITERAL
                (DYNAMIC-SLOT-VALUE
                 OPTIONSLOT
                 SYM-DESCRIBE-SLOT-INITIAL-VALUE
                 NULL))
               OPTIONVALUE)
              1)
             (CL:EQ
              (LITERAL-EQL?
               (CONVERT-TO-LITERAL (DEFAULT-FORM OPTIONSLOT))
               OPTIONVALUE)
              1)))
           (CL:LET
            ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
            (CL:TERPRI %%STREAM)
            (CL:FORCE-OUTPUT %%STREAM)
            (CL:WRITE-STRING "  :" %%STREAM)
            (CL:WRITE-STRING
             (STRING-DOWNCASE
              (CLSYS-SVAL
               KEYWORD
               SYMBOL-NAME
               (DYNAMIC-SLOT-VALUE
                OPTIONSLOT
                SYM-DESCRIBE-SLOT-OPTION-KEYWORD
                NULL)))
             %%STREAM)
            (CL:WRITE-STRING " " %%STREAM))
           (PRETTY-PRINT-LITERAL OPTIONVALUE STREAM))))
        ((CL:EQ (KEYWORD? OPTIONVALUE) 1)
         (CL:LET*
          ((OPTIONVALUE NULL))
          (CL:SETQ OPTIONVALUE OPTIONVALUE-001)
          (CL:WHEN
           (CL:NOT
            (CL:OR
             (CL:EQ
              (LITERAL-EQL?
               (CONVERT-TO-LITERAL
                (DYNAMIC-SLOT-VALUE
                 OPTIONSLOT
                 SYM-DESCRIBE-SLOT-INITIAL-VALUE
                 NULL))
               OPTIONVALUE)
              1)
             (CL:EQ
              (LITERAL-EQL?
               (CONVERT-TO-LITERAL (DEFAULT-FORM OPTIONSLOT))
               OPTIONVALUE)
              1)))
           (CL:LET
            ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
            (CL:TERPRI %%STREAM)
            (CL:FORCE-OUTPUT %%STREAM)
            (CL:WRITE-STRING "  :" %%STREAM)
            (CL:WRITE-STRING
             (STRING-DOWNCASE
              (CLSYS-SVAL
               KEYWORD
               SYMBOL-NAME
               (DYNAMIC-SLOT-VALUE
                OPTIONSLOT
                SYM-DESCRIBE-SLOT-OPTION-KEYWORD
                NULL)))
             %%STREAM)
            (CL:WRITE-STRING " " %%STREAM))
           (PRETTY-PRINT-LITERAL OPTIONVALUE STREAM))))
        ((CL:EQ (SURROGATE? OPTIONVALUE) 1)
         (CL:LET*
          ((OPTIONVALUE NULL))
          (CL:SETQ OPTIONVALUE OPTIONVALUE-001)
          (CL:WHEN
           (CL:NOT
            (CL:OR
             (CL:EQ
              (LITERAL-EQL?
               (CONVERT-TO-LITERAL
                (DYNAMIC-SLOT-VALUE
                 OPTIONSLOT
                 SYM-DESCRIBE-SLOT-INITIAL-VALUE
                 NULL))
               OPTIONVALUE)
              1)
             (CL:EQ
              (LITERAL-EQL?
               (CONVERT-TO-LITERAL (DEFAULT-FORM OPTIONSLOT))
               OPTIONVALUE)
              1)))
           (CL:LET
            ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
            (CL:TERPRI %%STREAM)
            (CL:FORCE-OUTPUT %%STREAM)
            (CL:WRITE-STRING "  :" %%STREAM)
            (CL:WRITE-STRING
             (STRING-DOWNCASE
              (CLSYS-SVAL
               KEYWORD
               SYMBOL-NAME
               (DYNAMIC-SLOT-VALUE
                OPTIONSLOT
                SYM-DESCRIBE-SLOT-OPTION-KEYWORD
                NULL)))
             %%STREAM)
            (CL:WRITE-STRING " " %%STREAM))
           (PRETTY-PRINT-LITERAL OPTIONVALUE STREAM))))
        ((CL:EQ (TAXONOMY-ISA? OPTIONVALUE SGT-DESCRIBE-LIST) 1)
         (CL:LET*
          ((OPTIONVALUE NULL))
          (CL:SETQ OPTIONVALUE OPTIONVALUE-001)
          (CL:WHEN
           (CL:NOT
            (CL:OR
             (CL:EQ (EMPTY? OPTIONVALUE) 1)
             (CL:EQ
              (DYNAMIC-SLOT-VALUE
               OPTIONSLOT
               SYM-DESCRIBE-SLOT-INITIAL-VALUE
               NULL)
              OPTIONVALUE)
             (CL:EQ (DEFAULT-FORM OPTIONSLOT) OPTIONVALUE)))
           (CL:LET*
            ((*PRINTREADABLY?* TRUE) (*PRINTPRETTY?* TRUE))
            (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?* *PRINTPRETTY?*))
            (CL:LET
             ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
             (CL:TERPRI %%STREAM)
             (CL:FORCE-OUTPUT %%STREAM)
             (CL:WRITE-STRING "  :" %%STREAM)
             (CL:WRITE-STRING
              (STRING-DOWNCASE
               (CLSYS-SVAL
                KEYWORD
                SYMBOL-NAME
                (DYNAMIC-SLOT-VALUE
                 OPTIONSLOT
                 SYM-DESCRIBE-SLOT-OPTION-KEYWORD
                 NULL)))
              %%STREAM)
             (CL:WRITE-STRING " " %%STREAM))
            (PRINT-OBJECT
             (LOOKUP
              *CLASSUNSTRINGIFIEDOPTIONS*
              (DYNAMIC-SLOT-VALUE
               OPTIONSLOT
               SYM-DESCRIBE-SLOT-OPTION-KEYWORD
               NULL))
             (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM))))))
        ((CL:EQ (CONS? OPTIONVALUE) 1)
         (CL:LET*
          ((OPTIONVALUE NULL))
          (CL:SETQ OPTIONVALUE OPTIONVALUE-001)
          (CL:WHEN
           (CL:NOT
            (CL:OR
             (CL:EQ OPTIONVALUE NIL)
             (CL:EQ
              (DYNAMIC-SLOT-VALUE
               OPTIONSLOT
               SYM-DESCRIBE-SLOT-INITIAL-VALUE
               NULL)
              OPTIONVALUE)
             (CL:EQ (DEFAULT-FORM OPTIONSLOT) OPTIONVALUE)))
           (CL:LET*
            ((*PRINTREADABLY?* TRUE) (*PRINTPRETTY?* TRUE))
            (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?* *PRINTPRETTY?*))
            (CL:LET
             ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
             (CL:TERPRI %%STREAM)
             (CL:FORCE-OUTPUT %%STREAM)
             (CL:WRITE-STRING "  :" %%STREAM)
             (CL:WRITE-STRING
              (STRING-DOWNCASE
               (CLSYS-SVAL
                KEYWORD
                SYMBOL-NAME
                (DYNAMIC-SLOT-VALUE
                 OPTIONSLOT
                 SYM-DESCRIBE-SLOT-OPTION-KEYWORD
                 NULL)))
              %%STREAM)
             (CL:WRITE-STRING " " %%STREAM))
            (PRINT-OBJECT
             OPTIONVALUE
             (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM))))))
        (CL:T)))
      :CONTINUE))))
  :VOID)

;;; (DEFUN PRETTY-PRINT-SLOT-OPTIONS ...)

(CL:DEFUN PRETTY-PRINT-SLOT-OPTIONS (SLOT STREAM)
  (CL:LET*
   ((SLOTVALUE NULL))
   (CL:LET*
    ((OPTIONSLOT NULL) (ITER-001 *SLOTOPTIONSLOTS*))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ OPTIONSLOT (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:TAGBODY
      (CL:SETQ SLOTVALUE (READ-SLOT-VALUE SLOT OPTIONSLOT))
      (CL:WHEN (CL:EQ SLOTVALUE NULL) (CL:GO :CONTINUE))
      (CL:LET*
       ((SLOTVALUE-001 SLOTVALUE))
       (CL:COND
        ((CL:EQ (TAXONOMY-ISA? SLOTVALUE SGT-DESCRIBE-LITERAL-WRAPPER) 1)
         (CL:LET*
          ((SLOTVALUE NULL))
          (CL:SETQ SLOTVALUE SLOTVALUE-001)
          (CL:WHEN
           (CL:EQ
            (LITERAL-EQL?
             (DYNAMIC-SLOT-VALUE
              OPTIONSLOT
              SYM-DESCRIBE-SLOT-INITIAL-VALUE
              NULL)
             SLOTVALUE)
            0)
           (CL:LET
            ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
            (CL:WRITE-STRING " :" %%STREAM)
            (CL:WRITE-STRING
             (STRING-DOWNCASE
              (CLSYS-SVAL
               KEYWORD
               SYMBOL-NAME
               (DYNAMIC-SLOT-VALUE
                OPTIONSLOT
                SYM-DESCRIBE-SLOT-OPTION-KEYWORD
                NULL)))
             %%STREAM)
            (CL:WRITE-STRING " " %%STREAM))
           (PRETTY-PRINT-LITERAL SLOTVALUE STREAM))))
        (CL:T)))
      :CONTINUE))))
  :VOID)

;;; (DEFMETHOD PRETTY-PRINT-OBJECT ...)

(CL:DEFMETHOD PRETTY-PRINT-OBJECT ((SELF STORAGE-SLOT) STREAM)
  (CL:LET
   ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
   (CL:WRITE-STRING "(" %%STREAM)
   (CL:WRITE-STRING
    (STRING-DOWNCASE
     (CLSYS-SVAL SYMBOL SYMBOL-NAME (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SELF)))
    %%STREAM)
   (CL:WRITE-STRING " :type " %%STREAM))
  (CL:WRITE-STRING
   (CL:IF
    (CL:NOT
     (CL:EQ
      (DYNAMIC-SLOT-VALUE SELF SYM-DESCRIBE-SLOT-TYPE-SPECIFIER NULL)
      NULL))
    (STRINGIFY
     (YIELD-TYPE-SPEC-TREE
      (DYNAMIC-SLOT-VALUE SELF SYM-DESCRIBE-SLOT-TYPE-SPECIFIER NULL)))
    (STRINGIFY
     (YIELD-TYPE-SPEC-TREE (CLSYS-SVAL STORAGE-SLOT SLOT-BASE-TYPE SELF))))
   (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM))
  (PRETTY-PRINT-SLOT-OPTIONS SELF STREAM)
  (CL:WRITE-STRING ")" (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM))
  :VOID)

;;; (DEFUN PRETTY-PRINT-METHOD-PARAMETERS ...)

(CL:DEFUN PRETTY-PRINT-METHOD-PARAMETERS (STREAM METHOD)
  (CL:LET*
   ((LASTARGINDEX
     (CL:IF
      (CL:EQ (METHOD-VARIABLE-ARGUMENTS? METHOD) 1)
      (LENGTH (METHOD-PARAMETER-NAMES METHOD))
      -1)))
   (CL:LET*
    ((*PRINTREADABLY?* TRUE))
    (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
    (CL:WRITE-STRING "(" (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM))
    (CL:LET*
     ((I NULL)
      (TSPEC NULL)
      (PARAMETER NULL)
      (ITER-001
       (CLSYS-SVAL LIST THE-CONS-LIST (METHOD-PARAMETER-NAMES METHOD)))
      (ITER-002
       (CLSYS-SVAL
        LIST
        THE-CONS-LIST
        (METHOD-PARAMETER-TYPE-SPECIFIERS METHOD)))
      (ITER-003 1))
     (CL:LOOP
      WHILE
      (CL:AND (CL:NOT (CL:EQ ITER-001 NIL)) (CL:NOT (CL:EQ ITER-002 NIL)))
      DO
      (CL:PROGN
       (CL:SETQ PARAMETER (CLSYS-SVAL CONS VALUE ITER-001))
       (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
      (CL:PROGN
       (CL:SETQ TSPEC (CLSYS-SVAL CONS VALUE ITER-002))
       (CL:SETQ ITER-002 (CLSYS-SVAL CONS REST ITER-002)))
      (CL:PROGN (CL:SETQ I ITER-003) (CL:SETQ ITER-003 (CL:1+ ITER-003)))
      (CL:WHEN
       (CL:> I 1)
       (CL:WRITE-STRING " " (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
      (CL:WHEN
       (CL:= I LASTARGINDEX)
       (CL:WRITE-STRING
        "&rest "
        (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM))
       (CL:SETQ TSPEC (VARIABLE-ARGUMENTS-TYPE METHOD)))
      (CL:LET
       ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
       (CL:WRITE-STRING "(" %%STREAM)
       (CL:WRITE-STRING
        (STRING-DOWNCASE (CLSYS-SVAL SYMBOL SYMBOL-NAME PARAMETER))
        %%STREAM)
       (CL:WRITE-STRING " " %%STREAM)
       (PRINT-OBJECT (YIELD-TYPE-SPEC-TREE TSPEC) %%STREAM)
       (CL:WRITE-STRING ")" %%STREAM))))
    (CL:WRITE-STRING ")" (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM))))
  :VOID)

;;; (DEFMETHOD PRETTY-PRINT-OBJECT ...)

(CL:DEFMETHOD PRETTY-PRINT-OBJECT ((SELF METHOD-SLOT) STREAM)
  (CL:LET
   ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
   (CL:WRITE-STRING "(" %%STREAM)
   (CL:WRITE-STRING
    (STRING-DOWNCASE
     (CLSYS-SVAL SYMBOL SYMBOL-NAME (CLSYS-SVAL METHOD-SLOT SLOT-NAME SELF)))
    %%STREAM)
   (CL:WRITE-STRING " " %%STREAM))
  (PRETTY-PRINT-METHOD-PARAMETERS STREAM SELF)
  (CL:WRITE-STRING " :type " (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM))
  (CL:WRITE-STRING
   (CL:IF
    (CL:NOT
     (CL:EQ
      (DYNAMIC-SLOT-VALUE SELF SYM-DESCRIBE-SLOT-TYPE-SPECIFIER NULL)
      NULL))
    (STRINGIFY
     (YIELD-TYPE-SPEC-TREE
      (DYNAMIC-SLOT-VALUE SELF SYM-DESCRIBE-SLOT-TYPE-SPECIFIER NULL)))
    (STRINGIFY
     (YIELD-TYPE-SPEC-TREE (CLSYS-SVAL METHOD-SLOT SLOT-BASE-TYPE SELF))))
   (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM))
  (CL:WRITE-STRING ")" (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM))
  :VOID)

;;; (DEFUN PRETTY-PRINT-SLOT-BLOCK ...)

(CL:DEFUN PRETTY-PRINT-SLOT-BLOCK (STREAM ITERATOR SLOTGROUP)
  (CL:IF
   (CL:EQ (NEXT? ITERATOR) 1)
   (CL:LET*
    ((SLOT (CLSYS-SVAL ITERATOR VALUE ITERATOR)))
    (CL:LET
     ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
     (CL:TERPRI %%STREAM)
     (CL:FORCE-OUTPUT %%STREAM)
     (CL:WRITE-STRING "  " %%STREAM)
     (CL:WRITE-STRING SLOTGROUP %%STREAM)
     (CL:TERPRI %%STREAM)
     (CL:FORCE-OUTPUT %%STREAM)
     (CL:WRITE-STRING "  (" %%STREAM))
    (PRETTY-PRINT-OBJECT SLOT STREAM))
   (CL:RETURN-FROM PRETTY-PRINT-SLOT-BLOCK))
  (CL:LET*
   ((SLOT NULL) (ITER-001 ITERATOR))
   (CL:LOOP
    WHILE
    (CL:EQ (NEXT? ITER-001) 1)
    DO
    (CL:PROGN (CL:SETQ SLOT (CLSYS-SVAL ITERATOR VALUE ITER-001)))
    (CL:LET
     ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
     (CL:TERPRI %%STREAM)
     (CL:FORCE-OUTPUT %%STREAM)
     (CL:WRITE-STRING "   " %%STREAM))
    (PRETTY-PRINT-OBJECT SLOT STREAM)))
  (CL:WRITE-STRING ")" (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM))
  :VOID)

;;; (DEFUN PRETTY-PRINT-SLOTS ...)

(CL:DEFUN PRETTY-PRINT-SLOTS (SELF STREAM)
  (PRETTY-PRINT-SLOT-BLOCK
   STREAM
   (PUBLIC-CLASS-STORAGE-SLOTS SELF)
   ":public-slots")
  (PRETTY-PRINT-SLOT-BLOCK STREAM (PRIVATE-CLASS-STORAGE-SLOTS SELF) ":slots")
  (PRETTY-PRINT-SLOT-BLOCK STREAM (PUBLIC-CLASS-METHODS SELF) ":public-methods")
  (PRETTY-PRINT-SLOT-BLOCK STREAM (PRIVATE-CLASS-METHODS SELF) ":methods")
  :VOID)

;;; (DEFMETHOD PRETTY-PRINT-OBJECT ...)

(CL:DEFMETHOD PRETTY-PRINT-OBJECT ((SELF CLASS) STREAM)
  (CL:LET*
   ((*SLOTOPTIONSLOTS* (GET-SLOT-OPTIONS))
    (*CLASSOPTIONSLOTS* (GET-CLASS-OPTIONS))
    (*CLASSUNSTRINGIFIEDOPTIONS* (GET-UNSTRINGIFIED-CLASS-OPTIONS SELF)))
   (CL:DECLARE
    (CL:SPECIAL
     *SLOTOPTIONSLOTS*
     *CLASSOPTIONSLOTS*
     *CLASSUNSTRINGIFIEDOPTIONS*))
   (CL:LET
    ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
    (CL:WRITE-STRING "(defclass " %%STREAM)
    (CL:WRITE-STRING
     (CLSYS-SVAL SURROGATE SYMBOL-NAME (CLSYS-SVAL CLASS CLASS-TYPE SELF))
     %%STREAM)
    (CL:WRITE-STRING " " %%STREAM))
   (PRINT-CLASS-LIST
    (NEW-TYPES-TO-CLASSES-ITERATOR
     (CLSYS-SVAL
      LIST
      THE-CONS-LIST
      (CLSYS-SVAL CLASS CLASS-DIRECT-SUPERS SELF)))
    STREAM)
   (PRETTY-PRINT-CLASS-OPTIONS SELF STREAM)
   (PRETTY-PRINT-SLOTS SELF STREAM)
   (CL:LET
    ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
    (CL:WRITE-STRING ")" %%STREAM)
    (CL:TERPRI %%STREAM)
    (CL:FORCE-OUTPUT %%STREAM))
   (CL:WHEN
    (CL:EQ (NEXT? (CLASS-TABLES SELF NIL)) 1)
    (CL:LET
     ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
     (CL:TERPRI %%STREAM)
     (CL:FORCE-OUTPUT %%STREAM))
    (CL:LET*
     ((TABLE NULL) (ITER-001 (CLASS-TABLES SELF NIL)))
     (CL:LOOP
      WHILE
      (CL:EQ (NEXT? ITER-001) 1)
      DO
      (CL:PROGN (CL:SETQ TABLE (CLSYS-SVAL ITERATOR VALUE ITER-001)))
      (PRETTY-PRINT-OBJECT TABLE STREAM)
      (CL:LET
       ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
       (CL:TERPRI %%STREAM)
       (CL:FORCE-OUTPUT %%STREAM))))
    (CL:LET
     ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
     (CL:TERPRI %%STREAM)
     (CL:FORCE-OUTPUT %%STREAM))))
  :VOID)

;;; (DEFMETHOD DESCRIBE-OBJECT ...)

(CL:DEFMETHOD DESCRIBE-OBJECT ((SELF OBJECT) STREAM MODE)
  "Prints a description of 'self' to stream 'stream'.  'mode'
can be :terse, :verbose, or :source.  The :terse mode is often equivalent
to the standard print function."
  (CL:SETQ MODE MODE)
  (DESCRIBE-TERSELY SELF STREAM)
  :VOID)

;;; (DEFMETHOD DESCRIBE-OBJECT ...)

(CL:DEFMETHOD DESCRIBE-OBJECT ((SELF CLASS) STREAM MODE)
  (CL:COND
   ((CL:EQ MODE KWD-DESCRIBE-SOURCE)
    (PRETTY-PRINT-DEFINITION-TREE
     (UNSTRINGIFY (CLSYS-SVAL CLASS CLASS-STRINGIFIED-SOURCE SELF))
     STREAM))
   ((CL:EQ MODE KWD-DESCRIBE-TERSE) (DESCRIBE-TERSELY SELF STREAM))
   ((CL:EQ MODE KWD-DESCRIBE-VERBOSE)
    (CL:LET
     ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
     (CL:WRITE-STRING "SOURCE mode:" %%STREAM)
     (CL:TERPRI %%STREAM)
     (CL:FORCE-OUTPUT %%STREAM))
    (DESCRIBE-OBJECT SELF STREAM KWD-DESCRIBE-SOURCE))
   (CL:T (CL:ERROR "`~A' is not a valid case option" MODE)))
  :VOID)

;;; (DEFMETHOD DESCRIBE-OBJECT ...)

(CL:DEFMETHOD DESCRIBE-OBJECT ((SELF STORAGE-SLOT) STREAM MODE)
  (CL:COND
   ((CL:EQ MODE KWD-DESCRIBE-SOURCE)
    (CL:LET
     ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
     (CL:WRITE-STRING "TERSE mode:" %%STREAM)
     (CL:TERPRI %%STREAM)
     (CL:FORCE-OUTPUT %%STREAM))
    (DESCRIBE-OBJECT SELF STREAM KWD-DESCRIBE-TERSE))
   ((CL:EQ MODE KWD-DESCRIBE-TERSE) (DESCRIBE-TERSELY SELF STREAM))
   ((CL:EQ MODE KWD-DESCRIBE-VERBOSE)
    (PRETTY-PRINT-DEFINITION-TREE
     (LIST*
      SYM-DESCRIBE-SLOT
      (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SELF)
      (LIST*
       KWD-DESCRIBE-OWNER
       (WRAP-LITERAL
        (CLSYS-SVAL
         SURROGATE
         SYMBOL-NAME
         (CLSYS-SVAL STORAGE-SLOT SLOT-OWNER SELF)))
       (LIST*
        KWD-DESCRIBE-TYPE
        (CLSYS-SVAL STORAGE-SLOT SLOT-BASE-TYPE SELF)
        (LIST*
         KWD-DESCRIBE-INITIALLY
         (DYNAMIC-SLOT-VALUE SELF SYM-DESCRIBE-SLOT-INITIAL-VALUE NULL)
         NIL))))
     STREAM))
   (CL:T (CL:ERROR "`~A' is not a valid case option" MODE)))
  :VOID)

;;; (DEFMETHOD DESCRIBE-OBJECT ...)

(CL:DEFMETHOD DESCRIBE-OBJECT ((SELF MODULE) STREAM MODE)
  (CL:COND
   ((CL:EQ MODE KWD-DESCRIBE-SOURCE)
    (PRETTY-PRINT-STELLA-TREE
     (UNSTRINGIFY (XMODULE-STRINGIFIED-SOURCE SELF))
     STREAM))
   ((CL:EQ MODE KWD-DESCRIBE-TERSE) (DESCRIBE-TERSELY SELF STREAM))
   ((CL:EQ MODE KWD-DESCRIBE-VERBOSE)
    (PRETTY-PRINT-DEFINITION-TREE
     (LIST*
      SYM-DESCRIBE-DEFMODULE
      (WRAP-LITERAL (CLSYS-SVAL MODULE MODULE-NAME SELF))
      (LIST*
       KWD-DESCRIBE-INCLUDES
       (CLSYS-SVAL MODULE PARENT-MODULES SELF)
       (LIST*
        KWD-DESCRIBE-USES
        (CLSYS-SVAL MODULE USES SELF)
        (LIST*
         KWD-DESCRIBE-SHADOWS
         (SHADOWED-SURROGATES SELF)
         (LIST*
          SYM-DESCRIBE->>_INFERRED_SLOTS
          KWD-DESCRIBE-CHILDREN
          (CLSYS-SVAL MODULE CHILD-CONTEXTS SELF)
          (LIST*
           KWD-DESCRIBE-USED-BY
           (CLSYS-SVAL MODULE USED-BY SELF)
           (LIST*
            KWD-DESCRIBE-CARDINAL-MODULE
            (CLSYS-SVAL MODULE CARDINAL-MODULE SELF)
            NIL)))))))
     STREAM))
   (CL:T (CL:ERROR "`~A' is not a valid case option" MODE)))
  :VOID)

;;; (DEFUN (XMODULE-STRINGIFIED-SOURCE STRING) ...)

(CL:DEFUN XMODULE-STRINGIFIED-SOURCE (SELF)
  (CL:RETURN-FROM
   XMODULE-STRINGIFIED-SOURCE
   (CONCATENATE
    "(defmodule "
    (CONCATENATE
     (CLSYS-SVAL MODULE MODULE-NAME SELF)
     (CONCATENATE
      " "
      (CONCATENATE (CLSYS-SVAL MODULE STRINGIFIED-OPTIONS SELF) ")")))))
  :VOID)

;;; (DEFUN (SHORT-DOCUMENTATION STRING) ...)

(CL:DEFUN SHORT-DOCUMENTATION (DOCUMENTATION)
  (CL:LET*
   ((LINEEND NULL-INTEGER) (SENTENCEEND NULL-INTEGER))
   (CL:WHEN
    (CL:EQ DOCUMENTATION NULL)
    (CL:SETQ DOCUMENTATION "Not documented."))
   (CL:SETQ LINEEND (POSITION DOCUMENTATION #\Newline 0))
   (CL:WHEN
    (CL:EQ (NULL? LINEEND) 1)
    (CL:RETURN-FROM SHORT-DOCUMENTATION DOCUMENTATION))
   (CL:WHEN
    (CL:EQ (MEMBER? ".!" (CL:CHAR DOCUMENTATION (CL:1- LINEEND))) 1)
    (CL:RETURN-FROM
     SHORT-DOCUMENTATION
     (SUBSEQUENCE DOCUMENTATION 0 LINEEND)))
   (CL:SETQ SENTENCEEND (POSITION DOCUMENTATION #\. 0))
   (CL:IF
    (CL:AND (CL:EQ (DEFINED? SENTENCEEND) 1) (CL:<= SENTENCEEND 155))
    (CL:RETURN-FROM
     SHORT-DOCUMENTATION
     (SUBSEQUENCE DOCUMENTATION 0 (CL:1+ SENTENCEEND)))
    (CL:RETURN-FROM SHORT-DOCUMENTATION (SUBSEQUENCE DOCUMENTATION 0 LINEEND))))
  :VOID)

;;; (DEFUN PRINT-DOCUMENTATION-STRING ...)

(CL:DEFUN PRINT-DOCUMENTATION-STRING (STRING INDENT STREAM)
  (CL:LET*
   ((FRESHLINE? TRUE))
   (CL:WHEN (CL:EQ (NULL? INDENT) 1) (CL:SETQ INDENT 0))
   (CL:LET*
    ((CHAR NULL)
     (VECTOR-001 STRING)
     (INDEX-001 0)
     (LENGTH-001 (LENGTH VECTOR-001)))
    (CL:LOOP
     WHILE
     (CL:< INDEX-001 LENGTH-001)
     DO
     (CL:PROGN
      (CL:SETQ CHAR (CL:CHAR VECTOR-001 INDEX-001))
      (CL:SETQ INDEX-001 (CL:1+ INDEX-001)))
     (CL:WHEN
      (CL:EQ FRESHLINE? 1)
      (CL:LET*
       ((I NULL)
        (ITER-001 1)
        (UPPER-BOUND-001 INDENT)
        (UNBOUNDED?-001 (NULL? UPPER-BOUND-001)))
       (CL:LOOP
        WHILE
        (CL:OR (CL:EQ UNBOUNDED?-001 1) (CL:<= ITER-001 UPPER-BOUND-001))
        DO
        (CL:PROGN (CL:SETQ I ITER-001) (CL:SETQ ITER-001 (CL:1+ ITER-001)))
        (CL:SETQ I I)
        (CL:WRITE-STRING
         " "
         (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM))))
      (CL:SETQ FRESHLINE? FALSE))
     (CL:PRINC CHAR (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM))
     (CL:WHEN (CL:EQL CHAR #\Newline) (CL:SETQ FRESHLINE? TRUE))))
   (CL:LET
    ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
    (CL:TERPRI %%STREAM)
    (CL:FORCE-OUTPUT %%STREAM)))
  :VOID)

;;; (DEFMETHOD PRINT-DOCUMENTATION ...)

(CL:DEFMETHOD PRINT-DOCUMENTATION ((SELF METHOD-SLOT) STREAM SHORT?)
  (CL:WHEN (CL:EQ STREAM NULL) (CL:SETQ STREAM STANDARD-OUTPUT))
  (CL:LET*
   ((DOCUMENTATION
     (CLSYS-SVAL
      STRING-WRAPPER
      WRAPPER-VALUE
      (DYNAMIC-SLOT-VALUE
       SELF
       SYM-DESCRIBE-DOCUMENTATION
       NULL-STRING-WRAPPER))))
   (PRINT-OBJECT
    (CLSYS-SVAL METHOD-SLOT SLOT-NAME SELF)
    (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM))
   (CL:WHEN
    (CL:EQ SHORT? 0)
    (CL:WRITE-STRING " " (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM))
    (PRETTY-PRINT-METHOD-PARAMETERS STREAM SELF))
   (CL:LET
    ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
    (CL:WRITE-STRING ":" %%STREAM)
    (CL:TERPRI %%STREAM)
    (CL:FORCE-OUTPUT %%STREAM))
   (PRINT-DOCUMENTATION-STRING
    (CL:IF (CL:EQ SHORT? 1) (SHORT-DOCUMENTATION DOCUMENTATION) DOCUMENTATION)
    2
    STREAM))
  :VOID)

(CL:DEFUN STARTUP-DESCRIBE ()
  (CL:LET*
   ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 2) 1)
    (CL:SETQ
     SYM-DESCRIBE-BQUOTE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "BQUOTE" NULL 0))
    (CL:SETQ
     SYM-DESCRIBE-GET-OBJECT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "GET-OBJECT" NULL 0))
    (CL:SETQ SYM-DESCRIBE-GET (INTERN-RIGID-SYMBOL-WRT-MODULE "GET" NULL 0))
    (CL:SETQ
     SYM-DESCRIBE-GET-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "GET-EXPANDER" NULL 0))
    (CL:SETQ
     SGT-DESCRIBE-CLASS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS" NULL 1))
    (CL:SETQ
     SGT-DESCRIBE-FUNCTION-CODE-WRAPPER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FUNCTION-CODE-WRAPPER" NULL 1))
    (CL:SETQ
     SGT-DESCRIBE-OBJECT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "OBJECT" NULL 1))
    (CL:SETQ
     SGT-DESCRIBE-CONTEXT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTEXT" NULL 1))
    (CL:SETQ
     SGT-DESCRIBE-METHOD-SLOT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-SLOT" NULL 1))
    (CL:SETQ SGT-DESCRIBE-SLOT (INTERN-RIGID-SYMBOL-WRT-MODULE "SLOT" NULL 1))
    (CL:SETQ
     SGT-DESCRIBE-DEMON
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DEMON" NULL 1))
    (CL:SETQ
     KWD-DESCRIBE-VERBOSE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "VERBOSE" NULL 2))
    (CL:SETQ
     KWD-DESCRIBE-TERSE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "TERSE" NULL 2))
    (CL:SETQ
     KWD-DESCRIBE-SOURCE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SOURCE" NULL 2))
    (CL:SETQ
     SYM-DESCRIBE-VERBOSE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "VERBOSE" NULL 0))
    (CL:SETQ
     SYM-DESCRIBE-TERSE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "TERSE" NULL 0))
    (CL:SETQ
     SYM-DESCRIBE-SOURCE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SOURCE" NULL 0))
    (CL:SETQ SYM-DESCRIBE-LET (INTERN-RIGID-SYMBOL-WRT-MODULE "LET" NULL 0))
    (CL:SETQ
     SYM-DESCRIBE-NAMEEXPRESSION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NAMEEXPRESSION" NULL 0))
    (CL:SETQ
     SYM-DESCRIBE-OBJECT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "OBJECT" NULL 0))
    (CL:SETQ
     SYM-DESCRIBE-ONLY-IF
     (INTERN-RIGID-SYMBOL-WRT-MODULE "ONLY-IF" NULL 0))
    (CL:SETQ
     SYM-DESCRIBE-DEFINED?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFINED?" NULL 0))
    (CL:SETQ SYM-DESCRIBE-NULL (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL" NULL 0))
    (CL:SETQ SYM-DESCRIBE-IF (INTERN-RIGID-SYMBOL-WRT-MODULE "IF" NULL 0))
    (CL:SETQ
     SYM-DESCRIBE-NULL?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL?" NULL 0))
    (CL:SETQ
     SYM-DESCRIBE-PRINT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT" NULL 0))
    (CL:SETQ
     SYM-DESCRIBE-DESCRIBE-OBJECT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DESCRIBE-OBJECT" NULL 0))
    (CL:SETQ
     SYM-DESCRIBE-STANDARD-OUTPUT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STANDARD-OUTPUT" NULL 0))
    (CL:SETQ
     SYM-DESCRIBE-DESCRIBE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DESCRIBE" NULL 0))
    (CL:SETQ
     SYM-DESCRIBE-DESCRIBE-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DESCRIBE-EXPANDER" NULL 0))
    (CL:SETQ KWD-DESCRIBE-VOID (INTERN-RIGID-SYMBOL-WRT-MODULE "VOID" NULL 2))
    (CL:SETQ SGT-DESCRIBE-LIST (INTERN-RIGID-SYMBOL-WRT-MODULE "LIST" NULL 1))
    (CL:SETQ
     SGT-DESCRIBE-ITERATOR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "ITERATOR" NULL 1))
    (CL:SETQ
     SYM-DESCRIBE-*SLOTOPTIONSLOTS*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "*SLOTOPTIONSLOTS*" NULL 0))
    (CL:SETQ
     SYM-DESCRIBE-*CLASSOPTIONSLOTS*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "*CLASSOPTIONSLOTS*" NULL 0))
    (CL:SETQ
     SYM-DESCRIBE-*CLASSUNSTRINGIFIEDOPTIONS*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "*CLASSUNSTRINGIFIEDOPTIONS*" NULL 0))
    (CL:SETQ
     SYM-DESCRIBE-SLOT-OPTION-KEYWORD
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SLOT-OPTION-KEYWORD" NULL 0))
    (CL:SETQ
     SGT-DESCRIBE-RELATION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "RELATION" NULL 1))
    (CL:SETQ
     SGT-DESCRIBE-STORAGE-SLOT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STORAGE-SLOT" NULL 1))
    (CL:SETQ
     SGT-DESCRIBE-BOOLEAN-WRAPPER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "BOOLEAN-WRAPPER" NULL 1))
    (CL:SETQ
     SGT-DESCRIBE-LITERAL-WRAPPER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "LITERAL-WRAPPER" NULL 1))
    (CL:SETQ SYM-DESCRIBE-TRUE (INTERN-RIGID-SYMBOL-WRT-MODULE "TRUE" NULL 0))
    (CL:SETQ
     SYM-DESCRIBE-FALSE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FALSE" NULL 0))
    (CL:SETQ
     SYM-DESCRIBE-NULL-BOOLEAN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL-BOOLEAN" NULL 0))
    (CL:SETQ
     SYM-DESCRIBE-SLOT-INITIAL-VALUE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SLOT-INITIAL-VALUE" NULL 0))
    (CL:SETQ
     SYM-DESCRIBE-SLOT-TYPE-SPECIFIER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SLOT-TYPE-SPECIFIER" NULL 0))
    (CL:SETQ SYM-DESCRIBE-SLOT (INTERN-RIGID-SYMBOL-WRT-MODULE "SLOT" NULL 0))
    (CL:SETQ
     KWD-DESCRIBE-OWNER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "OWNER" NULL 2))
    (CL:SETQ KWD-DESCRIBE-TYPE (INTERN-RIGID-SYMBOL-WRT-MODULE "TYPE" NULL 2))
    (CL:SETQ
     KWD-DESCRIBE-INITIALLY
     (INTERN-RIGID-SYMBOL-WRT-MODULE "INITIALLY" NULL 2))
    (CL:SETQ
     SYM-DESCRIBE-DEFMODULE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFMODULE" NULL 0))
    (CL:SETQ
     KWD-DESCRIBE-INCLUDES
     (INTERN-RIGID-SYMBOL-WRT-MODULE "INCLUDES" NULL 2))
    (CL:SETQ KWD-DESCRIBE-USES (INTERN-RIGID-SYMBOL-WRT-MODULE "USES" NULL 2))
    (CL:SETQ
     KWD-DESCRIBE-SHADOWS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SHADOWS" NULL 2))
    (CL:SETQ
     SYM-DESCRIBE->>_INFERRED_SLOTS
     (INTERN-RIGID-SYMBOL-WRT-MODULE ">>_INFERRED_SLOTS" NULL 0))
    (CL:SETQ
     KWD-DESCRIBE-CHILDREN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CHILDREN" NULL 2))
    (CL:SETQ
     KWD-DESCRIBE-USED-BY
     (INTERN-RIGID-SYMBOL-WRT-MODULE "USED-BY" NULL 2))
    (CL:SETQ
     KWD-DESCRIBE-CARDINAL-MODULE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CARDINAL-MODULE" NULL 2))
    (CL:SETQ
     SYM-DESCRIBE-DOCUMENTATION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DOCUMENTATION" NULL 0)))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 4) 1)
    (CL:SETQ *STRING-TO-OBJECT-FUNCTIONS* (NEW-KEY-VALUE-LIST))
    (CL:SETQ *INTEGER-TO-OBJECT-FUNCTIONS* (LIST))
    (CL:SETQ *DEFAULT-DESCRIBE-MODE* KWD-DESCRIBE-VERBOSE))
   (CL:WHEN (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 6) 1) (FINALIZE-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 7) 1)
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "GET-EXPANDER"
        "OBJECT"
        "(DEFUN (GET-EXPANDER OBJECT) ((NAME OBJECT) |&BODY| (BODY CONS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION GET-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "GET-OBJECT"
        "OBJECT"
        "(DEFMETHOD (GET-OBJECT OBJECT) ((SELF OBJECT) (TYPE OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION GET-OBJECT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "GET-OBJECT"
        "STRING"
        "(DEFMETHOD (GET-OBJECT OBJECT) ((SELF STRING) (TYPE OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION GET-OBJECT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "GET-OBJECT"
        "INTEGER"
        "(DEFMETHOD (GET-OBJECT OBJECT) ((SELF INTEGER) (TYPE OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION GET-OBJECT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SEARCH-FOR-OBJECT"
        "OBJECT"
        "(DEFUN (SEARCH-FOR-OBJECT OBJECT) ((SELF OBJECT) (TYPEREF OBJECT)) :DOCUMENTATION \"If 'self' is a string or a symbol, search for an object named
'self' of type 'type'.  Otherwise, if 'self' is an object, return it.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SEARCH-FOR-OBJECT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "FILTER-STRING-TO-CLASS?"
        "CLASS"
        "(DEFUN (FILTER-STRING-TO-CLASS? BOOLEAN) ((SELF CLASS) (ITERATOR ALL-PURPOSE-ITERATOR)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION FILTER-STRING-TO-CLASS?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "STRING-TO-CLASSES"
        "STRING"
        "(DEFUN (STRING-TO-CLASSES (ITERATOR OF CLASS)) ((STRING STRING) (EXACT? BOOLEAN)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION STRING-TO-CLASSES)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "STRING-TO-CLASS"
        "STRING"
        "(DEFUN (STRING-TO-CLASS OBJECT) ((STRING STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION STRING-TO-CLASS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "STRING-TO-CONTEXT"
        "STRING"
        "(DEFUN (STRING-TO-CONTEXT OBJECT) ((STRING STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION STRING-TO-CONTEXT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "STRING-TO-FUNCTION"
        "STRING"
        "(DEFUN (STRING-TO-FUNCTION OBJECT) ((STRING STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION STRING-TO-FUNCTION)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DOTTED-STRING?"
        "STRING"
        "(DEFUN (DOTTED-STRING? BOOLEAN) ((STRING STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION DOTTED-STRING?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-EXPLODED-METHOD-NAME"
        "STRING"
        "(DEFUN (YIELD-EXPLODED-METHOD-NAME STRING STRING) ((DOTTEDSTRING STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-EXPLODED-METHOD-NAME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "STRING-TO-SLOT"
        "STRING"
        "(DEFUN (STRING-TO-SLOT OBJECT) ((STRING STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION STRING-TO-SLOT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "STRING-TO-DEMON"
        "STRING"
        "(DEFUN (STRING-TO-DEMON OBJECT) ((STRING STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION STRING-TO-DEMON)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INTEGER-TO-CONTEXT"
        "INTEGER"
        "(DEFUN (INTEGER-TO-CONTEXT OBJECT) ((INTEGER INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INTEGER-TO-CONTEXT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DESCRIBE-EXPANDER"
        "OBJECT"
        "(DEFUN (DESCRIBE-EXPANDER OBJECT) ((NAME OBJECT) |&BODY| (BODY CONS)) :DOCUMENTATION \"Print a description of an object in :verbose, :terse,
or :source modes.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION DESCRIBE-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DESCRIBE-TERSELY"
        "OBJECT"
        "(DEFUN DESCRIBE-TERSELY ((SELF OBJECT) (STREAM OUTPUT-STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION DESCRIBE-TERSELY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PRETTY-PRINT-STELLA-TREE"
        "CONS"
        "(DEFUN PRETTY-PRINT-STELLA-TREE ((TREE CONS) (STREAM OUTPUT-STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION PRETTY-PRINT-STELLA-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PRETTY-PRINT-DEFINITION-TREE"
        "CONS"
        "(DEFUN PRETTY-PRINT-DEFINITION-TREE ((TREE CONS) (STREAM OUTPUT-STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION PRETTY-PRINT-DEFINITION-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CONSIFY-LISTS-AND-ITERATORS"
        "OBJECT"
        "(DEFUN (CONSIFY-LISTS-AND-ITERATORS OBJECT) ((TREE OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CONSIFY-LISTS-AND-ITERATORS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PRINT-DEFINITION"
        "MODULE"
        "(DEFMETHOD PRINT-DEFINITION ((SELF MODULE) (STREAM STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION PRINT-DEFINITION)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PRINT-CLASS-LIST"
        "ITERATOR"
        "(DEFUN PRINT-CLASS-LIST ((SELF (ITERATOR OF CLASS)) (STREAM OUTPUT-STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION PRINT-CLASS-LIST)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PRETTY-PRINT-OBJECT"
        "SLOT"
        "(DEFMETHOD PRETTY-PRINT-OBJECT ((SELF SLOT) (STREAM OUTPUT-STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION PRETTY-PRINT-OBJECT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "GET-CLASS-OPTIONS"
        NULL
        "(DEFUN (GET-CLASS-OPTIONS (CONS OF STORAGE-SLOT)) ())")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION GET-CLASS-OPTIONS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "GET-UNSTRINGIFIED-CLASS-OPTIONS"
        "CLASS"
        "(DEFUN (GET-UNSTRINGIFIED-CLASS-OPTIONS PROPERTY-LIST) ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION GET-UNSTRINGIFIED-CLASS-OPTIONS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "GET-SLOT-OPTIONS"
        NULL
        "(DEFUN (GET-SLOT-OPTIONS (CONS OF STORAGE-SLOT)) ())")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION GET-SLOT-OPTIONS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PRETTY-PRINT-LITERAL"
        "OBJECT"
        "(DEFUN PRETTY-PRINT-LITERAL ((LITERAL OBJECT) (STREAM OUTPUT-STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION PRETTY-PRINT-LITERAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "LITERAL-EQL?"
        "OBJECT"
        "(DEFUN (LITERAL-EQL? BOOLEAN) ((X OBJECT) (Y OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION LITERAL-EQL?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CONVERT-TO-LITERAL"
        "OBJECT"
        "(DEFUN (CONVERT-TO-LITERAL OBJECT) ((OBJECT OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CONVERT-TO-LITERAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PRETTY-PRINT-CLASS-OPTIONS"
        "CLASS"
        "(DEFUN PRETTY-PRINT-CLASS-OPTIONS ((CLASS CLASS) (STREAM OUTPUT-STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION PRETTY-PRINT-CLASS-OPTIONS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PRETTY-PRINT-SLOT-OPTIONS"
        "STORAGE-SLOT"
        "(DEFUN PRETTY-PRINT-SLOT-OPTIONS ((SLOT STORAGE-SLOT) (STREAM OUTPUT-STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION PRETTY-PRINT-SLOT-OPTIONS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PRETTY-PRINT-OBJECT"
        "STORAGE-SLOT"
        "(DEFMETHOD PRETTY-PRINT-OBJECT ((SELF STORAGE-SLOT) (STREAM OUTPUT-STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION PRETTY-PRINT-OBJECT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PRETTY-PRINT-METHOD-PARAMETERS"
        "OUTPUT-STREAM"
        "(DEFUN PRETTY-PRINT-METHOD-PARAMETERS ((STREAM OUTPUT-STREAM) (METHOD METHOD-SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION PRETTY-PRINT-METHOD-PARAMETERS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PRETTY-PRINT-OBJECT"
        "METHOD-SLOT"
        "(DEFMETHOD PRETTY-PRINT-OBJECT ((SELF METHOD-SLOT) (STREAM OUTPUT-STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION PRETTY-PRINT-OBJECT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PRETTY-PRINT-SLOT-BLOCK"
        "OUTPUT-STREAM"
        "(DEFUN PRETTY-PRINT-SLOT-BLOCK ((STREAM OUTPUT-STREAM) (ITERATOR (ITERATOR OF SLOT)) (SLOTGROUP STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION PRETTY-PRINT-SLOT-BLOCK)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PRETTY-PRINT-SLOTS"
        "CLASS"
        "(DEFUN PRETTY-PRINT-SLOTS ((SELF CLASS) (STREAM OUTPUT-STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION PRETTY-PRINT-SLOTS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PRETTY-PRINT-OBJECT"
        "CLASS"
        "(DEFMETHOD PRETTY-PRINT-OBJECT ((SELF CLASS) (STREAM OUTPUT-STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION PRETTY-PRINT-OBJECT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DESCRIBE-OBJECT"
        "OBJECT"
        "(DEFMETHOD DESCRIBE-OBJECT ((SELF OBJECT) (STREAM STREAM) (MODE KEYWORD)) :DOCUMENTATION \"Prints a description of 'self' to stream 'stream'.  'mode'
can be :terse, :verbose, or :source.  The :terse mode is often equivalent
to the standard print function.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION DESCRIBE-OBJECT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DESCRIBE-OBJECT"
        "CLASS"
        "(DEFMETHOD DESCRIBE-OBJECT ((SELF CLASS) (STREAM STREAM) (MODE KEYWORD)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION DESCRIBE-OBJECT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DESCRIBE-OBJECT"
        "STORAGE-SLOT"
        "(DEFMETHOD DESCRIBE-OBJECT ((SELF STORAGE-SLOT) (STREAM STREAM) (MODE KEYWORD)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION DESCRIBE-OBJECT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DESCRIBE-OBJECT"
        "MODULE"
        "(DEFMETHOD DESCRIBE-OBJECT ((SELF MODULE) (STREAM STREAM) (MODE KEYWORD)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION DESCRIBE-OBJECT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "XMODULE-STRINGIFIED-SOURCE"
        "MODULE"
        "(DEFUN (XMODULE-STRINGIFIED-SOURCE STRING) ((SELF MODULE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION XMODULE-STRINGIFIED-SOURCE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SHORT-DOCUMENTATION"
        "STRING"
        "(DEFUN (SHORT-DOCUMENTATION STRING) ((DOCUMENTATION STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SHORT-DOCUMENTATION)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PRINT-DOCUMENTATION-STRING"
        "STRING"
        "(DEFUN PRINT-DOCUMENTATION-STRING ((STRING STRING) (INDENT INTEGER) (STREAM OUTPUT-STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION PRINT-DOCUMENTATION-STRING)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PRINT-DOCUMENTATION"
        "METHOD-SLOT"
        "(DEFMETHOD PRINT-DOCUMENTATION ((SELF METHOD-SLOT) (STREAM OUTPUT-STREAM) (SHORT? BOOLEAN)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION PRINT-DOCUMENTATION)))
    (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
     "STARTUP-DESCRIBE"
     NULL
     "(DEFUN STARTUP-DESCRIBE ())"))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 8) 1)
    (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 9) 1)
    (STORE-MACRO
     SYM-DESCRIBE-GET
     SYM-DESCRIBE-GET-EXPANDER
     (CL:FUNCTION GET-EXPANDER))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *STRING-TO-OBJECT-FUNCTIONS* (KEY-VALUE-LIST OF TYPE CODE-WRAPPER) (NEW KEY-VALUE-LIST) :DOCUMENTATION \"Table of functions (keyed by type of object returned) that can
be called to search for an object identified by a string.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *INTEGER-TO-OBJECT-FUNCTIONS* (LIST OF CODE-WRAPPER) (LIST) :DOCUMENTATION \"List of functions that can be called to search for
an object identified by an integer.\")")
    (CLEAR *STRING-TO-OBJECT-FUNCTIONS*)
    (INSERT-AT
     *STRING-TO-OBJECT-FUNCTIONS*
     SGT-DESCRIBE-CLASS
     (WRAP-LITERAL (CL:FUNCTION STRING-TO-CLASS)))
    (INSERT-AT
     *STRING-TO-OBJECT-FUNCTIONS*
     SGT-DESCRIBE-CONTEXT
     (WRAP-LITERAL (CL:FUNCTION STRING-TO-CONTEXT)))
    (INSERT-AT
     *STRING-TO-OBJECT-FUNCTIONS*
     SGT-DESCRIBE-METHOD-SLOT
     (WRAP-LITERAL (CL:FUNCTION STRING-TO-FUNCTION)))
    (INSERT-AT
     *STRING-TO-OBJECT-FUNCTIONS*
     SGT-DESCRIBE-SLOT
     (WRAP-LITERAL (CL:FUNCTION STRING-TO-SLOT)))
    (INSERT-AT
     *STRING-TO-OBJECT-FUNCTIONS*
     SGT-DESCRIBE-DEMON
     (WRAP-LITERAL (CL:FUNCTION STRING-TO-DEMON)))
    (INSERT
     *INTEGER-TO-OBJECT-FUNCTIONS*
     (WRAP-LITERAL (CL:FUNCTION INTEGER-TO-CONTEXT)))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *DEFAULT-DESCRIBE-MODE* KEYWORD :VERBOSE :DOCUMENTATION \"Specifies the print mode for 'describe' when no second
argument is given.\")")
    (STORE-MACRO
     SYM-DESCRIBE-DESCRIBE
     SYM-DESCRIBE-DESCRIBE-EXPANDER
     (CL:FUNCTION DESCRIBE-EXPANDER))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *PRETTY-PRINT-LIST-CUTOFF* INTEGER 5 :DOCUMENTATION \"Lists longer than the cutoff are truncated during
pretty printing.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *SLOTOPTIONSLOTS* (CONS OF STORAGE-SLOT) NULL :DOCUMENTATION \"List of slots containing storage-slot options\")")
    (CL:LET*
     ((GLOBAL (LOOKUP-GLOBAL-VARIABLE SYM-DESCRIBE-*SLOTOPTIONSLOTS*)))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-GET-VALUE-CODE GLOBAL)
      (CL:FUNCTION READ-*SLOTOPTIONSLOTS*))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-SET-VALUE-CODE GLOBAL)
      (CL:FUNCTION WRITE-*SLOTOPTIONSLOTS*)))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *CLASSOPTIONSLOTS* (CONS OF STORAGE-SLOT) NULL :DOCUMENTATION \"List of slots containing class options\")")
    (CL:LET*
     ((GLOBAL (LOOKUP-GLOBAL-VARIABLE SYM-DESCRIBE-*CLASSOPTIONSLOTS*)))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-GET-VALUE-CODE GLOBAL)
      (CL:FUNCTION READ-*CLASSOPTIONSLOTS*))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-SET-VALUE-CODE GLOBAL)
      (CL:FUNCTION WRITE-*CLASSOPTIONSLOTS*)))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *CLASSUNSTRINGIFIEDOPTIONS* PROPERTY-LIST NULL :DOCUMENTATION \"Plist of unstringifed class options\")")
    (CL:LET*
     ((GLOBAL
       (LOOKUP-GLOBAL-VARIABLE SYM-DESCRIBE-*CLASSUNSTRINGIFIEDOPTIONS*)))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-GET-VALUE-CODE GLOBAL)
      (CL:FUNCTION READ-*CLASSUNSTRINGIFIEDOPTIONS*))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-SET-VALUE-CODE GLOBAL)
      (CL:FUNCTION WRITE-*CLASSUNSTRINGIFIEDOPTIONS*)))))
  :VOID)
