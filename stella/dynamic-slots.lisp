;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

#|--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1996, 1997             | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied "AS IS",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR KWD-DYNAMIC-SLOTS-DYNAMIC NULL)
(CL:DEFVAR KWD-DYNAMIC-SLOTS-NULL-WRAPPER NULL)
(CL:DEFVAR KWD-DYNAMIC-SLOTS-COMMON-LISP NULL)
(CL:DEFVAR SGT-DYNAMIC-SLOTS-OBJECT NULL)
(CL:DEFVAR SYM-DYNAMIC-SLOTS-WRAPPER-VALUE NULL)
(CL:DEFVAR SYM-DYNAMIC-SLOTS-SAFE-CAST NULL)
(CL:DEFVAR SYM-DYNAMIC-SLOTS-DYNAMIC-SLOT-VALUE NULL)
(CL:DEFVAR SYM-DYNAMIC-SLOTS-QUOTE NULL)
(CL:DEFVAR SYM-DYNAMIC-SLOTS-NULL NULL)
(CL:DEFVAR SYM-DYNAMIC-SLOTS-SET-DYNAMIC-SLOT-VALUE NULL)
(CL:DEFVAR SYM-DYNAMIC-SLOTS-BQUOTE NULL)
(CL:DEFVAR KWD-DYNAMIC-SLOTS-WRAP-FUNCTION NULL)

;;; Forward declarations:

(CL:DECLAIM (CL:SPECIAL *STELLA-MODULE* *MODULE*))

;;; (DEFUN (DYNAMIC-SLOT-VALUE OBJECT) ...)

(CL:DEFUN DYNAMIC-SLOT-VALUE (SELF SLOTNAME NULLVALUE)
  (CL:LET*
   ((VALUE NULL)
    (KEY NULL)
    (ITER-001
     (CLSYS-SVAL
      KEY-VALUE-LIST
      THE-KV-LIST
      (CLSYS-SVAL DYNAMIC-SLOTS-MIXIN DYNAMIC-SLOTS SELF))))
   (CL:LOOP
    WHILE
    (CL:NOT (CL:EQ ITER-001 NULL))
    DO
    (CL:SETQ KEY (CLSYS-SVAL KV-CONS KEY ITER-001))
    (CL:PROGN
     (CL:SETQ VALUE (CLSYS-SVAL KV-CONS VALUE ITER-001))
     (CL:SETQ ITER-001 (CLSYS-SVAL KV-CONS REST ITER-001)))
    (CL:WHEN
     (CL:EQ KEY SLOTNAME)
     (CL:IF
      (CL:EQ VALUE NULL)
      (CL:RETURN-FROM DYNAMIC-SLOT-VALUE NULLVALUE)
      (CL:RETURN-FROM DYNAMIC-SLOT-VALUE VALUE)))))
  (CL:RETURN-FROM DYNAMIC-SLOT-VALUE NULLVALUE)
  :VOID)

;;; (DEFUN (HELP-SET-DYNAMIC-SLOT-VALUE OBJECT OBJECT) ...)

(CL:DEFUN HELP-SET-DYNAMIC-SLOT-VALUE (DYNAMICSLOTS SLOTNAME VALUE)
  (CL:LET*
   ((CURSOR (CLSYS-SVAL KEY-VALUE-LIST THE-KV-LIST DYNAMICSLOTS))
    (OLDVALUE NULL))
   (CL:LOOP
    WHILE
    (CL:NOT (CL:EQ CURSOR NULL))
    DO
    (CL:WHEN
     (CL:EQ (CLSYS-SVAL KV-CONS KEY CURSOR) SLOTNAME)
     (CL:SETQ OLDVALUE (CLSYS-SVAL KV-CONS VALUE CURSOR))
     (CL:IF
      (CL:EQ VALUE NULL)
      (REMOVE-AT DYNAMICSLOTS SLOTNAME)
      (CL:SETF (CLSYS-SVAL KV-CONS VALUE CURSOR) VALUE))
     (CL:RETURN-FROM HELP-SET-DYNAMIC-SLOT-VALUE (CL:VALUES VALUE OLDVALUE)))
    (CL:SETQ CURSOR (CLSYS-SVAL KV-CONS REST CURSOR)))
   (CL:WHEN
    (CL:NOT (CL:EQ VALUE NULL))
    (CL:SETF
     (CLSYS-SVAL KEY-VALUE-LIST THE-KV-LIST DYNAMICSLOTS)
     (KV-CONS
      SLOTNAME
      VALUE
      (CLSYS-SVAL KEY-VALUE-LIST THE-KV-LIST DYNAMICSLOTS))))
   (CL:RETURN-FROM HELP-SET-DYNAMIC-SLOT-VALUE (CL:VALUES VALUE NULL)))
  :VOID)

;;; (DEFUN (SET-DYNAMIC-SLOT-VALUE OBJECT) ...)

(CL:DEFUN SET-DYNAMIC-SLOT-VALUE (SELF SLOTNAME VALUE NULLWRAPPER)
  (CL:LET*
   ((OLDVALUE NULL))
   (CL:MULTIPLE-VALUE-SETQ
    (VALUE OLDVALUE)
    (HELP-SET-DYNAMIC-SLOT-VALUE
     (CLSYS-SVAL DYNAMIC-SLOTS-MIXIN DYNAMIC-SLOTS SELF)
     SLOTNAME
     (CL:IF (CL:EQ VALUE NULLWRAPPER) NULL VALUE)))
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ NULLWRAPPER NULL)) (CL:NOT (CL:EQ OLDVALUE NULL)))
    (FREE OLDVALUE))
   (CL:RETURN-FROM SET-DYNAMIC-SLOT-VALUE VALUE))
  :VOID)

;;; (DEFUN (STANDARD-DYNAMIC-SLOT-ACCESS? BOOLEAN) ...)

(CL:DEFUN STANDARD-DYNAMIC-SLOT-ACCESS? (SLOT)
  (CL:RETURN-FROM
   STANDARD-DYNAMIC-SLOT-ACCESS?
   (CL:IF
    (CL:AND
     (CL:EQ (ACTIVE? SLOT) 0)
     (CL:EQ (ALLOCATION SLOT) KWD-DYNAMIC-SLOTS-DYNAMIC)
     (CL:OR
      (CL:EQ (SLOT-VALUE-IS-BARE-LITERAL? SLOT) 0)
      (CL:NOT
       (CL:EQ
        (LOOKUP-LITERAL-TYPE-INFO
         (CLSYS-SVAL STORAGE-SLOT SLOT-BASE-TYPE SLOT)
         KWD-DYNAMIC-SLOTS-NULL-WRAPPER)
        NULL))))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN (YIELD-DOWN-CAST-TREE CONS) ...)

(CL:DEFUN YIELD-DOWN-CAST-TREE (TREE RETURNTYPE)
  (CL:LET*
   ((OTREE (SYS-TREE TREE RETURNTYPE)))
   (CL:WHEN
    (CL:NOT
     (CL:EQ (TRANSLATOR-OUTPUT-LANGUAGE) KWD-DYNAMIC-SLOTS-COMMON-LISP))
    (SET-TARGET-LANGUAGE-TYPE OTREE SGT-DYNAMIC-SLOTS-OBJECT))
   (CL:RETURN-FROM YIELD-DOWN-CAST-TREE OTREE))
  :VOID)

;;; (DEFUN (YIELD-STANDARD-DYNAMIC-SLOT-VALUE-TREE CONS) ...)

(CL:DEFUN YIELD-STANDARD-DYNAMIC-SLOT-VALUE-TREE (SLOT OBJECTREF RETURNTYPE)
  (CL:LET*
   ((SLOTNAME (CLSYS-SVAL STORAGE-SLOT SLOT-NAME (CANONICAL-SLOT SLOT))))
   (CL:IF
    (CL:EQ (SLOT-VALUE-IS-BARE-LITERAL? SLOT) 1)
    (CL:RETURN-FROM
     YIELD-STANDARD-DYNAMIC-SLOT-VALUE-TREE
     (LIST*
      SYM-DYNAMIC-SLOTS-WRAPPER-VALUE
      (LIST*
       SYM-DYNAMIC-SLOTS-SAFE-CAST
       (LIST*
        SYM-DYNAMIC-SLOTS-DYNAMIC-SLOT-VALUE
        OBJECTREF
        (LIST*
         (LIST* SYM-DYNAMIC-SLOTS-QUOTE SLOTNAME NIL)
         (LOOKUP-LITERAL-TYPE-INFO (TYPE SLOT) KWD-DYNAMIC-SLOTS-NULL-WRAPPER)
         NIL))
       (TYPE-TO-SYMBOL (TYPE-TO-WRAPPED-TYPE (TYPE SLOT)))
       NIL)
      NIL))
    (CL:RETURN-FROM
     YIELD-STANDARD-DYNAMIC-SLOT-VALUE-TREE
     (YIELD-DOWN-CAST-TREE
      (WALK-A-CONS-TREE
       (LIST*
        SYM-DYNAMIC-SLOTS-DYNAMIC-SLOT-VALUE
        OBJECTREF
        (LIST*
         (LIST* SYM-DYNAMIC-SLOTS-QUOTE SLOTNAME NIL)
         SYM-DYNAMIC-SLOTS-NULL
         NIL)))
      RETURNTYPE))))
  :VOID)

;;; (DEFUN (YIELD-STANDARD-DYNAMIC-SLOT-VALUE-SETTER-TREE CONS) ...)

(CL:DEFUN YIELD-STANDARD-DYNAMIC-SLOT-VALUE-SETTER-TREE (SLOT OBJECTREF VALUEREF RETURNTYPE)
  (CL:LET*
   ((SLOTNAME (CLSYS-SVAL STORAGE-SLOT SLOT-NAME (CANONICAL-SLOT SLOT)))
    (LITERALSLOT? (SLOT-VALUE-IS-BARE-LITERAL? SLOT))
    (SETTERTREE NULL))
   (CL:IF
    (CL:EQ LITERALSLOT? 1)
    (CL:SETQ
     SETTERTREE
     (LIST*
      SYM-DYNAMIC-SLOTS-SET-DYNAMIC-SLOT-VALUE
      OBJECTREF
      (LIST*
       (LIST* SYM-DYNAMIC-SLOTS-BQUOTE SLOTNAME NIL)
       (CONS
        (LOOKUP-LITERAL-TYPE-INFO (TYPE SLOT) KWD-DYNAMIC-SLOTS-WRAP-FUNCTION)
        (CONS VALUEREF NIL))
       (LOOKUP-LITERAL-TYPE-INFO (TYPE SLOT) KWD-DYNAMIC-SLOTS-NULL-WRAPPER)
       NIL)))
    (CL:SETQ
     SETTERTREE
     (LIST*
      SYM-DYNAMIC-SLOTS-SET-DYNAMIC-SLOT-VALUE
      OBJECTREF
      (LIST*
       (LIST* SYM-DYNAMIC-SLOTS-BQUOTE SLOTNAME NIL)
       VALUEREF
       (CONS SYM-DYNAMIC-SLOTS-NULL NIL)))))
   (CL:WHEN
    (CL:EQ (WALKING-EXPRESSION?) 1)
    (CL:IF
     (CL:EQ LITERALSLOT? 1)
     (CL:SETQ
      SETTERTREE
      (LIST*
       SYM-DYNAMIC-SLOTS-WRAPPER-VALUE
       (LIST*
        SYM-DYNAMIC-SLOTS-SAFE-CAST
        SETTERTREE
        (CONS (TYPE-TO-SYMBOL (TYPE-TO-WRAPPED-TYPE (TYPE SLOT))) NIL))
       NIL))
     (CL:SETQ
      SETTERTREE
      (YIELD-DOWN-CAST-TREE (WALK-A-CONS-TREE SETTERTREE) RETURNTYPE))))
   (CL:RETURN-FROM YIELD-STANDARD-DYNAMIC-SLOT-VALUE-SETTER-TREE SETTERTREE))
  :VOID)

(CL:DEFUN STARTUP-DYNAMIC-SLOTS ()
  (CL:LET*
   ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 2) 1)
    (CL:SETQ
     KWD-DYNAMIC-SLOTS-DYNAMIC
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DYNAMIC" NULL 2))
    (CL:SETQ
     KWD-DYNAMIC-SLOTS-NULL-WRAPPER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL-WRAPPER" NULL 2))
    (CL:SETQ
     KWD-DYNAMIC-SLOTS-COMMON-LISP
     (INTERN-RIGID-SYMBOL-WRT-MODULE "COMMON-LISP" NULL 2))
    (CL:SETQ
     SGT-DYNAMIC-SLOTS-OBJECT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "OBJECT" NULL 1))
    (CL:SETQ
     SYM-DYNAMIC-SLOTS-WRAPPER-VALUE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WRAPPER-VALUE" NULL 0))
    (CL:SETQ
     SYM-DYNAMIC-SLOTS-SAFE-CAST
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SAFE-CAST" NULL 0))
    (CL:SETQ
     SYM-DYNAMIC-SLOTS-DYNAMIC-SLOT-VALUE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DYNAMIC-SLOT-VALUE" NULL 0))
    (CL:SETQ
     SYM-DYNAMIC-SLOTS-QUOTE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "QUOTE" NULL 0))
    (CL:SETQ
     SYM-DYNAMIC-SLOTS-NULL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL" NULL 0))
    (CL:SETQ
     SYM-DYNAMIC-SLOTS-SET-DYNAMIC-SLOT-VALUE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SET-DYNAMIC-SLOT-VALUE" NULL 0))
    (CL:SETQ
     SYM-DYNAMIC-SLOTS-BQUOTE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "BQUOTE" NULL 0))
    (CL:SETQ
     KWD-DYNAMIC-SLOTS-WRAP-FUNCTION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WRAP-FUNCTION" NULL 2)))
   (CL:WHEN (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 6) 1) (FINALIZE-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 7) 1)
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DYNAMIC-SLOT-VALUE"
        "DYNAMIC-SLOTS-MIXIN"
        "(DEFUN (DYNAMIC-SLOT-VALUE OBJECT) ((SELF DYNAMIC-SLOTS-MIXIN) (SLOTNAME SYMBOL) (NULLVALUE OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION DYNAMIC-SLOT-VALUE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "HELP-SET-DYNAMIC-SLOT-VALUE"
        "KEY-VALUE-LIST"
        "(DEFUN (HELP-SET-DYNAMIC-SLOT-VALUE OBJECT OBJECT) ((DYNAMICSLOTS KEY-VALUE-LIST) (SLOTNAME SYMBOL) (VALUE OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION HELP-SET-DYNAMIC-SLOT-VALUE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SET-DYNAMIC-SLOT-VALUE"
        "DYNAMIC-SLOTS-MIXIN"
        "(DEFUN (SET-DYNAMIC-SLOT-VALUE OBJECT) ((SELF DYNAMIC-SLOTS-MIXIN) (SLOTNAME SYMBOL) (VALUE OBJECT) (NULLWRAPPER WRAPPER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SET-DYNAMIC-SLOT-VALUE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "STANDARD-DYNAMIC-SLOT-ACCESS?"
        "STORAGE-SLOT"
        "(DEFUN (STANDARD-DYNAMIC-SLOT-ACCESS? BOOLEAN) ((SLOT STORAGE-SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION STANDARD-DYNAMIC-SLOT-ACCESS?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-DOWN-CAST-TREE"
        "CONS"
        "(DEFUN (YIELD-DOWN-CAST-TREE CONS) ((TREE CONS) (RETURNTYPE TYPE-SPEC)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-DOWN-CAST-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-STANDARD-DYNAMIC-SLOT-VALUE-TREE"
        "STORAGE-SLOT"
        "(DEFUN (YIELD-STANDARD-DYNAMIC-SLOT-VALUE-TREE CONS) ((SLOT STORAGE-SLOT) (OBJECTREF OBJECT) (RETURNTYPE TYPE-SPEC)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-STANDARD-DYNAMIC-SLOT-VALUE-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-STANDARD-DYNAMIC-SLOT-VALUE-SETTER-TREE"
        "STORAGE-SLOT"
        "(DEFUN (YIELD-STANDARD-DYNAMIC-SLOT-VALUE-SETTER-TREE CONS) ((SLOT STORAGE-SLOT) (OBJECTREF OBJECT) (VALUEREF OBJECT) (RETURNTYPE TYPE-SPEC)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-STANDARD-DYNAMIC-SLOT-VALUE-SETTER-TREE)))
    (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
     "STARTUP-DYNAMIC-SLOTS"
     NULL
     "(DEFUN STARTUP-DYNAMIC-SLOTS ())"))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 8) 1)
    (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES)))
  :VOID)
