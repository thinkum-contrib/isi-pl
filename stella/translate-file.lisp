;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

#|--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1996, 1997             | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied "AS IS",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SYM-TRANSLATE-FILE-*USERECORDEDSIGNATURES?* NULL)
(CL:DEFVAR KWD-TRANSLATE-FILE-COMMON-LISP NULL)
(CL:DEFVAR KWD-TRANSLATE-FILE-TRANSLATE NULL)
(CL:DEFVAR KWD-TRANSLATE-FILE-CPP NULL)
(CL:DEFVAR KWD-TRANSLATE-FILE-CPP-STANDALONE NULL)
(CL:DEFVAR KWD-TRANSLATE-FILE-IDL NULL)
(CL:DEFVAR KWD-TRANSLATE-FILE-JAVA NULL)
(CL:DEFVAR KWD-TRANSLATE-FILE-DEFINE NULL)
(CL:DEFVAR KWD-TRANSLATE-FILE-FINALIZE NULL)
(CL:DEFVAR KWD-TRANSLATE-FILE-WALK NULL)
(CL:DEFVAR KWD-TRANSLATE-FILE-STELLA NULL)
(CL:DEFVAR KWD-TRANSLATE-FILE-LISP NULL)
(CL:DEFVAR KWD-TRANSLATE-FILE-BINARY NULL)
(CL:DEFVAR SYM-TRANSLATE-FILE-STARTUP-TIME-PROGN NULL)
(CL:DEFVAR KWD-TRANSLATE-FILE-SYMBOLS NULL)
(CL:DEFVAR SYM-TRANSLATE-FILE-NULL NULL)
(CL:DEFVAR KWD-TRANSLATE-FILE-TRANSLATE-WITH-COPYRIGHT-HEADER NULL)
(CL:DEFVAR KWD-TRANSLATE-FILE-UNIX NULL)
(CL:DEFVAR KWD-TRANSLATE-FILE-MAC NULL)
(CL:DEFVAR SYM-TRANSLATE-FILE-THE-STRING NULL)
(CL:DEFVAR SYM-TRANSLATE-FILE-DELIMITERS NULL)
(CL:DEFVAR SYM-TRANSLATE-FILE-CURSOR NULL)
(CL:DEFVAR SYM-TRANSLATE-FILE-END NULL)
(CL:DEFVAR SGT-TRANSLATE-FILE-TOKEN-ITERATOR NULL)
(CL:DEFVAR SYM-TRANSLATE-FILE-*SYSTEMSOURCEDIRECTORY* NULL)
(CL:DEFVAR SYM-TRANSLATE-FILE-*SYSTEMBINARYDIRECTORY* NULL)
(CL:DEFVAR KWD-TRANSLATE-FILE-CPP-CODE NULL)
(CL:DEFVAR KWD-TRANSLATE-FILE-CPP-HEADER NULL)
(CL:DEFVAR KWD-TRANSLATE-FILE-NONE NULL)
(CL:DEFVAR KWD-TRANSLATE-FILE-DIRECTORY NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL
  *STELLA-MODULE*
  *OS*
  *CURRENT-ENVIRONMENT-FEATURES*
  *MODULE*
  *CONTEXT*
  *TRANSLATIONVERBOSITYLEVEL*
  *TRANSLATIONUNITS*
  *TRANSLATIONPHASE*
  STANDARD-OUTPUT
  EOL))

;;; (DEFGLOBAL *RECORD-SIGNATURES?* ...)

(CL:DEFVAR *RECORD-SIGNATURES?* FALSE
  "If TRUE, record object signatures into a persistent table.")

;;; (DEFGLOBAL *WALK-WITH-RECORDED-SIGNATURES?* ...)

(CL:DEFVAR *WALK-WITH-RECORDED-SIGNATURES?* FALSE
  "If TRUE, the walker will try to find previously recorded
signatures for referenced but undefined functions, methods, etc.")

;;; (DEFSPECIAL *USERECORDEDSIGNATURES?* ...)

(CL:DEFVAR *USERECORDEDSIGNATURES?* FALSE
  "If TRUE, 'safe-lookup-slot' and 'lookup-function' will
try to retrieve a previously recorded signature if normal lookup fails.")

(CL:DEFUN READ-*USERECORDEDSIGNATURES?* ()
  (CL:RETURN-FROM READ-*USERECORDEDSIGNATURES?* *USERECORDEDSIGNATURES?*)
  :VOID)

(CL:DEFUN WRITE-*USERECORDEDSIGNATURES?* (VALUE)
  (CL:SETQ *USERECORDEDSIGNATURES?* VALUE)
  (CL:RETURN-FROM WRITE-*USERECORDEDSIGNATURES?* VALUE)
  :VOID)

;;; (DEFGLOBAL *STELLA-FILES* ...)

(CL:DEFVAR *STELLA-FILES* NULL)

;;; (DEFUN (STELLA-FILES (CONS OF STRING-WRAPPER)) ...)

(CL:DEFUN STELLA-FILES (OUTPUTLANGUAGE)
  (CL:LET*
   ((STELLAFILES *STELLA-FILES*))
   (CL:WHEN
    (CL:NOT
     (CL:AND
      (CL:EQ OUTPUTLANGUAGE KWD-TRANSLATE-FILE-COMMON-LISP)
      (CL:EQ TRUE 1)))
    (CL:SETQ STELLAFILES NIL)
    (CL:LET*
     ((FILE NULL) (ITER-001 *STELLA-FILES*) (COLLECT-001 NULL))
     (CL:LOOP
      WHILE
      (CL:NOT (CL:EQ ITER-001 NIL))
      DO
      (CL:PROGN
       (CL:SETQ FILE (CLSYS-SVAL CONS VALUE ITER-001))
       (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
      (CL:WHEN
       (CL:EQ (CONS? FILE) 0)
       (CL:IF
        (CL:EQ COLLECT-001 NULL)
        (CL:PROGN
         (CL:SETQ COLLECT-001 (CONS FILE NIL))
         (CL:IF
          (CL:EQ STELLAFILES NIL)
          (CL:SETQ STELLAFILES COLLECT-001)
          (ADD-CONS-TO-END-OF-CONS-LIST STELLAFILES COLLECT-001)))
        (CL:PROGN
         (CL:SETF (CLSYS-SVAL CONS REST COLLECT-001) (CONS FILE NIL))
         (CL:SETQ COLLECT-001 (CLSYS-SVAL CONS REST COLLECT-001))))))))
   (CL:RETURN-FROM STELLA-FILES STELLAFILES))
  :VOID)

;;; (DEFUN (HANDLE-IN-MODULE-TREE BOOLEAN BOOLEAN) ...)

(CL:DEFUN HANDLE-IN-MODULE-TREE (TREE SEENINMODULE?)
  (CL:LET*
   ((OPERATOR (FIRST TREE)) (FIRSTARG NULL))
   (CL:LET*
    ((OPERATOR-001 OPERATOR))
    (CL:COND
     ((CL:EQ (SYMBOL? OPERATOR) 1)
      (CL:LET*
       ((OPERATOR NULL))
       (CL:SETQ OPERATOR OPERATOR-001)
       (CL:LET*
        ((TEST-VALUE-001 (CLSYS-SVAL SYMBOL SYMBOL-NAME OPERATOR)))
        (CL:COND
         ((CL:EQ (STRING-EQL? TEST-VALUE-001 "IN-PACKAGE") 1)
          (FREE-PARSE-TREE TREE)
          (CL:RETURN-FROM
           HANDLE-IN-MODULE-TREE
           (CL:VALUES TRUE SEENINMODULE?)))
         ((CL:EQ (STRING-EQL? TEST-VALUE-001 "IN-MODULE") 1)
          (CL:WHEN
           (CL:EQ SEENINMODULE? 1)
           (CL:LET*
            ((*PRINTREADABLY?* TRUE))
            (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
            (SIGNAL-TRANSLATION-WARNING)
            (CL:WHEN
             (CL:EQ (SUPPRESS-WARNINGS?) 0)
             (PRINT-ERROR-CONTEXT ">> WARNING: " STANDARD-OUTPUT)
             (CL:LET
              ((%%STREAM
                (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
              (CL:TERPRI %%STREAM)
              (CL:FORCE-OUTPUT %%STREAM)
              (CL:WRITE-STRING
               " Ignoring duplicate IN-MODULE declaration: `"
               %%STREAM)
              (PRINT-OBJECT (DE-UGLIFY-PARSE-TREE TREE) %%STREAM)
              (CL:WRITE-STRING "'." %%STREAM)
              (CL:TERPRI %%STREAM)
              (CL:FORCE-OUTPUT %%STREAM))))
           (CL:RETURN-FROM
            HANDLE-IN-MODULE-TREE
            (CL:VALUES TRUE SEENINMODULE?)))
          (CL:SETQ FIRSTARG (SECOND TREE))
          (CL:LET*
           ((FIRSTARG-001 FIRSTARG))
           (CL:COND
            ((CL:EQ (STRING? FIRSTARG) 1)
             (CL:LET*
              ((FIRSTARG NULL))
              (CL:SETQ FIRSTARG FIRSTARG-001)
              (CHANGE-MODULE
               (CLSYS-SVAL STRING-WRAPPER WRAPPER-VALUE FIRSTARG))
              (CL:SETQ SEENINMODULE? TRUE)))
            (CL:T
             (CL:LET*
              ((*PRINTREADABLY?* TRUE))
              (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
              (SIGNAL-TRANSLATION-WARNING)
              (CL:WHEN
               (CL:EQ (SUPPRESS-WARNINGS?) 0)
               (PRINT-ERROR-CONTEXT ">> WARNING: " STANDARD-OUTPUT)
               (CL:LET
                ((%%STREAM
                  (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
                (CL:TERPRI %%STREAM)
                (CL:FORCE-OUTPUT %%STREAM)
                (CL:WRITE-STRING
                 " Ignoring illegal IN-MODULE declaration: `"
                 %%STREAM)
                (PRINT-OBJECT (DE-UGLIFY-PARSE-TREE TREE) %%STREAM)
                (CL:WRITE-STRING "'." %%STREAM)
                (CL:TERPRI %%STREAM)
                (CL:FORCE-OUTPUT %%STREAM)))))))
          (CL:RETURN-FROM
           HANDLE-IN-MODULE-TREE
           (CL:VALUES TRUE SEENINMODULE?)))
         ((CL:OR
           (CL:EQ (STRING-EQL? TEST-VALUE-001 "DEFMODULE") 1)
           (CL:EQ (STRING-EQL? TEST-VALUE-001 "VERBATIM") 1))
          NULL)
         (CL:T
          (CL:WHEN
           (CL:EQ SEENINMODULE? 0)
           (CL:LET*
            ((*PRINTREADABLY?* TRUE))
            (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
            (SIGNAL-TRANSLATION-WARNING)
            (CL:WHEN
             (CL:EQ (SUPPRESS-WARNINGS?) 0)
             (PRINT-ERROR-CONTEXT ">> WARNING: " STANDARD-OUTPUT)
             (CL:LET
              ((%%STREAM
                (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
              (CL:TERPRI %%STREAM)
              (CL:FORCE-OUTPUT %%STREAM)
              (CL:WRITE-STRING
               " Missing IN-MODULE declaration, translating into module STELLA."
               %%STREAM)
              (CL:TERPRI %%STREAM)
              (CL:FORCE-OUTPUT %%STREAM))))
           (CHANGE-MODULE "/STELLA")
           (CL:SETQ SEENINMODULE? TRUE)))))))
     (CL:T NULL)))
   (CL:RETURN-FROM HANDLE-IN-MODULE-TREE (CL:VALUES FALSE SEENINMODULE?)))
  :VOID)

;;; (DEFUN OPERATE-ON-FILE ...)

(CL:DEFUN OPERATE-ON-FILE (FILE OPERATION)
  (CL:LET*
   ((NEEDTOGGLE? (USE-BOOTSTRAP-TRANSLATOR?))
    (TARGETLANGUAGE
     (CLSYS-SVAL KEYWORD SYMBOL-NAME (TRANSLATOR-OUTPUT-LANGUAGE)))
    (CURRENTMODULE *MODULE*)
    (CURRENTCONTEXT *CONTEXT*)
    (SEENINMODULE? FALSE)
    (SKIP? FALSE))
   (CL:WHEN
    (CL:EQ OPERATION NULL)
    (CL:SETQ OPERATION KWD-TRANSLATE-FILE-TRANSLATE))
   (CL:LET*
    ((*TRANSLATIONUNITS* (NEW-LIST))
     (*TRANSLATIONPHASE* NULL)
     (*TRANSLATIONERRORS* 0)
     (*TRANSLATIONWARNINGS* 0)
     (*CURRENTFILE* (FILE-BASE-NAME FILE))
     (*MODULE* CURRENTMODULE)
     (*CONTEXT* CURRENTCONTEXT))
    (CL:DECLARE
     (CL:SPECIAL
      *TRANSLATIONUNITS*
      *TRANSLATIONPHASE*
      *TRANSLATIONERRORS*
      *TRANSLATIONWARNINGS*
      *CURRENTFILE*
      *MODULE*
      *CONTEXT*))
    (CL:WHEN (CL:EQ NEEDTOGGLE? 1) (TOGGLE-TRANSLATORS))
    (CL:LET*
     ((TEST-VALUE-001 (TRANSLATOR-OUTPUT-LANGUAGE)))
     (CL:COND
      ((CL:EQ TEST-VALUE-001 KWD-TRANSLATE-FILE-COMMON-LISP)
       (CL:SETQ TARGETLANGUAGE "Common Lisp"))
      ((CL:OR
        (CL:EQ TEST-VALUE-001 KWD-TRANSLATE-FILE-CPP)
        (CL:EQ TEST-VALUE-001 KWD-TRANSLATE-FILE-CPP-STANDALONE))
       (CL:SETQ TARGETLANGUAGE "C++"))
      ((CL:EQ TEST-VALUE-001 KWD-TRANSLATE-FILE-IDL)
       (CL:SETQ TARGETLANGUAGE "IDL"))
      ((CL:EQ TEST-VALUE-001 KWD-TRANSLATE-FILE-JAVA)
       (CL:SETQ TARGETLANGUAGE "Java"))
      (CL:T NULL)))
    (CL:WHEN
     (CL:>= *TRANSLATIONVERBOSITYLEVEL* 1)
     (CL:LET
      ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
      (CL:WRITE-STRING "Translating file `" %%STREAM)
      (CL:PRINC FILE %%STREAM)
      (CL:WRITE-STRING "' to `" %%STREAM)
      (CL:WRITE-STRING TARGETLANGUAGE %%STREAM)
      (CL:WRITE-STRING "':" %%STREAM)
      (CL:TERPRI %%STREAM)
      (CL:FORCE-OUTPUT %%STREAM))
     (CL:LET
      ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
      (CL:WRITE-STRING "*** Pass 1, generating objects..." %%STREAM)
      (CL:TERPRI %%STREAM)
      (CL:FORCE-OUTPUT %%STREAM)))
    (CL:LET*
     ((TREE NULL) (ITER-001 (S-EXPRESSIONS (NEW-INPUT-FILE-STREAM FILE))))
     (CL:LOOP
      WHILE
      (CL:EQ (NEXT? ITER-001) 1)
      DO
      (CL:PROGN
       (CL:SETQ TREE (CLSYS-SVAL S-EXPRESSION-ITERATOR VALUE ITER-001)))
      (CL:LET*
       ((TREE-001 TREE))
       (CL:COND
        ((CL:EQ (CONS? TREE) 1)
         (CL:LET*
          ((TREE NULL))
          (CL:SETQ TREE TREE-001)
          (CL:MULTIPLE-VALUE-SETQ
           (SKIP? SEENINMODULE?)
           (HANDLE-IN-MODULE-TREE TREE SEENINMODULE?))
          (CL:WHEN
           (CL:EQ SKIP? 0)
           (CL:LET*
            ((*TRANSLATIONPHASE* KWD-TRANSLATE-FILE-DEFINE))
            (CL:DECLARE (CL:SPECIAL *TRANSLATIONPHASE*))
            (WALK-TOP-LEVEL-TREE TREE TRUE)))))
        (CL:T NULL)))))
    (REVERSE *TRANSLATIONUNITS*)
    (CL:WHEN
     (CL:NOT (CL:EQ OPERATION KWD-TRANSLATE-FILE-DEFINE))
     (CL:WHEN
      (CL:>= *TRANSLATIONVERBOSITYLEVEL* 1)
      (CL:LET
       ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
       (CL:WRITE-STRING "*** Pass 2, finalizing objects..." %%STREAM)
       (CL:TERPRI %%STREAM)
       (CL:FORCE-OUTPUT %%STREAM)))
     (CL:SETQ *TRANSLATIONPHASE* KWD-TRANSLATE-FILE-FINALIZE)
     (FINALIZE-CLASSES-AND-SLOTS)
     (CL:WHEN
      (CL:NOT (CL:EQ OPERATION KWD-TRANSLATE-FILE-FINALIZE))
      (CL:WHEN
       (CL:>= *TRANSLATIONVERBOSITYLEVEL* 1)
       (CL:LET
        ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
        (CL:WRITE-STRING "*** Pass 3, walking objects..." %%STREAM)
        (CL:TERPRI %%STREAM)
        (CL:FORCE-OUTPUT %%STREAM)))
      (CL:SETQ *TRANSLATIONPHASE* KWD-TRANSLATE-FILE-WALK)
      (CL:WHEN (CL:EQ (USE-HARDCODED-SYMBOLS?) 0) (CLEAR-SYMBOL-REGISTRY))
      (CL:LET*
       ((*USERECORDEDSIGNATURES?* *WALK-WITH-RECORDED-SIGNATURES?*))
       (CL:DECLARE (CL:SPECIAL *USERECORDEDSIGNATURES?*))
       (WALK-ALL-PHASE-ONE-UNITS (STARTUP-FUNCTION-NAME FILE)))
      (CL:WHEN
       (CL:NOT (CL:EQ OPERATION KWD-TRANSLATE-FILE-WALK))
       (CL:LET*
        ((*TRANSIENTOBJECTS?* TRUE))
        (CL:DECLARE (CL:SPECIAL *TRANSIENTOBJECTS?*))
        (CL:WHEN
         (CL:>= *TRANSLATIONVERBOSITYLEVEL* 1)
         (CL:LET
          ((%%STREAM
            (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
          (CL:WRITE-STRING "*** Pass 4, translating to `" %%STREAM)
          (CL:WRITE-STRING TARGETLANGUAGE %%STREAM)
          (CL:WRITE-STRING "'..." %%STREAM)
          (CL:TERPRI %%STREAM)
          (CL:FORCE-OUTPUT %%STREAM)))
        (CL:SETQ *TRANSLATIONPHASE* KWD-TRANSLATE-FILE-TRANSLATE)
        (TRANSLATE-ALL-UNITS)
        (CL:WHEN
         (CL:>= *TRANSLATIONVERBOSITYLEVEL* 1)
         (CL:LET
          ((%%STREAM
            (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
          (CL:WRITE-STRING
           "*** Pass 5, writing translation to file..."
           %%STREAM)
          (CL:TERPRI %%STREAM)
          (CL:FORCE-OUTPUT %%STREAM)))
        (OUTPUT-ALL-UNITS-TO-FILE FILE)))
      (CL:WHEN
       (CL:EQ *RECORD-SIGNATURES?* 1)
       (CL:LET
        ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
        (CL:WRITE-STRING "Recording object signatures..." %%STREAM)
        (CL:TERPRI %%STREAM)
        (CL:FORCE-OUTPUT %%STREAM))
       (RECORD-SIGNATURES-OF-ALL-UNITS FILE))))
    (CL:LET*
     ((UNIT NULL)
      (ITER-002 (CLSYS-SVAL LIST THE-CONS-LIST *TRANSLATIONUNITS*)))
     (CL:LOOP
      WHILE
      (CL:NOT (CL:EQ ITER-002 NIL))
      DO
      (CL:PROGN
       (CL:SETQ UNIT (CLSYS-SVAL CONS VALUE ITER-002))
       (CL:SETQ ITER-002 (CLSYS-SVAL CONS REST ITER-002)))
      (FREE UNIT)))
    (CLEAR *TRANSLATIONUNITS*)
    (SWEEP-TRANSIENTS)
    (CL:WHEN (CL:EQ NEEDTOGGLE? 1) (TOGGLE-TRANSLATORS))
    (SUMMARIZE-TRANSLATION-ERRORS)))
  :VOID)

;;; (DEFUN TRANSLATE-FILE ...)

(CL:DEFUN TRANSLATE-FILE (FILE WALKONLY?)
  (OPERATE-ON-FILE
   FILE
   (CL:IF
    (CL:EQ WALKONLY? 1)
    KWD-TRANSLATE-FILE-WALK
    KWD-TRANSLATE-FILE-TRANSLATE))
  :VOID)

;;; (DEFUN (STELLA-NEED-TO-TRANSLATE? BOOLEAN) ...)

(CL:DEFUN STELLA-NEED-TO-TRANSLATE? (FILE)
  (CL:LET*
   ((SOURCEFILE (MAKE-FILE-NAME FILE KWD-TRANSLATE-FILE-STELLA NULL))
    (TRANSLATEDFILE (MAKE-FILE-NAME FILE KWD-TRANSLATE-FILE-LISP NULL)))
   (CL:RETURN-FROM
    STELLA-NEED-TO-TRANSLATE?
    (CL:IF
     (CL:OR
      (CL:EQ (PROBE-FILE? TRANSLATEDFILE) 0)
      (CL:= (FILE-WRITE-DATE SOURCEFILE) NULL-INTEGER)
      (CL:= (FILE-WRITE-DATE TRANSLATEDFILE) NULL-INTEGER)
      (CL:< (FILE-WRITE-DATE TRANSLATEDFILE) (FILE-WRITE-DATE SOURCEFILE)))
     TRUE
     FALSE)))
  :VOID)

;;; (DEFUN (STELLA-NEED-TO-COMPILE? BOOLEAN) ...)

(CL:DEFUN STELLA-NEED-TO-COMPILE? (FILE)
  (CL:LET*
   ((SOURCEFILE (MAKE-FILE-NAME FILE KWD-TRANSLATE-FILE-LISP NULL))
    (COMPILEDFILE (MAKE-FILE-NAME FILE KWD-TRANSLATE-FILE-BINARY NULL)))
   (CL:RETURN-FROM
    STELLA-NEED-TO-COMPILE?
    (CL:IF
     (CL:OR
      (CL:EQ (PROBE-FILE? COMPILEDFILE) 0)
      (CL:EQ (NULL? (FILE-WRITE-DATE SOURCEFILE)) 1)
      (CL:EQ (NULL? (FILE-WRITE-DATE COMPILEDFILE)) 1)
      (CL:< (FILE-WRITE-DATE COMPILEDFILE) (FILE-WRITE-DATE SOURCEFILE)))
     TRUE
     FALSE)))
  :VOID)

;;; (DEFUN (SIMPLE-TRANSLATE-SYSTEM BOOLEAN) ...)

(CL:DEFUN SIMPLE-TRANSLATE-SYSTEM (FILES TWOPASS? FORCETRANSLATION?)
  (CL:LET*
   ((FILENAME NULL) (TRANSLATEDFILE? FALSE))
   (CL:WHEN
    (CL:EQ TWOPASS? 1)
    (CL:LET*
     ((FILE NULL) (ITER-001 FILES))
     (CL:LOOP
      WHILE
      (CL:NOT (CL:EQ ITER-001 NIL))
      DO
      (CL:PROGN
       (CL:SETQ FILE (CLSYS-SVAL CONS VALUE ITER-001))
       (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
      (CL:TAGBODY
       (CL:WHEN
        (CL:OR
         (CL:EQ FORCETRANSLATION? 1)
         (CL:EQ (STELLA-NEED-TO-TRANSLATE? FILE) 1))
        (CL:SETQ
         FILENAME
         (MAKE-FILE-NAME FILE KWD-TRANSLATE-FILE-STELLA NULL))
        (CL:WHEN
         (CL:EQ (PROBE-FILE? FILENAME) 0)
         (CL:LET
          ((%%STREAM
            (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
          (CL:WRITE-STRING "Warning: File `" %%STREAM)
          (CL:PRINC FILENAME %%STREAM)
          (CL:WRITE-STRING "' does not exist." %%STREAM)
          (CL:TERPRI %%STREAM)
          (CL:FORCE-OUTPUT %%STREAM))
         (CL:GO :CONTINUE))
        (OPERATE-ON-FILE FILENAME KWD-TRANSLATE-FILE-DEFINE)
        (CL:SETQ TRANSLATEDFILE? TRUE))
       :CONTINUE)))
    (CL:WHEN
     (CL:EQ TRANSLATEDFILE? 1)
     (CL:WHEN
      (CL:>= *TRANSLATIONVERBOSITYLEVEL* 1)
      (CL:LET
       ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
       (CL:WRITE-STRING "*** Pass 2, finalizing objects..." %%STREAM)
       (CL:TERPRI %%STREAM)
       (CL:FORCE-OUTPUT %%STREAM)))
     (FINALIZE-CLASSES-AND-SLOTS)))
   (CL:LET*
    ((FILE NULL) (ITER-002 FILES))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-002 NIL))
     DO
     (CL:PROGN
      (CL:SETQ FILE (CLSYS-SVAL CONS VALUE ITER-002))
      (CL:SETQ ITER-002 (CLSYS-SVAL CONS REST ITER-002)))
     (CL:TAGBODY
      (CL:WHEN
       (CL:OR
        (CL:EQ FORCETRANSLATION? 1)
        (CL:EQ (STELLA-NEED-TO-TRANSLATE? FILE) 1))
       (CL:SETQ FILENAME (MAKE-FILE-NAME FILE KWD-TRANSLATE-FILE-STELLA NULL))
       (CL:WHEN
        (CL:EQ (PROBE-FILE? FILENAME) 0)
        (CL:LET
         ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
         (CL:WRITE-STRING "Warning: File `" %%STREAM)
         (CL:PRINC FILENAME %%STREAM)
         (CL:WRITE-STRING "' does not exist." %%STREAM)
         (CL:TERPRI %%STREAM)
         (CL:FORCE-OUTPUT %%STREAM))
        (CL:GO :CONTINUE))
       (CL:LET*
        ((TEST-VALUE-001 (TRANSLATOR-OUTPUT-LANGUAGE)))
        (CL:COND
         ((CL:EQ TEST-VALUE-001 KWD-TRANSLATE-FILE-COMMON-LISP)
          (CL-TRANSLATE-FILE FILENAME))
         ((CL:EQ TEST-VALUE-001 KWD-TRANSLATE-FILE-CPP)
          (CPP-TRANSLATE-FILE FILENAME))
         ((CL:EQ TEST-VALUE-001 KWD-TRANSLATE-FILE-JAVA)
          (JAVA-TRANSLATE-FILE FILENAME))
         ((CL:EQ TEST-VALUE-001 KWD-TRANSLATE-FILE-IDL)
          (IDL-TRANSLATE-FILE FILENAME))
         (CL:T (OPERATE-ON-FILE FILENAME KWD-TRANSLATE-FILE-TRANSLATE)))))
      :CONTINUE)))
   (CL:RETURN-FROM SIMPLE-TRANSLATE-SYSTEM TRANSLATEDFILE?))
  :VOID)

;;; (DEFUN (SIMPLE-LOAD-SYSTEM BOOLEAN) ...)

(CL:DEFUN SIMPLE-LOAD-SYSTEM (FILES)
  (CL:LET*
   ((TRANSLATEDFILE? FALSE))
   (CL:LET*
    ((FILE NULL) (ITER-001 FILES))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ FILE (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL-COMPILE-AND-LOAD-FILE
      (MAKE-FILE-NAME FILE KWD-TRANSLATE-FILE-LISP NULL)
      (WRAP-BOOLEAN TRUE))
     (CL:SETQ TRANSLATEDFILE? TRUE)))
   (CL:RETURN-FROM SIMPLE-LOAD-SYSTEM TRANSLATEDFILE?))
  :VOID)

;;; (DEFUN SIMPLE-MAKE-CLEAN ...)

(CL:DEFUN SIMPLE-MAKE-CLEAN (FILES)
  (CL:LET*
   ((FILE NULL) (ITER-001 FILES))
   (CL:LOOP
    WHILE
    (CL:NOT (CL:EQ ITER-001 NIL))
    DO
    (CL:PROGN
     (CL:SETQ FILE (CLSYS-SVAL CONS VALUE ITER-001))
     (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
    (DELETE-FILE (MAKE-FILE-NAME FILE KWD-TRANSLATE-FILE-LISP NULL))
    (DELETE-FILE (MAKE-FILE-NAME FILE KWD-TRANSLATE-FILE-BINARY NULL))))
  :VOID)

;;; (DEFUN MAKE-SYSTEM ...)

(CL:DEFUN MAKE-SYSTEM (FILES FORCERECOMPILATION?)
  (CL:LET*
   ((UPDATEDSYSTEM? FALSE))
   (CL:SETQ
    UPDATEDSYSTEM?
    (SIMPLE-TRANSLATE-SYSTEM FILES TRUE FORCERECOMPILATION?))
   (CL:SETQ
    UPDATEDSYSTEM?
    (CL:IF
     (CL:OR (CL:EQ (SIMPLE-LOAD-SYSTEM FILES) 1) (CL:EQ UPDATEDSYSTEM? 1))
     TRUE
     FALSE)))
  :VOID)

;;; (DEFUN MAKE-STELLA ...)

(CL:DEFUN MAKE-STELLA (FORCERECOMPILATION?)
  (MAKE-SYSTEM *STELLA-FILES* FORCERECOMPILATION?)
  :VOID)

;;; (DEFUN OUTPUT-ALL-UNITS-TO-FILE ...)

(CL:DEFUN OUTPUT-ALL-UNITS-TO-FILE (SOURCEFILE)
  (CL:LET*
   ((TEST-VALUE-001 (TRANSLATOR-OUTPUT-LANGUAGE)))
   (CL:COND
    ((CL:EQ TEST-VALUE-001 KWD-TRANSLATE-FILE-COMMON-LISP)
     (CL-OUTPUT-ALL-UNITS-TO-FILE SOURCEFILE))
    ((CL:EQ TEST-VALUE-001 KWD-TRANSLATE-FILE-JAVA)
     (JAVA-OUTPUT-ALL-UNITS-TO-FILE SOURCEFILE))
    ((CL:EQ TEST-VALUE-001 KWD-TRANSLATE-FILE-IDL)
     (IDL-OUTPUT-ALL-UNITS-TO-FILE SOURCEFILE))
    ((CL:OR
      (CL:EQ TEST-VALUE-001 KWD-TRANSLATE-FILE-CPP)
      (CL:EQ TEST-VALUE-001 KWD-TRANSLATE-FILE-CPP-STANDALONE))
     (CPP-OUTPUT-ALL-UNITS-TO-FILE SOURCEFILE))
    (CL:T (CL:ERROR "`~A' is not a valid case option" TEST-VALUE-001))))
  :VOID)

;;; (DEFUN RECORD-SIGNATURES-OF-ALL-UNITS ...)

(CL:DEFUN RECORD-SIGNATURES-OF-ALL-UNITS (SOURCEFILE)
  NULL
  :VOID)

;;; (DEFUN CREATE-SYMBOL-STARTUP-FILE ...)

(CL:DEFUN CREATE-SYMBOL-STARTUP-FILE (STARTUPFILE)
  (CL:LET*
   ((OUTPUTSTREAM (NEW-OUTPUT-FILE-STREAM STARTUPFILE))
    (NATIVEOUTPUTSTREAM
     (CLSYS-SVAL OUTPUT-FILE-STREAM NATIVE-STREAM OUTPUTSTREAM)))
   (PRINT-STELLA-CODE
    (GET-QUOTED-TREE "((IN-PACKAGE \"STELLA\") \"/STELLA\")" "/STELLA")
    NATIVEOUTPUTSTREAM)
   (CL:PROGN
    (CL:TERPRI NATIVEOUTPUTSTREAM)
    (CL:FORCE-OUTPUT NATIVEOUTPUTSTREAM))
   (PRINT-STELLA-CODE
    (GET-QUOTED-TREE "((IN-MODULE \"/STELLA\") \"/STELLA\")" "/STELLA")
    NATIVEOUTPUTSTREAM)
   (CL:PROGN
    (CL:TERPRI NATIVEOUTPUTSTREAM)
    (CL:FORCE-OUTPUT NATIVEOUTPUTSTREAM))
   (CL:IF
    (CL:EQ (USE-HARDCODED-SYMBOLS?) 1)
    (PRINT-STELLA-CODE
     (YIELD-HARDCODED-INTERN-REGISTERED-SYMBOLS-TREE)
     NATIVEOUTPUTSTREAM)
    (PRINT-STELLA-CODE
     (LIST*
      SYM-TRANSLATE-FILE-STARTUP-TIME-PROGN
      KWD-TRANSLATE-FILE-SYMBOLS
      SYM-TRANSLATE-FILE-NULL
      NIL)
     NATIVEOUTPUTSTREAM))
   (FREE OUTPUTSTREAM))
  :VOID)

;;; (DEFGLOBAL *COPYRIGHT-HEADER* ...)

(CL:DEFVAR *COPYRIGHT-HEADER* "--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1996, 1997             | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied \"AS IS\",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------")

;;; (DEFUN (TRANSLATE-WITH-COPYRIGHT-HEADER? BOOLEAN) ...)

(CL:DEFUN TRANSLATE-WITH-COPYRIGHT-HEADER? ()
  (CL:RETURN-FROM
   TRANSLATE-WITH-COPYRIGHT-HEADER?
   (MEMBER?
    *CURRENT-ENVIRONMENT-FEATURES*
    KWD-TRANSLATE-FILE-TRANSLATE-WITH-COPYRIGHT-HEADER))
  :VOID)

;;; (DEFUN OUTPUT-COPYRIGHT-HEADER ...)

(CL:DEFUN OUTPUT-COPYRIGHT-HEADER (STREAM)
  (CL:LET*
   ((TEST-VALUE-001 (TRANSLATOR-OUTPUT-LANGUAGE)))
   (CL:COND
    ((CL:EQ TEST-VALUE-001 KWD-TRANSLATE-FILE-COMMON-LISP)
     (CL:WRITE-STRING "#|" (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
    ((CL:OR
      (CL:EQ TEST-VALUE-001 KWD-TRANSLATE-FILE-JAVA)
      (CL:EQ TEST-VALUE-001 KWD-TRANSLATE-FILE-CPP)
      (CL:EQ TEST-VALUE-001 KWD-TRANSLATE-FILE-CPP-STANDALONE))
     (CL:WRITE-STRING "/*" (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
    (CL:T (CL:ERROR "`~A' is not a valid case option" TEST-VALUE-001))))
  (CL:WRITE-STRING
   *COPYRIGHT-HEADER*
   (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM))
  (CL:LET*
   ((TEST-VALUE-002 (TRANSLATOR-OUTPUT-LANGUAGE)))
   (CL:COND
    ((CL:EQ TEST-VALUE-002 KWD-TRANSLATE-FILE-COMMON-LISP)
     (CL:WRITE-STRING "|#" (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
    ((CL:OR
      (CL:EQ TEST-VALUE-002 KWD-TRANSLATE-FILE-JAVA)
      (CL:EQ TEST-VALUE-002 KWD-TRANSLATE-FILE-CPP)
      (CL:EQ TEST-VALUE-002 KWD-TRANSLATE-FILE-CPP-STANDALONE))
     (CL:WRITE-STRING "*/" (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
    (CL:T (CL:ERROR "`~A' is not a valid case option" TEST-VALUE-002))))
  (CL:LET
   ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
   (CL:TERPRI %%STREAM)
   (CL:FORCE-OUTPUT %%STREAM)
   (CL:TERPRI %%STREAM)
   (CL:FORCE-OUTPUT %%STREAM))
  :VOID)

;;; (DEFUN (DIRECTORY-SEPARATOR CHARACTER) ...)

(CL:DEFUN DIRECTORY-SEPARATOR ()
  (CL:LET*
   ((TEST-VALUE-001 (TRANSLATOR-OUTPUT-LANGUAGE)))
   (CL:COND
    ((CL:OR
      (CL:EQ TEST-VALUE-001 KWD-TRANSLATE-FILE-CPP)
      (CL:EQ TEST-VALUE-001 KWD-TRANSLATE-FILE-CPP-STANDALONE)
      (CL:EQ TEST-VALUE-001 KWD-TRANSLATE-FILE-IDL)
      (CL:EQ TEST-VALUE-001 KWD-TRANSLATE-FILE-JAVA))
     (CL:COND
      ((CL:EQ *OS* KWD-TRANSLATE-FILE-UNIX)
       (CL:RETURN-FROM DIRECTORY-SEPARATOR #\/))
      ((CL:EQ *OS* KWD-TRANSLATE-FILE-MAC)
       (CL:RETURN-FROM DIRECTORY-SEPARATOR #\:))
      (CL:T (CL:ERROR "`~A' is not a valid case option" *OS*))))
    ((CL:EQ TEST-VALUE-001 KWD-TRANSLATE-FILE-COMMON-LISP)
     (CL:RETURN-FROM DIRECTORY-SEPARATOR #\;))
    (CL:T (CL:ERROR "`~A' is not a valid case option" TEST-VALUE-001))))
  :VOID)

;;; (DEFCONSTANT TYPE-SEPARATOR ...)

(CL:DEFVAR TYPE-SEPARATOR #\.)

;;; (DEFUN (FILE-NAME-WITHOUT-DIRECTORY FILE-NAME) ...)

(CL:DEFUN FILE-NAME-WITHOUT-DIRECTORY (FILE)
  (CL:LET*
   ((START 0) (SEPARATOR (DIRECTORY-SEPARATOR)))
   (CL:WHEN
    (CL:EQ (DEFINED? (POSITION FILE #\; 0)) 1)
    (CL:SETQ SEPARATOR #\;))
   (CL:LOOP
    WHILE
    (CL:EQ (DEFINED? (POSITION FILE SEPARATOR START)) 1)
    DO
    (CL:SETQ START (CL:1+ (POSITION FILE SEPARATOR START))))
   (CL:RETURN-FROM
    FILE-NAME-WITHOUT-DIRECTORY
    (SUBSEQUENCE FILE START NULL-INTEGER)))
  :VOID)

;;; (DEFUN (FILE-NAME-WITHOUT-TYPE FILE-NAME) ...)

(CL:DEFUN FILE-NAME-WITHOUT-TYPE (FILE)
  (CL:LET*
   ((START 0) (END NULL-INTEGER))
   (CL:LOOP
    WHILE
    (CL:EQ (DEFINED? (POSITION FILE TYPE-SEPARATOR START)) 1)
    DO
    (CL:SETQ END (POSITION FILE TYPE-SEPARATOR START))
    (CL:SETQ START (CL:1+ END)))
   (CL:RETURN-FROM FILE-NAME-WITHOUT-TYPE (SUBSEQUENCE FILE 0 END)))
  :VOID)

;;; (DEFUN (FILE-BASE-NAME FILE-NAME) ...)

(CL:DEFUN FILE-BASE-NAME (FILE)
  (CL:RETURN-FROM
   FILE-BASE-NAME
   (FILE-NAME-WITHOUT-TYPE (FILE-NAME-WITHOUT-DIRECTORY FILE)))
  :VOID)

;;; (DEFUN (STARTUP-FUNCTION-NAME SYMBOL) ...)

(CL:DEFUN STARTUP-FUNCTION-NAME (SOURCEFILE)
  (CL:RETURN-FROM
   STARTUP-FUNCTION-NAME
   (INTERN-QUALIFIED-NAME
    (CONCATENATE
     "/STELLA/STARTUP-"
     (STRING-UPCASE (FILE-BASE-NAME SOURCEFILE)))))
  :VOID)

;;; (DEFCLASS TOKEN-ITERATOR ...)

(CL:DEFCLASS TOKEN-ITERATOR (ABSTRACT-ITERATOR)
  ((THE-STRING :ALLOCATION :INSTANCE :ACCESSOR THE-STRING...OF)
   (DELIMITERS :ALLOCATION :INSTANCE :ACCESSOR DELIMITERS...OF)
   (CURSOR :ALLOCATION :INSTANCE :ACCESSOR CURSOR...OF)
   (END :ALLOCATION :INSTANCE :ACCESSOR END...OF)
   (VALUE :ALLOCATION :INSTANCE :ACCESSOR VALUE...OF))
  (:DOCUMENTATION "Iterator that yields tokens from an input string"))

(CL:DEFUN NEW-TOKEN-ITERATOR ()
  (CL:LET*
   ((SELF NULL))
   (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE TOKEN-ITERATOR)))
   (CL:SETF (CLSYS-SVAL TOKEN-ITERATOR FIRST-ITERATION? SELF) TRUE)
   (CL:SETF (CLSYS-SVAL TOKEN-ITERATOR VALUE SELF) NULL)
   (CL:SETF (CLSYS-SVAL TOKEN-ITERATOR END SELF) NULL-INTEGER)
   (CL:SETF (CLSYS-SVAL TOKEN-ITERATOR CURSOR SELF) NULL-INTEGER)
   (CL:SETF (CLSYS-SVAL TOKEN-ITERATOR DELIMITERS SELF) NULL)
   (CL:SETF (CLSYS-SVAL TOKEN-ITERATOR THE-STRING SELF) NULL)
   (CL:RETURN-FROM NEW-TOKEN-ITERATOR SELF))
  :VOID)

(CL:DEFUN ACCESS-TOKEN-ITERATOR-SLOT-VALUE (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-TRANSLATE-FILE-THE-STRING)
    (CL:IF
     (CL:EQ SETVALUE? 1)
     (CL:SETF
      (CLSYS-SVAL TOKEN-ITERATOR THE-STRING SELF)
      (CLSYS-SVAL STRING-WRAPPER WRAPPER-VALUE VALUE))
     (CL:RETURN-FROM
      ACCESS-TOKEN-ITERATOR-SLOT-VALUE
      (WRAP-LITERAL (CLSYS-SVAL TOKEN-ITERATOR THE-STRING SELF)))))
   ((CL:EQ SLOTNAME SYM-TRANSLATE-FILE-DELIMITERS)
    (CL:IF
     (CL:EQ SETVALUE? 1)
     (CL:SETF
      (CLSYS-SVAL TOKEN-ITERATOR DELIMITERS SELF)
      (CLSYS-SVAL STRING-WRAPPER WRAPPER-VALUE VALUE))
     (CL:RETURN-FROM
      ACCESS-TOKEN-ITERATOR-SLOT-VALUE
      (WRAP-LITERAL (CLSYS-SVAL TOKEN-ITERATOR DELIMITERS SELF)))))
   ((CL:EQ SLOTNAME SYM-TRANSLATE-FILE-CURSOR)
    (CL:IF
     (CL:EQ SETVALUE? 1)
     (CL:SETF
      (CLSYS-SVAL TOKEN-ITERATOR CURSOR SELF)
      (CLSYS-SVAL INTEGER-WRAPPER WRAPPER-VALUE VALUE))
     (CL:RETURN-FROM
      ACCESS-TOKEN-ITERATOR-SLOT-VALUE
      (WRAP-LITERAL (CLSYS-SVAL TOKEN-ITERATOR CURSOR SELF)))))
   ((CL:EQ SLOTNAME SYM-TRANSLATE-FILE-END)
    (CL:IF
     (CL:EQ SETVALUE? 1)
     (CL:SETF
      (CLSYS-SVAL TOKEN-ITERATOR END SELF)
      (CLSYS-SVAL INTEGER-WRAPPER WRAPPER-VALUE VALUE))
     (CL:RETURN-FROM
      ACCESS-TOKEN-ITERATOR-SLOT-VALUE
      (WRAP-LITERAL (CLSYS-SVAL TOKEN-ITERATOR END SELF)))))
   (CL:T (CL:ERROR "`~A' is not a valid case option" SLOTNAME)))
  (CL:WHEN
   (CL:EQ SETVALUE? 1)
   (CL:RETURN-FROM ACCESS-TOKEN-ITERATOR-SLOT-VALUE VALUE))
  :VOID)

(CL:DEFMETHOD PRIMARY-TYPE ((SELF TOKEN-ITERATOR))
  (CL:RETURN-FROM PRIMARY-TYPE SGT-TRANSLATE-FILE-TOKEN-ITERATOR)
  :VOID)

;;; (DEFUN (TOKENIZE TOKEN-ITERATOR) ...)

(CL:DEFUN TOKENIZE (STRING DELIMITERS)
  (CL:LET*
   ((SELF-001 (NEW-TOKEN-ITERATOR)))
   (CL:SETF (CLSYS-SVAL TOKEN-ITERATOR THE-STRING SELF-001) STRING)
   (CL:LET*
    ((ITERATOR SELF-001))
    (CL:SETF (CLSYS-SVAL TOKEN-ITERATOR DELIMITERS ITERATOR) DELIMITERS)
    (CL:SETF (CLSYS-SVAL TOKEN-ITERATOR CURSOR ITERATOR) 0)
    (CL:SETF (CLSYS-SVAL TOKEN-ITERATOR END ITERATOR) (LENGTH STRING))
    (CL:RETURN-FROM TOKENIZE ITERATOR)))
  :VOID)

;;; (DEFMETHOD (NEXT? BOOLEAN) ...)

(CL:DEFMETHOD NEXT? ((SELF TOKEN-ITERATOR))
  (CL:LET*
   ((S (CLSYS-SVAL TOKEN-ITERATOR THE-STRING SELF))
    (POS (CLSYS-SVAL TOKEN-ITERATOR CURSOR SELF))
    (CLOSESTDELIMITER (CLSYS-SVAL TOKEN-ITERATOR END SELF)))
   (CL:WHEN
    (CL:< POS (CLSYS-SVAL TOKEN-ITERATOR END SELF))
    (CL:LET*
     ((C NULL)
      (VECTOR-001 (CLSYS-SVAL TOKEN-ITERATOR DELIMITERS SELF))
      (INDEX-001 0)
      (LENGTH-001 (LENGTH VECTOR-001)))
     (CL:LOOP
      WHILE
      (CL:< INDEX-001 LENGTH-001)
      DO
      (CL:PROGN
       (CL:SETQ C (CL:CHAR VECTOR-001 INDEX-001))
       (CL:SETQ INDEX-001 (CL:1+ INDEX-001)))
      (CL:SETQ
       CLOSESTDELIMITER
       (MIN (POSITION S C (CL:1+ POS)) CLOSESTDELIMITER))))
    (CL:SETF
     (CLSYS-SVAL TOKEN-ITERATOR VALUE SELF)
     (WRAP-LITERAL (SUBSEQUENCE S POS CLOSESTDELIMITER)))
    (CL:SETF (CLSYS-SVAL TOKEN-ITERATOR CURSOR SELF) (CL:1+ CLOSESTDELIMITER))
    (CL:RETURN-FROM NEXT? TRUE))
   (CL:RETURN-FROM NEXT? FALSE))
  :VOID)

;;; (DEFUN (PARSE-PATHNAME (CONS OF STRING-WRAPPER)) ...)

(CL:DEFUN PARSE-PATHNAME (PATHNAME)
  (CL:LET*
   ((RESULT NIL))
   (CL:LET*
    ((TOKEN NULL) (ITER-001 (TOKENIZE PATHNAME "/")) (COLLECT-001 NULL))
    (CL:LOOP
     WHILE
     (CL:EQ (NEXT? ITER-001) 1)
     DO
     (CL:PROGN (CL:SETQ TOKEN (CLSYS-SVAL TOKEN-ITERATOR VALUE ITER-001)))
     (CL:IF
      (CL:EQ COLLECT-001 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-001 (CONS TOKEN NIL))
       (CL:IF
        (CL:EQ RESULT NIL)
        (CL:SETQ RESULT COLLECT-001)
        (ADD-CONS-TO-END-OF-CONS-LIST RESULT COLLECT-001)))
      (CL:PROGN
       (CL:SETF (CLSYS-SVAL CONS REST COLLECT-001) (CONS TOKEN NIL))
       (CL:SETQ COLLECT-001 (CLSYS-SVAL CONS REST COLLECT-001))))))
   (CL:RETURN-FROM PARSE-PATHNAME RESULT))
  :VOID)

;;; (DEFGLOBAL *OS* ...)

(CL:DEFVAR *OS* NULL
  "Target Operating System, currently :UNIX or :MAC.  Should probably
            be replaced by option in *current-environment-features*")

;;; (DEFSPECIAL *SYSTEMSOURCEDIRECTORY* ...)

(CL:DEFVAR *SYSTEMSOURCEDIRECTORY* "PL:sources;stella;")

(CL:DEFUN READ-*SYSTEMSOURCEDIRECTORY* ()
  (CL:RETURN-FROM READ-*SYSTEMSOURCEDIRECTORY* *SYSTEMSOURCEDIRECTORY*)
  :VOID)

(CL:DEFUN WRITE-*SYSTEMSOURCEDIRECTORY* (VALUE)
  (CL:SETQ *SYSTEMSOURCEDIRECTORY* VALUE)
  (CL:RETURN-FROM WRITE-*SYSTEMSOURCEDIRECTORY* VALUE)
  :VOID)

;;; (DEFSPECIAL *SYSTEMBINARYDIRECTORY* ...)

(CL:DEFVAR *SYSTEMBINARYDIRECTORY* "PL:binaries;stella;")

(CL:DEFUN READ-*SYSTEMBINARYDIRECTORY* ()
  (CL:RETURN-FROM READ-*SYSTEMBINARYDIRECTORY* *SYSTEMBINARYDIRECTORY*)
  :VOID)

(CL:DEFUN WRITE-*SYSTEMBINARYDIRECTORY* (VALUE)
  (CL:SETQ *SYSTEMBINARYDIRECTORY* VALUE)
  (CL:RETURN-FROM WRITE-*SYSTEMBINARYDIRECTORY* VALUE)
  :VOID)

;;; (DEFGLOBAL *STELLA-SOURCE-EXTENSION* ...)

(CL:DEFVAR *STELLA-SOURCE-EXTENSION* ".ste")

;;; (DEFGLOBAL *STELLA-BINARY-EXTENSION* ...)

(CL:DEFVAR *STELLA-BINARY-EXTENSION* ".fasl")

;;; (DEFGLOBAL *STELLA-LISP-EXTENSION* ...)

(CL:DEFVAR *STELLA-LISP-EXTENSION* ".lisp")

;;; (DEFGLOBAL *STELLA-CPP-CODE-EXTENSION* ...)

(CL:DEFVAR *STELLA-CPP-CODE-EXTENSION* ".cc")

;;; (DEFGLOBAL *STELLA-CPP-HEADER-EXTENSION* ...)

(CL:DEFVAR *STELLA-CPP-HEADER-EXTENSION* ".hh")

;;; (DEFGLOBAL *STELLA-JAVA-EXTENSION* ...)

(CL:DEFVAR *STELLA-JAVA-EXTENSION* ".java")

;;; (DEFGLOBAL *STELLA-IDL-EXTENSION* ...)

(CL:DEFVAR *STELLA-IDL-EXTENSION* ".idl")

;;; (DEFUN (SEPARATE-LAST-CONS CONS OBJECT) ...)

(CL:DEFUN SEPARATE-LAST-CONS (CONSLIST)
  (CL:LET*
   ((COPIEDITEMS (COPY-CONS-LIST CONSLIST))
    (REVERSEDITEMS NULL)
    (ALLBUTLASTITEM NULL)
    (LASTITEM NULL))
   (CL:SETQ REVERSEDITEMS (REVERSE COPIEDITEMS))
   (CL:SETQ LASTITEM (CLSYS-SVAL CONS VALUE REVERSEDITEMS))
   (CL:SETQ ALLBUTLASTITEM (REVERSE (CLSYS-SVAL CONS REST REVERSEDITEMS)))
   (CL:WHEN (CL:NOT (CL:EQ CONSLIST NIL)) (FREE-CONS REVERSEDITEMS))
   (CL:RETURN-FROM SEPARATE-LAST-CONS (CL:VALUES ALLBUTLASTITEM LASTITEM)))
  :VOID)

;;; (DEFUN (MAKE-FILE-NAME FILE-NAME) ...)

(CL:DEFUN MAKE-FILE-NAME (RELATIVEPATH TYPE ROOT)
  (CL:LET*
   ((FILE NULL)
    (DIRECTORYSEPARATOR NULL)
    (DIRECTORIES NIL)
    (EXTENSION NULL)
    (RESULT NULL))
   (CL:SETQ DIRECTORYSEPARATOR (MAKE-STRING 1 (DIRECTORY-SEPARATOR)))
   (CL:COND
    ((CL:EQ TYPE KWD-TRANSLATE-FILE-STELLA)
     (CL:SETQ EXTENSION *STELLA-SOURCE-EXTENSION*)
     (CL:WHEN (CL:EQ ROOT NULL) (CL:SETQ ROOT *SYSTEMSOURCEDIRECTORY*)))
    ((CL:EQ TYPE KWD-TRANSLATE-FILE-LISP)
     (CL:SETQ EXTENSION *STELLA-LISP-EXTENSION*)
     (CL:WHEN (CL:EQ ROOT NULL) (CL:SETQ ROOT *SYSTEMSOURCEDIRECTORY*)))
    ((CL:EQ TYPE KWD-TRANSLATE-FILE-CPP-CODE)
     (CL:SETQ EXTENSION *STELLA-CPP-CODE-EXTENSION*)
     (CL:WHEN (CL:EQ ROOT NULL) (CL:SETQ ROOT *SYSTEMSOURCEDIRECTORY*)))
    ((CL:EQ TYPE KWD-TRANSLATE-FILE-CPP-HEADER)
     (CL:SETQ EXTENSION *STELLA-CPP-HEADER-EXTENSION*)
     (CL:WHEN (CL:EQ ROOT NULL) (CL:SETQ ROOT *SYSTEMSOURCEDIRECTORY*)))
    ((CL:EQ TYPE KWD-TRANSLATE-FILE-JAVA)
     (CL:SETQ EXTENSION *STELLA-JAVA-EXTENSION*)
     (CL:WHEN (CL:EQ ROOT NULL) (CL:SETQ ROOT *SYSTEMSOURCEDIRECTORY*)))
    ((CL:EQ TYPE KWD-TRANSLATE-FILE-IDL)
     (CL:SETQ EXTENSION *STELLA-IDL-EXTENSION*)
     (CL:WHEN (CL:EQ ROOT NULL) (CL:SETQ ROOT *SYSTEMSOURCEDIRECTORY*)))
    ((CL:EQ TYPE KWD-TRANSLATE-FILE-NONE)
     (CL:SETQ EXTENSION "")
     (CL:WHEN (CL:EQ ROOT NULL) (CL:SETQ ROOT *SYSTEMSOURCEDIRECTORY*)))
    ((CL:EQ TYPE KWD-TRANSLATE-FILE-BINARY)
     (CL:SETQ EXTENSION *STELLA-BINARY-EXTENSION*)
     (CL:WHEN (CL:EQ ROOT NULL) (CL:SETQ ROOT *SYSTEMBINARYDIRECTORY*)))
    ((CL:EQ TYPE KWD-TRANSLATE-FILE-DIRECTORY)
     (CL:SETQ EXTENSION DIRECTORYSEPARATOR)
     (CL:WHEN (CL:EQ ROOT NULL) (CL:SETQ ROOT *SYSTEMBINARYDIRECTORY*)))
    (CL:T (CL:ERROR "`~A' is not a valid case option" TYPE)))
   (CL:LET*
    ((RELATIVEPATH-001 RELATIVEPATH))
    (CL:COND
     ((CL:EQ (CONS? RELATIVEPATH) 1)
      (CL:LET*
       ((RELATIVEPATH NULL))
       (CL:SETQ RELATIVEPATH RELATIVEPATH-001)
       (CL:LET*
        ((VALUE-001 NULL) (VALUE-002 NULL))
        (CL:MULTIPLE-VALUE-SETQ
         (VALUE-001 VALUE-002)
         (SEPARATE-LAST-CONS RELATIVEPATH))
        (CL:PROGN (CL:SETQ DIRECTORIES VALUE-001) (CL:SETQ FILE VALUE-002)))))
     (CL:T (CL:SETQ FILE RELATIVEPATH) (CL:SETQ RELATIVEPATH NIL))))
   (CL:SETQ RESULT ROOT)
   (CL:LET*
    ((DIRECTORY NULL) (ITER-001 DIRECTORIES))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ DIRECTORY (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:SETQ
      RESULT
      (CONCATENATE
       RESULT
       (CONCATENATE
        (CLSYS-SVAL STRING-WRAPPER WRAPPER-VALUE DIRECTORY)
        DIRECTORYSEPARATOR)))))
   (CL:SETQ
    RESULT
    (CONCATENATE
     RESULT
     (CONCATENATE (CLSYS-SVAL STRING-WRAPPER WRAPPER-VALUE FILE) EXTENSION)))
   (CL:WHEN (CL:NOT (CL:EQ DIRECTORIES NIL)) (FREE-CONS-LIST DIRECTORIES))
   (CL:RETURN-FROM MAKE-FILE-NAME RESULT))
  :VOID)

;;; (DEFUN (REROOT-FILE-NAME FILE-NAME) ...)

(CL:DEFUN REROOT-FILE-NAME (FILE FROMROOT TOROOT)
  (CL:LET*
   ((ABSOLUTE? (EQ? (STRING-SEARCH FILE FROMROOT 0) 0)))
   (CL:IF
    (CL:EQ ABSOLUTE? 1)
    (CL:IF
     (CL:EQ (STRING-EQL? FROMROOT TOROOT) 1)
     (CL:RETURN-FROM REROOT-FILE-NAME FILE)
     (CL:RETURN-FROM
      REROOT-FILE-NAME
      (CONCATENATE TOROOT (SUBSEQUENCE FILE (LENGTH FROMROOT) NULL-INTEGER))))
    (CL:RETURN-FROM REROOT-FILE-NAME (CONCATENATE TOROOT FILE))))
  :VOID)

(CL:DEFUN STARTUP-TRANSLATE-FILE ()
  (CL:LET*
   ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 2) 1)
    (CL:SETQ
     SYM-TRANSLATE-FILE-*USERECORDEDSIGNATURES?*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "*USERECORDEDSIGNATURES?*" NULL 0))
    (CL:SETQ
     KWD-TRANSLATE-FILE-COMMON-LISP
     (INTERN-RIGID-SYMBOL-WRT-MODULE "COMMON-LISP" NULL 2))
    (CL:SETQ
     KWD-TRANSLATE-FILE-TRANSLATE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "TRANSLATE" NULL 2))
    (CL:SETQ
     KWD-TRANSLATE-FILE-CPP
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP" NULL 2))
    (CL:SETQ
     KWD-TRANSLATE-FILE-CPP-STANDALONE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP-STANDALONE" NULL 2))
    (CL:SETQ
     KWD-TRANSLATE-FILE-IDL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "IDL" NULL 2))
    (CL:SETQ
     KWD-TRANSLATE-FILE-JAVA
     (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA" NULL 2))
    (CL:SETQ
     KWD-TRANSLATE-FILE-DEFINE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFINE" NULL 2))
    (CL:SETQ
     KWD-TRANSLATE-FILE-FINALIZE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FINALIZE" NULL 2))
    (CL:SETQ
     KWD-TRANSLATE-FILE-WALK
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WALK" NULL 2))
    (CL:SETQ
     KWD-TRANSLATE-FILE-STELLA
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STELLA" NULL 2))
    (CL:SETQ
     KWD-TRANSLATE-FILE-LISP
     (INTERN-RIGID-SYMBOL-WRT-MODULE "LISP" NULL 2))
    (CL:SETQ
     KWD-TRANSLATE-FILE-BINARY
     (INTERN-RIGID-SYMBOL-WRT-MODULE "BINARY" NULL 2))
    (CL:SETQ
     SYM-TRANSLATE-FILE-STARTUP-TIME-PROGN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-TIME-PROGN" NULL 0))
    (CL:SETQ
     KWD-TRANSLATE-FILE-SYMBOLS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SYMBOLS" NULL 2))
    (CL:SETQ
     SYM-TRANSLATE-FILE-NULL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL" NULL 0))
    (CL:SETQ
     KWD-TRANSLATE-FILE-TRANSLATE-WITH-COPYRIGHT-HEADER
     (INTERN-RIGID-SYMBOL-WRT-MODULE
      "TRANSLATE-WITH-COPYRIGHT-HEADER"
      NULL
      2))
    (CL:SETQ
     KWD-TRANSLATE-FILE-UNIX
     (INTERN-RIGID-SYMBOL-WRT-MODULE "UNIX" NULL 2))
    (CL:SETQ
     KWD-TRANSLATE-FILE-MAC
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MAC" NULL 2))
    (CL:SETQ
     SYM-TRANSLATE-FILE-THE-STRING
     (INTERN-RIGID-SYMBOL-WRT-MODULE "THE-STRING" NULL 0))
    (CL:SETQ
     SYM-TRANSLATE-FILE-DELIMITERS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DELIMITERS" NULL 0))
    (CL:SETQ
     SYM-TRANSLATE-FILE-CURSOR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CURSOR" NULL 0))
    (CL:SETQ
     SYM-TRANSLATE-FILE-END
     (INTERN-RIGID-SYMBOL-WRT-MODULE "END" NULL 0))
    (CL:SETQ
     SGT-TRANSLATE-FILE-TOKEN-ITERATOR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "TOKEN-ITERATOR" NULL 1))
    (CL:SETQ
     SYM-TRANSLATE-FILE-*SYSTEMSOURCEDIRECTORY*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "*SYSTEMSOURCEDIRECTORY*" NULL 0))
    (CL:SETQ
     SYM-TRANSLATE-FILE-*SYSTEMBINARYDIRECTORY*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "*SYSTEMBINARYDIRECTORY*" NULL 0))
    (CL:SETQ
     KWD-TRANSLATE-FILE-CPP-CODE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP-CODE" NULL 2))
    (CL:SETQ
     KWD-TRANSLATE-FILE-CPP-HEADER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP-HEADER" NULL 2))
    (CL:SETQ
     KWD-TRANSLATE-FILE-NONE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NONE" NULL 2))
    (CL:SETQ
     KWD-TRANSLATE-FILE-DIRECTORY
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DIRECTORY" NULL 2)))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 4) 1)
    (CL:SETQ
     *STELLA-FILES*
     (LIST*
      (WRAP-LITERAL "hierarchy")
      (WRAP-LITERAL "taxonomies")
      (WRAP-LITERAL "streams")
      (WRAP-LITERAL "primal")
      (LIST* (WRAP-LITERAL "cl-lib") (WRAP-LITERAL "cl-primal") NIL)
      (LIST* (WRAP-LITERAL "cl-lib") (WRAP-LITERAL "stella-to-cl") NIL)
      (WRAP-LITERAL "type-predicates")
      (WRAP-LITERAL "conses")
      (WRAP-LITERAL "lists")
      (WRAP-LITERAL "collections")
      (WRAP-LITERAL "iterators")
      (WRAP-LITERAL "symbols")
      (WRAP-LITERAL "literals")
      (WRAP-LITERAL "classes")
      (WRAP-LITERAL "methods")
      (WRAP-LITERAL "defclass")
      (WRAP-LITERAL "stella-in")
      (WRAP-LITERAL "foreach")
      (WRAP-LITERAL "walk")
      (WRAP-LITERAL "cl-translate")
      (WRAP-LITERAL "cl-translate-file")
      (WRAP-LITERAL "dynamic-slots")
      (WRAP-LITERAL "dynamic-literal-slots")
      (WRAP-LITERAL "modules")
      (WRAP-LITERAL "contexts")
      (WRAP-LITERAL "read")
      (WRAP-LITERAL "macros")
      (WRAP-LITERAL "demons")
      (WRAP-LITERAL "more-demons")
      (WRAP-LITERAL "translate-file")
      (WRAP-LITERAL "describe")
      (WRAP-LITERAL "cpp-translate-file")
      (WRAP-LITERAL "cpp-translate")
      (WRAP-LITERAL "cpp-class-out")
      (WRAP-LITERAL "cpp-output")
      (WRAP-LITERAL "java-translate-file")
      (WRAP-LITERAL "java-translate")
      (WRAP-LITERAL "java-class-out")
      (WRAP-LITERAL "java-output")
      (WRAP-LITERAL "idl-translate")
      (WRAP-LITERAL "idl-class-out")
      (WRAP-LITERAL "idl-translate-file")
      (WRAP-LITERAL "idl-output")
      (WRAP-LITERAL "your-file")
      (WRAP-LITERAL "your-file2")
      (WRAP-LITERAL "startup")
      NIL))
    (CL:SETQ *OS* KWD-TRANSLATE-FILE-UNIX))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 5) 1)
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE
        "TOKEN-ITERATOR"
        "(DEFCLASS TOKEN-ITERATOR (ABSTRACT-ITERATOR) :DOCUMENTATION \"Iterator that yields tokens from an input string\" :PARAMETERS ((ANY-VALUE :TYPE STRING-WRAPPER)) :SLOTS ((THE-STRING :TYPE STRING) (DELIMITERS :TYPE STRING) (CURSOR :TYPE INTEGER) (END :TYPE INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL CLASS CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-TOKEN-ITERATOR))
     (CL:SETF
      (CLSYS-SVAL CLASS CLASS-SLOT-ACCESSOR-CODE CLASS)
      (CL:FUNCTION ACCESS-TOKEN-ITERATOR-SLOT-VALUE))))
   (CL:WHEN (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 6) 1) (FINALIZE-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 7) 1)
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "STELLA-FILES"
        "KEYWORD"
        "(DEFUN (STELLA-FILES (CONS OF STRING-WRAPPER)) ((OUTPUTLANGUAGE KEYWORD)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION STELLA-FILES)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "HANDLE-IN-MODULE-TREE"
        "CONS"
        "(DEFUN (HANDLE-IN-MODULE-TREE BOOLEAN BOOLEAN) ((TREE CONS) (SEENINMODULE? BOOLEAN)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION HANDLE-IN-MODULE-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "OPERATE-ON-FILE"
        "FILE-NAME"
        "(DEFUN OPERATE-ON-FILE ((FILE FILE-NAME) (OPERATION KEYWORD)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION OPERATE-ON-FILE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "TRANSLATE-FILE"
        "FILE-NAME"
        "(DEFUN TRANSLATE-FILE ((FILE FILE-NAME) (WALKONLY? BOOLEAN)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION TRANSLATE-FILE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "STELLA-NEED-TO-TRANSLATE?"
        "OBJECT"
        "(DEFUN (STELLA-NEED-TO-TRANSLATE? BOOLEAN) ((FILE OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION STELLA-NEED-TO-TRANSLATE?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "STELLA-NEED-TO-COMPILE?"
        "OBJECT"
        "(DEFUN (STELLA-NEED-TO-COMPILE? BOOLEAN) ((FILE OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION STELLA-NEED-TO-COMPILE?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SIMPLE-TRANSLATE-SYSTEM"
        "CONS"
        "(DEFUN (SIMPLE-TRANSLATE-SYSTEM BOOLEAN) ((FILES CONS) (TWOPASS? BOOLEAN) (FORCETRANSLATION? BOOLEAN)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SIMPLE-TRANSLATE-SYSTEM)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SIMPLE-LOAD-SYSTEM"
        "CONS"
        "(DEFUN (SIMPLE-LOAD-SYSTEM BOOLEAN) ((FILES CONS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SIMPLE-LOAD-SYSTEM)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SIMPLE-MAKE-CLEAN"
        "CONS"
        "(DEFUN SIMPLE-MAKE-CLEAN ((FILES CONS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SIMPLE-MAKE-CLEAN)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "MAKE-SYSTEM"
        "CONS"
        "(DEFUN MAKE-SYSTEM ((FILES CONS) (FORCERECOMPILATION? BOOLEAN)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION MAKE-SYSTEM)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "MAKE-STELLA"
        "BOOLEAN"
        "(DEFUN MAKE-STELLA ((FORCERECOMPILATION? BOOLEAN)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION MAKE-STELLA)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "OUTPUT-ALL-UNITS-TO-FILE"
        "FILE-NAME"
        "(DEFUN OUTPUT-ALL-UNITS-TO-FILE ((SOURCEFILE FILE-NAME)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION OUTPUT-ALL-UNITS-TO-FILE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "RECORD-SIGNATURES-OF-ALL-UNITS"
        "FILE-NAME"
        "(DEFUN RECORD-SIGNATURES-OF-ALL-UNITS ((SOURCEFILE FILE-NAME)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION RECORD-SIGNATURES-OF-ALL-UNITS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CREATE-SYMBOL-STARTUP-FILE"
        "FILE-NAME"
        "(DEFUN CREATE-SYMBOL-STARTUP-FILE ((STARTUPFILE FILE-NAME)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CREATE-SYMBOL-STARTUP-FILE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "TRANSLATE-WITH-COPYRIGHT-HEADER?"
        NULL
        "(DEFUN (TRANSLATE-WITH-COPYRIGHT-HEADER? BOOLEAN) ())")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION TRANSLATE-WITH-COPYRIGHT-HEADER?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "OUTPUT-COPYRIGHT-HEADER"
        "OUTPUT-STREAM"
        "(DEFUN OUTPUT-COPYRIGHT-HEADER ((STREAM OUTPUT-STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION OUTPUT-COPYRIGHT-HEADER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DIRECTORY-SEPARATOR"
        NULL
        "(DEFUN (DIRECTORY-SEPARATOR CHARACTER) ())")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION DIRECTORY-SEPARATOR)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "FILE-NAME-WITHOUT-DIRECTORY"
        "FILE-NAME"
        "(DEFUN (FILE-NAME-WITHOUT-DIRECTORY FILE-NAME) ((FILE FILE-NAME)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION FILE-NAME-WITHOUT-DIRECTORY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "FILE-NAME-WITHOUT-TYPE"
        "FILE-NAME"
        "(DEFUN (FILE-NAME-WITHOUT-TYPE FILE-NAME) ((FILE FILE-NAME)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION FILE-NAME-WITHOUT-TYPE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "FILE-BASE-NAME"
        "FILE-NAME"
        "(DEFUN (FILE-BASE-NAME FILE-NAME) ((FILE FILE-NAME)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION FILE-BASE-NAME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "STARTUP-FUNCTION-NAME"
        "FILE-NAME"
        "(DEFUN (STARTUP-FUNCTION-NAME SYMBOL) ((SOURCEFILE FILE-NAME)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION STARTUP-FUNCTION-NAME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "TOKENIZE"
        "STRING"
        "(DEFUN (TOKENIZE TOKEN-ITERATOR) ((STRING STRING) (DELIMITERS STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION TOKENIZE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "NEXT?"
        "TOKEN-ITERATOR"
        "(DEFMETHOD (NEXT? BOOLEAN) ((SELF TOKEN-ITERATOR)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION NEXT?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PARSE-PATHNAME"
        "STRING"
        "(DEFUN (PARSE-PATHNAME (CONS OF STRING-WRAPPER)) ((PATHNAME STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION PARSE-PATHNAME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SEPARATE-LAST-CONS"
        "CONS"
        "(DEFUN (SEPARATE-LAST-CONS CONS OBJECT) ((CONSLIST CONS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SEPARATE-LAST-CONS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "MAKE-FILE-NAME"
        "OBJECT"
        "(DEFUN (MAKE-FILE-NAME FILE-NAME) ((RELATIVEPATH OBJECT) (TYPE KEYWORD) (ROOT STRING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION MAKE-FILE-NAME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "REROOT-FILE-NAME"
        "FILE-NAME"
        "(DEFUN (REROOT-FILE-NAME FILE-NAME) ((FILE FILE-NAME) (FROMROOT FILE-NAME) (TOROOT FILE-NAME)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION REROOT-FILE-NAME)))
    (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
     "STARTUP-TRANSLATE-FILE"
     NULL
     "(DEFUN STARTUP-TRANSLATE-FILE ())"))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 8) 1)
    (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 9) 1)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *RECORD-SIGNATURES?* BOOLEAN FALSE :DOCUMENTATION \"If TRUE, record object signatures into a persistent table.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *WALK-WITH-RECORDED-SIGNATURES?* BOOLEAN FALSE :DOCUMENTATION \"If TRUE, the walker will try to find previously recorded
signatures for referenced but undefined functions, methods, etc.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *USERECORDEDSIGNATURES?* BOOLEAN FALSE :DOCUMENTATION \"If TRUE, 'safe-lookup-slot' and 'lookup-function' will
try to retrieve a previously recorded signature if normal lookup fails.\")")
    (CL:LET*
     ((GLOBAL
       (LOOKUP-GLOBAL-VARIABLE SYM-TRANSLATE-FILE-*USERECORDEDSIGNATURES?*)))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-GET-VALUE-CODE GLOBAL)
      (CL:FUNCTION READ-*USERECORDEDSIGNATURES?*))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-SET-VALUE-CODE GLOBAL)
      (CL:FUNCTION WRITE-*USERECORDEDSIGNATURES?*)))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *STELLA-FILES* CONS (BQUOTE (\"hierarchy\" \"taxonomies\" \"streams\" \"primal\" (\"cl-lib\" \"cl-primal\") (\"cl-lib\" \"stella-to-cl\") \"type-predicates\" \"conses\" \"lists\" \"collections\" \"iterators\" \"symbols\" \"literals\" \"classes\" \"methods\" \"defclass\" \"stella-in\" \"foreach\" \"walk\" \"cl-translate\" \"cl-translate-file\" \"dynamic-slots\" \"dynamic-literal-slots\" \"modules\" \"contexts\" \"read\" \"macros\" \"demons\" \"more-demons\" \"translate-file\" \"describe\" \"cpp-translate-file\" \"cpp-translate\" \"cpp-class-out\" \"cpp-output\" \"java-translate-file\" \"java-translate\" \"java-class-out\" \"java-output\" \"idl-translate\" \"idl-class-out\" \"idl-translate-file\" \"idl-output\" \"your-file\" \"your-file2\" \"startup\")))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *COPYRIGHT-HEADER* STRING \"--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1996, 1997             | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied \\\"AS IS\\\",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFCONSTANT TYPE-SEPARATOR CHARACTER #\\.)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *OS* KEYWORD :UNIX :DOCUMENTATION \"Target Operating System, currently :UNIX or :MAC.  Should probably
            be replaced by option in *current-environment-features*\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *SYSTEMSOURCEDIRECTORY* STRING \"PL:sources;stella;\")")
    (CL:LET*
     ((GLOBAL
       (LOOKUP-GLOBAL-VARIABLE SYM-TRANSLATE-FILE-*SYSTEMSOURCEDIRECTORY*)))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-GET-VALUE-CODE GLOBAL)
      (CL:FUNCTION READ-*SYSTEMSOURCEDIRECTORY*))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-SET-VALUE-CODE GLOBAL)
      (CL:FUNCTION WRITE-*SYSTEMSOURCEDIRECTORY*)))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *SYSTEMBINARYDIRECTORY* STRING \"PL:binaries;stella;\")")
    (CL:LET*
     ((GLOBAL
       (LOOKUP-GLOBAL-VARIABLE SYM-TRANSLATE-FILE-*SYSTEMBINARYDIRECTORY*)))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-GET-VALUE-CODE GLOBAL)
      (CL:FUNCTION READ-*SYSTEMBINARYDIRECTORY*))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-SET-VALUE-CODE GLOBAL)
      (CL:FUNCTION WRITE-*SYSTEMBINARYDIRECTORY*)))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *STELLA-SOURCE-EXTENSION* STRING \".ste\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *STELLA-BINARY-EXTENSION* STRING \".fasl\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *STELLA-LISP-EXTENSION* STRING \".lisp\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *STELLA-CPP-CODE-EXTENSION* STRING \".cc\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *STELLA-CPP-HEADER-EXTENSION* STRING \".hh\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *STELLA-JAVA-EXTENSION* STRING \".java\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *STELLA-IDL-EXTENSION* STRING \".idl\")")))
  :VOID)
