;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

#|--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1996, 1997             | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied "AS IS",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SYM-TAXONOMIES-*POSTORDER-NUMBER* NULL)

;;; Forward declarations:

(CL:DECLAIM (CL:SPECIAL *STELLA-MODULE* *MODULE* EOL DELETED-LABEL))

;;; (DEFGLOBAL *NUMBERING-INTERVAL* ...)

(CL:DEFVAR *NUMBERING-INTERVAL* 100
  "Spacing between succesive nodes")

;;; (DEFUN (HELP-COLLECT-ALL-NODES (CONS OF TAXONOMY-NODE)) ...)

(CL:DEFUN HELP-COLLECT-ALL-NODES (NODE)
  (CL:LET*
   ((RESULT NIL))
   (CL:LET*
    ((CHILD NULL) (ITER-001 (CLSYS-SVAL TAXONOMY-NODE TREE-CHILDREN NODE)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ CHILD (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:SETQ RESULT (CONCATENATE (HELP-COLLECT-ALL-NODES CHILD) RESULT))))
   (CL:RETURN-FROM HELP-COLLECT-ALL-NODES (CONS NODE RESULT)))
  :VOID)

;;; (DEFUN (ALL-NODES (CONS OF TAXONOMY-NODE)) ...)

(CL:DEFUN ALL-NODES (GRAPH)
  (CL:LET*
   ((RESULT NIL))
   (CL:LET*
    ((ROOT NULL) (ITER-001 (CLSYS-SVAL TAXONOMY-GRAPH ROOTS GRAPH)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ ROOT (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:SETQ RESULT (CONCATENATE (HELP-COLLECT-ALL-NODES ROOT) RESULT))))
   (CL:RETURN-FROM ALL-NODES RESULT))
  :VOID)

;;; (DEFUN (HELP-FIND-TAXONOMY-NODE TAXONOMY-NODE) ...)

(CL:DEFUN HELP-FIND-TAXONOMY-NODE (NODE LABEL)
  (CL:WHEN
   (CL:= (CLSYS-SVAL TAXONOMY-NODE LABEL NODE) LABEL)
   (CL:RETURN-FROM HELP-FIND-TAXONOMY-NODE NODE))
  (CL:LET*
   ((RESULT NULL))
   (CL:LET*
    ((CHILD NULL) (ITER-001 (CLSYS-SVAL TAXONOMY-NODE CHILDREN NODE)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ CHILD (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:SETQ RESULT (HELP-FIND-TAXONOMY-NODE CHILD LABEL))
     (CL:WHEN
      (CL:NOT (CL:EQ RESULT NULL))
      (CL:RETURN-FROM HELP-FIND-TAXONOMY-NODE RESULT))))
   (CL:RETURN-FROM HELP-FIND-TAXONOMY-NODE NULL))
  :VOID)

;;; (DEFUN (FIND-TAXONOMY-NODE TAXONOMY-NODE) ...)

(CL:DEFUN FIND-TAXONOMY-NODE (GRAPH LABEL)
  (CL:LET*
   ((RESULT NULL))
   (CL:LET*
    ((ROOT NULL) (ITER-001 (CLSYS-SVAL TAXONOMY-GRAPH ROOTS GRAPH)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ ROOT (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:SETQ RESULT (HELP-FIND-TAXONOMY-NODE ROOT LABEL))
     (CL:WHEN
      (CL:NOT (CL:EQ RESULT NULL))
      (CL:RETURN-FROM FIND-TAXONOMY-NODE RESULT))))
   (CL:RETURN-FROM FIND-TAXONOMY-NODE NULL))
  :VOID)

;;; (DEFUN (FTN TAXONOMY-NODE) ...)

(CL:DEFUN FTN (GRAPH LABEL)
  (CL:RETURN-FROM FTN (FIND-TAXONOMY-NODE GRAPH LABEL))
  :VOID)

;;; (DEFUN CREATE-LINK ...)

(CL:DEFUN CREATE-LINK (GRAPH PARENT CHILD)
  (CL:WHEN
   (CL:EQ (CLSYS-SVAL TAXONOMY-NODE PARENTS CHILD) NIL)
   (CL:SETF
    (CLSYS-SVAL TAXONOMY-GRAPH ROOTS GRAPH)
    (REMOVE (CLSYS-SVAL TAXONOMY-GRAPH ROOTS GRAPH) CHILD)))
  (CL:SETF
   (CLSYS-SVAL TAXONOMY-NODE PARENTS CHILD)
   (CONS PARENT (CLSYS-SVAL TAXONOMY-NODE PARENTS CHILD)))
  (CL:SETF
   (CLSYS-SVAL TAXONOMY-NODE CHILDREN PARENT)
   (CONS CHILD (CLSYS-SVAL TAXONOMY-NODE CHILDREN PARENT)))
  (COMPUTE-TOTAL-ANCESTORS CHILD)
  :VOID)

;;; (DEFUN LINK-NODES ...)

(CL:DEFUN LINK-NODES (GRAPH PARENT CHILD)
  (CL:WHEN
   (CL:EQ (MEMBER? (CLSYS-SVAL TAXONOMY-NODE CHILDREN PARENT) CHILD) 1)
   (CL:RETURN-FROM LINK-NODES))
  (CL:WHEN
   (CL:EQ (CLSYS-SVAL TAXONOMY-GRAPH INCREMENTAL-MODE? GRAPH) 1)
   (CL:IF
    (CL:EQ (CLSYS-SVAL TAXONOMY-NODE INITIAL-INTERVAL CHILD) NULL)
    (CL:LET*
     ((INTERVAL (ALLOCATE-NEW-INTERVAL PARENT)))
     (CL:WHEN
      (CL:EQ INTERVAL NULL)
      (CL:WHEN
       (CL:EQ (CLSYS-SVAL TAXONOMY-GRAPH RENUMBER-IF-OUT-OF-NUMBERS? GRAPH) 1)
       (CREATE-LINK GRAPH PARENT CHILD)
       (CREATE-SPANNING-FOREST GRAPH)
       (CL:RETURN-FROM LINK-NODES))
      (CL:SETQ INTERVAL (CREATE-NEXT-POSTORDER-INTERVAL GRAPH))
      (PROPOGATE-FOREIGN-INTERVAL GRAPH INTERVAL PARENT))
     (CL:SETF (CLSYS-SVAL TAXONOMY-NODE INITIAL-INTERVAL CHILD) INTERVAL)
     (INSERT-INTERVAL GRAPH CHILD INTERVAL)
     (CL:SETF
      (CLSYS-SVAL TAXONOMY-NODE LABEL CHILD)
      (CLSYS-SVAL INTERVAL UPPER-BOUND INTERVAL))
     (CL:SETF
      (CLSYS-SVAL TAXONOMY-NODE TREE-CHILDREN PARENT)
      (REVERSE
       (CONS
        CHILD
        (REVERSE (CLSYS-SVAL TAXONOMY-NODE TREE-CHILDREN PARENT))))))
    (CL:LET*
     ((INTERVAL NULL) (ITER-001 (ALL-INTERVALS CHILD)))
     (CL:LOOP
      WHILE
      (CL:EQ (NEXT? ITER-001) 1)
      DO
      (CL:PROGN (CL:SETQ INTERVAL (CLSYS-SVAL ITERATOR VALUE ITER-001)))
      (PROPOGATE-FOREIGN-INTERVAL GRAPH INTERVAL PARENT)))))
  (CREATE-LINK GRAPH PARENT CHILD)
  :VOID)

;;; (DEFUN COMPUTE-TOTAL-ANCESTORS ...)

(CL:DEFUN COMPUTE-TOTAL-ANCESTORS (NODE)
  (CL:LET*
   ((TOTALANCESTORS 0))
   (CL:LET*
    ((PARENT NULL) (ITER-001 (CLSYS-SVAL TAXONOMY-NODE PARENTS NODE)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ PARENT (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:SETQ
      TOTALANCESTORS
      (CL:+
       TOTALANCESTORS
       (CLSYS-SVAL TAXONOMY-NODE TOTAL-ANCESTORS PARENT)))))
   (CL:SETF
    (CLSYS-SVAL TAXONOMY-NODE TOTAL-ANCESTORS NODE)
    (CL:1+ TOTALANCESTORS))
   (CL:LET*
    ((CHILD NULL) (ITER-002 (CLSYS-SVAL TAXONOMY-NODE CHILDREN NODE)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-002 NIL))
     DO
     (CL:PROGN
      (CL:SETQ CHILD (CLSYS-SVAL CONS VALUE ITER-002))
      (CL:SETQ ITER-002 (CLSYS-SVAL CONS REST ITER-002)))
     (COMPUTE-TOTAL-ANCESTORS CHILD))))
  :VOID)

;;; (DEFUN ADD-NODE-TO-GRAPH ...)

(CL:DEFUN ADD-NODE-TO-GRAPH (GRAPH NODE PARENT)
  (CL:WHEN
   (CL:EQ PARENT NULL)
   (CL:SETF
    (CLSYS-SVAL TAXONOMY-GRAPH ROOTS GRAPH)
    (CONS NODE (CLSYS-SVAL TAXONOMY-GRAPH ROOTS GRAPH)))
   (CL:WHEN
    (CL:EQ (CLSYS-SVAL TAXONOMY-GRAPH INCREMENTAL-MODE? GRAPH) 1)
    (CL:LET*
     ((INTERVAL (CREATE-NEXT-POSTORDER-INTERVAL GRAPH)))
     (CL:SETF
      (CLSYS-SVAL TAXONOMY-NODE FIRST-INTERVAL-LOWER-BOUND NODE)
      (CLSYS-SVAL INTERVAL LOWER-BOUND INTERVAL))
     (CL:SETF
      (CLSYS-SVAL TAXONOMY-NODE FIRST-INTERVAL-UPPER-BOUND NODE)
      (CLSYS-SVAL INTERVAL UPPER-BOUND INTERVAL))
     (CL:SETF (CLSYS-SVAL TAXONOMY-NODE INITIAL-INTERVAL NODE) INTERVAL)
     (CL:SETF
      (CLSYS-SVAL TAXONOMY-NODE LABEL NODE)
      (CLSYS-SVAL TAXONOMY-GRAPH LARGEST-POSTORDER-NUMBER GRAPH))))
   (CL:RETURN-FROM ADD-NODE-TO-GRAPH))
  (LINK-NODES GRAPH PARENT NODE)
  :VOID)

;;; (DEFUN (CREATE-AND-INTERN-NODE TAXONOMY-NODE) ...)

(CL:DEFUN CREATE-AND-INTERN-NODE (GRAPH PARENT NATIVEOBJECT)
  (CL:LET*
   ((SELF-001 (NEW-TAXONOMY-NODE)))
   (CL:SETF (CLSYS-SVAL TAXONOMY-NODE NATIVE-OBJECT SELF-001) NATIVEOBJECT)
   (CL:LET*
    ((NODE SELF-001))
    (ADD-NODE-TO-GRAPH GRAPH NODE PARENT)
    (CL:RETURN-FROM CREATE-AND-INTERN-NODE NODE)))
  :VOID)

;;; (DEFUN REMOVE-NODE-FROM-GRAPH ...)

(CL:DEFUN REMOVE-NODE-FROM-GRAPH (GRAPH NODE)
  (CL:LET*
   ((PARENTSCOPY (COPY-CONS-LIST (CLSYS-SVAL TAXONOMY-NODE PARENTS NODE)))
    (CHILDRENCOPY (COPY-CONS-LIST (CLSYS-SVAL TAXONOMY-NODE CHILDREN NODE))))
   (CL:LET*
    ((PARENT NULL) (ITER-001 PARENTSCOPY))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ PARENT (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (REMOVE-LINK GRAPH PARENT NODE)))
   (CL:LET*
    ((CHILD NULL) (ITER-002 CHILDRENCOPY))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-002 NIL))
     DO
     (CL:PROGN
      (CL:SETQ CHILD (CLSYS-SVAL CONS VALUE ITER-002))
      (CL:SETQ ITER-002 (CLSYS-SVAL CONS REST ITER-002)))
     (REMOVE-LINK GRAPH NODE CHILD)))
   (CL:SETF (CLSYS-SVAL TAXONOMY-NODE INTERVALS NODE) NIL)
   (CL:SETF (CLSYS-SVAL TAXONOMY-NODE LABEL NODE) DELETED-LABEL)
   (CL:WHEN
    (CL:EQ (MEMBER? (CLSYS-SVAL TAXONOMY-GRAPH ROOTS GRAPH) NODE) 1)
    (CL:SETF
     (CLSYS-SVAL TAXONOMY-GRAPH ROOTS GRAPH)
     (REMOVE (CLSYS-SVAL TAXONOMY-GRAPH ROOTS GRAPH) NODE))))
  :VOID)

;;; (DEFUN REMOVE-LINK ...)

(CL:DEFUN REMOVE-LINK (GRAPH PARENT CHILD)
  (CL:WHEN
   (CL:EQ (MEMBER? (CLSYS-SVAL TAXONOMY-NODE CHILDREN PARENT) CHILD) 0)
   (CL:ERROR "remove-link: `~A' and `~A' aren't linked" PARENT CHILD)
   (CL:RETURN-FROM REMOVE-LINK))
  (CL:LET*
   ((TREELINK?
     (MEMBER? (CLSYS-SVAL TAXONOMY-NODE TREE-CHILDREN PARENT) CHILD)))
   (CL:SETF
    (CLSYS-SVAL TAXONOMY-NODE CHILDREN PARENT)
    (REMOVE (CLSYS-SVAL TAXONOMY-NODE CHILDREN PARENT) CHILD))
   (CL:WHEN
    (CL:EQ TREELINK? 1)
    (CL:SETF
     (CLSYS-SVAL TAXONOMY-NODE TREE-CHILDREN PARENT)
     (REMOVE (CLSYS-SVAL TAXONOMY-NODE TREE-CHILDREN PARENT) CHILD)))
   (CL:SETF
    (CLSYS-SVAL TAXONOMY-NODE PARENTS CHILD)
    (REMOVE (CLSYS-SVAL TAXONOMY-NODE PARENTS CHILD) PARENT))
   (CL:WHEN
    (CL:EQ (CLSYS-SVAL TAXONOMY-NODE PARENTS CHILD) NIL)
    (CL:SETF
     (CLSYS-SVAL TAXONOMY-GRAPH ROOTS GRAPH)
     (CONS CHILD (CLSYS-SVAL TAXONOMY-GRAPH ROOTS GRAPH))))
   (CL:WHEN
    (CL:EQ (CLSYS-SVAL TAXONOMY-GRAPH INCREMENTAL-MODE? GRAPH) 1)
    (CL:SETF
     (CLSYS-SVAL TAXONOMY-NODE INTERVALS PARENT)
     (CONS (CLSYS-SVAL TAXONOMY-NODE INITIAL-INTERVAL PARENT) NIL))
    (CL:LET*
     ((CHILD NULL) (ITER-001 (CLSYS-SVAL TAXONOMY-NODE CHILDREN PARENT)))
     (CL:LOOP
      WHILE
      (CL:NOT (CL:EQ ITER-001 NIL))
      DO
      (CL:PROGN
       (CL:SETQ CHILD (CLSYS-SVAL CONS VALUE ITER-001))
       (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
      (CL:LET*
       ((INTERVAL NULL) (ITER-002 (CLSYS-SVAL TAXONOMY-NODE INTERVALS CHILD)))
       (CL:LOOP
        WHILE
        (CL:NOT (CL:EQ ITER-002 NIL))
        DO
        (CL:PROGN
         (CL:SETQ INTERVAL (CLSYS-SVAL CONS VALUE ITER-002))
         (CL:SETQ ITER-002 (CLSYS-SVAL CONS REST ITER-002)))
        (PROPOGATE-FOREIGN-INTERVAL GRAPH INTERVAL PARENT)))))))
  :VOID)

;;; (DEFUN PRINT-GRAPH-TREE ...)

(CL:DEFUN PRINT-GRAPH-TREE (NODE INDENT STREAM)
  (CL:LET*
   ((I NULL)
    (ITER-001 1)
    (UPPER-BOUND-001 INDENT)
    (UNBOUNDED?-001 (NULL? UPPER-BOUND-001)))
   (CL:LOOP
    WHILE
    (CL:OR (CL:EQ UNBOUNDED?-001 1) (CL:<= ITER-001 UPPER-BOUND-001))
    DO
    (CL:PROGN (CL:SETQ I ITER-001) (CL:SETQ ITER-001 (CL:1+ ITER-001)))
    (CL:WRITE-STRING " " (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM))))
  (CL:LET
   ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
   (PRINT-OBJECT NODE %%STREAM)
   (CL:TERPRI %%STREAM)
   (CL:FORCE-OUTPUT %%STREAM))
  (CL:LET*
   ((CHILD NULL) (ITER-002 (CLSYS-SVAL TAXONOMY-NODE CHILDREN NODE)))
   (CL:LOOP
    WHILE
    (CL:NOT (CL:EQ ITER-002 NIL))
    DO
    (CL:PROGN
     (CL:SETQ CHILD (CLSYS-SVAL CONS VALUE ITER-002))
     (CL:SETQ ITER-002 (CLSYS-SVAL CONS REST ITER-002)))
    (PRINT-GRAPH-TREE CHILD (CL:+ INDENT 2) STREAM)))
  :VOID)

;;; (DEFUN PRINT-GRAPH ...)

(CL:DEFUN PRINT-GRAPH (GRAPH STREAM)
  (CL:LET*
   ((ROOT NULL) (ITER-001 (CLSYS-SVAL TAXONOMY-GRAPH ROOTS GRAPH)))
   (CL:LOOP
    WHILE
    (CL:NOT (CL:EQ ITER-001 NIL))
    DO
    (CL:PROGN
     (CL:SETQ ROOT (CLSYS-SVAL CONS VALUE ITER-001))
     (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
    (PRINT-GRAPH-TREE ROOT 0 STREAM)
    (CL:LET
     ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
     (CL:TERPRI %%STREAM)
     (CL:FORCE-OUTPUT %%STREAM))))
  :VOID)

;;; (DEFUN PRINT-SPANNING-TREE ...)

(CL:DEFUN PRINT-SPANNING-TREE (NODE INDENT STREAM)
  (CL:LET*
   ((I NULL)
    (ITER-001 1)
    (UPPER-BOUND-001 INDENT)
    (UNBOUNDED?-001 (NULL? UPPER-BOUND-001)))
   (CL:LOOP
    WHILE
    (CL:OR (CL:EQ UNBOUNDED?-001 1) (CL:<= ITER-001 UPPER-BOUND-001))
    DO
    (CL:PROGN (CL:SETQ I ITER-001) (CL:SETQ ITER-001 (CL:1+ ITER-001)))
    (CL:WRITE-STRING " " (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM))))
  (CL:LET
   ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
   (PRINT-OBJECT NODE %%STREAM)
   (CL:TERPRI %%STREAM)
   (CL:FORCE-OUTPUT %%STREAM))
  (CL:LET*
   ((CHILD NULL) (ITER-002 (CLSYS-SVAL TAXONOMY-NODE TREE-CHILDREN NODE)))
   (CL:LOOP
    WHILE
    (CL:NOT (CL:EQ ITER-002 NIL))
    DO
    (CL:PROGN
     (CL:SETQ CHILD (CLSYS-SVAL CONS VALUE ITER-002))
     (CL:SETQ ITER-002 (CLSYS-SVAL CONS REST ITER-002)))
    (PRINT-SPANNING-TREE CHILD (CL:+ INDENT 2) STREAM)))
  :VOID)

;;; (DEFUN PRINT-FOREST ...)

(CL:DEFUN PRINT-FOREST (GRAPH STREAM)
  (CL:LET*
   ((ROOT NULL) (ITER-001 (CLSYS-SVAL TAXONOMY-GRAPH ROOTS GRAPH)))
   (CL:LOOP
    WHILE
    (CL:NOT (CL:EQ ITER-001 NIL))
    DO
    (CL:PROGN
     (CL:SETQ ROOT (CLSYS-SVAL CONS VALUE ITER-001))
     (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
    (PRINT-SPANNING-TREE ROOT 0 STREAM)
    (CL:LET
     ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STREAM)))
     (CL:TERPRI %%STREAM)
     (CL:FORCE-OUTPUT %%STREAM))))
  :VOID)

;;; (DEFUN (CREATE-INTERVAL INTERVAL) ...)

(CL:DEFUN CREATE-INTERVAL (NODE)
  (CL:LET*
   ((INTERVAL (NEW-INTERVAL)))
   (CL:SETF
    (CLSYS-SVAL TAXONOMY-NODE INTERVALS NODE)
    (CONS INTERVAL (CLSYS-SVAL TAXONOMY-NODE INTERVALS NODE)))
   (CL:RETURN-FROM CREATE-INTERVAL INTERVAL))
  :VOID)

;;; (DEFUN CLEAR-TREE-LABELS ...)

(CL:DEFUN CLEAR-TREE-LABELS (NODE)
  (CL:SETF (CLSYS-SVAL TAXONOMY-NODE LABEL NODE) NULL-INTEGER)
  (CL:LET*
   ((CHILD NULL) (ITER-001 (CLSYS-SVAL TAXONOMY-NODE CHILDREN NODE)))
   (CL:LOOP
    WHILE
    (CL:NOT (CL:EQ ITER-001 NIL))
    DO
    (CL:PROGN
     (CL:SETQ CHILD (CLSYS-SVAL CONS VALUE ITER-001))
     (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
    (CLEAR-TREE-LABELS CHILD)))
  :VOID)

;;; (DEFUN CLEAR-TREE ...)

(CL:DEFUN CLEAR-TREE (NODE)
  (CL:SETF (CLSYS-SVAL TAXONOMY-NODE LABEL NODE) NULL-INTEGER)
  (CL:SETF
   (CLSYS-SVAL TAXONOMY-NODE FIRST-INTERVAL-LOWER-BOUND NODE)
   NULL-INTEGER)
  (CL:SETF
   (CLSYS-SVAL TAXONOMY-NODE FIRST-INTERVAL-UPPER-BOUND NODE)
   NULL-INTEGER)
  (CL:SETF (CLSYS-SVAL TAXONOMY-NODE INTERVALS NODE) NIL)
  (CL:LET*
   ((CHILD NULL) (ITER-001 (CLSYS-SVAL TAXONOMY-NODE CHILDREN NODE)))
   (CL:LOOP
    WHILE
    (CL:NOT (CL:EQ ITER-001 NIL))
    DO
    (CL:PROGN
     (CL:SETQ CHILD (CLSYS-SVAL CONS VALUE ITER-001))
     (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
    (CLEAR-TREE CHILD)))
  :VOID)

;;; (DEFCONSTANT MARKER-LABEL ...)

(CL:DEFVAR MARKER-LABEL -99
  "Dummy label used for marking a node")

;;; (DEFCONSTANT DELETED-LABEL ...)

(CL:DEFVAR DELETED-LABEL -99
  "Label used for marking deleted nodes")

;;; (DEFUN (LABELED? BOOLEAN) ...)

(CL:DEFUN LABELED? (NODE)
  (CL:RETURN-FROM LABELED? (DEFINED? (CLSYS-SVAL TAXONOMY-NODE LABEL NODE)))
  :VOID)

;;; (DEFUN CLEAR-GRAPH-TREE ...)

(CL:DEFUN CLEAR-GRAPH-TREE (NODE)
  (CL:WHEN (CL:EQ (LABELED? NODE) 0) (CL:RETURN-FROM CLEAR-GRAPH-TREE))
  (CL:SETF (CLSYS-SVAL TAXONOMY-NODE LABEL NODE) NULL-INTEGER)
  (CL:SETF (CLSYS-SVAL TAXONOMY-NODE INTERVALS NODE) NIL)
  (CL:SETF (CLSYS-SVAL TAXONOMY-NODE TREE-CHILDREN NODE) NIL)
  (CL:LET*
   ((CHILD NULL) (ITER-001 (CLSYS-SVAL TAXONOMY-NODE CHILDREN NODE)))
   (CL:LOOP
    WHILE
    (CL:NOT (CL:EQ ITER-001 NIL))
    DO
    (CL:PROGN
     (CL:SETQ CHILD (CLSYS-SVAL CONS VALUE ITER-001))
     (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
    (CLEAR-GRAPH-TREE CHILD)))
  :VOID)

;;; (DEFUN CLEAR-GRAPH ...)

(CL:DEFUN CLEAR-GRAPH (GRAPH)
  (CL:LET*
   ((ROOT NULL) (ITER-001 (CLSYS-SVAL TAXONOMY-GRAPH ROOTS GRAPH)))
   (CL:LOOP
    WHILE
    (CL:NOT (CL:EQ ITER-001 NIL))
    DO
    (CL:PROGN
     (CL:SETQ ROOT (CLSYS-SVAL CONS VALUE ITER-001))
     (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
    (CLEAR-GRAPH-TREE ROOT)))
  :VOID)

;;; (DEFUN (INTERVAL-SUBSUMES-INTEGER? BOOLEAN) ...)

(CL:DEFUN INTERVAL-SUBSUMES-INTEGER? (INTERVAL N)
  (CL:RETURN-FROM
   INTERVAL-SUBSUMES-INTEGER?
   (CL:IF
    (CL:AND
     (CL:>= N (CLSYS-SVAL INTERVAL LOWER-BOUND INTERVAL))
     (CL:<= N (CLSYS-SVAL INTERVAL UPPER-BOUND INTERVAL)))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN (TAXONOMY-NODE-SUBCLASS-OF? BOOLEAN) ...)

(CL:DEFUN TAXONOMY-NODE-SUBCLASS-OF? (DESCENDANT ANCESTOR)
  (CL:LET*
   ((DESCENDANTLABEL (CLSYS-SVAL TAXONOMY-NODE LABEL DESCENDANT)))
   (CL:WHEN
    (CL:AND
     (CL:>=
      DESCENDANTLABEL
      (CLSYS-SVAL TAXONOMY-NODE FIRST-INTERVAL-LOWER-BOUND ANCESTOR))
     (CL:<=
      DESCENDANTLABEL
      (CLSYS-SVAL TAXONOMY-NODE FIRST-INTERVAL-UPPER-BOUND ANCESTOR)))
    (CL:RETURN-FROM TAXONOMY-NODE-SUBCLASS-OF? TRUE))
   (CL:LET*
    ((INTERVAL NULL) (ITER-001 (CLSYS-SVAL TAXONOMY-NODE INTERVALS ANCESTOR)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ INTERVAL (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:WHEN
      (CL:AND
       (CL:>= DESCENDANTLABEL (CLSYS-SVAL INTERVAL LOWER-BOUND INTERVAL))
       (CL:<= DESCENDANTLABEL (CLSYS-SVAL INTERVAL UPPER-BOUND INTERVAL)))
      (CL:RETURN-FROM TAXONOMY-NODE-SUBCLASS-OF? TRUE))))
   (CL:RETURN-FROM TAXONOMY-NODE-SUBCLASS-OF? FALSE))
  :VOID)

;;; (DEFUN OPTIMIZE-INTERVALS ...)

(CL:DEFUN OPTIMIZE-INTERVALS (GRAPH)
  (CL:LET*
   ((FIRSTINTERVAL NULL))
   (CL:LET*
    ((NODE NULL) (ITER-001 (ALL-NODES GRAPH)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ NODE (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:SETQ
      FIRSTINTERVAL
      (CLSYS-SVAL CONS VALUE (CLSYS-SVAL TAXONOMY-NODE INTERVALS NODE)))
     (CL:SETF
      (CLSYS-SVAL TAXONOMY-NODE FIRST-INTERVAL-LOWER-BOUND NODE)
      (CLSYS-SVAL INTERVAL LOWER-BOUND FIRSTINTERVAL))
     (CL:SETF
      (CLSYS-SVAL TAXONOMY-NODE FIRST-INTERVAL-UPPER-BOUND NODE)
      (CLSYS-SVAL INTERVAL UPPER-BOUND FIRSTINTERVAL))
     (CL:SETF
      (CLSYS-SVAL TAXONOMY-NODE INTERVALS NODE)
      (CLSYS-SVAL CONS REST (CLSYS-SVAL TAXONOMY-NODE INTERVALS NODE))))))
  :VOID)

;;; (DEFUN (SLOW-TAXONOMY-NODE-SUBCLASS-OF? BOOLEAN) ...)

(CL:DEFUN SLOW-TAXONOMY-NODE-SUBCLASS-OF? (DESCENDANT ANCESTOR)
  (CL:WHEN
   (CL:EQ DESCENDANT ANCESTOR)
   (CL:RETURN-FROM SLOW-TAXONOMY-NODE-SUBCLASS-OF? TRUE))
  (CL:LET*
   ((PARENT NULL) (ITER-001 (CLSYS-SVAL TAXONOMY-NODE PARENTS DESCENDANT)))
   (CL:LOOP
    WHILE
    (CL:NOT (CL:EQ ITER-001 NIL))
    DO
    (CL:PROGN
     (CL:SETQ PARENT (CLSYS-SVAL CONS VALUE ITER-001))
     (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
    (CL:WHEN
     (CL:EQ (SLOW-TAXONOMY-NODE-SUBCLASS-OF? PARENT ANCESTOR) 1)
     (CL:RETURN-FROM SLOW-TAXONOMY-NODE-SUBCLASS-OF? TRUE))))
  (CL:RETURN-FROM SLOW-TAXONOMY-NODE-SUBCLASS-OF? FALSE)
  :VOID)

;;; (DEFUN (MOST-GENERAL-NODES (CONS OF TAXONOMY-NODE)) ...)

(CL:DEFUN MOST-GENERAL-NODES (NODES)
  (CL:LET*
   ((NODE1HASPARENT FALSE) (RESULT NIL))
   (CL:LET*
    ((NODE1 NULL) (ITER-001 NODES))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ NODE1 (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:SETQ NODE1HASPARENT FALSE)
     (CL:LET*
      ((NODE2 NULL) (ITER-002 NODES))
      (CL:LOOP
       WHILE
       (CL:NOT (CL:EQ ITER-002 NIL))
       DO
       (CL:PROGN
        (CL:SETQ NODE2 (CLSYS-SVAL CONS VALUE ITER-002))
        (CL:SETQ ITER-002 (CLSYS-SVAL CONS REST ITER-002)))
       (CL:WHEN
        (CL:AND
         (CL:NOT (CL:EQ NODE1 NODE2))
         (CL:EQ (TAXONOMY-NODE-SUBCLASS-OF? NODE1 NODE2) 1))
        (CL:SETQ NODE1HASPARENT TRUE)
        (CL:RETURN))))
     (CL:WHEN (CL:EQ NODE1HASPARENT 0) (CL:SETQ RESULT (CONS NODE1 RESULT)))))
   (CL:RETURN-FROM MOST-GENERAL-NODES RESULT))
  :VOID)

;;; (DEFSPECIAL *POSTORDER-NUMBER* ...)

(CL:DEFVAR *POSTORDER-NUMBER* NULL-INTEGER)

(CL:DEFUN READ-*POSTORDER-NUMBER* ()
  (CL:RETURN-FROM READ-*POSTORDER-NUMBER* *POSTORDER-NUMBER*)
  :VOID)

(CL:DEFUN WRITE-*POSTORDER-NUMBER* (VALUE)
  (CL:SETQ *POSTORDER-NUMBER* VALUE)
  (CL:RETURN-FROM WRITE-*POSTORDER-NUMBER* VALUE)
  :VOID)

;;; (DEFUN HELP-POSTORDER-LABEL-TREE ...)

(CL:DEFUN HELP-POSTORDER-LABEL-TREE (NODE)
  (CL:LET*
   ((CHILD NULL) (ITER-001 (CLSYS-SVAL TAXONOMY-NODE TREE-CHILDREN NODE)))
   (CL:LOOP
    WHILE
    (CL:NOT (CL:EQ ITER-001 NIL))
    DO
    (CL:PROGN
     (CL:SETQ CHILD (CLSYS-SVAL CONS VALUE ITER-001))
     (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
    (HELP-POSTORDER-LABEL-TREE CHILD)))
  (CL:SETQ *POSTORDER-NUMBER* (CL:+ *POSTORDER-NUMBER* *NUMBERING-INTERVAL*))
  (CL:SETF (CLSYS-SVAL TAXONOMY-NODE LABEL NODE) *POSTORDER-NUMBER*)
  :VOID)

;;; (DEFUN POSTORDER-LABEL-TREE ...)

(CL:DEFUN POSTORDER-LABEL-TREE (ROOT)
  (CL:LET*
   ((*POSTORDER-NUMBER* 0))
   (CL:DECLARE (CL:SPECIAL *POSTORDER-NUMBER*))
   (HELP-POSTORDER-LABEL-TREE ROOT))
  :VOID)

;;; (DEFUN (HELP-CREATE-TREE-INTERVALS INTEGER) ...)

(CL:DEFUN HELP-CREATE-TREE-INTERVALS (SELF)
  (CL:LET*
   ((NEWINTERVAL (CREATE-INTERVAL SELF))
    (MINCHILDLABEL NULL-INTEGER)
    (MYLABEL NULL-INTEGER)
    (PREVPOSTNUMBER *POSTORDER-NUMBER*))
   (CL:WHEN
    (CL:NOT (CL:EQ (CLSYS-SVAL TAXONOMY-NODE INITIAL-INTERVAL SELF) NULL))
    (CL:ERROR
     "`help-create-tree-intervals': Initial interval already defined"))
   (CL:SETF (CLSYS-SVAL TAXONOMY-NODE INITIAL-INTERVAL SELF) NEWINTERVAL)
   (CL:WHEN
    (CL:NOT (CL:EQ (CLSYS-SVAL TAXONOMY-NODE TREE-CHILDREN SELF) NIL))
    (CL:SETQ
     MINCHILDLABEL
     (HELP-CREATE-TREE-INTERVALS
      (FIRST (CLSYS-SVAL TAXONOMY-NODE TREE-CHILDREN SELF)))))
   (CL:LET*
    ((CHILD NULL)
     (ITER-001
      (CLSYS-SVAL CONS REST (CLSYS-SVAL TAXONOMY-NODE TREE-CHILDREN SELF))))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ CHILD (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (HELP-CREATE-TREE-INTERVALS CHILD)))
   (CL:SETQ *POSTORDER-NUMBER* (CL:+ *POSTORDER-NUMBER* *NUMBERING-INTERVAL*))
   (CL:SETQ MYLABEL *POSTORDER-NUMBER*)
   (CL:WHEN
    (CL:EQ (CLSYS-SVAL TAXONOMY-NODE TREE-CHILDREN SELF) NIL)
    (CL:SETQ MINCHILDLABEL (CL:1+ PREVPOSTNUMBER)))
   (CL:SETF (CLSYS-SVAL INTERVAL LOWER-BOUND NEWINTERVAL) MINCHILDLABEL)
   (CL:SETF (CLSYS-SVAL INTERVAL UPPER-BOUND NEWINTERVAL) MYLABEL)
   (CL:SETF (CLSYS-SVAL TAXONOMY-NODE LABEL SELF) MYLABEL)
   (CL:RETURN-FROM HELP-CREATE-TREE-INTERVALS MINCHILDLABEL))
  :VOID)

;;; (DEFUN CREATE-INITIAL-INTERVALS ...)

(CL:DEFUN CREATE-INITIAL-INTERVALS (GRAPH)
  (CL:LET*
   ((*POSTORDER-NUMBER* 0))
   (CL:DECLARE (CL:SPECIAL *POSTORDER-NUMBER*))
   (CL:LET*
    ((ROOT NULL) (ITER-001 (CLSYS-SVAL TAXONOMY-GRAPH ROOTS GRAPH)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ ROOT (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (HELP-CREATE-TREE-INTERVALS ROOT)))
   (CL:SETF
    (CLSYS-SVAL TAXONOMY-GRAPH LARGEST-POSTORDER-NUMBER GRAPH)
    *POSTORDER-NUMBER*))
  :VOID)

;;; (DEFUN (INTERVAL-SUBSUMES-INTERVAL? BOOLEAN) ...)

(CL:DEFUN INTERVAL-SUBSUMES-INTERVAL? (PARENT CHILD)
  (CL:RETURN-FROM
   INTERVAL-SUBSUMES-INTERVAL?
   (CL:IF
    (CL:AND
     (CL:<=
      (CLSYS-SVAL INTERVAL UPPER-BOUND CHILD)
      (CLSYS-SVAL INTERVAL UPPER-BOUND PARENT))
     (CL:>=
      (CLSYS-SVAL INTERVAL LOWER-BOUND CHILD)
      (CLSYS-SVAL INTERVAL LOWER-BOUND PARENT)))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN (ADJACENT? BOOLEAN) ...)

(CL:DEFUN ADJACENT? (LEFTINTERVAL RIGHTINTERVAL)
  (CL:RETURN-FROM
   ADJACENT?
   (EQ?
    (CL:1- (CLSYS-SVAL INTERVAL LOWER-BOUND RIGHTINTERVAL))
    (CLSYS-SVAL INTERVAL UPPER-BOUND LEFTINTERVAL)))
  :VOID)

;;; (DEFUN (MERGE-INTERVALS INTERVAL) ...)

(CL:DEFUN MERGE-INTERVALS (LEFTINTERVAL RIGHTINTERVAL)
  (CL:LET*
   ((SELF-001 (NEW-INTERVAL)))
   (CL:SETF
    (CLSYS-SVAL INTERVAL LOWER-BOUND SELF-001)
    (CLSYS-SVAL INTERVAL LOWER-BOUND LEFTINTERVAL))
   (CL:SETF
    (CLSYS-SVAL INTERVAL UPPER-BOUND SELF-001)
    (CLSYS-SVAL INTERVAL UPPER-BOUND RIGHTINTERVAL))
   (CL:LET* ((VALUE-001 SELF-001)) (CL:RETURN-FROM MERGE-INTERVALS VALUE-001)))
  :VOID)

;;; (DEFUN (ALLOCATE-NEW-INTERVAL INTERVAL) ...)

(CL:DEFUN ALLOCATE-NEW-INTERVAL (PARENT)
  (CL:LET*
   ((PARENTINTERVAL (CLSYS-SVAL TAXONOMY-NODE INITIAL-INTERVAL PARENT)))
   (CL:WHEN
    (CL:EQ (CLSYS-SVAL TAXONOMY-NODE TREE-CHILDREN PARENT) NIL)
    (CL:WHEN
     (CL:=
      (CLSYS-SVAL INTERVAL LOWER-BOUND PARENTINTERVAL)
      (CLSYS-SVAL INTERVAL UPPER-BOUND PARENTINTERVAL))
     (CL:RETURN-FROM ALLOCATE-NEW-INTERVAL NULL))
    (CL:LET*
     ((SELF-001 (NEW-INTERVAL)))
     (CL:SETF
      (CLSYS-SVAL INTERVAL LOWER-BOUND SELF-001)
      (CLSYS-SVAL INTERVAL LOWER-BOUND PARENTINTERVAL))
     (CL:SETF
      (CLSYS-SVAL INTERVAL UPPER-BOUND SELF-001)
      (CL:-
       (CLSYS-SVAL INTERVAL UPPER-BOUND PARENTINTERVAL)
       (FLOOR (CL:/ *NUMBERING-INTERVAL* 2.0))))
     (CL:LET*
      ((VALUE-001 SELF-001))
      (CL:RETURN-FROM ALLOCATE-NEW-INTERVAL VALUE-001))))
   (CL:LET*
    ((RIGHTCHILD (LAST (CLSYS-SVAL TAXONOMY-NODE TREE-CHILDREN PARENT)))
     (RIGHTCHILDINTERVAL
      (CLSYS-SVAL TAXONOMY-NODE INITIAL-INTERVAL RIGHTCHILD)))
    (CL:WHEN
     (CL:>=
      (CLSYS-SVAL INTERVAL UPPER-BOUND RIGHTCHILDINTERVAL)
      (CL:1- (CLSYS-SVAL INTERVAL UPPER-BOUND PARENTINTERVAL)))
     (CL:RETURN-FROM ALLOCATE-NEW-INTERVAL NULL))
    (CL:LET*
     ((SELF-002 (NEW-INTERVAL)))
     (CL:SETF
      (CLSYS-SVAL INTERVAL LOWER-BOUND SELF-002)
      (CL:1+ (CLSYS-SVAL INTERVAL UPPER-BOUND RIGHTCHILDINTERVAL)))
     (CL:SETF
      (CLSYS-SVAL INTERVAL UPPER-BOUND SELF-002)
      (CEILING
       (CL:/
        (CL:+
         (CLSYS-SVAL INTERVAL UPPER-BOUND PARENTINTERVAL)
         (CLSYS-SVAL INTERVAL UPPER-BOUND RIGHTCHILDINTERVAL))
        2.0)))
     (CL:LET*
      ((VALUE-002 SELF-002))
      (CL:RETURN-FROM ALLOCATE-NEW-INTERVAL VALUE-002)))))
  :VOID)

;;; (DEFUN (ALL-INTERVALS (ITERATOR OF INTERVAL)) ...)

(CL:DEFUN ALL-INTERVALS (NODE)
  (CL:LET*
   ((ITERATOR (NEW-ALL-PURPOSE-ITERATOR)))
   (CL:SETF
    (CLSYS-SVAL ALL-PURPOSE-ITERATOR ITERATOR-CONS-LIST ITERATOR)
    (COPY-CONS-LIST (CLSYS-SVAL TAXONOMY-NODE INTERVALS NODE)))
   (CL:WHEN
    (CL:>= (CLSYS-SVAL TAXONOMY-NODE FIRST-INTERVAL-LOWER-BOUND NODE) 0)
    (CL:LET*
     ((SELF-002 (NEW-INTERVAL)))
     (CL:SETF
      (CLSYS-SVAL INTERVAL LOWER-BOUND SELF-002)
      (CLSYS-SVAL TAXONOMY-NODE FIRST-INTERVAL-LOWER-BOUND NODE))
     (CL:SETF
      (CLSYS-SVAL INTERVAL UPPER-BOUND SELF-002)
      (CLSYS-SVAL TAXONOMY-NODE FIRST-INTERVAL-UPPER-BOUND NODE))
     (CL:SETF
      (CLSYS-SVAL ALL-PURPOSE-ITERATOR ITERATOR-OBJECT ITERATOR)
      SELF-002)))
   (CL:SETF
    (CLSYS-SVAL ALL-PURPOSE-ITERATOR ITERATOR-NEXT-CODE ITERATOR)
    (CL:FUNCTION ALL-INTERVALS-NEXT?))
   (CL:SETF (CLSYS-SVAL ALL-PURPOSE-ITERATOR FIRST-ITERATION? ITERATOR) TRUE)
   (CL:RETURN-FROM ALL-INTERVALS ITERATOR))
  :VOID)

;;; (DEFUN (ALL-INTERVALS-NEXT? BOOLEAN) ...)

(CL:DEFUN ALL-INTERVALS-NEXT? (SELF)
  (CL:WHEN
   (CL:NOT
    (CL:EQ (CLSYS-SVAL ALL-PURPOSE-ITERATOR ITERATOR-OBJECT SELF) NULL))
   (CL:SETF
    (CLSYS-SVAL ALL-PURPOSE-ITERATOR VALUE SELF)
    (CLSYS-SVAL ALL-PURPOSE-ITERATOR ITERATOR-OBJECT SELF))
   (CL:SETF (CLSYS-SVAL ALL-PURPOSE-ITERATOR ITERATOR-OBJECT SELF) NULL)
   (CL:RETURN-FROM ALL-INTERVALS-NEXT? TRUE))
  (CL:IF
   (CL:EQ (CLSYS-SVAL ALL-PURPOSE-ITERATOR FIRST-ITERATION? SELF) 1)
   (CL:SETF (CLSYS-SVAL ALL-PURPOSE-ITERATOR FIRST-ITERATION? SELF) FALSE)
   (CL:SETF
    (CLSYS-SVAL ALL-PURPOSE-ITERATOR ITERATOR-CONS-LIST SELF)
    (CLSYS-SVAL
     CONS
     REST
     (CLSYS-SVAL ALL-PURPOSE-ITERATOR ITERATOR-CONS-LIST SELF))))
  (CL:SETF
   (CLSYS-SVAL ALL-PURPOSE-ITERATOR VALUE SELF)
   (CLSYS-SVAL
    CONS
    VALUE
    (CLSYS-SVAL ALL-PURPOSE-ITERATOR ITERATOR-CONS-LIST SELF)))
  (CL:RETURN-FROM
   ALL-INTERVALS-NEXT?
   (NON-EMPTY? (CLSYS-SVAL ALL-PURPOSE-ITERATOR ITERATOR-CONS-LIST SELF)))
  :VOID)

;;; (DEFUN REMOVE-INTERVAL ...)

(CL:DEFUN REMOVE-INTERVAL (NODE INTERVAL)
  (CL:IF
   (CL:AND
    (CL:=
     (CLSYS-SVAL INTERVAL LOWER-BOUND INTERVAL)
     (CLSYS-SVAL TAXONOMY-NODE FIRST-INTERVAL-LOWER-BOUND NODE))
    (CL:=
     (CLSYS-SVAL INTERVAL UPPER-BOUND INTERVAL)
     (CLSYS-SVAL TAXONOMY-NODE FIRST-INTERVAL-UPPER-BOUND NODE)))
   (CL:IF
    (CL:EQ (CLSYS-SVAL TAXONOMY-NODE INTERVALS NODE) NIL)
    (CL:PROGN
     (CL:SETF (CLSYS-SVAL TAXONOMY-NODE FIRST-INTERVAL-LOWER-BOUND NODE) -1)
     (CL:SETF (CLSYS-SVAL TAXONOMY-NODE FIRST-INTERVAL-UPPER-BOUND NODE) -1))
    (CL:PROGN
     (CL:SETF
      (CLSYS-SVAL TAXONOMY-NODE FIRST-INTERVAL-LOWER-BOUND NODE)
      (CLSYS-SVAL
       INTERVAL
       LOWER-BOUND
       (FIRST (CLSYS-SVAL TAXONOMY-NODE INTERVALS NODE))))
     (CL:SETF
      (CLSYS-SVAL TAXONOMY-NODE FIRST-INTERVAL-UPPER-BOUND NODE)
      (CLSYS-SVAL
       INTERVAL
       UPPER-BOUND
       (FIRST (CLSYS-SVAL TAXONOMY-NODE INTERVALS NODE))))
     (CL:SETF
      (CLSYS-SVAL TAXONOMY-NODE INTERVALS NODE)
      (CLSYS-SVAL CONS REST (CLSYS-SVAL TAXONOMY-NODE INTERVALS NODE)))))
   (CL:SETF
    (CLSYS-SVAL TAXONOMY-NODE INTERVALS NODE)
    (REMOVE (CLSYS-SVAL TAXONOMY-NODE INTERVALS NODE) INTERVAL)))
  :VOID)

;;; (DEFUN INSERT-INTERVAL ...)

(CL:DEFUN INSERT-INTERVAL (GRAPH NODE INTERVAL)
  (CL:IF
   (CL:AND
    (CL:EQ (CLSYS-SVAL TAXONOMY-GRAPH INCREMENTAL-MODE? GRAPH) 1)
    (CL:= (CLSYS-SVAL TAXONOMY-NODE FIRST-INTERVAL-LOWER-BOUND NODE) -1))
   (CL:PROGN
    (CL:SETF
     (CLSYS-SVAL TAXONOMY-NODE FIRST-INTERVAL-LOWER-BOUND NODE)
     (CLSYS-SVAL INTERVAL LOWER-BOUND INTERVAL))
    (CL:SETF
     (CLSYS-SVAL TAXONOMY-NODE FIRST-INTERVAL-UPPER-BOUND NODE)
     (CLSYS-SVAL INTERVAL UPPER-BOUND INTERVAL)))
   (CL:SETF
    (CLSYS-SVAL TAXONOMY-NODE INTERVALS NODE)
    (CONS INTERVAL (CLSYS-SVAL TAXONOMY-NODE INTERVALS NODE))))
  :VOID)

;;; (DEFUN ADD-INTERVAL-TO-NODE ...)

(CL:DEFUN ADD-INTERVAL-TO-NODE (GRAPH INTERVAL NODE)
  (CL:LET*
   ((EXISTINGINTERVAL NULL) (ITER-001 (ALL-INTERVALS NODE)))
   (CL:LOOP
    WHILE
    (CL:EQ (NEXT? ITER-001) 1)
    DO
    (CL:PROGN (CL:SETQ EXISTINGINTERVAL (CLSYS-SVAL ITERATOR VALUE ITER-001)))
    (CL:WHEN
     (CL:EQ (INTERVAL-SUBSUMES-INTERVAL? EXISTINGINTERVAL INTERVAL) 1)
     (CL:RETURN-FROM ADD-INTERVAL-TO-NODE))))
  (CL:LET*
   ((EXISTINGINTERVAL NULL) (ITER-002 (ALL-INTERVALS NODE)))
   (CL:LOOP
    WHILE
    (CL:EQ (NEXT? ITER-002) 1)
    DO
    (CL:PROGN (CL:SETQ EXISTINGINTERVAL (CLSYS-SVAL ITERATOR VALUE ITER-002)))
    (CL:WHEN
     (CL:EQ (INTERVAL-SUBSUMES-INTERVAL? INTERVAL EXISTINGINTERVAL) 1)
     (REMOVE-INTERVAL NODE EXISTINGINTERVAL))
    (CL:WHEN
     (CL:EQ (ADJACENT? EXISTINGINTERVAL INTERVAL) 1)
     (REMOVE-INTERVAL NODE EXISTINGINTERVAL)
     (INSERT-INTERVAL GRAPH NODE (MERGE-INTERVALS EXISTINGINTERVAL INTERVAL))
     (CL:RETURN-FROM ADD-INTERVAL-TO-NODE))
    (CL:WHEN
     (CL:EQ (ADJACENT? INTERVAL EXISTINGINTERVAL) 1)
     (REMOVE-INTERVAL NODE EXISTINGINTERVAL)
     (INSERT-INTERVAL GRAPH NODE (MERGE-INTERVALS INTERVAL EXISTINGINTERVAL))
     (CL:RETURN-FROM ADD-INTERVAL-TO-NODE))))
  (INSERT-INTERVAL GRAPH NODE INTERVAL)
  :VOID)

;;; (DEFUN (CREATE-NEXT-POSTORDER-INTERVAL INTERVAL) ...)

(CL:DEFUN CREATE-NEXT-POSTORDER-INTERVAL (GRAPH)
  (CL:LET*
   ((NEWINTERVAL (NEW-INTERVAL)))
   (CL:SETF
    (CLSYS-SVAL INTERVAL LOWER-BOUND NEWINTERVAL)
    (CL:1+ (CLSYS-SVAL TAXONOMY-GRAPH LARGEST-POSTORDER-NUMBER GRAPH)))
   (CL:SETF
    (CLSYS-SVAL INTERVAL UPPER-BOUND NEWINTERVAL)
    (CL:+
     (CLSYS-SVAL TAXONOMY-GRAPH LARGEST-POSTORDER-NUMBER GRAPH)
     *NUMBERING-INTERVAL*))
   (CL:SETF
    (CLSYS-SVAL TAXONOMY-GRAPH LARGEST-POSTORDER-NUMBER GRAPH)
    (CLSYS-SVAL INTERVAL UPPER-BOUND NEWINTERVAL))
   (CL:RETURN-FROM CREATE-NEXT-POSTORDER-INTERVAL NEWINTERVAL))
  :VOID)

;;; (DEFUN PROPOGATE-FOREIGN-INTERVAL ...)

(CL:DEFUN PROPOGATE-FOREIGN-INTERVAL (GRAPH INTERVAL NODE)
  (ADD-INTERVAL-TO-NODE GRAPH INTERVAL NODE)
  (CL:LET*
   ((PARENT NULL) (ITER-001 (CLSYS-SVAL TAXONOMY-NODE PARENTS NODE)))
   (CL:LOOP
    WHILE
    (CL:NOT (CL:EQ ITER-001 NIL))
    DO
    (CL:PROGN
     (CL:SETQ PARENT (CLSYS-SVAL CONS VALUE ITER-001))
     (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
    (PROPOGATE-FOREIGN-INTERVAL GRAPH INTERVAL PARENT)))
  :VOID)

;;; (DEFUN CREATE-SPANNING-TREE ...)

(CL:DEFUN CREATE-SPANNING-TREE (GRAPH NODE)
  (CL:WHEN (CL:EQ (LABELED? NODE) 1) (CL:RETURN-FROM CREATE-SPANNING-TREE))
  (CL:SETF (CLSYS-SVAL TAXONOMY-NODE LABEL NODE) MARKER-LABEL)
  (CL:LET*
   ((MAXPARENT NULL) (MAXPARENTVALUE NULL-INTEGER))
   (CL:LET*
    ((PARENT NULL) (ITER-001 (CLSYS-SVAL TAXONOMY-NODE PARENTS NODE)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ PARENT (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:WHEN
      (CL:OR
       (CL:EQ (NULL? MAXPARENTVALUE) 1)
       (CL:>
        (CLSYS-SVAL TAXONOMY-NODE TOTAL-ANCESTORS PARENT)
        MAXPARENTVALUE))
      (CL:SETQ MAXPARENT PARENT)
      (CL:SETQ
       MAXPARENTVALUE
       (CLSYS-SVAL TAXONOMY-NODE TOTAL-ANCESTORS PARENT)))))
   (CL:LET*
    ((PARENT NULL) (ITER-002 (CLSYS-SVAL TAXONOMY-NODE PARENTS NODE)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-002 NIL))
     DO
     (CL:PROGN
      (CL:SETQ PARENT (CLSYS-SVAL CONS VALUE ITER-002))
      (CL:SETQ ITER-002 (CLSYS-SVAL CONS REST ITER-002)))
     (CL:IF
      (CL:EQ PARENT MAXPARENT)
      (CL:SETF
       (CLSYS-SVAL TAXONOMY-NODE TREE-CHILDREN PARENT)
       (CONS NODE (CLSYS-SVAL TAXONOMY-NODE TREE-CHILDREN PARENT)))
      (CL:SETF
       (CLSYS-SVAL TAXONOMY-GRAPH BROKEN-LINKS GRAPH)
       (CONS
        (CONS PARENT (CONS NODE NIL))
        (CLSYS-SVAL TAXONOMY-GRAPH BROKEN-LINKS GRAPH))))))
   (CL:LET*
    ((CHILD NULL) (ITER-003 (CLSYS-SVAL TAXONOMY-NODE CHILDREN NODE)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-003 NIL))
     DO
     (CL:PROGN
      (CL:SETQ CHILD (CLSYS-SVAL CONS VALUE ITER-003))
      (CL:SETQ ITER-003 (CLSYS-SVAL CONS REST ITER-003)))
     (CREATE-SPANNING-TREE GRAPH CHILD))))
  :VOID)

;;; (DEFUN CREATE-SPANNING-FOREST ...)

(CL:DEFUN CREATE-SPANNING-FOREST (GRAPH)
  (CLEAR-GRAPH GRAPH)
  (CL:LET*
   ((ROOT NULL) (ITER-001 (CLSYS-SVAL TAXONOMY-GRAPH ROOTS GRAPH)))
   (CL:LOOP
    WHILE
    (CL:NOT (CL:EQ ITER-001 NIL))
    DO
    (CL:PROGN
     (CL:SETQ ROOT (CLSYS-SVAL CONS VALUE ITER-001))
     (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
    (CREATE-SPANNING-TREE GRAPH ROOT)))
  (CREATE-INITIAL-INTERVALS GRAPH)
  (CL:LET*
   ((LINK NULL) (ITER-002 (CLSYS-SVAL TAXONOMY-GRAPH BROKEN-LINKS GRAPH)))
   (CL:LOOP
    WHILE
    (CL:NOT (CL:EQ ITER-002 NIL))
    DO
    (CL:PROGN
     (CL:SETQ LINK (CLSYS-SVAL CONS VALUE ITER-002))
     (CL:SETQ ITER-002 (CLSYS-SVAL CONS REST ITER-002)))
    (PROPOGATE-FOREIGN-INTERVAL
     GRAPH
     (CLSYS-SVAL TAXONOMY-NODE INITIAL-INTERVAL (SECOND LINK))
     (FIRST LINK))))
  (OPTIMIZE-INTERVALS GRAPH)
  (CL:SETF (CLSYS-SVAL TAXONOMY-GRAPH INCREMENTAL-MODE? GRAPH) TRUE)
  :VOID)

(CL:DEFUN STARTUP-TAXONOMIES ()
  (CL:LET*
   ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 2) 1)
    (CL:SETQ
     SYM-TAXONOMIES-*POSTORDER-NUMBER*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "*POSTORDER-NUMBER*" NULL 0)))
   (CL:WHEN (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 6) 1) (FINALIZE-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 7) 1)
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "HELP-COLLECT-ALL-NODES"
        "TAXONOMY-NODE"
        "(DEFUN (HELP-COLLECT-ALL-NODES (CONS OF TAXONOMY-NODE)) ((NODE TAXONOMY-NODE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION HELP-COLLECT-ALL-NODES)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "ALL-NODES"
        "TAXONOMY-GRAPH"
        "(DEFUN (ALL-NODES (CONS OF TAXONOMY-NODE)) ((GRAPH TAXONOMY-GRAPH)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION ALL-NODES)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "HELP-FIND-TAXONOMY-NODE"
        "TAXONOMY-NODE"
        "(DEFUN (HELP-FIND-TAXONOMY-NODE TAXONOMY-NODE) ((NODE TAXONOMY-NODE) (LABEL INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION HELP-FIND-TAXONOMY-NODE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "FIND-TAXONOMY-NODE"
        "TAXONOMY-GRAPH"
        "(DEFUN (FIND-TAXONOMY-NODE TAXONOMY-NODE) ((GRAPH TAXONOMY-GRAPH) (LABEL INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION FIND-TAXONOMY-NODE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "FTN"
        "TAXONOMY-GRAPH"
        "(DEFUN (FTN TAXONOMY-NODE) ((GRAPH TAXONOMY-GRAPH) (LABEL INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION FTN)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CREATE-LINK"
        "TAXONOMY-GRAPH"
        "(DEFUN CREATE-LINK ((GRAPH TAXONOMY-GRAPH) (PARENT TAXONOMY-NODE) (CHILD TAXONOMY-NODE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CREATE-LINK)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "LINK-NODES"
        "TAXONOMY-GRAPH"
        "(DEFUN LINK-NODES ((GRAPH TAXONOMY-GRAPH) (PARENT TAXONOMY-NODE) (CHILD TAXONOMY-NODE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION LINK-NODES)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "COMPUTE-TOTAL-ANCESTORS"
        "TAXONOMY-NODE"
        "(DEFUN COMPUTE-TOTAL-ANCESTORS ((NODE TAXONOMY-NODE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION COMPUTE-TOTAL-ANCESTORS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "ADD-NODE-TO-GRAPH"
        "TAXONOMY-GRAPH"
        "(DEFUN ADD-NODE-TO-GRAPH ((GRAPH TAXONOMY-GRAPH) (NODE TAXONOMY-NODE) (PARENT TAXONOMY-NODE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION ADD-NODE-TO-GRAPH)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CREATE-AND-INTERN-NODE"
        "TAXONOMY-GRAPH"
        "(DEFUN (CREATE-AND-INTERN-NODE TAXONOMY-NODE) ((GRAPH TAXONOMY-GRAPH) (PARENT TAXONOMY-NODE) (NATIVEOBJECT OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CREATE-AND-INTERN-NODE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "REMOVE-NODE-FROM-GRAPH"
        "TAXONOMY-GRAPH"
        "(DEFUN REMOVE-NODE-FROM-GRAPH ((GRAPH TAXONOMY-GRAPH) (NODE TAXONOMY-NODE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION REMOVE-NODE-FROM-GRAPH)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "REMOVE-LINK"
        "TAXONOMY-GRAPH"
        "(DEFUN REMOVE-LINK ((GRAPH TAXONOMY-GRAPH) (PARENT TAXONOMY-NODE) (CHILD TAXONOMY-NODE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION REMOVE-LINK)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PRINT-GRAPH-TREE"
        "TAXONOMY-NODE"
        "(DEFUN PRINT-GRAPH-TREE ((NODE TAXONOMY-NODE) (INDENT INTEGER) (STREAM OUTPUT-STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION PRINT-GRAPH-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PRINT-GRAPH"
        "TAXONOMY-GRAPH"
        "(DEFUN PRINT-GRAPH ((GRAPH TAXONOMY-GRAPH) (STREAM OUTPUT-STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION PRINT-GRAPH)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PRINT-SPANNING-TREE"
        "TAXONOMY-NODE"
        "(DEFUN PRINT-SPANNING-TREE ((NODE TAXONOMY-NODE) (INDENT INTEGER) (STREAM OUTPUT-STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION PRINT-SPANNING-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PRINT-FOREST"
        "TAXONOMY-GRAPH"
        "(DEFUN PRINT-FOREST ((GRAPH TAXONOMY-GRAPH) (STREAM OUTPUT-STREAM)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION PRINT-FOREST)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CREATE-INTERVAL"
        "TAXONOMY-NODE"
        "(DEFUN (CREATE-INTERVAL INTERVAL) ((NODE TAXONOMY-NODE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CREATE-INTERVAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CLEAR-TREE-LABELS"
        "TAXONOMY-NODE"
        "(DEFUN CLEAR-TREE-LABELS ((NODE TAXONOMY-NODE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CLEAR-TREE-LABELS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CLEAR-TREE"
        "TAXONOMY-NODE"
        "(DEFUN CLEAR-TREE ((NODE TAXONOMY-NODE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CLEAR-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "LABELED?"
        "TAXONOMY-NODE"
        "(DEFUN (LABELED? BOOLEAN) ((NODE TAXONOMY-NODE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION LABELED?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CLEAR-GRAPH-TREE"
        "TAXONOMY-NODE"
        "(DEFUN CLEAR-GRAPH-TREE ((NODE TAXONOMY-NODE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CLEAR-GRAPH-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CLEAR-GRAPH"
        "TAXONOMY-GRAPH"
        "(DEFUN CLEAR-GRAPH ((GRAPH TAXONOMY-GRAPH)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CLEAR-GRAPH)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INTERVAL-SUBSUMES-INTEGER?"
        "INTERVAL"
        "(DEFUN (INTERVAL-SUBSUMES-INTEGER? BOOLEAN) ((INTERVAL INTERVAL) (N INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INTERVAL-SUBSUMES-INTEGER?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "TAXONOMY-NODE-SUBCLASS-OF?"
        "TAXONOMY-NODE"
        "(DEFUN (TAXONOMY-NODE-SUBCLASS-OF? BOOLEAN) ((DESCENDANT TAXONOMY-NODE) (ANCESTOR TAXONOMY-NODE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION TAXONOMY-NODE-SUBCLASS-OF?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "OPTIMIZE-INTERVALS"
        "TAXONOMY-GRAPH"
        "(DEFUN OPTIMIZE-INTERVALS ((GRAPH TAXONOMY-GRAPH)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION OPTIMIZE-INTERVALS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SLOW-TAXONOMY-NODE-SUBCLASS-OF?"
        "TAXONOMY-NODE"
        "(DEFUN (SLOW-TAXONOMY-NODE-SUBCLASS-OF? BOOLEAN) ((DESCENDANT TAXONOMY-NODE) (ANCESTOR TAXONOMY-NODE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SLOW-TAXONOMY-NODE-SUBCLASS-OF?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "MOST-GENERAL-NODES"
        "CONS"
        "(DEFUN (MOST-GENERAL-NODES (CONS OF TAXONOMY-NODE)) ((NODES (CONS OF TAXONOMY-NODE))))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION MOST-GENERAL-NODES)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "HELP-POSTORDER-LABEL-TREE"
        "TAXONOMY-NODE"
        "(DEFUN HELP-POSTORDER-LABEL-TREE ((NODE TAXONOMY-NODE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION HELP-POSTORDER-LABEL-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "POSTORDER-LABEL-TREE"
        "TAXONOMY-NODE"
        "(DEFUN POSTORDER-LABEL-TREE ((ROOT TAXONOMY-NODE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION POSTORDER-LABEL-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "HELP-CREATE-TREE-INTERVALS"
        "TAXONOMY-NODE"
        "(DEFUN (HELP-CREATE-TREE-INTERVALS INTEGER) ((SELF TAXONOMY-NODE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION HELP-CREATE-TREE-INTERVALS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CREATE-INITIAL-INTERVALS"
        "TAXONOMY-GRAPH"
        "(DEFUN CREATE-INITIAL-INTERVALS ((GRAPH TAXONOMY-GRAPH)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CREATE-INITIAL-INTERVALS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INTERVAL-SUBSUMES-INTERVAL?"
        "INTERVAL"
        "(DEFUN (INTERVAL-SUBSUMES-INTERVAL? BOOLEAN) ((PARENT INTERVAL) (CHILD INTERVAL)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INTERVAL-SUBSUMES-INTERVAL?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "ADJACENT?"
        "INTERVAL"
        "(DEFUN (ADJACENT? BOOLEAN) ((LEFTINTERVAL INTERVAL) (RIGHTINTERVAL INTERVAL)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION ADJACENT?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "MERGE-INTERVALS"
        "INTERVAL"
        "(DEFUN (MERGE-INTERVALS INTERVAL) ((LEFTINTERVAL INTERVAL) (RIGHTINTERVAL INTERVAL)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION MERGE-INTERVALS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "ALLOCATE-NEW-INTERVAL"
        "TAXONOMY-NODE"
        "(DEFUN (ALLOCATE-NEW-INTERVAL INTERVAL) ((PARENT TAXONOMY-NODE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION ALLOCATE-NEW-INTERVAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "ALL-INTERVALS"
        "TAXONOMY-NODE"
        "(DEFUN (ALL-INTERVALS (ITERATOR OF INTERVAL)) ((NODE TAXONOMY-NODE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION ALL-INTERVALS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "ALL-INTERVALS-NEXT?"
        "ALL-PURPOSE-ITERATOR"
        "(DEFUN (ALL-INTERVALS-NEXT? BOOLEAN) ((SELF ALL-PURPOSE-ITERATOR)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION ALL-INTERVALS-NEXT?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "REMOVE-INTERVAL"
        "TAXONOMY-NODE"
        "(DEFUN REMOVE-INTERVAL ((NODE TAXONOMY-NODE) (INTERVAL INTERVAL)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION REMOVE-INTERVAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INSERT-INTERVAL"
        "TAXONOMY-GRAPH"
        "(DEFUN INSERT-INTERVAL ((GRAPH TAXONOMY-GRAPH) (NODE TAXONOMY-NODE) (INTERVAL INTERVAL)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INSERT-INTERVAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "ADD-INTERVAL-TO-NODE"
        "TAXONOMY-GRAPH"
        "(DEFUN ADD-INTERVAL-TO-NODE ((GRAPH TAXONOMY-GRAPH) (INTERVAL INTERVAL) (NODE TAXONOMY-NODE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION ADD-INTERVAL-TO-NODE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CREATE-NEXT-POSTORDER-INTERVAL"
        "TAXONOMY-GRAPH"
        "(DEFUN (CREATE-NEXT-POSTORDER-INTERVAL INTERVAL) ((GRAPH TAXONOMY-GRAPH)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CREATE-NEXT-POSTORDER-INTERVAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PROPOGATE-FOREIGN-INTERVAL"
        "TAXONOMY-GRAPH"
        "(DEFUN PROPOGATE-FOREIGN-INTERVAL ((GRAPH TAXONOMY-GRAPH) (INTERVAL INTERVAL) (NODE TAXONOMY-NODE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION PROPOGATE-FOREIGN-INTERVAL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CREATE-SPANNING-TREE"
        "TAXONOMY-GRAPH"
        "(DEFUN CREATE-SPANNING-TREE ((GRAPH TAXONOMY-GRAPH) (NODE TAXONOMY-NODE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CREATE-SPANNING-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CREATE-SPANNING-FOREST"
        "TAXONOMY-GRAPH"
        "(DEFUN CREATE-SPANNING-FOREST ((GRAPH TAXONOMY-GRAPH)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CREATE-SPANNING-FOREST)))
    (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
     "STARTUP-TAXONOMIES"
     NULL
     "(DEFUN STARTUP-TAXONOMIES ())"))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 8) 1)
    (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 9) 1)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *NUMBERING-INTERVAL* INTEGER 100 :DOCUMENTATION \"Spacing between succesive nodes\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFCONSTANT MARKER-LABEL INTEGER -99 :DOCUMENTATION \"Dummy label used for marking a node\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFCONSTANT DELETED-LABEL INTEGER -99 :DOCUMENTATION \"Label used for marking deleted nodes\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFSPECIAL *POSTORDER-NUMBER* INTEGER NULL)")
    (CL:LET*
     ((GLOBAL (LOOKUP-GLOBAL-VARIABLE SYM-TAXONOMIES-*POSTORDER-NUMBER*)))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-GET-VALUE-CODE GLOBAL)
      (CL:FUNCTION READ-*POSTORDER-NUMBER*))
     (CL:SETF
      (CLSYS-SVAL GLOBAL-VARIABLE VARIABLE-SET-VALUE-CODE GLOBAL)
      (CL:FUNCTION WRITE-*POSTORDER-NUMBER*)))))
  :VOID)
