;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

#|--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1996, 1997             | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied "AS IS",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SGT-TYPE-PREDICATES-BOOLEAN-WRAPPER NULL)
(CL:DEFVAR SGT-TYPE-PREDICATES-INTEGER-WRAPPER NULL)
(CL:DEFVAR SGT-TYPE-PREDICATES-TRANSIENT-INTEGER-WRAPPER NULL)
(CL:DEFVAR SGT-TYPE-PREDICATES-FLOAT-WRAPPER NULL)
(CL:DEFVAR SGT-TYPE-PREDICATES-TRANSIENT-FLOAT-WRAPPER NULL)
(CL:DEFVAR SGT-TYPE-PREDICATES-STRING-WRAPPER NULL)
(CL:DEFVAR SGT-TYPE-PREDICATES-TRANSIENT-STRING-WRAPPER NULL)
(CL:DEFVAR SGT-TYPE-PREDICATES-VERBATIM-STRING-WRAPPER NULL)
(CL:DEFVAR SGT-TYPE-PREDICATES-CHARACTER-WRAPPER NULL)
(CL:DEFVAR SGT-TYPE-PREDICATES-TRANSIENT-CHARACTER-WRAPPER NULL)
(CL:DEFVAR SGT-TYPE-PREDICATES-WRAPPER NULL)
(CL:DEFVAR SGT-TYPE-PREDICATES-SURROGATE NULL)
(CL:DEFVAR SGT-TYPE-PREDICATES-SYMBOL NULL)
(CL:DEFVAR SGT-TYPE-PREDICATES-TRANSIENT-SYMBOL NULL)
(CL:DEFVAR SGT-TYPE-PREDICATES-KEYWORD NULL)
(CL:DEFVAR SGT-TYPE-PREDICATES-CONS NULL)
(CL:DEFVAR SGT-TYPE-PREDICATES-TRANSIENT-CONS NULL)
(CL:DEFVAR SGT-TYPE-PREDICATES-CLASS NULL)
(CL:DEFVAR SGT-TYPE-PREDICATES-STORAGE-SLOT NULL)
(CL:DEFVAR SGT-TYPE-PREDICATES-METHOD-SLOT NULL)
(CL:DEFVAR SGT-TYPE-PREDICATES-ANCHORED-TYPE-SPECIFIER NULL)
(CL:DEFVAR SGT-TYPE-PREDICATES-PARAMETRIC-TYPE-SPECIFIER NULL)

;;; Forward declarations:

(CL:DECLAIM (CL:SPECIAL *STELLA-MODULE* *MODULE*))

;;; (DEFGLOBAL *CLASS-HIERARCHY-BOOTED?* ...)

(CL:DEFVAR *CLASS-HIERARCHY-BOOTED?* FALSE)

;;; (DEFUN (BOOTSTRAP-ISA? BOOLEAN) ...)

(CL:DEFUN BOOTSTRAP-ISA? (X TYPE)
  (CL:RETURN-FROM
   BOOTSTRAP-ISA?
   (CL:IF
    (CL:AND
     (CL:NOT (CL:EQ X NULL))
     (CL:OR
      (CL:EQ (PRIMARY-TYPE X) TYPE)
      (CL:AND
       (CL:NOT (CL:EQ (CLSYS-SVAL SURROGATE SURROGATE-VALUE TYPE) NULL))
       (CL:NOT
        (CL:EQ (CLSYS-SVAL SURROGATE SURROGATE-VALUE (PRIMARY-TYPE X)) NULL))
       (CL:EQ (ISA? X TYPE) 1))))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN (BOOLEAN? BOOLEAN) ...)

(CL:DEFUN BOOLEAN? (X)
  (CL:WHEN
   (CL:EQ *CLASS-HIERARCHY-BOOTED?* 1)
   (CL:RETURN-FROM
    BOOLEAN?
    (CL:IF
     (CL:AND
      (CL:NOT (CL:EQ X NULL))
      (CL:EQ (TAXONOMY-ISA? X SGT-TYPE-PREDICATES-BOOLEAN-WRAPPER) 1))
     TRUE
     FALSE)))
  (CL:RETURN-FROM
   BOOLEAN?
   (BOOTSTRAP-ISA? X SGT-TYPE-PREDICATES-BOOLEAN-WRAPPER))
  :VOID)

;;; (DEFUN (INTEGER? BOOLEAN) ...)

(CL:DEFUN INTEGER? (X)
  (CL:WHEN
   (CL:EQ *CLASS-HIERARCHY-BOOTED?* 1)
   (CL:RETURN-FROM
    INTEGER?
    (CL:IF
     (CL:AND
      (CL:NOT (CL:EQ X NULL))
      (CL:EQ (TAXONOMY-ISA? X SGT-TYPE-PREDICATES-INTEGER-WRAPPER) 1))
     TRUE
     FALSE)))
  (CL:RETURN-FROM
   INTEGER?
   (CL:IF
    (CL:OR
     (CL:EQ (BOOTSTRAP-ISA? X SGT-TYPE-PREDICATES-INTEGER-WRAPPER) 1)
     (CL:EQ
      (BOOTSTRAP-ISA? X SGT-TYPE-PREDICATES-TRANSIENT-INTEGER-WRAPPER)
      1))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN (FLOAT? BOOLEAN) ...)

(CL:DEFUN FLOAT? (X)
  (CL:WHEN
   (CL:EQ *CLASS-HIERARCHY-BOOTED?* 1)
   (CL:RETURN-FROM
    FLOAT?
    (CL:IF
     (CL:AND
      (CL:NOT (CL:EQ X NULL))
      (CL:EQ (TAXONOMY-ISA? X SGT-TYPE-PREDICATES-FLOAT-WRAPPER) 1))
     TRUE
     FALSE)))
  (CL:RETURN-FROM
   FLOAT?
   (CL:IF
    (CL:OR
     (CL:EQ (BOOTSTRAP-ISA? X SGT-TYPE-PREDICATES-FLOAT-WRAPPER) 1)
     (CL:EQ (BOOTSTRAP-ISA? X SGT-TYPE-PREDICATES-TRANSIENT-FLOAT-WRAPPER) 1))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN (STRING? BOOLEAN) ...)

(CL:DEFUN STRING? (X)
  (CL:WHEN
   (CL:EQ *CLASS-HIERARCHY-BOOTED?* 1)
   (CL:RETURN-FROM
    STRING?
    (CL:IF
     (CL:AND
      (CL:NOT (CL:EQ X NULL))
      (CL:EQ (TAXONOMY-ISA? X SGT-TYPE-PREDICATES-STRING-WRAPPER) 1))
     TRUE
     FALSE)))
  (CL:RETURN-FROM
   STRING?
   (CL:IF
    (CL:OR
     (CL:EQ (BOOTSTRAP-ISA? X SGT-TYPE-PREDICATES-STRING-WRAPPER) 1)
     (CL:EQ (BOOTSTRAP-ISA? X SGT-TYPE-PREDICATES-TRANSIENT-STRING-WRAPPER) 1)
     (CL:EQ (BOOTSTRAP-ISA? X SGT-TYPE-PREDICATES-VERBATIM-STRING-WRAPPER) 1))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN (VERBATIM-STRING? BOOLEAN) ...)

(CL:DEFUN VERBATIM-STRING? (X)
  (CL:WHEN
   (CL:EQ *CLASS-HIERARCHY-BOOTED?* 1)
   (CL:RETURN-FROM
    VERBATIM-STRING?
    (CL:IF
     (CL:AND
      (CL:NOT (CL:EQ X NULL))
      (CL:EQ (TAXONOMY-ISA? X SGT-TYPE-PREDICATES-VERBATIM-STRING-WRAPPER) 1))
     TRUE
     FALSE)))
  (CL:RETURN-FROM
   VERBATIM-STRING?
   (BOOTSTRAP-ISA? X SGT-TYPE-PREDICATES-VERBATIM-STRING-WRAPPER))
  :VOID)

;;; (DEFUN (CHARACTER? BOOLEAN) ...)

(CL:DEFUN CHARACTER? (X)
  (CL:WHEN
   (CL:EQ *CLASS-HIERARCHY-BOOTED?* 1)
   (CL:RETURN-FROM
    CHARACTER?
    (CL:IF
     (CL:AND
      (CL:NOT (CL:EQ X NULL))
      (CL:EQ (TAXONOMY-ISA? X SGT-TYPE-PREDICATES-CHARACTER-WRAPPER) 1))
     TRUE
     FALSE)))
  (CL:RETURN-FROM
   CHARACTER?
   (CL:IF
    (CL:OR
     (CL:EQ (BOOTSTRAP-ISA? X SGT-TYPE-PREDICATES-CHARACTER-WRAPPER) 1)
     (CL:EQ
      (BOOTSTRAP-ISA? X SGT-TYPE-PREDICATES-TRANSIENT-CHARACTER-WRAPPER)
      1))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN (WRAPPER? BOOLEAN) ...)

(CL:DEFUN WRAPPER? (X)
  (CL:WHEN
   (CL:EQ *CLASS-HIERARCHY-BOOTED?* 1)
   (CL:RETURN-FROM
    WRAPPER?
    (CL:IF
     (CL:AND
      (CL:NOT (CL:EQ X NULL))
      (CL:EQ (TAXONOMY-ISA? X SGT-TYPE-PREDICATES-WRAPPER) 1))
     TRUE
     FALSE)))
  (CL:RETURN-FROM
   WRAPPER?
   (CL:IF
    (CL:OR
     (CL:EQ (BOOLEAN? X) 1)
     (CL:EQ (INTEGER? X) 1)
     (CL:EQ (FLOAT? X) 1)
     (CL:EQ (STRING? X) 1)
     (CL:EQ (CHARACTER? X) 1)
     (CL:EQ (BOOTSTRAP-ISA? X SGT-TYPE-PREDICATES-WRAPPER) 1))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN (SURROGATE? BOOLEAN) ...)

(CL:DEFUN SURROGATE? (X)
  (CL:WHEN
   (CL:EQ *CLASS-HIERARCHY-BOOTED?* 1)
   (CL:RETURN-FROM
    SURROGATE?
    (CL:IF
     (CL:AND
      (CL:NOT (CL:EQ X NULL))
      (CL:EQ (TAXONOMY-ISA? X SGT-TYPE-PREDICATES-SURROGATE) 1))
     TRUE
     FALSE)))
  (CL:RETURN-FROM SURROGATE? (BOOTSTRAP-ISA? X SGT-TYPE-PREDICATES-SURROGATE))
  :VOID)

;;; (DEFUN (TYPE? BOOLEAN) ...)

(CL:DEFUN TYPE? (X)
  (CL:WHEN
   (CL:EQ *CLASS-HIERARCHY-BOOTED?* 1)
   (CL:RETURN-FROM
    TYPE?
    (CL:IF
     (CL:AND
      (CL:NOT (CL:EQ X NULL))
      (CL:EQ (TAXONOMY-ISA? X SGT-TYPE-PREDICATES-SURROGATE) 1))
     TRUE
     FALSE)))
  (CL:RETURN-FROM TYPE? (BOOTSTRAP-ISA? X SGT-TYPE-PREDICATES-SURROGATE))
  :VOID)

;;; (DEFUN (SYMBOL? BOOLEAN) ...)

(CL:DEFUN SYMBOL? (X)
  (CL:WHEN
   (CL:EQ *CLASS-HIERARCHY-BOOTED?* 1)
   (CL:RETURN-FROM
    SYMBOL?
    (CL:IF
     (CL:AND
      (CL:NOT (CL:EQ X NULL))
      (CL:EQ (TAXONOMY-ISA? X SGT-TYPE-PREDICATES-SYMBOL) 1))
     TRUE
     FALSE)))
  (CL:RETURN-FROM
   SYMBOL?
   (CL:IF
    (CL:OR
     (CL:EQ (BOOTSTRAP-ISA? X SGT-TYPE-PREDICATES-SYMBOL) 1)
     (CL:EQ (BOOTSTRAP-ISA? X SGT-TYPE-PREDICATES-TRANSIENT-SYMBOL) 1))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN (TRANSIENT-SYMBOL? BOOLEAN) ...)

(CL:DEFUN TRANSIENT-SYMBOL? (X)
  (CL:WHEN
   (CL:EQ *CLASS-HIERARCHY-BOOTED?* 1)
   (CL:RETURN-FROM
    TRANSIENT-SYMBOL?
    (CL:IF
     (CL:AND
      (CL:NOT (CL:EQ X NULL))
      (CL:EQ (TAXONOMY-ISA? X SGT-TYPE-PREDICATES-TRANSIENT-SYMBOL) 1))
     TRUE
     FALSE)))
  (CL:RETURN-FROM
   TRANSIENT-SYMBOL?
   (BOOTSTRAP-ISA? X SGT-TYPE-PREDICATES-TRANSIENT-SYMBOL))
  :VOID)

;;; (DEFUN (KEYWORD? BOOLEAN) ...)

(CL:DEFUN KEYWORD? (X)
  (CL:WHEN
   (CL:EQ *CLASS-HIERARCHY-BOOTED?* 1)
   (CL:RETURN-FROM
    KEYWORD?
    (CL:IF
     (CL:AND
      (CL:NOT (CL:EQ X NULL))
      (CL:EQ (TAXONOMY-ISA? X SGT-TYPE-PREDICATES-KEYWORD) 1))
     TRUE
     FALSE)))
  (CL:RETURN-FROM KEYWORD? (BOOTSTRAP-ISA? X SGT-TYPE-PREDICATES-KEYWORD))
  :VOID)

;;; (DEFUN (CONS? BOOLEAN) ...)

(CL:DEFUN CONS? (X)
  (CL:IF
   (CL:NOT (CL:EQ X NULL))
   (CL:LET*
    ((TYPE (PRIMARY-TYPE X)))
    (CL:RETURN-FROM
     CONS?
     (CL:IF
      (CL:OR
       (CL:EQ TYPE SGT-TYPE-PREDICATES-CONS)
       (CL:EQ TYPE SGT-TYPE-PREDICATES-TRANSIENT-CONS))
      TRUE
      FALSE)))
   (CL:RETURN-FROM CONS? FALSE))
  :VOID)

;;; (DEFUN (CLASS? BOOLEAN) ...)

(CL:DEFUN CLASS? (X)
  (CL:WHEN
   (CL:EQ *CLASS-HIERARCHY-BOOTED?* 1)
   (CL:RETURN-FROM
    CLASS?
    (CL:IF
     (CL:AND
      (CL:NOT (CL:EQ X NULL))
      (CL:EQ (TAXONOMY-ISA? X SGT-TYPE-PREDICATES-CLASS) 1))
     TRUE
     FALSE)))
  (CL:RETURN-FROM CLASS? (BOOTSTRAP-ISA? X SGT-TYPE-PREDICATES-CLASS))
  :VOID)

;;; (DEFUN (STORAGE-SLOT? BOOLEAN) ...)

(CL:DEFUN STORAGE-SLOT? (X)
  (CL:WHEN
   (CL:EQ *CLASS-HIERARCHY-BOOTED?* 1)
   (CL:RETURN-FROM
    STORAGE-SLOT?
    (CL:IF
     (CL:AND
      (CL:NOT (CL:EQ X NULL))
      (CL:EQ (TAXONOMY-ISA? X SGT-TYPE-PREDICATES-STORAGE-SLOT) 1))
     TRUE
     FALSE)))
  (CL:RETURN-FROM
   STORAGE-SLOT?
   (BOOTSTRAP-ISA? X SGT-TYPE-PREDICATES-STORAGE-SLOT))
  :VOID)

;;; (DEFUN (METHOD-SLOT? BOOLEAN) ...)

(CL:DEFUN METHOD-SLOT? (X)
  (CL:WHEN
   (CL:EQ *CLASS-HIERARCHY-BOOTED?* 1)
   (CL:RETURN-FROM
    METHOD-SLOT?
    (CL:IF
     (CL:AND
      (CL:NOT (CL:EQ X NULL))
      (CL:EQ (TAXONOMY-ISA? X SGT-TYPE-PREDICATES-METHOD-SLOT) 1))
     TRUE
     FALSE)))
  (CL:RETURN-FROM
   METHOD-SLOT?
   (BOOTSTRAP-ISA? X SGT-TYPE-PREDICATES-METHOD-SLOT))
  :VOID)

;;; (DEFUN (ANCHORED-TYPE-SPECIFIER? BOOLEAN) ...)

(CL:DEFUN ANCHORED-TYPE-SPECIFIER? (X)
  (CL:WHEN
   (CL:EQ *CLASS-HIERARCHY-BOOTED?* 1)
   (CL:RETURN-FROM
    ANCHORED-TYPE-SPECIFIER?
    (CL:IF
     (CL:AND
      (CL:NOT (CL:EQ X NULL))
      (CL:EQ (TAXONOMY-ISA? X SGT-TYPE-PREDICATES-ANCHORED-TYPE-SPECIFIER) 1))
     TRUE
     FALSE)))
  (CL:RETURN-FROM
   ANCHORED-TYPE-SPECIFIER?
   (BOOTSTRAP-ISA? X SGT-TYPE-PREDICATES-ANCHORED-TYPE-SPECIFIER))
  :VOID)

;;; (DEFUN (PARAMETRIC-TYPE-SPECIFIER? BOOLEAN) ...)

(CL:DEFUN PARAMETRIC-TYPE-SPECIFIER? (X)
  (CL:WHEN
   (CL:EQ *CLASS-HIERARCHY-BOOTED?* 1)
   (CL:RETURN-FROM
    PARAMETRIC-TYPE-SPECIFIER?
    (CL:IF
     (CL:AND
      (CL:NOT (CL:EQ X NULL))
      (CL:EQ
       (TAXONOMY-ISA? X SGT-TYPE-PREDICATES-PARAMETRIC-TYPE-SPECIFIER)
       1))
     TRUE
     FALSE)))
  (CL:RETURN-FROM
   PARAMETRIC-TYPE-SPECIFIER?
   (BOOTSTRAP-ISA? X SGT-TYPE-PREDICATES-PARAMETRIC-TYPE-SPECIFIER))
  :VOID)

(CL:DEFUN STARTUP-TYPE-PREDICATES ()
  (CL:LET*
   ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 2) 1)
    (CL:SETQ
     SGT-TYPE-PREDICATES-BOOLEAN-WRAPPER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "BOOLEAN-WRAPPER" NULL 1))
    (CL:SETQ
     SGT-TYPE-PREDICATES-INTEGER-WRAPPER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "INTEGER-WRAPPER" NULL 1))
    (CL:SETQ
     SGT-TYPE-PREDICATES-TRANSIENT-INTEGER-WRAPPER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "TRANSIENT-INTEGER-WRAPPER" NULL 1))
    (CL:SETQ
     SGT-TYPE-PREDICATES-FLOAT-WRAPPER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FLOAT-WRAPPER" NULL 1))
    (CL:SETQ
     SGT-TYPE-PREDICATES-TRANSIENT-FLOAT-WRAPPER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "TRANSIENT-FLOAT-WRAPPER" NULL 1))
    (CL:SETQ
     SGT-TYPE-PREDICATES-STRING-WRAPPER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STRING-WRAPPER" NULL 1))
    (CL:SETQ
     SGT-TYPE-PREDICATES-TRANSIENT-STRING-WRAPPER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "TRANSIENT-STRING-WRAPPER" NULL 1))
    (CL:SETQ
     SGT-TYPE-PREDICATES-VERBATIM-STRING-WRAPPER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "VERBATIM-STRING-WRAPPER" NULL 1))
    (CL:SETQ
     SGT-TYPE-PREDICATES-CHARACTER-WRAPPER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CHARACTER-WRAPPER" NULL 1))
    (CL:SETQ
     SGT-TYPE-PREDICATES-TRANSIENT-CHARACTER-WRAPPER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "TRANSIENT-CHARACTER-WRAPPER" NULL 1))
    (CL:SETQ
     SGT-TYPE-PREDICATES-WRAPPER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WRAPPER" NULL 1))
    (CL:SETQ
     SGT-TYPE-PREDICATES-SURROGATE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SURROGATE" NULL 1))
    (CL:SETQ
     SGT-TYPE-PREDICATES-SYMBOL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SYMBOL" NULL 1))
    (CL:SETQ
     SGT-TYPE-PREDICATES-TRANSIENT-SYMBOL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "TRANSIENT-SYMBOL" NULL 1))
    (CL:SETQ
     SGT-TYPE-PREDICATES-KEYWORD
     (INTERN-RIGID-SYMBOL-WRT-MODULE "KEYWORD" NULL 1))
    (CL:SETQ
     SGT-TYPE-PREDICATES-CONS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CONS" NULL 1))
    (CL:SETQ
     SGT-TYPE-PREDICATES-TRANSIENT-CONS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "TRANSIENT-CONS" NULL 1))
    (CL:SETQ
     SGT-TYPE-PREDICATES-CLASS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS" NULL 1))
    (CL:SETQ
     SGT-TYPE-PREDICATES-STORAGE-SLOT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STORAGE-SLOT" NULL 1))
    (CL:SETQ
     SGT-TYPE-PREDICATES-METHOD-SLOT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-SLOT" NULL 1))
    (CL:SETQ
     SGT-TYPE-PREDICATES-ANCHORED-TYPE-SPECIFIER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "ANCHORED-TYPE-SPECIFIER" NULL 1))
    (CL:SETQ
     SGT-TYPE-PREDICATES-PARAMETRIC-TYPE-SPECIFIER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PARAMETRIC-TYPE-SPECIFIER" NULL 1)))
   (CL:WHEN (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 6) 1) (FINALIZE-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 7) 1)
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "BOOTSTRAP-ISA?"
        "OBJECT"
        "(DEFUN (BOOTSTRAP-ISA? BOOLEAN) ((X OBJECT) (TYPE TYPE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION BOOTSTRAP-ISA?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "BOOLEAN?"
        "OBJECT"
        "(DEFUN (BOOLEAN? BOOLEAN) ((X OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION BOOLEAN?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INTEGER?"
        "OBJECT"
        "(DEFUN (INTEGER? BOOLEAN) ((X OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INTEGER?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "FLOAT?"
        "OBJECT"
        "(DEFUN (FLOAT? BOOLEAN) ((X OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION FLOAT?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "STRING?"
        "OBJECT"
        "(DEFUN (STRING? BOOLEAN) ((X OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION STRING?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "VERBATIM-STRING?"
        "OBJECT"
        "(DEFUN (VERBATIM-STRING? BOOLEAN) ((X OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION VERBATIM-STRING?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CHARACTER?"
        "OBJECT"
        "(DEFUN (CHARACTER? BOOLEAN) ((X OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CHARACTER?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "WRAPPER?"
        "OBJECT"
        "(DEFUN (WRAPPER? BOOLEAN) ((X OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION WRAPPER?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SURROGATE?"
        "OBJECT"
        "(DEFUN (SURROGATE? BOOLEAN) ((X OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SURROGATE?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "TYPE?"
        "OBJECT"
        "(DEFUN (TYPE? BOOLEAN) ((X OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION TYPE?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SYMBOL?"
        "OBJECT"
        "(DEFUN (SYMBOL? BOOLEAN) ((X OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SYMBOL?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "TRANSIENT-SYMBOL?"
        "OBJECT"
        "(DEFUN (TRANSIENT-SYMBOL? BOOLEAN) ((X OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION TRANSIENT-SYMBOL?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "KEYWORD?"
        "OBJECT"
        "(DEFUN (KEYWORD? BOOLEAN) ((X OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION KEYWORD?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CONS?"
        "OBJECT"
        "(DEFUN (CONS? BOOLEAN) ((X OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CONS?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CLASS?"
        "OBJECT"
        "(DEFUN (CLASS? BOOLEAN) ((X OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CLASS?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "STORAGE-SLOT?"
        "OBJECT"
        "(DEFUN (STORAGE-SLOT? BOOLEAN) ((X OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION STORAGE-SLOT?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "METHOD-SLOT?"
        "OBJECT"
        "(DEFUN (METHOD-SLOT? BOOLEAN) ((X OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION METHOD-SLOT?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "ANCHORED-TYPE-SPECIFIER?"
        "OBJECT"
        "(DEFUN (ANCHORED-TYPE-SPECIFIER? BOOLEAN) ((X OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION ANCHORED-TYPE-SPECIFIER?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PARAMETRIC-TYPE-SPECIFIER?"
        "OBJECT"
        "(DEFUN (PARAMETRIC-TYPE-SPECIFIER? BOOLEAN) ((X OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION PARAMETRIC-TYPE-SPECIFIER?)))
    (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
     "STARTUP-TYPE-PREDICATES"
     NULL
     "(DEFUN STARTUP-TYPE-PREDICATES ())"))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 8) 1)
    (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 9) 1)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *CLASS-HIERARCHY-BOOTED?* BOOLEAN FALSE)")))
  :VOID)
