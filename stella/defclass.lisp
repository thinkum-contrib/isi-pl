;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

#|--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1996, 1997             | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied "AS IS",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR KWD-DEFCLASS-COMMON-LISP NULL)
(CL:DEFVAR SGT-DEFCLASS-LITERAL NULL)
(CL:DEFVAR SYM-DEFCLASS-NULL NULL)
(CL:DEFVAR SYM-DEFCLASS-DEFINE-CLASS-FROM-STRINGIFIED-SOURCE NULL)
(CL:DEFVAR SYM-DEFCLASS-CLASS-CL-NATIVE-TYPE NULL)
(CL:DEFVAR KWD-DEFCLASS-IDL NULL)
(CL:DEFVAR SYM-DEFCLASS-CLASS-IDL-NATIVE-TYPE NULL)
(CL:DEFVAR KWD-DEFCLASS-JAVA NULL)
(CL:DEFVAR SYM-DEFCLASS-CLASS-JAVA-NATIVE-TYPE NULL)
(CL:DEFVAR KWD-DEFCLASS-CPP NULL)
(CL:DEFVAR KWD-DEFCLASS-CPP-STANDALONE NULL)
(CL:DEFVAR SYM-DEFCLASS-CLASS-CPP-NATIVE-TYPE NULL)
(CL:DEFVAR SGT-DEFCLASS-SECOND-CLASS-OBJECT NULL)
(CL:DEFVAR SGT-DEFCLASS-NON-OBJECT NULL)
(CL:DEFVAR KWD-DEFCLASS-DYNAMIC NULL)
(CL:DEFVAR SYM-DEFCLASS-SLOT-INITIAL-VALUE NULL)
(CL:DEFVAR KWD-DEFCLASS-BIT NULL)
(CL:DEFVAR SGT-DEFCLASS-BOOLEAN NULL)
(CL:DEFVAR SYM-DEFCLASS-SLOT-RENAMES NULL)
(CL:DEFVAR SGT-DEFCLASS-UNKNOWN NULL)
(CL:DEFVAR SYM-DEFCLASS-NEXT-SWEEP-LIST-OBJECT NULL)
(CL:DEFVAR SYM-DEFCLASS-CLASS-CREATOR NULL)
(CL:DEFVAR SYM-DEFCLASS-DEFGLOBAL NULL)
(CL:DEFVAR SYM-DEFCLASS-LIST NULL)
(CL:DEFVAR SYM-DEFCLASS-OF NULL)
(CL:DEFVAR SYM-DEFCLASS-STARTUP-TIME-PROGN NULL)
(CL:DEFVAR KWD-DEFCLASS-EARLY-INITS NULL)
(CL:DEFVAR SYM-DEFCLASS-SETQ NULL)
(CL:DEFVAR SYM-DEFCLASS-MAKE-NON-RECYCLED-LIST NULL)
(CL:DEFVAR SYM-DEFCLASS-SELF NULL)
(CL:DEFVAR SYM-DEFCLASS-MAKE NULL)
(CL:DEFVAR SYM-DEFCLASS-WHEN NULL)
(CL:DEFVAR SYM-DEFCLASS-DEFINED? NULL)
(CL:DEFVAR SYM-DEFCLASS-FREE NULL)
(CL:DEFVAR SYM-DEFCLASS-DYNAMIC-SLOTS NULL)
(CL:DEFVAR SYM-DEFCLASS-CLEAR NULL)
(CL:DEFVAR SYM-DEFCLASS-UNLESS NULL)
(CL:DEFVAR SYM-DEFCLASS-RETURN NULL)
(CL:DEFVAR SYM-DEFCLASS-SLOT-VALUE NULL)
(CL:DEFVAR SYM-DEFCLASS-SAFE-CAST NULL)
(CL:DEFVAR SYM-DEFCLASS-POP NULL)
(CL:DEFVAR SYM-DEFCLASS-COND NULL)
(CL:DEFVAR SYM-DEFCLASS-OTHERWISE NULL)
(CL:DEFVAR SYM-DEFCLASS-SETF NULL)
(CL:DEFVAR KWD-DEFCLASS-CONTEXT-SENSITIVE? NULL)
(CL:DEFVAR SYM-DEFCLASS-FALSE NULL)
(CL:DEFVAR SYM-DEFCLASS-RUN-CONSTRUCTOR-DEMONS NULL)
(CL:DEFVAR SYM-DEFCLASS-DEFUN NULL)
(CL:DEFVAR SYM-DEFCLASS-LET NULL)
(CL:DEFVAR SYM-DEFCLASS-CLASS-DESTRUCTOR NULL)
(CL:DEFVAR SYM-DEFCLASS-DEFMETHOD NULL)
(CL:DEFVAR SYM-DEFCLASS-PUSH NULL)
(CL:DEFVAR SYM-DEFCLASS-SWEEP NULL)
(CL:DEFVAR SYM-DEFCLASS-UNMAKE NULL)
(CL:DEFVAR SGT-DEFCLASS-VOID NULL)
(CL:DEFVAR SYM-DEFCLASS-SLOT-TYPE-SPECIFIER NULL)
(CL:DEFVAR SYM-DEFCLASS-ANSWER NULL)
(CL:DEFVAR SYM-DEFCLASS-IF NULL)
(CL:DEFVAR SYM-DEFCLASS-NULL? NULL)
(CL:DEFVAR SYM-DEFCLASS-PROGN NULL)
(CL:DEFVAR SYM-DEFCLASS-ERROR NULL)
(CL:DEFVAR KWD-DEFCLASS-AUXILIARY? NULL)
(CL:DEFVAR SYM-DEFCLASS-TRUE NULL)
(CL:DEFVAR SYM-DEFCLASS-VALUE NULL)
(CL:DEFVAR SYM-DEFCLASS-IGNORE NULL)
(CL:DEFVAR SGT-DEFCLASS-OBJECT NULL)
(CL:DEFVAR KWD-DEFCLASS-WRAP-FUNCTION NULL)
(CL:DEFVAR SYM-DEFCLASS-CAST NULL)
(CL:DEFVAR SYM-DEFCLASS-SETVALUE? NULL)
(CL:DEFVAR SGT-DEFCLASS-DYNAMIC-SLOTS-MIXIN NULL)
(CL:DEFVAR SYM-DEFCLASS-SLOTNAME NULL)
(CL:DEFVAR SYM-DEFCLASS-QUOTE NULL)
(CL:DEFVAR SYM-DEFCLASS-CASE NULL)
(CL:DEFVAR SYM-DEFCLASS-HELP-SET-DYNAMIC-SLOT-VALUE NULL)
(CL:DEFVAR SYM-DEFCLASS-LOOKUP NULL)
(CL:DEFVAR SYM-DEFCLASS-OBJECT NULL)
(CL:DEFVAR SYM-DEFCLASS-SYMBOL NULL)
(CL:DEFVAR SYM-DEFCLASS-BOOLEAN NULL)
(CL:DEFVAR SYM-DEFCLASS-CLASS-SLOT-ACCESSOR-CODE NULL)
(CL:DEFVAR SYM-DEFCLASS-THE-CODE NULL)
(CL:DEFVAR KWD-DEFCLASS-FUNCTION NULL)
(CL:DEFVAR SYM-DEFCLASS-TYPECASE NULL)
(CL:DEFVAR SYM-DEFCLASS-EQ? NULL)
(CL:DEFVAR SYM-DEFCLASS-OTHER NULL)
(CL:DEFVAR SYM-DEFCLASS-EQUAL NULL)
(CL:DEFVAR SYM-DEFCLASS-AND NULL)
(CL:DEFVAR SGT-DEFCLASS-TRANSIENT-MIXIN NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STELLA-MODULE* *MODULE* STANDARD-OUTPUT EOL NULL-STRING-WRAPPER))

;;; (DEFGLOBAL *TRANSLATOR-OUTPUT-LANGUAGE* ...)

(CL:DEFVAR *TRANSLATOR-OUTPUT-LANGUAGE* NULL
  "Specifies the translator output language; either
:common-lisp, :idl, :java, :cpp, or :cpp-standalone.")

;;; (DEFUN (TYPE-TO-NULL-VALUE-TREE OBJECT) ...)

(CL:DEFUN TYPE-TO-NULL-VALUE-TREE (TYPE)
  (CL:LET*
   ((CLASS (TYPE-TO-CLASS TYPE)))
   (CL:WHEN
    (CL:AND
     (CL:NOT (CL:EQ CLASS NULL))
     (CL:EQ (SUBTYPE-OF? TYPE SGT-DEFCLASS-LITERAL) 1))
    (CL:LET*
     ((NULLVALUE (INITIAL-VALUE CLASS)))
     (CL:WHEN
      (CL:NOT (CL:EQ NULLVALUE NULL))
      (CL:RETURN-FROM
       TYPE-TO-NULL-VALUE-TREE
       (TRANSIENTIFY-FORM NULLVALUE)))))
   (CL:RETURN-FROM TYPE-TO-NULL-VALUE-TREE SYM-DEFCLASS-NULL))
  :VOID)

;;; (DEFUN (YIELD-CONS-LIST-FROM-SEQUENCE CONS) ...)

(CL:DEFUN YIELD-CONS-LIST-FROM-SEQUENCE (SEQUENCE)
  (CL:LET*
   ((LIST NIL))
   (CL:LET*
    ((ITEM NULL) (ITER-001 (ALLOCATE-ITERATOR SEQUENCE)) (COLLECT-001 NULL))
    (CL:LOOP
     WHILE
     (CL:EQ (NEXT? ITER-001) 1)
     DO
     (CL:PROGN (CL:SETQ ITEM (CLSYS-SVAL ITERATOR VALUE ITER-001)))
     (CL:IF
      (CL:EQ COLLECT-001 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-001 (CONS ITEM NIL))
       (CL:IF
        (CL:EQ LIST NIL)
        (CL:SETQ LIST COLLECT-001)
        (ADD-CONS-TO-END-OF-CONS-LIST LIST COLLECT-001)))
      (CL:PROGN
       (CL:SETF (CLSYS-SVAL CONS REST COLLECT-001) (CONS ITEM NIL))
       (CL:SETQ COLLECT-001 (CLSYS-SVAL CONS REST COLLECT-001))))))
   (CL:RETURN-FROM YIELD-CONS-LIST-FROM-SEQUENCE LIST))
  :VOID)

;;; (DEFUN (YIELD-DEFINE-STELLA-CLASS CONS) ...)

(CL:DEFUN YIELD-DEFINE-STELLA-CLASS (CLASS)
  "Return a cons tree that (when evaluated) constructs
a Stella class object."
  ()
  (CL:RETURN-FROM
   YIELD-DEFINE-STELLA-CLASS
   (LIST*
    SYM-DEFCLASS-DEFINE-CLASS-FROM-STRINGIFIED-SOURCE
    (WRAP-LITERAL (NAME CLASS))
    (CONS
     (YIELD-STRING-CONSTANT-TREE
      (CLSYS-SVAL CLASS CLASS-STRINGIFIED-SOURCE CLASS))
     NIL)))
  :VOID)

;;; (DEFUN (CREATE-NATIVE-CLASS? BOOLEAN) ...)

(CL:DEFUN CREATE-NATIVE-CLASS? (CLASS)
  (CL:LET*
   ((CLASSNATIVETYPE NULL))
   (CL:COND
    ((CL:EQ *TRANSLATOR-OUTPUT-LANGUAGE* KWD-DEFCLASS-COMMON-LISP)
     (CL:SETQ
      CLASSNATIVETYPE
      (CLSYS-SVAL
       STRING-WRAPPER
       WRAPPER-VALUE
       (DYNAMIC-SLOT-VALUE
        CLASS
        SYM-DEFCLASS-CLASS-CL-NATIVE-TYPE
        NULL-STRING-WRAPPER))))
    ((CL:EQ *TRANSLATOR-OUTPUT-LANGUAGE* KWD-DEFCLASS-IDL)
     (CL:SETQ
      CLASSNATIVETYPE
      (CLSYS-SVAL
       STRING-WRAPPER
       WRAPPER-VALUE
       (DYNAMIC-SLOT-VALUE
        CLASS
        SYM-DEFCLASS-CLASS-IDL-NATIVE-TYPE
        NULL-STRING-WRAPPER))))
    ((CL:EQ *TRANSLATOR-OUTPUT-LANGUAGE* KWD-DEFCLASS-JAVA)
     (CL:SETQ
      CLASSNATIVETYPE
      (CLSYS-SVAL
       STRING-WRAPPER
       WRAPPER-VALUE
       (DYNAMIC-SLOT-VALUE
        CLASS
        SYM-DEFCLASS-CLASS-JAVA-NATIVE-TYPE
        NULL-STRING-WRAPPER))))
    ((CL:OR
      (CL:EQ *TRANSLATOR-OUTPUT-LANGUAGE* KWD-DEFCLASS-CPP)
      (CL:EQ *TRANSLATOR-OUTPUT-LANGUAGE* KWD-DEFCLASS-CPP-STANDALONE))
     (CL:SETQ
      CLASSNATIVETYPE
      (CLSYS-SVAL
       STRING-WRAPPER
       WRAPPER-VALUE
       (DYNAMIC-SLOT-VALUE
        CLASS
        SYM-DEFCLASS-CLASS-CPP-NATIVE-TYPE
        NULL-STRING-WRAPPER))))
    (CL:T
     (CL:ERROR
      "`~A' is not a valid case option"
      *TRANSLATOR-OUTPUT-LANGUAGE*)))
   (CL:RETURN-FROM
    CREATE-NATIVE-CLASS?
    (CL:IF
     (CL:NOT
      (CL:OR
       (CL:EQ
        (SUBTYPE-OF?
         (CLSYS-SVAL CLASS CLASS-TYPE CLASS)
         SGT-DEFCLASS-SECOND-CLASS-OBJECT)
        1)
       (CL:EQ
        (SUBTYPE-OF?
         (CLSYS-SVAL CLASS CLASS-TYPE CLASS)
         SGT-DEFCLASS-NON-OBJECT)
        1)
       (CL:NOT (CL:EQ CLASSNATIVETYPE NULL))
       (CL:EQ (PRIMITIVE? CLASS) 0)))
     TRUE
     FALSE)))
  :VOID)

;;; (DEFUN WARN-ABOUT-MULTIPLE-PARENTS ...)

(CL:DEFUN WARN-ABOUT-MULTIPLE-PARENTS (CLASS)
  (CL:WHEN
   (CL:AND
    (CL:EQ (MULTIPLE-PARENTS? CLASS) 1)
    (CL:EQ (CREATE-NATIVE-CLASS? CLASS) 1))
   (CL:COND
    ((CL:OR
      (CL:EQ *TRANSLATOR-OUTPUT-LANGUAGE* KWD-DEFCLASS-CPP-STANDALONE)
      (CL:EQ *TRANSLATOR-OUTPUT-LANGUAGE* KWD-DEFCLASS-IDL))
     NULL)
    ((CL:OR
      (CL:EQ *TRANSLATOR-OUTPUT-LANGUAGE* KWD-DEFCLASS-COMMON-LISP)
      (CL:EQ *TRANSLATOR-OUTPUT-LANGUAGE* KWD-DEFCLASS-CPP)
      (CL:EQ *TRANSLATOR-OUTPUT-LANGUAGE* KWD-DEFCLASS-JAVA))
     (CL:LET*
      ((NOFSUPERS 0) (NOFMIXINSUPERS 0))
      (CL:LET*
       ((SUPER NULL) (ITER-001 (CLASS-NATIVE-SUPERS CLASS)))
       (CL:LOOP
        WHILE
        (CL:EQ (NEXT? ITER-001) 1)
        DO
        (CL:PROGN (CL:SETQ SUPER (CLSYS-SVAL ITERATOR VALUE ITER-001)))
        (CL:SETQ NOFSUPERS (CL:1+ NOFSUPERS))
        (CL:WHEN
         (CL:EQ
          (CLSYS-SVAL
           CLASS
           MIXIN?
           (CLSYS-SVAL SURROGATE SURROGATE-VALUE SUPER))
          1)
         (CL:SETQ NOFMIXINSUPERS (CL:1+ NOFMIXINSUPERS)))))
      (CL:WHEN
       (CL:> (CL:- NOFSUPERS NOFMIXINSUPERS) 1)
       (CL:LET*
        ((*PRINTREADABLY?* TRUE))
        (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
        (SIGNAL-TRANSLATION-ERROR)
        (CL:WHEN
         (CL:EQ (SUPPRESS-WARNINGS?) 0)
         (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-OUTPUT)
         (CL:LET
          ((%%STREAM
            (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
          (CL:TERPRI %%STREAM)
          (CL:FORCE-OUTPUT %%STREAM)
          (CL:WRITE-STRING " Class `" %%STREAM)
          (CL:WRITE-STRING (CLASS-NAME CLASS) %%STREAM)
          (CL:WRITE-STRING "' illegally inherits `" %%STREAM)
          (CL:PRINC (CL:- NOFSUPERS NOFMIXINSUPERS) %%STREAM)
          (CL:WRITE-STRING "' native non-mixin classes." %%STREAM)
          (CL:TERPRI %%STREAM)
          (CL:FORCE-OUTPUT %%STREAM)))))))
    (CL:T
     (CL:ERROR
      "`~A' is not a valid case option"
      *TRANSLATOR-OUTPUT-LANGUAGE*))))
  :VOID)

;;; (DEFUN WARN-ABOUT-NON-DIRECT-SUPERS ...)

(CL:DEFUN WARN-ABOUT-NON-DIRECT-SUPERS (CLASS)
  (CL:WHEN
   (CL:AND
    (CL:EQ (MULTIPLE-PARENTS? CLASS) 1)
    (CL:EQ (CREATE-NATIVE-CLASS? CLASS) 1))
   (CL:LET*
    ((DIRECTSUPERS (CLSYS-SVAL CLASS CLASS-DIRECT-SUPERS CLASS)))
    (CL:LET*
     ((SUPER NULL) (ITER-001 (CLSYS-SVAL LIST THE-CONS-LIST DIRECTSUPERS)))
     (CL:LOOP
      WHILE
      (CL:NOT (CL:EQ ITER-001 NIL))
      DO
      (CL:PROGN
       (CL:SETQ SUPER (CLSYS-SVAL CONS VALUE ITER-001))
       (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
      (CL:LET*
       ((FOUND?-001 FALSE))
       (CL:LET*
        ((OTHERSUPER NULL)
         (ITER-002 (CLSYS-SVAL LIST THE-CONS-LIST DIRECTSUPERS)))
        (CL:LOOP
         WHILE
         (CL:NOT (CL:EQ ITER-002 NIL))
         DO
         (CL:PROGN
          (CL:SETQ OTHERSUPER (CLSYS-SVAL CONS VALUE ITER-002))
          (CL:SETQ ITER-002 (CLSYS-SVAL CONS REST ITER-002)))
         (CL:WHEN
          (CL:AND
           (CL:NOT (CL:EQ SUPER OTHERSUPER))
           (CL:EQ (SUBTYPE-OF? OTHERSUPER SUPER) 1))
          (CL:SETQ FOUND?-001 TRUE)
          (CL:RETURN))))
       (CL:WHEN
        (CL:EQ FOUND?-001 1)
        (CL:LET*
         ((*PRINTREADABLY?* TRUE))
         (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
         (SIGNAL-TRANSLATION-ERROR)
         (CL:WHEN
          (CL:EQ (SUPPRESS-WARNINGS?) 0)
          (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-OUTPUT)
          (CL:LET
           ((%%STREAM
             (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
           (CL:TERPRI %%STREAM)
           (CL:FORCE-OUTPUT %%STREAM)
           (CL:WRITE-STRING
            " Bad list of supers defined for class `"
            %%STREAM)
           (CL:WRITE-STRING (CLASS-NAME CLASS) %%STREAM)
           (CL:WRITE-STRING "'." %%STREAM)
           (CL:TERPRI %%STREAM)
           (CL:FORCE-OUTPUT %%STREAM)
           (CL:WRITE-STRING " The class `" %%STREAM)
           (CL:WRITE-STRING (CLSYS-SVAL SURROGATE SYMBOL-NAME SUPER) %%STREAM)
           (CL:WRITE-STRING "' is not a direct superclass." %%STREAM)
           (CL:TERPRI %%STREAM)
           (CL:FORCE-OUTPUT %%STREAM))))
        (CL:RETURN-FROM WARN-ABOUT-NON-DIRECT-SUPERS)))))))
  :VOID)

;;; (DEFUN (SPACE-SAVER-SLOT-ALLOCATION? BOOLEAN) ...)

(CL:DEFUN SPACE-SAVER-SLOT-ALLOCATION? (SLOT)
  (CL:COND
   ((CL:EQ (ALLOCATION SLOT) KWD-DEFCLASS-DYNAMIC)
    (CL:WHEN
     (CL:NOT
      (CL:EQ
       (DYNAMIC-SLOT-VALUE SLOT SYM-DEFCLASS-SLOT-INITIAL-VALUE NULL)
       NULL))
     (CL:WARN
      "Dynamic slot `~A' should not have an~%   initial value (or it shouldn't be dynamic)."
      (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT)))
    (CL:RETURN-FROM SPACE-SAVER-SLOT-ALLOCATION? TRUE))
   ((CL:OR
     (CL:EQ (ALLOCATION SLOT) KWD-DEFCLASS-BIT)
     (CL:AND
      (CL:EQ (TYPE SLOT) SGT-DEFCLASS-BOOLEAN)
      (CL:EQ (SLOT-ALLOCATION SLOT) NULL)))
    (CL:RETURN-FROM SPACE-SAVER-SLOT-ALLOCATION? TRUE))
   (CL:T (CL:RETURN-FROM SPACE-SAVER-SLOT-ALLOCATION? FALSE)))
  :VOID)

;;; (DEFUN (REDUNDANT-SLOT? BOOLEAN) ...)

(CL:DEFUN REDUNDANT-SLOT? (SLOT)
  (CL:LET*
   ((EQUIVSLOT (CLSYS-SVAL STORAGE-SLOT SLOT-DIRECT-EQUIVALENT SLOT)))
   (CL:RETURN-FROM
    REDUNDANT-SLOT?
    (CL:IF
     (CL:AND
      (CL:NOT (CL:EQ EQUIVSLOT NULL))
      (CL:EQ
       (DYNAMIC-SLOT-VALUE SLOT SYM-DEFCLASS-SLOT-RENAMES NULL)
       (CLSYS-SVAL SLOT SLOT-NAME EQUIVSLOT)))
     TRUE
     FALSE)))
  :VOID)

;;; (DEFUN (NATIVE-SLOT? BOOLEAN) ...)

(CL:DEFUN NATIVE-SLOT? (SLOT)
  (CL:RETURN-FROM
   NATIVE-SLOT?
   (CL:IF
    (CL:AND
     (CL:EQ (CLSYS-SVAL STORAGE-SLOT ABSTRACT? SLOT) 0)
     (CL:EQ (CLSYS-SVAL STORAGE-SLOT SLOT-HARDWIRED? SLOT) 0)
     (CL:EQ (SPACE-SAVER-SLOT-ALLOCATION? SLOT) 0)
     (CL:EQ (REDUNDANT-SLOT? SLOT) 0))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN (CANONICAL-SLOT STORAGE-SLOT) ...)

(CL:DEFUN CANONICAL-SLOT (SLOT)
  (CL:LET*
   ((CANONICALSLOT SLOT))
   (CL:LOOP
    WHILE
    (CL:AND
     (CL:NOT
      (CL:EQ
       (CLSYS-SVAL STORAGE-SLOT SLOT-DIRECT-EQUIVALENT CANONICALSLOT)
       NULL))
     (CL:EQ
      (CLSYS-SVAL
       SLOT
       SLOT-NAME
       (CLSYS-SVAL STORAGE-SLOT SLOT-DIRECT-EQUIVALENT CANONICALSLOT))
      (DYNAMIC-SLOT-VALUE CANONICALSLOT SYM-DEFCLASS-SLOT-RENAMES NULL)))
    DO
    (CL:SETQ
     CANONICALSLOT
     (CLSYS-SVAL STORAGE-SLOT SLOT-DIRECT-EQUIVALENT CANONICALSLOT)))
   (CL:RETURN-FROM CANONICAL-SLOT CANONICALSLOT))
  :VOID)

;;; (DEFUN (UNKNOWN-TYPE? BOOLEAN) ...)

(CL:DEFUN UNKNOWN-TYPE? (TYPE)
  (CL:RETURN-FROM
   UNKNOWN-TYPE?
   (CL:IF
    (CL:OR
     (CL:EQ TYPE SGT-DEFCLASS-UNKNOWN)
     (CL:EQ (TYPE-TO-CLASS TYPE) NULL)
     (CL:EQ (TYPE-TO-CLASS TYPE) (TYPE-TO-CLASS SGT-DEFCLASS-UNKNOWN))
     (CL:AND
      (CL:EQ (SUBTYPE-OF? TYPE SGT-DEFCLASS-NON-OBJECT) 1)
      (CL:EQ (CLSYS-SVAL CLASS ABSTRACT? (TYPE-TO-CLASS TYPE)) 1)))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN (SLOT-HAS-UNKNOWN-TYPE? BOOLEAN) ...)

(CL:DEFUN SLOT-HAS-UNKNOWN-TYPE? (SLOT CLASS)
  (CL:RETURN-FROM
   SLOT-HAS-UNKNOWN-TYPE?
   (UNKNOWN-TYPE?
    (TYPE-SPEC-TO-BASE-TYPE
     (COMPUTE-RETURN-TYPE-SPEC SLOT (CLSYS-SVAL CLASS CLASS-TYPE CLASS)))))
  :VOID)

;;; (DEFUN (NATIVE-SLOT-HOME CLASS) ...)

(CL:DEFUN NATIVE-SLOT-HOME (SLOT CLASS)
  (CL:LET*
   ((SLOTWITHKNOWNTYPE NULL))
   (CL:LOOP
    (CL:WHEN (CL:EQ (UNKNOWN-TYPE? (TYPE SLOT)) 1) (CL:RETURN))
    (CL:SETQ SLOTWITHKNOWNTYPE SLOT)
    (CL:SETQ CLASS (TYPE-TO-CLASS (CLSYS-SVAL STORAGE-SLOT SLOT-OWNER SLOT)))
    (CL:IF
     (CL:AND
      (CL:NOT
       (CL:EQ (CLSYS-SVAL STORAGE-SLOT SLOT-DIRECT-EQUIVALENT SLOT) NULL))
      (CL:EQ
       (NATIVE-SLOT? (CLSYS-SVAL STORAGE-SLOT SLOT-DIRECT-EQUIVALENT SLOT))
       1))
     (CL:SETQ SLOT (CLSYS-SVAL STORAGE-SLOT SLOT-DIRECT-EQUIVALENT SLOT))
     (CL:RETURN)))
   (CL:WHEN
    (CL:NOT (CL:EQ SLOTWITHKNOWNTYPE NULL))
    (CL:RETURN-FROM NATIVE-SLOT-HOME CLASS))
   (CL:WHEN
    (CL:EQ (SLOT-HAS-UNKNOWN-TYPE? SLOT CLASS) 1)
    (CL:RETURN-FROM NATIVE-SLOT-HOME NULL))
   (CL:LET*
    ((SUPER NULL) (ITER-001 (CLSYS-SVAL CLASS CLASS-ALL-SUPER-CLASSES CLASS)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ SUPER (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:IF
      (CL:EQ (SLOT-HAS-UNKNOWN-TYPE? SLOT SUPER) 1)
      (CL:RETURN-FROM NATIVE-SLOT-HOME CLASS)
      (CL:SETQ CLASS SUPER))))
   (CL:RETURN-FROM NATIVE-SLOT-HOME CLASS))
  :VOID)

;;; (DEFUN (MIXIN-SLOT-HOME CLASS) ...)

(CL:DEFUN MIXIN-SLOT-HOME (SLOT CLASS)
  (CL:LET*
   ((NATIVESLOTHOME (NATIVE-SLOT-HOME SLOT CLASS)) (CANDIDATE CLASS))
   (CL:WHEN
    (CL:NOT
     (CL:AND
      (CL:NOT (CL:EQ NATIVESLOTHOME NULL))
      (CL:EQ (CLSYS-SVAL CLASS MIXIN? NATIVESLOTHOME) 1)
      (CL:EQ (TRANSLATE-TO-SINGLE-INHERITANCE-LANGUAGE?) 1)))
    (CL:RETURN-FROM MIXIN-SLOT-HOME NATIVESLOTHOME))
   (CL:WHEN
    (CL:EQ (CLSYS-SVAL CLASS MIXIN? CANDIDATE) 1)
    (CL:RETURN-FROM MIXIN-SLOT-HOME NULL))
   (CL:LET*
    ((SUPERCLASS NULL)
     (ITER-001 (CLSYS-SVAL CLASS CLASS-ALL-SUPER-CLASSES CLASS)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ SUPERCLASS (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:WHEN
      (CL:AND
       (CL:EQ (CLSYS-SVAL CLASS MIXIN? SUPERCLASS) 0)
       (CL:EQ
        (MEMBER?
         (CLSYS-SVAL CLASS CLASS-ALL-SUPER-CLASSES SUPERCLASS)
         NATIVESLOTHOME)
        1))
      (CL:SETQ CANDIDATE SUPERCLASS))))
   (CL:RETURN-FROM MIXIN-SLOT-HOME CANDIDATE))
  :VOID)

;;; (DEFMETHOD SWEEP ...)

(CL:DEFMETHOD SWEEP ((SELF OBJECT))
  "Default method.  Sweep up all 'self'-type objects."
  NULL
  :VOID)

;;; (DEFUN SWEEP-TRANSIENTS ...)

(CL:DEFUN SWEEP-TRANSIENTS ()
  (SWEEP (NEW-TRANSIENT-INTEGER-WRAPPER NULL-INTEGER))
  (SWEEP (NEW-TRANSIENT-FLOAT-WRAPPER NULL-FLOAT))
  (SWEEP (NEW-TRANSIENT-STRING-WRAPPER NULL))
  (SWEEP (NEW-VERBATIM-STRING-WRAPPER NULL))
  (SWEEP (NEW-TRANSIENT-CHARACTER-WRAPPER NULL-CHARACTER))
  (SWEEP (NEW-TRANSIENT-FUNCTION-CODE-WRAPPER NULL))
  (SWEEP (NEW-TRANSIENT-METHOD-CODE-WRAPPER NULL))
  (SWEEP (NEW-TRANSIENT-CONS))
  (SWEEP (NEW-TRANSIENT-TYPE-SPECIFIER))
  :VOID)

;;; (DEFUN (YIELD-RECYCLE-LIST-NAME SYMBOL) ...)

(CL:DEFUN YIELD-RECYCLE-LIST-NAME (CLASS)
  (CL:RETURN-FROM
   YIELD-RECYCLE-LIST-NAME
   (INTERN-DERIVED-SYMBOL
    (CLSYS-SVAL CLASS CLASS-TYPE CLASS)
    (CONCATENATE "*RECYCLED-" (CONCATENATE (CLASS-NAME CLASS) "-S*"))))
  :VOID)

;;; (DEFUN (YIELD-SWEEP-LIST-NAME SYMBOL) ...)

(CL:DEFUN YIELD-SWEEP-LIST-NAME (CLASS)
  (CL:RETURN-FROM
   YIELD-SWEEP-LIST-NAME
   (INTERN-DERIVED-SYMBOL
    (CLSYS-SVAL CLASS CLASS-TYPE CLASS)
    (CONCATENATE "*ALL-" (CONCATENATE (CLASS-NAME CLASS) "-S*"))))
  :VOID)

;;; (DEFUN (YIELD-SWEEP-LIST-POINTER-NAME SYMBOL) ...)

(CL:DEFUN YIELD-SWEEP-LIST-POINTER-NAME (CLASS)
  (CL:RETURN-FROM
   YIELD-SWEEP-LIST-POINTER-NAME
   (INTERN-DERIVED-SYMBOL
    (CLSYS-SVAL CLASS CLASS-TYPE CLASS)
    (CONCATENATE "*UNUSED-" (CONCATENATE (CLASS-NAME CLASS) "-S*"))))
  :VOID)

;;; (DEFUN (RECYCLE-SLOT STORAGE-SLOT) ...)

(CL:DEFUN RECYCLE-SLOT (CLASS)
  (CL:LET*
   ((INSTANCETYPE (CLSYS-SVAL CLASS CLASS-TYPE CLASS)) (RECYCLESLOT NULL))
   (CL:LET*
    ((SLOT NULL) (ITER-001 (CLASS-SLOTS CLASS)))
    (CL:LOOP
     WHILE
     (CL:EQ (NEXT? ITER-001) 1)
     DO
     (CL:PROGN (CL:SETQ SLOT (CLSYS-SVAL ITERATOR VALUE ITER-001)))
     (CL:LET*
      ((SLOT-001 SLOT))
      (CL:COND
       ((CL:EQ (STORAGE-SLOT? SLOT) 1)
        (CL:LET*
         ((SLOT NULL))
         (CL:SETQ SLOT SLOT-001)
         (CL:WHEN
          (CL:AND
           (CL:NOT
            (CL:EQ
             (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT)
             SYM-DEFCLASS-NEXT-SWEEP-LIST-OBJECT))
           (CL:EQ (NATIVE-SLOT? SLOT) 1))
          (CL:WHEN
           (CL:EQ INSTANCETYPE (CLSYS-SVAL STORAGE-SLOT SLOT-BASE-TYPE SLOT))
           (CL:RETURN-FROM RECYCLE-SLOT SLOT))
          (CL:WHEN
           (CL:AND
            (CL:NOT
             (CL:EQ
              (CLSYS-SVAL
               SURROGATE
               SURROGATE-VALUE
               (CLSYS-SVAL STORAGE-SLOT SLOT-BASE-TYPE SLOT))
              NULL))
            (CL:EQ
             (SUBTYPE-OF?
              INSTANCETYPE
              (CLSYS-SVAL STORAGE-SLOT SLOT-BASE-TYPE SLOT))
             1))
           (CL:SETQ RECYCLESLOT SLOT)))))
       (CL:T NULL)))))
   (CL:RETURN-FROM RECYCLE-SLOT RECYCLESLOT))
  :VOID)

;;; (DEFUN (USE-FREE-LIST? BOOLEAN) ...)

(CL:DEFUN USE-FREE-LIST? (CLASS)
  (CL:RETURN-FROM
   USE-FREE-LIST?
   (MEMBER?
    (GET-QUOTED-TREE
     "((:FREE-LIST :FREE-AND-SWEEP-LIST) \"/STELLA\")"
     "/STELLA")
    (CLASS-RECYCLE-METHOD CLASS)))
  :VOID)

;;; (DEFUN (USE-SWEEP-LIST? BOOLEAN) ...)

(CL:DEFUN USE-SWEEP-LIST? (CLASS)
  (CL:RETURN-FROM
   USE-SWEEP-LIST?
   (MEMBER?
    (GET-QUOTED-TREE
     "((:SWEEP-LIST :FREE-AND-SWEEP-LIST) \"/STELLA\")"
     "/STELLA")
    (CLASS-RECYCLE-METHOD CLASS)))
  :VOID)

;;; (DEFUN (DECIDED-TO-RECYCLE? BOOLEAN) ...)

(CL:DEFUN DECIDED-TO-RECYCLE? (CLASS)
  (CL:RETURN-FROM
   DECIDED-TO-RECYCLE?
   (CL:IF
    (CL:AND
     (CL:NOT
      (CL:OR
       (CL:EQ (CLSYS-SVAL CLASS ABSTRACT? CLASS) 1)
       (CL:NOT
        (CL:EQ
         (DYNAMIC-SLOT-VALUE CLASS SYM-DEFCLASS-CLASS-CREATOR NULL)
         NULL))))
     (CL:OR
      (CL:EQ (USE-FREE-LIST? CLASS) 1)
      (CL:EQ (USE-SWEEP-LIST? CLASS) 1)))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN (MAKE-NON-RECYCLED-LIST LIST) ...)

(CL:DEFUN MAKE-NON-RECYCLED-LIST ()
  (CL:LET*
   ((LIST (CL:MAKE-INSTANCE (CL:QUOTE LIST))))
   (CL:SETF (CLSYS-SVAL LIST THE-CONS-LIST LIST) NIL)
   (CL:RETURN-FROM MAKE-NON-RECYCLED-LIST LIST))
  :VOID)

;;; (DEFUN (YIELD-RECYCLE-LIST-DEFINITIONS CONS) ...)

(CL:DEFUN YIELD-RECYCLE-LIST-DEFINITIONS (CLASS)
  (CL:LET*
   ((DEFINITIONS NIL) (RECYCLELISTNAME NULL))
   (CL:WHEN
    (CL:EQ (USE-FREE-LIST? CLASS) 1)
    (CL:SETQ RECYCLELISTNAME (YIELD-RECYCLE-LIST-NAME CLASS))
    (CL:COND
     ((CL:NOT (CL:EQ (RECYCLE-SLOT CLASS) NULL))
      (CL:SETQ
       DEFINITIONS
       (CONS
        (LIST*
         SYM-DEFCLASS-DEFGLOBAL
         RECYCLELISTNAME
         (CONS (CLASS-SYMBOL CLASS) (CONS SYM-DEFCLASS-NULL NIL)))
        DEFINITIONS)))
     (CL:T
      (CL:SETQ
       DEFINITIONS
       (CONS
        (LIST*
         SYM-DEFCLASS-DEFGLOBAL
         RECYCLELISTNAME
         (LIST*
          (LIST* SYM-DEFCLASS-LIST SYM-DEFCLASS-OF (CLASS-SYMBOL CLASS) NIL)
          SYM-DEFCLASS-NULL
          NIL))
        DEFINITIONS))
      (CL:SETQ
       DEFINITIONS
       (CONS
        (LIST*
         SYM-DEFCLASS-STARTUP-TIME-PROGN
         KWD-DEFCLASS-EARLY-INITS
         (LIST*
          SYM-DEFCLASS-SETQ
          RECYCLELISTNAME
          (CONS (CONS SYM-DEFCLASS-MAKE-NON-RECYCLED-LIST NIL) NIL))
         NIL)
        DEFINITIONS)))))
   (CL:WHEN
    (CL:EQ (USE-SWEEP-LIST? CLASS) 1)
    (CL:SETQ
     DEFINITIONS
     (CONS
      (LIST*
       SYM-DEFCLASS-DEFGLOBAL
       (YIELD-SWEEP-LIST-NAME CLASS)
       (CONS (CLASS-SYMBOL CLASS) (CONS SYM-DEFCLASS-NULL NIL)))
      DEFINITIONS))
    (CL:SETQ
     DEFINITIONS
     (CONS
      (LIST*
       SYM-DEFCLASS-DEFGLOBAL
       (YIELD-SWEEP-LIST-POINTER-NAME CLASS)
       (CONS (CLASS-SYMBOL CLASS) (CONS SYM-DEFCLASS-NULL NIL)))
      DEFINITIONS)))
   (CL:RETURN-FROM YIELD-RECYCLE-LIST-DEFINITIONS (REVERSE DEFINITIONS)))
  :VOID)

;;; (DEFUN (YIELD-MAKE-TREES CONS) ...)

(CL:DEFUN YIELD-MAKE-TREES (CLASS)
  (CL:RETURN-FROM
   YIELD-MAKE-TREES
   (CONS
    (LIST*
     SYM-DEFCLASS-SETQ
     SYM-DEFCLASS-SELF
     (LIST* SYM-DEFCLASS-MAKE (CLASS-SYMBOL CLASS) NIL)
     NIL)
    NIL))
  :VOID)

;;; (DEFUN (YIELD-CONSTRUCTOR-NAME SYMBOL) ...)

(CL:DEFUN YIELD-CONSTRUCTOR-NAME (CLASS)
  (CL:RETURN-FROM
   YIELD-CONSTRUCTOR-NAME
   (INTERN-DERIVED-SYMBOL
    (CLSYS-SVAL CLASS CLASS-TYPE CLASS)
    (CONCATENATE "NEW-" (CLASS-NAME CLASS))))
  :VOID)

;;; (DEFUN (YIELD-CREATION-TREES CONS) ...)

(CL:DEFUN YIELD-CREATION-TREES (CLASS)
  (CL:COND
   ((CL:NOT
     (CL:EQ (DYNAMIC-SLOT-VALUE CLASS SYM-DEFCLASS-CLASS-CREATOR NULL) NULL))
    (CL:WHEN
     (CL:EQ
      (DYNAMIC-SLOT-VALUE CLASS SYM-DEFCLASS-CLASS-CREATOR NULL)
      (YIELD-CONSTRUCTOR-NAME CLASS))
     (CL:WARN
      "Illegal creator name `~A' for the class ~%`~A'.  Using the default creator."
      (DYNAMIC-SLOT-VALUE CLASS SYM-DEFCLASS-CLASS-CREATOR NULL)
      (CLASS-NAME CLASS))
     (CL:RETURN-FROM YIELD-CREATION-TREES (YIELD-MAKE-TREES CLASS)))
    (CL:RETURN-FROM
     YIELD-CREATION-TREES
     (CONS
      (LIST*
       SYM-DEFCLASS-SETQ
       SYM-DEFCLASS-SELF
       (CONS (DYNAMIC-SLOT-VALUE CLASS SYM-DEFCLASS-CLASS-CREATOR NULL) NIL)
       NIL)
      NIL)))
   ((CL:EQ (DECIDED-TO-RECYCLE? CLASS) 1)
    (CL:RETURN-FROM
     YIELD-CREATION-TREES
     (YIELD-CREATION-OR-REUSE-TREES CLASS)))
   (CL:T (CL:RETURN-FROM YIELD-CREATION-TREES (YIELD-MAKE-TREES CLASS))))
  :VOID)

;;; (DEFUN (YIELD-TERMINATE-OBJECT-TREES CONS) ...)

(CL:DEFUN YIELD-TERMINATE-OBJECT-TREES (CLASS)
  (CL:LET*
   ((TREES NIL) (TERMINATOR (TERMINATOR CLASS)))
   (CL:LET*
    ((SLOT NULL) (ITER-001 (CLASS-SLOTS CLASS)))
    (CL:LOOP
     WHILE
     (CL:EQ (NEXT? ITER-001) 1)
     DO
     (CL:PROGN (CL:SETQ SLOT (CLSYS-SVAL ITERATOR VALUE ITER-001)))
     (CL:LET*
      ((SLOT-001 SLOT))
      (CL:COND
       ((CL:EQ (STORAGE-SLOT? SLOT) 1)
        (CL:LET*
         ((SLOT NULL))
         (CL:SETQ SLOT SLOT-001)
         (CL:WHEN
          (CL:EQ (COMPONENT? SLOT) 1)
          (CL:SETQ
           TREES
           (CONS
            (LIST*
             SYM-DEFCLASS-WHEN
             (LIST*
              SYM-DEFCLASS-DEFINED?
              (CONS
               (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT)
               (CONS SYM-DEFCLASS-SELF NIL))
              NIL)
             (LIST*
              SYM-DEFCLASS-FREE
              (CONS
               (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT)
               (CONS SYM-DEFCLASS-SELF NIL))
              NIL)
             NIL)
            TREES)))))
       (CL:T NULL)))))
   (CL:WHEN
    (CL:NOT (CL:EQ (LOOKUP-SLOT CLASS SYM-DEFCLASS-DYNAMIC-SLOTS) NULL))
    (CL:SETQ
     TREES
     (CONS
      (LIST*
       SYM-DEFCLASS-CLEAR
       (LIST* SYM-DEFCLASS-DYNAMIC-SLOTS SYM-DEFCLASS-SELF NIL)
       NIL)
      TREES)))
   (CL:WHEN
    (CL:NOT (CL:EQ TERMINATOR NULL))
    (CL:IF
     (CL:EQ (USE-SWEEP-LIST? CLASS) 1)
     (CL:SETQ
      TREES
      (CONS (CONS TERMINATOR (CONS SYM-DEFCLASS-SELF NIL)) TREES))
     (CL:SETQ
      TREES
      (CONS
       (LIST*
        SYM-DEFCLASS-UNLESS
        (CONS TERMINATOR (CONS SYM-DEFCLASS-SELF NIL))
        (CONS SYM-DEFCLASS-RETURN NIL)
        NIL)
       TREES))))
   (CL:RETURN-FROM YIELD-TERMINATE-OBJECT-TREES (REVERSE TREES)))
  :VOID)

;;; (DEFUN (YIELD-CREATION-OR-REUSE-TREES CONS) ...)

(CL:DEFUN YIELD-CREATION-OR-REUSE-TREES (CLASS)
  (CL:LET*
   ((RECYCLESLOT (RECYCLE-SLOT CLASS))
    (RECYCLESLOTNAME NULL)
    (USEFREELIST? (USE-FREE-LIST? CLASS))
    (USESWEEPLIST? (USE-SWEEP-LIST? CLASS))
    (RECYCLELIST NULL)
    (SWEEPLIST NULL)
    (SWEEPLISTPOINTER NULL)
    (RECYCLELISTPOPTREE NULL)
    (RECYCLELISTBUMPTREE NULL)
    (SWEEPLISTBUMPTREE NULL))
   (CL:WHEN
    (CL:EQ USEFREELIST? 1)
    (CL:SETQ RECYCLELIST (YIELD-RECYCLE-LIST-NAME CLASS))
    (CL:COND
     ((CL:NOT (CL:EQ RECYCLESLOT NULL))
      (CL:SETQ
       RECYCLESLOTNAME
       (CLSYS-SVAL STORAGE-SLOT SLOT-NAME RECYCLESLOT))
      (CL:SETQ RECYCLELISTPOPTREE RECYCLELIST)
      (CL:SETQ
       RECYCLELISTBUMPTREE
       (CL:IF
        (CL:EQ
         (CLSYS-SVAL STORAGE-SLOT SLOT-BASE-TYPE RECYCLESLOT)
         (CLSYS-SVAL CLASS CLASS-TYPE CLASS))
        (CONS
         (LIST*
          SYM-DEFCLASS-SETQ
          RECYCLELIST
          (CONS
           (LIST*
            SYM-DEFCLASS-SLOT-VALUE
            SYM-DEFCLASS-SELF
            RECYCLESLOTNAME
            NIL)
           NIL))
         NIL)
        (CONS
         (LIST*
          SYM-DEFCLASS-SETQ
          RECYCLELIST
          (CONS
           (LIST*
            SYM-DEFCLASS-SAFE-CAST
            (LIST*
             SYM-DEFCLASS-SLOT-VALUE
             SYM-DEFCLASS-SELF
             RECYCLESLOTNAME
             NIL)
            (CLASS-SYMBOL CLASS)
            NIL)
           NIL))
         NIL))))
     (CL:T
      (CL:SETQ RECYCLELISTBUMPTREE NIL)
      (CL:SETQ RECYCLELISTPOPTREE (LIST* SYM-DEFCLASS-POP RECYCLELIST NIL)))))
   (CL:WHEN
    (CL:EQ USESWEEPLIST? 1)
    (CL:SETQ SWEEPLIST (YIELD-SWEEP-LIST-NAME CLASS))
    (CL:SETQ SWEEPLISTPOINTER (YIELD-SWEEP-LIST-POINTER-NAME CLASS))
    (CL:SETQ
     SWEEPLISTBUMPTREE
     (CONS
      (LIST*
       SYM-DEFCLASS-SETQ
       SWEEPLISTPOINTER
       (CONS
        (LIST* SYM-DEFCLASS-NEXT-SWEEP-LIST-OBJECT SWEEPLISTPOINTER NIL)
        NIL))
      (CONCATENATE (YIELD-TERMINATE-OBJECT-TREES CLASS) NIL))))
   (CL:RETURN-FROM
    YIELD-CREATION-OR-REUSE-TREES
    (LIST*
     (LIST*
      SYM-DEFCLASS-SETQ
      SYM-DEFCLASS-SELF
      (CL:IF (CL:EQ USEFREELIST? 1) RECYCLELISTPOPTREE SWEEPLISTPOINTER)
      NIL)
     (LIST*
      SYM-DEFCLASS-COND
      (CONS
       (LIST* SYM-DEFCLASS-DEFINED? SYM-DEFCLASS-SELF NIL)
       (CONCATENATE
        (CL:IF (CL:EQ USEFREELIST? 1) RECYCLELISTBUMPTREE SWEEPLISTBUMPTREE)
        NIL))
      (CONCATENATE
       (CL:IF
        (CL:AND (CL:EQ USEFREELIST? 1) (CL:EQ USESWEEPLIST? 1))
        (CONS
         (LIST*
          (LIST* SYM-DEFCLASS-DEFINED? SWEEPLISTPOINTER NIL)
          (LIST* SYM-DEFCLASS-SETQ SYM-DEFCLASS-SELF SWEEPLISTPOINTER NIL)
          (CONCATENATE SWEEPLISTBUMPTREE NIL))
         NIL)
        NIL)
       (CONS
        (CONS
         SYM-DEFCLASS-OTHERWISE
         (CONCATENATE
          (YIELD-MAKE-TREES CLASS)
          (CONCATENATE
           (CL:IF
            (CL:EQ USESWEEPLIST? 1)
            (LIST*
             (LIST*
              SYM-DEFCLASS-SETF
              (LIST*
               SYM-DEFCLASS-NEXT-SWEEP-LIST-OBJECT
               SYM-DEFCLASS-SELF
               NIL)
              SWEEPLIST
              NIL)
             (LIST* SYM-DEFCLASS-SETQ SWEEPLIST (CONS SYM-DEFCLASS-SELF NIL))
             NIL)
            NIL)
           NIL)))
        NIL)))
     NIL)))
  :VOID)

;;; (DEFUN MARK-DIRECT-EQUIVALENT-SLOT ...)

(CL:DEFUN MARK-DIRECT-EQUIVALENT-SLOT (SLOT)
  (CL:LET*
   ((DIRECTEQUIVALENT (CLSYS-SVAL SLOT SLOT-DIRECT-EQUIVALENT SLOT)))
   (CL:WHEN
    (CL:NOT (CL:EQ DIRECTEQUIVALENT NULL))
    (CL:IF
     (CL:EQ (CLSYS-SVAL SLOT SLOT-MARKED? DIRECTEQUIVALENT) 1)
     (CL:SETF (CLSYS-SVAL SLOT SLOT-MARKED? SLOT) TRUE)
     (CL:SETF (CLSYS-SVAL SLOT SLOT-MARKED? DIRECTEQUIVALENT) TRUE))))
  :VOID)

;;; (DEFUN (IS-CONTEXT-SENSITIVE-SLOT? BOOLEAN) ...)

(CL:DEFUN IS-CONTEXT-SENSITIVE-SLOT? (SLOT)
  (CL:RETURN-FROM
   IS-CONTEXT-SENSITIVE-SLOT?
   (CL:IF
    (CL:OR
     (CL:EQ (CLSYS-SVAL STORAGE-SLOT SLOT-CONTEXT-SENSITIVE? SLOT) 1)
     (CL:AND
      (CL:NOT
       (CL:EQ (CLSYS-SVAL STORAGE-SLOT SLOT-DIRECT-EQUIVALENT SLOT) NULL))
      (CL:EQ
       (IS-CONTEXT-SENSITIVE-SLOT?
        (CLSYS-SVAL STORAGE-SLOT SLOT-DIRECT-EQUIVALENT SLOT))
       1)))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN (YIELD-INITIAL-VALUE-ASSIGNMENT CONS) ...)

(CL:DEFUN YIELD-INITIAL-VALUE-ASSIGNMENT (SLOT)
  (CL:LET*
   ((INITIALVALUEEXPRESSION (YIELD-INITIAL-VALUE-EXPRESSION SLOT)))
   (CL:IF
    (CL:AND
     (CL:NOT (CL:EQ INITIALVALUEEXPRESSION NULL))
     (CL:EQ (REQUIRED? SLOT) 0)
     (CL:NOT
      (CL:EQ
       (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT)
       SYM-DEFCLASS-NEXT-SWEEP-LIST-OBJECT)))
    (CL:RETURN-FROM
     YIELD-INITIAL-VALUE-ASSIGNMENT
     (LIST*
      SYM-DEFCLASS-SETF
      (LIST*
       SYM-DEFCLASS-SLOT-VALUE
       SYM-DEFCLASS-SELF
       (CLSYS-SVAL STORAGE-SLOT SLOT-NAME (CANONICAL-SLOT SLOT))
       (CONCATENATE
        (CL:IF
         (CL:EQ (IS-CONTEXT-SENSITIVE-SLOT? SLOT) 1)
         (LIST* KWD-DEFCLASS-CONTEXT-SENSITIVE? SYM-DEFCLASS-FALSE NIL)
         NIL)
        NIL))
      INITIALVALUEEXPRESSION
      NIL))
    (CL:RETURN-FROM YIELD-INITIAL-VALUE-ASSIGNMENT NULL)))
  :VOID)

;;; (DEFUN (YIELD-INITIAL-VALUE-ASSIGNMENTS CONS) ...)

(CL:DEFUN YIELD-INITIAL-VALUE-ASSIGNMENTS (CLASS)
  (CL:LET*
   ((ASSIGNMENTS NIL) (INITIALVALUEASSIGNMENT NULL))
   (CL:LET*
    ((SLOT NULL) (ITER-001 (CLASS-SLOTS CLASS)))
    (CL:LOOP
     WHILE
     (CL:EQ (NEXT? ITER-001) 1)
     DO
     (CL:PROGN (CL:SETQ SLOT (CLSYS-SVAL ITERATOR VALUE ITER-001)))
     (CL:SETF (CLSYS-SVAL SLOT SLOT-MARKED? SLOT) FALSE)))
   (CL:LET*
    ((SLOT NULL) (ITER-002 (CLASS-SLOTS CLASS)))
    (CL:LOOP
     WHILE
     (CL:EQ (NEXT? ITER-002) 1)
     DO
     (CL:PROGN (CL:SETQ SLOT (CLSYS-SVAL ITERATOR VALUE ITER-002)))
     (MARK-DIRECT-EQUIVALENT-SLOT SLOT)))
   (CL:LET*
    ((SLOT NULL) (ITER-003 (CLASS-SLOTS CLASS)))
    (CL:LOOP
     WHILE
     (CL:EQ (NEXT? ITER-003) 1)
     DO
     (CL:PROGN (CL:SETQ SLOT (CLSYS-SVAL ITERATOR VALUE ITER-003)))
     (CL:WHEN
      (CL:AND
       (CL:EQ (CLSYS-SVAL SLOT SLOT-MARKED? SLOT) 0)
       (CL:EQ (STORAGE-SLOT? SLOT) 1))
      (CL:SETQ INITIALVALUEASSIGNMENT (YIELD-INITIAL-VALUE-ASSIGNMENT SLOT))
      (CL:WHEN
       (CL:NOT (CL:EQ INITIALVALUEASSIGNMENT NULL))
       (CL:SETQ ASSIGNMENTS (CONS INITIALVALUEASSIGNMENT ASSIGNMENTS))))))
   (CL:RETURN-FROM YIELD-INITIAL-VALUE-ASSIGNMENTS ASSIGNMENTS))
  :VOID)

;;; (DEFUN (YIELD-LOCAL-INITIAL-VALUE-ASSIGNMENTS CONS) ...)

(CL:DEFUN YIELD-LOCAL-INITIAL-VALUE-ASSIGNMENTS (CLASS)
  (CL:LET*
   ((ASSIGNMENTS NIL) (INITIALVALUEASSIGNMENT NULL))
   (CL:LET*
    ((SLOT NULL)
     (ITER-001
      (CLSYS-SVAL
       LIST
       THE-CONS-LIST
       (CLSYS-SVAL CLASS CLASS-LOCAL-SLOTS CLASS))))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ SLOT (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:SETF (CLSYS-SVAL SLOT SLOT-MARKED? SLOT) FALSE)))
   (CL:LET*
    ((SLOT NULL)
     (ITER-002
      (CLSYS-SVAL
       LIST
       THE-CONS-LIST
       (CLSYS-SVAL CLASS CLASS-LOCAL-SLOTS CLASS))))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-002 NIL))
     DO
     (CL:PROGN
      (CL:SETQ SLOT (CLSYS-SVAL CONS VALUE ITER-002))
      (CL:SETQ ITER-002 (CLSYS-SVAL CONS REST ITER-002)))
     (MARK-DIRECT-EQUIVALENT-SLOT SLOT)))
   (CL:LET*
    ((SLOT NULL)
     (ITER-003
      (CLSYS-SVAL
       LIST
       THE-CONS-LIST
       (CLSYS-SVAL CLASS CLASS-LOCAL-SLOTS CLASS))))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-003 NIL))
     DO
     (CL:PROGN
      (CL:SETQ SLOT (CLSYS-SVAL CONS VALUE ITER-003))
      (CL:SETQ ITER-003 (CLSYS-SVAL CONS REST ITER-003)))
     (CL:WHEN
      (CL:AND
       (CL:EQ (CLSYS-SVAL SLOT SLOT-MARKED? SLOT) 0)
       (CL:EQ (STORAGE-SLOT? SLOT) 1))
      (CL:SETQ INITIALVALUEASSIGNMENT (YIELD-INITIAL-VALUE-ASSIGNMENT SLOT))
      (CL:WHEN
       (CL:NOT (CL:EQ INITIALVALUEASSIGNMENT NULL))
       (CL:SETQ ASSIGNMENTS (CONS INITIALVALUEASSIGNMENT ASSIGNMENTS))))))
   (CL:RETURN-FROM YIELD-LOCAL-INITIAL-VALUE-ASSIGNMENTS (REVERSE ASSIGNMENTS)))
  :VOID)

;;; (DEFUN (YIELD-CONSTRUCTOR-BODY CONS) ...)

(CL:DEFUN YIELD-CONSTRUCTOR-BODY (CLASS REQUIREDASSIGNMENTS)
  (CL:LET*
   ((INITIALVALUEASSIGNMENTS (YIELD-INITIAL-VALUE-ASSIGNMENTS CLASS)))
   (CL:WHEN
    (CL:AND
     (CL:EQ INITIALVALUEASSIGNMENTS NIL)
     (CL:EQ REQUIREDASSIGNMENTS NIL)
     (CL:EQ (INITIALIZER CLASS) NULL)
     (CL:EQ (ACTIVE? CLASS) 0)
     (CL:EQ (DECIDED-TO-RECYCLE? CLASS) 0))
    (CL:RETURN-FROM YIELD-CONSTRUCTOR-BODY (YIELD-CREATION-TREES CLASS)))
   (CL:RETURN-FROM
    YIELD-CONSTRUCTOR-BODY
    (CONCATENATE
     (YIELD-CREATION-TREES CLASS)
     (CONCATENATE
      INITIALVALUEASSIGNMENTS
      (CONCATENATE
       REQUIREDASSIGNMENTS
       (CONCATENATE
        (CL:IF
         (CL:NOT (CL:EQ (INITIALIZER CLASS) NULL))
         (CONS (CONS (INITIALIZER CLASS) (CONS SYM-DEFCLASS-SELF NIL)) NIL)
         NIL)
        (CONCATENATE
         (CL:IF
          (CL:EQ (ACTIVE? CLASS) 1)
          (CONS
           (LIST* SYM-DEFCLASS-RUN-CONSTRUCTOR-DEMONS SYM-DEFCLASS-SELF NIL)
           NIL)
          NIL)
         NIL)))))))
  :VOID)

;;; (DEFUN (YIELD-CONSTRUCTOR-DEFINITION CONS) ...)

(CL:DEFUN YIELD-CONSTRUCTOR-DEFINITION (CLASS)
  (CL:LET*
   ((REQUIREDPARAMETERS NIL) (ASSIGNMENTS NIL) (SLOT NULL))
   (CL:LET*
    ((SLOTNAME NULL)
     (ITER-001
      (CLSYS-SVAL LIST THE-CONS-LIST (CLASS-REQUIRED-SLOT-NAMES CLASS)))
     (COLLECT-001 NULL))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ SLOTNAME (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:SETQ
      ASSIGNMENTS
      (CONS
       (LIST*
        SYM-DEFCLASS-SETF
        (CONS SLOTNAME (CONS SYM-DEFCLASS-SELF NIL))
        SLOTNAME
        NIL)
       ASSIGNMENTS))
     (CL:SETQ SLOT (LOOKUP-SLOT CLASS SLOTNAME))
     (CL:IF
      (CL:EQ COLLECT-001 NULL)
      (CL:PROGN
       (CL:SETQ
        COLLECT-001
        (CONS (CONS SLOTNAME (CONS (TYPE-TO-SYMBOL (TYPE SLOT)) NIL)) NIL))
       (CL:IF
        (CL:EQ REQUIREDPARAMETERS NIL)
        (CL:SETQ REQUIREDPARAMETERS COLLECT-001)
        (ADD-CONS-TO-END-OF-CONS-LIST REQUIREDPARAMETERS COLLECT-001)))
      (CL:PROGN
       (CL:SETF
        (CLSYS-SVAL CONS REST COLLECT-001)
        (CONS (CONS SLOTNAME (CONS (TYPE-TO-SYMBOL (TYPE SLOT)) NIL)) NIL))
       (CL:SETQ COLLECT-001 (CLSYS-SVAL CONS REST COLLECT-001))))))
   (CL:RETURN-FROM
    YIELD-CONSTRUCTOR-DEFINITION
    (LIST*
     SYM-DEFCLASS-DEFUN
     (CONS (YIELD-CONSTRUCTOR-NAME CLASS) (CONS (CLASS-SYMBOL CLASS) NIL))
     (CONCATENATE REQUIREDPARAMETERS NIL)
     (LIST*
      SYM-DEFCLASS-LET
      (CONS
       (LIST*
        SYM-DEFCLASS-SELF
        (CLASS-SYMBOL CLASS)
        (CONS SYM-DEFCLASS-NULL NIL))
       NIL)
      (CONCATENATE
       (YIELD-CONSTRUCTOR-BODY CLASS (REVERSE ASSIGNMENTS))
       (CONS (LIST* SYM-DEFCLASS-RETURN SYM-DEFCLASS-SELF NIL) NIL)))
     NIL)))
  :VOID)

;;; (DEFUN (YIELD-DESTRUCTOR-DEFINITIONS CONS) ...)

(CL:DEFUN YIELD-DESTRUCTOR-DEFINITIONS (CLASS)
  (CL:LET*
   ((CLASSNAME (CLASS-SYMBOL CLASS))
    (DESTRUCTOR (DYNAMIC-SLOT-VALUE CLASS SYM-DEFCLASS-CLASS-DESTRUCTOR NULL))
    (TERMINATOR (TERMINATOR CLASS))
    (DEFINITIONS NIL))
   (CL:COND
    ((CL:EQ (DECIDED-TO-RECYCLE? CLASS) 1)
     (CL:LET*
      ((RECYCLESLOT NULL) (RECYCLELIST NULL))
      (CL:WHEN
       (CL:EQ (USE-FREE-LIST? CLASS) 1)
       (CL:SETQ RECYCLESLOT (RECYCLE-SLOT CLASS))
       (CL:SETQ RECYCLELIST (YIELD-RECYCLE-LIST-NAME CLASS))
       (CL:SETQ
        DEFINITIONS
        (CONS
         (LIST*
          SYM-DEFCLASS-DEFMETHOD
          SYM-DEFCLASS-FREE
          (CONS (LIST* SYM-DEFCLASS-SELF CLASSNAME NIL) NIL)
          (CONCATENATE
           (YIELD-TERMINATE-OBJECT-TREES CLASS)
           (CONCATENATE
            (CL:IF
             (CL:NOT (CL:EQ RECYCLESLOT NULL))
             (LIST*
              (LIST*
               SYM-DEFCLASS-SETF
               (LIST*
                SYM-DEFCLASS-SLOT-VALUE
                SYM-DEFCLASS-SELF
                (CLSYS-SVAL STORAGE-SLOT SLOT-NAME RECYCLESLOT)
                NIL)
               RECYCLELIST
               NIL)
              (LIST*
               SYM-DEFCLASS-SETQ
               RECYCLELIST
               (CONS SYM-DEFCLASS-SELF NIL))
              NIL)
             (CONS
              (LIST*
               SYM-DEFCLASS-PUSH
               RECYCLELIST
               (CONS SYM-DEFCLASS-SELF NIL))
              NIL))
            NIL)))
         DEFINITIONS)))
      (CL:WHEN
       (CL:EQ (USE-SWEEP-LIST? CLASS) 1)
       (CL:WHEN
        (CL:EQ (USE-FREE-LIST? CLASS) 0)
        (CL:SETQ
         DEFINITIONS
         (CONS
          (LIST*
           SYM-DEFCLASS-DEFMETHOD
           SYM-DEFCLASS-FREE
           (CONS (LIST* SYM-DEFCLASS-SELF CLASSNAME NIL) NIL)
           SYM-DEFCLASS-NULL
           NIL)
          DEFINITIONS)))
       (CL:SETQ
        DEFINITIONS
        (CONS
         (LIST*
          SYM-DEFCLASS-DEFMETHOD
          SYM-DEFCLASS-SWEEP
          (CONS (LIST* SYM-DEFCLASS-SELF CLASSNAME NIL) NIL)
          (CONCATENATE
           (CL:IF
            (CL:EQ (USE-FREE-LIST? CLASS) 1)
            (CL:IF
             (CL:NOT (CL:EQ (RECYCLE-SLOT CLASS) NULL))
             (CONS
              (LIST*
               SYM-DEFCLASS-SETQ
               RECYCLELIST
               (CONS SYM-DEFCLASS-NULL NIL))
              NIL)
             (CONS (LIST* SYM-DEFCLASS-CLEAR RECYCLELIST NIL) NIL))
            NIL)
           (CONS
            (LIST*
             SYM-DEFCLASS-SETQ
             (YIELD-SWEEP-LIST-POINTER-NAME CLASS)
             (CONS (YIELD-SWEEP-LIST-NAME CLASS) NIL))
            NIL)))
         DEFINITIONS)))))
    ((CL:OR (CL:NOT (CL:EQ TERMINATOR NULL)) (CL:NOT (CL:EQ DESTRUCTOR NULL)))
     (CL:WHEN
      (CL:EQ DESTRUCTOR NULL)
      (CL:SETQ DESTRUCTOR SYM-DEFCLASS-UNMAKE))
     (CL:WHEN
      (CL:NOT (CL:EQ DESTRUCTOR SYM-DEFCLASS-FREE))
      (CL:SETQ
       DEFINITIONS
       (CONS
        (LIST*
         SYM-DEFCLASS-DEFMETHOD
         SYM-DEFCLASS-FREE
         (CONS (LIST* SYM-DEFCLASS-SELF CLASSNAME NIL) NIL)
         (CL:IF
          (CL:NOT (CL:EQ TERMINATOR NULL))
          (LIST*
           SYM-DEFCLASS-WHEN
           (CONS TERMINATOR (CONS SYM-DEFCLASS-SELF NIL))
           (CONS DESTRUCTOR (CONS SYM-DEFCLASS-SELF NIL))
           NIL)
          (CONS DESTRUCTOR (CONS SYM-DEFCLASS-SELF NIL)))
         NIL)
        DEFINITIONS)))))
   (CL:RETURN-FROM YIELD-DESTRUCTOR-DEFINITIONS (REVERSE DEFINITIONS)))
  :VOID)

;;; (DEFUN CREATE-CONSTRUCTOR-AND-DESTRUCTOR-UNITS ...)

(CL:DEFUN CREATE-CONSTRUCTOR-AND-DESTRUCTOR-UNITS (CLASS)
  (CL:WHEN
   (CL:EQ (TRANSLATOR-OUTPUT-LANGUAGE) KWD-DEFCLASS-CPP-STANDALONE)
   (CREATE-CPP-CONSTRUCTOR-UNIT CLASS)
   (CL:RETURN-FROM CREATE-CONSTRUCTOR-AND-DESTRUCTOR-UNITS))
  (CL:WHEN
   (CL:NOT
    (CL:OR
     (CL:EQ (CLSYS-SVAL CLASS ABSTRACT? CLASS) 1)
     (CL:EQ
      (SUBTYPE-OF? (CLSYS-SVAL CLASS CLASS-TYPE CLASS) SGT-DEFCLASS-LITERAL)
      1)))
   (CL:LET*
    ((DEFINITION NULL) (ITER-001 (YIELD-RECYCLE-LIST-DEFINITIONS CLASS)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ DEFINITION (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (WALK-AUXILIARY-TREE DEFINITION)))
   (WALK-AUXILIARY-TREE (YIELD-CONSTRUCTOR-DEFINITION CLASS))
   (CL:LET*
    ((DESTRUCTOR NULL) (ITER-002 (YIELD-DESTRUCTOR-DEFINITIONS CLASS)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-002 NIL))
     DO
     (CL:PROGN
      (CL:SETQ DESTRUCTOR (CLSYS-SVAL CONS VALUE ITER-002))
      (CL:SETQ ITER-002 (CLSYS-SVAL CONS REST ITER-002)))
     (WALK-AUXILIARY-TREE DESTRUCTOR))))
  :VOID)

;;; (DEFUN (PARAMETERIZED-CLASS? BOOLEAN) ...)

(CL:DEFUN PARAMETERIZED-CLASS? (CLASS)
  (CL:LET*
   ((FOUND?-001 FALSE))
   (CL:LET*
    ((PARAMETERS NULL)
     (ITER-001 (CLSYS-SVAL LIST THE-CONS-LIST (PARAMETERS CLASS))))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ PARAMETERS (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:SETQ FOUND?-001 TRUE)
     (CL:RETURN)))
   (CL:LET*
    ((VALUE-001 FOUND?-001))
    (CL:RETURN-FROM PARAMETERIZED-CLASS? VALUE-001)))
  :VOID)

;;; (DEFUN (CLASS-WITH-INITIALIZER? BOOLEAN) ...)

(CL:DEFUN CLASS-WITH-INITIALIZER? (CLASS)
  (CL:LET*
   ((FOUND?-001 FALSE))
   (CL:LET*
    ((SLOT NULL) (ITER-001 (CLASS-SLOTS CLASS)))
    (CL:LOOP
     WHILE
     (CL:EQ (NEXT? ITER-001) 1)
     DO
     (CL:PROGN (CL:SETQ SLOT (CLSYS-SVAL ITERATOR VALUE ITER-001)))
     (CL:WHEN
      (CL:EQ (STORAGE-SLOT? SLOT) 1)
      (CL:SETQ FOUND?-001 TRUE)
      (CL:RETURN))))
   (CL:LET*
    ((VALUE-001 FOUND?-001))
    (CL:RETURN-FROM CLASS-WITH-INITIALIZER? VALUE-001)))
  :VOID)

;;; (DEFUN (YIELD-INITIALIZER-NAME SYMBOL) ...)

(CL:DEFUN YIELD-INITIALIZER-NAME (CLASS)
  (CL:RETURN-FROM
   YIELD-INITIALIZER-NAME
   (INTERN-DERIVED-SYMBOL
    (CLSYS-SVAL CLASS CLASS-TYPE CLASS)
    (CONCATENATE "initialize-" (CLASS-NAME CLASS))))
  :VOID)

;;; (DEFUN (YIELD-INITIALIZER-DEFINITION CONS) ...)

(CL:DEFUN YIELD-INITIALIZER-DEFINITION (CLASS)
  (CL:LET*
   ((PARENTINITFORMS NIL))
   (CL:LET*
    ((SUPER NULL)
     (ITER-001
      (CLSYS-SVAL
       LIST
       THE-CONS-LIST
       (CLSYS-SVAL CLASS CLASS-DIRECT-SUPERS CLASS)))
     (COLLECT-001 NULL))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ SUPER (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:WHEN
      (CL:EQ
       (CLASS-WITH-INITIALIZER? (CLSYS-SVAL SURROGATE SURROGATE-VALUE SUPER))
       1)
      (CL:IF
       (CL:EQ COLLECT-001 NULL)
       (CL:PROGN
        (CL:SETQ
         COLLECT-001
         (CONS
          (CONS
           (YIELD-INITIALIZER-NAME
            (CLSYS-SVAL SURROGATE SURROGATE-VALUE SUPER))
           (CONS SYM-DEFCLASS-SELF NIL))
          NIL))
        (CL:IF
         (CL:EQ PARENTINITFORMS NIL)
         (CL:SETQ PARENTINITFORMS COLLECT-001)
         (ADD-CONS-TO-END-OF-CONS-LIST PARENTINITFORMS COLLECT-001)))
       (CL:PROGN
        (CL:SETF
         (CLSYS-SVAL CONS REST COLLECT-001)
         (CONS
          (CONS
           (YIELD-INITIALIZER-NAME
            (CLSYS-SVAL SURROGATE SURROGATE-VALUE SUPER))
           (CONS SYM-DEFCLASS-SELF NIL))
          NIL))
        (CL:SETQ COLLECT-001 (CLSYS-SVAL CONS REST COLLECT-001)))))))
   (CL:RETURN-FROM
    YIELD-INITIALIZER-DEFINITION
    (LIST*
     SYM-DEFCLASS-DEFUN
     (YIELD-INITIALIZER-NAME CLASS)
     (CONS
      (CONS
       (LIST*
        SYM-DEFCLASS-SELF
        (YIELD-TYPE-SPEC-TREE (CLSYS-SVAL CLASS CLASS-TYPE CLASS))
        NIL)
       NIL)
      (CONCATENATE
       PARENTINITFORMS
       (CONCATENATE (YIELD-LOCAL-INITIAL-VALUE-ASSIGNMENTS CLASS) NIL))))))
  :VOID)

;;; (DEFUN CREATE-CPP-CONSTRUCTOR-UNIT ...)

(CL:DEFUN CREATE-CPP-CONSTRUCTOR-UNIT (CLASS)
  (CL:WHEN
   (CL:EQ (PARAMETERIZED-CLASS? CLASS) 0)
   (CL:LET*
    ((CLASSNAME (YIELD-TYPE-SPEC-TREE (CLSYS-SVAL CLASS CLASS-TYPE CLASS)))
     (HASINITIALIZER? (CLASS-WITH-INITIALIZER? CLASS)))
    (CL:WHEN
     (CL:EQ HASINITIALIZER? 1)
     (WALK-AUXILIARY-TREE (YIELD-INITIALIZER-DEFINITION CLASS)))
    (HELP-WALK-AUXILIARY-TREE
     (LIST*
      SYM-DEFCLASS-DEFMETHOD
      CLASSNAME
      (CONS
       (CONS (LIST* SYM-DEFCLASS-SELF CLASSNAME NIL) NIL)
       (CONCATENATE
        (CL:IF
         (CL:EQ HASINITIALIZER? 1)
         (CONS
          (CONS (YIELD-INITIALIZER-NAME CLASS) (CONS SYM-DEFCLASS-SELF NIL))
          NIL)
         (CONS SYM-DEFCLASS-NULL NIL))
        NIL)))
     FALSE)))
  :VOID)

;;; (DEFUN (CPP-CONSTRUCTOR? BOOLEAN) ...)

(CL:DEFUN CPP-CONSTRUCTOR? (METHOD)
  (CL:RETURN-FROM
   CPP-CONSTRUCTOR?
   (CL:IF
    (CL:AND
     (CL:EQ (TYPE METHOD) SGT-DEFCLASS-VOID)
     (CL:= (LENGTH (METHOD-PARAMETER-NAMES METHOD)) 1)
     (CL:EQ
      (STRING-EQL?
       (CLSYS-SVAL
        SURROGATE
        SYMBOL-NAME
        (CLSYS-SVAL METHOD-SLOT SLOT-OWNER METHOD))
       (CLSYS-SVAL
        SYMBOL
        SYMBOL-NAME
        (CLSYS-SVAL METHOD-SLOT SLOT-NAME METHOD)))
      1)
     (CL:EQ
      (CLSYS-SVAL
       SURROGATE
       HOME-CONTEXT
       (CLSYS-SVAL METHOD-SLOT SLOT-OWNER METHOD))
      (CLSYS-SVAL
       SYMBOL
       HOME-CONTEXT
       (CLSYS-SVAL METHOD-SLOT SLOT-NAME METHOD))))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN (HAS-NON-NULL-DEFAULT-VALUE? BOOLEAN) ...)

(CL:DEFUN HAS-NON-NULL-DEFAULT-VALUE? (SLOT)
  (CL:LET*
   ((DEFAULTFORM (SYSTEM-DEFAULT-VALUE SLOT)))
   (CL:RETURN-FROM
    HAS-NON-NULL-DEFAULT-VALUE?
    (CL:IF
     (CL:AND
      (CL:NOT (CL:EQ DEFAULTFORM NULL))
      (CL:OR
       (CL:EQ
        (EQUAL-CONS-TREES? (TYPE-TO-NULL-VALUE-TREE (TYPE SLOT)) DEFAULTFORM)
        0)
       (CL:AND
        (CL:EQ (TYPE SLOT) SGT-DEFCLASS-BOOLEAN)
        (CL:EQ (ALLOCATION SLOT) KWD-DEFCLASS-DYNAMIC))))
     TRUE
     FALSE)))
  :VOID)

;;; (DEFUN (SYSTEM-DEFINED-SLOT-READER? BOOLEAN) ...)

(CL:DEFUN SYSTEM-DEFINED-SLOT-READER? (SLOT)
  (CL:RETURN-FROM
   SYSTEM-DEFINED-SLOT-READER?
   (CL:IF
    (CL:AND
     (CL:EQ (READER SLOT) NULL)
     (CL:OR
      (CL:EQ (HAS-NON-NULL-DEFAULT-VALUE? SLOT) 1)
      (CL:EQ (ACTIVE? SLOT) 1)
      (CL:EQ (CLSYS-SVAL STORAGE-SLOT SLOT-HARDWIRED? SLOT) 1)))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN (SYSTEM-DEFINED-SLOT-WRITER? BOOLEAN) ...)

(CL:DEFUN SYSTEM-DEFINED-SLOT-WRITER? (SLOT)
  (CL:RETURN-FROM
   SYSTEM-DEFINED-SLOT-WRITER?
   (CL:IF
    (CL:AND (CL:EQ (WRITER SLOT) NULL) (CL:EQ (ACTIVE? SLOT) 1))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN (YIELD-SLOT-TYPE-TREE OBJECT) ...)

(CL:DEFUN YIELD-SLOT-TYPE-TREE (SLOT)
  (CL:RETURN-FROM
   YIELD-SLOT-TYPE-TREE
   (YIELD-TYPE-SPEC-TREE
    (CL:IF
     (CL:NOT
      (CL:EQ
       (DYNAMIC-SLOT-VALUE SLOT SYM-DEFCLASS-SLOT-TYPE-SPECIFIER NULL)
       NULL))
     (DYNAMIC-SLOT-VALUE SLOT SYM-DEFCLASS-SLOT-TYPE-SPECIFIER NULL)
     (CLSYS-SVAL STORAGE-SLOT SLOT-BASE-TYPE SLOT))))
  :VOID)

;;; (DEFUN (YIELD-HARDWIRED-SLOT-VARIABLE SYMBOL) ...)

(CL:DEFUN YIELD-HARDWIRED-SLOT-VARIABLE (SLOT)
  (CL:RETURN-FROM
   YIELD-HARDWIRED-SLOT-VARIABLE
   (INTERN-DERIVED-SYMBOL
    (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT)
    (CONCATENATE
     "*HARDWIRED-"
     (CONCATENATE
      (CLSYS-SVAL SYMBOL SYMBOL-NAME (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT))
      (CONCATENATE
       "-ON-"
       (CONCATENATE
        (CLSYS-SVAL
         SURROGATE
         SYMBOL-NAME
         (CLSYS-SVAL STORAGE-SLOT SLOT-OWNER SLOT))
        "*"))))))
  :VOID)

;;; (DEFUN (YIELD-HARDWIRED-SLOT-READER-BODY CONS CONS) ...)

(CL:DEFUN YIELD-HARDWIRED-SLOT-READER-BODY (SLOT)
  (CL:LET*
   ((SLOTVARIABLE (YIELD-HARDWIRED-SLOT-VARIABLE SLOT))
    (SLOTTYPEDESC
     (YIELD-TYPE-SPEC-TREE
      (COMPUTE-RETURN-TYPE-SPEC
       SLOT
       (CLSYS-SVAL STORAGE-SLOT SLOT-OWNER SLOT)))))
   (CL:RETURN-FROM
    YIELD-HARDWIRED-SLOT-READER-BODY
    (CL:VALUES
     (LIST* SYM-DEFCLASS-RETURN SLOTVARIABLE NIL)
     (LIST*
      SYM-DEFCLASS-DEFGLOBAL
      SLOTVARIABLE
      (CONS SLOTTYPEDESC (CONS SYM-DEFCLASS-NULL NIL))))))
  :VOID)

;;; (DEFUN FINALIZE-ACCESSOR-METHOD ...)

(CL:DEFUN FINALIZE-ACCESSOR-METHOD (METHOD)
  (CL:WHEN
   (CL:AND
    (CL:EQ (CLSYS-SVAL METHOD-SLOT SLOT-BASE-TYPE METHOD) NULL)
    (CL:NOT
     (CL:EQ
      (DYNAMIC-SLOT-VALUE METHOD SYM-DEFCLASS-SLOT-TYPE-SPECIFIER NULL)
      NULL)))
   (CL:SETF
    (CLSYS-SVAL METHOD-SLOT SLOT-BASE-TYPE METHOD)
    (VALIDATE-TYPE-SPECIFIER
     (DYNAMIC-SLOT-VALUE METHOD SYM-DEFCLASS-SLOT-TYPE-SPECIFIER NULL)
     (CLSYS-SVAL
      SURROGATE
      SURROGATE-VALUE
      (CLSYS-SVAL METHOD-SLOT SLOT-OWNER METHOD))
     FALSE)))
  :VOID)

;;; (DEFUN (WRAP-WITH-DEFAULT-VALUE-AND-RETURN-CODE CONS) ...)

(CL:DEFUN WRAP-WITH-DEFAULT-VALUE-AND-RETURN-CODE (READCODE DEFAULTEXPRESSION)
  (CL:IF
   (CL:NOT (CL:EQ DEFAULTEXPRESSION NULL))
   (CL:RETURN-FROM
    WRAP-WITH-DEFAULT-VALUE-AND-RETURN-CODE
    (LIST*
     SYM-DEFCLASS-LET
     (CONS (LIST* SYM-DEFCLASS-ANSWER READCODE NIL) NIL)
     (LIST*
      SYM-DEFCLASS-IF
      (LIST* SYM-DEFCLASS-NULL? SYM-DEFCLASS-ANSWER NIL)
      (LIST* SYM-DEFCLASS-RETURN (TRANSIENTIFY-FORM DEFAULTEXPRESSION) NIL)
      (LIST* SYM-DEFCLASS-RETURN SYM-DEFCLASS-ANSWER NIL)
      NIL)
     NIL))
   (CL:RETURN-FROM
    WRAP-WITH-DEFAULT-VALUE-AND-RETURN-CODE
    (LIST* SYM-DEFCLASS-RETURN READCODE NIL)))
  :VOID)

;;; (DEFUN (YIELD-SLOT-READER-TREE CONS) ...)

(CL:DEFUN YIELD-SLOT-READER-TREE (SLOT CLASS)
  (CL:LET*
   ((PARAMETERS
     (CONS
      (LIST*
       SYM-DEFCLASS-SELF
       (TYPE-TO-SYMBOL (CLSYS-SVAL CLASS CLASS-TYPE CLASS))
       NIL)
      NIL))
    (TYPETREE (YIELD-SLOT-TYPE-TREE SLOT))
    (DEFAULTEXPRESSION
     (CL:IF
      (CL:EQ (HAS-NON-NULL-DEFAULT-VALUE? SLOT) 1)
      (SYSTEM-DEFAULT-VALUE SLOT)
      NULL))
    (SLOTVISIBLE?
     (SUBTYPE-OF?
      (CLSYS-SVAL CLASS CLASS-TYPE CLASS)
      (CLSYS-SVAL STORAGE-SLOT SLOT-OWNER SLOT)))
    (READCODE NULL)
    (AUXILIARYCODE NULL))
   (CL:COND
    ((CL:EQ SLOTVISIBLE? 0)
     (CL:SETQ
      READCODE
      (LIST*
       SYM-DEFCLASS-PROGN
       (LIST*
        SYM-DEFCLASS-ERROR
        (WRAP-LITERAL "Slot '")
        (WRAP-LITERAL
         (CLSYS-SVAL
          SYMBOL
          SYMBOL-NAME
          (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT)))
        (LIST* (WRAP-LITERAL "' does not exist on ") SYM-DEFCLASS-SELF NIL))
       (LIST* SYM-DEFCLASS-RETURN SYM-DEFCLASS-NULL NIL)
       NIL)))
    ((CL:EQ (ACTIVE? SLOT) 1)
     (CL:SETQ
      READCODE
      (YIELD-ACTIVE-SLOT-READER-BODY SLOT DEFAULTEXPRESSION)))
    ((CL:EQ (CLSYS-SVAL STORAGE-SLOT SLOT-HARDWIRED? SLOT) 1)
     (CL:MULTIPLE-VALUE-SETQ
      (READCODE AUXILIARYCODE)
      (YIELD-HARDWIRED-SLOT-READER-BODY SLOT))
     (CL:WHEN
      (CL:EQ
       (CLSYS-SVAL CLASS CLASS-TYPE CLASS)
       (CLSYS-SVAL STORAGE-SLOT SLOT-OWNER SLOT))
      (WALK-AUXILIARY-TREE AUXILIARYCODE)))
    (CL:T
     (CL:SETQ
      READCODE
      (WRAP-WITH-DEFAULT-VALUE-AND-RETURN-CODE
       (LIST*
        SYM-DEFCLASS-SLOT-VALUE
        SYM-DEFCLASS-SELF
        (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT)
        NIL)
       DEFAULTEXPRESSION))))
   (CL:RETURN-FROM
    YIELD-SLOT-READER-TREE
    (LIST*
     SYM-DEFCLASS-DEFMETHOD
     (CONS (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT) (CONS TYPETREE NIL))
     PARAMETERS
     (LIST* KWD-DEFCLASS-AUXILIARY? SYM-DEFCLASS-TRUE READCODE NIL))))
  :VOID)

;;; (DEFUN (YIELD-SLOT-WRITER-TREE CONS) ...)

(CL:DEFUN YIELD-SLOT-WRITER-TREE (SLOT CLASS)
  (CL:LET*
   ((TYPETREE (YIELD-SLOT-TYPE-TREE SLOT))
    (PARAMETERS
     (LIST*
      (LIST*
       SYM-DEFCLASS-SELF
       (TYPE-TO-SYMBOL (CLSYS-SVAL CLASS CLASS-TYPE CLASS))
       NIL)
      (LIST* SYM-DEFCLASS-VALUE TYPETREE NIL)
      NIL))
    (SLOTVISIBLE?
     (SUBTYPE-OF?
      (CLSYS-SVAL CLASS CLASS-TYPE CLASS)
      (CLSYS-SVAL STORAGE-SLOT SLOT-OWNER SLOT)))
    (WRITECODE NULL))
   (CL:COND
    ((CL:EQ SLOTVISIBLE? 0)
     (CL:SETQ
      WRITECODE
      (LIST*
       SYM-DEFCLASS-PROGN
       (LIST*
        SYM-DEFCLASS-ERROR
        (WRAP-LITERAL "Slot '")
        (WRAP-LITERAL
         (CLSYS-SVAL
          SYMBOL
          SYMBOL-NAME
          (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT)))
        (LIST* (WRAP-LITERAL "' does not exist on ") SYM-DEFCLASS-SELF NIL))
       (LIST* SYM-DEFCLASS-RETURN SYM-DEFCLASS-NULL NIL)
       NIL)))
    ((CL:EQ (ACTIVE? SLOT) 1)
     (CL:SETQ WRITECODE (YIELD-ACTIVE-SLOT-WRITER-BODY SLOT)))
    (CL:T
     (CL:SETQ
      WRITECODE
      (LIST*
       SYM-DEFCLASS-RETURN
       (LIST*
        SYM-DEFCLASS-SETF
        (LIST*
         SYM-DEFCLASS-SLOT-VALUE
         SYM-DEFCLASS-SELF
         (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT)
         NIL)
        SYM-DEFCLASS-VALUE
        NIL)
       NIL))))
   (CL:RETURN-FROM
    YIELD-SLOT-WRITER-TREE
    (LIST*
     SYM-DEFCLASS-DEFMETHOD
     (CONS
      (YIELD-SETTER-METHOD-NAME (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT))
      (CONS (COPY-CONS-TREE TYPETREE) NIL))
     PARAMETERS
     (LIST*
      KWD-DEFCLASS-AUXILIARY?
      SYM-DEFCLASS-TRUE
      (CONCATENATE
       (CL:IF
        (CL:EQ SLOTVISIBLE? 1)
        NIL
        (CONS (LIST* SYM-DEFCLASS-IGNORE SYM-DEFCLASS-VALUE NIL) NIL))
       (CONS WRITECODE NIL))))))
  :VOID)

;;; (DEFUN (SLOT-VALUE-IS-BARE-LITERAL? BOOLEAN) ...)

(CL:DEFUN SLOT-VALUE-IS-BARE-LITERAL? (SLOT)
  (CL:LET*
   ((TYPE (TYPE SLOT)))
   (CL:RETURN-FROM
    SLOT-VALUE-IS-BARE-LITERAL?
    (CL:IF
     (CL:AND
      (CL:NOT (CL:EQ TYPE NULL))
      (CL:NOT (CL:EQ (CLSYS-SVAL SURROGATE SURROGATE-VALUE TYPE) NULL))
      (CL:EQ (SUBTYPE-OF? (TYPE SLOT) SGT-DEFCLASS-LITERAL) 1))
     TRUE
     FALSE)))
  :VOID)

;;; (DEFUN (GENERICALLY-ACCESSIBLE-TYPE? BOOLEAN) ...)

(CL:DEFUN GENERICALLY-ACCESSIBLE-TYPE? (TYPE)
  (CL:RETURN-FROM
   GENERICALLY-ACCESSIBLE-TYPE?
   (CL:IF
    (CL:OR
     (CL:EQ (SUBTYPE-OF? TYPE SGT-DEFCLASS-OBJECT) 1)
     (CL:AND
      (CL:EQ (SUBTYPE-OF? TYPE SGT-DEFCLASS-LITERAL) 1)
      (CL:NOT
       (CL:EQ
        (LOOKUP-LITERAL-TYPE-INFO TYPE KWD-DEFCLASS-WRAP-FUNCTION)
        NULL))))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN (GENERIC-SLOT-READER? BOOLEAN) ...)

(CL:DEFUN GENERIC-SLOT-READER? (SLOT)
  (CL:LET*
   ((TYPE (CANONICAL-TYPE (TYPE SLOT))))
   (CL:RETURN-FROM
    GENERIC-SLOT-READER?
    (CL:IF
     (CL:AND
      (CL:EQ (CLSYS-SVAL STORAGE-SLOT ABSTRACT? SLOT) 0)
      (CL:EQ
       (SUBTYPE-OF?
        (CLSYS-SVAL STORAGE-SLOT SLOT-OWNER SLOT)
        SGT-DEFCLASS-OBJECT)
       1)
      (CL:NOT (CL:EQ (CLSYS-SVAL SURROGATE SURROGATE-VALUE TYPE) NULL))
      (CL:EQ (GENERICALLY-ACCESSIBLE-TYPE? TYPE) 1))
     TRUE
     FALSE)))
  :VOID)

;;; (DEFUN (GENERIC-SLOT-WRITER? BOOLEAN) ...)

(CL:DEFUN GENERIC-SLOT-WRITER? (SLOT)
  (CL:RETURN-FROM
   GENERIC-SLOT-WRITER?
   (CL:IF
    (CL:AND
     (CL:EQ (CLSYS-SVAL STORAGE-SLOT SLOT-HARDWIRED? SLOT) 0)
     (CL:EQ (GENERIC-SLOT-READER? SLOT) 1))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN (SLOT-ACCESS-METHOD? BOOLEAN) ...)

(CL:DEFUN SLOT-ACCESS-METHOD? (SLOT)
  (CL:RETURN-FROM
   SLOT-ACCESS-METHOD?
   (CL:IF
    (CL:OR
     (CL:NOT (CL:EQ (READER SLOT) NULL))
     (CL:EQ (SYSTEM-DEFINED-SLOT-READER? SLOT) 1)
     (CL:NOT (CL:EQ (WRITER SLOT) NULL))
     (CL:EQ (SYSTEM-DEFINED-SLOT-WRITER? SLOT) 1))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN (YIELD-GENERIC-SLOT-ACCESSOR-NAME SYMBOL) ...)

(CL:DEFUN YIELD-GENERIC-SLOT-ACCESSOR-NAME (CLASS)
  (CL:RETURN-FROM
   YIELD-GENERIC-SLOT-ACCESSOR-NAME
   (INTERN-DERIVED-SYMBOL
    (CLSYS-SVAL CLASS CLASS-TYPE CLASS)
    (CONCATENATE
     "ACCESS-"
     (CONCATENATE
      (CLSYS-SVAL SURROGATE SYMBOL-NAME (CLSYS-SVAL CLASS CLASS-TYPE CLASS))
      "-SLOT-VALUE"))))
  :VOID)

;;; (DEFUN (YIELD-GENERIC-SLOT-ACCESSOR-DEFINITION CONS) ...)

(CL:DEFUN YIELD-GENERIC-SLOT-ACCESSOR-DEFINITION (CLASS)
  (CL:LET*
   ((CLAUSES NIL) (ACCESSTREE NIL) (VALUETREE NULL) (SLOTTYPE NULL))
   (CL:WHEN
    (CL:EQ
     (SUBCLASS-OF?
      CLASS
      (CLSYS-SVAL SURROGATE SURROGATE-VALUE SGT-DEFCLASS-OBJECT))
     0)
    (CL:RETURN-FROM YIELD-GENERIC-SLOT-ACCESSOR-DEFINITION NULL))
   (CL:LET*
    ((SLOT NULL)
     (ITER-001
      (CLSYS-SVAL
       LIST
       THE-CONS-LIST
       (CLSYS-SVAL CLASS CLASS-LOCAL-SLOTS CLASS))))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ SLOT (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:TAGBODY
      (CL:WHEN
       (CL:AND
        (CL:EQ (STORAGE-SLOT? SLOT) 1)
        (CL:EQ (GENERIC-SLOT-READER? SLOT) 1))
       (CL:WHEN
        (CL:OR
         (CL:EQ (CLSYS-SVAL SLOT SLOT-EXTERNAL? SLOT) 1)
         (CL:AND
          (CL:EQ (SPACE-SAVER-SLOT-ALLOCATION? SLOT) 1)
          (CL:EQ (SLOT-ACCESS-METHOD? SLOT) 0)))
        (CL:GO :CONTINUE))
       (CL:SETQ
        ACCESSTREE
        (LIST*
         SYM-DEFCLASS-RETURN
         (CONS (CLSYS-SVAL SLOT SLOT-NAME SLOT) (CONS SYM-DEFCLASS-SELF NIL))
         NIL))
       (CL:WHEN
        (CL:EQ (CLSYS-SVAL STORAGE-SLOT SLOT-HARDWIRED? SLOT) 0)
        (CL:SETQ SLOTTYPE (CANONICAL-TYPE (TYPE SLOT)))
        (CL:SETQ VALUETREE SYM-DEFCLASS-VALUE)
        (CL:WHEN
         (CL:AND
          (CL:EQ (SUBTYPE-OF? SLOTTYPE SGT-DEFCLASS-LITERAL) 1)
          (CL:NOT
           (CL:EQ
            (LOOKUP-LITERAL-TYPE-INFO SLOTTYPE KWD-DEFCLASS-WRAP-FUNCTION)
            NULL)))
         (CL:SETQ
          VALUETREE
          (LIST*
           SYM-DEFCLASS-CAST
           SYM-DEFCLASS-VALUE
           (TYPE-TO-WRAPPED-TYPE SLOTTYPE)
           NIL)))
        (CL:SETQ
         ACCESSTREE
         (LIST*
          SYM-DEFCLASS-IF
          SYM-DEFCLASS-SETVALUE?
          (LIST*
           SYM-DEFCLASS-SETF
           (CONS
            (CLSYS-SVAL SLOT SLOT-NAME SLOT)
            (CONS SYM-DEFCLASS-SELF NIL))
           VALUETREE
           NIL)
          (LIST*
           SYM-DEFCLASS-RETURN
           (CONS
            (CLSYS-SVAL SLOT SLOT-NAME SLOT)
            (CONS SYM-DEFCLASS-SELF NIL))
           NIL)
          NIL)))
       (CL:SETQ
        CLAUSES
        (CONS
         (CONS (CLSYS-SVAL SLOT SLOT-NAME SLOT) (CONS ACCESSTREE NIL))
         CLAUSES)))
      :CONTINUE)))
   (CL:WHEN
    (CL:EQ
     (SUBCLASS-OF?
      CLASS
      (CLSYS-SVAL SURROGATE SURROGATE-VALUE SGT-DEFCLASS-DYNAMIC-SLOTS-MIXIN))
     1)
    (CL:LET*
     ((RENAMECLAUSES NIL))
     (CL:LET*
      ((SLOT NULL)
       (ITER-002
        (CLSYS-SVAL
         LIST
         THE-CONS-LIST
         (CLSYS-SVAL CLASS CLASS-LOCAL-SLOTS CLASS)))
       (COLLECT-001 NULL))
      (CL:LOOP
       WHILE
       (CL:NOT (CL:EQ ITER-002 NIL))
       DO
       (CL:PROGN
        (CL:SETQ SLOT (CLSYS-SVAL CONS VALUE ITER-002))
        (CL:SETQ ITER-002 (CLSYS-SVAL CONS REST ITER-002)))
       (CL:WHEN
        (CL:AND
         (CL:EQ (STORAGE-SLOT? SLOT) 1)
         (CL:EQ (CLSYS-SVAL SLOT SLOT-EXTERNAL? SLOT) 0)
         (CL:EQ (SPACE-SAVER-SLOT-ALLOCATION? SLOT) 1)
         (CL:EQ (SLOT-ACCESS-METHOD? SLOT) 0)
         (CL:NOT (CL:EQ SLOT (CANONICAL-SLOT SLOT))))
        (CL:IF
         (CL:EQ COLLECT-001 NULL)
         (CL:PROGN
          (CL:SETQ
           COLLECT-001
           (CONS
            (CONS
             (CLSYS-SVAL SLOT SLOT-NAME SLOT)
             (CONS
              (LIST*
               SYM-DEFCLASS-SETQ
               SYM-DEFCLASS-SLOTNAME
               (LIST*
                SYM-DEFCLASS-QUOTE
                (CLSYS-SVAL STORAGE-SLOT SLOT-NAME (CANONICAL-SLOT SLOT))
                NIL)
               NIL)
              NIL))
            NIL))
          (CL:IF
           (CL:EQ RENAMECLAUSES NIL)
           (CL:SETQ RENAMECLAUSES COLLECT-001)
           (ADD-CONS-TO-END-OF-CONS-LIST RENAMECLAUSES COLLECT-001)))
         (CL:PROGN
          (CL:SETF
           (CLSYS-SVAL CONS REST COLLECT-001)
           (CONS
            (CONS
             (CLSYS-SVAL SLOT SLOT-NAME SLOT)
             (CONS
              (LIST*
               SYM-DEFCLASS-SETQ
               SYM-DEFCLASS-SLOTNAME
               (LIST*
                SYM-DEFCLASS-QUOTE
                (CLSYS-SVAL STORAGE-SLOT SLOT-NAME (CANONICAL-SLOT SLOT))
                NIL)
               NIL)
              NIL))
            NIL))
          (CL:SETQ COLLECT-001 (CLSYS-SVAL CONS REST COLLECT-001)))))))
     (CL:WHEN
      (CL:NOT (CL:EQ RENAMECLAUSES NIL))
      (CL:SETQ
       RENAMECLAUSES
       (CONS
        (LIST*
         SYM-DEFCLASS-CASE
         SYM-DEFCLASS-SLOTNAME
         (CONCATENATE
          RENAMECLAUSES
          (CONS (LIST* SYM-DEFCLASS-OTHERWISE SYM-DEFCLASS-NULL NIL) NIL)))
        NIL)))
     (CL:SETQ
      CLAUSES
      (CONS
       (CONS
        SYM-DEFCLASS-OTHERWISE
        (CONCATENATE
         RENAMECLAUSES
         (CONS
          (LIST*
           SYM-DEFCLASS-IF
           SYM-DEFCLASS-SETVALUE?
           (LIST*
            SYM-DEFCLASS-HELP-SET-DYNAMIC-SLOT-VALUE
            (LIST* SYM-DEFCLASS-DYNAMIC-SLOTS SYM-DEFCLASS-SELF NIL)
            SYM-DEFCLASS-SLOTNAME
            SYM-DEFCLASS-VALUE
            NIL)
           (LIST*
            SYM-DEFCLASS-RETURN
            (LIST*
             SYM-DEFCLASS-LOOKUP
             (LIST* SYM-DEFCLASS-DYNAMIC-SLOTS SYM-DEFCLASS-SELF NIL)
             SYM-DEFCLASS-SLOTNAME
             NIL)
            NIL)
           NIL)
          NIL)))
       CLAUSES))))
   (CL:IF
    (CL:EQ CLAUSES NIL)
    (CL:RETURN-FROM YIELD-GENERIC-SLOT-ACCESSOR-DEFINITION NULL)
    (CL:RETURN-FROM
     YIELD-GENERIC-SLOT-ACCESSOR-DEFINITION
     (LIST*
      SYM-DEFCLASS-DEFUN
      (CONS
       (YIELD-GENERIC-SLOT-ACCESSOR-NAME CLASS)
       (CONS SYM-DEFCLASS-OBJECT NIL))
      (LIST*
       (LIST* SYM-DEFCLASS-SELF (CLSYS-SVAL CLASS CLASS-TYPE CLASS) NIL)
       (LIST* SYM-DEFCLASS-SLOTNAME SYM-DEFCLASS-SYMBOL NIL)
       (LIST* SYM-DEFCLASS-VALUE SYM-DEFCLASS-OBJECT NIL)
       (LIST* SYM-DEFCLASS-SETVALUE? SYM-DEFCLASS-BOOLEAN NIL)
       NIL)
      (LIST*
       SYM-DEFCLASS-CASE
       SYM-DEFCLASS-SLOTNAME
       (CONCATENATE (REVERSE CLAUSES) NIL))
      (LIST*
       SYM-DEFCLASS-WHEN
       SYM-DEFCLASS-SETVALUE?
       (LIST* SYM-DEFCLASS-RETURN SYM-DEFCLASS-VALUE NIL)
       NIL)
      NIL))))
  :VOID)

;;; (DEFUN CREATE-GENERIC-SLOT-ACCESSOR-UNIT ...)

(CL:DEFUN CREATE-GENERIC-SLOT-ACCESSOR-UNIT (CLASS)
  (CL:LET*
   ((TREE (YIELD-GENERIC-SLOT-ACCESSOR-DEFINITION CLASS)))
   (CL:WHEN (CL:NOT (CL:EQ TREE NULL)) (WALK-AUXILIARY-TREE TREE)))
  :VOID)

;;; (DEFUN (YIELD-GENERIC-SLOT-ACCESSOR-ATTACHMENT CONS) ...)

(CL:DEFUN YIELD-GENERIC-SLOT-ACCESSOR-ATTACHMENT (CLASS CLASSREF)
  (CL:LET*
   ((FOUND?-001 FALSE))
   (CL:LET*
    ((SLOT NULL)
     (ITER-001
      (CLSYS-SVAL
       LIST
       THE-CONS-LIST
       (CLSYS-SVAL CLASS CLASS-LOCAL-SLOTS CLASS))))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ SLOT (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:WHEN
      (CL:AND
       (CL:EQ (STORAGE-SLOT? SLOT) 1)
       (CL:EQ (GENERIC-SLOT-READER? SLOT) 1))
      (CL:SETQ FOUND?-001 TRUE)
      (CL:RETURN))))
   (CL:IF
    (CL:EQ FOUND?-001 1)
    (CL:RETURN-FROM
     YIELD-GENERIC-SLOT-ACCESSOR-ATTACHMENT
     (CONS
      (LIST*
       SYM-DEFCLASS-SETF
       (LIST* SYM-DEFCLASS-CLASS-SLOT-ACCESSOR-CODE CLASSREF NIL)
       (LIST*
        SYM-DEFCLASS-THE-CODE
        KWD-DEFCLASS-FUNCTION
        (YIELD-GENERIC-SLOT-ACCESSOR-NAME CLASS)
        NIL)
       NIL)
      NIL))
    (CL:RETURN-FROM YIELD-GENERIC-SLOT-ACCESSOR-ATTACHMENT NIL)))
  :VOID)

;;; (DEFUN (YIELD-MIXIN-CLASS-USERS-TREE (CONS OF SYMBOL)) ...)

(CL:DEFUN YIELD-MIXIN-CLASS-USERS-TREE (CLASS)
  (CL:LET*
   ((RESULT NIL))
   (CL:LET*
    ((*TRANSIENTOBJECTS?* TRUE))
    (CL:DECLARE (CL:SPECIAL *TRANSIENTOBJECTS?*))
    (CL:LET*
     ((SUB NULL)
      (ITER-001
       (CLSYS-SVAL
        LIST
        THE-CONS-LIST
        (CLSYS-SVAL CLASS CLASS-DIRECT-SUBS CLASS)))
      (COLLECT-001 NULL))
     (CL:LOOP
      WHILE
      (CL:NOT (CL:EQ ITER-001 NIL))
      DO
      (CL:PROGN
       (CL:SETQ SUB (CLSYS-SVAL CONS VALUE ITER-001))
       (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
      (CL:WHEN
       (CL:EQ (CLSYS-SVAL CLASS MIXIN? (TYPE-TO-CLASS SUB)) 0)
       (CL:IF
        (CL:EQ COLLECT-001 NULL)
        (CL:PROGN
         (CL:SETQ COLLECT-001 (CONS (TYPE-TO-SYMBOL SUB) NIL))
         (CL:IF
          (CL:EQ RESULT NIL)
          (CL:SETQ RESULT COLLECT-001)
          (ADD-CONS-TO-END-OF-CONS-LIST RESULT COLLECT-001)))
        (CL:PROGN
         (CL:SETF
          (CLSYS-SVAL CONS REST COLLECT-001)
          (CONS (TYPE-TO-SYMBOL SUB) NIL))
         (CL:SETQ COLLECT-001 (CLSYS-SVAL CONS REST COLLECT-001)))))))
    (CL:RETURN-FROM YIELD-MIXIN-CLASS-USERS-TREE RESULT)))
  :VOID)

;;; (DEFUN (YIELD-MIXIN-SLOT-READER-NAME SYMBOL) ...)

(CL:DEFUN YIELD-MIXIN-SLOT-READER-NAME (SLOT)
  (CL:RETURN-FROM
   YIELD-MIXIN-SLOT-READER-NAME
   (INTERN-DERIVED-SYMBOL
    (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT)
    (CONCATENATE
     (CLSYS-SVAL SYMBOL SYMBOL-NAME (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT))
     (CONCATENATE
      "-ON-"
      (CLSYS-SVAL
       SURROGATE
       SYMBOL-NAME
       (CLSYS-SVAL STORAGE-SLOT SLOT-OWNER SLOT))))))
  :VOID)

;;; (DEFUN (YIELD-MIXIN-SLOT-WRITER-NAME SYMBOL) ...)

(CL:DEFUN YIELD-MIXIN-SLOT-WRITER-NAME (SLOT)
  (CL:RETURN-FROM
   YIELD-MIXIN-SLOT-WRITER-NAME
   (YIELD-SETTER-METHOD-NAME (YIELD-MIXIN-SLOT-READER-NAME SLOT)))
  :VOID)

;;; (DEFUN (YIELD-MIXIN-SLOT-READER-TREE CONS) ...)

(CL:DEFUN YIELD-MIXIN-SLOT-READER-TREE (SLOT)
  (CL:LET*
   ((READERNAME (YIELD-MIXIN-SLOT-READER-NAME SLOT))
    (TYPETREE (YIELD-SLOT-TYPE-TREE SLOT)))
   (CL:RETURN-FROM
    YIELD-MIXIN-SLOT-READER-TREE
    (LIST*
     SYM-DEFCLASS-DEFUN
     (CONS READERNAME (CONS TYPETREE NIL))
     (CONS (LIST* SYM-DEFCLASS-SELF SYM-DEFCLASS-OBJECT NIL) NIL)
     KWD-DEFCLASS-AUXILIARY?
     SYM-DEFCLASS-TRUE
     (LIST*
      SYM-DEFCLASS-TYPECASE
      SYM-DEFCLASS-SELF
      (CONS
       (YIELD-MIXIN-CLASS-USERS-TREE
        (CLSYS-SVAL
         SURROGATE
         SURROGATE-VALUE
         (CLSYS-SVAL STORAGE-SLOT SLOT-OWNER SLOT)))
       (CONS
        (LIST*
         SYM-DEFCLASS-RETURN
         (CONS
          (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT)
          (CONS SYM-DEFCLASS-SELF NIL))
         NIL)
        NIL))
      (LIST*
       SYM-DEFCLASS-OTHERWISE
       (LIST* SYM-DEFCLASS-RETURN SYM-DEFCLASS-NULL NIL)
       NIL)
      NIL)
     NIL)))
  :VOID)

;;; (DEFUN (YIELD-MIXIN-SLOT-WRITER-TREE CONS) ...)

(CL:DEFUN YIELD-MIXIN-SLOT-WRITER-TREE (SLOT)
  (CL:LET*
   ((WRITERNAME (YIELD-MIXIN-SLOT-WRITER-NAME SLOT))
    (TYPETREE (YIELD-SLOT-TYPE-TREE SLOT)))
   (CL:RETURN-FROM
    YIELD-MIXIN-SLOT-WRITER-TREE
    (LIST*
     SYM-DEFCLASS-DEFUN
     (CONS WRITERNAME (CONS TYPETREE NIL))
     (LIST*
      (LIST* SYM-DEFCLASS-SELF SYM-DEFCLASS-OBJECT NIL)
      (LIST* SYM-DEFCLASS-VALUE (COPY-CONS-TREE TYPETREE) NIL)
      NIL)
     KWD-DEFCLASS-AUXILIARY?
     SYM-DEFCLASS-TRUE
     (LIST*
      SYM-DEFCLASS-TYPECASE
      SYM-DEFCLASS-SELF
      (CONS
       (YIELD-MIXIN-CLASS-USERS-TREE
        (CLSYS-SVAL
         SURROGATE
         SURROGATE-VALUE
         (CLSYS-SVAL STORAGE-SLOT SLOT-OWNER SLOT)))
       (CONS
        (LIST*
         SYM-DEFCLASS-RETURN
         (LIST*
          SYM-DEFCLASS-SETF
          (CONS
           (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT)
           (CONS SYM-DEFCLASS-SELF NIL))
          SYM-DEFCLASS-VALUE
          NIL)
         NIL)
        NIL))
      (LIST*
       SYM-DEFCLASS-OTHERWISE
       (LIST* SYM-DEFCLASS-RETURN SYM-DEFCLASS-NULL NIL)
       NIL)
      NIL)
     NIL)))
  :VOID)

;;; (DEFUN (YIELD-NATIVE-SLOT-READER-NAME SYMBOL) ...)

(CL:DEFUN YIELD-NATIVE-SLOT-READER-NAME (SLOT)
  (CL:RETURN-FROM
   YIELD-NATIVE-SLOT-READER-NAME
   (INTERN-DERIVED-SYMBOL
    (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT)
    (CONCATENATE
     (CLSYS-SVAL SYMBOL SYMBOL-NAME (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT))
     "-NATIVE-VALUE")))
  :VOID)

;;; (DEFUN (YIELD-NATIVE-SLOT-WRITER-NAME SYMBOL) ...)

(CL:DEFUN YIELD-NATIVE-SLOT-WRITER-NAME (SLOT)
  (CL:RETURN-FROM
   YIELD-NATIVE-SLOT-WRITER-NAME
   (YIELD-SETTER-METHOD-NAME (YIELD-NATIVE-SLOT-READER-NAME SLOT)))
  :VOID)

;;; (DEFUN (YIELD-NATIVE-SLOT-READER-TREE CONS) ...)

(CL:DEFUN YIELD-NATIVE-SLOT-READER-TREE (SLOT CLASS)
  (CL:LET*
   ((READERNAME (YIELD-NATIVE-SLOT-READER-NAME SLOT))
    (TYPETREE (YIELD-SLOT-TYPE-TREE SLOT))
    (SLOTVISIBLE?
     (SUBTYPE-OF?
      (CLSYS-SVAL CLASS CLASS-TYPE CLASS)
      (CLSYS-SVAL STORAGE-SLOT SLOT-OWNER SLOT))))
   (CL:RETURN-FROM
    YIELD-NATIVE-SLOT-READER-TREE
    (LIST*
     SYM-DEFCLASS-DEFMETHOD
     (CONS READERNAME (CONS TYPETREE NIL))
     (CONS (LIST* SYM-DEFCLASS-SELF (CLASS-SYMBOL CLASS) NIL) NIL)
     KWD-DEFCLASS-AUXILIARY?
     SYM-DEFCLASS-TRUE
     (CONCATENATE
      (CL:IF
       (CL:EQ SLOTVISIBLE? 1)
       (CONS
        (LIST*
         SYM-DEFCLASS-RETURN
         (LIST*
          SYM-DEFCLASS-SLOT-VALUE
          SYM-DEFCLASS-SELF
          (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT)
          (LIST* KWD-DEFCLASS-CONTEXT-SENSITIVE? SYM-DEFCLASS-FALSE NIL))
         NIL)
        NIL)
       (LIST*
        (LIST*
         SYM-DEFCLASS-ERROR
         (WRAP-LITERAL "Slot '")
         (WRAP-LITERAL
          (CLSYS-SVAL
           SYMBOL
           SYMBOL-NAME
           (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT)))
         (LIST* (WRAP-LITERAL "' does not exist on ") SYM-DEFCLASS-SELF NIL))
        (LIST* SYM-DEFCLASS-RETURN SYM-DEFCLASS-NULL NIL)
        NIL))
      NIL))))
  :VOID)

;;; (DEFUN (YIELD-NATIVE-SLOT-WRITER-TREE CONS) ...)

(CL:DEFUN YIELD-NATIVE-SLOT-WRITER-TREE (SLOT CLASS)
  (CL:LET*
   ((WRITERNAME (YIELD-NATIVE-SLOT-WRITER-NAME SLOT))
    (TYPETREE (YIELD-SLOT-TYPE-TREE SLOT))
    (SLOTVISIBLE?
     (SUBTYPE-OF?
      (CLSYS-SVAL CLASS CLASS-TYPE CLASS)
      (CLSYS-SVAL STORAGE-SLOT SLOT-OWNER SLOT))))
   (CL:RETURN-FROM
    YIELD-NATIVE-SLOT-WRITER-TREE
    (LIST*
     SYM-DEFCLASS-DEFMETHOD
     (CONS WRITERNAME (CONS TYPETREE NIL))
     (LIST*
      (LIST* SYM-DEFCLASS-SELF (CLASS-SYMBOL CLASS) NIL)
      (LIST* SYM-DEFCLASS-VALUE (COPY-CONS-TREE TYPETREE) NIL)
      NIL)
     KWD-DEFCLASS-AUXILIARY?
     SYM-DEFCLASS-TRUE
     (CONCATENATE
      (CL:IF
       (CL:EQ SLOTVISIBLE? 1)
       (CONS
        (LIST*
         SYM-DEFCLASS-RETURN
         (LIST*
          SYM-DEFCLASS-SETF
          (LIST*
           SYM-DEFCLASS-SLOT-VALUE
           SYM-DEFCLASS-SELF
           (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT)
           (LIST* KWD-DEFCLASS-CONTEXT-SENSITIVE? SYM-DEFCLASS-FALSE NIL))
          SYM-DEFCLASS-VALUE
          NIL)
         NIL)
        NIL)
       (LIST*
        (LIST* SYM-DEFCLASS-IGNORE SYM-DEFCLASS-VALUE NIL)
        (LIST*
         SYM-DEFCLASS-ERROR
         (WRAP-LITERAL "Slot '")
         (WRAP-LITERAL
          (CLSYS-SVAL
           SYMBOL
           SYMBOL-NAME
           (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT)))
         (LIST* (WRAP-LITERAL "' does not exist on ") SYM-DEFCLASS-SELF NIL))
        (LIST* SYM-DEFCLASS-RETURN SYM-DEFCLASS-NULL NIL)
        NIL))
      NIL))))
  :VOID)

;;; (DEFUN CREATE-KEYED-EQUALITY-METHOD-UNIT ...)

(CL:DEFUN CREATE-KEYED-EQUALITY-METHOD-UNIT (CLASS)
  (CL:LET*
   ((TESTTREES NIL))
   (CL:LET*
    ((SLOTNAME NULL)
     (ITER-001 (CLSYS-SVAL LIST THE-CONS-LIST (CLASS-KEY CLASS)))
     (COLLECT-001 NULL))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ SLOTNAME (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:IF
      (CL:EQ COLLECT-001 NULL)
      (CL:PROGN
       (CL:SETQ
        COLLECT-001
        (CONS
         (LIST*
          SYM-DEFCLASS-EQ?
          (CONS SLOTNAME (CONS SYM-DEFCLASS-SELF NIL))
          (CONS SLOTNAME (CONS SYM-DEFCLASS-OTHER NIL))
          NIL)
         NIL))
       (CL:IF
        (CL:EQ TESTTREES NIL)
        (CL:SETQ TESTTREES COLLECT-001)
        (ADD-CONS-TO-END-OF-CONS-LIST TESTTREES COLLECT-001)))
      (CL:PROGN
       (CL:SETF
        (CLSYS-SVAL CONS REST COLLECT-001)
        (CONS
         (LIST*
          SYM-DEFCLASS-EQ?
          (CONS SLOTNAME (CONS SYM-DEFCLASS-SELF NIL))
          (CONS SLOTNAME (CONS SYM-DEFCLASS-OTHER NIL))
          NIL)
         NIL))
       (CL:SETQ COLLECT-001 (CLSYS-SVAL CONS REST COLLECT-001))))))
   (WALK-AUXILIARY-TREE
    (LIST*
     SYM-DEFCLASS-DEFMETHOD
     (LIST* SYM-DEFCLASS-EQUAL SYM-DEFCLASS-BOOLEAN NIL)
     (LIST*
      (LIST* SYM-DEFCLASS-SELF (CLASS-SYMBOL CLASS) NIL)
      SYM-DEFCLASS-OTHER
      NIL)
     (LIST*
      SYM-DEFCLASS-RETURN
      (CONS SYM-DEFCLASS-AND (CONCATENATE TESTTREES NIL))
      NIL)
     NIL)))
  :VOID)

;;; (DEFUN (TRANSIENT-OBJECT? BOOLEAN) ...)

(CL:DEFUN TRANSIENT-OBJECT? (OBJECT)
  (CL:LET*
   ((TYPE (PRIMARY-TYPE OBJECT)))
   (CL:RETURN-FROM
    TRANSIENT-OBJECT?
    (SUBTYPE-OF? TYPE SGT-DEFCLASS-TRANSIENT-MIXIN)))
  :VOID)

(CL:DEFUN STARTUP-DEFCLASS ()
  (CL:LET*
   ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 2) 1)
    (CL:SETQ
     KWD-DEFCLASS-COMMON-LISP
     (INTERN-RIGID-SYMBOL-WRT-MODULE "COMMON-LISP" NULL 2))
    (CL:SETQ
     SGT-DEFCLASS-LITERAL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "LITERAL" NULL 1))
    (CL:SETQ SYM-DEFCLASS-NULL (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-DEFINE-CLASS-FROM-STRINGIFIED-SOURCE
     (INTERN-RIGID-SYMBOL-WRT-MODULE
      "DEFINE-CLASS-FROM-STRINGIFIED-SOURCE"
      NULL
      0))
    (CL:SETQ
     SYM-DEFCLASS-CLASS-CL-NATIVE-TYPE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS-CL-NATIVE-TYPE" NULL 0))
    (CL:SETQ KWD-DEFCLASS-IDL (INTERN-RIGID-SYMBOL-WRT-MODULE "IDL" NULL 2))
    (CL:SETQ
     SYM-DEFCLASS-CLASS-IDL-NATIVE-TYPE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS-IDL-NATIVE-TYPE" NULL 0))
    (CL:SETQ KWD-DEFCLASS-JAVA (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA" NULL 2))
    (CL:SETQ
     SYM-DEFCLASS-CLASS-JAVA-NATIVE-TYPE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS-JAVA-NATIVE-TYPE" NULL 0))
    (CL:SETQ KWD-DEFCLASS-CPP (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP" NULL 2))
    (CL:SETQ
     KWD-DEFCLASS-CPP-STANDALONE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP-STANDALONE" NULL 2))
    (CL:SETQ
     SYM-DEFCLASS-CLASS-CPP-NATIVE-TYPE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS-CPP-NATIVE-TYPE" NULL 0))
    (CL:SETQ
     SGT-DEFCLASS-SECOND-CLASS-OBJECT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SECOND-CLASS-OBJECT" NULL 1))
    (CL:SETQ
     SGT-DEFCLASS-NON-OBJECT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NON-OBJECT" NULL 1))
    (CL:SETQ
     KWD-DEFCLASS-DYNAMIC
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DYNAMIC" NULL 2))
    (CL:SETQ
     SYM-DEFCLASS-SLOT-INITIAL-VALUE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SLOT-INITIAL-VALUE" NULL 0))
    (CL:SETQ KWD-DEFCLASS-BIT (INTERN-RIGID-SYMBOL-WRT-MODULE "BIT" NULL 2))
    (CL:SETQ
     SGT-DEFCLASS-BOOLEAN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "BOOLEAN" NULL 1))
    (CL:SETQ
     SYM-DEFCLASS-SLOT-RENAMES
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SLOT-RENAMES" NULL 0))
    (CL:SETQ
     SGT-DEFCLASS-UNKNOWN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "UNKNOWN" NULL 1))
    (CL:SETQ
     SYM-DEFCLASS-NEXT-SWEEP-LIST-OBJECT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NEXT-SWEEP-LIST-OBJECT" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-CLASS-CREATOR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS-CREATOR" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-DEFGLOBAL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFGLOBAL" NULL 0))
    (CL:SETQ SYM-DEFCLASS-LIST (INTERN-RIGID-SYMBOL-WRT-MODULE "LIST" NULL 0))
    (CL:SETQ SYM-DEFCLASS-OF (INTERN-RIGID-SYMBOL-WRT-MODULE "OF" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-STARTUP-TIME-PROGN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-TIME-PROGN" NULL 0))
    (CL:SETQ
     KWD-DEFCLASS-EARLY-INITS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "EARLY-INITS" NULL 2))
    (CL:SETQ SYM-DEFCLASS-SETQ (INTERN-RIGID-SYMBOL-WRT-MODULE "SETQ" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-MAKE-NON-RECYCLED-LIST
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MAKE-NON-RECYCLED-LIST" NULL 0))
    (CL:SETQ SYM-DEFCLASS-SELF (INTERN-RIGID-SYMBOL-WRT-MODULE "SELF" NULL 0))
    (CL:SETQ SYM-DEFCLASS-MAKE (INTERN-RIGID-SYMBOL-WRT-MODULE "MAKE" NULL 0))
    (CL:SETQ SYM-DEFCLASS-WHEN (INTERN-RIGID-SYMBOL-WRT-MODULE "WHEN" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-DEFINED?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFINED?" NULL 0))
    (CL:SETQ SYM-DEFCLASS-FREE (INTERN-RIGID-SYMBOL-WRT-MODULE "FREE" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-DYNAMIC-SLOTS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DYNAMIC-SLOTS" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-CLEAR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CLEAR" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-UNLESS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "UNLESS" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-RETURN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "RETURN" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-SLOT-VALUE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SLOT-VALUE" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-SAFE-CAST
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SAFE-CAST" NULL 0))
    (CL:SETQ SYM-DEFCLASS-POP (INTERN-RIGID-SYMBOL-WRT-MODULE "POP" NULL 0))
    (CL:SETQ SYM-DEFCLASS-COND (INTERN-RIGID-SYMBOL-WRT-MODULE "COND" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-OTHERWISE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "OTHERWISE" NULL 0))
    (CL:SETQ SYM-DEFCLASS-SETF (INTERN-RIGID-SYMBOL-WRT-MODULE "SETF" NULL 0))
    (CL:SETQ
     KWD-DEFCLASS-CONTEXT-SENSITIVE?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTEXT-SENSITIVE?" NULL 2))
    (CL:SETQ
     SYM-DEFCLASS-FALSE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FALSE" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-RUN-CONSTRUCTOR-DEMONS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "RUN-CONSTRUCTOR-DEMONS" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-DEFUN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFUN" NULL 0))
    (CL:SETQ SYM-DEFCLASS-LET (INTERN-RIGID-SYMBOL-WRT-MODULE "LET" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-CLASS-DESTRUCTOR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS-DESTRUCTOR" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-DEFMETHOD
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFMETHOD" NULL 0))
    (CL:SETQ SYM-DEFCLASS-PUSH (INTERN-RIGID-SYMBOL-WRT-MODULE "PUSH" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-SWEEP
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SWEEP" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-UNMAKE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "UNMAKE" NULL 0))
    (CL:SETQ SGT-DEFCLASS-VOID (INTERN-RIGID-SYMBOL-WRT-MODULE "VOID" NULL 1))
    (CL:SETQ
     SYM-DEFCLASS-SLOT-TYPE-SPECIFIER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SLOT-TYPE-SPECIFIER" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-ANSWER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "ANSWER" NULL 0))
    (CL:SETQ SYM-DEFCLASS-IF (INTERN-RIGID-SYMBOL-WRT-MODULE "IF" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-NULL?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL?" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-PROGN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PROGN" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-ERROR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "ERROR" NULL 0))
    (CL:SETQ
     KWD-DEFCLASS-AUXILIARY?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "AUXILIARY?" NULL 2))
    (CL:SETQ SYM-DEFCLASS-TRUE (INTERN-RIGID-SYMBOL-WRT-MODULE "TRUE" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-VALUE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "VALUE" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-IGNORE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "IGNORE" NULL 0))
    (CL:SETQ
     SGT-DEFCLASS-OBJECT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "OBJECT" NULL 1))
    (CL:SETQ
     KWD-DEFCLASS-WRAP-FUNCTION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WRAP-FUNCTION" NULL 2))
    (CL:SETQ SYM-DEFCLASS-CAST (INTERN-RIGID-SYMBOL-WRT-MODULE "CAST" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-SETVALUE?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SETVALUE?" NULL 0))
    (CL:SETQ
     SGT-DEFCLASS-DYNAMIC-SLOTS-MIXIN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DYNAMIC-SLOTS-MIXIN" NULL 1))
    (CL:SETQ
     SYM-DEFCLASS-SLOTNAME
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SLOTNAME" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-QUOTE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "QUOTE" NULL 0))
    (CL:SETQ SYM-DEFCLASS-CASE (INTERN-RIGID-SYMBOL-WRT-MODULE "CASE" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-HELP-SET-DYNAMIC-SLOT-VALUE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "HELP-SET-DYNAMIC-SLOT-VALUE" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-LOOKUP
     (INTERN-RIGID-SYMBOL-WRT-MODULE "LOOKUP" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-OBJECT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "OBJECT" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-SYMBOL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SYMBOL" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-BOOLEAN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "BOOLEAN" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-CLASS-SLOT-ACCESSOR-CODE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS-SLOT-ACCESSOR-CODE" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-THE-CODE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "THE-CODE" NULL 0))
    (CL:SETQ
     KWD-DEFCLASS-FUNCTION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FUNCTION" NULL 2))
    (CL:SETQ
     SYM-DEFCLASS-TYPECASE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "TYPECASE" NULL 0))
    (CL:SETQ SYM-DEFCLASS-EQ? (INTERN-RIGID-SYMBOL-WRT-MODULE "EQ?" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-OTHER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "OTHER" NULL 0))
    (CL:SETQ
     SYM-DEFCLASS-EQUAL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "EQUAL" NULL 0))
    (CL:SETQ SYM-DEFCLASS-AND (INTERN-RIGID-SYMBOL-WRT-MODULE "AND" NULL 0))
    (CL:SETQ
     SGT-DEFCLASS-TRANSIENT-MIXIN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "TRANSIENT-MIXIN" NULL 1)))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 4) 1)
    (CL:SETQ *TRANSLATOR-OUTPUT-LANGUAGE* KWD-DEFCLASS-COMMON-LISP))
   (CL:WHEN (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 6) 1) (FINALIZE-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 7) 1)
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "TYPE-TO-NULL-VALUE-TREE"
        "TYPE"
        "(DEFUN (TYPE-TO-NULL-VALUE-TREE OBJECT) ((TYPE TYPE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION TYPE-TO-NULL-VALUE-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-CONS-LIST-FROM-SEQUENCE"
        "SEQUENCE"
        "(DEFUN (YIELD-CONS-LIST-FROM-SEQUENCE CONS) ((SEQUENCE SEQUENCE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-CONS-LIST-FROM-SEQUENCE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-DEFINE-STELLA-CLASS"
        "CLASS"
        "(DEFUN (YIELD-DEFINE-STELLA-CLASS CONS) ((CLASS CLASS)) :DOCUMENTATION \"Return a cons tree that (when evaluated) constructs
a Stella class object.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-DEFINE-STELLA-CLASS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CREATE-NATIVE-CLASS?"
        "CLASS"
        "(DEFUN (CREATE-NATIVE-CLASS? BOOLEAN) ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CREATE-NATIVE-CLASS?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "WARN-ABOUT-MULTIPLE-PARENTS"
        "CLASS"
        "(DEFUN WARN-ABOUT-MULTIPLE-PARENTS ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION WARN-ABOUT-MULTIPLE-PARENTS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "WARN-ABOUT-NON-DIRECT-SUPERS"
        "CLASS"
        "(DEFUN WARN-ABOUT-NON-DIRECT-SUPERS ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION WARN-ABOUT-NON-DIRECT-SUPERS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SPACE-SAVER-SLOT-ALLOCATION?"
        "STORAGE-SLOT"
        "(DEFUN (SPACE-SAVER-SLOT-ALLOCATION? BOOLEAN) ((SLOT STORAGE-SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SPACE-SAVER-SLOT-ALLOCATION?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "REDUNDANT-SLOT?"
        "STORAGE-SLOT"
        "(DEFUN (REDUNDANT-SLOT? BOOLEAN) ((SLOT STORAGE-SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION REDUNDANT-SLOT?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "NATIVE-SLOT?"
        "STORAGE-SLOT"
        "(DEFUN (NATIVE-SLOT? BOOLEAN) ((SLOT STORAGE-SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION NATIVE-SLOT?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CANONICAL-SLOT"
        "STORAGE-SLOT"
        "(DEFUN (CANONICAL-SLOT STORAGE-SLOT) ((SLOT STORAGE-SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CANONICAL-SLOT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "UNKNOWN-TYPE?"
        "TYPE"
        "(DEFUN (UNKNOWN-TYPE? BOOLEAN) ((TYPE TYPE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION UNKNOWN-TYPE?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SLOT-HAS-UNKNOWN-TYPE?"
        "STORAGE-SLOT"
        "(DEFUN (SLOT-HAS-UNKNOWN-TYPE? BOOLEAN) ((SLOT STORAGE-SLOT) (CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SLOT-HAS-UNKNOWN-TYPE?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "NATIVE-SLOT-HOME"
        "STORAGE-SLOT"
        "(DEFUN (NATIVE-SLOT-HOME CLASS) ((SLOT STORAGE-SLOT) (CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION NATIVE-SLOT-HOME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "MIXIN-SLOT-HOME"
        "STORAGE-SLOT"
        "(DEFUN (MIXIN-SLOT-HOME CLASS) ((SLOT STORAGE-SLOT) (CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION MIXIN-SLOT-HOME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SWEEP"
        "OBJECT"
        "(DEFMETHOD SWEEP ((SELF OBJECT)) :DOCUMENTATION \"Default method.  Sweep up all 'self'-type objects.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION SWEEP)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SWEEP-TRANSIENTS"
        NULL
        "(DEFUN SWEEP-TRANSIENTS ())")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SWEEP-TRANSIENTS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-RECYCLE-LIST-NAME"
        "CLASS"
        "(DEFUN (YIELD-RECYCLE-LIST-NAME SYMBOL) ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-RECYCLE-LIST-NAME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-SWEEP-LIST-NAME"
        "CLASS"
        "(DEFUN (YIELD-SWEEP-LIST-NAME SYMBOL) ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-SWEEP-LIST-NAME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-SWEEP-LIST-POINTER-NAME"
        "CLASS"
        "(DEFUN (YIELD-SWEEP-LIST-POINTER-NAME SYMBOL) ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-SWEEP-LIST-POINTER-NAME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "RECYCLE-SLOT"
        "CLASS"
        "(DEFUN (RECYCLE-SLOT STORAGE-SLOT) ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION RECYCLE-SLOT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "USE-FREE-LIST?"
        "CLASS"
        "(DEFUN (USE-FREE-LIST? BOOLEAN) ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION USE-FREE-LIST?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "USE-SWEEP-LIST?"
        "CLASS"
        "(DEFUN (USE-SWEEP-LIST? BOOLEAN) ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION USE-SWEEP-LIST?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DECIDED-TO-RECYCLE?"
        "CLASS"
        "(DEFUN (DECIDED-TO-RECYCLE? BOOLEAN) ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION DECIDED-TO-RECYCLE?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "MAKE-NON-RECYCLED-LIST"
        NULL
        "(DEFUN (MAKE-NON-RECYCLED-LIST LIST) ())")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION MAKE-NON-RECYCLED-LIST)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-RECYCLE-LIST-DEFINITIONS"
        "CLASS"
        "(DEFUN (YIELD-RECYCLE-LIST-DEFINITIONS CONS) ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-RECYCLE-LIST-DEFINITIONS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-MAKE-TREES"
        "CLASS"
        "(DEFUN (YIELD-MAKE-TREES CONS) ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-MAKE-TREES)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-CONSTRUCTOR-NAME"
        "CLASS"
        "(DEFUN (YIELD-CONSTRUCTOR-NAME SYMBOL) ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-CONSTRUCTOR-NAME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-CREATION-TREES"
        "CLASS"
        "(DEFUN (YIELD-CREATION-TREES CONS) ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-CREATION-TREES)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-TERMINATE-OBJECT-TREES"
        "CLASS"
        "(DEFUN (YIELD-TERMINATE-OBJECT-TREES CONS) ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-TERMINATE-OBJECT-TREES)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-CREATION-OR-REUSE-TREES"
        "CLASS"
        "(DEFUN (YIELD-CREATION-OR-REUSE-TREES CONS) ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-CREATION-OR-REUSE-TREES)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "MARK-DIRECT-EQUIVALENT-SLOT"
        "SLOT"
        "(DEFUN MARK-DIRECT-EQUIVALENT-SLOT ((SLOT SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION MARK-DIRECT-EQUIVALENT-SLOT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "IS-CONTEXT-SENSITIVE-SLOT?"
        "STORAGE-SLOT"
        "(DEFUN (IS-CONTEXT-SENSITIVE-SLOT? BOOLEAN) ((SLOT STORAGE-SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION IS-CONTEXT-SENSITIVE-SLOT?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-INITIAL-VALUE-ASSIGNMENT"
        "STORAGE-SLOT"
        "(DEFUN (YIELD-INITIAL-VALUE-ASSIGNMENT CONS) ((SLOT STORAGE-SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-INITIAL-VALUE-ASSIGNMENT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-INITIAL-VALUE-ASSIGNMENTS"
        "CLASS"
        "(DEFUN (YIELD-INITIAL-VALUE-ASSIGNMENTS CONS) ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-INITIAL-VALUE-ASSIGNMENTS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-LOCAL-INITIAL-VALUE-ASSIGNMENTS"
        "CLASS"
        "(DEFUN (YIELD-LOCAL-INITIAL-VALUE-ASSIGNMENTS CONS) ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-LOCAL-INITIAL-VALUE-ASSIGNMENTS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-CONSTRUCTOR-BODY"
        "CLASS"
        "(DEFUN (YIELD-CONSTRUCTOR-BODY CONS) ((CLASS CLASS) (REQUIREDASSIGNMENTS CONS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-CONSTRUCTOR-BODY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-CONSTRUCTOR-DEFINITION"
        "CLASS"
        "(DEFUN (YIELD-CONSTRUCTOR-DEFINITION CONS) ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-CONSTRUCTOR-DEFINITION)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-DESTRUCTOR-DEFINITIONS"
        "CLASS"
        "(DEFUN (YIELD-DESTRUCTOR-DEFINITIONS CONS) ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-DESTRUCTOR-DEFINITIONS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CREATE-CONSTRUCTOR-AND-DESTRUCTOR-UNITS"
        "CLASS"
        "(DEFUN CREATE-CONSTRUCTOR-AND-DESTRUCTOR-UNITS ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CREATE-CONSTRUCTOR-AND-DESTRUCTOR-UNITS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PARAMETERIZED-CLASS?"
        "CLASS"
        "(DEFUN (PARAMETERIZED-CLASS? BOOLEAN) ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION PARAMETERIZED-CLASS?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CLASS-WITH-INITIALIZER?"
        "CLASS"
        "(DEFUN (CLASS-WITH-INITIALIZER? BOOLEAN) ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CLASS-WITH-INITIALIZER?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-INITIALIZER-NAME"
        "CLASS"
        "(DEFUN (YIELD-INITIALIZER-NAME SYMBOL) ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-INITIALIZER-NAME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-INITIALIZER-DEFINITION"
        "CLASS"
        "(DEFUN (YIELD-INITIALIZER-DEFINITION CONS) ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-INITIALIZER-DEFINITION)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CREATE-CPP-CONSTRUCTOR-UNIT"
        "CLASS"
        "(DEFUN CREATE-CPP-CONSTRUCTOR-UNIT ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CREATE-CPP-CONSTRUCTOR-UNIT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CPP-CONSTRUCTOR?"
        "METHOD-SLOT"
        "(DEFUN (CPP-CONSTRUCTOR? BOOLEAN) ((METHOD METHOD-SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CPP-CONSTRUCTOR?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "HAS-NON-NULL-DEFAULT-VALUE?"
        "STORAGE-SLOT"
        "(DEFUN (HAS-NON-NULL-DEFAULT-VALUE? BOOLEAN) ((SLOT STORAGE-SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION HAS-NON-NULL-DEFAULT-VALUE?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SYSTEM-DEFINED-SLOT-READER?"
        "STORAGE-SLOT"
        "(DEFUN (SYSTEM-DEFINED-SLOT-READER? BOOLEAN) ((SLOT STORAGE-SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SYSTEM-DEFINED-SLOT-READER?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SYSTEM-DEFINED-SLOT-WRITER?"
        "STORAGE-SLOT"
        "(DEFUN (SYSTEM-DEFINED-SLOT-WRITER? BOOLEAN) ((SLOT STORAGE-SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SYSTEM-DEFINED-SLOT-WRITER?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-SLOT-TYPE-TREE"
        "STORAGE-SLOT"
        "(DEFUN (YIELD-SLOT-TYPE-TREE OBJECT) ((SLOT STORAGE-SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-SLOT-TYPE-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-HARDWIRED-SLOT-VARIABLE"
        "STORAGE-SLOT"
        "(DEFUN (YIELD-HARDWIRED-SLOT-VARIABLE SYMBOL) ((SLOT STORAGE-SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-HARDWIRED-SLOT-VARIABLE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-HARDWIRED-SLOT-READER-BODY"
        "STORAGE-SLOT"
        "(DEFUN (YIELD-HARDWIRED-SLOT-READER-BODY CONS CONS) ((SLOT STORAGE-SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-HARDWIRED-SLOT-READER-BODY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "FINALIZE-ACCESSOR-METHOD"
        "METHOD-SLOT"
        "(DEFUN FINALIZE-ACCESSOR-METHOD ((METHOD METHOD-SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION FINALIZE-ACCESSOR-METHOD)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "WRAP-WITH-DEFAULT-VALUE-AND-RETURN-CODE"
        "CONS"
        "(DEFUN (WRAP-WITH-DEFAULT-VALUE-AND-RETURN-CODE CONS) ((READCODE CONS) (DEFAULTEXPRESSION OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION WRAP-WITH-DEFAULT-VALUE-AND-RETURN-CODE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-SLOT-READER-TREE"
        "STORAGE-SLOT"
        "(DEFUN (YIELD-SLOT-READER-TREE CONS) ((SLOT STORAGE-SLOT) (CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-SLOT-READER-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-SLOT-WRITER-TREE"
        "STORAGE-SLOT"
        "(DEFUN (YIELD-SLOT-WRITER-TREE CONS) ((SLOT STORAGE-SLOT) (CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-SLOT-WRITER-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SLOT-VALUE-IS-BARE-LITERAL?"
        "SLOT"
        "(DEFUN (SLOT-VALUE-IS-BARE-LITERAL? BOOLEAN) ((SLOT SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SLOT-VALUE-IS-BARE-LITERAL?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "GENERICALLY-ACCESSIBLE-TYPE?"
        "TYPE"
        "(DEFUN (GENERICALLY-ACCESSIBLE-TYPE? BOOLEAN) ((TYPE TYPE)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION GENERICALLY-ACCESSIBLE-TYPE?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "GENERIC-SLOT-READER?"
        "STORAGE-SLOT"
        "(DEFUN (GENERIC-SLOT-READER? BOOLEAN) ((SLOT STORAGE-SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION GENERIC-SLOT-READER?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "GENERIC-SLOT-WRITER?"
        "STORAGE-SLOT"
        "(DEFUN (GENERIC-SLOT-WRITER? BOOLEAN) ((SLOT STORAGE-SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION GENERIC-SLOT-WRITER?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SLOT-ACCESS-METHOD?"
        "STORAGE-SLOT"
        "(DEFUN (SLOT-ACCESS-METHOD? BOOLEAN) ((SLOT STORAGE-SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SLOT-ACCESS-METHOD?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-GENERIC-SLOT-ACCESSOR-NAME"
        "CLASS"
        "(DEFUN (YIELD-GENERIC-SLOT-ACCESSOR-NAME SYMBOL) ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-GENERIC-SLOT-ACCESSOR-NAME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-GENERIC-SLOT-ACCESSOR-DEFINITION"
        "CLASS"
        "(DEFUN (YIELD-GENERIC-SLOT-ACCESSOR-DEFINITION CONS) ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-GENERIC-SLOT-ACCESSOR-DEFINITION)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CREATE-GENERIC-SLOT-ACCESSOR-UNIT"
        "CLASS"
        "(DEFUN CREATE-GENERIC-SLOT-ACCESSOR-UNIT ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CREATE-GENERIC-SLOT-ACCESSOR-UNIT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-GENERIC-SLOT-ACCESSOR-ATTACHMENT"
        "CLASS"
        "(DEFUN (YIELD-GENERIC-SLOT-ACCESSOR-ATTACHMENT CONS) ((CLASS CLASS) (CLASSREF SYMBOL)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-GENERIC-SLOT-ACCESSOR-ATTACHMENT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-MIXIN-CLASS-USERS-TREE"
        "CLASS"
        "(DEFUN (YIELD-MIXIN-CLASS-USERS-TREE (CONS OF SYMBOL)) ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-MIXIN-CLASS-USERS-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-MIXIN-SLOT-READER-NAME"
        "STORAGE-SLOT"
        "(DEFUN (YIELD-MIXIN-SLOT-READER-NAME SYMBOL) ((SLOT STORAGE-SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-MIXIN-SLOT-READER-NAME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-MIXIN-SLOT-WRITER-NAME"
        "STORAGE-SLOT"
        "(DEFUN (YIELD-MIXIN-SLOT-WRITER-NAME SYMBOL) ((SLOT STORAGE-SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-MIXIN-SLOT-WRITER-NAME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-MIXIN-SLOT-READER-TREE"
        "STORAGE-SLOT"
        "(DEFUN (YIELD-MIXIN-SLOT-READER-TREE CONS) ((SLOT STORAGE-SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-MIXIN-SLOT-READER-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-MIXIN-SLOT-WRITER-TREE"
        "STORAGE-SLOT"
        "(DEFUN (YIELD-MIXIN-SLOT-WRITER-TREE CONS) ((SLOT STORAGE-SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-MIXIN-SLOT-WRITER-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-NATIVE-SLOT-READER-NAME"
        "STORAGE-SLOT"
        "(DEFUN (YIELD-NATIVE-SLOT-READER-NAME SYMBOL) ((SLOT STORAGE-SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-NATIVE-SLOT-READER-NAME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-NATIVE-SLOT-WRITER-NAME"
        "STORAGE-SLOT"
        "(DEFUN (YIELD-NATIVE-SLOT-WRITER-NAME SYMBOL) ((SLOT STORAGE-SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-NATIVE-SLOT-WRITER-NAME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-NATIVE-SLOT-READER-TREE"
        "STORAGE-SLOT"
        "(DEFUN (YIELD-NATIVE-SLOT-READER-TREE CONS) ((SLOT STORAGE-SLOT) (CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-NATIVE-SLOT-READER-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-NATIVE-SLOT-WRITER-TREE"
        "STORAGE-SLOT"
        "(DEFUN (YIELD-NATIVE-SLOT-WRITER-TREE CONS) ((SLOT STORAGE-SLOT) (CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-NATIVE-SLOT-WRITER-TREE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CREATE-KEYED-EQUALITY-METHOD-UNIT"
        "CLASS"
        "(DEFUN CREATE-KEYED-EQUALITY-METHOD-UNIT ((CLASS CLASS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CREATE-KEYED-EQUALITY-METHOD-UNIT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "TRANSIENT-OBJECT?"
        "OBJECT"
        "(DEFUN (TRANSIENT-OBJECT? BOOLEAN) ((OBJECT OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION TRANSIENT-OBJECT?)))
    (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
     "STARTUP-DEFCLASS"
     NULL
     "(DEFUN STARTUP-DEFCLASS ())"))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 8) 1)
    (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 9) 1)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *TRANSLATOR-OUTPUT-LANGUAGE* KEYWORD :COMMON-LISP :DOCUMENTATION \"Specifies the translator output language; either
:common-lisp, :idl, :java, :cpp, or :cpp-standalone.\")")))
  :VOID)
