;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

#|--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1996, 1997             | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied "AS IS",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR KWD-STARTUP-EARLY-INITS NULL)
(CL:DEFVAR KWD-STARTUP-MODULES NULL)
(CL:DEFVAR KWD-STARTUP-SYMBOLS NULL)
(CL:DEFVAR KWD-STARTUP-QUOTED-CONSTANTS NULL)
(CL:DEFVAR KWD-STARTUP-GLOBALS NULL)
(CL:DEFVAR KWD-STARTUP-CLASSES NULL)
(CL:DEFVAR KWD-STARTUP-FINALIZE-CLASSES NULL)
(CL:DEFVAR KWD-STARTUP-METHODS NULL)
(CL:DEFVAR KWD-STARTUP-FINALIZE-METHODS NULL)
(CL:DEFVAR KWD-STARTUP-FINAL NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL
  *STELLA-MODULE*
  *MODULE*
  STANDARD-OUTPUT
  EOL
  *CLASS-HIERARCHY-BOOTED?*))

;;; (DEFGLOBAL *STELLA-MAJOR-VERSION-NUMBER* ...)

(CL:DEFVAR *STELLA-MAJOR-VERSION-NUMBER* 1)

;;; (DEFGLOBAL *STELLA-MINOR-VERSION-NUMBER* ...)

(CL:DEFVAR *STELLA-MINOR-VERSION-NUMBER* 2)

;;; (DEFGLOBAL *STELLA-RELEASE-STATE* ...)

(CL:DEFVAR *STELLA-RELEASE-STATE* ".alpha")

;;; (DEFGLOBAL *STELLA-PATCH-LEVEL* ...)

(CL:DEFVAR *STELLA-PATCH-LEVEL* 1)

;;; (DEFGLOBAL *STELLA-VERSION-STRING* ...)

(CL:DEFVAR *STELLA-VERSION-STRING* NULL)

;;; (DEFGLOBAL *STARTUP-TIME-PHASES* ...)

(CL:DEFVAR *STARTUP-TIME-PHASES* NULL
  "List of phases that can be legally used as an optional
phase argument to a 'startup-time-progn' form.  The corresponding code
will be executed during the execution of a startup-time-code function only
if the position of the keyword in the list corresponds to the current value of
'*startup-time-phase*', or if phasing of startup-time code is disabled.")

;;; (DEFGLOBAL *STARTUP-TIME-PHASE* ...)

(CL:DEFVAR *STARTUP-TIME-PHASE* 999
  "The current phase during 'phased startup'.
The value has to correspond to the position of one of the keywords
in '*startup-time-phases*'.  999 means no phasing at all.")

;;; (DEFUN (CURRENT-STARTUP-TIME-PHASE? BOOLEAN) ...)

(CL:DEFUN CURRENT-STARTUP-TIME-PHASE? (PHASE)
  (CL:RETURN-FROM
   CURRENT-STARTUP-TIME-PHASE?
   (CL:IF
    (CL:OR (CL:= *STARTUP-TIME-PHASE* 999) (CL:= PHASE *STARTUP-TIME-PHASE*))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN (ENCODE-STARTUP-TIME-PHASE INTEGER) ...)

(CL:DEFUN ENCODE-STARTUP-TIME-PHASE (PHASE)
  (CL:LET*
   ((STARTUPTIMEPHASEASNUMBER 0))
   (CL:WHEN
    (CL:EQ (MEMBER? *STARTUP-TIME-PHASES* PHASE) 0)
    (CL:SETQ PHASE KWD-STARTUP-FINAL))
   (CL:LET*
    ((PH NULL)
     (ITER-001 (CLSYS-SVAL LIST THE-CONS-LIST *STARTUP-TIME-PHASES*)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ PH (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:IF
      (CL:EQ PH PHASE)
      (CL:RETURN-FROM ENCODE-STARTUP-TIME-PHASE STARTUPTIMEPHASEASNUMBER)
      (CL:SETQ STARTUPTIMEPHASEASNUMBER (CL:1+ STARTUPTIMEPHASEASNUMBER))))))
  :VOID)

;;; (DEFUN STARTUP-KERNEL ...)

(CL:DEFUN STARTUP-KERNEL (VERBOSE?)
  (CL:LET*
   ((PHASE NULL)
    (ITER-001 0)
    (UPPER-BOUND-001 9)
    (UNBOUNDED?-001 (NULL? UPPER-BOUND-001)))
   (CL:LOOP
    WHILE
    (CL:OR (CL:EQ UNBOUNDED?-001 1) (CL:<= ITER-001 UPPER-BOUND-001))
    DO
    (CL:PROGN (CL:SETQ PHASE ITER-001) (CL:SETQ ITER-001 (CL:1+ ITER-001)))
    (CL:TAGBODY
     (CL:SETQ *STARTUP-TIME-PHASE* PHASE)
     (CL:WHEN
      (CL:EQ VERBOSE? 1)
      (CL:COND
       ((CL:= PHASE 0) NULL)
       ((CL:= PHASE 2)
        (CL:LET
         ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
         (CL:WRITE-STRING "Running kernel startup code..." %%STREAM)
         (CL:TERPRI %%STREAM)
         (CL:FORCE-OUTPUT %%STREAM))
        (CL:LET
         ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
         (CL:WRITE-STRING "Initializing symbol tables..." %%STREAM)
         (CL:TERPRI %%STREAM)
         (CL:FORCE-OUTPUT %%STREAM)))
       ((CL:= PHASE 3)
        (CL:LET
         ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
         (CL:WRITE-STRING "Initializing quoted constants..." %%STREAM)
         (CL:TERPRI %%STREAM)
         (CL:FORCE-OUTPUT %%STREAM)))
       ((CL:= PHASE 4)
        (CL:LET
         ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
         (CL:WRITE-STRING "Initializing global variables..." %%STREAM)
         (CL:TERPRI %%STREAM)
         (CL:FORCE-OUTPUT %%STREAM)))
       ((CL:= PHASE 5)
        (CL:LET
         ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
         (CL:WRITE-STRING "Creating class objects..." %%STREAM)
         (CL:TERPRI %%STREAM)
         (CL:FORCE-OUTPUT %%STREAM)))
       ((CL:= PHASE 6)
        (CL:LET
         ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
         (CL:WRITE-STRING "Finalizing classes..." %%STREAM)
         (CL:TERPRI %%STREAM)
         (CL:FORCE-OUTPUT %%STREAM)))
       ((CL:= PHASE 7)
        (CL:LET
         ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
         (CL:WRITE-STRING "Creating method objects..." %%STREAM)
         (CL:TERPRI %%STREAM)
         (CL:FORCE-OUTPUT %%STREAM)))
       ((CL:= PHASE 8)
        (CL:LET
         ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
         (CL:WRITE-STRING "Finalizing methods..." %%STREAM)
         (CL:TERPRI %%STREAM)
         (CL:FORCE-OUTPUT %%STREAM)))
       ((CL:= PHASE 9)
        (CL:LET
         ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
         (CL:WRITE-STRING "Running non-phased startup code..." %%STREAM)
         (CL:TERPRI %%STREAM)
         (CL:FORCE-OUTPUT %%STREAM)))))
     (CL:WHEN
      (CL:= PHASE 6)
      (FINALIZE-CLASSES)
      (CL:SETQ *CLASS-HIERARCHY-BOOTED?* TRUE)
      (CL:GO :CONTINUE))
     (CL:WHEN
      (CL:= PHASE 8)
      (FINALIZE-SLOTS)
      (CLEANUP-UNFINALIZED-CLASSES)
      (CL:GO :CONTINUE))
     (STARTUP-STARTUP)
     (STARTUP-PRIMAL)
     (STARTUP-CL-PRIMAL)
     (STARTUP-TYPE-PREDICATES)
     (STARTUP-CONSES)
     (STARTUP-HIERARCHY)
     (STARTUP-TAXONOMIES)
     (STARTUP-LISTS)
     (STARTUP-COLLECTIONS)
     (STARTUP-ITERATORS)
     (STARTUP-SYMBOLS)
     (STARTUP-BOOT-SYMBOLS)
     (STARTUP-LITERALS)
     (STARTUP-CLASSES)
     (STARTUP-METHODS)
     (STARTUP-DEFCLASS)
     (STARTUP-STELLA-IN)
     (STARTUP-FOREACH)
     (STARTUP-WALK)
     (STARTUP-DYNAMIC-SLOTS)
     (STARTUP-DYNAMIC-LITERAL-SLOTS)
     (STARTUP-CL-TRANSLATE)
     (STARTUP-MACROS)
     (STARTUP-STREAMS)
     (STARTUP-DESCRIBE)
     (STARTUP-DEMONS)
     (STARTUP-MORE-DEMONS)
     (STARTUP-MODULES)
     (STARTUP-CONTEXTS)
     (STARTUP-READ)
     :CONTINUE)))
  :VOID)

;;; (DEFUN STARTUP-CPP-TRANSLATOR ...)

(CL:DEFUN STARTUP-CPP-TRANSLATOR (VERBOSE?)
  (CL:WHEN
   (CL:EQ VERBOSE? 1)
   (CL:LET
    ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
    (CL:WRITE-STRING "Starting up C++ translator..." %%STREAM)
    (CL:TERPRI %%STREAM)
    (CL:FORCE-OUTPUT %%STREAM)))
  (STARTUP-CPP-TRANSLATE)
  (STARTUP-CPP-CLASS-OUT)
  (STARTUP-CPP-OUTPUT)
  (STARTUP-CPP-TRANSLATE-FILE)
  :VOID)

;;; (DEFUN STARTUP-JAVA-TRANSLATOR ...)

(CL:DEFUN STARTUP-JAVA-TRANSLATOR (VERBOSE?)
  (CL:WHEN
   (CL:EQ VERBOSE? 1)
   (CL:LET
    ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
    (CL:WRITE-STRING "Starting up Java translator..." %%STREAM)
    (CL:TERPRI %%STREAM)
    (CL:FORCE-OUTPUT %%STREAM)))
  (STARTUP-JAVA-TRANSLATE)
  (STARTUP-JAVA-CLASS-OUT)
  (STARTUP-JAVA-OUTPUT)
  (STARTUP-JAVA-TRANSLATE-FILE)
  :VOID)

;;; (DEFUN STARTUP-IDL-TRANSLATOR ...)

(CL:DEFUN STARTUP-IDL-TRANSLATOR (VERBOSE?)
  (CL:WHEN
   (CL:EQ VERBOSE? 1)
   (CL:LET
    ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
    (CL:WRITE-STRING "Starting up IDL translator..." %%STREAM)
    (CL:TERPRI %%STREAM)
    (CL:FORCE-OUTPUT %%STREAM)))
  (STARTUP-IDL-TRANSLATE)
  (STARTUP-IDL-CLASS-OUT)
  (STARTUP-IDL-OUTPUT)
  (STARTUP-IDL-TRANSLATE-FILE)
  :VOID)

;;; (DEFUN STARTUP ...)

(CL:DEFUN STARTUP (VERBOSE?)
  (STARTUP-KERNEL VERBOSE?)
  (CL:SETQ *STARTUP-TIME-PHASE* 999)
  (CL:WHEN
   (CL:EQ VERBOSE? 1)
   (CL:LET
    ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
    (CL:WRITE-STRING "Starting up CL translator..." %%STREAM)
    (CL:TERPRI %%STREAM)
    (CL:FORCE-OUTPUT %%STREAM)))
  (STARTUP-TRANSLATE-FILE)
  (STARTUP-CL-TRANSLATE-FILE)
  (STARTUP-CPP-TRANSLATOR VERBOSE?)
  (STARTUP-JAVA-TRANSLATOR VERBOSE?)
  (STARTUP-IDL-TRANSLATOR VERBOSE?)
  (CL:WHEN
   (CL:EQ VERBOSE? 1)
   (CL:LET
    ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
    (CL:WRITE-STRING "Starting up your-files..." %%STREAM)
    (CL:TERPRI %%STREAM)
    (CL:FORCE-OUTPUT %%STREAM)))
  (STARTUP-YOUR-FILE)
  (STARTUP-YOUR-FILE2)
  (SWEEP-TRANSIENTS)
  (CL:WHEN
   (CL:EQ VERBOSE? 1)
   (CL:LET
    ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
    (CL:WRITE-STRING "Welcome to `" %%STREAM)
    (CL:WRITE-STRING *STELLA-VERSION-STRING* %%STREAM)
    (CL:WRITE-STRING "'" %%STREAM)
    (CL:TERPRI %%STREAM)
    (CL:FORCE-OUTPUT %%STREAM)))
  :VOID)

(CL:DEFUN STARTUP-STARTUP ()
  (CL:LET*
   ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 2) 1)
    (CL:SETQ
     KWD-STARTUP-EARLY-INITS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "EARLY-INITS" NULL 2))
    (CL:SETQ
     KWD-STARTUP-MODULES
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MODULES" NULL 2))
    (CL:SETQ
     KWD-STARTUP-SYMBOLS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SYMBOLS" NULL 2))
    (CL:SETQ
     KWD-STARTUP-QUOTED-CONSTANTS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "QUOTED-CONSTANTS" NULL 2))
    (CL:SETQ
     KWD-STARTUP-GLOBALS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "GLOBALS" NULL 2))
    (CL:SETQ
     KWD-STARTUP-CLASSES
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASSES" NULL 2))
    (CL:SETQ
     KWD-STARTUP-FINALIZE-CLASSES
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FINALIZE-CLASSES" NULL 2))
    (CL:SETQ
     KWD-STARTUP-METHODS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHODS" NULL 2))
    (CL:SETQ
     KWD-STARTUP-FINALIZE-METHODS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FINALIZE-METHODS" NULL 2))
    (CL:SETQ
     KWD-STARTUP-FINAL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FINAL" NULL 2)))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 4) 1)
    (CL:SETQ
     *STELLA-VERSION-STRING*
     (CONCATENATE
      "STELLA "
      (CONCATENATE
       (INTEGER-TO-STRING *STELLA-MAJOR-VERSION-NUMBER*)
       (CONCATENATE
        "."
        (CONCATENATE
         (INTEGER-TO-STRING *STELLA-MINOR-VERSION-NUMBER*)
         (CONCATENATE
          *STELLA-RELEASE-STATE*
          (CONCATENATE
           " (patch-level "
           (CONCATENATE (INTEGER-TO-STRING *STELLA-PATCH-LEVEL*) ")"))))))))
    (CL:SETQ
     *STARTUP-TIME-PHASES*
     (LIST
      KWD-STARTUP-EARLY-INITS
      KWD-STARTUP-MODULES
      KWD-STARTUP-SYMBOLS
      KWD-STARTUP-QUOTED-CONSTANTS
      KWD-STARTUP-GLOBALS
      KWD-STARTUP-CLASSES
      KWD-STARTUP-FINALIZE-CLASSES
      KWD-STARTUP-METHODS
      KWD-STARTUP-FINALIZE-METHODS
      KWD-STARTUP-FINAL)))
   (CL:WHEN (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 6) 1) (FINALIZE-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 7) 1)
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CURRENT-STARTUP-TIME-PHASE?"
        "INTEGER"
        "(DEFUN (CURRENT-STARTUP-TIME-PHASE? BOOLEAN) ((PHASE INTEGER)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CURRENT-STARTUP-TIME-PHASE?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "ENCODE-STARTUP-TIME-PHASE"
        "KEYWORD"
        "(DEFUN (ENCODE-STARTUP-TIME-PHASE INTEGER) ((PHASE KEYWORD)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION ENCODE-STARTUP-TIME-PHASE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "STARTUP-KERNEL"
        "BOOLEAN"
        "(DEFUN STARTUP-KERNEL ((VERBOSE? BOOLEAN)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION STARTUP-KERNEL)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "STARTUP-CPP-TRANSLATOR"
        "BOOLEAN"
        "(DEFUN STARTUP-CPP-TRANSLATOR ((VERBOSE? BOOLEAN)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION STARTUP-CPP-TRANSLATOR)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "STARTUP-JAVA-TRANSLATOR"
        "BOOLEAN"
        "(DEFUN STARTUP-JAVA-TRANSLATOR ((VERBOSE? BOOLEAN)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION STARTUP-JAVA-TRANSLATOR)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "STARTUP-IDL-TRANSLATOR"
        "BOOLEAN"
        "(DEFUN STARTUP-IDL-TRANSLATOR ((VERBOSE? BOOLEAN)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION STARTUP-IDL-TRANSLATOR)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "STARTUP"
        "BOOLEAN"
        "(DEFUN STARTUP ((VERBOSE? BOOLEAN)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION STARTUP)))
    (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
     "STARTUP-STARTUP"
     NULL
     "(DEFUN STARTUP-STARTUP ())"))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 8) 1)
    (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 9) 1)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *STELLA-MAJOR-VERSION-NUMBER* INTEGER 1)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *STELLA-MINOR-VERSION-NUMBER* INTEGER 2)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *STELLA-RELEASE-STATE* STRING \".alpha\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *STELLA-PATCH-LEVEL* INTEGER 1)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *STELLA-VERSION-STRING* STRING (CONCATENATE \"STELLA \" (CONCATENATE (INTEGER-TO-STRING *STELLA-MAJOR-VERSION-NUMBER*) (CONCATENATE \".\" (CONCATENATE (INTEGER-TO-STRING *STELLA-MINOR-VERSION-NUMBER*) (CONCATENATE *STELLA-RELEASE-STATE* (CONCATENATE \" (patch-level \" (CONCATENATE (INTEGER-TO-STRING *STELLA-PATCH-LEVEL*) \")\"))))))))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *STARTUP-TIME-PHASES* (LIST OF KEYWORD) (CAST (LIST :EARLY-INITS :MODULES :SYMBOLS :QUOTED-CONSTANTS :GLOBALS :CLASSES :FINALIZE-CLASSES :METHODS :FINALIZE-METHODS :FINAL) (LIST OF KEYWORD)) :DOCUMENTATION \"List of phases that can be legally used as an optional
phase argument to a 'startup-time-progn' form.  The corresponding code
will be executed during the execution of a startup-time-code function only
if the position of the keyword in the list corresponds to the current value of
'*startup-time-phase*', or if phasing of startup-time code is disabled.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *STARTUP-TIME-PHASE* INTEGER 999 :DOCUMENTATION \"The current phase during 'phased startup'.
The value has to correspond to the position of one of the keywords
in '*startup-time-phases*'.  999 means no phasing at all.\")")))
  :VOID)
