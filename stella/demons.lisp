;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

#|--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1996, 1997             | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied "AS IS",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR KWD-DEMONS-MODIFY NULL)
(CL:DEFVAR KWD-DEMONS-CREATE NULL)
(CL:DEFVAR KWD-DEMONS-DESTROY NULL)
(CL:DEFVAR KWD-DEMONS-ALL NULL)
(CL:DEFVAR KWD-DEMONS-CLASS NULL)
(CL:DEFVAR KWD-DEMONS-SLOT NULL)
(CL:DEFVAR KWD-DEMONS-CODE NULL)
(CL:DEFVAR KWD-DEMONS-METHOD NULL)
(CL:DEFVAR KWD-DEMONS-GUARD? NULL)
(CL:DEFVAR KWD-DEMONS-INHERITED? NULL)
(CL:DEFVAR KWD-DEMONS-DOCUMENTATION NULL)
(CL:DEFVAR KWD-DEMONS-ACTIVATE? NULL)
(CL:DEFVAR SYM-DEMONS-SLOT-GUARD-DEMONS NULL)
(CL:DEFVAR SYM-DEMONS-SLOT-DEMONS NULL)
(CL:DEFVAR SYM-DEMONS-CLASS-GUARD-CONSTRUCTOR-DEMONS NULL)
(CL:DEFVAR SYM-DEMONS-CLASS-CONSTRUCTOR-DEMONS NULL)
(CL:DEFVAR SYM-DEMONS-CLASS-GUARD-DESTRUCTOR-DEMONS NULL)
(CL:DEFVAR SYM-DEMONS-CLASS-DESTRUCTOR-DEMONS NULL)
(CL:DEFVAR SYM-DEMONS-WRAP-LITERAL NULL)
(CL:DEFVAR SYM-DEMONS-TRUE NULL)
(CL:DEFVAR SYM-DEMONS-WRAP-BOOLEAN NULL)
(CL:DEFVAR SYM-DEMONS-FALSE NULL)
(CL:DEFVAR SYM-DEMONS-PROGN NULL)
(CL:DEFVAR SYM-DEMONS-DEFUN NULL)
(CL:DEFVAR SYM-DEMONS-STARTUP-TIME-PROGN NULL)
(CL:DEFVAR SYM-DEMONS-DEFINE-DEMON NULL)
(CL:DEFVAR SYM-DEMONS-THE-CODE NULL)
(CL:DEFVAR KWD-DEMONS-FUNCTION NULL)
(CL:DEFVAR SYM-DEMONS-DEFDEMON NULL)
(CL:DEFVAR SYM-DEMONS-DEFDEMON-EXPANDER NULL)
(CL:DEFVAR SYM-DEMONS-SLOT-VALUE NULL)
(CL:DEFVAR SYM-DEMONS-SELF NULL)
(CL:DEFVAR SYM-DEMONS-LET NULL)
(CL:DEFVAR SYM-DEMONS-VALUE NULL)
(CL:DEFVAR SYM-DEMONS-WHEN NULL)
(CL:DEFVAR SYM-DEMONS-DEFINED? NULL)
(CL:DEFVAR SYM-DEMONS-RETURN NULL)
(CL:DEFVAR SYM-DEMONS-SETQ NULL)
(CL:DEFVAR SYM-DEMONS-NEW NULL)
(CL:DEFVAR SYM-DEMONS-SETF NULL)
(CL:DEFVAR SYM-DEMONS-OWNER-INSTANCE NULL)
(CL:DEFVAR SYM-DEMONS-ACTIVE-SLOT NULL)
(CL:DEFVAR SYM-DEMONS-GET-SLOT NULL)
(CL:DEFVAR SYM-DEMONS-BQUOTE NULL)
(CL:DEFVAR SGT-DEMONS-BOOLEAN NULL)
(CL:DEFVAR SYM-DEMONS-CANT-OVERWRITE-ACTIVE-COLLECTION-SLOT NULL)
(CL:DEFVAR SGT-DEMONS-LITERAL NULL)
(CL:DEFVAR SYM-DEMONS-SLOT NULL)
(CL:DEFVAR SYM-DEMONS-OLDVALUE NULL)
(CL:DEFVAR SYM-DEMONS-NOT NULL)
(CL:DEFVAR SYM-DEMONS-EQL? NULL)
(CL:DEFVAR SYM-DEMONS-IF NULL)
(CL:DEFVAR SYM-DEMONS-CHECK-FOR-SLOT-DEMONS? NULL)
(CL:DEFVAR SYM-DEMONS-WRAPPEDOLDVALUE NULL)
(CL:DEFVAR SYM-DEMONS-CHOOSE NULL)
(CL:DEFVAR SYM-DEMONS-NULL NULL)
(CL:DEFVAR SYM-DEMONS-WRAPPEDNEWVALUE NULL)
(CL:DEFVAR SYM-DEMONS-RUN-SLOT-GUARD-DEMONS? NULL)
(CL:DEFVAR SYM-DEMONS-RUN-SLOT-DEMONS NULL)
(CL:DEFVAR SYM-DEMONS-FREE NULL)
(CL:DEFVAR SYM-DEMONS-AND NULL)
(CL:DEFVAR SYM-DEMONS-EQ? NULL)
(CL:DEFVAR SYM-DEMONS-SIGNATURE NULL)
(CL:DEFVAR SYM-DEMONS-DOCUMENTATION NULL)
(CL:DEFVAR SGT-DEMONS-HOOK-LIST NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STELLA-MODULE* *MODULE* TRUE-WRAPPER STANDARD-OUTPUT EOL))

;;; (DEFGLOBAL *DEMONS-TABLE* ...)

(CL:DEFVAR *DEMONS-TABLE* NULL
  "Table containing all active and inactive demons, indexed
on their names.")

;;; (DEFGLOBAL *CONSTRUCTOR-DEMONS* ...)

(CL:DEFVAR *CONSTRUCTOR-DEMONS* NULL
  "These demons trigger every time an active instance is created.")

;;; (DEFGLOBAL *DESTRUCTOR-DEMONS* ...)

(CL:DEFVAR *DESTRUCTOR-DEMONS* NULL
  "These demons trigger every time an active instance is destroyed.")

;;; (DEFGLOBAL *ALL-SLOTS-DEMONS* ...)

(CL:DEFVAR *ALL-SLOTS-DEMONS* NULL
  "These demons trigger every time a slot value is modified.")

;;; (DEFGLOBAL *ALL-SLOTS-GUARD-DEMONS* ...)

(CL:DEFVAR *ALL-SLOTS-GUARD-DEMONS* NULL
  "These demons trigger every time a slot value is modified, and
cancel slot update when they return FALSE.")

;;; (DEFUN (VALIDATE-DEMON-REFERENCES? BOOLEAN) ...)

(CL:DEFUN VALIDATE-DEMON-REFERENCES? (DEMON)
  (CL:LET*
   ((CLASSREF
     (CL:IF
      (CL:NOT (CL:EQ (CLSYS-SVAL DEMON DEMON-CLASS-REFS DEMON) NULL))
      (FIRST (CLSYS-SVAL DEMON DEMON-CLASS-REFS DEMON))
      NULL))
    (SLOTREF
     (CL:IF
      (CL:NOT (CL:EQ (CLSYS-SVAL DEMON DEMON-SLOT-REFS DEMON) NULL))
      (FIRST (CLSYS-SVAL DEMON DEMON-SLOT-REFS DEMON))
      NULL))
    (SLOT NULL))
   (CL:WHEN
    (CL:AND (CL:EQ CLASSREF NULL) (CL:EQ SLOTREF NULL))
    (CL:RETURN-FROM VALIDATE-DEMON-REFERENCES? TRUE))
   (CL:WHEN
    (CL:EQ CLASSREF NULL)
    (CL:WARN "Missing :class option in demon `~A'" DEMON)
    (CL:RETURN-FROM VALIDATE-DEMON-REFERENCES? FALSE))
   (CL:WHEN
    (CL:EQ (CLSYS-SVAL SURROGATE SURROGATE-VALUE CLASSREF) NULL)
    (CL:WARN "Class `~A' not yet defined." CLASSREF)
    (CL:RETURN-FROM VALIDATE-DEMON-REFERENCES? FALSE))
   (CL:WHEN
    (CL:EQ (CLSYS-SVAL DEMON DEMON-ACTION DEMON) KWD-DEMONS-MODIFY)
    (CL:WHEN
     (CL:EQ SLOTREF NULL)
     (CL:WARN "Missing :slot option in demon `~A'" DEMON)
     (CL:RETURN-FROM VALIDATE-DEMON-REFERENCES? FALSE))
    (CL:LET*
     ((TEST-VALUE-001 FALSE))
     (CL:LET*
      ()
      (CL:SETQ
       SLOT
       (LOOKUP-SLOT (CLSYS-SVAL SURROGATE SURROGATE-VALUE CLASSREF) SLOTREF))
      (CL:SETQ TEST-VALUE-001 (DEFINED? SLOT)))
     (CL:SETQ TEST-VALUE-001 (CL:IF (CL:EQ TEST-VALUE-001 0) TRUE FALSE))
     (CL:WHEN
      (CL:EQ TEST-VALUE-001 1)
      (CL:WARN
       "No slot named `~A' exists on class `~A'.~%Can't create demon `~A'"
       SLOTREF
       (CLSYS-SVAL SURROGATE SURROGATE-VALUE CLASSREF)
       DEMON)
      (CL:RETURN-FROM VALIDATE-DEMON-REFERENCES? FALSE)))
    (CL:WHEN
     (CL:EQ (STORAGE-SLOT? SLOT) 0)
     (CL:WARN "Can't install a demon on the method.`~A'" SLOT)
     (CL:RETURN-FROM VALIDATE-DEMON-REFERENCES? FALSE)))
   (CL:RETURN-FROM VALIDATE-DEMON-REFERENCES? TRUE))
  :VOID)

;;; (DEFUN (INCORPORATE-DEMON-OPTIONS? BOOLEAN) ...)

(CL:DEFUN INCORPORATE-DEMON-OPTIONS? (DEMON OPTIONS)
  (CL:COND
   ((CL:NOT (CL:EQ (LOOKUP OPTIONS KWD-DEMONS-CREATE) NULL))
    (CL:SETF (CLSYS-SVAL DEMON DEMON-ACTION DEMON) KWD-DEMONS-CREATE))
   ((CL:NOT (CL:EQ (LOOKUP OPTIONS KWD-DEMONS-DESTROY) NULL))
    (CL:SETF (CLSYS-SVAL DEMON DEMON-ACTION DEMON) KWD-DEMONS-DESTROY))
   (CL:T (CL:SETF (CLSYS-SVAL DEMON DEMON-ACTION DEMON) KWD-DEMONS-MODIFY)))
  (CL:LET*
   ((V NULL) (K NULL) (ITER-001 (CLSYS-SVAL PROPERTY-LIST THE-PLIST OPTIONS)))
   (CL:LOOP
    WHILE
    (CL:NOT (CL:EQ ITER-001 NIL))
    DO
    (CL:SETQ K (CLSYS-SVAL CONS VALUE ITER-001))
    (CL:PROGN
     (CL:SETQ V (CLSYS-SVAL CONS VALUE (CLSYS-SVAL CONS REST ITER-001)))
     (CL:SETQ
      ITER-001
      (CLSYS-SVAL CONS REST (CLSYS-SVAL CONS REST ITER-001))))
    (CL:COND
     ((CL:OR (CL:EQ K KWD-DEMONS-CREATE) (CL:EQ K KWD-DEMONS-DESTROY))
      (CL:SETF (CLSYS-SVAL DEMON DEMON-ACTION DEMON) K)
      (CL:IF
       (CL:EQ V KWD-DEMONS-ALL)
       (CL:SETF (CLSYS-SVAL DEMON DEMON-ALL? DEMON) TRUE)
       (INSERT (CLSYS-SVAL DEMON DEMON-CLASS-REFS DEMON) (SURROGATIFY V))))
     ((CL:EQ K KWD-DEMONS-CLASS)
      (INSERT (CLSYS-SVAL DEMON DEMON-CLASS-REFS DEMON) (SURROGATIFY V)))
     ((CL:EQ K KWD-DEMONS-SLOT)
      (CL:IF
       (CL:EQ V KWD-DEMONS-ALL)
       (CL:SETF (CLSYS-SVAL DEMON DEMON-ALL? DEMON) TRUE)
       (INSERT (CLSYS-SVAL DEMON DEMON-SLOT-REFS DEMON) (PERMANENTIFY V))))
     ((CL:EQ K KWD-DEMONS-CODE)
      (CL:SETF
       (CLSYS-SVAL DEMON DEMON-CODE DEMON)
       (CLSYS-SVAL FUNCTION-CODE-WRAPPER WRAPPER-VALUE V)))
     ((CL:EQ K KWD-DEMONS-METHOD)
      (CL:SETF (CLSYS-SVAL DEMON DEMON-METHOD DEMON) V))
     ((CL:EQ K KWD-DEMONS-GUARD?)
      (CL:SETF (CLSYS-SVAL DEMON DEMON-GUARD? DEMON) TRUE))
     ((CL:EQ K KWD-DEMONS-INHERITED?)
      (CL:SETF (CLSYS-SVAL DEMON DEMON-INHERIT? DEMON) TRUE)
      (CL:LET
       ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
       (CL:WRITE-STRING "Inherit? not yet implemented for demons" %%STREAM)
       (CL:TERPRI %%STREAM)
       (CL:FORCE-OUTPUT %%STREAM)))
     ((CL:EQ K KWD-DEMONS-DOCUMENTATION)
      (CL:SETF
       (CLSYS-SVAL DEMON DEMON-DOCUMENTATION DEMON)
       (CLSYS-SVAL STRING-WRAPPER WRAPPER-VALUE V)))
     (CL:T (CL:ERROR "`~A' is not a valid case option" K)))))
  (CL:WHEN
   (CL:NOT (CL:EQ (CLSYS-SVAL DEMON DEMON-METHOD DEMON) NULL))
   (CL:SETF
    (CLSYS-SVAL DEMON DEMON-CODE DEMON)
    (CLSYS-SVAL
     METHOD-SLOT
     FUNCTION-CODE
     (CLSYS-SVAL DEMON DEMON-METHOD DEMON))))
  (FREE OPTIONS)
  (CL:RETURN-FROM INCORPORATE-DEMON-OPTIONS? (VALIDATE-DEMON-REFERENCES? DEMON))
  :VOID)

;;; (DEFUN (LOOKUP-DEMON DEMON) ...)

(CL:DEFUN LOOKUP-DEMON (NAME)
  "Return the demon named 'name'."
  (CL:RETURN-FROM LOOKUP-DEMON (LOOKUP *DEMONS-TABLE* NAME))
  :VOID)

;;; (DEFUN (DEFINE-DEMON DEMON) ...)

(CL:DEFUN DEFINE-DEMON (NAME CL:&REST OPTIONS)
  "Define a class or slot demon.  Options are :create,
:destroy, :class, :slot, :guard?, :code, :method, :inherit?, and :documentation."
  (CL:LET*
   ((DEMON (NEW-DEMON))
    (PLIST (NEW-PROPERTY-LIST))
    (CONSLIST NIL)
    (OLDDEMON NULL)
    (ACTIVATE? FALSE))
   (CL:LET*
    ((ITEM NULL) (ITER-001 (ALLOCATE-ITERATOR OPTIONS)) (COLLECT-001 NULL))
    (CL:LOOP
     WHILE
     (CL:EQ (NEXT? ITER-001) 1)
     DO
     (CL:PROGN (CL:SETQ ITEM (CLSYS-SVAL LISP-CONS-ITERATOR VALUE ITER-001)))
     (CL:IF
      (CL:EQ COLLECT-001 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-001 (CONS ITEM NIL))
       (CL:IF
        (CL:EQ CONSLIST NIL)
        (CL:SETQ CONSLIST COLLECT-001)
        (ADD-CONS-TO-END-OF-CONS-LIST CONSLIST COLLECT-001)))
      (CL:PROGN
       (CL:SETF (CLSYS-SVAL CONS REST COLLECT-001) (CONS ITEM NIL))
       (CL:SETQ COLLECT-001 (CLSYS-SVAL CONS REST COLLECT-001))))))
   (CL:SETF (CLSYS-SVAL PROPERTY-LIST THE-PLIST PLIST) CONSLIST)
   (CL:SETF (CLSYS-SVAL DEMON DEMON-NAME DEMON) NAME)
   (CL:SETQ
    ACTIVATE?
    (EQ? (REMOVE-AT PLIST KWD-DEMONS-ACTIVATE?) TRUE-WRAPPER))
   (CL:WHEN
    (CL:EQ (INCORPORATE-DEMON-OPTIONS? DEMON PLIST) 1)
    (CL:LET*
     ()
     (CL:SETQ OLDDEMON (LOOKUP-DEMON NAME))
     (CL:WHEN
      (CL:NOT (CL:EQ OLDDEMON NULL))
      (DEACTIVATE-DEMON OLDDEMON)
      (FREE OLDDEMON)))
    (INSERT-AT *DEMONS-TABLE* (CLSYS-SVAL DEMON DEMON-NAME DEMON) DEMON)
    (CL:WHEN (CL:EQ ACTIVATE? 1) (ACTIVATE-DEMON DEMON))
    (CL:RETURN-FROM DEFINE-DEMON DEMON))
   (FREE DEMON)
   (CL:RETURN-FROM DEFINE-DEMON NULL))
  :VOID)

;;; (DEFUN (INJECT-DEMON (LIST OF DEMON)) ...)

(CL:DEFUN INJECT-DEMON (DEMONLIST DEMON)
  (CL:WHEN (CL:EQ (NULL-LIST? DEMONLIST) 1) (CL:SETQ DEMONLIST (NEW-LIST)))
  (CL:LET*
   ((IT (ALLOCATE-ITERATOR DEMONLIST)))
   (CL:LOOP
    WHILE
    (CL:EQ (NEXT? IT) 1)
    DO
    (CL:WHEN
     (CL:EQ
      (STRING-EQL?
       (CLSYS-SVAL DEMON DEMON-NAME (CLSYS-SVAL LIST-ITERATOR VALUE IT))
       (CLSYS-SVAL DEMON DEMON-NAME DEMON))
      1)
     (VALUE-SETTER IT DEMON)
     (CL:RETURN-FROM INJECT-DEMON DEMONLIST))))
  (INSERT DEMONLIST DEMON)
  (CL:RETURN-FROM INJECT-DEMON DEMONLIST)
  :VOID)

;;; (DEFUN (EJECT-DEMON (LIST OF DEMON)) ...)

(CL:DEFUN EJECT-DEMON (DEMONLIST DEMON)
  (CL:WHEN (CL:EQ DEMONLIST NULL) (CL:RETURN-FROM EJECT-DEMON NULL))
  (REMOVE DEMONLIST DEMON)
  (CL:WHEN
   (CL:EQ (EMPTY? DEMONLIST) 1)
   (FREE DEMONLIST)
   (CL:SETQ DEMONLIST NULL))
  (CL:RETURN-FROM EJECT-DEMON DEMONLIST)
  :VOID)

;;; (DEFUN ACTIVATE-DEMON ...)

(CL:DEFUN ACTIVATE-DEMON (DEMON)
  "Install 'demon' in the location(s) specified by its internal
structure."
  (CL:WHEN (CL:EQ DEMON NULL) (CL:RETURN-FROM ACTIVATE-DEMON))
  (CL:LET*
   ((TEST-VALUE-001 (CLSYS-SVAL DEMON DEMON-ACTION DEMON)))
   (CL:COND
    ((CL:EQ TEST-VALUE-001 KWD-DEMONS-MODIFY)
     (CL:IF
      (CL:EQ (CLSYS-SVAL DEMON DEMON-ALL? DEMON) 1)
      (CL:IF
       (CL:EQ (CLSYS-SVAL DEMON DEMON-GUARD? DEMON) 1)
       (CL:SETQ
        *ALL-SLOTS-GUARD-DEMONS*
        (INJECT-DEMON *ALL-SLOTS-GUARD-DEMONS* DEMON))
       (CL:SETQ *ALL-SLOTS-DEMONS* (INJECT-DEMON *ALL-SLOTS-DEMONS* DEMON)))
      (CL:LET*
       ((SLOTNAME NULL)
        (TYPE NULL)
        (ITER-001
         (CLSYS-SVAL
          LIST
          THE-CONS-LIST
          (CLSYS-SVAL DEMON DEMON-CLASS-REFS DEMON)))
        (ITER-002
         (CLSYS-SVAL
          LIST
          THE-CONS-LIST
          (CLSYS-SVAL DEMON DEMON-SLOT-REFS DEMON))))
       (CL:LOOP
        WHILE
        (CL:AND (CL:NOT (CL:EQ ITER-001 NIL)) (CL:NOT (CL:EQ ITER-002 NIL)))
        DO
        (CL:PROGN
         (CL:SETQ TYPE (CLSYS-SVAL CONS VALUE ITER-001))
         (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
        (CL:PROGN
         (CL:SETQ SLOTNAME (CLSYS-SVAL CONS VALUE ITER-002))
         (CL:SETQ ITER-002 (CLSYS-SVAL CONS REST ITER-002)))
        (CL:TAGBODY
         (CL:LET*
          ((SLOT
            (SAFE-LOOKUP-SLOT
             (CLSYS-SVAL SURROGATE SURROGATE-VALUE TYPE)
             SLOTNAME)))
          (CL:WHEN
           (CL:EQ SLOT NULL)
           (CL:WARN
            "Can't install demon on non-existant slot `~A'.`~A'"
            (CLSYS-SVAL SURROGATE SURROGATE-VALUE TYPE)
            SLOTNAME)
           (CL:GO :CONTINUE))
          (CL:IF
           (CL:EQ (CLSYS-SVAL DEMON DEMON-GUARD? DEMON) 1)
           (SET-DYNAMIC-SLOT-VALUE
            SLOT
            SYM-DEMONS-SLOT-GUARD-DEMONS
            (INJECT-DEMON (SLOT-GUARD-DEMONS SLOT) DEMON)
            NULL)
           (SET-DYNAMIC-SLOT-VALUE
            SLOT
            SYM-DEMONS-SLOT-DEMONS
            (INJECT-DEMON (SLOT-DEMONS SLOT) DEMON)
            NULL)))
         :CONTINUE)))))
    ((CL:EQ TEST-VALUE-001 KWD-DEMONS-CREATE)
     (CL:IF
      (CL:EQ (CLSYS-SVAL DEMON DEMON-ALL? DEMON) 1)
      (CL:SETQ *CONSTRUCTOR-DEMONS* (INJECT-DEMON *CONSTRUCTOR-DEMONS* DEMON))
      (CL:LET*
       ((CLASSREF NULL)
        (ITER-003
         (CLSYS-SVAL
          LIST
          THE-CONS-LIST
          (CLSYS-SVAL DEMON DEMON-CLASS-REFS DEMON))))
       (CL:LOOP
        WHILE
        (CL:NOT (CL:EQ ITER-003 NIL))
        DO
        (CL:PROGN
         (CL:SETQ CLASSREF (CLSYS-SVAL CONS VALUE ITER-003))
         (CL:SETQ ITER-003 (CLSYS-SVAL CONS REST ITER-003)))
        (CL:TAGBODY
         (CL:LET*
          ((CLASS (CLSYS-SVAL SURROGATE SURROGATE-VALUE CLASSREF)))
          (CL:WHEN
           (CL:EQ CLASS NULL)
           (CL:WARN "Can't install demon on non-existant class `~A'" CLASSREF)
           (CL:GO :CONTINUE))
          (CL:IF
           (CL:EQ (CLSYS-SVAL DEMON DEMON-GUARD? DEMON) 1)
           (SET-DYNAMIC-SLOT-VALUE
            CLASS
            SYM-DEMONS-CLASS-GUARD-CONSTRUCTOR-DEMONS
            (INJECT-DEMON (CLASS-GUARD-CONSTRUCTOR-DEMONS CLASS) DEMON)
            NULL)
           (SET-DYNAMIC-SLOT-VALUE
            CLASS
            SYM-DEMONS-CLASS-CONSTRUCTOR-DEMONS
            (INJECT-DEMON (CLASS-CONSTRUCTOR-DEMONS CLASS) DEMON)
            NULL)))
         :CONTINUE)))))
    ((CL:EQ TEST-VALUE-001 KWD-DEMONS-DESTROY)
     (CL:IF
      (CL:EQ (CLSYS-SVAL DEMON DEMON-ALL? DEMON) 1)
      (CL:SETQ *DESTRUCTOR-DEMONS* (INJECT-DEMON *DESTRUCTOR-DEMONS* DEMON))
      (CL:LET*
       ((CLASSREF NULL)
        (ITER-004
         (CLSYS-SVAL
          LIST
          THE-CONS-LIST
          (CLSYS-SVAL DEMON DEMON-CLASS-REFS DEMON))))
       (CL:LOOP
        WHILE
        (CL:NOT (CL:EQ ITER-004 NIL))
        DO
        (CL:PROGN
         (CL:SETQ CLASSREF (CLSYS-SVAL CONS VALUE ITER-004))
         (CL:SETQ ITER-004 (CLSYS-SVAL CONS REST ITER-004)))
        (CL:TAGBODY
         (CL:LET*
          ((CLASS (CLSYS-SVAL SURROGATE SURROGATE-VALUE CLASSREF)))
          (CL:WHEN
           (CL:EQ CLASS NULL)
           (CL:WARN "Can't install demon on non-existant class `~A'" CLASSREF)
           (CL:GO :CONTINUE))
          (CL:IF
           (CL:EQ (CLSYS-SVAL DEMON DEMON-GUARD? DEMON) 1)
           (SET-DYNAMIC-SLOT-VALUE
            CLASS
            SYM-DEMONS-CLASS-GUARD-DESTRUCTOR-DEMONS
            (INJECT-DEMON (CLASS-GUARD-DESTRUCTOR-DEMONS CLASS) DEMON)
            NULL)
           (SET-DYNAMIC-SLOT-VALUE
            CLASS
            SYM-DEMONS-CLASS-DESTRUCTOR-DEMONS
            (INJECT-DEMON (CLASS-DESTRUCTOR-DEMONS CLASS) DEMON)
            NULL)))
         :CONTINUE)))))
    (CL:T (CL:ERROR "`~A' is not a valid case option" TEST-VALUE-001))))
  :VOID)

;;; (DEFUN DEACTIVATE-DEMON ...)

(CL:DEFUN DEACTIVATE-DEMON (DEMON)
  "Detach 'demon' from the location(s) specified by its internal
structure."
  (CL:WHEN (CL:EQ DEMON NULL) (CL:RETURN-FROM DEACTIVATE-DEMON))
  (CL:LET*
   ((TEST-VALUE-001 (CLSYS-SVAL DEMON DEMON-ACTION DEMON)))
   (CL:COND
    ((CL:EQ TEST-VALUE-001 KWD-DEMONS-MODIFY)
     (CL:IF
      (CL:EQ (CLSYS-SVAL DEMON DEMON-ALL? DEMON) 1)
      (CL:IF
       (CL:EQ (CLSYS-SVAL DEMON DEMON-GUARD? DEMON) 1)
       (CL:SETQ
        *ALL-SLOTS-GUARD-DEMONS*
        (EJECT-DEMON *ALL-SLOTS-GUARD-DEMONS* DEMON))
       (CL:SETQ *ALL-SLOTS-DEMONS* (EJECT-DEMON *ALL-SLOTS-DEMONS* DEMON)))
      (CL:LET*
       ((SLOTNAME NULL)
        (TYPE NULL)
        (ITER-001
         (CLSYS-SVAL
          LIST
          THE-CONS-LIST
          (CLSYS-SVAL DEMON DEMON-CLASS-REFS DEMON)))
        (ITER-002
         (CLSYS-SVAL
          LIST
          THE-CONS-LIST
          (CLSYS-SVAL DEMON DEMON-SLOT-REFS DEMON))))
       (CL:LOOP
        WHILE
        (CL:AND (CL:NOT (CL:EQ ITER-001 NIL)) (CL:NOT (CL:EQ ITER-002 NIL)))
        DO
        (CL:PROGN
         (CL:SETQ TYPE (CLSYS-SVAL CONS VALUE ITER-001))
         (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
        (CL:PROGN
         (CL:SETQ SLOTNAME (CLSYS-SVAL CONS VALUE ITER-002))
         (CL:SETQ ITER-002 (CLSYS-SVAL CONS REST ITER-002)))
        (CL:TAGBODY
         (CL:LET*
          ((SLOT
            (SAFE-LOOKUP-SLOT
             (CLSYS-SVAL SURROGATE SURROGATE-VALUE TYPE)
             SLOTNAME)))
          (CL:WHEN
           (CL:EQ SLOT NULL)
           (CL:WARN
            "Can't remove demon from non-existant slot `~A'.`~A'"
            (CLSYS-SVAL SURROGATE SURROGATE-VALUE TYPE)
            SLOTNAME)
           (CL:GO :CONTINUE))
          (CL:IF
           (CL:EQ (CLSYS-SVAL DEMON DEMON-GUARD? DEMON) 1)
           (SET-DYNAMIC-SLOT-VALUE
            SLOT
            SYM-DEMONS-SLOT-GUARD-DEMONS
            (EJECT-DEMON (SLOT-GUARD-DEMONS SLOT) DEMON)
            NULL)
           (SET-DYNAMIC-SLOT-VALUE
            SLOT
            SYM-DEMONS-SLOT-DEMONS
            (EJECT-DEMON (SLOT-DEMONS SLOT) DEMON)
            NULL)))
         :CONTINUE)))))
    ((CL:EQ TEST-VALUE-001 KWD-DEMONS-CREATE)
     (CL:IF
      (CL:EQ (CLSYS-SVAL DEMON DEMON-ALL? DEMON) 1)
      (CL:SETQ *CONSTRUCTOR-DEMONS* (EJECT-DEMON *CONSTRUCTOR-DEMONS* DEMON))
      (CL:LET*
       ((CLASSREF NULL)
        (ITER-003
         (CLSYS-SVAL
          LIST
          THE-CONS-LIST
          (CLSYS-SVAL DEMON DEMON-CLASS-REFS DEMON))))
       (CL:LOOP
        WHILE
        (CL:NOT (CL:EQ ITER-003 NIL))
        DO
        (CL:PROGN
         (CL:SETQ CLASSREF (CLSYS-SVAL CONS VALUE ITER-003))
         (CL:SETQ ITER-003 (CLSYS-SVAL CONS REST ITER-003)))
        (CL:TAGBODY
         (CL:LET*
          ((CLASS (CLSYS-SVAL SURROGATE SURROGATE-VALUE CLASSREF)))
          (CL:WHEN
           (CL:EQ CLASS NULL)
           (CL:WARN "Can't install demon on non-existant class `~A'" CLASSREF)
           (CL:GO :CONTINUE))
          (CL:IF
           (CL:EQ (CLSYS-SVAL DEMON DEMON-GUARD? DEMON) 1)
           (SET-DYNAMIC-SLOT-VALUE
            CLASS
            SYM-DEMONS-CLASS-GUARD-CONSTRUCTOR-DEMONS
            (EJECT-DEMON (CLASS-GUARD-CONSTRUCTOR-DEMONS CLASS) DEMON)
            NULL)
           (SET-DYNAMIC-SLOT-VALUE
            CLASS
            SYM-DEMONS-CLASS-CONSTRUCTOR-DEMONS
            (EJECT-DEMON (CLASS-CONSTRUCTOR-DEMONS CLASS) DEMON)
            NULL)))
         :CONTINUE)))))
    ((CL:EQ TEST-VALUE-001 KWD-DEMONS-DESTROY)
     (CL:IF
      (CL:EQ (CLSYS-SVAL DEMON DEMON-ALL? DEMON) 1)
      (CL:SETQ *DESTRUCTOR-DEMONS* (EJECT-DEMON *DESTRUCTOR-DEMONS* DEMON))
      (CL:LET*
       ((CLASSREF NULL)
        (ITER-004
         (CLSYS-SVAL
          LIST
          THE-CONS-LIST
          (CLSYS-SVAL DEMON DEMON-CLASS-REFS DEMON))))
       (CL:LOOP
        WHILE
        (CL:NOT (CL:EQ ITER-004 NIL))
        DO
        (CL:PROGN
         (CL:SETQ CLASSREF (CLSYS-SVAL CONS VALUE ITER-004))
         (CL:SETQ ITER-004 (CLSYS-SVAL CONS REST ITER-004)))
        (CL:TAGBODY
         (CL:LET*
          ((CLASS (CLSYS-SVAL SURROGATE SURROGATE-VALUE CLASSREF)))
          (CL:WHEN
           (CL:EQ CLASS NULL)
           (CL:WARN "Can't install demon on non-existant class `~A'" CLASSREF)
           (CL:GO :CONTINUE))
          (CL:IF
           (CL:EQ (CLSYS-SVAL DEMON DEMON-GUARD? DEMON) 1)
           (SET-DYNAMIC-SLOT-VALUE
            CLASS
            SYM-DEMONS-CLASS-GUARD-DESTRUCTOR-DEMONS
            (EJECT-DEMON (CLASS-GUARD-DESTRUCTOR-DEMONS CLASS) DEMON)
            NULL)
           (SET-DYNAMIC-SLOT-VALUE
            CLASS
            SYM-DEMONS-CLASS-DESTRUCTOR-DEMONS
            (EJECT-DEMON (CLASS-DESTRUCTOR-DEMONS CLASS) DEMON)
            NULL)))
         :CONTINUE)))))
    (CL:T (CL:ERROR "`~A' is not a valid case option" TEST-VALUE-001))))
  :VOID)

;;; (DEFUN (DESTRUCTURE-DEFDEMON-BODY CONS CONS) ...)

(CL:DEFUN DESTRUCTURE-DEFDEMON-BODY (DEMONTREE)
  (CL:LET*
   ((OPTIONSTREE DEMONTREE) (BODYTREE DEMONTREE) (TRAILINGCURSOR NULL))
   (CL:LOOP
    WHILE
    (CL:EQ (KEYWORD? (FIRST BODYTREE)) 1)
    DO
    (CL:SETQ TRAILINGCURSOR BODYTREE)
    (CL:SETQ BODYTREE (CLSYS-SVAL CONS REST (CLSYS-SVAL CONS REST BODYTREE))))
   (CL:IF
    (CL:NOT (CL:EQ TRAILINGCURSOR NULL))
    (CL:SETF (CLSYS-SVAL CONS REST (CLSYS-SVAL CONS REST TRAILINGCURSOR)) NIL)
    (CL:SETQ OPTIONSTREE NIL))
   (CL:RETURN-FROM DESTRUCTURE-DEFDEMON-BODY (CL:VALUES OPTIONSTREE BODYTREE)))
  :VOID)

;;; (DEFUN IN-PLACE-NORMALIZE-DEMON-OPTIONS ...)

(CL:DEFUN IN-PLACE-NORMALIZE-DEMON-OPTIONS (OPTIONSTREE)
  (CL:LET*
   ((IT (ALLOCATE-ITERATOR OPTIONSTREE)))
   (CL:LOOP
    WHILE
    (CL:EQ (NEXT? IT) 1)
    DO
    (CL:COND
     ((CL:EQ (WRAPPER? (CLSYS-SVAL CONS-ITERATOR VALUE IT)) 1)
      (VALUE-SETTER
       IT
       (LIST*
        SYM-DEMONS-WRAP-LITERAL
        (CLSYS-SVAL CONS-ITERATOR VALUE IT)
        NIL)))
     ((CL:EQ (CLSYS-SVAL CONS-ITERATOR VALUE IT) SYM-DEMONS-TRUE)
      (VALUE-SETTER IT (LIST* SYM-DEMONS-WRAP-BOOLEAN SYM-DEMONS-TRUE NIL)))
     ((CL:EQ (CLSYS-SVAL CONS-ITERATOR VALUE IT) SYM-DEMONS-FALSE)
      (VALUE-SETTER IT (LIST* SYM-DEMONS-WRAP-BOOLEAN SYM-DEMONS-FALSE NIL))))))
  :VOID)

;;; (DEFMACRO DEFDEMON ...)

(CL:DEFUN DEFDEMON-EXPANDER (NAME PARAMETERSTREE OPTIONSANDBODY)
  "Define a demon 'name' and attach it to a class or slot."
  (CL:LET*
   ((FIRSTPARAMETER (FIRST PARAMETERSTREE))
    (TYPE NULL)
    (DEMONFUNCTIONNAME
     (INTERN-SYMBOL (CLSYS-SVAL STRING-WRAPPER WRAPPER-VALUE NAME))))
   (CL:WHEN
    (CL:EQ (CONS? FIRSTPARAMETER) 0)
    (CL:LET*
     ((*PRINTREADABLY?* TRUE))
     (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
     (SIGNAL-TRANSLATION-ERROR)
     (CL:WHEN
      (CL:EQ (SUPPRESS-WARNINGS?) 0)
      (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-OUTPUT)
      (CL:LET
       ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
       (CL:TERPRI %%STREAM)
       (CL:FORCE-OUTPUT %%STREAM)
       (CL:WRITE-STRING " Illegal first parameter in demon `" %%STREAM)
       (PRINT-OBJECT (DE-UGLIFY-PARSE-TREE NAME) %%STREAM)
       (CL:WRITE-STRING "'." %%STREAM)
       (CL:TERPRI %%STREAM)
       (CL:FORCE-OUTPUT %%STREAM))))
    (CL:RETURN-FROM DEFDEMON-EXPANDER NIL))
   (CL:SETQ
    TYPE
    (TYPE-SPEC-TO-BASE-TYPE
     (SAFE-YIELD-TYPE-SPECIFIER (SECOND FIRSTPARAMETER))))
   (CL:WHEN
    (CL:EQ (CLSYS-SVAL SURROGATE SURROGATE-VALUE TYPE) NULL)
    (CL:LET*
     ((*PRINTREADABLY?* TRUE))
     (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
     (SIGNAL-TRANSLATION-ERROR)
     (CL:WHEN
      (CL:EQ (SUPPRESS-WARNINGS?) 0)
      (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-OUTPUT)
      (CL:LET
       ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
       (CL:TERPRI %%STREAM)
       (CL:FORCE-OUTPUT %%STREAM)
       (CL:WRITE-STRING " Demon defined on the non-existent class `" %%STREAM)
       (PRINT-OBJECT (DE-UGLIFY-PARSE-TREE TYPE) %%STREAM)
       (CL:WRITE-STRING "'." %%STREAM)
       (CL:TERPRI %%STREAM)
       (CL:FORCE-OUTPUT %%STREAM))))
    (CL:RETURN-FROM DEFDEMON-EXPANDER NIL))
   (CL:LET*
    ((OPTIONSTREE NULL) (BODYTREE NULL))
    (CL:MULTIPLE-VALUE-SETQ
     (OPTIONSTREE BODYTREE)
     (DESTRUCTURE-DEFDEMON-BODY OPTIONSANDBODY))
    (IN-PLACE-NORMALIZE-DEMON-OPTIONS OPTIONSTREE)
    (CL:RETURN-FROM
     DEFDEMON-EXPANDER
     (LIST*
      SYM-DEMONS-PROGN
      (LIST*
       SYM-DEMONS-DEFUN
       DEMONFUNCTIONNAME
       (CONS PARAMETERSTREE (CONCATENATE BODYTREE NIL)))
      (LIST*
       SYM-DEMONS-STARTUP-TIME-PROGN
       (LIST*
        SYM-DEMONS-DEFINE-DEMON
        NAME
        (CONCATENATE
         OPTIONSTREE
         (LIST*
          KWD-DEMONS-CODE
          (LIST*
           SYM-DEMONS-WRAP-LITERAL
           (LIST*
            SYM-DEMONS-THE-CODE
            KWD-DEMONS-FUNCTION
            DEMONFUNCTIONNAME
            NIL)
           NIL)
          NIL)))
       NIL)
      NIL))))
  :VOID)

;;; (DEFUN (READ-SLOT-VALUE OBJECT) ...)

(CL:DEFUN READ-SLOT-VALUE (SELF SLOT)
  (CL:LET*
   ((CODE
     (CLSYS-SVAL
      CLASS
      CLASS-SLOT-ACCESSOR-CODE
      (CLSYS-SVAL
       SURROGATE
       SURROGATE-VALUE
       (CLSYS-SVAL STORAGE-SLOT SLOT-OWNER SLOT)))))
   (CL:WHEN
    (CL:NOT (CL:EQ CODE NULL))
    (CL:RETURN-FROM
     READ-SLOT-VALUE
     (CL:FUNCALL
      CODE
      SELF
      (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT)
      NULL
      FALSE)))
   (CL:IF
    (CL:EQ
     (SUBTYPE-OF?
      (PRIMARY-TYPE SELF)
      (CLSYS-SVAL STORAGE-SLOT SLOT-OWNER SLOT))
     1)
    (CL:WARN
     "read-slot-value: No generic slot reader available for `~A'."
     SLOT)
    (CL:WARN
     "read-slot-value: Slot `~A' does not exist on~% object `~A' of type `~A'."
     SLOT
     SELF
     (PRIMARY-TYPE SELF)))
   (CL:RETURN-FROM READ-SLOT-VALUE NULL))
  :VOID)

;;; (DEFUN (WRITE-SLOT-VALUE OBJECT) ...)

(CL:DEFUN WRITE-SLOT-VALUE (SELF SLOT VALUE)
  (CL:LET*
   ((CODE
     (CLSYS-SVAL
      CLASS
      CLASS-SLOT-ACCESSOR-CODE
      (CLSYS-SVAL
       SURROGATE
       SURROGATE-VALUE
       (CLSYS-SVAL STORAGE-SLOT SLOT-OWNER SLOT)))))
   (CL:WHEN
    (CL:NOT (CL:EQ CODE NULL))
    (CL:RETURN-FROM
     WRITE-SLOT-VALUE
     (CL:FUNCALL
      CODE
      SELF
      (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT)
      VALUE
      TRUE)))
   (CL:IF
    (CL:EQ
     (SUBTYPE-OF?
      (PRIMARY-TYPE SELF)
      (CLSYS-SVAL STORAGE-SLOT SLOT-OWNER SLOT))
     1)
    (CL:WARN
     "write-slot-value: No generic slot writer available for `~A'."
     SLOT)
    (CL:WARN
     "write-slot-value: Slot `~A' does not exist on~% object `~A' of type `~A'."
     SLOT
     SELF
     (PRIMARY-TYPE SELF)))
   (CL:RETURN-FROM WRITE-SLOT-VALUE NULL))
  :VOID)

;;; (DEFUN (PUT-SLOT-VALUE OBJECT) ...)

(CL:DEFUN PUT-SLOT-VALUE (SELF SLOT VALUE)
  (CL:IF
   (CL:EQ (SINGLE-VALUED? SLOT) 1)
   (CL:RETURN-FROM PUT-SLOT-VALUE (WRITE-SLOT-VALUE SELF SLOT VALUE))
   (CL:LET*
    ((OLDVALUES (READ-SLOT-VALUE SELF SLOT)))
    (INSERT OLDVALUES VALUE)
    (CL:RETURN-FROM PUT-SLOT-VALUE VALUE)))
  :VOID)

;;; (DEFUN DROP-SLOT-VALUE ...)

(CL:DEFUN DROP-SLOT-VALUE (SELF SLOT VALUE)
  (CL:IF
   (CL:EQ (SINGLE-VALUED? SLOT) 1)
   (CL:LET*
    ((OLDVALUE (READ-SLOT-VALUE SELF SLOT)))
    (CL:WHEN
     (CL:EQ (EQL? VALUE OLDVALUE) 1)
     (WRITE-SLOT-VALUE SELF SLOT NULL)))
   (CL:LET* ((OLDVALUES (READ-SLOT-VALUE SELF SLOT))) (REMOVE OLDVALUES VALUE)))
  :VOID)

;;; (DEFUN (CHECK-FOR-SLOT-DEMONS? BOOLEAN) ...)

(CL:DEFUN CHECK-FOR-SLOT-DEMONS? (SLOT)
  (CL:RETURN-FROM
   CHECK-FOR-SLOT-DEMONS?
   (CL:IF
    (CL:OR
     (CL:NOT (CL:EQ *ALL-SLOTS-DEMONS* NULL))
     (CL:NOT (CL:EQ *ALL-SLOTS-GUARD-DEMONS* NULL))
     (CL:NOT (CL:EQ (SLOT-GUARD-DEMONS SLOT) NULL))
     (CL:NOT (CL:EQ (SLOT-DEMONS SLOT) NULL)))
    TRUE
    FALSE))
  :VOID)

;;; (DEFUN (RUN-SLOT-GUARD-DEMONS? BOOLEAN) ...)

(CL:DEFUN RUN-SLOT-GUARD-DEMONS? (SELF SLOT OLDVALUE NEWVALUE)
  (CL:WHEN
   (CL:NOT (CL:EQ *ALL-SLOTS-GUARD-DEMONS* NULL))
   (CL:LET*
    ((DEMON NULL)
     (ITER-001 (CLSYS-SVAL LIST THE-CONS-LIST *ALL-SLOTS-GUARD-DEMONS*)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ DEMON (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:WHEN
      (CL:EQ
       (CL:FUNCALL
        (CLSYS-SVAL DEMON DEMON-CODE DEMON)
        SELF
        SLOT
        OLDVALUE
        NEWVALUE)
       0)
      (CL:RETURN-FROM RUN-SLOT-GUARD-DEMONS? FALSE)))))
  (CL:WHEN
   (CL:NOT (CL:EQ (SLOT-GUARD-DEMONS SLOT) NULL))
   (CL:LET*
    ((DEMON NULL)
     (ITER-002 (CLSYS-SVAL LIST THE-CONS-LIST (SLOT-GUARD-DEMONS SLOT))))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-002 NIL))
     DO
     (CL:PROGN
      (CL:SETQ DEMON (CLSYS-SVAL CONS VALUE ITER-002))
      (CL:SETQ ITER-002 (CLSYS-SVAL CONS REST ITER-002)))
     (CL:WHEN
      (CL:EQ
       (CL:FUNCALL
        (CLSYS-SVAL DEMON DEMON-CODE DEMON)
        SELF
        SLOT
        OLDVALUE
        NEWVALUE)
       0)
      (CL:RETURN-FROM RUN-SLOT-GUARD-DEMONS? FALSE)))))
  (CL:RETURN-FROM RUN-SLOT-GUARD-DEMONS? TRUE)
  :VOID)

;;; (DEFUN RUN-SLOT-DEMONS ...)

(CL:DEFUN RUN-SLOT-DEMONS (SELF SLOT OLDVALUE NEWVALUE)
  (CL:WHEN
   (CL:NOT (CL:EQ *ALL-SLOTS-DEMONS* NULL))
   (CL:LET*
    ((DEMON NULL)
     (ITER-001 (CLSYS-SVAL LIST THE-CONS-LIST *ALL-SLOTS-DEMONS*)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ DEMON (CLSYS-SVAL CONS VALUE ITER-001))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:FUNCALL
      (CLSYS-SVAL DEMON DEMON-CODE DEMON)
      SELF
      SLOT
      OLDVALUE
      NEWVALUE))))
  (CL:WHEN
   (CL:NOT (CL:EQ (SLOT-DEMONS SLOT) NULL))
   (CL:LET*
    ((DEMON NULL)
     (ITER-002 (CLSYS-SVAL LIST THE-CONS-LIST (SLOT-DEMONS SLOT))))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-002 NIL))
     DO
     (CL:PROGN
      (CL:SETQ DEMON (CLSYS-SVAL CONS VALUE ITER-002))
      (CL:SETQ ITER-002 (CLSYS-SVAL CONS REST ITER-002)))
     (CL:FUNCALL
      (CLSYS-SVAL DEMON DEMON-CODE DEMON)
      SELF
      SLOT
      OLDVALUE
      NEWVALUE))))
  :VOID)

;;; (DEFUN RUN-CONSTRUCTOR-DEMONS ...)

(CL:DEFUN RUN-CONSTRUCTOR-DEMONS (SELF)
  (CL:LET*
   ((CLASS (PRIMARY-CLASS SELF)))
   (CL:WHEN
    (CL:NOT (CL:EQ CLASS NULL))
    (CL:WHEN
     (CL:NOT (CL:EQ *CONSTRUCTOR-DEMONS* NULL))
     (CL:LET*
      ((DEMON NULL)
       (ITER-001 (CLSYS-SVAL LIST THE-CONS-LIST *CONSTRUCTOR-DEMONS*)))
      (CL:LOOP
       WHILE
       (CL:NOT (CL:EQ ITER-001 NIL))
       DO
       (CL:PROGN
        (CL:SETQ DEMON (CLSYS-SVAL CONS VALUE ITER-001))
        (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
       (CL:FUNCALL (CLSYS-SVAL DEMON DEMON-CODE DEMON) SELF CLASS))))
    (CL:WHEN
     (CL:NOT (CL:EQ (CLASS-CONSTRUCTOR-DEMONS CLASS) NULL))
     (CL:LET*
      ((DEMON NULL)
       (ITER-002
        (CLSYS-SVAL LIST THE-CONS-LIST (CLASS-CONSTRUCTOR-DEMONS CLASS))))
      (CL:LOOP
       WHILE
       (CL:NOT (CL:EQ ITER-002 NIL))
       DO
       (CL:PROGN
        (CL:SETQ DEMON (CLSYS-SVAL CONS VALUE ITER-002))
        (CL:SETQ ITER-002 (CLSYS-SVAL CONS REST ITER-002)))
       (CL:FUNCALL (CLSYS-SVAL DEMON DEMON-CODE DEMON) SELF CLASS))))))
  :VOID)

;;; (DEFUN RUN-DESTRUCTOR-DEMONS ...)

(CL:DEFUN RUN-DESTRUCTOR-DEMONS (SELF)
  (CL:LET*
   ((CLASS (PRIMARY-CLASS SELF)))
   (CL:WHEN
    (CL:NOT (CL:EQ CLASS NULL))
    (CL:WHEN
     (CL:NOT (CL:EQ *DESTRUCTOR-DEMONS* NULL))
     (CL:LET*
      ((DEMON NULL)
       (ITER-001 (CLSYS-SVAL LIST THE-CONS-LIST *DESTRUCTOR-DEMONS*)))
      (CL:LOOP
       WHILE
       (CL:NOT (CL:EQ ITER-001 NIL))
       DO
       (CL:PROGN
        (CL:SETQ DEMON (CLSYS-SVAL CONS VALUE ITER-001))
        (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
       (CL:FUNCALL (CLSYS-SVAL DEMON DEMON-CODE DEMON) SELF CLASS))))
    (CL:WHEN
     (CL:NOT (CL:EQ (CLASS-DESTRUCTOR-DEMONS CLASS) NULL))
     (CL:LET*
      ((DEMON NULL)
       (ITER-002
        (CLSYS-SVAL LIST THE-CONS-LIST (CLASS-DESTRUCTOR-DEMONS CLASS))))
      (CL:LOOP
       WHILE
       (CL:NOT (CL:EQ ITER-002 NIL))
       DO
       (CL:PROGN
        (CL:SETQ DEMON (CLSYS-SVAL CONS VALUE ITER-002))
        (CL:SETQ ITER-002 (CLSYS-SVAL CONS REST ITER-002)))
       (CL:FUNCALL (CLSYS-SVAL DEMON DEMON-CODE DEMON) SELF CLASS))))))
  :VOID)

;;; (DEFUN (YIELD-ACTIVE-SLOT-READER-BODY CONS) ...)

(CL:DEFUN YIELD-ACTIVE-SLOT-READER-BODY (SLOT DEFAULTEXPRESSION)
  (CL:LET*
   ((SLOTNAME (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT)))
   (CL:IF
    (CL:EQ (SINGLE-VALUED? SLOT) 1)
    (CL:RETURN-FROM
     YIELD-ACTIVE-SLOT-READER-BODY
     (WRAP-WITH-DEFAULT-VALUE-AND-RETURN-CODE
      (LIST* SYM-DEMONS-SLOT-VALUE SYM-DEMONS-SELF SLOTNAME NIL)
      DEFAULTEXPRESSION))
    (CL:PROGN
     (CL:WHEN
      (CL:NOT (CL:EQ DEFAULTEXPRESSION NULL))
      (CL:LET*
       ((*PRINTREADABLY?* TRUE))
       (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
       (SIGNAL-TRANSLATION-ERROR)
       (CL:WHEN
        (CL:EQ (SUPPRESS-WARNINGS?) 0)
        (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-OUTPUT)
        (CL:LET
         ((%%STREAM (CLSYS-SVAL OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT)))
         (CL:TERPRI %%STREAM)
         (CL:FORCE-OUTPUT %%STREAM)
         (CL:WRITE-STRING
          " Can't define a default value for the active collection-valued slot named.`"
          %%STREAM)
         (PRINT-OBJECT (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT) %%STREAM)
         (CL:WRITE-STRING "'Ignoring the default value.." %%STREAM)
         (CL:TERPRI %%STREAM)
         (CL:FORCE-OUTPUT %%STREAM)))))
     (CL:RETURN-FROM
      YIELD-ACTIVE-SLOT-READER-BODY
      (LIST*
       SYM-DEMONS-LET
       (CONS
        (LIST*
         SYM-DEMONS-VALUE
         (LIST* SYM-DEMONS-SLOT-VALUE SYM-DEMONS-SELF SLOTNAME NIL)
         NIL)
        NIL)
       (LIST*
        SYM-DEMONS-WHEN
        (LIST* SYM-DEMONS-DEFINED? SYM-DEMONS-VALUE NIL)
        (LIST* SYM-DEMONS-RETURN SYM-DEMONS-VALUE NIL)
        NIL)
       (LIST*
        SYM-DEMONS-SETQ
        SYM-DEMONS-VALUE
        (LIST* SYM-DEMONS-NEW (TYPE-TO-SYMBOL (TYPE SLOT)) NIL)
        NIL)
       (LIST*
        SYM-DEMONS-SETF
        (LIST* SYM-DEMONS-OWNER-INSTANCE SYM-DEMONS-VALUE NIL)
        SYM-DEMONS-SELF
        NIL)
       (LIST*
        SYM-DEMONS-SETF
        (LIST* SYM-DEMONS-ACTIVE-SLOT SYM-DEMONS-VALUE NIL)
        (LIST*
         SYM-DEMONS-GET-SLOT
         SYM-DEMONS-SELF
         (LIST*
          SYM-DEMONS-BQUOTE
          (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT)
          NIL)
         NIL)
        NIL)
       (LIST*
        SYM-DEMONS-SETF
        (LIST* SYM-DEMONS-SLOT-VALUE SYM-DEMONS-SELF SLOTNAME NIL)
        SYM-DEMONS-VALUE
        NIL)
       (LIST* SYM-DEMONS-RETURN SYM-DEMONS-VALUE NIL)
       NIL)))))
  :VOID)

;;; (DEFUN CANT-OVERWRITE-ACTIVE-COLLECTION-SLOT ...)

(CL:DEFUN CANT-OVERWRITE-ACTIVE-COLLECTION-SLOT (SELF SLOTNAME)
  (CL:WARN
   "Can't replace the value of the active slot `~A' on the object ~%`~A'.  Call 'insert' or 'remove' to add/remove slot values."
   SLOTNAME
   SELF)
  :VOID)

;;; (DEFUN (YIELD-ACTIVE-SLOT-WRITER-BODY CONS) ...)

(CL:DEFUN YIELD-ACTIVE-SLOT-WRITER-BODY (SLOT)
  (CL:LET*
   ((SLOTNAME (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT))
    (WRAPPINGFUNCTION
     (CL:IF
      (CL:EQ (CLSYS-SVAL STORAGE-SLOT SLOT-BASE-TYPE SLOT) SGT-DEMONS-BOOLEAN)
      SYM-DEMONS-WRAP-BOOLEAN
      SYM-DEMONS-WRAP-LITERAL)))
   (CL:COND
    ((CL:EQ (SINGLE-VALUED? SLOT) 0)
     (CL:RETURN-FROM
      YIELD-ACTIVE-SLOT-WRITER-BODY
      (LIST*
       SYM-DEMONS-PROGN
       SYM-DEMONS-VALUE
       (LIST*
        SYM-DEMONS-CANT-OVERWRITE-ACTIVE-COLLECTION-SLOT
        SYM-DEMONS-SELF
        (LIST* SYM-DEMONS-BQUOTE SLOTNAME NIL)
        NIL)
       (LIST*
        SYM-DEMONS-RETURN
        (LIST*
         SYM-DEMONS-SLOT-VALUE
         SYM-DEMONS-SELF
         (CLSYS-SVAL STORAGE-SLOT SLOT-NAME SLOT)
         NIL)
        NIL)
       NIL)))
    ((CL:EQ (SUBTYPE-OF? (TYPE SLOT) SGT-DEMONS-LITERAL) 1)
     (CL:RETURN-FROM
      YIELD-ACTIVE-SLOT-WRITER-BODY
      (LIST*
       SYM-DEMONS-LET
       (LIST*
        (LIST*
         SYM-DEMONS-SLOT
         (LIST*
          SYM-DEMONS-GET-SLOT
          SYM-DEMONS-SELF
          (LIST* SYM-DEMONS-BQUOTE SLOTNAME NIL)
          NIL)
         NIL)
        (LIST*
         SYM-DEMONS-OLDVALUE
         (LIST* SYM-DEMONS-SLOT-VALUE SYM-DEMONS-SELF SLOTNAME NIL)
         NIL)
        NIL)
       (LIST*
        SYM-DEMONS-WHEN
        (LIST*
         SYM-DEMONS-NOT
         (LIST* SYM-DEMONS-EQL? SYM-DEMONS-OLDVALUE SYM-DEMONS-VALUE NIL)
         NIL)
        (LIST*
         SYM-DEMONS-IF
         (LIST* SYM-DEMONS-CHECK-FOR-SLOT-DEMONS? SYM-DEMONS-SLOT NIL)
         (LIST*
          SYM-DEMONS-LET
          (LIST*
           (LIST*
            SYM-DEMONS-WRAPPEDOLDVALUE
            (LIST*
             SYM-DEMONS-CHOOSE
             (LIST* SYM-DEMONS-DEFINED? SYM-DEMONS-OLDVALUE NIL)
             (CONS WRAPPINGFUNCTION (CONS SYM-DEMONS-OLDVALUE NIL))
             SYM-DEMONS-NULL
             NIL)
            NIL)
           (LIST*
            SYM-DEMONS-WRAPPEDNEWVALUE
            (LIST*
             SYM-DEMONS-CHOOSE
             (LIST* SYM-DEMONS-DEFINED? SYM-DEMONS-VALUE NIL)
             (CONS WRAPPINGFUNCTION (CONS SYM-DEMONS-VALUE NIL))
             SYM-DEMONS-NULL
             NIL)
            NIL)
           NIL)
          (LIST*
           SYM-DEMONS-WHEN
           (LIST*
            SYM-DEMONS-RUN-SLOT-GUARD-DEMONS?
            SYM-DEMONS-SELF
            SYM-DEMONS-SLOT
            SYM-DEMONS-WRAPPEDOLDVALUE
            SYM-DEMONS-WRAPPEDNEWVALUE
            NIL)
           (LIST*
            SYM-DEMONS-SETF
            (LIST* SYM-DEMONS-SLOT-VALUE SYM-DEMONS-SELF SLOTNAME NIL)
            SYM-DEMONS-VALUE
            NIL)
           (LIST*
            SYM-DEMONS-RUN-SLOT-DEMONS
            SYM-DEMONS-SELF
            SYM-DEMONS-SLOT
            SYM-DEMONS-WRAPPEDOLDVALUE
            SYM-DEMONS-WRAPPEDNEWVALUE
            NIL)
           (LIST*
            SYM-DEMONS-WHEN
            (LIST* SYM-DEMONS-DEFINED? SYM-DEMONS-WRAPPEDOLDVALUE NIL)
            (LIST* SYM-DEMONS-FREE SYM-DEMONS-WRAPPEDOLDVALUE NIL)
            NIL)
           (LIST*
            SYM-DEMONS-WHEN
            (LIST* SYM-DEMONS-DEFINED? SYM-DEMONS-WRAPPEDNEWVALUE NIL)
            (LIST* SYM-DEMONS-FREE SYM-DEMONS-WRAPPEDNEWVALUE NIL)
            NIL)
           (LIST* SYM-DEMONS-RETURN SYM-DEMONS-VALUE NIL)
           NIL)
          (LIST* SYM-DEMONS-RETURN SYM-DEMONS-OLDVALUE NIL)
          NIL)
         (LIST*
          SYM-DEMONS-RETURN
          (LIST*
           SYM-DEMONS-SETF
           (LIST* SYM-DEMONS-SLOT-VALUE SYM-DEMONS-SELF SLOTNAME NIL)
           SYM-DEMONS-VALUE
           NIL)
          NIL)
         NIL)
        NIL)
       NIL)))
    (CL:T
     (CL:RETURN-FROM
      YIELD-ACTIVE-SLOT-WRITER-BODY
      (LIST*
       SYM-DEMONS-LET
       (LIST*
        (LIST*
         SYM-DEMONS-SLOT
         (LIST*
          SYM-DEMONS-GET-SLOT
          SYM-DEMONS-SELF
          (LIST* SYM-DEMONS-BQUOTE SLOTNAME NIL)
          NIL)
         NIL)
        (LIST*
         SYM-DEMONS-OLDVALUE
         (LIST* SYM-DEMONS-SLOT-VALUE SYM-DEMONS-SELF SLOTNAME NIL)
         NIL)
        NIL)
       (LIST*
        SYM-DEMONS-WHEN
        (LIST*
         SYM-DEMONS-AND
         (LIST*
          SYM-DEMONS-NOT
          (LIST* SYM-DEMONS-EQ? SYM-DEMONS-OLDVALUE SYM-DEMONS-VALUE NIL)
          NIL)
         (LIST*
          SYM-DEMONS-RUN-SLOT-GUARD-DEMONS?
          SYM-DEMONS-SELF
          SYM-DEMONS-SLOT
          SYM-DEMONS-OLDVALUE
          SYM-DEMONS-VALUE
          NIL)
         NIL)
        (LIST*
         SYM-DEMONS-SETF
         (LIST* SYM-DEMONS-SLOT-VALUE SYM-DEMONS-SELF SLOTNAME NIL)
         SYM-DEMONS-VALUE
         NIL)
        (LIST*
         SYM-DEMONS-RUN-SLOT-DEMONS
         SYM-DEMONS-SELF
         SYM-DEMONS-SLOT
         SYM-DEMONS-OLDVALUE
         SYM-DEMONS-VALUE
         NIL)
        (LIST* SYM-DEMONS-RETURN SYM-DEMONS-VALUE NIL)
        NIL)
       (LIST* SYM-DEMONS-RETURN SYM-DEMONS-OLDVALUE NIL)
       NIL)))))
  :VOID)

;;; (DEFMETHOD INSERT ...)

(CL:DEFMETHOD INSERT ((SELF ACTIVE-LIST) VALUE)
  (CL:LET*
   ((SLOT (CLSYS-SVAL ACTIVE-LIST ACTIVE-SLOT SELF))
    (OWNER (CLSYS-SVAL ACTIVE-LIST OWNER-INSTANCE SELF)))
   (CL:WHEN
    (CL:EQ (RUN-SLOT-GUARD-DEMONS? OWNER SLOT SELF VALUE) 1)
    (CL:SETF
     (CLSYS-SVAL ACTIVE-LIST THE-CONS-LIST SELF)
     (CONS VALUE (CLSYS-SVAL ACTIVE-LIST THE-CONS-LIST SELF)))
    (RUN-SLOT-DEMONS OWNER SLOT NULL VALUE)))
  :VOID)

;;; (DEFMETHOD INSERT ...)

(CL:DEFMETHOD INSERT ((SELF ACTIVE-SET) VALUE)
  (CL:LET*
   ((SLOT (CLSYS-SVAL ACTIVE-SET ACTIVE-SLOT SELF))
    (OWNER (CLSYS-SVAL ACTIVE-SET OWNER-INSTANCE SELF)))
   (CL:WHEN
    (CL:EQ (MEMBER? (CLSYS-SVAL ACTIVE-SET THE-CONS-LIST SELF) VALUE) 0)
    (CL:WHEN
     (CL:EQ (RUN-SLOT-GUARD-DEMONS? OWNER SLOT SELF VALUE) 1)
     (CL:SETF
      (CLSYS-SVAL ACTIVE-SET THE-CONS-LIST SELF)
      (CONS VALUE (CLSYS-SVAL ACTIVE-SET THE-CONS-LIST SELF)))
     (RUN-SLOT-DEMONS OWNER SLOT NULL VALUE))))
  :VOID)

;;; (DEFMETHOD (REMOVE ACTIVE-LIST) ...)

(CL:DEFMETHOD REMOVE ((SELF ACTIVE-LIST) VALUE)
  (CL:LET*
   ((SLOT (CLSYS-SVAL ACTIVE-LIST ACTIVE-SLOT SELF))
    (OWNER (CLSYS-SVAL ACTIVE-LIST OWNER-INSTANCE SELF)))
   (CL:WHEN
    (CL:EQ (MEMBER? (CLSYS-SVAL ACTIVE-LIST THE-CONS-LIST SELF) VALUE) 1)
    (CL:WHEN
     (CL:EQ (RUN-SLOT-GUARD-DEMONS? OWNER SLOT VALUE NULL) 1)
     (CL:SETF
      (CLSYS-SVAL ACTIVE-LIST THE-CONS-LIST SELF)
      (REMOVE (CLSYS-SVAL ACTIVE-LIST THE-CONS-LIST SELF) VALUE))
     (RUN-SLOT-DEMONS OWNER SLOT VALUE NULL)))
   (CL:RETURN-FROM REMOVE SELF))
  :VOID)

;;; (DEFMETHOD (REMOVE ACTIVE-SET) ...)

(CL:DEFMETHOD REMOVE ((SELF ACTIVE-SET) VALUE)
  (CL:LET*
   ((SLOT (CLSYS-SVAL ACTIVE-SET ACTIVE-SLOT SELF))
    (OWNER (CLSYS-SVAL ACTIVE-SET OWNER-INSTANCE SELF)))
   (CL:WHEN
    (CL:EQ (MEMBER? (CLSYS-SVAL ACTIVE-SET THE-CONS-LIST SELF) VALUE) 1)
    (CL:WHEN
     (CL:EQ (RUN-SLOT-GUARD-DEMONS? OWNER SLOT VALUE NULL) 1)
     (CL:SETF
      (CLSYS-SVAL ACTIVE-SET THE-CONS-LIST SELF)
      (REMOVE (CLSYS-SVAL ACTIVE-SET THE-CONS-LIST SELF) VALUE))
     (RUN-SLOT-DEMONS OWNER SLOT VALUE NULL)))
   (CL:RETURN-FROM REMOVE SELF))
  :VOID)

;;; (DEFCLASS HOOK-LIST ...)

(CL:DEFCLASS HOOK-LIST (KEY-VALUE-LIST)
  ((SIGNATURE :ALLOCATION :INSTANCE :ACCESSOR SIGNATURE...OF)
   (DOCUMENTATION :ALLOCATION :INSTANCE :ACCESSOR DOCUMENTATION...OF))
  (:DOCUMENTATION
   "Each HOOK-LIST object contains a list of zero or
more function codes that get funcall'd some procedure."))

(CL:DEFUN NEW-HOOK-LIST ()
  (CL:LET*
   ((SELF NULL))
   (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE HOOK-LIST)))
   (CL:SETF (CLSYS-SVAL HOOK-LIST THE-KV-LIST SELF) NULL)
   (CL:SETF (CLSYS-SVAL HOOK-LIST DOCUMENTATION SELF) NULL)
   (CL:SETF (CLSYS-SVAL HOOK-LIST SIGNATURE SELF) NULL)
   (CL:RETURN-FROM NEW-HOOK-LIST SELF))
  :VOID)

(CL:DEFUN ACCESS-HOOK-LIST-SLOT-VALUE (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-DEMONS-SIGNATURE)
    (CL:IF
     (CL:EQ SETVALUE? 1)
     (CL:SETF
      (CLSYS-SVAL HOOK-LIST SIGNATURE SELF)
      (CLSYS-SVAL STRING-WRAPPER WRAPPER-VALUE VALUE))
     (CL:RETURN-FROM
      ACCESS-HOOK-LIST-SLOT-VALUE
      (WRAP-LITERAL (CLSYS-SVAL HOOK-LIST SIGNATURE SELF)))))
   ((CL:EQ SLOTNAME SYM-DEMONS-DOCUMENTATION)
    (CL:IF
     (CL:EQ SETVALUE? 1)
     (CL:SETF
      (CLSYS-SVAL HOOK-LIST DOCUMENTATION SELF)
      (CLSYS-SVAL STRING-WRAPPER WRAPPER-VALUE VALUE))
     (CL:RETURN-FROM
      ACCESS-HOOK-LIST-SLOT-VALUE
      (WRAP-LITERAL (CLSYS-SVAL HOOK-LIST DOCUMENTATION SELF)))))
   (CL:T (CL:ERROR "`~A' is not a valid case option" SLOTNAME)))
  (CL:WHEN
   (CL:EQ SETVALUE? 1)
   (CL:RETURN-FROM ACCESS-HOOK-LIST-SLOT-VALUE VALUE))
  :VOID)

(CL:DEFMETHOD PRIMARY-TYPE ((SELF HOOK-LIST))
  (CL:RETURN-FROM PRIMARY-TYPE SGT-DEMONS-HOOK-LIST)
  :VOID)

;;; (DEFUN ADD-HOOK ...)

(CL:DEFUN ADD-HOOK (HOOKLIST HOOKFUNCTION)
  "Insert the function named 'hookFunction' into 'hookList'."
  (CL:LET*
   ((FUNCTION (LOOKUP-FUNCTION HOOKFUNCTION)))
   (CL:WHEN
    (CL:EQ FUNCTION NULL)
    (CL:WARN "Reference to non-existent hook function: 'hookFunction'.")
    (CL:RETURN-FROM ADD-HOOK))
   (INSERT-AT
    HOOKLIST
    HOOKFUNCTION
    (WRAP-LITERAL (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE FUNCTION))))
  :VOID)

;;; (DEFUN DROP-HOOK ...)

(CL:DEFUN DROP-HOOK (HOOKLIST HOOKFUNCTION)
  "Remove the function named 'hookFunction' from 'hookList'."
  (REMOVE-AT HOOKLIST HOOKFUNCTION)
  :VOID)

;;; (DEFUN RUN-HOOKS ...)

(CL:DEFUN RUN-HOOKS (HOOKLIST ARGUMENT)
  "Run all hook functions in 'hooklist', applying
each one to 'argument'."
  (CL:LET*
   ((IT (ALLOCATE-ITERATOR HOOKLIST)))
   (CL:LOOP
    WHILE
    (CL:EQ (NEXT? IT) 1)
    DO
    (CL:FUNCALL
     (CLSYS-SVAL
      FUNCTION-CODE-WRAPPER
      WRAPPER-VALUE
      (CLSYS-SVAL KV-LIST-ITERATOR VALUE IT))
     ARGUMENT)))
  :VOID)

;;; (DEFGLOBAL *CHANGE-MODULE-HOOKS* ...)

(CL:DEFVAR *CHANGE-MODULE-HOOKS* NULL
  "HOOK-LIST called by 'in-module', applied to a
'module' argument.")

;;; (DEFGLOBAL *CLEAR-MODULE-HOOKS* ...)

(CL:DEFVAR *CLEAR-MODULE-HOOKS* NULL
  "HOOK-LIST called by 'clear-module', applied to a
'module' argument.")

;;; (DEFGLOBAL *REDEFINE-RELATION-HOOKS* ...)

(CL:DEFVAR *REDEFINE-RELATION-HOOKS* NULL
  "HOOK-LIST is called by 'undefine-old-class'.  Each
hook function is passed a LIST of two RELATION objects; the first is the
old relation object and the second is the new (redefined) relation object.
The hook functions are expected to copy/transfer information from the
old relation to the new relation so that it won't be lost.")

;;; (DEFGLOBAL *BLOCK-NATIVE-CLASS-CREATION-HOOKS* ...)

(CL:DEFVAR *BLOCK-NATIVE-CLASS-CREATION-HOOKS* NULL
  "HOOK-LIST called by 'create-native-class', applied to
a STELLA class.  Return value of TRUE blocks creation.")

(CL:DEFUN STARTUP-DEMONS ()
  (CL:LET*
   ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 2) 1)
    (CL:SETQ
     KWD-DEMONS-MODIFY
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MODIFY" NULL 2))
    (CL:SETQ
     KWD-DEMONS-CREATE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CREATE" NULL 2))
    (CL:SETQ
     KWD-DEMONS-DESTROY
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DESTROY" NULL 2))
    (CL:SETQ KWD-DEMONS-ALL (INTERN-RIGID-SYMBOL-WRT-MODULE "ALL" NULL 2))
    (CL:SETQ KWD-DEMONS-CLASS (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS" NULL 2))
    (CL:SETQ KWD-DEMONS-SLOT (INTERN-RIGID-SYMBOL-WRT-MODULE "SLOT" NULL 2))
    (CL:SETQ KWD-DEMONS-CODE (INTERN-RIGID-SYMBOL-WRT-MODULE "CODE" NULL 2))
    (CL:SETQ
     KWD-DEMONS-METHOD
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD" NULL 2))
    (CL:SETQ
     KWD-DEMONS-GUARD?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "GUARD?" NULL 2))
    (CL:SETQ
     KWD-DEMONS-INHERITED?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "INHERITED?" NULL 2))
    (CL:SETQ
     KWD-DEMONS-DOCUMENTATION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DOCUMENTATION" NULL 2))
    (CL:SETQ
     KWD-DEMONS-ACTIVATE?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "ACTIVATE?" NULL 2))
    (CL:SETQ
     SYM-DEMONS-SLOT-GUARD-DEMONS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SLOT-GUARD-DEMONS" NULL 0))
    (CL:SETQ
     SYM-DEMONS-SLOT-DEMONS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SLOT-DEMONS" NULL 0))
    (CL:SETQ
     SYM-DEMONS-CLASS-GUARD-CONSTRUCTOR-DEMONS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS-GUARD-CONSTRUCTOR-DEMONS" NULL 0))
    (CL:SETQ
     SYM-DEMONS-CLASS-CONSTRUCTOR-DEMONS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS-CONSTRUCTOR-DEMONS" NULL 0))
    (CL:SETQ
     SYM-DEMONS-CLASS-GUARD-DESTRUCTOR-DEMONS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS-GUARD-DESTRUCTOR-DEMONS" NULL 0))
    (CL:SETQ
     SYM-DEMONS-CLASS-DESTRUCTOR-DEMONS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS-DESTRUCTOR-DEMONS" NULL 0))
    (CL:SETQ
     SYM-DEMONS-WRAP-LITERAL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WRAP-LITERAL" NULL 0))
    (CL:SETQ SYM-DEMONS-TRUE (INTERN-RIGID-SYMBOL-WRT-MODULE "TRUE" NULL 0))
    (CL:SETQ
     SYM-DEMONS-WRAP-BOOLEAN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WRAP-BOOLEAN" NULL 0))
    (CL:SETQ SYM-DEMONS-FALSE (INTERN-RIGID-SYMBOL-WRT-MODULE "FALSE" NULL 0))
    (CL:SETQ SYM-DEMONS-PROGN (INTERN-RIGID-SYMBOL-WRT-MODULE "PROGN" NULL 0))
    (CL:SETQ SYM-DEMONS-DEFUN (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFUN" NULL 0))
    (CL:SETQ
     SYM-DEMONS-STARTUP-TIME-PROGN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-TIME-PROGN" NULL 0))
    (CL:SETQ
     SYM-DEMONS-DEFINE-DEMON
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFINE-DEMON" NULL 0))
    (CL:SETQ
     SYM-DEMONS-THE-CODE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "THE-CODE" NULL 0))
    (CL:SETQ
     KWD-DEMONS-FUNCTION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FUNCTION" NULL 2))
    (CL:SETQ
     SYM-DEMONS-DEFDEMON
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFDEMON" NULL 0))
    (CL:SETQ
     SYM-DEMONS-DEFDEMON-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFDEMON-EXPANDER" NULL 0))
    (CL:SETQ
     SYM-DEMONS-SLOT-VALUE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SLOT-VALUE" NULL 0))
    (CL:SETQ SYM-DEMONS-SELF (INTERN-RIGID-SYMBOL-WRT-MODULE "SELF" NULL 0))
    (CL:SETQ SYM-DEMONS-LET (INTERN-RIGID-SYMBOL-WRT-MODULE "LET" NULL 0))
    (CL:SETQ SYM-DEMONS-VALUE (INTERN-RIGID-SYMBOL-WRT-MODULE "VALUE" NULL 0))
    (CL:SETQ SYM-DEMONS-WHEN (INTERN-RIGID-SYMBOL-WRT-MODULE "WHEN" NULL 0))
    (CL:SETQ
     SYM-DEMONS-DEFINED?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFINED?" NULL 0))
    (CL:SETQ
     SYM-DEMONS-RETURN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "RETURN" NULL 0))
    (CL:SETQ SYM-DEMONS-SETQ (INTERN-RIGID-SYMBOL-WRT-MODULE "SETQ" NULL 0))
    (CL:SETQ SYM-DEMONS-NEW (INTERN-RIGID-SYMBOL-WRT-MODULE "NEW" NULL 0))
    (CL:SETQ SYM-DEMONS-SETF (INTERN-RIGID-SYMBOL-WRT-MODULE "SETF" NULL 0))
    (CL:SETQ
     SYM-DEMONS-OWNER-INSTANCE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "OWNER-INSTANCE" NULL 0))
    (CL:SETQ
     SYM-DEMONS-ACTIVE-SLOT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "ACTIVE-SLOT" NULL 0))
    (CL:SETQ
     SYM-DEMONS-GET-SLOT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "GET-SLOT" NULL 0))
    (CL:SETQ
     SYM-DEMONS-BQUOTE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "BQUOTE" NULL 0))
    (CL:SETQ
     SGT-DEMONS-BOOLEAN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "BOOLEAN" NULL 1))
    (CL:SETQ
     SYM-DEMONS-CANT-OVERWRITE-ACTIVE-COLLECTION-SLOT
     (INTERN-RIGID-SYMBOL-WRT-MODULE
      "CANT-OVERWRITE-ACTIVE-COLLECTION-SLOT"
      NULL
      0))
    (CL:SETQ
     SGT-DEMONS-LITERAL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "LITERAL" NULL 1))
    (CL:SETQ SYM-DEMONS-SLOT (INTERN-RIGID-SYMBOL-WRT-MODULE "SLOT" NULL 0))
    (CL:SETQ
     SYM-DEMONS-OLDVALUE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "OLDVALUE" NULL 0))
    (CL:SETQ SYM-DEMONS-NOT (INTERN-RIGID-SYMBOL-WRT-MODULE "NOT" NULL 0))
    (CL:SETQ SYM-DEMONS-EQL? (INTERN-RIGID-SYMBOL-WRT-MODULE "EQL?" NULL 0))
    (CL:SETQ SYM-DEMONS-IF (INTERN-RIGID-SYMBOL-WRT-MODULE "IF" NULL 0))
    (CL:SETQ
     SYM-DEMONS-CHECK-FOR-SLOT-DEMONS?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CHECK-FOR-SLOT-DEMONS?" NULL 0))
    (CL:SETQ
     SYM-DEMONS-WRAPPEDOLDVALUE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WRAPPEDOLDVALUE" NULL 0))
    (CL:SETQ
     SYM-DEMONS-CHOOSE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CHOOSE" NULL 0))
    (CL:SETQ SYM-DEMONS-NULL (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL" NULL 0))
    (CL:SETQ
     SYM-DEMONS-WRAPPEDNEWVALUE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WRAPPEDNEWVALUE" NULL 0))
    (CL:SETQ
     SYM-DEMONS-RUN-SLOT-GUARD-DEMONS?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "RUN-SLOT-GUARD-DEMONS?" NULL 0))
    (CL:SETQ
     SYM-DEMONS-RUN-SLOT-DEMONS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "RUN-SLOT-DEMONS" NULL 0))
    (CL:SETQ SYM-DEMONS-FREE (INTERN-RIGID-SYMBOL-WRT-MODULE "FREE" NULL 0))
    (CL:SETQ SYM-DEMONS-AND (INTERN-RIGID-SYMBOL-WRT-MODULE "AND" NULL 0))
    (CL:SETQ SYM-DEMONS-EQ? (INTERN-RIGID-SYMBOL-WRT-MODULE "EQ?" NULL 0))
    (CL:SETQ
     SYM-DEMONS-SIGNATURE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SIGNATURE" NULL 0))
    (CL:SETQ
     SYM-DEMONS-DOCUMENTATION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DOCUMENTATION" NULL 0))
    (CL:SETQ
     SGT-DEMONS-HOOK-LIST
     (INTERN-RIGID-SYMBOL-WRT-MODULE "HOOK-LIST" NULL 1)))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 4) 1)
    (CL:SETQ *DEMONS-TABLE* (NEW-STRING-HASH-TABLE))
    (CL:SETQ *CHANGE-MODULE-HOOKS* (NEW-HOOK-LIST))
    (CL:SETQ *CLEAR-MODULE-HOOKS* (NEW-HOOK-LIST))
    (CL:SETQ *REDEFINE-RELATION-HOOKS* (NEW-HOOK-LIST))
    (CL:SETQ *BLOCK-NATIVE-CLASS-CREATION-HOOKS* (NEW-HOOK-LIST)))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 5) 1)
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE
        "HOOK-LIST"
        "(DEFCLASS HOOK-LIST (KEY-VALUE-LIST) :DOCUMENTATION \"Each HOOK-LIST object contains a list of zero or
more function codes that get funcall'd some procedure.\" :PARAMETERS ((ANY-KEY :TYPE SYMBOL) (ANY-VALUE :TYPE FUNCTION-CODE-WRAPPER)) :SLOTS ((SIGNATURE :TYPE STRING) (DOCUMENTATION :TYPE STRING)))")))
     (CL:SETF
      (CLSYS-SVAL CLASS CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-HOOK-LIST))
     (CL:SETF
      (CLSYS-SVAL CLASS CLASS-SLOT-ACCESSOR-CODE CLASS)
      (CL:FUNCTION ACCESS-HOOK-LIST-SLOT-VALUE))))
   (CL:WHEN (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 6) 1) (FINALIZE-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 7) 1)
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "VALIDATE-DEMON-REFERENCES?"
        "DEMON"
        "(DEFUN (VALIDATE-DEMON-REFERENCES? BOOLEAN) ((DEMON DEMON)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION VALIDATE-DEMON-REFERENCES?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INCORPORATE-DEMON-OPTIONS?"
        "DEMON"
        "(DEFUN (INCORPORATE-DEMON-OPTIONS? BOOLEAN) ((DEMON DEMON) (OPTIONS PROPERTY-LIST)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INCORPORATE-DEMON-OPTIONS?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "LOOKUP-DEMON"
        "STRING"
        "(DEFUN (LOOKUP-DEMON DEMON) ((NAME STRING)) :DOCUMENTATION \"Return the demon named 'name'.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION LOOKUP-DEMON)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DEFINE-DEMON"
        "STRING"
        "(DEFUN (DEFINE-DEMON DEMON) ((NAME STRING) |&REST| (OPTIONS OBJECT)) :DOCUMENTATION \"Define a class or slot demon.  Options are :create,
:destroy, :class, :slot, :guard?, :code, :method, :inherit?, and :documentation.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION DEFINE-DEMON)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INJECT-DEMON"
        "LIST"
        "(DEFUN (INJECT-DEMON (LIST OF DEMON)) ((DEMONLIST (LIST OF DEMON)) (DEMON DEMON)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INJECT-DEMON)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "EJECT-DEMON"
        "LIST"
        "(DEFUN (EJECT-DEMON (LIST OF DEMON)) ((DEMONLIST (LIST OF DEMON)) (DEMON DEMON)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION EJECT-DEMON)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "ACTIVATE-DEMON"
        "DEMON"
        "(DEFUN ACTIVATE-DEMON ((DEMON DEMON)) :DOCUMENTATION \"Install 'demon' in the location(s) specified by its internal
structure.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION ACTIVATE-DEMON)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DEACTIVATE-DEMON"
        "DEMON"
        "(DEFUN DEACTIVATE-DEMON ((DEMON DEMON)) :DOCUMENTATION \"Detach 'demon' from the location(s) specified by its internal
structure.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION DEACTIVATE-DEMON)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DESTRUCTURE-DEFDEMON-BODY"
        "CONS"
        "(DEFUN (DESTRUCTURE-DEFDEMON-BODY CONS CONS) ((DEMONTREE CONS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION DESTRUCTURE-DEFDEMON-BODY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "IN-PLACE-NORMALIZE-DEMON-OPTIONS"
        "CONS"
        "(DEFUN IN-PLACE-NORMALIZE-DEMON-OPTIONS ((OPTIONSTREE CONS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION IN-PLACE-NORMALIZE-DEMON-OPTIONS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DEFDEMON-EXPANDER"
        "STRING-WRAPPER"
        "(DEFUN (DEFDEMON-EXPANDER OBJECT) ((NAME STRING-WRAPPER) (PARAMETERSTREE CONS) |&BODY| (OPTIONSANDBODY CONS)) :DOCUMENTATION \"Define a demon 'name' and attach it to a class or slot.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION DEFDEMON-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "READ-SLOT-VALUE"
        "STANDARD-OBJECT"
        "(DEFUN (READ-SLOT-VALUE OBJECT) ((SELF STANDARD-OBJECT) (SLOT STORAGE-SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION READ-SLOT-VALUE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "WRITE-SLOT-VALUE"
        "STANDARD-OBJECT"
        "(DEFUN (WRITE-SLOT-VALUE OBJECT) ((SELF STANDARD-OBJECT) (SLOT STORAGE-SLOT) (VALUE OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION WRITE-SLOT-VALUE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PUT-SLOT-VALUE"
        "STANDARD-OBJECT"
        "(DEFUN (PUT-SLOT-VALUE OBJECT) ((SELF STANDARD-OBJECT) (SLOT STORAGE-SLOT) (VALUE OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION PUT-SLOT-VALUE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DROP-SLOT-VALUE"
        "STANDARD-OBJECT"
        "(DEFUN DROP-SLOT-VALUE ((SELF STANDARD-OBJECT) (SLOT STORAGE-SLOT) (VALUE OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION DROP-SLOT-VALUE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CHECK-FOR-SLOT-DEMONS?"
        "STORAGE-SLOT"
        "(DEFUN (CHECK-FOR-SLOT-DEMONS? BOOLEAN) ((SLOT STORAGE-SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CHECK-FOR-SLOT-DEMONS?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "RUN-SLOT-GUARD-DEMONS?"
        "STANDARD-OBJECT"
        "(DEFUN (RUN-SLOT-GUARD-DEMONS? BOOLEAN) ((SELF STANDARD-OBJECT) (SLOT STORAGE-SLOT) (OLDVALUE OBJECT) (NEWVALUE OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION RUN-SLOT-GUARD-DEMONS?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "RUN-SLOT-DEMONS"
        "STANDARD-OBJECT"
        "(DEFUN RUN-SLOT-DEMONS ((SELF STANDARD-OBJECT) (SLOT STORAGE-SLOT) (OLDVALUE OBJECT) (NEWVALUE OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION RUN-SLOT-DEMONS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "RUN-CONSTRUCTOR-DEMONS"
        "STANDARD-OBJECT"
        "(DEFUN RUN-CONSTRUCTOR-DEMONS ((SELF STANDARD-OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION RUN-CONSTRUCTOR-DEMONS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "RUN-DESTRUCTOR-DEMONS"
        "STANDARD-OBJECT"
        "(DEFUN RUN-DESTRUCTOR-DEMONS ((SELF STANDARD-OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION RUN-DESTRUCTOR-DEMONS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-ACTIVE-SLOT-READER-BODY"
        "STORAGE-SLOT"
        "(DEFUN (YIELD-ACTIVE-SLOT-READER-BODY CONS) ((SLOT STORAGE-SLOT) (DEFAULTEXPRESSION OBJECT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-ACTIVE-SLOT-READER-BODY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CANT-OVERWRITE-ACTIVE-COLLECTION-SLOT"
        "STANDARD-OBJECT"
        "(DEFUN CANT-OVERWRITE-ACTIVE-COLLECTION-SLOT ((SELF STANDARD-OBJECT) (SLOTNAME SYMBOL)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CANT-OVERWRITE-ACTIVE-COLLECTION-SLOT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "YIELD-ACTIVE-SLOT-WRITER-BODY"
        "STORAGE-SLOT"
        "(DEFUN (YIELD-ACTIVE-SLOT-WRITER-BODY CONS) ((SLOT STORAGE-SLOT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION YIELD-ACTIVE-SLOT-WRITER-BODY)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INSERT"
        "ACTIVE-LIST"
        "(DEFMETHOD INSERT ((SELF ACTIVE-LIST) (VALUE (LIKE (ANY-VALUE SELF)))))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION INSERT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INSERT"
        "ACTIVE-SET"
        "(DEFMETHOD INSERT ((SELF ACTIVE-SET) (VALUE (LIKE (ANY-VALUE SELF)))))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION INSERT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "REMOVE"
        "ACTIVE-LIST"
        "(DEFMETHOD (REMOVE ACTIVE-LIST) ((SELF ACTIVE-LIST) (VALUE (LIKE (ANY-VALUE SELF)))))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION REMOVE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "REMOVE"
        "ACTIVE-SET"
        "(DEFMETHOD (REMOVE ACTIVE-SET) ((SELF ACTIVE-SET) (VALUE (LIKE (ANY-VALUE SELF)))))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION REMOVE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "ADD-HOOK"
        "HOOK-LIST"
        "(DEFUN ADD-HOOK ((HOOKLIST HOOK-LIST) (HOOKFUNCTION SYMBOL)) :PUBLIC? TRUE :DOCUMENTATION \"Insert the function named 'hookFunction' into 'hookList'.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION ADD-HOOK)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DROP-HOOK"
        "HOOK-LIST"
        "(DEFUN DROP-HOOK ((HOOKLIST HOOK-LIST) (HOOKFUNCTION SYMBOL)) :PUBLIC? TRUE :DOCUMENTATION \"Remove the function named 'hookFunction' from 'hookList'.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION DROP-HOOK)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "RUN-HOOKS"
        "HOOK-LIST"
        "(DEFUN RUN-HOOKS ((HOOKLIST HOOK-LIST) (ARGUMENT OBJECT)) :DOCUMENTATION \"Run all hook functions in 'hooklist', applying
each one to 'argument'.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION RUN-HOOKS)))
    (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
     "STARTUP-DEMONS"
     NULL
     "(DEFUN STARTUP-DEMONS ())"))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 8) 1)
    (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 9) 1)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *DEMONS-TABLE* STRING-HASH-TABLE (NEW STRING-HASH-TABLE) :DOCUMENTATION \"Table containing all active and inactive demons, indexed
on their names.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *CONSTRUCTOR-DEMONS* (LIST OF DEMON) NULL :DOCUMENTATION \"These demons trigger every time an active instance is created.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *DESTRUCTOR-DEMONS* (LIST OF DEMON) NULL :DOCUMENTATION \"These demons trigger every time an active instance is destroyed.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *ALL-SLOTS-DEMONS* (LIST OF DEMON) NULL :DOCUMENTATION \"These demons trigger every time a slot value is modified.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *ALL-SLOTS-GUARD-DEMONS* (LIST OF DEMON) NULL :DOCUMENTATION \"These demons trigger every time a slot value is modified, and
cancel slot update when they return FALSE.\")")
    (STORE-MACRO
     SYM-DEMONS-DEFDEMON
     SYM-DEMONS-DEFDEMON-EXPANDER
     (CL:FUNCTION DEFDEMON-EXPANDER))
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *CHANGE-MODULE-HOOKS* HOOK-LIST (NEW HOOK-LIST) :DOCUMENTATION \"HOOK-LIST called by 'in-module', applied to a
'module' argument.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *CLEAR-MODULE-HOOKS* HOOK-LIST (NEW HOOK-LIST) :DOCUMENTATION \"HOOK-LIST called by 'clear-module', applied to a
'module' argument.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *REDEFINE-RELATION-HOOKS* HOOK-LIST (NEW HOOK-LIST) :DOCUMENTATION \"HOOK-LIST is called by 'undefine-old-class'.  Each
hook function is passed a LIST of two RELATION objects; the first is the
old relation object and the second is the new (redefined) relation object.
The hook functions are expected to copy/transfer information from the
old relation to the new relation so that it won't be lost.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *BLOCK-NATIVE-CLASS-CREATION-HOOKS* HOOK-LIST (NEW HOOK-LIST) :DOCUMENTATION \"HOOK-LIST called by 'create-native-class', applied to
a STELLA class.  Return value of TRUE blocks creation.\")")))
  :VOID)
