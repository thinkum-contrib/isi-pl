;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

#|--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1997                   | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied "AS IS",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SGT-LOGIC-MACROS-LOGIC-EXCEPTION NULL)
(CL:DEFVAR SGT-LOGIC-MACROS-PROPOSITION-ERROR NULL)
(CL:DEFVAR SGT-LOGIC-MACROS-PARSING-ERROR NULL)
(CL:DEFVAR SGT-LOGIC-MACROS-CLASH NULL)
(CL:DEFVAR SGT-LOGIC-MACROS-FAIL NULL)
(CL:DEFVAR SGT-LOGIC-MACROS-QUERY-THREAD-LIMIT-VIOLATION NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-SPECIAL NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-*PRINTREADABLY?* NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-TRUE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-INFORM NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-EOL NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-SIGNAL NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-*THE-PARSING-ERROR* NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-SIGNAL-PARSING-ERROR NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-SIGNAL-PARSING-ERROR-EXPANDER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-PRINT NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-*PROPOSITIONUNDERCONSTRUCTION* NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-*THE-PROPOSITION-ERROR* NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-SIGNAL-PROPOSITION-ERROR NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-SIGNAL-PROPOSITION-ERROR-EXPANDER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-WARN NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-SIGNAL-PROPOSITION-WARNING NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-SIGNAL-PROPOSITION-WARNING-EXPANDER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-SETQ NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LASTMOVE NULL)
(CL:DEFVAR KWD-LOGIC-MACROS-DOWN NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-MOVE-IN-PLACE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-MOVE-IN-PLACE-EXPANDER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-LET NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-BACKFRAME NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-FRAME NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-UPFRAME NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-UP NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-CREATE-DOWN-FRAME NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-PROPOSITION NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-SETF NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-BACK NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-STATE NULL)
(CL:DEFVAR KWD-LOGIC-MACROS-AND NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-ARGUMENT-CURSOR NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-1+ NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-MOVE-FORWARD NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-MOVE-FORWARD-EXPANDER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-FORWARDFRAME NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-NULL NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-DOWN NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-POP-CONTROL-FRAME NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-QUERYENVIRONMENT NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-MOVE-BACKWARD NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-MOVE-BACKWARD-EXPANDER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-PROGN NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-DEPTH NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-COND NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-> NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-CURRENT-DEPTH-CUTOFF NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-WHEN NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-DEFINED? NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-POP-FRAMES-DOWN-TO NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-1- NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-MV-SETQ NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-HANDLE-DEPTH-VIOLATION NULL)
(CL:DEFVAR KWD-LOGIC-MACROS-UP-FAIL NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-OTHERWISE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-NTH NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-ARGUMENTS NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-DEBUG-DEPTH NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-MOVE-DOWN NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-MOVE-DOWN-EXPANDER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-IF NULL)
(CL:DEFVAR SYM-LOGIC-MACROS->= NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-DEFINING-PROPOSITION NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-CAST NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-PATTERN-VARIABLE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-MOVE-DOWN-TO-FUNCTION NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-MOVE-DOWN-TO-FUNCTION-EXPANDER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-FAIL NULL)
(CL:DEFVAR KWD-LOGIC-MACROS-UP-TRUE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-UPDATE-GOAL-CACHE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-FALSE NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-KEEP-FRAME NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-SAFETY NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-NULL? NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-MOVE-UP NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-MOVE-UP-EXPANDER NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-RETURN NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-MOVE-UP-OR-EXIT NULL)
(CL:DEFVAR SYM-LOGIC-MACROS-MOVE-UP-OR-EXIT-EXPANDER NULL)

;;; Forward declarations:

(CL:DECLAIM (CL:SPECIAL *MODULE*))

;;; (DEFCLASS LOGIC-EXCEPTION ...)

(CL:DEFCLASS LOGIC-EXCEPTION (EXCEPTION)
  ())

(CL:DEFUN NEW-LOGIC-EXCEPTION ()
  (CL:LET*
   ((SELF NULL))
   (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE LOGIC-EXCEPTION)))
   (CL:RETURN-FROM NEW-LOGIC-EXCEPTION SELF))
  :VOID)

(CL:DEFMETHOD PRIMARY-TYPE ((SELF LOGIC-EXCEPTION))
  (CL:RETURN-FROM PRIMARY-TYPE SGT-LOGIC-MACROS-LOGIC-EXCEPTION)
  :VOID)

;;; (DEFCLASS PROPOSITION-ERROR ...)

(CL:DEFCLASS PROPOSITION-ERROR (LOGIC-EXCEPTION)
  ())

(CL:DEFUN NEW-PROPOSITION-ERROR ()
  (CL:LET*
   ((SELF NULL))
   (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE PROPOSITION-ERROR)))
   (CL:RETURN-FROM NEW-PROPOSITION-ERROR SELF))
  :VOID)

(CL:DEFMETHOD PRIMARY-TYPE ((SELF PROPOSITION-ERROR))
  (CL:RETURN-FROM PRIMARY-TYPE SGT-LOGIC-MACROS-PROPOSITION-ERROR)
  :VOID)

;;; (DEFCLASS PARSING-ERROR ...)

(CL:DEFCLASS PARSING-ERROR (LOGIC-EXCEPTION)
  ())

(CL:DEFUN NEW-PARSING-ERROR ()
  (CL:LET*
   ((SELF NULL))
   (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE PARSING-ERROR)))
   (CL:RETURN-FROM NEW-PARSING-ERROR SELF))
  :VOID)

(CL:DEFMETHOD PRIMARY-TYPE ((SELF PARSING-ERROR))
  (CL:RETURN-FROM PRIMARY-TYPE SGT-LOGIC-MACROS-PARSING-ERROR)
  :VOID)

;;; (DEFCLASS CLASH ...)

(CL:DEFCLASS CLASH (LOGIC-EXCEPTION)
  ())

(CL:DEFUN NEW-CLASH ()
  (CL:LET*
   ((SELF NULL))
   (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE CLASH)))
   (CL:RETURN-FROM NEW-CLASH SELF))
  :VOID)

(CL:DEFMETHOD PRIMARY-TYPE ((SELF CLASH))
  (CL:RETURN-FROM PRIMARY-TYPE SGT-LOGIC-MACROS-CLASH)
  :VOID)

;;; (DEFCLASS FAIL ...)

(CL:DEFCLASS FAIL (LOGIC-EXCEPTION)
  ())

(CL:DEFUN NEW-FAIL ()
  (CL:LET*
   ((SELF NULL))
   (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE FAIL)))
   (CL:RETURN-FROM NEW-FAIL SELF))
  :VOID)

(CL:DEFMETHOD PRIMARY-TYPE ((SELF FAIL))
  (CL:RETURN-FROM PRIMARY-TYPE SGT-LOGIC-MACROS-FAIL)
  :VOID)

;;; (DEFCLASS QUERY-THREAD-LIMIT-VIOLATION ...)

(CL:DEFCLASS QUERY-THREAD-LIMIT-VIOLATION (LOGIC-EXCEPTION)
  ())

(CL:DEFUN NEW-QUERY-THREAD-LIMIT-VIOLATION ()
  (CL:LET*
   ((SELF NULL))
   (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE QUERY-THREAD-LIMIT-VIOLATION)))
   (CL:RETURN-FROM NEW-QUERY-THREAD-LIMIT-VIOLATION SELF))
  :VOID)

(CL:DEFMETHOD PRIMARY-TYPE ((SELF QUERY-THREAD-LIMIT-VIOLATION))
  (CL:RETURN-FROM PRIMARY-TYPE SGT-LOGIC-MACROS-QUERY-THREAD-LIMIT-VIOLATION)
  :VOID)

;;; (DEFGLOBAL *THE-PROPOSITION-ERROR* ...)

(CL:DEFVAR *THE-PROPOSITION-ERROR* NULL)

;;; (DEFGLOBAL *THE-PARSING-ERROR* ...)

(CL:DEFVAR *THE-PARSING-ERROR* NULL)

;;; (DEFGLOBAL *THE-CLASH-EXCEPTION* ...)

(CL:DEFVAR *THE-CLASH-EXCEPTION* NULL)

;;; (DEFGLOBAL *THE-FAIL-EXCEPTION* ...)

(CL:DEFVAR *THE-FAIL-EXCEPTION* NULL)

;;; (DEFGLOBAL *THE-QUERY-THREAD-LIMIT-VIOLATION* ...)

(CL:DEFVAR *THE-QUERY-THREAD-LIMIT-VIOLATION* NULL)

;;; (DEFMACRO SIGNAL-PARSING-ERROR ...)

(CL:DEFUN SIGNAL-PARSING-ERROR-EXPANDER (BODY)
  (CL:RETURN-FROM
   SIGNAL-PARSING-ERROR-EXPANDER
   (LIST*
    SYM-LOGIC-MACROS-SPECIAL
    (CONS
     (LIST* SYM-LOGIC-MACROS-*PRINTREADABLY?* SYM-LOGIC-MACROS-TRUE NIL)
     NIL)
    (LIST*
     SYM-LOGIC-MACROS-INFORM
     (WRAP-LITERAL "PARSING ERROR: ")
     (CONCATENATE BODY (LIST* (WRAP-LITERAL ".") SYM-LOGIC-MACROS-EOL NIL)))
    (LIST* SYM-LOGIC-MACROS-SIGNAL SYM-LOGIC-MACROS-*THE-PARSING-ERROR* NIL)
    NIL))
  :VOID)

;;; (DEFMACRO SIGNAL-PROPOSITION-ERROR ...)

(CL:DEFUN SIGNAL-PROPOSITION-ERROR-EXPANDER (MESSAGE)
  (CL:RETURN-FROM
   SIGNAL-PROPOSITION-ERROR-EXPANDER
   (LIST*
    SYM-LOGIC-MACROS-SPECIAL
    (CONS
     (LIST* SYM-LOGIC-MACROS-*PRINTREADABLY?* SYM-LOGIC-MACROS-TRUE NIL)
     NIL)
    (LIST*
     SYM-LOGIC-MACROS-PRINT
     (WRAP-LITERAL "Error in logical expression.")
     SYM-LOGIC-MACROS-EOL
     NIL)
    (LIST*
     SYM-LOGIC-MACROS-PRINT
     (WRAP-LITERAL "   ")
     (CONCATENATE MESSAGE (CONS SYM-LOGIC-MACROS-EOL NIL)))
    (LIST*
     SYM-LOGIC-MACROS-PRINT
     (WRAP-LITERAL "   Error occured while parsing the proposition: ")
     SYM-LOGIC-MACROS-EOL
     NIL)
    (LIST*
     SYM-LOGIC-MACROS-PRINT
     (WRAP-LITERAL "   ")
     SYM-LOGIC-MACROS-*PROPOSITIONUNDERCONSTRUCTION*
     SYM-LOGIC-MACROS-EOL
     NIL)
    (LIST*
     SYM-LOGIC-MACROS-SIGNAL
     SYM-LOGIC-MACROS-*THE-PROPOSITION-ERROR*
     NIL)
    NIL))
  :VOID)

;;; (DEFMACRO SIGNAL-PROPOSITION-WARNING ...)

(CL:DEFUN SIGNAL-PROPOSITION-WARNING-EXPANDER (MESSAGE)
  (CL:RETURN-FROM
   SIGNAL-PROPOSITION-WARNING-EXPANDER
   (LIST*
    SYM-LOGIC-MACROS-SPECIAL
    (CONS
     (LIST* SYM-LOGIC-MACROS-*PRINTREADABLY?* SYM-LOGIC-MACROS-TRUE NIL)
     NIL)
    (CONS SYM-LOGIC-MACROS-WARN (CONCATENATE MESSAGE NIL))
    NIL))
  :VOID)

;;; (DEFMACRO MOVE-IN-PLACE ...)

(CL:DEFUN MOVE-IN-PLACE-EXPANDER ()
  (CL:RETURN-FROM
   MOVE-IN-PLACE-EXPANDER
   (LIST*
    SYM-LOGIC-MACROS-SETQ
    SYM-LOGIC-MACROS-LASTMOVE
    KWD-LOGIC-MACROS-DOWN
    NIL))
  :VOID)

;;; (DEFMACRO MOVE-FORWARD ...)

(CL:DEFUN MOVE-FORWARD-EXPANDER ()
  (CL:RETURN-FROM
   MOVE-FORWARD-EXPANDER
   (LIST*
    SYM-LOGIC-MACROS-LET
    (LIST*
     (LIST* SYM-LOGIC-MACROS-BACKFRAME SYM-LOGIC-MACROS-FRAME NIL)
     (LIST*
      SYM-LOGIC-MACROS-UPFRAME
      (LIST* SYM-LOGIC-MACROS-UP SYM-LOGIC-MACROS-BACKFRAME NIL)
      NIL)
     NIL)
    (LIST*
     SYM-LOGIC-MACROS-SETQ
     SYM-LOGIC-MACROS-FRAME
     (LIST*
      SYM-LOGIC-MACROS-CREATE-DOWN-FRAME
      SYM-LOGIC-MACROS-UPFRAME
      (LIST* SYM-LOGIC-MACROS-PROPOSITION SYM-LOGIC-MACROS-BACKFRAME NIL)
      NIL)
     NIL)
    (LIST*
     SYM-LOGIC-MACROS-SETF
     (LIST* SYM-LOGIC-MACROS-BACK SYM-LOGIC-MACROS-FRAME NIL)
     SYM-LOGIC-MACROS-BACKFRAME
     NIL)
    (LIST*
     SYM-LOGIC-MACROS-SETF
     (LIST* SYM-LOGIC-MACROS-STATE SYM-LOGIC-MACROS-FRAME NIL)
     KWD-LOGIC-MACROS-AND
     NIL)
    (LIST*
     SYM-LOGIC-MACROS-SETF
     (LIST* SYM-LOGIC-MACROS-ARGUMENT-CURSOR SYM-LOGIC-MACROS-FRAME NIL)
     (LIST*
      SYM-LOGIC-MACROS-1+
      (LIST* SYM-LOGIC-MACROS-ARGUMENT-CURSOR SYM-LOGIC-MACROS-BACKFRAME NIL)
      NIL)
     NIL)
    NIL))
  :VOID)

;;; (DEFMACRO MOVE-BACKWARD ...)

(CL:DEFUN MOVE-BACKWARD-EXPANDER ()
  (CL:RETURN-FROM
   MOVE-BACKWARD-EXPANDER
   (LIST*
    SYM-LOGIC-MACROS-LET
    (CONS
     (LIST* SYM-LOGIC-MACROS-FORWARDFRAME SYM-LOGIC-MACROS-FRAME NIL)
     NIL)
    (LIST*
     SYM-LOGIC-MACROS-SETQ
     SYM-LOGIC-MACROS-FRAME
     (LIST* SYM-LOGIC-MACROS-BACK SYM-LOGIC-MACROS-FRAME NIL)
     NIL)
    (LIST*
     SYM-LOGIC-MACROS-SETQ
     SYM-LOGIC-MACROS-PROPOSITION
     (LIST* SYM-LOGIC-MACROS-PROPOSITION SYM-LOGIC-MACROS-FRAME NIL)
     NIL)
    (LIST*
     SYM-LOGIC-MACROS-SETF
     (LIST* SYM-LOGIC-MACROS-BACK SYM-LOGIC-MACROS-FORWARDFRAME NIL)
     SYM-LOGIC-MACROS-NULL
     NIL)
    (LIST*
     SYM-LOGIC-MACROS-SETF
     (LIST*
      SYM-LOGIC-MACROS-DOWN
      (LIST* SYM-LOGIC-MACROS-UP SYM-LOGIC-MACROS-FORWARDFRAME NIL)
      NIL)
     SYM-LOGIC-MACROS-FRAME
     NIL)
    (LIST*
     SYM-LOGIC-MACROS-POP-CONTROL-FRAME
     SYM-LOGIC-MACROS-QUERYENVIRONMENT
     NIL)
    NIL))
  :VOID)

;;; (DEFMACRO MOVE-DOWN ...)

(CL:DEFUN MOVE-DOWN-EXPANDER ()
  (CL:RETURN-FROM
   MOVE-DOWN-EXPANDER
   (LIST*
    SYM-LOGIC-MACROS-PROGN
    (LIST*
     SYM-LOGIC-MACROS-SETQ
     SYM-LOGIC-MACROS-DEPTH
     (LIST* SYM-LOGIC-MACROS-1+ SYM-LOGIC-MACROS-DEPTH NIL)
     NIL)
    (LIST*
     SYM-LOGIC-MACROS-COND
     (LIST*
      (LIST*
       SYM-LOGIC-MACROS->
       SYM-LOGIC-MACROS-DEPTH
       (LIST*
        SYM-LOGIC-MACROS-CURRENT-DEPTH-CUTOFF
        SYM-LOGIC-MACROS-QUERYENVIRONMENT
        NIL)
       NIL)
      (LIST*
       SYM-LOGIC-MACROS-WHEN
       (LIST*
        SYM-LOGIC-MACROS-DEFINED?
        (LIST* SYM-LOGIC-MACROS-DOWN SYM-LOGIC-MACROS-FRAME NIL)
        NIL)
       (LIST*
        SYM-LOGIC-MACROS-POP-FRAMES-DOWN-TO
        (LIST* SYM-LOGIC-MACROS-DOWN SYM-LOGIC-MACROS-FRAME NIL)
        NIL)
       NIL)
      (LIST*
       SYM-LOGIC-MACROS-SETQ
       SYM-LOGIC-MACROS-DEPTH
       (LIST* SYM-LOGIC-MACROS-1- SYM-LOGIC-MACROS-DEPTH NIL)
       NIL)
      (LIST*
       SYM-LOGIC-MACROS-MV-SETQ
       (LIST* SYM-LOGIC-MACROS-FRAME SYM-LOGIC-MACROS-DEPTH NIL)
       (LIST*
        SYM-LOGIC-MACROS-HANDLE-DEPTH-VIOLATION
        SYM-LOGIC-MACROS-FRAME
        SYM-LOGIC-MACROS-DEPTH
        NIL)
       NIL)
      (LIST*
       SYM-LOGIC-MACROS-SETQ
       SYM-LOGIC-MACROS-PROPOSITION
       (LIST* SYM-LOGIC-MACROS-PROPOSITION SYM-LOGIC-MACROS-FRAME NIL)
       NIL)
      (LIST*
       SYM-LOGIC-MACROS-SETQ
       SYM-LOGIC-MACROS-LASTMOVE
       KWD-LOGIC-MACROS-UP-FAIL
       NIL)
      NIL)
     (LIST*
      (LIST*
       SYM-LOGIC-MACROS-DEFINED?
       (LIST* SYM-LOGIC-MACROS-DOWN SYM-LOGIC-MACROS-FRAME NIL)
       NIL)
      (LIST*
       SYM-LOGIC-MACROS-SETQ
       SYM-LOGIC-MACROS-FRAME
       (LIST* SYM-LOGIC-MACROS-DOWN SYM-LOGIC-MACROS-FRAME NIL)
       NIL)
      (LIST*
       SYM-LOGIC-MACROS-SETQ
       SYM-LOGIC-MACROS-PROPOSITION
       (LIST* SYM-LOGIC-MACROS-PROPOSITION SYM-LOGIC-MACROS-FRAME NIL)
       NIL)
      (LIST*
       SYM-LOGIC-MACROS-SETQ
       SYM-LOGIC-MACROS-LASTMOVE
       KWD-LOGIC-MACROS-DOWN
       NIL)
      NIL)
     (LIST*
      SYM-LOGIC-MACROS-OTHERWISE
      (LIST*
       SYM-LOGIC-MACROS-LET
       (CONS (LIST* SYM-LOGIC-MACROS-UPFRAME SYM-LOGIC-MACROS-FRAME NIL) NIL)
       (LIST*
        SYM-LOGIC-MACROS-SETQ
        SYM-LOGIC-MACROS-PROPOSITION
        (LIST*
         SYM-LOGIC-MACROS-NTH
         (LIST* SYM-LOGIC-MACROS-ARGUMENTS SYM-LOGIC-MACROS-PROPOSITION NIL)
         (LIST* SYM-LOGIC-MACROS-ARGUMENT-CURSOR SYM-LOGIC-MACROS-UPFRAME NIL)
         NIL)
        NIL)
       (LIST*
        SYM-LOGIC-MACROS-SETQ
        SYM-LOGIC-MACROS-FRAME
        (LIST*
         SYM-LOGIC-MACROS-CREATE-DOWN-FRAME
         SYM-LOGIC-MACROS-UPFRAME
         SYM-LOGIC-MACROS-PROPOSITION
         NIL)
        NIL)
       (LIST*
        SYM-LOGIC-MACROS-SETF
        (LIST* SYM-LOGIC-MACROS-DEBUG-DEPTH SYM-LOGIC-MACROS-FRAME NIL)
        SYM-LOGIC-MACROS-DEPTH
        NIL)
       (LIST*
        SYM-LOGIC-MACROS-SETQ
        SYM-LOGIC-MACROS-LASTMOVE
        KWD-LOGIC-MACROS-DOWN
        NIL)
       NIL)
      NIL)
     NIL)
    NIL))
  :VOID)

;;; (DEFMACRO MOVE-DOWN-TO-FUNCTION ...)

(CL:DEFUN MOVE-DOWN-TO-FUNCTION-EXPANDER ()
  (CL:RETURN-FROM
   MOVE-DOWN-TO-FUNCTION-EXPANDER
   (LIST*
    SYM-LOGIC-MACROS-PROGN
    (LIST*
     SYM-LOGIC-MACROS-SETQ
     SYM-LOGIC-MACROS-DEPTH
     (LIST* SYM-LOGIC-MACROS-1+ SYM-LOGIC-MACROS-DEPTH NIL)
     NIL)
    (LIST*
     SYM-LOGIC-MACROS-IF
     (LIST*
      SYM-LOGIC-MACROS->=
      SYM-LOGIC-MACROS-DEPTH
      (LIST*
       SYM-LOGIC-MACROS-CURRENT-DEPTH-CUTOFF
       SYM-LOGIC-MACROS-QUERYENVIRONMENT
       NIL)
      NIL)
     (LIST*
      SYM-LOGIC-MACROS-PROGN
      (LIST*
       SYM-LOGIC-MACROS-SETQ
       SYM-LOGIC-MACROS-DEPTH
       (LIST* SYM-LOGIC-MACROS-1- SYM-LOGIC-MACROS-DEPTH NIL)
       NIL)
      (LIST*
       SYM-LOGIC-MACROS-MV-SETQ
       (LIST* SYM-LOGIC-MACROS-FRAME SYM-LOGIC-MACROS-DEPTH NIL)
       (LIST*
        SYM-LOGIC-MACROS-HANDLE-DEPTH-VIOLATION
        SYM-LOGIC-MACROS-FRAME
        SYM-LOGIC-MACROS-DEPTH
        NIL)
       NIL)
      (LIST*
       SYM-LOGIC-MACROS-SETQ
       SYM-LOGIC-MACROS-PROPOSITION
       (LIST* SYM-LOGIC-MACROS-PROPOSITION SYM-LOGIC-MACROS-FRAME NIL)
       NIL)
      (LIST*
       SYM-LOGIC-MACROS-SETQ
       SYM-LOGIC-MACROS-LASTMOVE
       KWD-LOGIC-MACROS-UP-FAIL
       NIL)
      NIL)
     (LIST*
      SYM-LOGIC-MACROS-LET
      (CONS (LIST* SYM-LOGIC-MACROS-UPFRAME SYM-LOGIC-MACROS-FRAME NIL) NIL)
      (LIST*
       SYM-LOGIC-MACROS-SETQ
       SYM-LOGIC-MACROS-FRAME
       (LIST*
        SYM-LOGIC-MACROS-CREATE-DOWN-FRAME
        SYM-LOGIC-MACROS-UPFRAME
        (LIST*
         SYM-LOGIC-MACROS-DEFINING-PROPOSITION
         (LIST*
          SYM-LOGIC-MACROS-CAST
          (LIST*
           SYM-LOGIC-MACROS-NTH
           (LIST* SYM-LOGIC-MACROS-ARGUMENTS SYM-LOGIC-MACROS-PROPOSITION NIL)
           (LIST*
            SYM-LOGIC-MACROS-ARGUMENT-CURSOR
            SYM-LOGIC-MACROS-UPFRAME
            NIL)
           NIL)
          SYM-LOGIC-MACROS-PATTERN-VARIABLE
          NIL)
         NIL)
        NIL)
       NIL)
      (LIST*
       SYM-LOGIC-MACROS-SETF
       (LIST* SYM-LOGIC-MACROS-DEBUG-DEPTH SYM-LOGIC-MACROS-FRAME NIL)
       SYM-LOGIC-MACROS-DEPTH
       NIL)
      (LIST*
       SYM-LOGIC-MACROS-SETQ
       SYM-LOGIC-MACROS-LASTMOVE
       KWD-LOGIC-MACROS-DOWN
       NIL)
      NIL)
     NIL)
    NIL))
  :VOID)

;;; (DEFMACRO MOVE-UP ...)

(CL:DEFUN MOVE-UP-EXPANDER (SUCCESS? KEEPFRAME?)
  (CL:LET*
   ((LASTMOVE NULL))
   (CL:COND
    ((CL:EQ SUCCESS? SYM-LOGIC-MACROS-TRUE)
     (CL:SETQ LASTMOVE KWD-LOGIC-MACROS-UP-TRUE))
    ((CL:EQ SUCCESS? SYM-LOGIC-MACROS-FAIL)
     (CL:SETQ LASTMOVE KWD-LOGIC-MACROS-UP-FAIL))
    (CL:T (CL:ERROR "`~A' is not a valid case option" SUCCESS?)))
   (CL:RETURN-FROM
    MOVE-UP-EXPANDER
    (LIST*
     SYM-LOGIC-MACROS-PROGN
     (LIST*
      SYM-LOGIC-MACROS-UPDATE-GOAL-CACHE
      SYM-LOGIC-MACROS-FRAME
      (CL:IF
       (CL:EQ SUCCESS? SYM-LOGIC-MACROS-TRUE)
       SYM-LOGIC-MACROS-TRUE
       SYM-LOGIC-MACROS-FALSE)
      NIL)
     (LIST*
      SYM-LOGIC-MACROS-SETQ
      SYM-LOGIC-MACROS-DEPTH
      (LIST* SYM-LOGIC-MACROS-1- SYM-LOGIC-MACROS-DEPTH NIL)
      NIL)
     (LIST*
      SYM-LOGIC-MACROS-SETQ
      SYM-LOGIC-MACROS-FRAME
      (LIST* SYM-LOGIC-MACROS-UP SYM-LOGIC-MACROS-FRAME NIL)
      NIL)
     (LIST*
      SYM-LOGIC-MACROS-SETQ
      SYM-LOGIC-MACROS-PROPOSITION
      (LIST* SYM-LOGIC-MACROS-PROPOSITION SYM-LOGIC-MACROS-FRAME NIL)
      NIL)
     (CONCATENATE
      (CL:IF
       (CL:EQ KEEPFRAME? SYM-LOGIC-MACROS-KEEP-FRAME)
       NIL
       (LIST*
        (LIST*
         SYM-LOGIC-MACROS-POP-CONTROL-FRAME
         SYM-LOGIC-MACROS-QUERYENVIRONMENT
         NIL)
        (LIST*
         SYM-LOGIC-MACROS-SAFETY
         (WRAP-LITERAL 3)
         (LIST*
          SYM-LOGIC-MACROS-NULL?
          (LIST*
           SYM-LOGIC-MACROS-DOWN
           (LIST* SYM-LOGIC-MACROS-DOWN SYM-LOGIC-MACROS-FRAME NIL)
           NIL)
          NIL)
         (WRAP-LITERAL "INTERNAL ERROR: Forgot to pop frame ")
         (WRAP-LITERAL "below top frame.")
         NIL)
        (LIST*
         SYM-LOGIC-MACROS-SETF
         (LIST* SYM-LOGIC-MACROS-DOWN SYM-LOGIC-MACROS-FRAME NIL)
         SYM-LOGIC-MACROS-NULL
         NIL)
        NIL))
      (CONS
       (LIST* SYM-LOGIC-MACROS-SETQ SYM-LOGIC-MACROS-LASTMOVE LASTMOVE NIL)
       NIL)))))
  :VOID)

;;; (DEFMACRO MOVE-UP-OR-EXIT ...)

(CL:DEFUN MOVE-UP-OR-EXIT-EXPANDER (SUCCESS? KEEPFRAME?)
  (CL:LET*
   ((LASTMOVE NULL))
   (CL:COND
    ((CL:EQ SUCCESS? SYM-LOGIC-MACROS-TRUE)
     (CL:SETQ LASTMOVE KWD-LOGIC-MACROS-UP-TRUE))
    ((CL:EQ SUCCESS? SYM-LOGIC-MACROS-FAIL)
     (CL:SETQ LASTMOVE KWD-LOGIC-MACROS-UP-FAIL)
     (CL:SETQ SUCCESS? SYM-LOGIC-MACROS-FALSE))
    (CL:T (CL:ERROR "`~A' is not a valid case option" SUCCESS?)))
   (CL:RETURN-FROM
    MOVE-UP-OR-EXIT-EXPANDER
    (LIST*
     SYM-LOGIC-MACROS-PROGN
     (LIST*
      SYM-LOGIC-MACROS-WHEN
      (LIST*
       SYM-LOGIC-MACROS-DEFINED?
       (LIST* SYM-LOGIC-MACROS-UP SYM-LOGIC-MACROS-FRAME NIL)
       NIL)
      (LIST*
       SYM-LOGIC-MACROS-UPDATE-GOAL-CACHE
       SYM-LOGIC-MACROS-FRAME
       (CL:IF
        (CL:EQ SUCCESS? SYM-LOGIC-MACROS-TRUE)
        SYM-LOGIC-MACROS-TRUE
        SYM-LOGIC-MACROS-FALSE)
       NIL)
      NIL)
     (LIST*
      SYM-LOGIC-MACROS-SETQ
      SYM-LOGIC-MACROS-DEPTH
      (LIST* SYM-LOGIC-MACROS-1- SYM-LOGIC-MACROS-DEPTH NIL)
      NIL)
     (LIST*
      SYM-LOGIC-MACROS-SETQ
      SYM-LOGIC-MACROS-FRAME
      (LIST* SYM-LOGIC-MACROS-UP SYM-LOGIC-MACROS-FRAME NIL)
      NIL)
     (LIST*
      SYM-LOGIC-MACROS-WHEN
      (LIST* SYM-LOGIC-MACROS-NULL? SYM-LOGIC-MACROS-FRAME NIL)
      (LIST* SYM-LOGIC-MACROS-RETURN SUCCESS? NIL)
      NIL)
     (CONCATENATE
      (CL:IF
       (CL:EQ KEEPFRAME? SYM-LOGIC-MACROS-KEEP-FRAME)
       NIL
       (LIST*
        (LIST*
         SYM-LOGIC-MACROS-POP-CONTROL-FRAME
         SYM-LOGIC-MACROS-QUERYENVIRONMENT
         NIL)
        (LIST*
         SYM-LOGIC-MACROS-WHEN
         (LIST* SYM-LOGIC-MACROS-DEFINED? SYM-LOGIC-MACROS-FRAME NIL)
         (LIST*
          SYM-LOGIC-MACROS-SAFETY
          (WRAP-LITERAL 3)
          (LIST*
           SYM-LOGIC-MACROS-NULL?
           (LIST*
            SYM-LOGIC-MACROS-DOWN
            (LIST* SYM-LOGIC-MACROS-DOWN SYM-LOGIC-MACROS-FRAME NIL)
            NIL)
           NIL)
          (WRAP-LITERAL "INTERNAL ERROR: Forgot to pop frame ")
          (WRAP-LITERAL "below top frame.")
          NIL)
         (LIST*
          SYM-LOGIC-MACROS-SETF
          (LIST* SYM-LOGIC-MACROS-DOWN SYM-LOGIC-MACROS-FRAME NIL)
          SYM-LOGIC-MACROS-NULL
          NIL)
         NIL)
        NIL))
      (LIST*
       (LIST*
        SYM-LOGIC-MACROS-SETQ
        SYM-LOGIC-MACROS-PROPOSITION
        (LIST* SYM-LOGIC-MACROS-PROPOSITION SYM-LOGIC-MACROS-FRAME NIL)
        NIL)
       (LIST* SYM-LOGIC-MACROS-SETQ SYM-LOGIC-MACROS-LASTMOVE LASTMOVE NIL)
       SYM-LOGIC-MACROS-LASTMOVE
       NIL)))))
  :VOID)

(CL:DEFUN STARTUP-LOGIC-MACROS ()
  (CL:WHEN
   (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 1) 1)
   (DEFINE-MODULE-FROM-STRINGIFIED-SOURCE
    "/LOGIC"
    "(:CLEARABLE? FALSE :PACKAGE \"STELLA\")"))
  (CL:LET*
   ((*MODULE* (GET-MODULE "/LOGIC" TRUE)) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 2) 1)
    (CL:SETQ
     SGT-LOGIC-MACROS-LOGIC-EXCEPTION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "LOGIC-EXCEPTION" NULL 1))
    (CL:SETQ
     SGT-LOGIC-MACROS-PROPOSITION-ERROR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PROPOSITION-ERROR" NULL 1))
    (CL:SETQ
     SGT-LOGIC-MACROS-PARSING-ERROR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PARSING-ERROR" NULL 1))
    (CL:SETQ
     SGT-LOGIC-MACROS-CLASH
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASH" NULL 1))
    (CL:SETQ
     SGT-LOGIC-MACROS-FAIL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FAIL" NULL 1))
    (CL:SETQ
     SGT-LOGIC-MACROS-QUERY-THREAD-LIMIT-VIOLATION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "QUERY-THREAD-LIMIT-VIOLATION" NULL 1))
    (CL:SETQ
     SYM-LOGIC-MACROS-SPECIAL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SPECIAL" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-*PRINTREADABLY?*
     (INTERN-RIGID-SYMBOL-WRT-MODULE
      "*PRINTREADABLY?*"
      (GET-MODULE "/STELLA" TRUE)
      0))
    (CL:SETQ
     SYM-LOGIC-MACROS-TRUE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "TRUE" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-INFORM
     (INTERN-RIGID-SYMBOL-WRT-MODULE "INFORM" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-EOL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "EOL" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-SIGNAL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SIGNAL" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-*THE-PARSING-ERROR*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "*THE-PARSING-ERROR*" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-SIGNAL-PARSING-ERROR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SIGNAL-PARSING-ERROR" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-SIGNAL-PARSING-ERROR-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SIGNAL-PARSING-ERROR-EXPANDER" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-PRINT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-*PROPOSITIONUNDERCONSTRUCTION*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "*PROPOSITIONUNDERCONSTRUCTION*" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-*THE-PROPOSITION-ERROR*
     (INTERN-RIGID-SYMBOL-WRT-MODULE "*THE-PROPOSITION-ERROR*" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-SIGNAL-PROPOSITION-ERROR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SIGNAL-PROPOSITION-ERROR" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-SIGNAL-PROPOSITION-ERROR-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE
      "SIGNAL-PROPOSITION-ERROR-EXPANDER"
      NULL
      0))
    (CL:SETQ
     SYM-LOGIC-MACROS-WARN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WARN" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-SIGNAL-PROPOSITION-WARNING
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SIGNAL-PROPOSITION-WARNING" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-SIGNAL-PROPOSITION-WARNING-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE
      "SIGNAL-PROPOSITION-WARNING-EXPANDER"
      NULL
      0))
    (CL:SETQ
     SYM-LOGIC-MACROS-SETQ
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SETQ" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-LASTMOVE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "LASTMOVE" NULL 0))
    (CL:SETQ
     KWD-LOGIC-MACROS-DOWN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DOWN" NULL 2))
    (CL:SETQ
     SYM-LOGIC-MACROS-MOVE-IN-PLACE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MOVE-IN-PLACE" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-MOVE-IN-PLACE-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MOVE-IN-PLACE-EXPANDER" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-LET
     (INTERN-RIGID-SYMBOL-WRT-MODULE "LET" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-BACKFRAME
     (INTERN-RIGID-SYMBOL-WRT-MODULE "BACKFRAME" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-FRAME
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FRAME" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-UPFRAME
     (INTERN-RIGID-SYMBOL-WRT-MODULE "UPFRAME" NULL 0))
    (CL:SETQ SYM-LOGIC-MACROS-UP (INTERN-RIGID-SYMBOL-WRT-MODULE "UP" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-CREATE-DOWN-FRAME
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CREATE-DOWN-FRAME" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-PROPOSITION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PROPOSITION" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-SETF
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SETF" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-BACK
     (INTERN-RIGID-SYMBOL-WRT-MODULE "BACK" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-STATE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STATE" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ
     KWD-LOGIC-MACROS-AND
     (INTERN-RIGID-SYMBOL-WRT-MODULE "AND" NULL 2))
    (CL:SETQ
     SYM-LOGIC-MACROS-ARGUMENT-CURSOR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "ARGUMENT-CURSOR" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-1+
     (INTERN-RIGID-SYMBOL-WRT-MODULE "1+" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-MOVE-FORWARD
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MOVE-FORWARD" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-MOVE-FORWARD-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MOVE-FORWARD-EXPANDER" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-FORWARDFRAME
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FORWARDFRAME" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-NULL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-DOWN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DOWN" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-POP-CONTROL-FRAME
     (INTERN-RIGID-SYMBOL-WRT-MODULE "POP-CONTROL-FRAME" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-QUERYENVIRONMENT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "QUERYENVIRONMENT" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-MOVE-BACKWARD
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MOVE-BACKWARD" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-MOVE-BACKWARD-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MOVE-BACKWARD-EXPANDER" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-PROGN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PROGN" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-DEPTH
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DEPTH" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-COND
     (INTERN-RIGID-SYMBOL-WRT-MODULE "COND" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ
     SYM-LOGIC-MACROS->
     (INTERN-RIGID-SYMBOL-WRT-MODULE ">" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-CURRENT-DEPTH-CUTOFF
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CURRENT-DEPTH-CUTOFF" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-WHEN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WHEN" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-DEFINED?
     (INTERN-RIGID-SYMBOL-WRT-MODULE
      "DEFINED?"
      (GET-MODULE "/STELLA" TRUE)
      0))
    (CL:SETQ
     SYM-LOGIC-MACROS-POP-FRAMES-DOWN-TO
     (INTERN-RIGID-SYMBOL-WRT-MODULE "POP-FRAMES-DOWN-TO" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-1-
     (INTERN-RIGID-SYMBOL-WRT-MODULE "1-" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-MV-SETQ
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MV-SETQ" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-HANDLE-DEPTH-VIOLATION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "HANDLE-DEPTH-VIOLATION" NULL 0))
    (CL:SETQ
     KWD-LOGIC-MACROS-UP-FAIL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "UP-FAIL" NULL 2))
    (CL:SETQ
     SYM-LOGIC-MACROS-OTHERWISE
     (INTERN-RIGID-SYMBOL-WRT-MODULE
      "OTHERWISE"
      (GET-MODULE "/STELLA" TRUE)
      0))
    (CL:SETQ
     SYM-LOGIC-MACROS-NTH
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NTH" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-ARGUMENTS
     (INTERN-RIGID-SYMBOL-WRT-MODULE
      "ARGUMENTS"
      (GET-MODULE "/STELLA" TRUE)
      0))
    (CL:SETQ
     SYM-LOGIC-MACROS-DEBUG-DEPTH
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DEBUG-DEPTH" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-MOVE-DOWN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MOVE-DOWN" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-MOVE-DOWN-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MOVE-DOWN-EXPANDER" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-IF
     (INTERN-RIGID-SYMBOL-WRT-MODULE "IF" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ
     SYM-LOGIC-MACROS->=
     (INTERN-RIGID-SYMBOL-WRT-MODULE ">=" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-DEFINING-PROPOSITION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFINING-PROPOSITION" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-CAST
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CAST" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-PATTERN-VARIABLE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PATTERN-VARIABLE" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-MOVE-DOWN-TO-FUNCTION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MOVE-DOWN-TO-FUNCTION" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-MOVE-DOWN-TO-FUNCTION-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MOVE-DOWN-TO-FUNCTION-EXPANDER" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-FAIL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FAIL" NULL 0))
    (CL:SETQ
     KWD-LOGIC-MACROS-UP-TRUE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "UP-TRUE" NULL 2))
    (CL:SETQ
     SYM-LOGIC-MACROS-UPDATE-GOAL-CACHE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "UPDATE-GOAL-CACHE" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-FALSE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FALSE" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-KEEP-FRAME
     (INTERN-RIGID-SYMBOL-WRT-MODULE "KEEP-FRAME" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-SAFETY
     (INTERN-RIGID-SYMBOL-WRT-MODULE "SAFETY" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-NULL?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL?" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-MOVE-UP
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MOVE-UP" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-MOVE-UP-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MOVE-UP-EXPANDER" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-RETURN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "RETURN" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-MOVE-UP-OR-EXIT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MOVE-UP-OR-EXIT" NULL 0))
    (CL:SETQ
     SYM-LOGIC-MACROS-MOVE-UP-OR-EXIT-EXPANDER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MOVE-UP-OR-EXIT-EXPANDER" NULL 0)))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 4) 1)
    (CL:SETQ *THE-PROPOSITION-ERROR* (NEW-PROPOSITION-ERROR))
    (CL:SETQ *THE-PARSING-ERROR* (NEW-PARSING-ERROR))
    (CL:SETQ *THE-CLASH-EXCEPTION* (NEW-CLASH))
    (CL:SETQ *THE-FAIL-EXCEPTION* (NEW-FAIL))
    (CL:SETQ
     *THE-QUERY-THREAD-LIMIT-VIOLATION*
     (NEW-QUERY-THREAD-LIMIT-VIOLATION)))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 5) 1)
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE
        "LOGIC-EXCEPTION"
        "(DEFCLASS LOGIC-EXCEPTION (EXCEPTION))")))
     (CL:SETF
      (CLSYS-SVAL CLASS CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-LOGIC-EXCEPTION)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE
        "PROPOSITION-ERROR"
        "(DEFCLASS PROPOSITION-ERROR (LOGIC-EXCEPTION))")))
     (CL:SETF
      (CLSYS-SVAL CLASS CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-PROPOSITION-ERROR)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE
        "PARSING-ERROR"
        "(DEFCLASS PARSING-ERROR (LOGIC-EXCEPTION))")))
     (CL:SETF
      (CLSYS-SVAL CLASS CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-PARSING-ERROR)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE
        "CLASH"
        "(DEFCLASS CLASH (LOGIC-EXCEPTION))")))
     (CL:SETF
      (CLSYS-SVAL CLASS CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-CLASH)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE
        "FAIL"
        "(DEFCLASS FAIL (LOGIC-EXCEPTION))")))
     (CL:SETF
      (CLSYS-SVAL CLASS CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-FAIL)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE
        "QUERY-THREAD-LIMIT-VIOLATION"
        "(DEFCLASS QUERY-THREAD-LIMIT-VIOLATION (LOGIC-EXCEPTION))")))
     (CL:SETF
      (CLSYS-SVAL CLASS CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-QUERY-THREAD-LIMIT-VIOLATION))))
   (CL:WHEN (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 6) 1) (FINALIZE-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 7) 1)
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SIGNAL-PARSING-ERROR-EXPANDER"
        "CONS"
        "(DEFUN (SIGNAL-PARSING-ERROR-EXPANDER OBJECT) (|&BODY| (BODY CONS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SIGNAL-PARSING-ERROR-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SIGNAL-PROPOSITION-ERROR-EXPANDER"
        "CONS"
        "(DEFUN (SIGNAL-PROPOSITION-ERROR-EXPANDER OBJECT) (|&BODY| (MESSAGE CONS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SIGNAL-PROPOSITION-ERROR-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "SIGNAL-PROPOSITION-WARNING-EXPANDER"
        "CONS"
        "(DEFUN (SIGNAL-PROPOSITION-WARNING-EXPANDER OBJECT) (|&BODY| (MESSAGE CONS)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION SIGNAL-PROPOSITION-WARNING-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "MOVE-IN-PLACE-EXPANDER"
        NULL
        "(DEFUN (MOVE-IN-PLACE-EXPANDER OBJECT) ())")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION MOVE-IN-PLACE-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "MOVE-FORWARD-EXPANDER"
        NULL
        "(DEFUN (MOVE-FORWARD-EXPANDER OBJECT) ())")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION MOVE-FORWARD-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "MOVE-BACKWARD-EXPANDER"
        NULL
        "(DEFUN (MOVE-BACKWARD-EXPANDER OBJECT) ())")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION MOVE-BACKWARD-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "MOVE-DOWN-EXPANDER"
        NULL
        "(DEFUN (MOVE-DOWN-EXPANDER OBJECT) ())")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION MOVE-DOWN-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "MOVE-DOWN-TO-FUNCTION-EXPANDER"
        NULL
        "(DEFUN (MOVE-DOWN-TO-FUNCTION-EXPANDER OBJECT) ())")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION MOVE-DOWN-TO-FUNCTION-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "MOVE-UP-EXPANDER"
        "SYMBOL"
        "(DEFUN (MOVE-UP-EXPANDER OBJECT) ((SUCCESS? SYMBOL) (KEEPFRAME? SYMBOL)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION MOVE-UP-EXPANDER)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "MOVE-UP-OR-EXIT-EXPANDER"
        "SYMBOL"
        "(DEFUN (MOVE-UP-OR-EXIT-EXPANDER OBJECT) ((SUCCESS? SYMBOL) (KEEPFRAME? SYMBOL)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION MOVE-UP-OR-EXIT-EXPANDER)))
    (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
     "STARTUP-LOGIC-MACROS"
     NULL
     "(DEFUN STARTUP-LOGIC-MACROS ())"))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 8) 1)
    (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 9) 1)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *THE-PROPOSITION-ERROR* PROPOSITION-ERROR (NEW PROPOSITION-ERROR))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *THE-PARSING-ERROR* PARSING-ERROR (NEW PARSING-ERROR))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *THE-CLASH-EXCEPTION* CLASH (NEW CLASH))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *THE-FAIL-EXCEPTION* FAIL (NEW FAIL))")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *THE-QUERY-THREAD-LIMIT-VIOLATION* QUERY-THREAD-LIMIT-VIOLATION (NEW QUERY-THREAD-LIMIT-VIOLATION))")
    (STORE-MACRO
     SYM-LOGIC-MACROS-SIGNAL-PARSING-ERROR
     SYM-LOGIC-MACROS-SIGNAL-PARSING-ERROR-EXPANDER
     (CL:FUNCTION SIGNAL-PARSING-ERROR-EXPANDER))
    (STORE-MACRO
     SYM-LOGIC-MACROS-SIGNAL-PROPOSITION-ERROR
     SYM-LOGIC-MACROS-SIGNAL-PROPOSITION-ERROR-EXPANDER
     (CL:FUNCTION SIGNAL-PROPOSITION-ERROR-EXPANDER))
    (STORE-MACRO
     SYM-LOGIC-MACROS-SIGNAL-PROPOSITION-WARNING
     SYM-LOGIC-MACROS-SIGNAL-PROPOSITION-WARNING-EXPANDER
     (CL:FUNCTION SIGNAL-PROPOSITION-WARNING-EXPANDER))
    (STORE-MACRO
     SYM-LOGIC-MACROS-MOVE-IN-PLACE
     SYM-LOGIC-MACROS-MOVE-IN-PLACE-EXPANDER
     (CL:FUNCTION MOVE-IN-PLACE-EXPANDER))
    (STORE-MACRO
     SYM-LOGIC-MACROS-MOVE-FORWARD
     SYM-LOGIC-MACROS-MOVE-FORWARD-EXPANDER
     (CL:FUNCTION MOVE-FORWARD-EXPANDER))
    (STORE-MACRO
     SYM-LOGIC-MACROS-MOVE-BACKWARD
     SYM-LOGIC-MACROS-MOVE-BACKWARD-EXPANDER
     (CL:FUNCTION MOVE-BACKWARD-EXPANDER))
    (STORE-MACRO
     SYM-LOGIC-MACROS-MOVE-DOWN
     SYM-LOGIC-MACROS-MOVE-DOWN-EXPANDER
     (CL:FUNCTION MOVE-DOWN-EXPANDER))
    (STORE-MACRO
     SYM-LOGIC-MACROS-MOVE-DOWN-TO-FUNCTION
     SYM-LOGIC-MACROS-MOVE-DOWN-TO-FUNCTION-EXPANDER
     (CL:FUNCTION MOVE-DOWN-TO-FUNCTION-EXPANDER))
    (STORE-MACRO
     SYM-LOGIC-MACROS-MOVE-UP
     SYM-LOGIC-MACROS-MOVE-UP-EXPANDER
     (CL:FUNCTION MOVE-UP-EXPANDER))
    (STORE-MACRO
     SYM-LOGIC-MACROS-MOVE-UP-OR-EXIT
     SYM-LOGIC-MACROS-MOVE-UP-OR-EXIT-EXPANDER
     (CL:FUNCTION MOVE-UP-OR-EXIT-EXPANDER))))
  :VOID)
