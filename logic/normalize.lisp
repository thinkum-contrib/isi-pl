;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

#|--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1997                   | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied "AS IS",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR KWD-NORMALIZE-AND NULL)
(CL:DEFVAR SGT-NORMALIZE-PROPOSITION NULL)
(CL:DEFVAR KWD-NORMALIZE-CONSTANT NULL)
(CL:DEFVAR SGT-NORMALIZE-TRUE NULL)
(CL:DEFVAR SYM-NORMALIZE-CONSTANT NULL)
(CL:DEFVAR SYM-NORMALIZE-AND NULL)
(CL:DEFVAR KWD-NORMALIZE-OR NULL)
(CL:DEFVAR SYM-NORMALIZE-OR NULL)
(CL:DEFVAR SYM-NORMALIZE-IO-VARIABLES NULL)
(CL:DEFVAR KWD-NORMALIZE-EXISTS NULL)
(CL:DEFVAR SGT-NORMALIZE-PATTERN-VARIABLE NULL)
(CL:DEFVAR KWD-NORMALIZE-NOT NULL)
(CL:DEFVAR KWD-NORMALIZE-FUNCTION NULL)
(CL:DEFVAR KWD-NORMALIZE-IN NULL)
(CL:DEFVAR KWD-NORMALIZE-EQUIVALENT NULL)
(CL:DEFVAR KWD-NORMALIZE-PREDICATE NULL)
(CL:DEFVAR SGT-NORMALIZE-FALSE NULL)
(CL:DEFVAR SYM-NORMALIZE-EXISTS NULL)
(CL:DEFVAR KWD-NORMALIZE-FORALL NULL)
(CL:DEFVAR KWD-NORMALIZE-IMPLIES NULL)
(CL:DEFVAR SYM-NORMALIZE-NOT NULL)
(CL:DEFVAR SGT-NORMALIZE-NOT NULL)
(CL:DEFVAR SGT-NORMALIZE-FORALL NULL)
(CL:DEFVAR SGT-NORMALIZE-EXISTS NULL)
(CL:DEFVAR SGT-NORMALIZE-SURROGATE NULL)
(CL:DEFVAR SGT-NORMALIZE-DESCRIPTION NULL)
(CL:DEFVAR SGT-NORMALIZE-OR NULL)
(CL:DEFVAR SGT-NORMALIZE-AND NULL)
(CL:DEFVAR KWD-NORMALIZE-DESCRIPTION NULL)

;;; Forward declarations:

(CL:DECLAIM (CL:SPECIAL *MODULE* FALSE-PROPOSITION TRUE-PROPOSITION))

;;; (DEFUN COLLECT-FLAT-CONJUNCTS ...)

(CL:DEFUN COLLECT-FLAT-CONJUNCTS (SELF FLATCONJUNCTS)
  (CL:LET*
   ((TEST-VALUE-001 (CLSYS-SVAL PROPOSITION KIND SELF)))
   (CL:COND
    ((CL:EQ TEST-VALUE-001 KWD-NORMALIZE-AND)
     (CL:LET*
      ((ARG NULL)
       (VECTOR-001 (CLSYS-SVAL PROPOSITION ARGUMENTS SELF))
       (INDEX-001 0)
       (LENGTH-001 (LENGTH VECTOR-001)))
      (CL:LOOP
       WHILE
       (CL:< INDEX-001 LENGTH-001)
       DO
       (CL:PROGN
        (CL:SETQ
         ARG
         (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY VECTOR-001) INDEX-001))
        (CL:SETQ INDEX-001 (CL:1+ INDEX-001)))
       (COLLECT-FLAT-CONJUNCTS
        (CAST ARG SGT-NORMALIZE-PROPOSITION)
        FLATCONJUNCTS)))
     (FREE SELF))
    ((CL:EQ TEST-VALUE-001 KWD-NORMALIZE-CONSTANT)
     (CL:WHEN
      (CL:NOT
       (CL:EQ (CLSYS-SVAL PROPOSITION OPERATOR SELF) SGT-NORMALIZE-TRUE))
      (PUSH FLATCONJUNCTS SELF)))
    (CL:T
     (PUSH FLATCONJUNCTS SELF)
     (CLEAR (CLSYS-SVAL PROPOSITION DEPENDENT-PROPOSITIONS SELF)))))
  :VOID)

;;; (DEFUN OVERLAY-WITH-CONSTANT-PROPOSITION ...)

(CL:DEFUN OVERLAY-WITH-CONSTANT-PROPOSITION (SELF CONSTANTPROPOSITION)
  (CL:LET*
   ((OVERLAY (CREATE-PROPOSITION SYM-NORMALIZE-CONSTANT 0)))
   (CL:SETF
    (CLSYS-SVAL PROPOSITION OPERATOR OVERLAY)
    (CLSYS-SVAL PROPOSITION OPERATOR CONSTANTPROPOSITION))
   (CL:LET*
    ((OBJECT-001 OVERLAY)
     (VALUE-001
      (ACCESS-IN-CONTEXT
       (CLSYS-SVAL PROPOSITION TRUTH-VALUE CONSTANTPROPOSITION)
       CONSTANTPROPOSITION
       FALSE))
     (OLD-VALUE-002 (CLSYS-SVAL PROPOSITION TRUTH-VALUE OBJECT-001))
     (NEW-VALUE-001
      (UPDATE-IN-CONTEXT OLD-VALUE-002 VALUE-001 OBJECT-001 FALSE)))
    (CL:WHEN
     (CL:EQ (CS-VALUE? OLD-VALUE-002) 0)
     (CL:SETF (CLSYS-SVAL PROPOSITION TRUTH-VALUE OBJECT-001) NEW-VALUE-001)))
   (OVERLAY-PROPOSITION SELF OVERLAY))
  :VOID)

;;; (DEFUN (CONJOIN-PROPOSITIONS PROPOSITION) ...)

(CL:DEFUN CONJOIN-PROPOSITIONS (CONJUNCTS)
  (CL:LET*
   ((FLATCONJUNCTS (NEW-LIST)) (RESULT NULL))
   (CL:LET*
    ((C NULL) (ITER-001 CONJUNCTS))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ
       C
       (CAST (CLSYS-SVAL CONS VALUE ITER-001) SGT-NORMALIZE-PROPOSITION))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (COLLECT-FLAT-CONJUNCTS C FLATCONJUNCTS)))
   (REVERSE FLATCONJUNCTS)
   (CL:CASE
    (LENGTH FLATCONJUNCTS)
    (0
     (CL:LET*
      ((PROPOSITION (CREATE-PROPOSITION SYM-NORMALIZE-CONSTANT 0)))
      (OVERLAY-WITH-CONSTANT-PROPOSITION PROPOSITION TRUE-PROPOSITION)
      (CL:RETURN-FROM CONJOIN-PROPOSITIONS PROPOSITION)))
    (1
     (CL:RETURN-FROM
      CONJOIN-PROPOSITIONS
      (CAST (FIRST FLATCONJUNCTS) SGT-NORMALIZE-PROPOSITION)))
    (CL:OTHERWISE NULL))
   (CL:SETQ
    RESULT
    (CREATE-PROPOSITION SYM-NORMALIZE-AND (LENGTH FLATCONJUNCTS)))
   (CL:SETF
    (CLSYS-SVAL PROPOSITION ARGUMENTS RESULT)
    (COPY-LIST-TO-ARGUMENTS-VECTOR FLATCONJUNCTS))
   (CL:LET*
    ((C NULL) (ITER-002 (CLSYS-SVAL LIST THE-CONS-LIST FLATCONJUNCTS)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-002 NIL))
     DO
     (CL:PROGN
      (CL:SETQ C (CLSYS-SVAL CONS VALUE ITER-002))
      (CL:SETQ ITER-002 (CLSYS-SVAL CONS REST ITER-002)))
     (ADD-DEPENDENT-PROPOSITION-LINK C RESULT)))
   (CL:RETURN-FROM CONJOIN-PROPOSITIONS RESULT))
  :VOID)

;;; (DEFUN COLLECT-FLAT-DISJUNCTS ...)

(CL:DEFUN COLLECT-FLAT-DISJUNCTS (SELF FLATDISJUNCTS)
  (CL:LET*
   ((TEST-VALUE-001 (CLSYS-SVAL PROPOSITION KIND SELF)))
   (CL:COND
    ((CL:EQ TEST-VALUE-001 KWD-NORMALIZE-OR)
     (CL:LET*
      ((ARG NULL)
       (VECTOR-001 (CLSYS-SVAL PROPOSITION ARGUMENTS SELF))
       (INDEX-001 0)
       (LENGTH-001 (LENGTH VECTOR-001)))
      (CL:LOOP
       WHILE
       (CL:< INDEX-001 LENGTH-001)
       DO
       (CL:PROGN
        (CL:SETQ
         ARG
         (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY VECTOR-001) INDEX-001))
        (CL:SETQ INDEX-001 (CL:1+ INDEX-001)))
       (COLLECT-FLAT-DISJUNCTS
        (CAST ARG SGT-NORMALIZE-PROPOSITION)
        FLATDISJUNCTS)))
     (FREE SELF))
    (CL:T
     (PUSH FLATDISJUNCTS SELF)
     (CLEAR (CLSYS-SVAL PROPOSITION DEPENDENT-PROPOSITIONS SELF)))))
  :VOID)

;;; (DEFUN (DISJOIN-PROPOSITIONS PROPOSITION) ...)

(CL:DEFUN DISJOIN-PROPOSITIONS (DISJUNCTS)
  (CL:LET*
   ((FLATDISJUNCTS (NEW-LIST)) (RESULT NULL))
   (CL:LET*
    ((C NULL) (ITER-001 DISJUNCTS))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ
       C
       (CAST (CLSYS-SVAL CONS VALUE ITER-001) SGT-NORMALIZE-PROPOSITION))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (COLLECT-FLAT-DISJUNCTS C FLATDISJUNCTS)))
   (REVERSE FLATDISJUNCTS)
   (CL:WHEN
    (CL:= (LENGTH FLATDISJUNCTS) 1)
    (CL:RETURN-FROM
     DISJOIN-PROPOSITIONS
     (CAST (FIRST FLATDISJUNCTS) SGT-NORMALIZE-PROPOSITION)))
   (CL:SETQ
    RESULT
    (CREATE-PROPOSITION SYM-NORMALIZE-OR (LENGTH FLATDISJUNCTS)))
   (CL:SETF
    (CLSYS-SVAL PROPOSITION ARGUMENTS RESULT)
    (COPY-LIST-TO-ARGUMENTS-VECTOR FLATDISJUNCTS))
   (CL:LET*
    ((C NULL) (ITER-002 (CLSYS-SVAL LIST THE-CONS-LIST FLATDISJUNCTS)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-002 NIL))
     DO
     (CL:PROGN
      (CL:SETQ C (CLSYS-SVAL CONS VALUE ITER-002))
      (CL:SETQ ITER-002 (CLSYS-SVAL CONS REST ITER-002)))
     (ADD-DEPENDENT-PROPOSITION-LINK C RESULT)))
   (CL:RETURN-FROM DISJOIN-PROPOSITIONS RESULT))
  :VOID)

;;; (DEFUN OVERLAY-PROPOSITION ...)

(CL:DEFUN OVERLAY-PROPOSITION (SELF OVERLAYINGPROP)
  (CL:SETF
   (CLSYS-SVAL PROPOSITION KIND SELF)
   (CLSYS-SVAL PROPOSITION KIND OVERLAYINGPROP))
  (CL:SETF
   (CLSYS-SVAL PROPOSITION OPERATOR SELF)
   (CLSYS-SVAL PROPOSITION OPERATOR OVERLAYINGPROP))
  (CL:LET*
   ((OBJECT-001 SELF)
    (VALUE-001
     (ACCESS-IN-CONTEXT
      (CLSYS-SVAL PROPOSITION TRUTH-VALUE OVERLAYINGPROP)
      OVERLAYINGPROP
      FALSE))
    (OLD-VALUE-002 (CLSYS-SVAL PROPOSITION TRUTH-VALUE OBJECT-001))
    (NEW-VALUE-001
     (UPDATE-IN-CONTEXT OLD-VALUE-002 VALUE-001 OBJECT-001 FALSE)))
   (CL:WHEN
    (CL:EQ (CS-VALUE? OLD-VALUE-002) 0)
    (CL:SETF (CLSYS-SVAL PROPOSITION TRUTH-VALUE OBJECT-001) NEW-VALUE-001)))
  (FREE (CLSYS-SVAL PROPOSITION ARGUMENTS SELF))
  (CL:SETF
   (CLSYS-SVAL PROPOSITION ARGUMENTS SELF)
   (CLSYS-SVAL PROPOSITION ARGUMENTS OVERLAYINGPROP))
  (CL:LET*
   ((ARG NULL)
    (VECTOR-001 (CLSYS-SVAL PROPOSITION ARGUMENTS SELF))
    (INDEX-001 0)
    (LENGTH-001 (LENGTH VECTOR-001)))
   (CL:LOOP
    WHILE
    (CL:< INDEX-001 LENGTH-001)
    DO
    (CL:PROGN
     (CL:SETQ
      ARG
      (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY VECTOR-001) INDEX-001))
     (CL:SETQ INDEX-001 (CL:1+ INDEX-001)))
    (REMOVE-DEPENDENT-PROPOSITION-LINK ARG OVERLAYINGPROP)
    (ADD-DEPENDENT-PROPOSITION-LINK ARG SELF)))
  (CL:WHEN
   (CL:NOT
    (CL:EQ
     (DYNAMIC-SLOT-VALUE OVERLAYINGPROP SYM-NORMALIZE-IO-VARIABLES NULL)
     NULL))
   (SET-DYNAMIC-SLOT-VALUE
    SELF
    SYM-NORMALIZE-IO-VARIABLES
    (DYNAMIC-SLOT-VALUE OVERLAYINGPROP SYM-NORMALIZE-IO-VARIABLES NULL)
    NULL))
  (FREE OVERLAYINGPROP)
  :VOID)

;;; (DEFUN NORMALIZE-EXISTS-PROPOSITION ...)

(CL:DEFUN NORMALIZE-EXISTS-PROPOSITION (SELF)
  (CL:LET*
   ((WHEREPROPOSITION
     (CAST
      (CL:AREF
       (CLSYS-SVAL VECTOR THE-ARRAY (CLSYS-SVAL PROPOSITION ARGUMENTS SELF))
       0)
      SGT-NORMALIZE-PROPOSITION)))
   (NORMALIZE-PROPOSITION WHEREPROPOSITION)
   (CL:WHEN
    (CL:EQ
     (CLSYS-SVAL PROPOSITION KIND WHEREPROPOSITION)
     KWD-NORMALIZE-EXISTS)
    (CL:LET*
     ((COMBINEDARGS NIL)
      (SUBWHEREPROPOSITION
       (FIRST (CLSYS-SVAL PROPOSITION ARGUMENTS WHEREPROPOSITION))))
     (CL:LET*
      ((VBL NULL)
       (VECTOR-001 (DYNAMIC-SLOT-VALUE SELF SYM-NORMALIZE-IO-VARIABLES NULL))
       (INDEX-001 0)
       (LENGTH-001 (LENGTH VECTOR-001))
       (COLLECT-001 NULL))
      (CL:LOOP
       WHILE
       (CL:< INDEX-001 LENGTH-001)
       DO
       (CL:PROGN
        (CL:SETQ
         VBL
         (CAST
          (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY VECTOR-001) INDEX-001)
          SGT-NORMALIZE-PATTERN-VARIABLE))
        (CL:SETQ INDEX-001 (CL:1+ INDEX-001)))
       (CL:IF
        (CL:EQ COLLECT-001 NULL)
        (CL:PROGN
         (CL:SETQ COLLECT-001 (CONS VBL NIL))
         (CL:IF
          (CL:EQ COMBINEDARGS NIL)
          (CL:SETQ COMBINEDARGS COLLECT-001)
          (ADD-CONS-TO-END-OF-CONS-LIST COMBINEDARGS COLLECT-001)))
        (CL:PROGN
         (CL:SETF (CLSYS-SVAL CONS REST COLLECT-001) (CONS VBL NIL))
         (CL:SETQ COLLECT-001 (CLSYS-SVAL CONS REST COLLECT-001))))))
     (CL:LET*
      ((VBL NULL)
       (VECTOR-002
        (DYNAMIC-SLOT-VALUE WHEREPROPOSITION SYM-NORMALIZE-IO-VARIABLES NULL))
       (INDEX-002 0)
       (LENGTH-002 (LENGTH VECTOR-002))
       (COLLECT-002 NULL))
      (CL:LOOP
       WHILE
       (CL:< INDEX-002 LENGTH-002)
       DO
       (CL:PROGN
        (CL:SETQ
         VBL
         (CAST
          (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY VECTOR-002) INDEX-002)
          SGT-NORMALIZE-PATTERN-VARIABLE))
        (CL:SETQ INDEX-002 (CL:1+ INDEX-002)))
       (CL:IF
        (CL:EQ COLLECT-002 NULL)
        (CL:PROGN
         (CL:SETQ COLLECT-002 (CONS VBL NIL))
         (CL:IF
          (CL:EQ COMBINEDARGS NIL)
          (CL:SETQ COMBINEDARGS COLLECT-002)
          (ADD-CONS-TO-END-OF-CONS-LIST COMBINEDARGS COLLECT-002)))
        (CL:PROGN
         (CL:SETF (CLSYS-SVAL CONS REST COLLECT-002) (CONS VBL NIL))
         (CL:SETQ COLLECT-002 (CLSYS-SVAL CONS REST COLLECT-002))))))
     (FREE (DYNAMIC-SLOT-VALUE SELF SYM-NORMALIZE-IO-VARIABLES NULL))
     (FREE
      (DYNAMIC-SLOT-VALUE WHEREPROPOSITION SYM-NORMALIZE-IO-VARIABLES NULL))
     (SET-DYNAMIC-SLOT-VALUE
      SELF
      SYM-NORMALIZE-IO-VARIABLES
      (COPY-CONS-LIST-TO-VARIABLES-VECTOR COMBINEDARGS)
      NULL)
     (FREE (CLSYS-SVAL PROPOSITION ARGUMENTS SELF))
     (CL:SETF
      (CLSYS-SVAL PROPOSITION ARGUMENTS SELF)
      (CLSYS-SVAL PROPOSITION ARGUMENTS WHEREPROPOSITION))
     (REMOVE-DEPENDENT-PROPOSITION-LINK SUBWHEREPROPOSITION WHEREPROPOSITION)
     (ADD-DEPENDENT-PROPOSITION-LINK SUBWHEREPROPOSITION SELF))))
  :VOID)

;;; (DEFUN (HELP-MIGRATE-GOALS PROPOSITION) ...)

(CL:DEFUN HELP-MIGRATE-GOALS (NEGATEDGOALS ANTECEDENT)
  (CL:LET*
   ((ANTECEDENTGOALS NIL))
   (CL:LET*
    ((TEST-VALUE-001 (CLSYS-SVAL PROPOSITION KIND ANTECEDENT)))
    (CL:COND
     ((CL:EQ TEST-VALUE-001 KWD-NORMALIZE-CONSTANT)
      (CL:WHEN
       (CL:NOT (CL:EQ ANTECEDENT TRUE-PROPOSITION))
       (CL:ERROR
        "Safety violation: INTERNAL ERROR: Unexpected constant antecedent in `forall'.")))
     ((CL:EQ TEST-VALUE-001 KWD-NORMALIZE-AND)
      (CL:LET*
       ((G NULL)
        (VECTOR-001 (CLSYS-SVAL PROPOSITION ARGUMENTS ANTECEDENT))
        (INDEX-001 0)
        (LENGTH-001 (LENGTH VECTOR-001)))
       (CL:LOOP
        WHILE
        (CL:< INDEX-001 LENGTH-001)
        DO
        (CL:PROGN
         (CL:SETQ
          G
          (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY VECTOR-001) INDEX-001))
         (CL:SETQ INDEX-001 (CL:1+ INDEX-001)))
        (CL:SETQ ANTECEDENTGOALS (CONS G ANTECEDENTGOALS))
        (REMOVE-DEPENDENT-PROPOSITION-LINK G ANTECEDENT))))
     (CL:T (CL:SETQ ANTECEDENTGOALS (CONS ANTECEDENT ANTECEDENTGOALS)))))
   (CL:LET*
    ((NG NULL) (ITER-001 (CLSYS-SVAL LIST THE-CONS-LIST NEGATEDGOALS)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ
       NG
       (CAST (CLSYS-SVAL CONS VALUE ITER-001) SGT-NORMALIZE-PROPOSITION))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:LET*
      ((POSITIVEGOAL (FIRST (CLSYS-SVAL PROPOSITION ARGUMENTS NG))))
      (CL:SETQ ANTECEDENTGOALS (CONS POSITIVEGOAL ANTECEDENTGOALS))
      (REMOVE-DEPENDENT-PROPOSITION-LINK POSITIVEGOAL NG))))
   (CL:LET*
    ((NEWANTECEDENT (CONJOIN-PROPOSITIONS ANTECEDENTGOALS)))
    (FREE ANTECEDENTGOALS)
    (CL:RETURN-FROM HELP-MIGRATE-GOALS NEWANTECEDENT)))
  :VOID)

;;; (DEFUN MIGRATE-CONSEQUENT-GOALS-TO-ANTECEDENT ...)

(CL:DEFUN MIGRATE-CONSEQUENT-GOALS-TO-ANTECEDENT (SELF)
  (CL:LET*
   ((ANTECEDENT
     (CAST
      (CL:AREF
       (CLSYS-SVAL VECTOR THE-ARRAY (CLSYS-SVAL PROPOSITION ARGUMENTS SELF))
       0)
      SGT-NORMALIZE-PROPOSITION))
    (CONSEQUENT
     (CAST
      (CL:AREF
       (CLSYS-SVAL VECTOR THE-ARRAY (CLSYS-SVAL PROPOSITION ARGUMENTS SELF))
       1)
      SGT-NORMALIZE-PROPOSITION))
    (TRANSFERRINGGOALS (NEW-LIST)))
   (CL:LET*
    ((I NULL)
     (ARG NULL)
     (VECTOR-001 (CLSYS-SVAL PROPOSITION ARGUMENTS CONSEQUENT))
     (INDEX-001 0)
     (LENGTH-001 (LENGTH VECTOR-001))
     (ITER-001 0))
    (CL:LOOP
     WHILE
     (CL:< INDEX-001 LENGTH-001)
     DO
     (CL:PROGN
      (CL:SETQ
       ARG
       (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY VECTOR-001) INDEX-001))
      (CL:SETQ INDEX-001 (CL:1+ INDEX-001)))
     (CL:PROGN (CL:SETQ I ITER-001) (CL:SETQ ITER-001 (CL:1+ ITER-001)))
     (CL:LET*
      ((CONJUNCT (CAST ARG SGT-NORMALIZE-PROPOSITION)) (GOAL NULL))
      (CL:WHEN
       (CL:EQ (CLSYS-SVAL PROPOSITION KIND CONJUNCT) KWD-NORMALIZE-NOT)
       (CL:SETQ
        GOAL
        (CAST
         (FIRST (CLSYS-SVAL PROPOSITION ARGUMENTS CONJUNCT))
         SGT-NORMALIZE-PROPOSITION))
       (CL:WHEN
        (CL:EQ (CLSYS-SVAL PROPOSITION KIND GOAL) KWD-NORMALIZE-FUNCTION)
        (PUSH TRANSFERRINGGOALS CONJUNCT)
        (REMOVE-DEPENDENT-PROPOSITION-LINK CONJUNCT CONSEQUENT)
        (CL:SETF
         (CL:AREF
          (CLSYS-SVAL
           VECTOR
           THE-ARRAY
           (CLSYS-SVAL PROPOSITION ARGUMENTS CONSEQUENT))
          I)
         FALSE-PROPOSITION))))))
   (CL:WHEN
    (CL:EQ (NON-EMPTY? TRANSFERRINGGOALS) 1)
    (CL:SETQ ANTECEDENT (HELP-MIGRATE-GOALS TRANSFERRINGGOALS ANTECEDENT))
    (CL:SETF
     (CL:AREF
      (CLSYS-SVAL VECTOR THE-ARRAY (CLSYS-SVAL PROPOSITION ARGUMENTS SELF))
      0)
     ANTECEDENT)
    (ADD-DEPENDENT-PROPOSITION-LINK ANTECEDENT SELF))
   (NORMALIZE-PROPOSITION ANTECEDENT)
   (NORMALIZE-PROPOSITION CONSEQUENT))
  :VOID)

;;; (DEFUN NORMALIZE-FORALL-PROPOSITION ...)

(CL:DEFUN NORMALIZE-FORALL-PROPOSITION (SELF)
  (CL:LET*
   ((ANTECEDENT
     (CAST
      (CL:AREF
       (CLSYS-SVAL VECTOR THE-ARRAY (CLSYS-SVAL PROPOSITION ARGUMENTS SELF))
       0)
      SGT-NORMALIZE-PROPOSITION))
    (CONSEQUENT
     (CAST
      (CL:AREF
       (CLSYS-SVAL VECTOR THE-ARRAY (CLSYS-SVAL PROPOSITION ARGUMENTS SELF))
       1)
      SGT-NORMALIZE-PROPOSITION)))
   (NORMALIZE-PROPOSITION ANTECEDENT)
   (NORMALIZE-PROPOSITION CONSEQUENT)
   (CL:WHEN
    (CL:NOT (CL:EQ (CLSYS-SVAL PROPOSITION KIND CONSEQUENT) KWD-NORMALIZE-OR))
    (CL:RETURN-FROM NORMALIZE-FORALL-PROPOSITION))
   (MIGRATE-CONSEQUENT-GOALS-TO-ANTECEDENT SELF))
  :VOID)

;;; (DEFUN NORMALIZE-NOT-PROPOSITION ...)

(CL:DEFUN NORMALIZE-NOT-PROPOSITION (SELF)
  (CL:LET*
   ((PROPOSITION
     (CAST
      (FIRST (CLSYS-SVAL PROPOSITION ARGUMENTS SELF))
      SGT-NORMALIZE-PROPOSITION)))
   (CL:LET*
    ((TEST-VALUE-001 (CLSYS-SVAL PROPOSITION KIND PROPOSITION)))
    (CL:COND
     ((CL:OR
       (CL:EQ TEST-VALUE-001 KWD-NORMALIZE-IN)
       (CL:EQ TEST-VALUE-001 KWD-NORMALIZE-EQUIVALENT)
       (CL:EQ TEST-VALUE-001 KWD-NORMALIZE-PREDICATE)
       (CL:EQ TEST-VALUE-001 KWD-NORMALIZE-FUNCTION))
      (NORMALIZE-PROPOSITION PROPOSITION))
     ((CL:EQ TEST-VALUE-001 KWD-NORMALIZE-CONSTANT)
      (CL:COND
       ((CL:EQ
         (CLSYS-SVAL PROPOSITION OPERATOR PROPOSITION)
         SGT-NORMALIZE-TRUE)
        (OVERLAY-WITH-CONSTANT-PROPOSITION SELF FALSE-PROPOSITION))
       ((CL:EQ
         (CLSYS-SVAL PROPOSITION OPERATOR PROPOSITION)
         SGT-NORMALIZE-FALSE)
        (OVERLAY-WITH-CONSTANT-PROPOSITION SELF TRUE-PROPOSITION))
       (CL:T NULL)))
     (CL:T
      (INVERT-PROPOSITION PROPOSITION)
      (OVERLAY-PROPOSITION SELF PROPOSITION)))))
  :VOID)

;;; (DEFUN NORMALIZE-AND-PROPOSITION ...)

(CL:DEFUN NORMALIZE-AND-PROPOSITION (SELF)
  (CL:LET*
   ((EXISTPROPS NIL) (OTHERPROPS NIL) (CONJOIN? FALSE) (EXISTSVARIABLES NIL))
   (CL:LET*
    ((ARG NULL)
     (VECTOR-001 (CLSYS-SVAL PROPOSITION ARGUMENTS SELF))
     (INDEX-001 0)
     (LENGTH-001 (LENGTH VECTOR-001)))
    (CL:LOOP
     WHILE
     (CL:< INDEX-001 LENGTH-001)
     DO
     (CL:PROGN
      (CL:SETQ
       ARG
       (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY VECTOR-001) INDEX-001))
      (CL:SETQ INDEX-001 (CL:1+ INDEX-001)))
     (CL:LET*
      ((CONJUNCT (CAST ARG SGT-NORMALIZE-PROPOSITION)))
      (NORMALIZE-PROPOSITION CONJUNCT)
      (CL:LET*
       ((TEST-VALUE-001 (CLSYS-SVAL PROPOSITION KIND CONJUNCT)))
       (CL:COND
        ((CL:EQ TEST-VALUE-001 KWD-NORMALIZE-EXISTS)
         (CL:SETQ EXISTPROPS (CONS CONJUNCT EXISTPROPS))
         (CL:SETQ CONJOIN? TRUE))
        ((CL:EQ TEST-VALUE-001 KWD-NORMALIZE-AND)
         (CL:SETQ OTHERPROPS (CONS CONJUNCT OTHERPROPS))
         (CL:SETQ CONJOIN? TRUE))
        ((CL:EQ TEST-VALUE-001 KWD-NORMALIZE-CONSTANT)
         (CL:COND
          ((CL:EQ
            (CLSYS-SVAL PROPOSITION OPERATOR CONJUNCT)
            SGT-NORMALIZE-TRUE)
           (CL:SETQ CONJOIN? TRUE)
           (CL:SETQ OTHERPROPS (CONS CONJUNCT OTHERPROPS)))
          ((CL:EQ
            (CLSYS-SVAL PROPOSITION OPERATOR CONJUNCT)
            SGT-NORMALIZE-FALSE)
           (OVERLAY-WITH-CONSTANT-PROPOSITION SELF FALSE-PROPOSITION)
           (CL:RETURN-FROM NORMALIZE-AND-PROPOSITION))))
        (CL:T (CL:SETQ OTHERPROPS (CONS CONJUNCT OTHERPROPS))))))))
   (CL:LET*
    ((E NULL) (ITER-001 EXISTPROPS))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ
       E
       (CAST (CLSYS-SVAL CONS VALUE ITER-001) SGT-NORMALIZE-PROPOSITION))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:LET*
      ((V NULL)
       (VECTOR-002 (DYNAMIC-SLOT-VALUE E SYM-NORMALIZE-IO-VARIABLES NULL))
       (INDEX-002 0)
       (LENGTH-002 (LENGTH VECTOR-002))
       (COLLECT-001 NULL))
      (CL:LOOP
       WHILE
       (CL:< INDEX-002 LENGTH-002)
       DO
       (CL:PROGN
        (CL:SETQ
         V
         (CAST
          (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY VECTOR-002) INDEX-002)
          SGT-NORMALIZE-PATTERN-VARIABLE))
        (CL:SETQ INDEX-002 (CL:1+ INDEX-002)))
       (CL:IF
        (CL:EQ COLLECT-001 NULL)
        (CL:PROGN
         (CL:SETQ COLLECT-001 (CONS V NIL))
         (CL:IF
          (CL:EQ EXISTSVARIABLES NIL)
          (CL:SETQ EXISTSVARIABLES COLLECT-001)
          (ADD-CONS-TO-END-OF-CONS-LIST EXISTSVARIABLES COLLECT-001)))
        (CL:PROGN
         (CL:SETF (CLSYS-SVAL CONS REST COLLECT-001) (CONS V NIL))
         (CL:SETQ COLLECT-001 (CLSYS-SVAL CONS REST COLLECT-001))))))
     (CL:SETQ
      OTHERPROPS
      (CONS (FIRST (CLSYS-SVAL PROPOSITION ARGUMENTS E)) OTHERPROPS))))
   (CL:WHEN
    (CL:NOT (CL:EQ EXISTSVARIABLES NIL))
    (CL:LET*
     ((EXISTSPROPOSITION (CREATE-PROPOSITION SYM-NORMALIZE-EXISTS 1)))
     (SET-DYNAMIC-SLOT-VALUE
      EXISTSPROPOSITION
      SYM-NORMALIZE-IO-VARIABLES
      (COPY-CONS-LIST-TO-VARIABLES-VECTOR EXISTSVARIABLES)
      NULL)
     (CL:SETF
      (CL:AREF
       (CLSYS-SVAL
        VECTOR
        THE-ARRAY
        (CLSYS-SVAL PROPOSITION ARGUMENTS EXISTSPROPOSITION))
       0)
      (CONJOIN-PROPOSITIONS OTHERPROPS))
     (OVERLAY-PROPOSITION SELF EXISTSPROPOSITION))
    (FREE-CONS-LIST EXISTSVARIABLES)
    (FREE-CONS-LIST EXISTPROPS)
    (FREE-CONS-LIST OTHERPROPS)
    (CL:RETURN-FROM NORMALIZE-AND-PROPOSITION))
   (CL:WHEN
    (CL:EQ CONJOIN? 1)
    (OVERLAY-PROPOSITION SELF (CONJOIN-PROPOSITIONS OTHERPROPS)))
   (FREE-CONS-LIST OTHERPROPS))
  :VOID)

;;; (DEFUN NORMALIZE-OR-PROPOSITION ...)

(CL:DEFUN NORMALIZE-OR-PROPOSITION (SELF)
  (CL:LET*
   ((PROPOSITIONS NIL) (DISJOIN? FALSE))
   (CL:LET*
    ((ARG NULL)
     (VECTOR-001 (CLSYS-SVAL PROPOSITION ARGUMENTS SELF))
     (INDEX-001 0)
     (LENGTH-001 (LENGTH VECTOR-001)))
    (CL:LOOP
     WHILE
     (CL:< INDEX-001 LENGTH-001)
     DO
     (CL:PROGN
      (CL:SETQ
       ARG
       (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY VECTOR-001) INDEX-001))
      (CL:SETQ INDEX-001 (CL:1+ INDEX-001)))
     (CL:LET*
      ((DISJUNCT (CAST ARG SGT-NORMALIZE-PROPOSITION)))
      (NORMALIZE-PROPOSITION DISJUNCT)
      (CL:LET*
       ((TEST-VALUE-001 (CLSYS-SVAL PROPOSITION KIND DISJUNCT)))
       (CL:COND
        ((CL:EQ TEST-VALUE-001 KWD-NORMALIZE-OR)
         (CL:SETQ PROPOSITIONS (CONS DISJUNCT PROPOSITIONS))
         (CL:SETQ DISJOIN? TRUE))
        ((CL:EQ TEST-VALUE-001 KWD-NORMALIZE-CONSTANT)
         (CL:COND
          ((CL:EQ
            (CLSYS-SVAL PROPOSITION OPERATOR DISJUNCT)
            SGT-NORMALIZE-FALSE)
           (CL:SETQ DISJOIN? TRUE))
          ((CL:EQ
            (CLSYS-SVAL PROPOSITION OPERATOR DISJUNCT)
            SGT-NORMALIZE-TRUE)
           (OVERLAY-WITH-CONSTANT-PROPOSITION SELF TRUE-PROPOSITION)
           (CL:RETURN-FROM NORMALIZE-OR-PROPOSITION))
          (CL:T (CL:SETQ PROPOSITIONS (CONS DISJUNCT PROPOSITIONS)))))
        (CL:T (CL:SETQ PROPOSITIONS (CONS DISJUNCT PROPOSITIONS))))))))
   (CL:WHEN
    (CL:EQ DISJOIN? 1)
    (OVERLAY-PROPOSITION SELF (DISJOIN-PROPOSITIONS PROPOSITIONS)))
   (FREE-CONS-LIST PROPOSITIONS))
  :VOID)

;;; (DEFUN NORMALIZE-PROPOSITION ...)

(CL:DEFUN NORMALIZE-PROPOSITION (SELF)
  (CL:LET*
   ((TEST-VALUE-001 (CLSYS-SVAL PROPOSITION KIND SELF)))
   (CL:COND
    ((CL:EQ TEST-VALUE-001 KWD-NORMALIZE-AND)
     (NORMALIZE-AND-PROPOSITION SELF))
    ((CL:EQ TEST-VALUE-001 KWD-NORMALIZE-OR) (NORMALIZE-OR-PROPOSITION SELF))
    ((CL:EQ TEST-VALUE-001 KWD-NORMALIZE-NOT)
     (NORMALIZE-NOT-PROPOSITION SELF))
    ((CL:OR
      (CL:EQ TEST-VALUE-001 KWD-NORMALIZE-FUNCTION)
      (CL:EQ TEST-VALUE-001 KWD-NORMALIZE-PREDICATE)
      (CL:EQ TEST-VALUE-001 KWD-NORMALIZE-IN))
     (CL:LET*
      ((CLAUSE NULL)
       (VECTOR-001 (CLSYS-SVAL PROPOSITION ARGUMENTS SELF))
       (INDEX-001 0)
       (LENGTH-001 (LENGTH VECTOR-001)))
      (CL:LOOP
       WHILE
       (CL:< INDEX-001 LENGTH-001)
       DO
       (CL:PROGN
        (CL:SETQ
         CLAUSE
         (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY VECTOR-001) INDEX-001))
        (CL:SETQ INDEX-001 (CL:1+ INDEX-001)))
       (CL:WHEN
        (CL:EQ (ISA? CLAUSE SGT-NORMALIZE-PROPOSITION) 1)
        (NORMALIZE-PROPOSITION (CAST CLAUSE SGT-NORMALIZE-PROPOSITION))))))
    ((CL:EQ TEST-VALUE-001 KWD-NORMALIZE-EXISTS)
     (NORMALIZE-EXISTS-PROPOSITION SELF))
    ((CL:EQ TEST-VALUE-001 KWD-NORMALIZE-FORALL)
     (NORMALIZE-FORALL-PROPOSITION SELF))
    ((CL:OR
      (CL:EQ TEST-VALUE-001 KWD-NORMALIZE-EQUIVALENT)
      (CL:EQ TEST-VALUE-001 KWD-NORMALIZE-IMPLIES)
      (CL:EQ TEST-VALUE-001 KWD-NORMALIZE-CONSTANT))
     NULL)
    (CL:T (CL:ERROR "`~A' is not a valid case option" TEST-VALUE-001))))
  :VOID)

;;; (DEFUN INVERT-ATOMIC-PROPOSITION ...)

(CL:DEFUN INVERT-ATOMIC-PROPOSITION (SELF)
  (CL:LET*
   ((NEWATOMICPROPOSITION (CREATE-PROPOSITION SYM-NORMALIZE-NOT 1))
    (NOTARGUMENTS (CLSYS-SVAL PROPOSITION ARGUMENTS NEWATOMICPROPOSITION))
    (NEWNOTPROPOSITION SELF))
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY NOTARGUMENTS) 0)
    NEWATOMICPROPOSITION)
   (CL:SETF
    (CLSYS-SVAL PROPOSITION KIND NEWATOMICPROPOSITION)
    (CLSYS-SVAL PROPOSITION KIND NEWNOTPROPOSITION))
   (CL:SETF (CLSYS-SVAL PROPOSITION KIND NEWNOTPROPOSITION) KWD-NORMALIZE-NOT)
   (CL:SETF
    (CLSYS-SVAL PROPOSITION OPERATOR NEWATOMICPROPOSITION)
    (CLSYS-SVAL PROPOSITION OPERATOR NEWNOTPROPOSITION))
   (CL:SETF
    (CLSYS-SVAL PROPOSITION OPERATOR NEWNOTPROPOSITION)
    SGT-NORMALIZE-NOT)
   (CL:SETF
    (CLSYS-SVAL PROPOSITION ARGUMENTS NEWATOMICPROPOSITION)
    (CLSYS-SVAL PROPOSITION ARGUMENTS NEWNOTPROPOSITION))
   (CL:SETF (CLSYS-SVAL PROPOSITION ARGUMENTS NEWNOTPROPOSITION) NOTARGUMENTS)
   (CL:LET*
    ((ARG NULL)
     (VECTOR-001 (CLSYS-SVAL PROPOSITION ARGUMENTS NEWATOMICPROPOSITION))
     (INDEX-001 0)
     (LENGTH-001 (LENGTH VECTOR-001)))
    (CL:LOOP
     WHILE
     (CL:< INDEX-001 LENGTH-001)
     DO
     (CL:PROGN
      (CL:SETQ
       ARG
       (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY VECTOR-001) INDEX-001))
      (CL:SETQ INDEX-001 (CL:1+ INDEX-001)))
     (REMOVE-DEPENDENT-PROPOSITION-LINK ARG NEWNOTPROPOSITION)
     (ADD-DEPENDENT-PROPOSITION-LINK ARG NEWATOMICPROPOSITION)))
   (ADD-DEPENDENT-PROPOSITION-LINK NEWATOMICPROPOSITION NEWNOTPROPOSITION))
  :VOID)

;;; (DEFUN INVERT-EXISTS-PROPOSITION ...)

(CL:DEFUN INVERT-EXISTS-PROPOSITION (SELF)
  (CL:LET*
   ((WHEREPROPOSITION
     (CAST
      (CL:AREF
       (CLSYS-SVAL VECTOR THE-ARRAY (CLSYS-SVAL PROPOSITION ARGUMENTS SELF))
       0)
      SGT-NORMALIZE-PROPOSITION))
    (NEWARGUMENTS (NEW-VECTOR 2)))
   (FREE (CLSYS-SVAL PROPOSITION ARGUMENTS SELF))
   (NORMALIZE-PROPOSITION WHEREPROPOSITION)
   (INVERT-PROPOSITION WHEREPROPOSITION)
   (CL:SETF (CLSYS-SVAL PROPOSITION KIND SELF) KWD-NORMALIZE-FORALL)
   (CL:SETF (CLSYS-SVAL PROPOSITION OPERATOR SELF) SGT-NORMALIZE-FORALL)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY NEWARGUMENTS) 0)
    TRUE-PROPOSITION)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY NEWARGUMENTS) 1)
    WHEREPROPOSITION)
   (CL:SETF (CLSYS-SVAL PROPOSITION ARGUMENTS SELF) NEWARGUMENTS)
   (NORMALIZE-PROPOSITION SELF))
  :VOID)

;;; (DEFUN INVERT-FORALL-PROPOSITION ...)

(CL:DEFUN INVERT-FORALL-PROPOSITION (SELF)
  (CL:LET*
   ((ANTECEDENT
     (CAST
      (CL:AREF
       (CLSYS-SVAL VECTOR THE-ARRAY (CLSYS-SVAL PROPOSITION ARGUMENTS SELF))
       0)
      SGT-NORMALIZE-PROPOSITION))
    (CONSEQUENT
     (CAST
      (CL:AREF
       (CLSYS-SVAL VECTOR THE-ARRAY (CLSYS-SVAL PROPOSITION ARGUMENTS SELF))
       1)
      SGT-NORMALIZE-PROPOSITION))
    (NEWARGUMENTS (NEW-VECTOR 1)))
   (FREE (CLSYS-SVAL PROPOSITION ARGUMENTS SELF))
   (NORMALIZE-PROPOSITION ANTECEDENT)
   (NORMALIZE-PROPOSITION CONSEQUENT)
   (INVERT-PROPOSITION CONSEQUENT)
   (CL:SETF (CLSYS-SVAL PROPOSITION KIND SELF) KWD-NORMALIZE-EXISTS)
   (CL:SETF (CLSYS-SVAL PROPOSITION OPERATOR SELF) SGT-NORMALIZE-EXISTS)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY NEWARGUMENTS) 0)
    (CONJOIN-TWO-PROPOSITIONS ANTECEDENT CONSEQUENT))
   (CL:SETF (CLSYS-SVAL PROPOSITION ARGUMENTS SELF) NEWARGUMENTS)
   (NORMALIZE-PROPOSITION SELF))
  :VOID)

;;; (DEFUN (EXTRACT-PROPOSITION PROPOSITION) ...)

(CL:DEFUN EXTRACT-PROPOSITION (SELF MAPPING)
  (CL:LET*
   ((PROPOSITION (CLSYS-SVAL DESCRIPTION PROPOSITION SELF))
    (EXISTSPROPOSITION
     (CL:IF
      (CL:EQ (NON-EMPTY? (CLSYS-SVAL DESCRIPTION INTERNAL-VARIABLES SELF)) 1)
      (CREATE-PROPOSITION SYM-NORMALIZE-EXISTS 1)
      NULL)))
   (CL:WHEN
    (CL:NOT (CL:EQ EXISTSPROPOSITION NULL))
    (SET-DYNAMIC-SLOT-VALUE
     EXISTSPROPOSITION
     SYM-NORMALIZE-IO-VARIABLES
     (COPY-VARIABLES-VECTOR
      (CLSYS-SVAL DESCRIPTION INTERNAL-VARIABLES SELF)
      MAPPING)
     NULL))
   (CL:SETQ PROPOSITION (COPY-PROPOSITION PROPOSITION MAPPING))
   (CL:WHEN
    (CL:NOT (CL:EQ EXISTSPROPOSITION NULL))
    (CL:SETF
     (CL:AREF
      (CLSYS-SVAL
       VECTOR
       THE-ARRAY
       (CLSYS-SVAL PROPOSITION ARGUMENTS EXISTSPROPOSITION))
      0)
     PROPOSITION)
    (ADD-DEPENDENT-PROPOSITION-LINK PROPOSITION EXISTSPROPOSITION)
    (CL:SETQ PROPOSITION EXISTSPROPOSITION))
   (CL:RETURN-FROM EXTRACT-PROPOSITION PROPOSITION))
  :VOID)

;;; (DEFUN INVERT-IMPLIES-PROPOSITION ...)

(CL:DEFUN INVERT-IMPLIES-PROPOSITION (SELF)
  (CL:LET*
   ((ARGUMENTS (CLSYS-SVAL PROPOSITION ARGUMENTS SELF))
    (SUBSET
     (CAST
      (CL:IF
       (CL:EQ
        (SURROGATE? (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY ARGUMENTS) 0))
        1)
       (GET-DESCRIPTION
        (CAST
         (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY ARGUMENTS) 0)
         SGT-NORMALIZE-SURROGATE))
       (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY ARGUMENTS) 0))
      SGT-NORMALIZE-DESCRIPTION))
    (SUPERSET
     (CAST
      (CL:IF
       (CL:EQ
        (SURROGATE? (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY ARGUMENTS) 1))
        1)
       (GET-DESCRIPTION
        (CAST
         (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY ARGUMENTS) 1)
         SGT-NORMALIZE-SURROGATE))
       (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY ARGUMENTS) 1))
      SGT-NORMALIZE-DESCRIPTION))
    (SUBSETPROP NULL)
    (SUPERSETPROP NULL)
    (MAPPING (NEW-KEY-VALUE-LIST))
    (NEWARGUMENTS (NEW-VECTOR 1)))
   (CL:SETF (CLSYS-SVAL PROPOSITION KIND SELF) KWD-NORMALIZE-EXISTS)
   (CL:SETF (CLSYS-SVAL PROPOSITION OPERATOR SELF) SGT-NORMALIZE-EXISTS)
   (SET-DYNAMIC-SLOT-VALUE
    SELF
    SYM-NORMALIZE-IO-VARIABLES
    (COPY-VARIABLES-VECTOR
     (CLSYS-SVAL DESCRIPTION IO-VARIABLES SUBSET)
     MAPPING)
    NULL)
   (CL:LET*
    ((SUPVAR NULL)
     (IOVAR NULL)
     (VECTOR-001 (DYNAMIC-SLOT-VALUE SELF SYM-NORMALIZE-IO-VARIABLES NULL))
     (INDEX-001 0)
     (LENGTH-001 (LENGTH VECTOR-001))
     (VECTOR-002 (CLSYS-SVAL DESCRIPTION IO-VARIABLES SUPERSET))
     (INDEX-002 0)
     (LENGTH-002 (LENGTH VECTOR-002)))
    (CL:LOOP
     WHILE
     (CL:AND (CL:< INDEX-001 LENGTH-001) (CL:< INDEX-002 LENGTH-002))
     DO
     (CL:PROGN
      (CL:SETQ
       IOVAR
       (CAST
        (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY VECTOR-001) INDEX-001)
        SGT-NORMALIZE-PATTERN-VARIABLE))
      (CL:SETQ INDEX-001 (CL:1+ INDEX-001)))
     (CL:PROGN
      (CL:SETQ
       SUPVAR
       (CAST
        (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY VECTOR-002) INDEX-002)
        SGT-NORMALIZE-PATTERN-VARIABLE))
      (CL:SETQ INDEX-002 (CL:1+ INDEX-002)))
     (INSERT-AT MAPPING SUPVAR IOVAR)))
   (CL:SETQ SUBSETPROP (EXTRACT-PROPOSITION SUBSET MAPPING))
   (CL:SETQ SUPERSETPROP (EXTRACT-PROPOSITION SUPERSET MAPPING))
   (INVERT-PROPOSITION SUPERSETPROP)
   (CL:SETF
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY NEWARGUMENTS) 0)
    (CONJOIN-TWO-PROPOSITIONS SUBSETPROP SUPERSETPROP))
   (ADD-DEPENDENT-PROPOSITION-LINK
    (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY NEWARGUMENTS) 0)
    SELF)
   (FREE (CLSYS-SVAL PROPOSITION ARGUMENTS SELF))
   (FREE MAPPING)
   (CL:SETF (CLSYS-SVAL PROPOSITION ARGUMENTS SELF) NEWARGUMENTS)
   (NORMALIZE-PROPOSITION SELF))
  :VOID)

;;; (DEFUN INVERT-PROPOSITION ...)

(CL:DEFUN INVERT-PROPOSITION (SELF)
  (CL:LET*
   ((TEST-VALUE-001 (CLSYS-SVAL PROPOSITION KIND SELF)))
   (CL:COND
    ((CL:OR
      (CL:EQ TEST-VALUE-001 KWD-NORMALIZE-FUNCTION)
      (CL:EQ TEST-VALUE-001 KWD-NORMALIZE-PREDICATE)
      (CL:EQ TEST-VALUE-001 KWD-NORMALIZE-IN)
      (CL:EQ TEST-VALUE-001 KWD-NORMALIZE-EQUIVALENT))
     (INVERT-ATOMIC-PROPOSITION SELF))
    ((CL:EQ TEST-VALUE-001 KWD-NORMALIZE-AND)
     (CL:LET*
      ((ARGUMENTCOUNT (LENGTH (CLSYS-SVAL PROPOSITION ARGUMENTS SELF))))
      (SIMPLIFY-PROPOSITION SELF)
      (CL:WHEN
       (CL:< (LENGTH (CLSYS-SVAL PROPOSITION ARGUMENTS SELF)) ARGUMENTCOUNT)
       (INVERT-PROPOSITION SELF)
       (CL:RETURN-FROM INVERT-PROPOSITION)))
     (CL:SETF (CLSYS-SVAL PROPOSITION KIND SELF) KWD-NORMALIZE-OR)
     (CL:SETF (CLSYS-SVAL PROPOSITION OPERATOR SELF) SGT-NORMALIZE-OR)
     (CL:LET*
      ((ARG NULL)
       (VECTOR-001 (CLSYS-SVAL PROPOSITION ARGUMENTS SELF))
       (INDEX-001 0)
       (LENGTH-001 (LENGTH VECTOR-001)))
      (CL:LOOP
       WHILE
       (CL:< INDEX-001 LENGTH-001)
       DO
       (CL:PROGN
        (CL:SETQ
         ARG
         (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY VECTOR-001) INDEX-001))
        (CL:SETQ INDEX-001 (CL:1+ INDEX-001)))
       (INVERT-PROPOSITION (CAST ARG SGT-NORMALIZE-PROPOSITION)))))
    ((CL:EQ TEST-VALUE-001 KWD-NORMALIZE-OR)
     (CL:SETF (CLSYS-SVAL PROPOSITION KIND SELF) KWD-NORMALIZE-AND)
     (CL:SETF (CLSYS-SVAL PROPOSITION OPERATOR SELF) SGT-NORMALIZE-AND)
     (CL:LET*
      ((ARG NULL)
       (VECTOR-002 (CLSYS-SVAL PROPOSITION ARGUMENTS SELF))
       (INDEX-002 0)
       (LENGTH-002 (LENGTH VECTOR-002)))
      (CL:LOOP
       WHILE
       (CL:< INDEX-002 LENGTH-002)
       DO
       (CL:PROGN
        (CL:SETQ
         ARG
         (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY VECTOR-002) INDEX-002))
        (CL:SETQ INDEX-002 (CL:1+ INDEX-002)))
       (INVERT-PROPOSITION (CAST ARG SGT-NORMALIZE-PROPOSITION)))))
    ((CL:EQ TEST-VALUE-001 KWD-NORMALIZE-NOT)
     (OVERLAY-PROPOSITION
      SELF
      (CAST
       (FIRST (CLSYS-SVAL PROPOSITION ARGUMENTS SELF))
       SGT-NORMALIZE-PROPOSITION)))
    ((CL:EQ TEST-VALUE-001 KWD-NORMALIZE-EXISTS)
     (INVERT-EXISTS-PROPOSITION SELF))
    ((CL:EQ TEST-VALUE-001 KWD-NORMALIZE-FORALL)
     (INVERT-FORALL-PROPOSITION SELF))
    ((CL:EQ TEST-VALUE-001 KWD-NORMALIZE-IMPLIES)
     (INVERT-IMPLIES-PROPOSITION SELF))
    (CL:T (CL:ERROR "`~A' is not a valid case option" TEST-VALUE-001))))
  :VOID)

;;; (DEFUN RECURSIVELY-DEASSIGN-TRUTH-VALUES ...)

(CL:DEFUN RECURSIVELY-DEASSIGN-TRUTH-VALUES (SELF)
  (CL:LET*
   ((OBJECT-001 SELF)
    (VALUE-001 NULL)
    (OLD-VALUE-001 (CLSYS-SVAL PROPOSITION TRUTH-VALUE OBJECT-001))
    (NEW-VALUE-001
     (UPDATE-IN-CONTEXT OLD-VALUE-001 VALUE-001 OBJECT-001 FALSE)))
   (CL:WHEN
    (CL:EQ (CS-VALUE? OLD-VALUE-001) 0)
    (CL:SETF (CLSYS-SVAL PROPOSITION TRUTH-VALUE OBJECT-001) NEW-VALUE-001)))
  (CL:LET*
   ((ARG NULL)
    (VECTOR-001 (CLSYS-SVAL PROPOSITION ARGUMENTS SELF))
    (INDEX-001 0)
    (LENGTH-001 (LENGTH VECTOR-001)))
   (CL:LOOP
    WHILE
    (CL:< INDEX-001 LENGTH-001)
    DO
    (CL:PROGN
     (CL:SETQ
      ARG
      (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY VECTOR-001) INDEX-001))
     (CL:SETQ INDEX-001 (CL:1+ INDEX-001)))
    (CL:WHEN
     (CL:EQ (ISA? ARG SGT-NORMALIZE-PROPOSITION) 1)
     (RECURSIVELY-DEASSIGN-TRUTH-VALUES (CAST ARG SGT-NORMALIZE-PROPOSITION)))))
  :VOID)

;;; (DEFUN REASSIGN-TRUTH-VALUES ...)

(CL:DEFUN REASSIGN-TRUTH-VALUES (SELF)
  (RECURSIVELY-DEASSIGN-TRUTH-VALUES SELF)
  (CL:LET*
   ((*EVALUATIONMODE* KWD-NORMALIZE-DESCRIPTION))
   (CL:DECLARE (CL:SPECIAL *EVALUATIONMODE*))
   (ASSIGN-TRUTH-VALUE SELF TRUE))
  :VOID)

(CL:DEFUN STARTUP-NORMALIZE ()
  (CL:LET*
   ((*MODULE* (GET-MODULE "/LOGIC" TRUE)) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 2) 1)
    (CL:SETQ KWD-NORMALIZE-AND (INTERN-RIGID-SYMBOL-WRT-MODULE "AND" NULL 2))
    (CL:SETQ
     SGT-NORMALIZE-PROPOSITION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PROPOSITION" NULL 1))
    (CL:SETQ
     KWD-NORMALIZE-CONSTANT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CONSTANT" NULL 2))
    (CL:SETQ
     SGT-NORMALIZE-TRUE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "TRUE" (GET-MODULE "/STELLA" TRUE) 1))
    (CL:SETQ
     SYM-NORMALIZE-CONSTANT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CONSTANT" NULL 0))
    (CL:SETQ
     SYM-NORMALIZE-AND
     (INTERN-RIGID-SYMBOL-WRT-MODULE "AND" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ KWD-NORMALIZE-OR (INTERN-RIGID-SYMBOL-WRT-MODULE "OR" NULL 2))
    (CL:SETQ
     SYM-NORMALIZE-OR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "OR" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ
     SYM-NORMALIZE-IO-VARIABLES
     (INTERN-RIGID-SYMBOL-WRT-MODULE "IO-VARIABLES" NULL 0))
    (CL:SETQ
     KWD-NORMALIZE-EXISTS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "EXISTS" NULL 2))
    (CL:SETQ
     SGT-NORMALIZE-PATTERN-VARIABLE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PATTERN-VARIABLE" NULL 1))
    (CL:SETQ KWD-NORMALIZE-NOT (INTERN-RIGID-SYMBOL-WRT-MODULE "NOT" NULL 2))
    (CL:SETQ
     KWD-NORMALIZE-FUNCTION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FUNCTION" NULL 2))
    (CL:SETQ KWD-NORMALIZE-IN (INTERN-RIGID-SYMBOL-WRT-MODULE "IN" NULL 2))
    (CL:SETQ
     KWD-NORMALIZE-EQUIVALENT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "EQUIVALENT" NULL 2))
    (CL:SETQ
     KWD-NORMALIZE-PREDICATE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PREDICATE" NULL 2))
    (CL:SETQ
     SGT-NORMALIZE-FALSE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FALSE" (GET-MODULE "/STELLA" TRUE) 1))
    (CL:SETQ
     SYM-NORMALIZE-EXISTS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "EXISTS" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ
     KWD-NORMALIZE-FORALL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FORALL" NULL 2))
    (CL:SETQ
     KWD-NORMALIZE-IMPLIES
     (INTERN-RIGID-SYMBOL-WRT-MODULE "IMPLIES" NULL 2))
    (CL:SETQ
     SYM-NORMALIZE-NOT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NOT" (GET-MODULE "/STELLA" TRUE) 0))
    (CL:SETQ SGT-NORMALIZE-NOT (INTERN-RIGID-SYMBOL-WRT-MODULE "NOT" NULL 1))
    (CL:SETQ
     SGT-NORMALIZE-FORALL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FORALL" NULL 1))
    (CL:SETQ
     SGT-NORMALIZE-EXISTS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "EXISTS" NULL 1))
    (CL:SETQ
     SGT-NORMALIZE-SURROGATE
     (INTERN-RIGID-SYMBOL-WRT-MODULE
      "SURROGATE"
      (GET-MODULE "/STELLA" TRUE)
      1))
    (CL:SETQ
     SGT-NORMALIZE-DESCRIPTION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DESCRIPTION" NULL 1))
    (CL:SETQ SGT-NORMALIZE-OR (INTERN-RIGID-SYMBOL-WRT-MODULE "OR" NULL 1))
    (CL:SETQ SGT-NORMALIZE-AND (INTERN-RIGID-SYMBOL-WRT-MODULE "AND" NULL 1))
    (CL:SETQ
     KWD-NORMALIZE-DESCRIPTION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DESCRIPTION" NULL 2)))
   (CL:WHEN (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 6) 1) (FINALIZE-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 7) 1)
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "COLLECT-FLAT-CONJUNCTS"
        "PROPOSITION"
        "(DEFUN COLLECT-FLAT-CONJUNCTS ((SELF PROPOSITION) (FLATCONJUNCTS (LIST OF PROPOSITION))))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION COLLECT-FLAT-CONJUNCTS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "OVERLAY-WITH-CONSTANT-PROPOSITION"
        "PROPOSITION"
        "(DEFUN OVERLAY-WITH-CONSTANT-PROPOSITION ((SELF PROPOSITION) (CONSTANTPROPOSITION PROPOSITION)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION OVERLAY-WITH-CONSTANT-PROPOSITION)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CONJOIN-PROPOSITIONS"
        "CONS"
        "(DEFUN (CONJOIN-PROPOSITIONS PROPOSITION) ((CONJUNCTS (CONS OF PROPOSITION))))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CONJOIN-PROPOSITIONS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "COLLECT-FLAT-DISJUNCTS"
        "PROPOSITION"
        "(DEFUN COLLECT-FLAT-DISJUNCTS ((SELF PROPOSITION) (FLATDISJUNCTS (LIST OF PROPOSITION))))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION COLLECT-FLAT-DISJUNCTS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "DISJOIN-PROPOSITIONS"
        "CONS"
        "(DEFUN (DISJOIN-PROPOSITIONS PROPOSITION) ((DISJUNCTS (CONS OF PROPOSITION))))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION DISJOIN-PROPOSITIONS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "OVERLAY-PROPOSITION"
        "PROPOSITION"
        "(DEFUN OVERLAY-PROPOSITION ((SELF PROPOSITION) (OVERLAYINGPROP PROPOSITION)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION OVERLAY-PROPOSITION)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "NORMALIZE-EXISTS-PROPOSITION"
        "PROPOSITION"
        "(DEFUN NORMALIZE-EXISTS-PROPOSITION ((SELF PROPOSITION)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION NORMALIZE-EXISTS-PROPOSITION)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "HELP-MIGRATE-GOALS"
        "LIST"
        "(DEFUN (HELP-MIGRATE-GOALS PROPOSITION) ((NEGATEDGOALS (LIST OF PROPOSITION)) (ANTECEDENT PROPOSITION)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION HELP-MIGRATE-GOALS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "MIGRATE-CONSEQUENT-GOALS-TO-ANTECEDENT"
        "PROPOSITION"
        "(DEFUN MIGRATE-CONSEQUENT-GOALS-TO-ANTECEDENT ((SELF PROPOSITION)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION MIGRATE-CONSEQUENT-GOALS-TO-ANTECEDENT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "NORMALIZE-FORALL-PROPOSITION"
        "PROPOSITION"
        "(DEFUN NORMALIZE-FORALL-PROPOSITION ((SELF PROPOSITION)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION NORMALIZE-FORALL-PROPOSITION)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "NORMALIZE-NOT-PROPOSITION"
        "PROPOSITION"
        "(DEFUN NORMALIZE-NOT-PROPOSITION ((SELF PROPOSITION)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION NORMALIZE-NOT-PROPOSITION)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "NORMALIZE-AND-PROPOSITION"
        "PROPOSITION"
        "(DEFUN NORMALIZE-AND-PROPOSITION ((SELF PROPOSITION)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION NORMALIZE-AND-PROPOSITION)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "NORMALIZE-OR-PROPOSITION"
        "PROPOSITION"
        "(DEFUN NORMALIZE-OR-PROPOSITION ((SELF PROPOSITION)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION NORMALIZE-OR-PROPOSITION)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "NORMALIZE-PROPOSITION"
        "PROPOSITION"
        "(DEFUN NORMALIZE-PROPOSITION ((SELF PROPOSITION)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION NORMALIZE-PROPOSITION)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INVERT-ATOMIC-PROPOSITION"
        "PROPOSITION"
        "(DEFUN INVERT-ATOMIC-PROPOSITION ((SELF PROPOSITION)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INVERT-ATOMIC-PROPOSITION)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INVERT-EXISTS-PROPOSITION"
        "PROPOSITION"
        "(DEFUN INVERT-EXISTS-PROPOSITION ((SELF PROPOSITION)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INVERT-EXISTS-PROPOSITION)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INVERT-FORALL-PROPOSITION"
        "PROPOSITION"
        "(DEFUN INVERT-FORALL-PROPOSITION ((SELF PROPOSITION)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INVERT-FORALL-PROPOSITION)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "EXTRACT-PROPOSITION"
        "DESCRIPTION"
        "(DEFUN (EXTRACT-PROPOSITION PROPOSITION) ((SELF DESCRIPTION) (MAPPING ENTITY-MAPPING)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION EXTRACT-PROPOSITION)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INVERT-IMPLIES-PROPOSITION"
        "PROPOSITION"
        "(DEFUN INVERT-IMPLIES-PROPOSITION ((SELF PROPOSITION)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INVERT-IMPLIES-PROPOSITION)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "INVERT-PROPOSITION"
        "PROPOSITION"
        "(DEFUN INVERT-PROPOSITION ((SELF PROPOSITION)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION INVERT-PROPOSITION)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "RECURSIVELY-DEASSIGN-TRUTH-VALUES"
        "PROPOSITION"
        "(DEFUN RECURSIVELY-DEASSIGN-TRUTH-VALUES ((SELF PROPOSITION)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION RECURSIVELY-DEASSIGN-TRUTH-VALUES)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "REASSIGN-TRUTH-VALUES"
        "PROPOSITION"
        "(DEFUN REASSIGN-TRUTH-VALUES ((SELF PROPOSITION)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION REASSIGN-TRUTH-VALUES)))
    (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
     "STARTUP-NORMALIZE"
     NULL
     "(DEFUN STARTUP-NORMALIZE ())"))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 8) 1)
    (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES)))
  :VOID)
