;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

#|--------------------------------------------------------------------------+
 |                                                                          |
 |  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1997                   | 
 |  University of Southern California, Information Sciences Institute       |
 |  4676 Admiralty Way                                                      |
 |  Marina Del Rey, California 90292                                        |
 |                                                                          |
 |  This software was developed under the terms and conditions of Contract  |
 |  No. N00014-94-C-0245 between the Defense Advanced Research Projects     |
 |  Agency and the University of Southern California, Information Sciences  | 
 |  Institute.  Use and distribution of this software is further subject    |
 |  to the provisions of that contract and any other agreements developed   |
 |  between the user of the software and the University of Southern         |
 |  California, Information Sciences Institute.  It is supplied "AS IS",    |
 |  without any warranties of any kind.  It is furnished only on the basis  |
 |  that any party who receives it indemnifies and holds harmless the       |
 |  parties who furnish and originate it against any claims, demands, or    |
 |  liabilities connected with using it, furnishing it to others or         |
 |  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    |
 |  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  |
 |  BE ATTACHED TO EVERY PART.                                              |
 |                                                                          |
 +--------------------------------------------------------------------------|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SYM-PARTIAL-MATCH-KIND NULL)
(CL:DEFVAR SGT-PARTIAL-MATCH-KEYWORD NULL)
(CL:DEFVAR SYM-PARTIAL-MATCH-ARGUMENT-SCORES NULL)
(CL:DEFVAR SYM-PARTIAL-MATCH-ARGUMENT-WEIGHTS NULL)
(CL:DEFVAR SGT-PARTIAL-MATCH-CONS NULL)
(CL:DEFVAR SGT-PARTIAL-MATCH-NAIVE-PARTIAL-MATCH NULL)
(CL:DEFVAR KWD-PARTIAL-MATCH-AND NULL)
(CL:DEFVAR SGT-PARTIAL-MATCH-FLOAT-WRAPPER NULL)
(CL:DEFVAR SYM-PARTIAL-MATCH-TOTAL-WEIGHT NULL)
(CL:DEFVAR SYM-PARTIAL-MATCH-ACCUMULATED-SCORE NULL)
(CL:DEFVAR SYM-PARTIAL-MATCH-ACCUMULATED-WEIGHT NULL)
(CL:DEFVAR SYM-PARTIAL-MATCH-MAXIMUM-SCORE NULL)
(CL:DEFVAR SGT-PARTIAL-MATCH-INCREMENTAL-PARTIAL-MATCH NULL)
(CL:DEFVAR SGT-PARTIAL-MATCH-PROPOSITION NULL)
(CL:DEFVAR KWD-PARTIAL-MATCH-OR NULL)
(CL:DEFVAR KWD-PARTIAL-MATCH-NOT NULL)

;;; Forward declarations:

(CL:DECLAIM (CL:SPECIAL *MODULE* *QUERYENVIRONMENT* EOL))

;;; (DEFCLASS PARTIAL-MATCH-FRAME ...)

(CL:DEFCLASS PARTIAL-MATCH-FRAME (STANDARD-OBJECT)
  ((KIND :ALLOCATION :INSTANCE :ACCESSOR KIND...OF))
  (:DOCUMENTATION
   "Abstract class acting as placeholder for system and
user-defined partial match implementations."))

(CL:DEFUN ACCESS-PARTIAL-MATCH-FRAME-SLOT-VALUE (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-PARTIAL-MATCH-KIND)
    (CL:IF
     (CL:EQ SETVALUE? 1)
     (CL:SETF
      (CLSYS-SVAL PARTIAL-MATCH-FRAME KIND SELF)
      (CAST VALUE SGT-PARTIAL-MATCH-KEYWORD))
     (CL:RETURN-FROM
      ACCESS-PARTIAL-MATCH-FRAME-SLOT-VALUE
      (CLSYS-SVAL PARTIAL-MATCH-FRAME KIND SELF))))
   (CL:T (CL:ERROR "`~A' is not a valid case option" SLOTNAME)))
  (CL:WHEN
   (CL:EQ SETVALUE? 1)
   (CL:RETURN-FROM ACCESS-PARTIAL-MATCH-FRAME-SLOT-VALUE VALUE))
  :VOID)

;;; (DEFGLOBAL *MINIMUM-SCORE-CUTOFF* ...)

(CL:DEFVAR *MINIMUM-SCORE-CUTOFF* 0.0
  "Positive scores below *minimum-score-cutoff* get trimmed
to 0.0 during partial match operations.")

;;; (DEFGLOBAL *MAXIMUM-SCORE-CUTOFF* ...)

(CL:DEFVAR *MAXIMUM-SCORE-CUTOFF* 0.0
  "Positive scores above *maximum-score-cutoff* get trimmed
to 1.0 during partial match operations.")

;;; (DEFGLOBAL *DEFAULT-MINIMUM-SCORE* ...)

(CL:DEFVAR *DEFAULT-MINIMUM-SCORE* 0.0)

;;; (DEFGLOBAL *DEFAULT-MAXIMUM-SCORE* ...)

(CL:DEFVAR *DEFAULT-MAXIMUM-SCORE* 0.0)

;;; (DEFUN RESET-COMBINATOR-SETTINGS ...)

(CL:DEFUN RESET-COMBINATOR-SETTINGS ()
  "Reset the partial match combinator functions to
the system-defined default settings."
  (CL:SETQ *MINIMUM-SCORE-CUTOFF* *DEFAULT-MINIMUM-SCORE*)
  (CL:SETQ *MAXIMUM-SCORE-CUTOFF* *DEFAULT-MAXIMUM-SCORE*)
  :VOID)

;;; (DEFUN (PROPOSITION-WEIGHT FLOAT) ...)

(CL:DEFUN PROPOSITION-WEIGHT (PROPOSITION)
  (CL:RETURN-FROM PROPOSITION-WEIGHT 1.0)
  :VOID)

;;; (DEFMETHOD (CREATE-PARTIAL-MATCH-FRAME PARTIAL-MATCH-FRAME) ...)

(CL:DEFMETHOD CREATE-PARTIAL-MATCH-FRAME ((SELF PARTIAL-MATCH-FRAME) FRAME KIND)
  (CL:PROGN (CL:SETQ FRAME FRAME) (CL:SETQ KIND KIND))
  (CL:ERROR
   "Missing concrete method named 'create-partial-match-frame' on the~%   class `~A'"
   (PRIMARY-TYPE SELF))
  (CL:RETURN-FROM CREATE-PARTIAL-MATCH-FRAME NULL)
  :VOID)

;;; (DEFMETHOD RECORD-PARTIAL-MATCH-SCORE ...)

(CL:DEFMETHOD RECORD-PARTIAL-MATCH-SCORE ((SELF PARTIAL-MATCH-FRAME) SCORE WEIGHT)
  (CL:PROGN (CL:SETQ SCORE SCORE) (CL:SETQ WEIGHT WEIGHT))
  NULL
  :VOID)

;;; (DEFMETHOD (COMPUTE-AND-SCORE PARTIAL-MATCH-SCORE) ...)

(CL:DEFMETHOD COMPUTE-AND-SCORE ((SELF PARTIAL-MATCH-FRAME))
  (CL:RETURN-FROM COMPUTE-AND-SCORE NULL-FLOAT)
  :VOID)

;;; (DEFMETHOD (COMPUTE-OR-SCORE PARTIAL-MATCH-SCORE) ...)

(CL:DEFMETHOD COMPUTE-OR-SCORE ((SELF PARTIAL-MATCH-FRAME))
  (CL:RETURN-FROM COMPUTE-OR-SCORE NULL-FLOAT)
  :VOID)

;;; (DEFMETHOD (COMPUTE-NOT-SCORE PARTIAL-MATCH-SCORE) ...)

(CL:DEFMETHOD COMPUTE-NOT-SCORE ((SELF PARTIAL-MATCH-FRAME))
  (CL:RETURN-FROM COMPUTE-NOT-SCORE NULL-FLOAT)
  :VOID)

;;; (DEFMETHOD (EARLY-PARTIAL-MATCH-AND-FAILURE? BOOLEAN) ...)

(CL:DEFMETHOD EARLY-PARTIAL-MATCH-AND-FAILURE? ((SELF PARTIAL-MATCH-FRAME))
  (CL:RETURN-FROM EARLY-PARTIAL-MATCH-AND-FAILURE? FALSE)
  :VOID)

;;; (DEFMETHOD (EARLY-PARTIAL-MATCH-OR-SUCCESS? BOOLEAN) ...)

(CL:DEFMETHOD EARLY-PARTIAL-MATCH-OR-SUCCESS? ((SELF PARTIAL-MATCH-FRAME))
  (CL:RETURN-FROM EARLY-PARTIAL-MATCH-OR-SUCCESS? FALSE)
  :VOID)

;;; (DEFMETHOD (CLIP-POSITIVE-SCORE PARTIAL-MATCH-SCORE) ...)

(CL:DEFMETHOD CLIP-POSITIVE-SCORE ((SELF PARTIAL-MATCH-FRAME) SCORE)
  "If 'score' is below the minimum or
above the maximum, make it zero or one."
  (CL:COND
   ((CL:< SCORE *MINIMUM-SCORE-CUTOFF*) (CL:SETQ SCORE 0.0))
   ((CL:> SCORE *MAXIMUM-SCORE-CUTOFF*) (CL:SETQ SCORE 1.0)))
  (CL:RETURN-FROM CLIP-POSITIVE-SCORE SCORE)
  :VOID)

;;; (DEFMETHOD (COMPUTE-RULE-SCORE PARTIAL-MATCH-SCORE) ...)

(CL:DEFMETHOD COMPUTE-RULE-SCORE ((SELF PARTIAL-MATCH-FRAME) ANTECEDENTSCORE RULESCORE)
  "Return a score representing the combination of
'antecedentScore', the score for the match of a rule antecedent, and
'ruleScore', the score assigned to the rule being interpreted."
  (CL:RETURN-FROM
   COMPUTE-RULE-SCORE
   (CL:* ANTECEDENTSCORE (CLSYS-SVAL TRUTH-VALUE POSITIVE-SCORE RULESCORE)))
  :VOID)

;;; (DEFCLASS NAIVE-PARTIAL-MATCH ...)

(CL:DEFCLASS NAIVE-PARTIAL-MATCH (PARTIAL-MATCH-FRAME)
  ((ARGUMENT-SCORES :ALLOCATION :INSTANCE :ACCESSOR ARGUMENT-SCORES...OF)
   (ARGUMENT-WEIGHTS :ALLOCATION :INSTANCE :ACCESSOR ARGUMENT-WEIGHTS...OF)))

(CL:DEFUN NEW-NAIVE-PARTIAL-MATCH ()
  (CL:LET*
   ((SELF NULL))
   (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE NAIVE-PARTIAL-MATCH)))
   (CL:SETF (CLSYS-SVAL NAIVE-PARTIAL-MATCH KIND SELF) NULL)
   (CL:SETF (CLSYS-SVAL NAIVE-PARTIAL-MATCH ARGUMENT-WEIGHTS SELF) NULL)
   (CL:SETF (CLSYS-SVAL NAIVE-PARTIAL-MATCH ARGUMENT-SCORES SELF) NULL)
   (CL:RETURN-FROM NEW-NAIVE-PARTIAL-MATCH SELF))
  :VOID)

(CL:DEFUN ACCESS-NAIVE-PARTIAL-MATCH-SLOT-VALUE (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-PARTIAL-MATCH-ARGUMENT-SCORES)
    (CL:IF
     (CL:EQ SETVALUE? 1)
     (CL:SETF
      (CLSYS-SVAL NAIVE-PARTIAL-MATCH ARGUMENT-SCORES SELF)
      (CAST VALUE SGT-PARTIAL-MATCH-CONS))
     (CL:RETURN-FROM
      ACCESS-NAIVE-PARTIAL-MATCH-SLOT-VALUE
      (CLSYS-SVAL NAIVE-PARTIAL-MATCH ARGUMENT-SCORES SELF))))
   ((CL:EQ SLOTNAME SYM-PARTIAL-MATCH-ARGUMENT-WEIGHTS)
    (CL:IF
     (CL:EQ SETVALUE? 1)
     (CL:SETF
      (CLSYS-SVAL NAIVE-PARTIAL-MATCH ARGUMENT-WEIGHTS SELF)
      (CAST VALUE SGT-PARTIAL-MATCH-CONS))
     (CL:RETURN-FROM
      ACCESS-NAIVE-PARTIAL-MATCH-SLOT-VALUE
      (CLSYS-SVAL NAIVE-PARTIAL-MATCH ARGUMENT-WEIGHTS SELF))))
   (CL:T (CL:ERROR "`~A' is not a valid case option" SLOTNAME)))
  (CL:WHEN
   (CL:EQ SETVALUE? 1)
   (CL:RETURN-FROM ACCESS-NAIVE-PARTIAL-MATCH-SLOT-VALUE VALUE))
  :VOID)

(CL:DEFMETHOD PRIMARY-TYPE ((SELF NAIVE-PARTIAL-MATCH))
  (CL:RETURN-FROM PRIMARY-TYPE SGT-PARTIAL-MATCH-NAIVE-PARTIAL-MATCH)
  :VOID)

;;; (DEFMETHOD (CREATE-PARTIAL-MATCH-FRAME PARTIAL-MATCH-FRAME) ...)

(CL:DEFMETHOD CREATE-PARTIAL-MATCH-FRAME ((SELF NAIVE-PARTIAL-MATCH) FRAME KIND)
  (CL:LET*
   ((PARTIALMATCHFRAME (NEW-NAIVE-PARTIAL-MATCH)))
   (CL:SETF
    (CLSYS-SVAL CONTROL-FRAME PARTIAL-MATCH-FRAME FRAME)
    PARTIALMATCHFRAME)
   (CL:SETF
    (CLSYS-SVAL NAIVE-PARTIAL-MATCH ARGUMENT-SCORES PARTIALMATCHFRAME)
    NIL)
   (CL:SETF
    (CLSYS-SVAL NAIVE-PARTIAL-MATCH ARGUMENT-WEIGHTS PARTIALMATCHFRAME)
    NIL)
   (CL:RETURN-FROM CREATE-PARTIAL-MATCH-FRAME PARTIALMATCHFRAME))
  :VOID)

;;; (DEFMETHOD RECORD-PARTIAL-MATCH-SCORE ...)

(CL:DEFMETHOD RECORD-PARTIAL-MATCH-SCORE ((SELF NAIVE-PARTIAL-MATCH) SCORE WEIGHT)
  (CL:LET*
   ((LISTOFSCORES (CLSYS-SVAL NAIVE-PARTIAL-MATCH ARGUMENT-SCORES SELF)))
   (CL:IF
    (CL:EQ LISTOFSCORES NIL)
    (CL:SETF
     (CLSYS-SVAL NAIVE-PARTIAL-MATCH ARGUMENT-SCORES SELF)
     (CONS (WRAP-LITERAL SCORE) NIL))
    (ADD-CONS-TO-END-OF-CONS-LIST
     LISTOFSCORES
     (CONS (WRAP-LITERAL SCORE) NIL))))
  (CL:WHEN
   (CL:EQ (CLSYS-SVAL NAIVE-PARTIAL-MATCH KIND SELF) KWD-PARTIAL-MATCH-AND)
   (CL:LET*
    ((LISTOFWEIGHTS (CLSYS-SVAL NAIVE-PARTIAL-MATCH ARGUMENT-WEIGHTS SELF)))
    (CL:IF
     (CL:EQ LISTOFWEIGHTS NIL)
     (CL:SETF
      (CLSYS-SVAL NAIVE-PARTIAL-MATCH ARGUMENT-WEIGHTS SELF)
      (CONS (WRAP-LITERAL WEIGHT) NIL))
     (ADD-CONS-TO-END-OF-CONS-LIST
      LISTOFWEIGHTS
      (CONS (WRAP-LITERAL WEIGHT) NIL)))))
  :VOID)

;;; (DEFMETHOD (COMPUTE-AND-SCORE PARTIAL-MATCH-SCORE) ...)

(CL:DEFMETHOD COMPUTE-AND-SCORE ((SELF NAIVE-PARTIAL-MATCH))
  (CL:LET*
   ((WEIGHTEDSUM 0.0) (TOTALWEIGHT 0.0))
   (CL:LET*
    ((W NULL)
     (S NULL)
     (ITER-001 (CLSYS-SVAL NAIVE-PARTIAL-MATCH ARGUMENT-SCORES SELF))
     (ITER-002 (CLSYS-SVAL NAIVE-PARTIAL-MATCH ARGUMENT-WEIGHTS SELF)))
    (CL:LOOP
     WHILE
     (CL:AND (CL:NOT (CL:EQ ITER-001 NIL)) (CL:NOT (CL:EQ ITER-002 NIL)))
     DO
     (CL:PROGN
      (CL:SETQ
       S
       (CAST
        (CLSYS-SVAL CONS VALUE ITER-001)
        SGT-PARTIAL-MATCH-FLOAT-WRAPPER))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:PROGN
      (CL:SETQ
       W
       (CAST
        (CLSYS-SVAL CONS VALUE ITER-002)
        SGT-PARTIAL-MATCH-FLOAT-WRAPPER))
      (CL:SETQ ITER-002 (CLSYS-SVAL CONS REST ITER-002)))
     (CL:SETQ
      WEIGHTEDSUM
      (CL:+
       WEIGHTEDSUM
       (CL:*
        (CLSYS-SVAL FLOAT-WRAPPER WRAPPER-VALUE S)
        (CLSYS-SVAL FLOAT-WRAPPER WRAPPER-VALUE W))))
     (CL:SETQ
      TOTALWEIGHT
      (CL:+ TOTALWEIGHT (CLSYS-SVAL FLOAT-WRAPPER WRAPPER-VALUE W)))))
   (CL:RETURN-FROM COMPUTE-AND-SCORE (CL:/ WEIGHTEDSUM TOTALWEIGHT)))
  :VOID)

;;; (DEFMETHOD (COMPUTE-OR-SCORE PARTIAL-MATCH-SCORE) ...)

(CL:DEFMETHOD COMPUTE-OR-SCORE ((SELF NAIVE-PARTIAL-MATCH))
  (CL:LET*
   ((MAXSCORE 0.0))
   (CL:LET*
    ((S NULL)
     (ITER-001 (CLSYS-SVAL NAIVE-PARTIAL-MATCH ARGUMENT-SCORES SELF)))
    (CL:LOOP
     WHILE
     (CL:NOT (CL:EQ ITER-001 NIL))
     DO
     (CL:PROGN
      (CL:SETQ
       S
       (CAST
        (CLSYS-SVAL CONS VALUE ITER-001)
        SGT-PARTIAL-MATCH-FLOAT-WRAPPER))
      (CL:SETQ ITER-001 (CLSYS-SVAL CONS REST ITER-001)))
     (CL:WHEN
      (CL:> (CLSYS-SVAL FLOAT-WRAPPER WRAPPER-VALUE S) MAXSCORE)
      (CL:SETQ MAXSCORE (CLSYS-SVAL FLOAT-WRAPPER WRAPPER-VALUE S)))))
   (CL:RETURN-FROM COMPUTE-OR-SCORE MAXSCORE))
  :VOID)

;;; (DEFMETHOD (COMPUTE-NOT-SCORE PARTIAL-MATCH-SCORE) ...)

(CL:DEFMETHOD COMPUTE-NOT-SCORE ((SELF NAIVE-PARTIAL-MATCH))
  (CL:RETURN-FROM
   COMPUTE-NOT-SCORE
   (CL:-
    1.0
    (CLSYS-SVAL
     FLOAT-WRAPPER
     WRAPPER-VALUE
     (FIRST (CLSYS-SVAL NAIVE-PARTIAL-MATCH ARGUMENT-SCORES SELF)))))
  :VOID)

;;; (DEFCLASS INCREMENTAL-PARTIAL-MATCH ...)

(CL:DEFCLASS INCREMENTAL-PARTIAL-MATCH (PARTIAL-MATCH-FRAME)
  ((TOTAL-WEIGHT :ALLOCATION :INSTANCE :ACCESSOR TOTAL-WEIGHT...OF)
   (ACCUMULATED-SCORE :ALLOCATION :INSTANCE :ACCESSOR ACCUMULATED-SCORE...OF)
   (ACCUMULATED-WEIGHT
    :ALLOCATION
    :INSTANCE
    :ACCESSOR
    ACCUMULATED-WEIGHT...OF)
   (MAXIMUM-SCORE :ALLOCATION :INSTANCE :ACCESSOR MAXIMUM-SCORE...OF)))

(CL:DEFUN NEW-INCREMENTAL-PARTIAL-MATCH ()
  (CL:LET*
   ((SELF NULL))
   (CL:SETQ SELF (CL:MAKE-INSTANCE (CL:QUOTE INCREMENTAL-PARTIAL-MATCH)))
   (CL:SETF (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH KIND SELF) NULL)
   (CL:SETF
    (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH MAXIMUM-SCORE SELF)
    NULL-FLOAT)
   (CL:SETF
    (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH ACCUMULATED-WEIGHT SELF)
    NULL-FLOAT)
   (CL:SETF
    (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH ACCUMULATED-SCORE SELF)
    NULL-FLOAT)
   (CL:SETF
    (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH TOTAL-WEIGHT SELF)
    NULL-FLOAT)
   (CL:RETURN-FROM NEW-INCREMENTAL-PARTIAL-MATCH SELF))
  :VOID)

(CL:DEFUN ACCESS-INCREMENTAL-PARTIAL-MATCH-SLOT-VALUE (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-PARTIAL-MATCH-TOTAL-WEIGHT)
    (CL:IF
     (CL:EQ SETVALUE? 1)
     (CL:SETF
      (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH TOTAL-WEIGHT SELF)
      (CLSYS-SVAL
       FLOAT-WRAPPER
       WRAPPER-VALUE
       (CAST VALUE SGT-PARTIAL-MATCH-FLOAT-WRAPPER)))
     (CL:RETURN-FROM
      ACCESS-INCREMENTAL-PARTIAL-MATCH-SLOT-VALUE
      (WRAP-LITERAL
       (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH TOTAL-WEIGHT SELF)))))
   ((CL:EQ SLOTNAME SYM-PARTIAL-MATCH-ACCUMULATED-SCORE)
    (CL:IF
     (CL:EQ SETVALUE? 1)
     (CL:SETF
      (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH ACCUMULATED-SCORE SELF)
      (CLSYS-SVAL
       FLOAT-WRAPPER
       WRAPPER-VALUE
       (CAST VALUE SGT-PARTIAL-MATCH-FLOAT-WRAPPER)))
     (CL:RETURN-FROM
      ACCESS-INCREMENTAL-PARTIAL-MATCH-SLOT-VALUE
      (WRAP-LITERAL
       (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH ACCUMULATED-SCORE SELF)))))
   ((CL:EQ SLOTNAME SYM-PARTIAL-MATCH-ACCUMULATED-WEIGHT)
    (CL:IF
     (CL:EQ SETVALUE? 1)
     (CL:SETF
      (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH ACCUMULATED-WEIGHT SELF)
      (CLSYS-SVAL
       FLOAT-WRAPPER
       WRAPPER-VALUE
       (CAST VALUE SGT-PARTIAL-MATCH-FLOAT-WRAPPER)))
     (CL:RETURN-FROM
      ACCESS-INCREMENTAL-PARTIAL-MATCH-SLOT-VALUE
      (WRAP-LITERAL
       (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH ACCUMULATED-WEIGHT SELF)))))
   ((CL:EQ SLOTNAME SYM-PARTIAL-MATCH-MAXIMUM-SCORE)
    (CL:IF
     (CL:EQ SETVALUE? 1)
     (CL:SETF
      (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH MAXIMUM-SCORE SELF)
      (CLSYS-SVAL
       FLOAT-WRAPPER
       WRAPPER-VALUE
       (CAST VALUE SGT-PARTIAL-MATCH-FLOAT-WRAPPER)))
     (CL:RETURN-FROM
      ACCESS-INCREMENTAL-PARTIAL-MATCH-SLOT-VALUE
      (WRAP-LITERAL
       (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH MAXIMUM-SCORE SELF)))))
   (CL:T (CL:ERROR "`~A' is not a valid case option" SLOTNAME)))
  (CL:WHEN
   (CL:EQ SETVALUE? 1)
   (CL:RETURN-FROM ACCESS-INCREMENTAL-PARTIAL-MATCH-SLOT-VALUE VALUE))
  :VOID)

(CL:DEFMETHOD PRIMARY-TYPE ((SELF INCREMENTAL-PARTIAL-MATCH))
  (CL:RETURN-FROM PRIMARY-TYPE SGT-PARTIAL-MATCH-INCREMENTAL-PARTIAL-MATCH)
  :VOID)

;;; (DEFMETHOD (CREATE-PARTIAL-MATCH-FRAME PARTIAL-MATCH-FRAME) ...)

(CL:DEFMETHOD CREATE-PARTIAL-MATCH-FRAME ((SELF INCREMENTAL-PARTIAL-MATCH) FRAME KIND)
  (CL:LET*
   ((PARTIALMATCHFRAME (NEW-INCREMENTAL-PARTIAL-MATCH)))
   (CL:SETF
    (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH MAXIMUM-SCORE PARTIALMATCHFRAME)
    0.0)
   (CL:COND
    ((CL:EQ KIND KWD-PARTIAL-MATCH-AND)
     (CL:SETF
      (CLSYS-SVAL
       INCREMENTAL-PARTIAL-MATCH
       ACCUMULATED-SCORE
       PARTIALMATCHFRAME)
      0.0)
     (CL:SETF
      (CLSYS-SVAL
       INCREMENTAL-PARTIAL-MATCH
       ACCUMULATED-WEIGHT
       PARTIALMATCHFRAME)
      0.0)
     (CL:LET*
      ((TOTALWEIGHT 0.0))
      (CL:LET*
       ((ARG NULL)
        (VECTOR-001
         (CLSYS-SVAL
          PROPOSITION
          ARGUMENTS
          (CLSYS-SVAL CONTROL-FRAME PROPOSITION FRAME)))
        (INDEX-001 0)
        (LENGTH-001 (LENGTH VECTOR-001)))
       (CL:LOOP
        WHILE
        (CL:< INDEX-001 LENGTH-001)
        DO
        (CL:PROGN
         (CL:SETQ
          ARG
          (CL:AREF (CLSYS-SVAL VECTOR THE-ARRAY VECTOR-001) INDEX-001))
         (CL:SETQ INDEX-001 (CL:1+ INDEX-001)))
        (CL:SETQ
         TOTALWEIGHT
         (CL:+
          TOTALWEIGHT
          (PROPOSITION-WEIGHT (CAST ARG SGT-PARTIAL-MATCH-PROPOSITION))))))
      (CL:SETF
       (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH TOTAL-WEIGHT PARTIALMATCHFRAME)
       TOTALWEIGHT)))
    (CL:T NULL))
   (CL:RETURN-FROM CREATE-PARTIAL-MATCH-FRAME PARTIALMATCHFRAME))
  :VOID)

;;; (DEFMETHOD RECORD-PARTIAL-MATCH-SCORE ...)

(CL:DEFMETHOD RECORD-PARTIAL-MATCH-SCORE ((SELF INCREMENTAL-PARTIAL-MATCH) SCORE WEIGHT)
  (CL:LET*
   ((TEST-VALUE-001 (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH KIND SELF)))
   (CL:COND
    ((CL:EQ TEST-VALUE-001 KWD-PARTIAL-MATCH-AND)
     (CL:SETF
      (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH ACCUMULATED-SCORE SELF)
      (CL:+
       (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH ACCUMULATED-SCORE SELF)
       (CL:* SCORE WEIGHT)))
     (CL:SETF
      (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH ACCUMULATED-WEIGHT SELF)
      (CL:+
       (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH ACCUMULATED-WEIGHT SELF)
       WEIGHT)))
    ((CL:OR
      (CL:EQ TEST-VALUE-001 KWD-PARTIAL-MATCH-OR)
      (CL:EQ TEST-VALUE-001 KWD-PARTIAL-MATCH-NOT))
     (CL:WHEN
      (CL:> SCORE (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH MAXIMUM-SCORE SELF))
      (CL:SETF
       (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH MAXIMUM-SCORE SELF)
       SCORE)))
    (CL:T (CL:ERROR "`~A' is not a valid case option" TEST-VALUE-001))))
  :VOID)

;;; (DEFMETHOD (COMPUTE-AND-SCORE PARTIAL-MATCH-SCORE) ...)

(CL:DEFMETHOD COMPUTE-AND-SCORE ((SELF INCREMENTAL-PARTIAL-MATCH))
  (CL:RETURN-FROM
   COMPUTE-AND-SCORE
   (CL:/
    (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH ACCUMULATED-SCORE SELF)
    (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH TOTAL-WEIGHT SELF)))
  :VOID)

;;; (DEFMETHOD (COMPUTE-OR-SCORE PARTIAL-MATCH-SCORE) ...)

(CL:DEFMETHOD COMPUTE-OR-SCORE ((SELF INCREMENTAL-PARTIAL-MATCH))
  (CL:RETURN-FROM
   COMPUTE-OR-SCORE
   (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH MAXIMUM-SCORE SELF))
  :VOID)

;;; (DEFMETHOD (COMPUTE-NOT-SCORE PARTIAL-MATCH-SCORE) ...)

(CL:DEFMETHOD COMPUTE-NOT-SCORE ((SELF INCREMENTAL-PARTIAL-MATCH))
  (CL:RETURN-FROM
   COMPUTE-NOT-SCORE
   (CL:-
    1.0
    (CL:/
     (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH ACCUMULATED-SCORE SELF)
     (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH TOTAL-WEIGHT SELF))))
  :VOID)

;;; (DEFMETHOD (EARLY-PARTIAL-MATCH-AND-FAILURE? BOOLEAN) ...)

(CL:DEFMETHOD EARLY-PARTIAL-MATCH-AND-FAILURE? ((SELF INCREMENTAL-PARTIAL-MATCH))
  (CL:LET*
   ((MAXPOSSIBLESCORE
     (CL:/
      (CL:+
       (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH ACCUMULATED-SCORE SELF)
       (CL:-
        (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH TOTAL-WEIGHT SELF)
        (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH ACCUMULATED-WEIGHT SELF)))
      (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH TOTAL-WEIGHT SELF))))
   (CL:WHEN
    (CL:< MAXPOSSIBLESCORE *MINIMUM-SCORE-CUTOFF*)
    (CL:SETF
     (CLSYS-SVAL QUERY-ENVIRONMENT LATEST-POSITIVE-SCORE *QUERYENVIRONMENT*)
     0.0)
    (CL:RETURN-FROM EARLY-PARTIAL-MATCH-AND-FAILURE? TRUE))
   (CL:RETURN-FROM EARLY-PARTIAL-MATCH-AND-FAILURE? FALSE))
  :VOID)

;;; (DEFMETHOD (EARLY-PARTIAL-MATCH-OR-SUCCESS? BOOLEAN) ...)

(CL:DEFMETHOD EARLY-PARTIAL-MATCH-OR-SUCCESS? ((SELF INCREMENTAL-PARTIAL-MATCH))
  (CL:WHEN
   (CL:>
    (CLSYS-SVAL INCREMENTAL-PARTIAL-MATCH MAXIMUM-SCORE SELF)
    *MAXIMUM-SCORE-CUTOFF*)
   (CL:SETF
    (CLSYS-SVAL QUERY-ENVIRONMENT LATEST-POSITIVE-SCORE *QUERYENVIRONMENT*)
    1.0)
   (CL:RETURN-FROM EARLY-PARTIAL-MATCH-OR-SUCCESS? TRUE))
  (CL:RETURN-FROM EARLY-PARTIAL-MATCH-OR-SUCCESS? FALSE)
  :VOID)

;;; (DEFUN CREATE-AND-LINK-PARTIAL-MATCH-FRAME ...)

(CL:DEFUN CREATE-AND-LINK-PARTIAL-MATCH-FRAME (FRAME KIND)
  (CL:LET*
   ((STRATEGY
     (CLSYS-SVAL QUERY-ENVIRONMENT PARTIAL-MATCH-STRATEGY *QUERYENVIRONMENT*))
    (PARTIALMATCHFRAME (CREATE-PARTIAL-MATCH-FRAME STRATEGY FRAME KIND)))
   (CL:SETF (CLSYS-SVAL PARTIAL-MATCH-FRAME KIND PARTIALMATCHFRAME) KIND)
   (CL:SETF
    (CLSYS-SVAL CONTROL-FRAME PARTIAL-MATCH-FRAME FRAME)
    PARTIALMATCHFRAME))
  :VOID)

;;; (DEFUN RECORD-LATEST-PARTIAL-MATCH-SCORE ...)

(CL:DEFUN RECORD-LATEST-PARTIAL-MATCH-SCORE (FRAME)
  (RECORD-PARTIAL-MATCH-SCORE
   (CLSYS-SVAL CONTROL-FRAME PARTIAL-MATCH-FRAME FRAME)
   (CLSYS-SVAL QUERY-ENVIRONMENT LATEST-POSITIVE-SCORE *QUERYENVIRONMENT*)
   (PROPOSITION-WEIGHT (CLSYS-SVAL CONTROL-FRAME PROPOSITION FRAME)))
  :VOID)

;;; (DEFUN (COMPUTE-PARTIAL-MATCH-AND-FAILURE? BOOLEAN) ...)

(CL:DEFUN COMPUTE-PARTIAL-MATCH-AND-FAILURE? (FRAME)
  (CL:RETURN-FROM
   COMPUTE-PARTIAL-MATCH-AND-FAILURE?
   (EARLY-PARTIAL-MATCH-AND-FAILURE?
    (CLSYS-SVAL CONTROL-FRAME PARTIAL-MATCH-FRAME FRAME)))
  :VOID)

;;; (DEFUN (COMPUTE-PARTIAL-MATCH-OR-SUCCESS? BOOLEAN) ...)

(CL:DEFUN COMPUTE-PARTIAL-MATCH-OR-SUCCESS? (FRAME)
  (CL:RETURN-FROM
   COMPUTE-PARTIAL-MATCH-OR-SUCCESS?
   (EARLY-PARTIAL-MATCH-OR-SUCCESS?
    (CLSYS-SVAL CONTROL-FRAME PARTIAL-MATCH-FRAME FRAME)))
  :VOID)

;;; (DEFUN (COMPUTE-PARTIAL-MATCH-SCORE? BOOLEAN) ...)

(CL:DEFUN COMPUTE-PARTIAL-MATCH-SCORE? (FRAME)
  (CL:LET*
   ((PARTIALMATCHFRAME (CLSYS-SVAL CONTROL-FRAME PARTIAL-MATCH-FRAME FRAME))
    (SCORE NULL-FLOAT))
   (CL:LET*
    ((TEST-VALUE-001 (CLSYS-SVAL PARTIAL-MATCH-FRAME KIND PARTIALMATCHFRAME)))
    (CL:COND
     ((CL:EQ TEST-VALUE-001 KWD-PARTIAL-MATCH-AND)
      (CL:SETQ SCORE (COMPUTE-AND-SCORE PARTIALMATCHFRAME)))
     ((CL:EQ TEST-VALUE-001 KWD-PARTIAL-MATCH-OR)
      (CL:SETQ SCORE (COMPUTE-OR-SCORE PARTIALMATCHFRAME)))
     ((CL:EQ TEST-VALUE-001 KWD-PARTIAL-MATCH-NOT)
      (CL:SETQ SCORE (COMPUTE-NOT-SCORE PARTIALMATCHFRAME)))
     (CL:T (CL:ERROR "`~A' is not a valid case option" TEST-VALUE-001))))
   (CL:SETQ SCORE (CLIP-POSITIVE-SCORE PARTIALMATCHFRAME SCORE))
   (CL:SETF
    (CLSYS-SVAL QUERY-ENVIRONMENT LATEST-POSITIVE-SCORE *QUERYENVIRONMENT*)
    SCORE)
   (CL:RETURN-FROM
    COMPUTE-PARTIAL-MATCH-SCORE?
    (CL:IF (CL:NOT (CL:= SCORE 0.0)) TRUE FALSE)))
  :VOID)

(CL:DEFUN STARTUP-PARTIAL-MATCH ()
  (CL:LET*
   ((*MODULE* (GET-MODULE "/LOGIC" TRUE)) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 2) 1)
    (CL:SETQ
     SYM-PARTIAL-MATCH-KIND
     (INTERN-RIGID-SYMBOL-WRT-MODULE "KIND" NULL 0))
    (CL:SETQ
     SGT-PARTIAL-MATCH-KEYWORD
     (INTERN-RIGID-SYMBOL-WRT-MODULE "KEYWORD" (GET-MODULE "/STELLA" TRUE) 1))
    (CL:SETQ
     SYM-PARTIAL-MATCH-ARGUMENT-SCORES
     (INTERN-RIGID-SYMBOL-WRT-MODULE "ARGUMENT-SCORES" NULL 0))
    (CL:SETQ
     SYM-PARTIAL-MATCH-ARGUMENT-WEIGHTS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "ARGUMENT-WEIGHTS" NULL 0))
    (CL:SETQ
     SGT-PARTIAL-MATCH-CONS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CONS" (GET-MODULE "/STELLA" TRUE) 1))
    (CL:SETQ
     SGT-PARTIAL-MATCH-NAIVE-PARTIAL-MATCH
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NAIVE-PARTIAL-MATCH" NULL 1))
    (CL:SETQ
     KWD-PARTIAL-MATCH-AND
     (INTERN-RIGID-SYMBOL-WRT-MODULE "AND" NULL 2))
    (CL:SETQ
     SGT-PARTIAL-MATCH-FLOAT-WRAPPER
     (INTERN-RIGID-SYMBOL-WRT-MODULE
      "FLOAT-WRAPPER"
      (GET-MODULE "/STELLA" TRUE)
      1))
    (CL:SETQ
     SYM-PARTIAL-MATCH-TOTAL-WEIGHT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "TOTAL-WEIGHT" NULL 0))
    (CL:SETQ
     SYM-PARTIAL-MATCH-ACCUMULATED-SCORE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "ACCUMULATED-SCORE" NULL 0))
    (CL:SETQ
     SYM-PARTIAL-MATCH-ACCUMULATED-WEIGHT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "ACCUMULATED-WEIGHT" NULL 0))
    (CL:SETQ
     SYM-PARTIAL-MATCH-MAXIMUM-SCORE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MAXIMUM-SCORE" NULL 0))
    (CL:SETQ
     SGT-PARTIAL-MATCH-INCREMENTAL-PARTIAL-MATCH
     (INTERN-RIGID-SYMBOL-WRT-MODULE "INCREMENTAL-PARTIAL-MATCH" NULL 1))
    (CL:SETQ
     SGT-PARTIAL-MATCH-PROPOSITION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PROPOSITION" NULL 1))
    (CL:SETQ
     KWD-PARTIAL-MATCH-OR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "OR" NULL 2))
    (CL:SETQ
     KWD-PARTIAL-MATCH-NOT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NOT" NULL 2)))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 5) 1)
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE
        "PARTIAL-MATCH-FRAME"
        "(DEFCLASS PARTIAL-MATCH-FRAME (STANDARD-OBJECT) :DOCUMENTATION \"Abstract class acting as placeholder for system and
user-defined partial match implementations.\" :ABSTRACT? TRUE :SLOTS ((KIND :TYPE KEYWORD)))")))
     (CL:SETF
      (CLSYS-SVAL CLASS CLASS-SLOT-ACCESSOR-CODE CLASS)
      (CL:FUNCTION ACCESS-PARTIAL-MATCH-FRAME-SLOT-VALUE)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE
        "NAIVE-PARTIAL-MATCH"
        "(DEFCLASS NAIVE-PARTIAL-MATCH (PARTIAL-MATCH-FRAME) :SLOTS ((ARGUMENT-SCORES :TYPE (CONS OF FLOAT-WRAPPER)) (ARGUMENT-WEIGHTS :TYPE (CONS OF FLOAT-WRAPPER))))")))
     (CL:SETF
      (CLSYS-SVAL CLASS CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-NAIVE-PARTIAL-MATCH))
     (CL:SETF
      (CLSYS-SVAL CLASS CLASS-SLOT-ACCESSOR-CODE CLASS)
      (CL:FUNCTION ACCESS-NAIVE-PARTIAL-MATCH-SLOT-VALUE)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE
        "INCREMENTAL-PARTIAL-MATCH"
        "(DEFCLASS INCREMENTAL-PARTIAL-MATCH (PARTIAL-MATCH-FRAME) :SLOTS ((TOTAL-WEIGHT :TYPE FLOAT) (ACCUMULATED-SCORE :TYPE PARTIAL-MATCH-SCORE) (ACCUMULATED-WEIGHT :TYPE FLOAT) (MAXIMUM-SCORE :TYPE PARTIAL-MATCH-SCORE)))")))
     (CL:SETF
      (CLSYS-SVAL CLASS CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-INCREMENTAL-PARTIAL-MATCH))
     (CL:SETF
      (CLSYS-SVAL CLASS CLASS-SLOT-ACCESSOR-CODE CLASS)
      (CL:FUNCTION ACCESS-INCREMENTAL-PARTIAL-MATCH-SLOT-VALUE))))
   (CL:WHEN (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 6) 1) (FINALIZE-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 7) 1)
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "RESET-COMBINATOR-SETTINGS"
        NULL
        "(DEFUN RESET-COMBINATOR-SETTINGS () :DOCUMENTATION \"Reset the partial match combinator functions to
the system-defined default settings.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION RESET-COMBINATOR-SETTINGS)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "PROPOSITION-WEIGHT"
        "PROPOSITION"
        "(DEFUN (PROPOSITION-WEIGHT FLOAT) ((PROPOSITION PROPOSITION)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION PROPOSITION-WEIGHT)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CREATE-PARTIAL-MATCH-FRAME"
        "PARTIAL-MATCH-FRAME"
        "(DEFMETHOD (CREATE-PARTIAL-MATCH-FRAME PARTIAL-MATCH-FRAME) ((SELF PARTIAL-MATCH-FRAME) (FRAME CONTROL-FRAME) (KIND KEYWORD)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION CREATE-PARTIAL-MATCH-FRAME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "RECORD-PARTIAL-MATCH-SCORE"
        "PARTIAL-MATCH-FRAME"
        "(DEFMETHOD RECORD-PARTIAL-MATCH-SCORE ((SELF PARTIAL-MATCH-FRAME) (SCORE PARTIAL-MATCH-SCORE) (WEIGHT FLOAT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION RECORD-PARTIAL-MATCH-SCORE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "COMPUTE-AND-SCORE"
        "PARTIAL-MATCH-FRAME"
        "(DEFMETHOD (COMPUTE-AND-SCORE PARTIAL-MATCH-SCORE) ((SELF PARTIAL-MATCH-FRAME)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION COMPUTE-AND-SCORE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "COMPUTE-OR-SCORE"
        "PARTIAL-MATCH-FRAME"
        "(DEFMETHOD (COMPUTE-OR-SCORE PARTIAL-MATCH-SCORE) ((SELF PARTIAL-MATCH-FRAME)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION COMPUTE-OR-SCORE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "COMPUTE-NOT-SCORE"
        "PARTIAL-MATCH-FRAME"
        "(DEFMETHOD (COMPUTE-NOT-SCORE PARTIAL-MATCH-SCORE) ((SELF PARTIAL-MATCH-FRAME)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION COMPUTE-NOT-SCORE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "EARLY-PARTIAL-MATCH-AND-FAILURE?"
        "PARTIAL-MATCH-FRAME"
        "(DEFMETHOD (EARLY-PARTIAL-MATCH-AND-FAILURE? BOOLEAN) ((SELF PARTIAL-MATCH-FRAME)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION EARLY-PARTIAL-MATCH-AND-FAILURE?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "EARLY-PARTIAL-MATCH-OR-SUCCESS?"
        "PARTIAL-MATCH-FRAME"
        "(DEFMETHOD (EARLY-PARTIAL-MATCH-OR-SUCCESS? BOOLEAN) ((SELF PARTIAL-MATCH-FRAME)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION EARLY-PARTIAL-MATCH-OR-SUCCESS?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CLIP-POSITIVE-SCORE"
        "PARTIAL-MATCH-FRAME"
        "(DEFMETHOD (CLIP-POSITIVE-SCORE PARTIAL-MATCH-SCORE) ((SELF PARTIAL-MATCH-FRAME) (SCORE FLOAT)) :DOCUMENTATION \"If 'score' is below the minimum or
above the maximum, make it zero or one.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION CLIP-POSITIVE-SCORE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "COMPUTE-RULE-SCORE"
        "PARTIAL-MATCH-FRAME"
        "(DEFMETHOD (COMPUTE-RULE-SCORE PARTIAL-MATCH-SCORE) ((SELF PARTIAL-MATCH-FRAME) (ANTECEDENTSCORE PARTIAL-MATCH-SCORE) (RULESCORE TRUTH-VALUE)) :DOCUMENTATION \"Return a score representing the combination of
'antecedentScore', the score for the match of a rule antecedent, and
'ruleScore', the score assigned to the rule being interpreted.\")")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION COMPUTE-RULE-SCORE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CREATE-PARTIAL-MATCH-FRAME"
        "NAIVE-PARTIAL-MATCH"
        "(DEFMETHOD (CREATE-PARTIAL-MATCH-FRAME PARTIAL-MATCH-FRAME) ((SELF NAIVE-PARTIAL-MATCH) (FRAME CONTROL-FRAME) (KIND KEYWORD)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION CREATE-PARTIAL-MATCH-FRAME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "RECORD-PARTIAL-MATCH-SCORE"
        "NAIVE-PARTIAL-MATCH"
        "(DEFMETHOD RECORD-PARTIAL-MATCH-SCORE ((SELF NAIVE-PARTIAL-MATCH) (SCORE PARTIAL-MATCH-SCORE) (WEIGHT FLOAT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION RECORD-PARTIAL-MATCH-SCORE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "COMPUTE-AND-SCORE"
        "NAIVE-PARTIAL-MATCH"
        "(DEFMETHOD (COMPUTE-AND-SCORE PARTIAL-MATCH-SCORE) ((SELF NAIVE-PARTIAL-MATCH)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION COMPUTE-AND-SCORE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "COMPUTE-OR-SCORE"
        "NAIVE-PARTIAL-MATCH"
        "(DEFMETHOD (COMPUTE-OR-SCORE PARTIAL-MATCH-SCORE) ((SELF NAIVE-PARTIAL-MATCH)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION COMPUTE-OR-SCORE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "COMPUTE-NOT-SCORE"
        "NAIVE-PARTIAL-MATCH"
        "(DEFMETHOD (COMPUTE-NOT-SCORE PARTIAL-MATCH-SCORE) ((SELF NAIVE-PARTIAL-MATCH)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION COMPUTE-NOT-SCORE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CREATE-PARTIAL-MATCH-FRAME"
        "INCREMENTAL-PARTIAL-MATCH"
        "(DEFMETHOD (CREATE-PARTIAL-MATCH-FRAME PARTIAL-MATCH-FRAME) ((SELF INCREMENTAL-PARTIAL-MATCH) (FRAME CONTROL-FRAME) (KIND KEYWORD)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION CREATE-PARTIAL-MATCH-FRAME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "RECORD-PARTIAL-MATCH-SCORE"
        "INCREMENTAL-PARTIAL-MATCH"
        "(DEFMETHOD RECORD-PARTIAL-MATCH-SCORE ((SELF INCREMENTAL-PARTIAL-MATCH) (SCORE PARTIAL-MATCH-SCORE) (WEIGHT FLOAT)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION RECORD-PARTIAL-MATCH-SCORE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "COMPUTE-AND-SCORE"
        "INCREMENTAL-PARTIAL-MATCH"
        "(DEFMETHOD (COMPUTE-AND-SCORE PARTIAL-MATCH-SCORE) ((SELF INCREMENTAL-PARTIAL-MATCH)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION COMPUTE-AND-SCORE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "COMPUTE-OR-SCORE"
        "INCREMENTAL-PARTIAL-MATCH"
        "(DEFMETHOD (COMPUTE-OR-SCORE PARTIAL-MATCH-SCORE) ((SELF INCREMENTAL-PARTIAL-MATCH)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION COMPUTE-OR-SCORE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "COMPUTE-NOT-SCORE"
        "INCREMENTAL-PARTIAL-MATCH"
        "(DEFMETHOD (COMPUTE-NOT-SCORE PARTIAL-MATCH-SCORE) ((SELF INCREMENTAL-PARTIAL-MATCH)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION COMPUTE-NOT-SCORE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "EARLY-PARTIAL-MATCH-AND-FAILURE?"
        "INCREMENTAL-PARTIAL-MATCH"
        "(DEFMETHOD (EARLY-PARTIAL-MATCH-AND-FAILURE? BOOLEAN) ((SELF INCREMENTAL-PARTIAL-MATCH)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION EARLY-PARTIAL-MATCH-AND-FAILURE?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "EARLY-PARTIAL-MATCH-OR-SUCCESS?"
        "INCREMENTAL-PARTIAL-MATCH"
        "(DEFMETHOD (EARLY-PARTIAL-MATCH-OR-SUCCESS? BOOLEAN) ((SELF INCREMENTAL-PARTIAL-MATCH)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT METHOD-CODE METHOD)
      (CL:FUNCTION EARLY-PARTIAL-MATCH-OR-SUCCESS?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "CREATE-AND-LINK-PARTIAL-MATCH-FRAME"
        "CONTROL-FRAME"
        "(DEFUN CREATE-AND-LINK-PARTIAL-MATCH-FRAME ((FRAME CONTROL-FRAME) (KIND KEYWORD)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION CREATE-AND-LINK-PARTIAL-MATCH-FRAME)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "RECORD-LATEST-PARTIAL-MATCH-SCORE"
        "CONTROL-FRAME"
        "(DEFUN RECORD-LATEST-PARTIAL-MATCH-SCORE ((FRAME CONTROL-FRAME)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION RECORD-LATEST-PARTIAL-MATCH-SCORE)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "COMPUTE-PARTIAL-MATCH-AND-FAILURE?"
        "CONTROL-FRAME"
        "(DEFUN (COMPUTE-PARTIAL-MATCH-AND-FAILURE? BOOLEAN) ((FRAME CONTROL-FRAME)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION COMPUTE-PARTIAL-MATCH-AND-FAILURE?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "COMPUTE-PARTIAL-MATCH-OR-SUCCESS?"
        "CONTROL-FRAME"
        "(DEFUN (COMPUTE-PARTIAL-MATCH-OR-SUCCESS? BOOLEAN) ((FRAME CONTROL-FRAME)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION COMPUTE-PARTIAL-MATCH-OR-SUCCESS?)))
    (CL:LET*
     ((METHOD
       (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
        "COMPUTE-PARTIAL-MATCH-SCORE?"
        "CONTROL-FRAME"
        "(DEFUN (COMPUTE-PARTIAL-MATCH-SCORE? BOOLEAN) ((FRAME CONTROL-FRAME)))")))
     (CL:SETF
      (CLSYS-SVAL METHOD-SLOT FUNCTION-CODE METHOD)
      (CL:FUNCTION COMPUTE-PARTIAL-MATCH-SCORE?)))
    (DEFINE-METHOD-FROM-STRINGIFIED-SOURCE
     "STARTUP-PARTIAL-MATCH"
     NULL
     "(DEFUN STARTUP-PARTIAL-MATCH ())"))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 8) 1)
    (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN
    (CL:EQ (CURRENT-STARTUP-TIME-PHASE? 9) 1)
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *MINIMUM-SCORE-CUTOFF* PARTIAL-MATCH-SCORE 0.0 :DOCUMENTATION \"Positive scores below *minimum-score-cutoff* get trimmed
to 0.0 during partial match operations.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *MAXIMUM-SCORE-CUTOFF* PARTIAL-MATCH-SCORE 0.0 :DOCUMENTATION \"Positive scores above *maximum-score-cutoff* get trimmed
to 1.0 during partial match operations.\")")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *DEFAULT-MINIMUM-SCORE* PARTIAL-MATCH-SCORE 0.0)")
    (DEFINE-STELLA-GLOBAL-VARIABLE-FROM-STRINGIFIED-SOURCE
     "(DEFGLOBAL *DEFAULT-MAXIMUM-SCORE* PARTIAL-MATCH-SCORE 0.0)")
    (RESET-COMBINATOR-SETTINGS)))
  :VOID)
