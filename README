-*- Mode: Text -*-

POWERLOOM 2.0 INSTALLATION GUIDE

Copyright (C) USC Information Sciences Institute, 1997-2001
See the file `COPYRIGHT' for detailed copyright information.


GENERAL INFORMATION

PowerLoom is the successor to the Loom knowledge representation system. It
provides a language and environment for constructing intelligent
applications. PowerLoom uses a fully expressive, logic-based representation
language (a variant of KIF), and it uses a natural-deduction-style backward
and forward chainer as its inference engine.  The inference engine is not a
complete first-order theorem prover, but it can handle complex implication
rules, negation, equality reasoning, subsumption, and restricted forms of
higher order reasoning.  PowerLoom has a classifier that is able to classify
descriptions expressed in full first order predicate calculus.  PowerLoom uses
modules as a structuring device for knowledge bases, and ultra-lightweight
worlds to support hypothetical reasoning.


POWERLOOM 2.0 PRE-RELEASE

This is a pre-release of PowerLoom 2.0.  Its purpose is to give
prospective users a chance to try out PowerLoom 2.0 before the official
release becomes available.  The main things remaining to be done for the final
release are consolidating the API, packaging up the OntoSaurus browser, better
integrating the XML support, completing the implementation of default
reasoning, tying up various loose ends, fixing a variety of bugs, and
providing better documentation.  Some of these issues are very close to being
done, others might take longer to be fully resolved.


SYSTEM REQUIREMENTS

To try out the Java version of PowerLoom you need Java 2 Standard Edition
version 1.2 (aka JDK 1.2) or higher installed on your computer.  We've
successfully installed this version under SunOS 5.6, Linux Redhat 6.1, Windows
98, Windows NT, and Mac OS X.  On other systems your milage may vary.

To try out the Lisp version of PowerLoom you need a full ANSI Common Lisp
installed on your computer.  We've successfully installed this version using
Allegro CL 5.0 under SunOS 5.6 and Linux Redhat 6.1, CMU Common Lisp 18c under
Linux Redhat 6.1, and with Mac Common-Lisp 4.2 and higher.  While we haven't
tried this recently, using Allegro CL 5.0 on a Windows platform should also
work without too much trouble.  Again, using other Lisp systems or platforms
your milage may vary.


INSTALLATION

JAVA INSTALLATION

First copy the PowerLoom release to a directory of your choice and then unpack
it by running

    jar xvf powerloom-M.N.P.S.jar

(substitute the proper version numbers for M.N.P.S).  This will create a
directory `powerloom-M.N.P.S' that contains the actual `powerloom.jar' file
plus some additional support files.


LISP INSTALLATION

First copy the PowerLoom release to a directory of your choice and then unpack
it by running

        % gunzip -qc powerloom-M.N.P.S.tar.gz | tar xvf -

(substitute the proper version numbers for M.N.P.S).  This will create a
directory `powerloom-M.N.P.S' that contains the Lisp version of PowerLoom plus
some additional support files.

Then startup Lisp and load the file

        (load "load-powerloom.lisp")

The first time around this will compile all Lisp files before they are
loaded.  During subsequent sessions the compiled files will be loaded
right away.


RUNNING POWERLOOM

RUNNING POWERLOOM IN JAVA

To run PowerLoom, run a shell or terminal window in the directory
`powerloom-M.N.P.S' into which you un-jarred this pre-release and execute the
following command (currently, PowerLoom has only a command line interface but
no GUI):

    java -jar powerloom.jar

If you run it from a different directory, PowerLoom will still run, but it
won't be able to automatically find various example files.

After PowerLoom has been initialized and you see the `|=' prompt, type

    (demo)

which will give you a list of PowerLoom demo files to choose from.  Most of
these demo files are heavily annotated and are currently the only form of
PowerLoom documentation we have.  To step through a demo file, simply hit
`enter' after each pause prompt.  You should go at least through the first
five demo files in sequence to get a good overview of basic PowerLoom
concepts.

If you are running PowerLoom in a different directory than the one you
installed it in, it won't find these demo files.  However, you can still run
the individual demos by supplying the demo filename explicitly.  For example,
to demo the file

    PL:sources;logic;demos;basics.ste

and PowerLoom is installed in, say, /usr/local/powerloom-2.0.0.alpha-, you
would run the demo as

    (demo "/usr/local/powerloom-2.0.0.alpha-/sources/logic/demos/basics.ste")

Once you've familiarized yourself with PowerLoom, you can start to define your
own knowledge bases either by typing in at the PowerLoom prompt, or by
generating files that you can then load into PowerLoom with the `load'
command.


RUNNING POWERLOOM IN LISP

Startup Lisp and load the file `load-powerloom.lisp'.  When loading
has completed type

        (powerloom)

After PowerLoom has been initialized and you see the `|=' prompt, type

        (demo)

which will give you a list of PowerLoom demo files to choose from.  Most of
these demo files are heavily annotated and are currently the only form of
PowerLoom documentation we have.  To step through a demo file, simply hit
`enter' after each pause prompt.  You should go at least through the first
five demo files in sequence to get a good overview of basic PowerLoom
concepts.

Alternatively to using the PowerLoom listener, you can switch to the STELLA
package, e.g., type

        (in-package "STELLA")

and then execute the various PowerLoom commands directly from the Lisp top
level. 

IMPORTANT: The STELLA package does not inherit anything from the
COMMON-LISP (or CL) package (see `native/lisp/stella/cl-lib/cl-setup.lisp'
for the few exceptions), hence, you have to explicitly qualify every
Lisp symbol you want to use with `CL:'.  E.g., to get the result of the
previous evaluation you have to use `CL:*'.  In some situations, this
also causes problems for the Allegro-CL Emacs/Lisp interface.  For
example, starting up Allegro Composer does not work while your Lisp
listener is in the STELLA package.  You have to switch back to the
CL-USER package to start it, or start it before you switch to the STELLA
package.

To reduce startup time, you might want to create a Lisp image that has all of
PowerLoom preloaded.


BUG REPORTS, QUESTIONS, AND COMMENTS

If you do encounter a bug or have a question or comment, please let us know.
The best way to do so is to send e-mail to `powerloom-forum-request@isi.edu'.
If you think your question or comment might be relevant to the general
PowerLoom user community, you can send mail to `powerloom-forum@isi.edu'
instead.  If you want to be added to that mailing list please send e-mail to
`powerloom-forum-request@isi.edu'.

If you encounter a bug, please provide us with as much information as possible
to reproduce it.  In particular, let us know which version of PowerLoom you
are using (the version number is printed as part of the startup banner of the
PowerLoom listener).
